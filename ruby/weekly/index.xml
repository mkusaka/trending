<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-26T02:01:45Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ruby-grape/grape</title>
    <updated>2023-03-26T02:01:45Z</updated>
    <id>tag:github.com,2023-03-26:/ruby-grape/grape</id>
    <link href="https://github.com/ruby-grape/grape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opinionated framework for creating REST-like APIs in Ruby.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/grape.png&#34; alt=&#34;grape logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/grape&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/grape.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ruby-grape/grape/actions&#34;&gt;&lt;img src=&#34;https://github.com/ruby-grape/grape/workflows/test/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/ruby-grape/grape&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/ruby-grape/grape.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/ruby-grape/grape?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/ruby-grape/grape/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inch-ci.org/github/ruby-grape/grape&#34;&gt;&lt;img src=&#34;https://inch-ci.org/github/ruby-grape/grape.svg?sanitize=true&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/ruby-grape/grape?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/ruby-grape/grape.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/ruby-grape/grape&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#what-is-grape&#34;&gt;What is Grape?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#stable-release&#34;&gt;Stable Release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#project-resources&#34;&gt;Project Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#grape-for-enterprise&#34;&gt;Grape for Enterprise&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#basic-usage&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#mounting&#34;&gt;Mounting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#all&#34;&gt;All&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rack&#34;&gt;Rack&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#activerecord-without-rails&#34;&gt;ActiveRecord without Rails&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails-4&#34;&gt;Rails 4&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails-5&#34;&gt;Rails 5+&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#alongside-sinatra-or-other-frameworks&#34;&gt;Alongside Sinatra (or other frameworks)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails&#34;&gt;Rails&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails--52&#34;&gt;Rails &amp;lt; 5.2&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails-60&#34;&gt;Rails 6.0&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#modules&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#remounting&#34;&gt;Remounting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#mount-configuration&#34;&gt;Mount Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#versioning&#34;&gt;Versioning&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#path&#34;&gt;Path&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#accept-version-header&#34;&gt;Accept-Version Header&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#param&#34;&gt;Param&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#describing-methods&#34;&gt;Describing Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#parameters&#34;&gt;Parameters&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#params-class&#34;&gt;Params Class&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#declared&#34;&gt;Declared&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#include-parent-namespaces&#34;&gt;Include Parent Namespaces&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#include-missing&#34;&gt;Include Missing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#evaluate-given&#34;&gt;Evaluate Given&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#parameter-validation-and-coercion&#34;&gt;Parameter Validation and Coercion&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#supported-parameter-types&#34;&gt;Supported Parameter Types&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#integerfixnum-and-coercions&#34;&gt;Integer/Fixnum and Coercions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#custom-types-and-coercions&#34;&gt;Custom Types and Coercions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#multipart-file-parameters&#34;&gt;Multipart File Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#first-class-json-types&#34;&gt;First-Class JSON Types&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#multiple-allowed-types&#34;&gt;Multiple Allowed Types&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#validation-of-nested-parameters&#34;&gt;Validation of Nested Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#dependent-parameters&#34;&gt;Dependent Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#group-options&#34;&gt;Group Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#renaming&#34;&gt;Renaming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#built-in-validators&#34;&gt;Built-in Validators&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#allow_blank&#34;&gt;allow_blank&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#values&#34;&gt;values&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#except_values&#34;&gt;except_values&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#same_as&#34;&gt;same_as&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#regexp&#34;&gt;regexp&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#mutually_exclusive&#34;&gt;mutually_exclusive&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#exactly_one_of&#34;&gt;exactly_one_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#at_least_one_of&#34;&gt;at_least_one_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#all_or_none_of&#34;&gt;all_or_none_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#nested-mutually_exclusive-exactly_one_of-at_least_one_of-all_or_none_of&#34;&gt;Nested mutually_exclusive, exactly_one_of, at_least_one_of, all_or_none_of&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#namespace-validation-and-coercion&#34;&gt;Namespace Validation and Coercion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#custom-validators&#34;&gt;Custom Validators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#validation-errors&#34;&gt;Validation Errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#i18n&#34;&gt;I18n&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#custom-validation-messages&#34;&gt;Custom Validation messages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#presence-allow_blank-values-regexp&#34;&gt;presence, allow_blank, values, regexp&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#same_as-1&#34;&gt;same_as&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#all_or_none_of-1&#34;&gt;all_or_none_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#mutually_exclusive-1&#34;&gt;mutually_exclusive&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#exactly_one_of-1&#34;&gt;exactly_one_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#at_least_one_of-1&#34;&gt;at_least_one_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#coerce&#34;&gt;Coerce&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#with-lambdas&#34;&gt;With Lambdas&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#pass-symbols-for-i18n-translations&#34;&gt;Pass symbols for i18n translations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#overriding-attribute-names&#34;&gt;Overriding Attribute Names&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#with-default&#34;&gt;With Default&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#headers&#34;&gt;Headers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#request&#34;&gt;Request&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#header-case-handling&#34;&gt;Header Case Handling&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#response&#34;&gt;Response&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#routes&#34;&gt;Routes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#helpers&#34;&gt;Helpers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#path-helpers&#34;&gt;Path Helpers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#parameter-documentation&#34;&gt;Parameter Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#cookies&#34;&gt;Cookies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#http-status-code&#34;&gt;HTTP Status Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#redirecting&#34;&gt;Redirecting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#recognizing-path&#34;&gt;Recognizing Path&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#allowed-methods&#34;&gt;Allowed Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#raising-exceptions&#34;&gt;Raising Exceptions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#default-error-http-status-code&#34;&gt;Default Error HTTP Status Code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#handling-404&#34;&gt;Handling 404&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#exception-handling&#34;&gt;Exception Handling&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rescuing-exceptions-inside-namespaces&#34;&gt;Rescuing exceptions inside namespaces&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#unrescuable-exceptions&#34;&gt;Unrescuable Exceptions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#exceptions-that-should-be-rescued-explicitly&#34;&gt;Exceptions that should be rescued explicitly&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails-3x&#34;&gt;Rails 3.x&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#api-formats&#34;&gt;API Formats&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#jsonp&#34;&gt;JSONP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#cors&#34;&gt;CORS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#content-type&#34;&gt;Content-type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#api-data-formats&#34;&gt;API Data Formats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#json-and-xml-processors&#34;&gt;JSON and XML Processors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#restful-model-representations&#34;&gt;RESTful Model Representations&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#grape-entities&#34;&gt;Grape Entities&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#hypermedia-and-roar&#34;&gt;Hypermedia and Roar&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rabl&#34;&gt;Rabl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#active-model-serializers&#34;&gt;Active Model Serializers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#sending-raw-or-no-data&#34;&gt;Sending Raw or No Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#authentication&#34;&gt;Authentication&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#basic-and-digest-auth&#34;&gt;Basic and Digest Auth&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#register-custom-middleware-for-authentication&#34;&gt;Register custom middleware for authentication&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#describing-and-inspecting-an-api&#34;&gt;Describing and Inspecting an API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#current-route-and-endpoint&#34;&gt;Current Route and Endpoint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#before-after-and-finally&#34;&gt;Before, After and Finally&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#anchoring&#34;&gt;Anchoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#using-custom-middleware&#34;&gt;Using Custom Middleware&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#grape-middleware&#34;&gt;Grape Middleware&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails-middleware&#34;&gt;Rails Middleware&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#remote-ip&#34;&gt;Remote IP&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#writing-tests&#34;&gt;Writing Tests&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#writing-tests-with-rack&#34;&gt;Writing Tests with Rack&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rspec&#34;&gt;RSpec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#airborne&#34;&gt;Airborne&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#minitest&#34;&gt;MiniTest&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#writing-tests-with-rails&#34;&gt;Writing Tests with Rails&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rspec-1&#34;&gt;RSpec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#minitest-1&#34;&gt;MiniTest&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#stubbing-helpers&#34;&gt;Stubbing Helpers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#reloading-api-changes-in-development&#34;&gt;Reloading API Changes in Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#reloading-in-rack-applications&#34;&gt;Reloading in Rack Applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#reloading-in-rails-applications&#34;&gt;Reloading in Rails Applications&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#performance-monitoring&#34;&gt;Performance Monitoring&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#active-support-instrumentation&#34;&gt;Active Support Instrumentation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#endpoint_rungrape&#34;&gt;endpoint_run.grape&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#endpoint_rendergrape&#34;&gt;endpoint_render.grape&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#endpoint_run_filtersgrape&#34;&gt;endpoint_run_filters.grape&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#endpoint_run_validatorsgrape&#34;&gt;endpoint_run_validators.grape&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#format_responsegrape&#34;&gt;format_response.grape&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#monitoring-products&#34;&gt;Monitoring Products&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#contributing-to-grape&#34;&gt;Contributing to Grape&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is Grape?&lt;/h2&gt; &#xA;&lt;p&gt;Grape is a REST-like API framework for Ruby. It&#39;s designed to run on Rack or complement existing web application frameworks such as Rails and Sinatra by providing a simple DSL to easily develop RESTful APIs. It has built-in support for common conventions, including multiple formats, subdomain/prefix restriction, content negotiation, versioning and much more.&lt;/p&gt; &#xA;&lt;h2&gt;Stable Release&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;re reading the documentation for the next release of Grape, which should be &lt;strong&gt;1.7.1&lt;/strong&gt;. Please read &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/UPGRADING.md&#34;&gt;UPGRADING&lt;/a&gt; when upgrading from a previous version. The current stable release is &lt;a href=&#34;https://github.com/ruby-grape/grape/raw/v1.7.0/README.md&#34;&gt;1.7.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ruby-grape.org&#34;&gt;Grape Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/gems/grape&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Need help? Try &lt;a href=&#34;http://groups.google.com/group/ruby-grape&#34;&gt;Grape Google Group&lt;/a&gt; or &lt;a href=&#34;https://gitter.im/ruby-grape/grape&#34;&gt;Gitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/grapeframework&#34;&gt;Follow us on Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Grape for Enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of Grape are working with Tidelift to deliver commercial support and maintenance. Save time, reduce risk, and improve code health, while paying the maintainers of Grape. Click &lt;a href=&#34;https://tidelift.com/subscription/request-a-demo?utm_source=rubygems-grape&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Ruby 2.4 or newer is required.&lt;/p&gt; &#xA;&lt;p&gt;Grape is available as a gem, to install it run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle add grape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Grape APIs are Rack applications that are created by subclassing &lt;code&gt;Grape::API&lt;/code&gt;. Below is a simple example showing some of the more common features of Grape in the context of recreating parts of the Twitter API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Twitter&#xA;  class API &amp;lt; Grape::API&#xA;    version &#39;v1&#39;, using: :header, vendor: &#39;twitter&#39;&#xA;    format :json&#xA;    prefix :api&#xA;&#xA;    helpers do&#xA;      def current_user&#xA;        @current_user ||= User.authorize!(env)&#xA;      end&#xA;&#xA;      def authenticate!&#xA;        error!(&#39;401 Unauthorized&#39;, 401) unless current_user&#xA;      end&#xA;    end&#xA;&#xA;    resource :statuses do&#xA;      desc &#39;Return a public timeline.&#39;&#xA;      get :public_timeline do&#xA;        Status.limit(20)&#xA;      end&#xA;&#xA;      desc &#39;Return a personal timeline.&#39;&#xA;      get :home_timeline do&#xA;        authenticate!&#xA;        current_user.statuses.limit(20)&#xA;      end&#xA;&#xA;      desc &#39;Return a status.&#39;&#xA;      params do&#xA;        requires :id, type: Integer, desc: &#39;Status ID.&#39;&#xA;      end&#xA;      route_param :id do&#xA;        get do&#xA;          Status.find(params[:id])&#xA;        end&#xA;      end&#xA;&#xA;      desc &#39;Create a status.&#39;&#xA;      params do&#xA;        requires :status, type: String, desc: &#39;Your status.&#39;&#xA;      end&#xA;      post do&#xA;        authenticate!&#xA;        Status.create!({&#xA;          user: current_user,&#xA;          text: params[:status]&#xA;        })&#xA;      end&#xA;&#xA;      desc &#39;Update a status.&#39;&#xA;      params do&#xA;        requires :id, type: String, desc: &#39;Status ID.&#39;&#xA;        requires :status, type: String, desc: &#39;Your status.&#39;&#xA;      end&#xA;      put &#39;:id&#39; do&#xA;        authenticate!&#xA;        current_user.statuses.find(params[:id]).update({&#xA;          user: current_user,&#xA;          text: params[:status]&#xA;        })&#xA;      end&#xA;&#xA;      desc &#39;Delete a status.&#39;&#xA;      params do&#xA;        requires :id, type: String, desc: &#39;Status ID.&#39;&#xA;      end&#xA;      delete &#39;:id&#39; do&#xA;        authenticate!&#xA;        current_user.statuses.find(params[:id]).destroy&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mounting&lt;/h2&gt; &#xA;&lt;h3&gt;All&lt;/h3&gt; &#xA;&lt;p&gt;By default Grape will compile the routes on the first route, it is possible to pre-load routes using the &lt;code&gt;compile!&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Twitter::API.compile!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be added to your &lt;code&gt;config.ru&lt;/code&gt; (if using rackup), &lt;code&gt;application.rb&lt;/code&gt; (if using rails), or any file that loads your server.&lt;/p&gt; &#xA;&lt;h3&gt;Rack&lt;/h3&gt; &#xA;&lt;p&gt;The above sample creates a Rack application that can be run from a rackup &lt;code&gt;config.ru&lt;/code&gt; file with &lt;code&gt;rackup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;run Twitter::API&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(With pre-loading you can use)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Twitter::API.compile!&#xA;run Twitter::API&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And would respond to the following routes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /api/statuses/public_timeline&#xA;GET /api/statuses/home_timeline&#xA;GET /api/statuses/:id&#xA;POST /api/statuses&#xA;PUT /api/statuses/:id&#xA;DELETE /api/statuses/:id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grape will also automatically respond to HEAD and OPTIONS for all GET, and just OPTIONS for all other routes.&lt;/p&gt; &#xA;&lt;h3&gt;ActiveRecord without Rails&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use ActiveRecord within Grape, you will need to make sure that ActiveRecord&#39;s connection pool is handled correctly.&lt;/p&gt; &#xA;&lt;h4&gt;Rails 4&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to achieve that is by using ActiveRecord&#39;s &lt;code&gt;ConnectionManagement&lt;/code&gt; middleware in your &lt;code&gt;config.ru&lt;/code&gt; before mounting Grape, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use ActiveRecord::ConnectionAdapters::ConnectionManagement&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rails 5+&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/jhollinger/otr-activerecord&#34;&gt;otr-activerecord&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use OTR::ActiveRecord::ConnectionManagement&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Alongside Sinatra (or other frameworks)&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to mount Grape alongside another Rack framework such as Sinatra, you can do so easily using &lt;code&gt;Rack::Cascade&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Example config.ru&#xA;&#xA;require &#39;sinatra&#39;&#xA;require &#39;grape&#39;&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  get :hello do&#xA;    { hello: &#39;world&#39; }&#xA;  end&#xA;end&#xA;&#xA;class Web &amp;lt; Sinatra::Base&#xA;  get &#39;/&#39; do&#xA;    &#39;Hello world.&#39;&#xA;  end&#xA;end&#xA;&#xA;use Rack::Session::Cookie&#xA;run Rack::Cascade.new [Web, API]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that order of loading apps using &lt;code&gt;Rack::Cascade&lt;/code&gt; matters. The grape application must be last if you want to raise custom 404 errors from grape (such as &lt;code&gt;error!(&#39;Not Found&#39;,404)&lt;/code&gt;). If the grape application is not last and returns 404 or 405 response, &lt;a href=&#34;https://www.rubydoc.info/gems/rack/Rack/Cascade&#34;&gt;cascade utilizes that as a signal to try the next app&lt;/a&gt;. This may lead to undesirable behavior showing the &lt;a href=&#34;https://github.com/ruby-grape/grape/issues/1515&#34;&gt;wrong 404 page from the wrong app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rails&lt;/h3&gt; &#xA;&lt;p&gt;Place API files into &lt;code&gt;app/api&lt;/code&gt;. Rails expects a subdirectory that matches the name of the Ruby module and a file name that matches the name of the class. In our example, the file name location and directory for &lt;code&gt;Twitter::API&lt;/code&gt; should be &lt;code&gt;app/api/twitter/api.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;config/routes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mount Twitter::API =&amp;gt; &#39;/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rails &amp;lt; 5.2&lt;/h4&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;application.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.paths.add File.join(&#39;app&#39;, &#39;api&#39;), glob: File.join(&#39;**&#39;, &#39;*.rb&#39;)&#xA;config.autoload_paths += Dir[Rails.root.join(&#39;app&#39;, &#39;api&#39;, &#39;*&#39;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#reloading-api-changes-in-development&#34;&gt;below&lt;/a&gt; for additional code that enables reloading of API changes in development.&lt;/p&gt; &#xA;&lt;h4&gt;Rails 6.0&lt;/h4&gt; &#xA;&lt;p&gt;For Rails versions greater than 6.0.0.beta2, &lt;code&gt;Zeitwerk&lt;/code&gt; autoloader is the default for CRuby. By default &lt;code&gt;Zeitwerk&lt;/code&gt; inflects &lt;code&gt;api&lt;/code&gt; as &lt;code&gt;Api&lt;/code&gt; instead of &lt;code&gt;API&lt;/code&gt;. To make our example work, you need to uncomment the lines at the bottom of &lt;code&gt;config/initializers/inflections.rb&lt;/code&gt;, and add &lt;code&gt;API&lt;/code&gt; as an acronym:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::Inflector.inflections(:en) do |inflect|&#xA;  inflect.acronym &#39;API&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;p&gt;You can mount multiple API implementations inside another one. These don&#39;t have to be different versions, but may be components of the same API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  mount Twitter::APIv1&#xA;  mount Twitter::APIv2&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also mount on a path, which is similar to using &lt;code&gt;prefix&lt;/code&gt; inside the mounted API itself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  mount Twitter::APIv1 =&amp;gt; &#39;/v1&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind such declarations as &lt;code&gt;before/after/rescue_from&lt;/code&gt; must be placed before &lt;code&gt;mount&lt;/code&gt; in a case where they should be inherited.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  before do&#xA;    header &#39;X-Base-Header&#39;, &#39;will be defined for all APIs that are mounted below&#39;&#xA;  end&#xA;&#xA;  mount Twitter::Users&#xA;  mount Twitter::Search&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Remounting&lt;/h2&gt; &#xA;&lt;p&gt;You can mount the same endpoints in two different locations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Voting::API &amp;lt; Grape::API&#xA;  namespace &#39;votes&#39; do&#xA;    get do&#xA;      # Your logic&#xA;    end&#xA;&#xA;    post do&#xA;      # Your logic&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class Post::API &amp;lt; Grape::API&#xA;  mount Voting::API&#xA;end&#xA;&#xA;class Comment::API &amp;lt; Grape::API&#xA;  mount Voting::API&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming that the post and comment endpoints are mounted in &lt;code&gt;/posts&lt;/code&gt; and &lt;code&gt;/comments&lt;/code&gt;, you should now be able to do &lt;code&gt;get /posts/votes&lt;/code&gt;, &lt;code&gt;post /posts/votes&lt;/code&gt;, &lt;code&gt;get /comments/votes&lt;/code&gt; and &lt;code&gt;post /comments/votes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mount Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can configure remountable endpoints to change how they behave according to where they are mounted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Voting::API &amp;lt; Grape::API&#xA;  namespace &#39;votes&#39; do&#xA;    desc &#34;Vote for your #{configuration[:votable]}&#34;&#xA;    get do&#xA;      # Your logic&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class Post::API &amp;lt; Grape::API&#xA;  mount Voting::API, with: { votable: &#39;posts&#39; }&#xA;end&#xA;&#xA;class Comment::API &amp;lt; Grape::API&#xA;  mount Voting::API, with: { votable: &#39;comments&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you&#39;re passing a hash as the first parameter to &lt;code&gt;mount&lt;/code&gt;, you will need to explicitly put &lt;code&gt;()&lt;/code&gt; around parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# good&#xA;mount({ ::Some::Api =&amp;gt; &#39;/some/api&#39; }, with: { condition: true })&#xA;&#xA;# bad&#xA;mount ::Some::Api =&amp;gt; &#39;/some/api&#39;, with: { condition: true }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access &lt;code&gt;configuration&lt;/code&gt; on the class (to use as dynamic attributes), inside blocks (like namespace)&lt;/p&gt; &#xA;&lt;p&gt;If you want logic happening given on an &lt;code&gt;configuration&lt;/code&gt;, you can use the helper &lt;code&gt;given&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ConditionalEndpoint::API &amp;lt; Grape::API&#xA;  given configuration[:some_setting] do&#xA;    get &#39;mount_this_endpoint_conditionally&#39; do&#xA;      configuration[:configurable_response]&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a block of logic running every time an endpoint is mounted (within which you can access the &lt;code&gt;configuration&lt;/code&gt; Hash)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ConditionalEndpoint::API &amp;lt; Grape::API&#xA;  mounted do&#xA;    YourLogger.info &#34;This API was mounted at: #{Time.now}&#34;&#xA;&#xA;    get configuration[:endpoint_name] do&#xA;      configuration[:configurable_response]&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complex results can be achieved by using &lt;code&gt;mounted&lt;/code&gt; as an expression within which the &lt;code&gt;configuration&lt;/code&gt; is already evaluated as a Hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ExpressionEndpointAPI &amp;lt; Grape::API&#xA;  get(mounted { configuration[:route_name] || &#39;default_name&#39; }) do&#xA;    # some logic&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class BasicAPI &amp;lt; Grape::API&#xA;  desc &#39;Statuses index&#39; do&#xA;    params: mounted { configuration[:entity] || API::Entities::Status }.documentation&#xA;  end&#xA;  params do&#xA;    requires :all, using: mounted { configuration[:entity] || API::Entities::Status }.documentation&#xA;  end&#xA;  get &#39;/statuses&#39; do&#xA;    statuses = Status.all&#xA;    type = current_user.admin? ? :full : :default&#xA;    present statuses, with: mounted { configuration[:entity] || API::Entities::Status }, type: type&#xA;  end&#xA;end&#xA;&#xA;class V1 &amp;lt; Grape::API&#xA;  version &#39;v1&#39;&#xA;  mount BasicAPI, with: { entity: mounted { configuration[:entity] || API::Entities::Status } }&#xA;end&#xA;&#xA;class V2 &amp;lt; Grape::API&#xA;  version &#39;v2&#39;&#xA;  mount BasicAPI, with: { entity: mounted { configuration[:entity] || API::Entities::V2::Status } }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;There are four strategies in which clients can reach your API&#39;s endpoints: &lt;code&gt;:path&lt;/code&gt;, &lt;code&gt;:header&lt;/code&gt;, &lt;code&gt;:accept_version_header&lt;/code&gt; and &lt;code&gt;:param&lt;/code&gt;. The default strategy is &lt;code&gt;:path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Path&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using this versioning strategy, clients should pass the desired version in the URL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:9292/v1/statuses/public_timeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Header&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :header, vendor: &#39;twitter&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, Grape only supports versioned media types in the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vnd.vendor-and-or-resource-v1234+format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basically all tokens between the final &lt;code&gt;-&lt;/code&gt; and the &lt;code&gt;+&lt;/code&gt; will be interpreted as the version.&lt;/p&gt; &#xA;&lt;p&gt;Using this versioning strategy, clients should pass the desired version in the HTTP &lt;code&gt;Accept&lt;/code&gt; head.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -H Accept:application/vnd.twitter-v1+json http://localhost:9292/statuses/public_timeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the first matching version is used when no &lt;code&gt;Accept&lt;/code&gt; header is supplied. This behavior is similar to routing in Rails. To circumvent this default behavior, one could use the &lt;code&gt;:strict&lt;/code&gt; option. When this option is set to &lt;code&gt;true&lt;/code&gt;, a &lt;code&gt;406 Not Acceptable&lt;/code&gt; error is returned when no correct &lt;code&gt;Accept&lt;/code&gt; header is supplied.&lt;/p&gt; &#xA;&lt;p&gt;When an invalid &lt;code&gt;Accept&lt;/code&gt; header is supplied, a &lt;code&gt;406 Not Acceptable&lt;/code&gt; error is returned if the &lt;code&gt;:cascade&lt;/code&gt; option is set to &lt;code&gt;false&lt;/code&gt;. Otherwise a &lt;code&gt;404 Not Found&lt;/code&gt; error is returned by Rack if no other route matches.&lt;/p&gt; &#xA;&lt;h3&gt;Accept-Version Header&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :accept_version_header&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using this versioning strategy, clients should pass the desired version in the HTTP &lt;code&gt;Accept-Version&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -H &#34;Accept-Version:v1&#34; http://localhost:9292/statuses/public_timeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the first matching version is used when no &lt;code&gt;Accept-Version&lt;/code&gt; header is supplied. This behavior is similar to routing in Rails. To circumvent this default behavior, one could use the &lt;code&gt;:strict&lt;/code&gt; option. When this option is set to &lt;code&gt;true&lt;/code&gt;, a &lt;code&gt;406 Not Acceptable&lt;/code&gt; error is returned when no correct &lt;code&gt;Accept&lt;/code&gt; header is supplied and the &lt;code&gt;:cascade&lt;/code&gt; option is set to &lt;code&gt;false&lt;/code&gt;. Otherwise a &lt;code&gt;404 Not Found&lt;/code&gt; error is returned by Rack if no other route matches.&lt;/p&gt; &#xA;&lt;h3&gt;Param&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :param&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using this versioning strategy, clients should pass the desired version as a request parameter, either in the URL query string or in the request body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:9292/statuses/public_timeline?apiver=v1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default name for the query parameter is &#39;apiver&#39; but can be specified using the &lt;code&gt;:parameter&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :param, parameter: &#39;v&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:9292/statuses/public_timeline?v=v1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Describing Methods&lt;/h2&gt; &#xA;&lt;p&gt;You can add a description to API methods and namespaces. The description would be used by &lt;a href=&#34;https://github.com/ruby-grape/grape-swagger&#34;&gt;grape-swagger&lt;/a&gt; to generate swagger compliant documentation.&lt;/p&gt; &#xA;&lt;p&gt;Note: Description block is only for documentation and won&#39;t affects API behavior.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &#39;Returns your public timeline.&#39; do&#xA;  summary &#39;summary&#39;&#xA;  detail &#39;more details&#39;&#xA;  params  API::Entities::Status.documentation&#xA;  success API::Entities::Entity&#xA;  failure [[401, &#39;Unauthorized&#39;, &#39;Entities::Error&#39;]]&#xA;  named &#39;My named route&#39;&#xA;  headers XAuthToken: {&#xA;            description: &#39;Validates your identity&#39;,&#xA;            required: true&#xA;          },&#xA;          XOptionalHeader: {&#xA;            description: &#39;Not really needed&#39;,&#xA;            required: false&#xA;          }&#xA;  hidden false&#xA;  deprecated false&#xA;  is_array true&#xA;  nickname &#39;nickname&#39;&#xA;  produces [&#39;application/json&#39;]&#xA;  consumes [&#39;application/json&#39;]&#xA;  tags [&#39;tag1&#39;, &#39;tag2&#39;]&#xA;end&#xA;get :public_timeline do&#xA;  Status.limit(20)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;detail&lt;/code&gt;: A more enhanced description&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;params&lt;/code&gt;: Define parameters directly from an &lt;code&gt;Entity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;success&lt;/code&gt;: (former entity) The &lt;code&gt;Entity&lt;/code&gt; to be used to present by default this route&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;failure&lt;/code&gt;: (former http_codes) A definition of the used failure HTTP Codes and Entities&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;named&lt;/code&gt;: A helper to give a route a name and find it with this name in the documentation Hash&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;headers&lt;/code&gt;: A definition of the used Headers&lt;/li&gt; &#xA; &lt;li&gt;Other options can be found in &lt;a href=&#34;https://github.com/ruby-grape/grape-swagger&#34;&gt;grape-swagger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Grape.configure&lt;/code&gt; to set up global settings at load time. Currently the configurable settings are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;param_builder&lt;/code&gt;: Sets the &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#parameters&#34;&gt;Parameter Builder&lt;/a&gt;, defaults to &lt;code&gt;Grape::Extensions::ActiveSupport::HashWithIndifferentAccess::ParamBuilder&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To change a setting value make sure that at some point during load time the following code runs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Grape.configure do |config|&#xA;  config.setting = value&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, for the &lt;code&gt;param_builder&lt;/code&gt;, the following code could run in an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Grape.configure do |config|&#xA;  config.param_builder = Grape::Extensions::Hashie::Mash::ParamBuilder&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also configure a single API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;API.configure do |config|&#xA;  config[key] = value&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will be available inside the API with &lt;code&gt;configuration&lt;/code&gt;, as if it were &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#mount-configuration&#34;&gt;mount configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Request parameters are available through the &lt;code&gt;params&lt;/code&gt; hash object. This includes &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; parameters, along with any named parameters you specify in your route strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get :public_timeline do&#xA;  Status.order(params[:sort_by])&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parameters are automatically populated from the request body on &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; for form input, JSON and XML content-types.&lt;/p&gt; &#xA;&lt;p&gt;The request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -d &#39;{&#34;text&#34;: &#34;140 characters&#34;}&#39; &#39;http://localhost:9292/statuses&#39; -H Content-Type:application/json -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Grape endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post &#39;/statuses&#39; do&#xA;  Status.create!(text: params[:text])&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multipart POSTs and PUTs are supported as well.&lt;/p&gt; &#xA;&lt;p&gt;The request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --form image_file=&#39;@image.jpg;type=image/jpg&#39; http://localhost:9292/upload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Grape endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post &#39;upload&#39; do&#xA;  # file in params[:image_file]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the case of conflict between either of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;route string parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; parameters&lt;/li&gt; &#xA; &lt;li&gt;the contents of the request body on &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Route string parameters will have precedence.&lt;/p&gt; &#xA;&lt;h3&gt;Params Class&lt;/h3&gt; &#xA;&lt;p&gt;By default parameters are available as &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;. This can be changed to, for example, Ruby &lt;code&gt;Hash&lt;/code&gt; or &lt;code&gt;Hashie::Mash&lt;/code&gt; for the entire API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  include Grape::Extensions::Hashie::Mash::ParamBuilder&#xA;&#xA;  params do&#xA;    optional :color, type: String&#xA;  end&#xA;  get do&#xA;    params.color # instead of params[:color]&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The class can also be overridden on individual parameter blocks using &lt;code&gt;build_with&lt;/code&gt; as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  build_with Grape::Extensions::Hash::ParamBuilder&#xA;  optional :color, type: String&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or globally with the &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &lt;code&gt;Grape.configure.param_builder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the example above, &lt;code&gt;params[&#34;color&#34;]&lt;/code&gt; will return &lt;code&gt;nil&lt;/code&gt; since &lt;code&gt;params&lt;/code&gt; is a plain &lt;code&gt;Hash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available parameter builders are &lt;code&gt;Grape::Extensions::Hash::ParamBuilder&lt;/code&gt;, &lt;code&gt;Grape::Extensions::ActiveSupport::HashWithIndifferentAccess::ParamBuilder&lt;/code&gt; and &lt;code&gt;Grape::Extensions::Hashie::Mash::ParamBuilder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Declared&lt;/h3&gt; &#xA;&lt;p&gt;Grape allows you to access only the parameters that have been declared by your &lt;code&gt;params&lt;/code&gt; block. It will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filter out the params that have been passed, but are not allowed.&lt;/li&gt; &#xA; &lt;li&gt;Include any optional params that are declared but not passed.&lt;/li&gt; &#xA; &lt;li&gt;Perform any parameter renaming on the resulting hash.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consider the following API endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;post &#39;users/signup&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not specify any parameters, &lt;code&gt;declared&lt;/code&gt; will return an empty hash.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{&#34;user&#34;: {&#34;first_name&#34;:&#34;first name&#34;, &#34;last_name&#34;: &#34;last name&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once we add parameters requirements, grape will start returning only the declared parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;params do&#xA;  optional :user, type: Hash do&#xA;    optional :first_name, type: String&#xA;    optional :last_name, type: String&#xA;  end&#xA;end&#xA;&#xA;post &#39;users/signup&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{&#34;user&#34;: {&#34;first_name&#34;:&#34;first name&#34;, &#34;last_name&#34;: &#34;last name&#34;, &#34;random&#34;: &#34;never shown&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;,&#xA;      &#34;last_name&#34;: &#34;last name&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Missing params that are declared as type &lt;code&gt;Hash&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; will be included.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;params do&#xA;  optional :user, type: Hash do&#xA;    optional :first_name, type: String&#xA;    optional :last_name, type: String&#xA;  end&#xA;  optional :widgets, type: Array&#xA;end&#xA;&#xA;post &#39;users/signup&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: null,&#xA;      &#34;last_name&#34;: null&#xA;    },&#xA;    &#34;widgets&#34;: []&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The returned hash is an &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;#declared&lt;/code&gt; method is not available to &lt;code&gt;before&lt;/code&gt; filters, as those are evaluated prior to parameter coercion.&lt;/p&gt; &#xA;&lt;h3&gt;Include Parent Namespaces&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;declared(params)&lt;/code&gt; includes parameters that were defined in all parent namespaces. If you want to return only parameters from your current namespace, you can set &lt;code&gt;include_parent_namespaces&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;namespace :parent do&#xA;  params do&#xA;    requires :parent_name, type: String&#xA;  end&#xA;&#xA;  namespace &#39;:parent_name&#39; do&#xA;    params do&#xA;      requires :child_name, type: String&#xA;    end&#xA;    get &#39;:child_name&#39; do&#xA;      {&#xA;        &#39;without_parent_namespaces&#39; =&amp;gt; declared(params, include_parent_namespaces: false),&#xA;        &#39;with_parent_namespaces&#39; =&amp;gt; declared(params, include_parent_namespaces: true),&#xA;      }&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET -H &#34;Content-Type: application/json&#34; localhost:9292/parent/foo/bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;without_parent_namespaces&#34;: {&#xA;    &#34;child_name&#34;: &#34;bar&#34;&#xA;  },&#xA;  &#34;with_parent_namespaces&#34;: {&#xA;    &#34;parent_name&#34;: &#34;foo&#34;,&#xA;    &#34;child_name&#34;: &#34;bar&#34;&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Include Missing&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;declared(params)&lt;/code&gt; includes parameters that have &lt;code&gt;nil&lt;/code&gt; values. If you want to return only the parameters that are not &lt;code&gt;nil&lt;/code&gt;, you can use the &lt;code&gt;include_missing&lt;/code&gt; option. By default, &lt;code&gt;include_missing&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. Consider the following API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;params do&#xA;  requires :user, type: Hash do&#xA;    requires :first_name, type: String&#xA;    optional :last_name, type: String&#xA;  end&#xA;end&#xA;&#xA;post &#39;users/signup&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params, include_missing: false) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{&#34;user&#34;: {&#34;first_name&#34;:&#34;first name&#34;, &#34;random&#34;: &#34;never shown&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with include_missing:false&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with include_missing:true&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;,&#xA;      &#34;last_name&#34;: null&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also works on nested hashes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;params do&#xA;  requires :user, type: Hash do&#xA;    requires :first_name, type: String&#xA;    optional :last_name, type: String&#xA;    requires :address, type: Hash do&#xA;      requires :city, type: String&#xA;      optional :region, type: String&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;post &#39;users/signup&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params, include_missing: false) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{&#34;user&#34;: {&#34;first_name&#34;:&#34;first name&#34;, &#34;random&#34;: &#34;never shown&#34;, &#34;address&#34;: { &#34;city&#34;: &#34;SF&#34;}}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with include_missing:false&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;,&#xA;      &#34;address&#34;: {&#xA;        &#34;city&#34;: &#34;SF&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with include_missing:true&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;,&#xA;      &#34;last_name&#34;: null,&#xA;      &#34;address&#34;: {&#xA;        &#34;city&#34;: &#34;Zurich&#34;,&#xA;        &#34;region&#34;: null&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that an attribute with a &lt;code&gt;nil&lt;/code&gt; value is not considered &lt;em&gt;missing&lt;/em&gt; and will also be returned when &lt;code&gt;include_missing&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{&#34;user&#34;: {&#34;first_name&#34;:&#34;first name&#34;, &#34;last_name&#34;: null, &#34;address&#34;: { &#34;city&#34;: &#34;SF&#34;}}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with include_missing:false&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;,&#xA;      &#34;last_name&#34;: null,&#xA;      &#34;address&#34;: { &#34;city&#34;: &#34;SF&#34;}&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evaluate Given&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;declared(params)&lt;/code&gt; will not evaluate &lt;code&gt;given&lt;/code&gt; and return all parameters. Use &lt;code&gt;evaluate_given&lt;/code&gt; to evaluate all &lt;code&gt;given&lt;/code&gt; blocks and return only parameters that satisfy &lt;code&gt;given&lt;/code&gt; conditions. Consider the following API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;params do&#xA;  optional :child_id, type: Integer&#xA;  given :child_id do&#xA;    requires :father_id, type: Integer&#xA;  end&#xA;end&#xA;&#xA;post &#39;child&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params, evaluate_given: true) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/child -d &#39;{&#34;father_id&#34;: 1}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with evaluate_given:false&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;child_id&#34;: null,&#xA;    &#34;father_id&#34;: 1&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with evaluate_given:true&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;child_id&#34;: null&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also works on nested hashes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;params do&#xA;  requires :child, type: Hash do&#xA;    optional :child_id, type: Integer&#xA;    given :child_id do&#xA;      requires :father_id, type: Integer&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;post &#39;child&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params, evaluate_given: true) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/child -d &#39;{&#34;child&#34;: {&#34;father_id&#34;: 1}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with evaluate_given:false&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;child&#34;: {&#xA;      &#34;child_id&#34;: null,&#xA;      &#34;father_id&#34;: 1&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with evaluate_given:true&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;child&#34;: {&#xA;      &#34;child_id&#34;: null&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameter Validation and Coercion&lt;/h2&gt; &#xA;&lt;p&gt;You can define validations and coercion options for your parameters using a &lt;code&gt;params&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :id, type: Integer&#xA;  optional :text, type: String, regexp: /\A[a-z]+\z/&#xA;  group :media, type: Hash do&#xA;    requires :url&#xA;  end&#xA;  optional :audio, type: Hash do&#xA;    requires :format, type: Symbol, values: [:mp3, :wav, :aac, :ogg], default: :mp3&#xA;  end&#xA;  mutually_exclusive :media, :audio&#xA;end&#xA;put &#39;:id&#39; do&#xA;  # params[:id] is an Integer&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a type is specified an implicit validation is done after the coercion to ensure the output type is the one declared.&lt;/p&gt; &#xA;&lt;p&gt;Optional parameters can have a default value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :color, type: String, default: &#39;blue&#39;&#xA;  optional :random_number, type: Integer, default: -&amp;gt; { Random.rand(1..100) }&#xA;  optional :non_random_number, type: Integer, default:  Random.rand(1..100)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default values are eagerly evaluated. Above &lt;code&gt;:non_random_number&lt;/code&gt; will evaluate to the same number for each call to the endpoint of this &lt;code&gt;params&lt;/code&gt; block. To have the default evaluate lazily with each request use a lambda, like &lt;code&gt;:random_number&lt;/code&gt; above.&lt;/p&gt; &#xA;&lt;p&gt;Note that default values will be passed through to any validation options specified. The following example will always fail if &lt;code&gt;:color&lt;/code&gt; is not explicitly provided.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :color, type: String, default: &#39;blue&#39;, values: [&#39;red&#39;, &#39;green&#39;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The correct implementation is to ensure the default value passes all validations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :color, type: String, default: &#39;blue&#39;, values: [&#39;blue&#39;, &#39;red&#39;, &#39;green&#39;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported Parameter Types&lt;/h3&gt; &#xA;&lt;p&gt;The following are all valid types, supported out of the box by Grape:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integer&lt;/li&gt; &#xA; &lt;li&gt;Float&lt;/li&gt; &#xA; &lt;li&gt;BigDecimal&lt;/li&gt; &#xA; &lt;li&gt;Numeric&lt;/li&gt; &#xA; &lt;li&gt;Date&lt;/li&gt; &#xA; &lt;li&gt;DateTime&lt;/li&gt; &#xA; &lt;li&gt;Time&lt;/li&gt; &#xA; &lt;li&gt;Boolean&lt;/li&gt; &#xA; &lt;li&gt;String&lt;/li&gt; &#xA; &lt;li&gt;Symbol&lt;/li&gt; &#xA; &lt;li&gt;Rack::Multipart::UploadedFile (alias &lt;code&gt;File&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;JSON&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integer/Fixnum and Coercions&lt;/h3&gt; &#xA;&lt;p&gt;Please be aware that the behavior differs between Ruby 2.4 and earlier versions. In Ruby 2.4, values consisting of numbers are converted to Integer, but in earlier versions it will be treated as Fixnum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :integers, type: Hash do&#xA;    requires :int, coerce: Integer&#xA;  end&#xA;end&#xA;get &#39;/int&#39; do&#xA;  params[:integers][:int].class&#xA;end&#xA;&#xA;...&#xA;&#xA;get &#39;/int&#39; integers: { int: &#39;45&#39; }&#xA;  #=&amp;gt; Integer in ruby 2.4&#xA;  #=&amp;gt; Fixnum in earlier ruby versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Types and Coercions&lt;/h3&gt; &#xA;&lt;p&gt;Aside from the default set of supported types listed above, any class can be used as a type as long as an explicit coercion method is supplied. If the type implements a class-level &lt;code&gt;parse&lt;/code&gt; method, Grape will use it automatically. This method must take one string argument and return an instance of the correct type, or return an instance of &lt;code&gt;Grape::Types::InvalidValue&lt;/code&gt; which optionally accepts a message to be returned in the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Color&#xA;  attr_reader :value&#xA;  def initialize(color)&#xA;    @value = color&#xA;  end&#xA;&#xA;  def self.parse(value)&#xA;    return new(value) if %w[blue red green]).include?(value)&#xA;&#xA;    Grape::Types::InvalidValue.new(&#39;Unsupported color&#39;)&#xA;  end&#xA;end&#xA;&#xA;params do&#xA;  requires :color, type: Color, default: Color.new(&#39;blue&#39;)&#xA;  requires :more_colors, type: Array[Color] # Collections work&#xA;  optional :unique_colors, type: Set[Color] # Duplicates discarded&#xA;end&#xA;&#xA;get &#39;/stuff&#39; do&#xA;  # params[:color] is already a Color.&#xA;  params[:color].value&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, a custom coercion method may be supplied for any type of parameter using &lt;code&gt;coerce_with&lt;/code&gt;. Any class or object may be given that implements a &lt;code&gt;parse&lt;/code&gt; or &lt;code&gt;call&lt;/code&gt; method, in that order of precedence. The method must accept a single string parameter, and the return value must match the given &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :passwd, type: String, coerce_with: Base64.method(:decode64)&#xA;  requires :loud_color, type: Color, coerce_with: -&amp;gt;(c) { Color.parse(c.downcase) }&#xA;&#xA;  requires :obj, type: Hash, coerce_with: JSON do&#xA;    requires :words, type: Array[String], coerce_with: -&amp;gt;(val) { val.split(/\s+/) }&#xA;    optional :time, type: Time, coerce_with: Chronic&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, a &lt;code&gt;nil&lt;/code&gt; value will call the custom coercion method, while a missing parameter will not.&lt;/p&gt; &#xA;&lt;p&gt;Example of use of &lt;code&gt;coerce_with&lt;/code&gt; with a lambda (a class with a &lt;code&gt;parse&lt;/code&gt; method could also have been used) It will parse a string and return an Array of Integers, matching the &lt;code&gt;Array[Integer]&lt;/code&gt; &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :values, type: Array[Integer], coerce_with: -&amp;gt;(val) { val.split(/\s+/).map(&amp;amp;:to_i) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grape will assert that coerced values match the given &lt;code&gt;type&lt;/code&gt;, and will reject the request if they do not. To override this behaviour, custom types may implement a &lt;code&gt;parsed?&lt;/code&gt; method that should accept a single argument and return &lt;code&gt;true&lt;/code&gt; if the value passes type validation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SecureUri&#xA;  def self.parse(value)&#xA;    URI.parse value&#xA;  end&#xA;&#xA;  def self.parsed?(value)&#xA;    value.is_a? URI::HTTPS&#xA;  end&#xA;end&#xA;&#xA;params do&#xA;  requires :secure_uri, type: SecureUri&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multipart File Parameters&lt;/h3&gt; &#xA;&lt;p&gt;Grape makes use of &lt;code&gt;Rack::Request&lt;/code&gt;&#39;s built-in support for multipart file parameters. Such parameters can be declared with &lt;code&gt;type: File&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :avatar, type: File&#xA;end&#xA;post &#39;/&#39; do&#xA;  params[:avatar][:filename] # =&amp;gt; &#39;avatar.png&#39;&#xA;  params[:avatar][:type] # =&amp;gt; &#39;image/png&#39;&#xA;  params[:avatar][:tempfile] # =&amp;gt; #&amp;lt;File&amp;gt;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;First-Class &lt;code&gt;JSON&lt;/code&gt; Types&lt;/h3&gt; &#xA;&lt;p&gt;Grape supports complex parameters given as JSON-formatted strings using the special &lt;code&gt;type: JSON&lt;/code&gt; declaration. JSON objects and arrays of objects are accepted equally, with nested validation rules applied to all objects in either case:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :json, type: JSON do&#xA;    requires :int, type: Integer, values: [1, 2, 3]&#xA;  end&#xA;end&#xA;get &#39;/&#39; do&#xA;  params[:json].inspect&#xA;end&#xA;&#xA;client.get(&#39;/&#39;, json: &#39;{&#34;int&#34;:1}&#39;) # =&amp;gt; &#34;{:int=&amp;gt;1}&#34;&#xA;client.get(&#39;/&#39;, json: &#39;[{&#34;int&#34;:&#34;1&#34;}]&#39;) # =&amp;gt; &#34;[{:int=&amp;gt;1}]&#34;&#xA;&#xA;client.get(&#39;/&#39;, json: &#39;{&#34;int&#34;:4}&#39;) # =&amp;gt; HTTP 400&#xA;client.get(&#39;/&#39;, json: &#39;[{&#34;int&#34;:4}]&#39;) # =&amp;gt; HTTP 400&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally &lt;code&gt;type: Array[JSON]&lt;/code&gt; may be used, which explicitly marks the parameter as an array of objects. If a single object is supplied it will be wrapped.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :json, type: Array[JSON] do&#xA;    requires :int, type: Integer&#xA;  end&#xA;end&#xA;get &#39;/&#39; do&#xA;  params[:json].each { |obj| ... } # always works&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For stricter control over the type of JSON structure which may be supplied, use &lt;code&gt;type: Array, coerce_with: JSON&lt;/code&gt; or &lt;code&gt;type: Hash, coerce_with: JSON&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Allowed Types&lt;/h3&gt; &#xA;&lt;p&gt;Variant-type parameters can be declared using the &lt;code&gt;types&lt;/code&gt; option rather than &lt;code&gt;type&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :status_code, types: [Integer, String, Array[Integer, String]]&#xA;end&#xA;get &#39;/&#39; do&#xA;  params[:status_code].inspect&#xA;end&#xA;&#xA;client.get(&#39;/&#39;, status_code: &#39;OK_GOOD&#39;) # =&amp;gt; &#34;OK_GOOD&#34;&#xA;client.get(&#39;/&#39;, status_code: 300) # =&amp;gt; 300&#xA;client.get(&#39;/&#39;, status_code: %w(404 NOT FOUND)) # =&amp;gt; [404, &#34;NOT&#34;, &#34;FOUND&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a special case, variant-member-type collections may also be declared, by passing a &lt;code&gt;Set&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; with more than one member to &lt;code&gt;type&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :status_codes, type: Array[Integer,String]&#xA;end&#xA;get &#39;/&#39; do&#xA;  params[:status_codes].inspect&#xA;end&#xA;&#xA;client.get(&#39;/&#39;, status_codes: %w(1 two)) # =&amp;gt; [1, &#34;two&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Validation of Nested Parameters&lt;/h3&gt; &#xA;&lt;p&gt;Parameters can be nested using &lt;code&gt;group&lt;/code&gt; or by calling &lt;code&gt;requires&lt;/code&gt; or &lt;code&gt;optional&lt;/code&gt; with a block. In the &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#parameter-validation-and-coercion&#34;&gt;above example&lt;/a&gt;, this means &lt;code&gt;params[:media][:url]&lt;/code&gt; is required along with &lt;code&gt;params[:id]&lt;/code&gt;, and &lt;code&gt;params[:audio][:format]&lt;/code&gt; is required only if &lt;code&gt;params[:audio]&lt;/code&gt; is present. With a block, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;optional&lt;/code&gt; accept an additional option &lt;code&gt;type&lt;/code&gt; which can be either &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Hash&lt;/code&gt;, and defaults to &lt;code&gt;Array&lt;/code&gt;. Depending on the value, the nested parameters will be treated either as values of a hash or as values of hashes in an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :preferences, type: Array do&#xA;    requires :key&#xA;    requires :value&#xA;  end&#xA;&#xA;  requires :name, type: Hash do&#xA;    requires :first_name&#xA;    requires :last_name&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependent Parameters&lt;/h3&gt; &#xA;&lt;p&gt;Suppose some of your parameters are only relevant if another parameter is given; Grape allows you to express this relationship through the &lt;code&gt;given&lt;/code&gt; method in your parameters block, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :shelf_id, type: Integer&#xA;  given :shelf_id do&#xA;    requires :bin_id, type: Integer&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above Grape will use &lt;code&gt;blank?&lt;/code&gt; to check whether the &lt;code&gt;shelf_id&lt;/code&gt; param is present.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;given&lt;/code&gt; also takes a &lt;code&gt;Proc&lt;/code&gt; with custom code. Below, the param &lt;code&gt;description&lt;/code&gt; is required only if the value of &lt;code&gt;category&lt;/code&gt; is equal &lt;code&gt;foo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :category&#xA;  given category: -&amp;gt;(val) { val == &#39;foo&#39; } do&#xA;    requires :description&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can rename parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :category, as: :type&#xA;  given type: -&amp;gt;(val) { val == &#39;foo&#39; } do&#xA;    requires :description&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: param in &lt;code&gt;given&lt;/code&gt; should be the renamed one. In the example, it should be &lt;code&gt;type&lt;/code&gt;, not &lt;code&gt;category&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Group Options&lt;/h3&gt; &#xA;&lt;p&gt;Parameters options can be grouped. It can be useful if you want to extract common validation or types for several parameters. The example below presents a typical case when parameters share common options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :first_name, type: String, regexp: /w+/, desc: &#39;First name&#39;&#xA;  requires :middle_name, type: String, regexp: /w+/, desc: &#39;Middle name&#39;&#xA;  requires :last_name, type: String, regexp: /w+/, desc: &#39;Last name&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grape allows you to present the same logic through the &lt;code&gt;with&lt;/code&gt; method in your parameters block, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  with(type: String, regexp: /w+/) do&#xA;    requires :first_name, desc: &#39;First name&#39;&#xA;    requires :middle_name, desc: &#39;Middle name&#39;&#xA;    requires :last_name, desc: &#39;Last name&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Renaming&lt;/h3&gt; &#xA;&lt;p&gt;You can rename parameters using &lt;code&gt;as&lt;/code&gt;, which can be useful when refactoring existing APIs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;resource :users do&#xA;  params do&#xA;    requires :email_address, as: :email&#xA;    requires :password&#xA;  end&#xA;  post do&#xA;    User.create!(declared(params)) # User takes email and password&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value passed to &lt;code&gt;as&lt;/code&gt; will be the key when calling &lt;code&gt;declared(params)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Built-in Validators&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;allow_blank&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be defined as &lt;code&gt;allow_blank&lt;/code&gt;, ensuring that they contain a value. By default, &lt;code&gt;requires&lt;/code&gt; only validates that a parameter was sent in the request, regardless its value. With &lt;code&gt;allow_blank: false&lt;/code&gt;, empty values or whitespace only values are invalid.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;allow_blank&lt;/code&gt; can be combined with both &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;optional&lt;/code&gt;. If the parameter is required, it has to contain a value. If it&#39;s optional, it&#39;s possible to not send it in the request, but if it&#39;s being sent, it has to have some value, and not an empty string/only whitespaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :username, allow_blank: false&#xA;  optional :first_name, allow_blank: false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;values&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be restricted to a specific set of values with the &lt;code&gt;:values&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :status, type: Symbol, values: [:not_started, :processing, :done]&#xA;  optional :numbers, type: Array[Integer], default: 1, values: [1, 2, 3, 5, 8]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supplying a range to the &lt;code&gt;:values&lt;/code&gt; option ensures that the parameter is (or parameters are) included in that range (using &lt;code&gt;Range#include?&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :latitude, type: Float, values: -90.0..+90.0&#xA;  requires :longitude, type: Float, values: -180.0..+180.0&#xA;  optional :letters, type: Array[String], values: &#39;a&#39;..&#39;z&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;em&gt;both&lt;/em&gt; range endpoints have to be a &lt;code&gt;#kind_of?&lt;/code&gt; your &lt;code&gt;:type&lt;/code&gt; option (if you don&#39;t supply the &lt;code&gt;:type&lt;/code&gt; option, it will be guessed to be equal to the class of the range&#39;s first endpoint). So the following is invalid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :invalid1, type: Float, values: 0..10 # 0.kind_of?(Float) =&amp;gt; false&#xA;  optional :invalid2, values: 0..10.0 # 10.0.kind_of?(0.class) =&amp;gt; false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:values&lt;/code&gt; option can also be supplied with a &lt;code&gt;Proc&lt;/code&gt;, evaluated lazily with each request. If the Proc has arity zero (i.e. it takes no arguments) it is expected to return either a list or a range which will then be used to validate the parameter.&lt;/p&gt; &#xA;&lt;p&gt;For example, given a status model you may want to restrict by hashtags that you have previously defined in the &lt;code&gt;HashTag&lt;/code&gt; model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :hashtag, type: String, values: -&amp;gt; { Hashtag.all.map(&amp;amp;:tag) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, a Proc with arity one (i.e. taking one argument) can be used to explicitly validate each parameter value. In that case, the Proc is expected to return a truthy value if the parameter value is valid. The parameter will be considered invalid if the Proc returns a falsy value or if it raises a StandardError.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :number, type: Integer, values: -&amp;gt;(v) { v.even? &amp;amp;&amp;amp; v &amp;lt; 25 }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While Procs are convenient for single cases, consider using &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#custom-validators&#34;&gt;Custom Validators&lt;/a&gt; in cases where a validation is used more than once.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#allow_blank&#34;&gt;allow_blank&lt;/a&gt; validator applies while using &lt;code&gt;:values&lt;/code&gt;. In the following example the absence of &lt;code&gt;:allow_blank&lt;/code&gt; does not prevent &lt;code&gt;:state&lt;/code&gt; from receiving blank values because &lt;code&gt;:allow_blank&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :state, type: Symbol, values: [:active, :inactive]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;except_values&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be restricted from having a specific set of values with the &lt;code&gt;:except_values&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;except_values&lt;/code&gt; validator behaves similarly to the &lt;code&gt;values&lt;/code&gt; validator in that it accepts either an Array, a Range, or a Proc. Unlike the &lt;code&gt;values&lt;/code&gt; validator, however, &lt;code&gt;except_values&lt;/code&gt; only accepts Procs with arity zero.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :browser, except_values: [ &#39;ie6&#39;, &#39;ie7&#39;, &#39;ie8&#39; ]&#xA;  requires :port, except_values: { value: 0..1024, message: &#39;is not allowed&#39; }&#xA;  requires :hashtag, except_values: -&amp;gt; { Hashtag.FORBIDDEN_LIST }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;same_as&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;code&gt;same_as&lt;/code&gt; option can be given to ensure that values of parameters match.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :password&#xA;  requires :password_confirmation, same_as: :password&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;regexp&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be restricted to match a specific regular expression with the &lt;code&gt;:regexp&lt;/code&gt; option. If the value does not match the regular expression an error will be returned. Note that this is true for both &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;optional&lt;/code&gt; parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :email, regexp: /.+@.+/&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The validator will pass if the parameter was sent without value. To ensure that the parameter contains a value, use &lt;code&gt;allow_blank: false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :email, allow_blank: false, regexp: /.+@.+/&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;mutually_exclusive&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be defined as &lt;code&gt;mutually_exclusive&lt;/code&gt;, ensuring that they aren&#39;t present at the same time in a request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  mutually_exclusive :beer, :wine&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple sets can be defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  mutually_exclusive :beer, :wine&#xA;  optional :scotch&#xA;  optional :aquavit&#xA;  mutually_exclusive :scotch, :aquavit&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Never define mutually exclusive sets with any required params. Two mutually exclusive required params will mean params are never valid, thus making the endpoint useless. One required param mutually exclusive with an optional param will mean the latter is never valid.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;exactly_one_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be defined as &#39;exactly_one_of&#39;, ensuring that exactly one parameter gets selected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  exactly_one_of :beer, :wine&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that using &lt;code&gt;:default&lt;/code&gt; with &lt;code&gt;mutually_exclusive&lt;/code&gt; will cause multiple parameters to always have a default value and raise a &lt;code&gt;Grape::Exceptions::Validation&lt;/code&gt; mutually exclusive exception.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;at_least_one_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be defined as &#39;at_least_one_of&#39;, ensuring that at least one parameter gets selected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  at_least_one_of :beer, :wine, :juice&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;all_or_none_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be defined as &#39;all_or_none_of&#39;, ensuring that all or none of parameters gets selected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  all_or_none_of :beer, :wine, :juice&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nested &lt;code&gt;mutually_exclusive&lt;/code&gt;, &lt;code&gt;exactly_one_of&lt;/code&gt;, &lt;code&gt;at_least_one_of&lt;/code&gt;, &lt;code&gt;all_or_none_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;All of these methods can be used at any nested level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :food, type: Hash do&#xA;    optional :meat&#xA;    optional :fish&#xA;    optional :rice&#xA;    at_least_one_of :meat, :fish, :rice&#xA;  end&#xA;  group :drink, type: Hash do&#xA;    optional :beer&#xA;    optional :wine&#xA;    optional :juice&#xA;    exactly_one_of :beer, :wine, :juice&#xA;  end&#xA;  optional :dessert, type: Hash do&#xA;    optional :cake&#xA;    optional :icecream&#xA;    mutually_exclusive :cake, :icecream&#xA;  end&#xA;  optional :recipe, type: Hash do&#xA;    optional :oil&#xA;    optional :meat&#xA;    all_or_none_of :oil, :meat&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Namespace Validation and Coercion&lt;/h3&gt; &#xA;&lt;p&gt;Namespaces allow parameter definitions and apply to every method within the namespace.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :statuses do&#xA;  params do&#xA;    requires :user_id, type: Integer, desc: &#39;A user ID.&#39;&#xA;  end&#xA;  namespace &#39;:user_id&#39; do&#xA;    desc &#34;Retrieve a user&#39;s status.&#34;&#xA;    params do&#xA;      requires :status_id, type: Integer, desc: &#39;A status ID.&#39;&#xA;    end&#xA;    get &#39;:status_id&#39; do&#xA;      User.find(params[:user_id]).statuses.find(params[:status_id])&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;namespace&lt;/code&gt; method has a number of aliases, including: &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;resource&lt;/code&gt;, &lt;code&gt;resources&lt;/code&gt;, and &lt;code&gt;segment&lt;/code&gt;. Use whichever reads the best for your API.&lt;/p&gt; &#xA;&lt;p&gt;You can conveniently define a route parameter as a namespace using &lt;code&gt;route_param&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :statuses do&#xA;  route_param :id do&#xA;    desc &#39;Returns all replies for a status.&#39;&#xA;    get &#39;replies&#39; do&#xA;      Status.find(params[:id]).replies&#xA;    end&#xA;    desc &#39;Returns a status.&#39;&#xA;    get do&#xA;      Status.find(params[:id])&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define a route parameter type by passing to &lt;code&gt;route_param&lt;/code&gt;&#39;s options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :arithmetic do&#xA;  route_param :n, type: Integer do&#xA;    desc &#39;Returns in power&#39;&#xA;    get &#39;power&#39; do&#xA;      params[:n] ** params[:n]&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Validators&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AlphaNumeric &amp;lt; Grape::Validations::Validators::Base&#xA;  def validate_param!(attr_name, params)&#xA;    unless params[attr_name] =~ /\A[[:alnum:]]+\z/&#xA;      raise Grape::Exceptions::Validation.new params: [@scope.full_name(attr_name)], message: &#39;must consist of alpha-numeric characters&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :text, alpha_numeric: true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create custom classes that take parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Length &amp;lt; Grape::Validations::Validators::Base&#xA;  def validate_param!(attr_name, params)&#xA;    unless params[attr_name].length &amp;lt;= @option&#xA;      raise Grape::Exceptions::Validation.new params: [@scope.full_name(attr_name)], message: &#34;must be at the most #{@option} characters long&#34;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :text, length: 140&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create custom validation that use request to validate the attribute. For example if you want to have parameters that are available to only admins, you can do the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Admin &amp;lt; Grape::Validations::Validators::Base&#xA;  def validate(request)&#xA;    # return if the param we are checking was not in request&#xA;    # @attrs is a list containing the attribute we are currently validating&#xA;    # in our sample case this method once will get called with&#xA;    # @attrs being [:admin_field] and once with @attrs being [:admin_false_field]&#xA;    return unless request.params.key?(@attrs.first)&#xA;    # check if admin flag is set to true&#xA;    return unless @option&#xA;    # check if user is admin or not&#xA;    # as an example get a token from request and check if it&#39;s admin or not&#xA;    raise Grape::Exceptions::Validation.new params: @attrs, message: &#39;Can not set admin-only field.&#39; unless request.headers[&#39;X-Access-Token&#39;] == &#39;admin&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use it in your endpoint definition as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :admin_field, type: String, admin: true&#xA;  optional :non_admin_field, type: String&#xA;  optional :admin_false_field, type: String, admin: false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every validation will have its own instance of the validator, which means that the validator can have a state.&lt;/p&gt; &#xA;&lt;h3&gt;Validation Errors&lt;/h3&gt; &#xA;&lt;p&gt;Validation and coercion errors are collected and an exception of type &lt;code&gt;Grape::Exceptions::ValidationErrors&lt;/code&gt; is raised. If the exception goes uncaught it will respond with a status of 400 and an error message. The validation errors are grouped by parameter name and can be accessed via &lt;code&gt;Grape::Exceptions::ValidationErrors#errors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default response from a &lt;code&gt;Grape::Exceptions::ValidationErrors&lt;/code&gt; is a humanly readable string, such as &#34;beer, wine are mutually exclusive&#34;, in the following example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  exactly_one_of :beer, :wine, :juice&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can rescue a &lt;code&gt;Grape::Exceptions::ValidationErrors&lt;/code&gt; and respond with a custom response or turn the response into well-formatted JSON for a JSON API that separates individual parameters and the corresponding error messages. The following &lt;code&gt;rescue_from&lt;/code&gt; example produces &lt;code&gt;[{&#34;params&#34;:[&#34;beer&#34;,&#34;wine&#34;],&#34;messages&#34;:[&#34;are mutually exclusive&#34;]}]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;subject.rescue_from Grape::Exceptions::ValidationErrors do |e|&#xA;  error! e, 400&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Grape::Exceptions::ValidationErrors#full_messages&lt;/code&gt; returns the validation messages as an array. &lt;code&gt;Grape::Exceptions::ValidationErrors#message&lt;/code&gt; joins the messages to one string.&lt;/p&gt; &#xA;&lt;p&gt;For responding with an array of validation messages, you can use &lt;code&gt;Grape::Exceptions::ValidationErrors#full_messages&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;subject.rescue_from Grape::Exceptions::ValidationErrors do |e|&#xA;  error!({ messages: e.full_messages }, 400)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grape returns all validation and coercion errors found by default. To skip all subsequent validation checks when a specific param is found invalid, use &lt;code&gt;fail_fast: true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following example will not check if &lt;code&gt;:wine&lt;/code&gt; is present unless it finds &lt;code&gt;:beer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  required :beer, fail_fast: true&#xA;  required :wine&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result of empty params would be a single &lt;code&gt;Grape::Exceptions::ValidationErrors&lt;/code&gt; error.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, no regular expression test will be performed if &lt;code&gt;:blah&lt;/code&gt; is blank in the following example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  required :blah, allow_blank: false, regexp: /blah/, fail_fast: true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;I18n&lt;/h3&gt; &#xA;&lt;p&gt;Grape supports I18n for parameter-related error messages, but will fallback to English if translations for the default locale have not been provided. See &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/lib/grape/locale/en.yml&#34;&gt;en.yml&lt;/a&gt; for message keys.&lt;/p&gt; &#xA;&lt;p&gt;In case your app enforces available locales only and :en is not included in your available locales, Grape cannot fall back to English and will return the translation key for the error message. To avoid this behaviour, either provide a translation for your default locale or add :en to your available locales.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Validation messages&lt;/h3&gt; &#xA;&lt;p&gt;Grape supports custom validation messages for parameter-related and coerce-related error messages.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;presence&lt;/code&gt;, &lt;code&gt;allow_blank&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt;, &lt;code&gt;regexp&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :name, values: { value: 1..10, message: &#39;not in range from 1 to 10&#39; }, allow_blank: { value: false, message: &#39;cannot be blank&#39; }, regexp: { value: /^[a-z]+$/, message: &#39;format is invalid&#39; }, message: &#39;is required&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;same_as&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :password&#xA;  requires :password_confirmation, same_as: { value: :password, message: &#39;not match&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;all_or_none_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  all_or_none_of :beer, :wine, :juice, message: &#34;all params are required or none is required&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;mutually_exclusive&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  mutually_exclusive :beer, :wine, :juice, message: &#34;are mutually exclusive cannot pass both params&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;exactly_one_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  exactly_one_of :beer, :wine, :juice, message: { exactly_one: &#34;are missing, exactly one parameter is required&#34;, mutual_exclusion: &#34;are mutually exclusive, exactly one parameter is required&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;at_least_one_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  at_least_one_of :beer, :wine, :juice, message: &#34;are missing, please specify at least one param&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Coerce&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :int, type: { value: Integer, message: &#34;type cast is invalid&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;With Lambdas&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :name, values: { value: -&amp;gt; { (1..10).to_a }, message: &#39;not in range from 1 to 10&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Pass symbols for i18n translations&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can pass a symbol if you want i18n translations for your custom validation messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :name, message: :name_required&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# en.yml&#xA;&#xA;en:&#xA;  grape:&#xA;    errors:&#xA;      format: ! &#39;%{attributes} %{message}&#39;&#xA;      messages:&#xA;        name_required: &#39;must be present&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Overriding Attribute Names&lt;/h4&gt; &#xA;&lt;p&gt;You can also override attribute names.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# en.yml&#xA;&#xA;en:&#xA;  grape:&#xA;    errors:&#xA;      format: ! &#39;%{attributes} %{message}&#39;&#xA;      messages:&#xA;        name_required: &#39;must be present&#39;&#xA;      attributes:&#xA;        name: &#39;Oops! Name&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will produce &#39;Oops! Name must be present&#39;&lt;/p&gt; &#xA;&lt;h4&gt;With Default&lt;/h4&gt; &#xA;&lt;p&gt;You cannot set a custom message option for Default as it requires interpolation &lt;code&gt;%{option1}: %{value1} is incompatible with %{option2}: %{value2}&lt;/code&gt;. You can change the default error message for Default by changing the &lt;code&gt;incompatible_option_values&lt;/code&gt; message key inside &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/lib/grape/locale/en.yml&#34;&gt;en.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :name, values: { value: -&amp;gt; { (1..10).to_a }, message: &#39;not in range from 1 to 10&#39; }, default: 5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Headers&lt;/h2&gt; &#xA;&lt;h3&gt;Request&lt;/h3&gt; &#xA;&lt;p&gt;Request headers are available through the &lt;code&gt;headers&lt;/code&gt; helper or from &lt;code&gt;env&lt;/code&gt; in their original form.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get do&#xA;  error!(&#39;Unauthorized&#39;, 401) unless headers[&#39;Secret-Password&#39;] == &#39;swordfish&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get do&#xA;  error!(&#39;Unauthorized&#39;, 401) unless env[&#39;HTTP_SECRET_PASSWORD&#39;] == &#39;swordfish&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Header Case Handling&lt;/h4&gt; &#xA;&lt;p&gt;The above example may have been requested as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -H &#34;secret_PassWord: swordfish&#34; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The header name will have been normalized for you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the &lt;code&gt;header&lt;/code&gt; helper names will be coerced into a capitalized kebab case.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;env&lt;/code&gt; collection they appear in all uppercase, in snake case, and prefixed with &#39;HTTP_&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The header name will have been normalized per HTTP standards defined in &lt;a href=&#34;https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2&#34;&gt;RFC2616 Section 4.2&lt;/a&gt; regardless of what is being sent by a client.&lt;/p&gt; &#xA;&lt;h3&gt;Response&lt;/h3&gt; &#xA;&lt;p&gt;You can set a response header with &lt;code&gt;header&lt;/code&gt; inside an API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;header &#39;X-Robots-Tag&#39;, &#39;noindex&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When raising &lt;code&gt;error!&lt;/code&gt;, pass additional headers as arguments. Additional headers will be merged with headers set before &lt;code&gt;error!&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error! &#39;Unauthorized&#39;, 401, &#39;X-Error-Detail&#39; =&amp;gt; &#39;Invalid token.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Routes&lt;/h2&gt; &#xA;&lt;p&gt;To define routes you can use the &lt;code&gt;route&lt;/code&gt; method or the shorthands for the HTTP verbs. To define a route that accepts any route set to &lt;code&gt;:any&lt;/code&gt;. Parts of the path that are denoted with a colon will be interpreted as route parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;route :get, &#39;status&#39; do&#xA;end&#xA;&#xA;# is the same as&#xA;&#xA;get &#39;status&#39; do&#xA;end&#xA;&#xA;# is the same as&#xA;&#xA;get :status do&#xA;end&#xA;&#xA;# is NOT the same as&#xA;&#xA;get &#39;:status&#39; do # this makes params[:status] available&#xA;end&#xA;&#xA;# This will make both params[:status_id] and params[:id] available&#xA;&#xA;get &#39;statuses/:status_id/reviews/:id&#39; do&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To declare a namespace that prefixes all routes within, use the &lt;code&gt;namespace&lt;/code&gt; method. &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;resource&lt;/code&gt;, &lt;code&gt;resources&lt;/code&gt; and &lt;code&gt;segment&lt;/code&gt; are aliases to this method. Any endpoints within will share their parent context as well as any configuration done in the namespace context.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;route_param&lt;/code&gt; method is a convenient method for defining a parameter route segment. If you define a type, it will add a validation for this parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;route_param :id, type: Integer do&#xA;  get &#39;status&#39; do&#xA;  end&#xA;end&#xA;&#xA;# is the same as&#xA;&#xA;namespace &#39;:id&#39; do&#xA;  params do&#xA;    requires :id, type: Integer&#xA;  end&#xA;&#xA;  get &#39;status&#39; do&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can define requirements for your named route parameters using regular expressions on namespace or endpoint. The route will match only if all requirements are met.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;:id&#39;, requirements: { id: /[0-9]*/ } do&#xA;  Status.find(params[:id])&#xA;end&#xA;&#xA;namespace :outer, requirements: { id: /[0-9]*/ } do&#xA;  get :id do&#xA;  end&#xA;&#xA;  get &#39;:id/edit&#39; do&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;p&gt;You can define helper methods that your endpoints can use with the &lt;code&gt;helpers&lt;/code&gt; macro by either giving a block or an array of modules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module StatusHelpers&#xA;  def user_info(user)&#xA;    &#34;#{user} has statused #{user.statuses} status(s)&#34;&#xA;  end&#xA;end&#xA;&#xA;module HttpCodesHelpers&#xA;  def unauthorized&#xA;    401&#xA;  end&#xA;end&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  # define helpers with a block&#xA;  helpers do&#xA;    def current_user&#xA;      User.find(params[:user_id])&#xA;    end&#xA;  end&#xA;&#xA;  # or mix in an array of modules&#xA;  helpers StatusHelpers, HttpCodesHelpers&#xA;&#xA;  before do&#xA;    error!(&#39;Access Denied&#39;, unauthorized) unless current_user&#xA;  end&#xA;&#xA;  get &#39;info&#39; do&#xA;    # helpers available in your endpoint and filters&#xA;    user_info(current_user)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define reusable &lt;code&gt;params&lt;/code&gt; using &lt;code&gt;helpers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  helpers do&#xA;    params :pagination do&#xA;      optional :page, type: Integer&#xA;      optional :per_page, type: Integer&#xA;    end&#xA;  end&#xA;&#xA;  desc &#39;Get collection&#39;&#xA;  params do&#xA;    use :pagination # aliases: includes, use_scope&#xA;  end&#xA;  get do&#xA;    Collection.page(params[:page]).per(params[:per_page])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define reusable &lt;code&gt;params&lt;/code&gt; using shared helpers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module SharedParams&#xA;  extend Grape::API::Helpers&#xA;&#xA;  params :period do&#xA;    optional :start_date&#xA;    optional :end_date&#xA;  end&#xA;&#xA;  params :pagination do&#xA;    optional :page, type: Integer&#xA;    optional :per_page, type: Integer&#xA;  end&#xA;end&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  helpers SharedParams&#xA;&#xA;  desc &#39;Get collection.&#39;&#xA;  params do&#xA;    use :period, :pagination&#xA;  end&#xA;&#xA;  get do&#xA;    Collection&#xA;      .from(params[:start_date])&#xA;      .to(params[:end_date])&#xA;      .page(params[:page])&#xA;      .per(params[:per_page])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Helpers support blocks that can help set default values. The following API can return a collection sorted by &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;created_at&lt;/code&gt; in &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt; order.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module SharedParams&#xA;  extend Grape::API::Helpers&#xA;&#xA;  params :order do |options|&#xA;    optional :order_by, type: Symbol, values: options[:order_by], default: options[:default_order_by]&#xA;    optional :order, type: Symbol, values: %i(asc desc), default: options[:default_order]&#xA;  end&#xA;end&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  helpers SharedParams&#xA;&#xA;  desc &#39;Get a sorted collection.&#39;&#xA;  params do&#xA;    use :order, order_by: %i(id created_at), default_order_by: :created_at, default_order: :asc&#xA;  end&#xA;&#xA;  get do&#xA;    Collection.send(params[:order], params[:order_by])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Path Helpers&lt;/h2&gt; &#xA;&lt;p&gt;If you need methods for generating paths inside your endpoints, please see the &lt;a href=&#34;https://github.com/reprah/grape-route-helpers&#34;&gt;grape-route-helpers&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;h2&gt;Parameter Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can attach additional documentation to &lt;code&gt;params&lt;/code&gt; using a &lt;code&gt;documentation&lt;/code&gt; hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :first_name, type: String, documentation: { example: &#39;Jim&#39; }&#xA;  requires :last_name, type: String, documentation: { example: &#39;Smith&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If documentation isn&#39;t needed (for instance, it is an internal API), documentation can be disabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  do_not_document!&#xA;&#xA;  # endpoints...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, Grape won&#39;t create objects related to documentation which are retained in RAM forever.&lt;/p&gt; &#xA;&lt;h2&gt;Cookies&lt;/h2&gt; &#xA;&lt;p&gt;You can set, get and delete your cookies very simply using &lt;code&gt;cookies&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;status_count&#39; do&#xA;    cookies[:status_count] ||= 0&#xA;    cookies[:status_count] += 1&#xA;    { status_count: cookies[:status_count] }&#xA;  end&#xA;&#xA;  delete &#39;status_count&#39; do&#xA;    { status_count: cookies.delete(:status_count) }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a hash-based syntax to set more than one value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cookies[:status_count] = {&#xA;  value: 0,&#xA;  expires: Time.tomorrow,&#xA;  domain: &#39;.twitter.com&#39;,&#xA;  path: &#39;/&#39;&#xA;}&#xA;&#xA;cookies[:status_count][:value] +=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delete a cookie with &lt;code&gt;delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cookies.delete :status_count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify an optional path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cookies.delete :status_count, path: &#39;/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTTP Status Code&lt;/h2&gt; &#xA;&lt;p&gt;By default Grape returns a 201 for &lt;code&gt;POST&lt;/code&gt;-Requests, 204 for &lt;code&gt;DELETE&lt;/code&gt;-Requests that don&#39;t return any content, and 200 status code for all other Requests. You can use &lt;code&gt;status&lt;/code&gt; to query and set the actual HTTP Status Code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post do&#xA;  status 202&#xA;&#xA;  if status == 200&#xA;     # do some thing&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use one of status codes symbols that are provided by &lt;a href=&#34;http://www.rubydoc.info/github/rack/rack/Rack/Utils#HTTP_STATUS_CODES-constant&#34;&gt;Rack utils&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post do&#xA;  status :no_content&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Redirecting&lt;/h2&gt; &#xA;&lt;p&gt;You can redirect to a new url temporarily (302) or permanently (301).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redirect &#39;/statuses&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redirect &#39;/statuses&#39;, permanent: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recognizing Path&lt;/h2&gt; &#xA;&lt;p&gt;You can recognize the endpoint matched with given path.&lt;/p&gt; &#xA;&lt;p&gt;This API returns an instance of &lt;code&gt;Grape::Endpoint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/statuses&#39; do&#xA;  end&#xA;end&#xA;&#xA;API.recognize_path &#39;/statuses&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Allowed Methods&lt;/h2&gt; &#xA;&lt;p&gt;When you add a &lt;code&gt;GET&lt;/code&gt; route for a resource, a route for the &lt;code&gt;HEAD&lt;/code&gt; method will also be added automatically. You can disable this behavior with &lt;code&gt;do_not_route_head!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  do_not_route_head!&#xA;&#xA;  get &#39;/example&#39; do&#xA;    # only responds to GET&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you add a route for a resource, a route for the &lt;code&gt;OPTIONS&lt;/code&gt; method will also be added. The response to an OPTIONS request will include an &#34;Allow&#34; header listing the supported methods. If the resource has &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; callbacks they will be executed, but no other callbacks will run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/rt_count&#39; do&#xA;    { rt_count: current_user.rt_count }&#xA;  end&#xA;&#xA;  params do&#xA;    requires :value, type: Integer, desc: &#39;Value to add to the rt count.&#39;&#xA;  end&#xA;  put &#39;/rt_count&#39; do&#xA;    current_user.rt_count += params[:value].to_i&#xA;    { rt_count: current_user.rt_count }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -v -X OPTIONS http://localhost:3000/rt_count&#xA;&#xA;&amp;gt; OPTIONS /rt_count HTTP/1.1&#xA;&amp;gt;&#xA;&amp;lt; HTTP/1.1 204 No Content&#xA;&amp;lt; Allow: OPTIONS, GET, PUT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can disable this behavior with &lt;code&gt;do_not_route_options!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If a request for a resource is made with an unsupported HTTP method, an HTTP 405 (Method Not Allowed) response will be returned. If the resource has &lt;code&gt;before&lt;/code&gt; callbacks they will be executed, but no other callbacks will run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -X DELETE -v http://localhost:3000/rt_count/&#xA;&#xA;&amp;gt; DELETE /rt_count/ HTTP/1.1&#xA;&amp;gt; Host: localhost:3000&#xA;&amp;gt;&#xA;&amp;lt; HTTP/1.1 405 Method Not Allowed&#xA;&amp;lt; Allow: OPTIONS, GET, PUT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Raising Exceptions&lt;/h2&gt; &#xA;&lt;p&gt;You can abort the execution of an API method by raising errors with &lt;code&gt;error!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error! &#39;Access Denied&#39;, 401&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anything that responds to &lt;code&gt;#to_s&lt;/code&gt; can be given as a first argument to &lt;code&gt;error!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error! :not_found, 404&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also return JSON formatted objects by raising error! and passing a hash instead of a message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error!({ error: &#39;unexpected error&#39;, detail: &#39;missing widget&#39; }, 500)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set additional headers for the response. They will be merged with headers set before &lt;code&gt;error!&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error!(&#39;Something went wrong&#39;, 500, &#39;X-Error-Detail&#39; =&amp;gt; &#39;Invalid token.&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can present documented errors with a Grape entity using the the &lt;a href=&#34;https://github.com/ruby-grape/grape-entity&#34;&gt;grape-entity&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module API&#xA;  class Error &amp;lt; Grape::Entity&#xA;    expose :code&#xA;    expose :message&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following example specifies the entity to use in the &lt;code&gt;http_codes&lt;/code&gt; definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &#39;My Route&#39; do&#xA; failure [[408, &#39;Unauthorized&#39;, API::Error]]&#xA;end&#xA;error!({ message: &#39;Unauthorized&#39; }, 408)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following example specifies the presented entity explicitly in the error message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &#39;My Route&#39; do&#xA; failure [[408, &#39;Unauthorized&#39;]]&#xA;end&#xA;error!({ message: &#39;Unauthorized&#39;, with: API::Error }, 408)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Error HTTP Status Code&lt;/h3&gt; &#xA;&lt;p&gt;By default Grape returns a 500 status code from &lt;code&gt;error!&lt;/code&gt;. You can change this with &lt;code&gt;default_error_status&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  default_error_status 400&#xA;  get &#39;/example&#39; do&#xA;    error! &#39;This should have http status code 400&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling 404&lt;/h3&gt; &#xA;&lt;p&gt;For Grape to handle all the 404s for your API, it can be useful to use a catch-all. In its simplest form, it can be like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;route :any, &#39;*path&#39; do&#xA;  error! # or something else&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is very crucial to &lt;strong&gt;define this endpoint at the very end of your API&lt;/strong&gt;, as it literally accepts every request.&lt;/p&gt; &#xA;&lt;h2&gt;Exception Handling&lt;/h2&gt; &#xA;&lt;p&gt;Grape can be told to rescue all &lt;code&gt;StandardError&lt;/code&gt; exceptions and return them in the API format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from :all&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This mimics &lt;a href=&#34;https://ruby-doc.org/core/StandardError.html&#34;&gt;default &lt;code&gt;rescue&lt;/code&gt; behaviour&lt;/a&gt; when an exception type is not provided. Any other exception should be rescued explicitly, see &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#exceptions-that-should-be-rescued-explicitly&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Grape can also rescue from all exceptions and still use the built-in exception handing. This will give the same behavior as &lt;code&gt;rescue_from :all&lt;/code&gt; with the addition that Grape will use the exception handling defined by all Exception classes that inherit &lt;code&gt;Grape::Exceptions::Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The intent of this setting is to provide a simple way to cover the most common exceptions and return any unexpected exceptions in the API format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from :grape_exceptions&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also rescue specific exceptions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from ArgumentError, UserDefinedError&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case &lt;code&gt;UserDefinedError&lt;/code&gt; must be inherited from &lt;code&gt;StandardError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notice that you could combine these two approaches (rescuing custom errors takes precedence). For example, it&#39;s useful for handling all exceptions except Grape validation errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from Grape::Exceptions::ValidationErrors do |e|&#xA;    error!(e, 400)&#xA;  end&#xA;&#xA;  rescue_from :all&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The error format will match the request format. See &#34;Content-Types&#34; below.&lt;/p&gt; &#xA;&lt;p&gt;Custom error formatters for existing and additional types can be defined with a proc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  error_formatter :txt, -&amp;gt;(message, backtrace, options, env, original_exception) {&#xA;    &#34;error: #{message} from #{backtrace}&#34;&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a module or class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module CustomFormatter&#xA;  def self.call(message, backtrace, options, env, original_exception)&#xA;    { message: message, backtrace: backtrace }&#xA;  end&#xA;end&#xA;&#xA;class Twitter::API &amp;lt; Grape::API&#xA;  error_formatter :custom, CustomFormatter&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can rescue all exceptions with a code block. The &lt;code&gt;error!&lt;/code&gt; wrapper automatically sets the default error code and content-type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from :all do |e|&#xA;    error!(&#34;rescued from #{e.class.name}&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can set the format, status code and headers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;  rescue_from :all do |e|&#xA;    error!({ error: &#39;Server error.&#39; }, 500, { &#39;Content-Type&#39; =&amp;gt; &#39;text/error&#39; })&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also rescue all exceptions with a code block and handle the Rack response at the lowest level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from :all do |e|&#xA;    Rack::Response.new([ e.message ], 500, { &#39;Content-type&#39; =&amp;gt; &#39;text/error&#39; })&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or rescue specific exceptions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from ArgumentError do |e|&#xA;    error!(&#34;ArgumentError: #{e.message}&#34;)&#xA;  end&#xA;&#xA;  rescue_from NoMethodError do |e|&#xA;    error!(&#34;NoMethodError: #{e.message}&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;rescue_from&lt;/code&gt; will rescue the exceptions listed and all their subclasses.&lt;/p&gt; &#xA;&lt;p&gt;Assume you have the following exception classes defined.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module APIErrors&#xA;  class ParentError &amp;lt; StandardError; end&#xA;  class ChildError &amp;lt; ParentError; end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then the following &lt;code&gt;rescue_from&lt;/code&gt; clause will rescue exceptions of type &lt;code&gt;APIErrors::ParentError&lt;/code&gt; and its subclasses (in this case &lt;code&gt;APIErrors::ChildError&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rescue_from APIErrors::ParentError do |e|&#xA;    error!({&#xA;      error: &#34;#{e.class} error&#34;,&#xA;      message: e.message&#xA;    }, e.status)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To only rescue the base exception class, set &lt;code&gt;rescue_subclasses: false&lt;/code&gt;. The code below will rescue exceptions of type &lt;code&gt;RuntimeError&lt;/code&gt; but &lt;em&gt;not&lt;/em&gt; its subclasses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rescue_from RuntimeError, rescue_subclasses: false do |e|&#xA;    error!({&#xA;      status: e.status,&#xA;      message: e.message,&#xA;      errors: e.errors&#xA;    }, e.status)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Helpers are also available inside &lt;code&gt;rescue_from&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;  helpers do&#xA;    def server_error!&#xA;      error!({ error: &#39;Server error.&#39; }, 500, { &#39;Content-Type&#39; =&amp;gt; &#39;text/error&#39; })&#xA;    end&#xA;  end&#xA;&#xA;  rescue_from :all do |e|&#xA;    server_error!&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;rescue_from&lt;/code&gt; handler must return a &lt;code&gt;Rack::Response&lt;/code&gt; object, call &lt;code&gt;error!&lt;/code&gt;, or raise an exception (either the original exception or another custom one). The exception raised in &lt;code&gt;rescue_from&lt;/code&gt; will be handled outside Grape. For example, if you mount Grape in Rails, the exception will be handle by &lt;a href=&#34;https://guides.rubyonrails.org/action_controller_overview.html#rescue&#34;&gt;Rails Action Controller&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternately, use the &lt;code&gt;with&lt;/code&gt; option in &lt;code&gt;rescue_from&lt;/code&gt; to specify a method or a &lt;code&gt;proc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;  helpers do&#xA;    def server_error!&#xA;      error!({ error: &#39;Server error.&#39; }, 500, { &#39;Content-Type&#39; =&amp;gt; &#39;text/error&#39; })&#xA;    end&#xA;  end&#xA;&#xA;  rescue_from :all,          with: :server_error!&#xA;  rescue_from ArgumentError, with: -&amp;gt; { Rack::Response.new(&#39;rescued with a method&#39;, 400) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside the &lt;code&gt;rescue_from&lt;/code&gt; block, the environment of the original controller method(&lt;code&gt;.self&lt;/code&gt; receiver) is accessible through the &lt;code&gt;#context&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from :all do |e|&#xA;    user_id = context.params[:user_id]&#xA;    error!(&#34;error for #{user_id}&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rescuing exceptions inside namespaces&lt;/h4&gt; &#xA;&lt;p&gt;You could put &lt;code&gt;rescue_from&lt;/code&gt; clauses inside a namespace and they will take precedence over ones defined in the root scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from ArgumentError do |e|&#xA;    error!(&#34;outer&#34;)&#xA;  end&#xA;&#xA;  namespace :statuses do&#xA;    rescue_from ArgumentError do |e|&#xA;      error!(&#34;inner&#34;)&#xA;    end&#xA;    get do&#xA;      raise ArgumentError.new&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here &lt;code&gt;&#39;inner&#39;&lt;/code&gt; will be result of handling occurred &lt;code&gt;ArgumentError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Unrescuable Exceptions&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Grape::Exceptions::InvalidVersionHeader&lt;/code&gt;, which is raised when the version in the request header doesn&#39;t match the currently evaluated version for the endpoint, will &lt;em&gt;never&lt;/em&gt; be rescued from a &lt;code&gt;rescue_from&lt;/code&gt; block (even a &lt;code&gt;rescue_from :all&lt;/code&gt;) This is because Grape relies on Rack to catch that error and try the next versioned-route for cases where there exist identical Grape endpoints with different versions.&lt;/p&gt; &#xA;&lt;h4&gt;Exceptions that should be rescued explicitly&lt;/h4&gt; &#xA;&lt;p&gt;Any exception that is not subclass of &lt;code&gt;StandardError&lt;/code&gt; should be rescued explicitly. Usually it is not a case for an application logic as such errors point to problems in Ruby runtime. This is following &lt;a href=&#34;https://ruby-doc.org/core/Exception.html&#34;&gt;standard recommendations for exceptions handling&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rails 3.x&lt;/h3&gt; &#xA;&lt;p&gt;When mounted inside containers, such as Rails 3.x, errors such as &#34;404 Not Found&#34; or &#34;406 Not Acceptable&#34; will likely be handled and rendered by Rails handlers. For instance, accessing a nonexistent route &#34;/api/foo&#34; raises a 404, which inside rails will ultimately be translated to an &lt;code&gt;ActionController::RoutingError&lt;/code&gt;, which most likely will get rendered to a HTML error page.&lt;/p&gt; &#xA;&lt;p&gt;Most APIs will enjoy preventing downstream handlers from handling errors. You may set the &lt;code&gt;:cascade&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; for the entire API or separately on specific &lt;code&gt;version&lt;/code&gt; definitions, which will remove the &lt;code&gt;X-Cascade: true&lt;/code&gt; header from API responses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cascade false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :header, vendor: &#39;twitter&#39;, cascade: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Grape::API&lt;/code&gt; provides a &lt;code&gt;logger&lt;/code&gt; method which by default will return an instance of the &lt;code&gt;Logger&lt;/code&gt; class from Ruby&#39;s standard library.&lt;/p&gt; &#xA;&lt;p&gt;To log messages from within an endpoint, you need to define a helper to make the logger available in the endpoint context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  helpers do&#xA;    def logger&#xA;      API.logger&#xA;    end&#xA;  end&#xA;  post &#39;/statuses&#39; do&#xA;    logger.info &#34;#{current_user} has statused&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the logger level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  self.logger.level = Logger::INFO&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set your own logger.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyLogger&#xA;  def warning(message)&#xA;    puts &#34;this is a warning: #{message}&#34;&#xA;  end&#xA;end&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  logger MyLogger.new&#xA;  helpers do&#xA;    def logger&#xA;      API.logger&#xA;    end&#xA;  end&#xA;  get &#39;/statuses&#39; do&#xA;    logger.warning &#34;#{current_user} has statused&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For similar to Rails request logging try the &lt;a href=&#34;https://github.com/aserafin/grape_logging&#34;&gt;grape_logging&lt;/a&gt; or &lt;a href=&#34;https://github.com/ridiculous/grape-middleware-logger&#34;&gt;grape-middleware-logger&lt;/a&gt; gems.&lt;/p&gt; &#xA;&lt;h2&gt;API Formats&lt;/h2&gt; &#xA;&lt;p&gt;Your API can declare which content-types to support by using &lt;code&gt;content_type&lt;/code&gt;. If you do not specify any, Grape will support &lt;em&gt;XML&lt;/em&gt;, &lt;em&gt;JSON&lt;/em&gt;, &lt;em&gt;BINARY&lt;/em&gt;, and &lt;em&gt;TXT&lt;/em&gt; content-types. The default format is &lt;code&gt;:txt&lt;/code&gt;; you can change this with &lt;code&gt;default_format&lt;/code&gt;. Essentially, the two APIs below are equivalent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  # no content_type declarations, so Grape uses the defaults&#xA;end&#xA;&#xA;class Twitter::API &amp;lt; Grape::API&#xA;  # the following declarations are equivalent to the defaults&#xA;&#xA;  content_type :xml, &#39;application/xml&#39;&#xA;  content_type :json, &#39;application/json&#39;&#xA;  content_type :binary, &#39;application/octet-stream&#39;&#xA;  content_type :txt, &#39;text/plain&#39;&#xA;&#xA;  default_format :txt&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you declare any &lt;code&gt;content_type&lt;/code&gt; whatsoever, the Grape defaults will be overridden. For example, the following API will only support the &lt;code&gt;:xml&lt;/code&gt; and &lt;code&gt;:rss&lt;/code&gt; content-types, but not &lt;code&gt;:txt&lt;/code&gt;, &lt;code&gt;:json&lt;/code&gt;, or &lt;code&gt;:binary&lt;/code&gt;. Importantly, this means the &lt;code&gt;:txt&lt;/code&gt; default format is not supported! So, make sure to set a new &lt;code&gt;default_format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  content_type :xml, &#39;application/xml&#39;&#xA;  content_type :rss, &#39;application/xml+rss&#39;&#xA;&#xA;  default_format :xml&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Serialization takes place automatically. For example, you do not have to call &lt;code&gt;to_json&lt;/code&gt; in each JSON API endpoint implementation. The response format (and thus the automatic serialization) is determined in the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the file extension, if specified. If the file is .json, choose the JSON format.&lt;/li&gt; &#xA; &lt;li&gt;Use the value of the &lt;code&gt;format&lt;/code&gt; parameter in the query string, if specified.&lt;/li&gt; &#xA; &lt;li&gt;Use the format set by the &lt;code&gt;format&lt;/code&gt; option, if specified.&lt;/li&gt; &#xA; &lt;li&gt;Attempt to find an acceptable format from the &lt;code&gt;Accept&lt;/code&gt; header.&lt;/li&gt; &#xA; &lt;li&gt;Use the default format, if specified by the &lt;code&gt;default_format&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Default to &lt;code&gt;:txt&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, consider the following API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MultipleFormatAPI &amp;lt; Grape::API&#xA;  content_type :xml, &#39;application/xml&#39;&#xA;  content_type :json, &#39;application/json&#39;&#xA;&#xA;  default_format :json&#xA;&#xA;  get :hello do&#xA;    { hello: &#39;world&#39; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello&lt;/code&gt; (with an &lt;code&gt;Accept: */*&lt;/code&gt; header) does not have an extension or a &lt;code&gt;format&lt;/code&gt; parameter, so it will respond with JSON (the default format).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xml&lt;/code&gt; has a recognized extension, so it will respond with XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello?format=xml&lt;/code&gt; has a recognized &lt;code&gt;format&lt;/code&gt; parameter, so it will respond with XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xml?format=json&lt;/code&gt; has a recognized extension (which takes precedence over the &lt;code&gt;format&lt;/code&gt; parameter), so it will respond with XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xls&lt;/code&gt; (with an &lt;code&gt;Accept: */*&lt;/code&gt; header) has an extension, but that extension is not recognized, so it will respond with JSON (the default format).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xls&lt;/code&gt; with an &lt;code&gt;Accept: application/xml&lt;/code&gt; header has an unrecognized extension, but the &lt;code&gt;Accept&lt;/code&gt; header corresponds to a recognized format, so it will respond with XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xls&lt;/code&gt; with an &lt;code&gt;Accept: text/plain&lt;/code&gt; header has an unrecognized extension &lt;em&gt;and&lt;/em&gt; an unrecognized &lt;code&gt;Accept&lt;/code&gt; header, so it will respond with JSON (the default format).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can override this process explicitly by specifying &lt;code&gt;env[&#39;api.format&#39;]&lt;/code&gt; in the API itself. For example, the following API will let you upload arbitrary files and return their contents as an attachment with the correct MIME type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  post &#39;attachment&#39; do&#xA;    filename = params[:file][:filename]&#xA;    content_type MIME::Types.type_for(filename)[0].to_s&#xA;    env[&#39;api.format&#39;] = :binary # there&#39;s no formatter for :binary, data will be returned &#34;as is&#34;&#xA;    header &#39;Content-Disposition&#39;, &#34;attachment; filename*=UTF-8&#39;&#39;#{CGI.escape(filename)}&#34;&#xA;    params[:file][:tempfile].read&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can have your API only respond to a single format with &lt;code&gt;format&lt;/code&gt;. If you use this, the API will &lt;strong&gt;not&lt;/strong&gt; respond to file extensions other than specified in &lt;code&gt;format&lt;/code&gt;. For example, consider the following API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SingleFormatAPI &amp;lt; Grape::API&#xA;  format :json&#xA;&#xA;  get :hello do&#xA;    { hello: &#39;world&#39; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello&lt;/code&gt; will respond with JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.json&lt;/code&gt; will respond with JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xml&lt;/code&gt;, &lt;code&gt;GET /hello.foobar&lt;/code&gt;, or &lt;em&gt;any&lt;/em&gt; other extension will respond with an HTTP 404 error code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello?format=xml&lt;/code&gt; will respond with an HTTP 406 error code, because the XML format specified by the request parameter is not supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello&lt;/code&gt; with an &lt;code&gt;Accept: application/xml&lt;/code&gt; header will still respond with JSON, since it could not negotiate a recognized content-type from the headers and JSON is the effective default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The formats apply to parsing, too. The following API will only respond to the JSON content-type and will not parse any other input than &lt;code&gt;application/json&lt;/code&gt;, &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;, &lt;code&gt;multipart/form-data&lt;/code&gt;, &lt;code&gt;multipart/related&lt;/code&gt; and &lt;code&gt;multipart/mixed&lt;/code&gt;. All other requests will fail with an HTTP 406 error code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the content-type is omitted, Grape will return a 406 error code unless &lt;code&gt;default_format&lt;/code&gt; is specified. The following API will try to parse any data without a content-type using a JSON parser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;  default_format :json&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you combine &lt;code&gt;format&lt;/code&gt; with &lt;code&gt;rescue_from :all&lt;/code&gt;, errors will be rendered using the same format. If you do not want this behavior, set the default error formatter with &lt;code&gt;default_error_formatter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;  content_type :txt, &#39;text/plain&#39;&#xA;  default_error_formatter :txt&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom formatters for existing and additional types can be defined with a proc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  content_type :xls, &#39;application/vnd.ms-excel&#39;&#xA;  formatter :xls, -&amp;gt;(object, env) { object.to_xls }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a module or class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module XlsFormatter&#xA;  def self.call(object, env)&#xA;    object.to_xls&#xA;  end&#xA;end&#xA;&#xA;class Twitter::API &amp;lt; Grape::API&#xA;  content_type :xls, &#39;application/vnd.ms-excel&#39;&#xA;  formatter :xls, XlsFormatter&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Built-in formatters are the following.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:json&lt;/code&gt;: use object&#39;s &lt;code&gt;to_json&lt;/code&gt; when available, otherwise call &lt;code&gt;MultiJson.dump&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:xml&lt;/code&gt;: use object&#39;s &lt;code&gt;to_xml&lt;/code&gt; when available, usually via &lt;code&gt;MultiXml&lt;/code&gt;, otherwise call &lt;code&gt;to_s&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:txt&lt;/code&gt;: use object&#39;s &lt;code&gt;to_txt&lt;/code&gt; when available, otherwise &lt;code&gt;to_s&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:serializable_hash&lt;/code&gt;: use object&#39;s &lt;code&gt;serializable_hash&lt;/code&gt; when available, otherwise fallback to &lt;code&gt;:json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:binary&lt;/code&gt;: data will be returned &#34;as is&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a body is present in a request to an API, with a Content-Type header value that is of an unsupported type a &#34;415 Unsupported Media Type&#34; error code will be returned by Grape.&lt;/p&gt; &#xA;&lt;p&gt;Response statuses that indicate no content as defined by &lt;a href=&#34;https://github.com/rack&#34;&gt;Rack&lt;/a&gt; &lt;a href=&#34;https://github.com/rack/rack/raw/master/lib/rack/utils.rb#L567&#34;&gt;here&lt;/a&gt; will bypass serialization and the body entity - though there should be none - will not be modified.&lt;/p&gt; &#xA;&lt;h3&gt;JSONP&lt;/h3&gt; &#xA;&lt;p&gt;Grape supports JSONP via &lt;a href=&#34;https://github.com/rack/rack-contrib&#34;&gt;Rack::JSONP&lt;/a&gt;, part of the &lt;a href=&#34;https://github.com/rack/rack-contrib&#34;&gt;rack-contrib&lt;/a&gt; gem. Add &lt;code&gt;rack-contrib&lt;/code&gt; to your &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rack/contrib&#39;&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  use Rack::JSONP&#xA;  format :json&#xA;  get &#39;/&#39; do&#xA;    &#39;Hello World&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CORS&lt;/h3&gt; &#xA;&lt;p&gt;Grape supports CORS via &lt;a href=&#34;https://github.com/cyu/rack-cors&#34;&gt;Rack::CORS&lt;/a&gt;, part of the &lt;a href=&#34;https://github.com/cyu/rack-cors&#34;&gt;rack-cors&lt;/a&gt; gem. Add &lt;code&gt;rack-cors&lt;/code&gt; to your &lt;code&gt;Gemfile&lt;/code&gt;, then use the middleware in your config.ru file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rack/cors&#39;&#xA;&#xA;use Rack::Cors do&#xA;  allow do&#xA;    origins &#39;*&#39;&#xA;    resource &#39;*&#39;, headers: :any, methods: :get&#xA;  end&#xA;end&#xA;&#xA;run Twitter::API&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Content-type&lt;/h2&gt; &#xA;&lt;p&gt;Content-type is set by the formatter. You can override the content-type of the response at runtime by setting the &lt;code&gt;Content-Type&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/home_timeline_js&#39; do&#xA;    content_type &#39;application/javascript&#39;&#xA;    &#34;var statuses = ...;&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API Data Formats&lt;/h2&gt; &#xA;&lt;p&gt;Grape accepts and parses input data sent with the POST and PUT methods as described in the Parameters section above. It also supports custom data formats. You must declare additional content-types via &lt;code&gt;content_type&lt;/code&gt; and optionally supply a parser via &lt;code&gt;parser&lt;/code&gt; unless a parser is already available within Grape to enable a custom format. Such a parser can be a function or a class.&lt;/p&gt; &#xA;&lt;p&gt;With a parser, parsed data is available &#34;as-is&#34; in &lt;code&gt;env[&#39;api.request.body&#39;]&lt;/code&gt;. Without a parser, data is available &#34;as-is&#34; and in &lt;code&gt;env[&#39;api.request.input&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following example is a trivial parser that will assign any input with the &#34;text/custom&#34; content-type to &lt;code&gt;:value&lt;/code&gt;. The parameter will be available via &lt;code&gt;params[:value]&lt;/code&gt; inside the API call.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module CustomParser&#xA;  def self.call(object, env)&#xA;    { value: object.to_s }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;content_type :txt, &#39;text/plain&#39;&#xA;content_type :custom, &#39;text/custom&#39;&#xA;parser :custom, CustomParser&#xA;&#xA;put &#39;value&#39; do&#xA;  params[:value]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can invoke the above API as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X PUT -d &#39;data&#39; &#39;http://localhost:9292/value&#39; -H Content-Type:text/custom -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can disable parsing for a content-type with &lt;code&gt;nil&lt;/code&gt;. For example, &lt;code&gt;parser :json, nil&lt;/code&gt; will disable JSON parsing altogether. The request data is then available as-is in &lt;code&gt;env[&#39;api.request.body&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;JSON and XML Processors&lt;/h2&gt; &#xA;&lt;p&gt;Grape uses &lt;code&gt;JSON&lt;/code&gt; and &lt;code&gt;ActiveSupport::XmlMini&lt;/code&gt; for JSON and XML parsing by default. It also detects and supports &lt;a href=&#34;https://github.com/intridea/multi_json&#34;&gt;multi_json&lt;/a&gt; and &lt;a href=&#34;https://github.com/sferik/multi_xml&#34;&gt;multi_xml&lt;/a&gt;. Adding those gems to your Gemfile and requiring them will enable them and allow you to swap the JSON and XML back-ends.&lt;/p&gt; &#xA;&lt;h2&gt;RESTful Model Representations&lt;/h2&gt; &#xA;&lt;p&gt;Grape supports a range of ways to present your data with some help from a generic &lt;code&gt;present&lt;/code&gt; method, which accepts two arguments: the object to be presented and the options associated with it. The options hash may include &lt;code&gt;:with&lt;/code&gt;, which defines the entity to expose.&lt;/p&gt; &#xA;&lt;h3&gt;Grape Entities&lt;/h3&gt; &#xA;&lt;p&gt;Add the &lt;a href=&#34;https://github.com/ruby-grape/grape-entity&#34;&gt;grape-entity&lt;/a&gt; gem to your Gemfile. Please refer to the &lt;a href=&#34;https://github.com/ruby-grape/grape-entity/raw/master/README.md&#34;&gt;grape-entity documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;The following example exposes statuses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module API&#xA;  module Entities&#xA;    class Status &amp;lt; Grape::Entity&#xA;      expose :user_name&#xA;      expose :text, documentation: { type: &#39;string&#39;, desc: &#39;Status update text.&#39; }&#xA;      expose :ip, if: { type: :full }&#xA;      expose :user_type, :user_id, if: -&amp;gt;(status, options) { status.user.public? }&#xA;      expose :digest do |status, options|&#xA;        Digest::MD5.hexdigest(status.txt)&#xA;      end&#xA;      expose :replies, using: API::Status, as: :replies&#xA;    end&#xA;  end&#xA;&#xA;  class Statuses &amp;lt; Grape::API&#xA;    version &#39;v1&#39;&#xA;&#xA;    desc &#39;Statuses index&#39; do&#xA;      params: API::Entities::Status.documentation&#xA;    end&#xA;    get &#39;/statuses&#39; do&#xA;      statuses = Status.all&#xA;      type = current_user.admin? ? :full : :default&#xA;      present statuses, with: API::Entities::Status, type: type&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use entity documentation directly in the params block with &lt;code&gt;using: Entity.documentation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module API&#xA;  class Statuses &amp;lt; Grape::API&#xA;    version &#39;v1&#39;&#xA;&#xA;    desc &#39;Create a status&#39;&#xA;    params do&#xA;      requires :all, except: [:ip], using: API::Entities::Status.documentation.except(:id)&#xA;    end&#xA;    post &#39;/status&#39; do&#xA;      Status.create! params&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can present with multiple entities using an optional Symbol argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  get &#39;/statuses&#39; do&#xA;    statuses = Status.all.page(1).per(20)&#xA;    present :total_page, 10&#xA;    present :per_page, 20&#xA;    present :statuses, statuses, with: API::Entities::Status&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The response will be&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  {&#xA;    total_page: 10,&#xA;    per_page: 20,&#xA;    statuses: []&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to separately organizing entities, it may be useful to put them as namespaced classes underneath the model they represent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Status&#xA;  def entity&#xA;    Entity.new(self)&#xA;  end&#xA;&#xA;  class Entity &amp;lt; Grape::Entity&#xA;    expose :text, :user_id&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you organize your entities this way, Grape will automatically detect the &lt;code&gt;Entity&lt;/code&gt; class and use it to present your models. In this example, if you added &lt;code&gt;present Status.new&lt;/code&gt; to your endpoint, Grape will automatically detect that there is a &lt;code&gt;Status::Entity&lt;/code&gt; class and use that as the representative entity. This can still be overridden by using the &lt;code&gt;:with&lt;/code&gt; option or an explicit &lt;code&gt;represents&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;You can present &lt;code&gt;hash&lt;/code&gt; with &lt;code&gt;Grape::Presenters::Presenter&lt;/code&gt; to keep things consistent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/users&#39; do&#xA;  present { id: 10, name: :dgz }, with: Grape::Presenters::Presenter&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The response will be&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{&#xA;  id:   10,&#xA;  name: &#39;dgz&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It has the same result with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/users&#39; do&#xA;  present :id, 10&#xA;  present :name, :dgz&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hypermedia and Roar&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/apotonick/roar&#34;&gt;Roar&lt;/a&gt; to render HAL or Collection+JSON with the help of &lt;a href=&#34;https://github.com/ruby-grape/grape-roar&#34;&gt;grape-roar&lt;/a&gt;, which defines a custom JSON formatter and enables presenting entities with Grape&#39;s &lt;code&gt;present&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;h3&gt;Rabl&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/nesquena/rabl&#34;&gt;Rabl&lt;/a&gt; templates with the help of the &lt;a href=&#34;https://github.com/ruby-grape/grape-rabl&#34;&gt;grape-rabl&lt;/a&gt; gem, which defines a custom Grape Rabl formatter.&lt;/p&gt; &#xA;&lt;h3&gt;Active Model Serializers&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/rails-api/active_model_serializers&#34;&gt;Active Model Serializers&lt;/a&gt; serializers with the help of the &lt;a href=&#34;https://github.com/jrhe/grape-active_model_serializers&#34;&gt;grape-active_model_serializers&lt;/a&gt; gem, which defines a custom Grape AMS formatter.&lt;/p&gt; &#xA;&lt;h2&gt;Sending Raw or No Data&lt;/h2&gt; &#xA;&lt;p&gt;In general, use the binary format to send raw data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/file&#39; do&#xA;    content_type &#39;application/octet-stream&#39;&#xA;    File.binread &#39;file.bin&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the response body explicitly with &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    content_type &#39;text/plain&#39;&#xA;    body &#39;Hello World&#39;&#xA;    # return value ignored&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;body false&lt;/code&gt; to return &lt;code&gt;204 No Content&lt;/code&gt; without any data or content-type.&lt;/p&gt; &#xA;&lt;p&gt;If you want to empty the body with an HTTP status code other than &lt;code&gt;204 No Content&lt;/code&gt;, you can override the status code after specifying &lt;code&gt;body false&lt;/code&gt; as follows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    body false&#xA;    status 304&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set the response to a file with &lt;code&gt;sendfile&lt;/code&gt;. This works with the &lt;a href=&#34;https://www.rubydoc.info/gems/rack/Rack/Sendfile&#34;&gt;Rack::Sendfile&lt;/a&gt; middleware to optimally send the file through your web server software.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    sendfile &#39;/path/to/file&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To stream a file in chunks use &lt;code&gt;stream&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    stream &#39;/path/to/file&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to stream non-file data use the &lt;code&gt;stream&lt;/code&gt; method and a &lt;code&gt;Stream&lt;/code&gt; object. This is an object that responds to &lt;code&gt;each&lt;/code&gt; and yields for each chunk to send to the client. Each chunk will be sent as it is yielded instead of waiting for all of the content to be available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyStream&#xA;  def each&#xA;    yield &#39;part 1&#39;&#xA;    yield &#39;part 2&#39;&#xA;    yield &#39;part 3&#39;&#xA;  end&#xA;end&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    stream MyStream.new&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;h3&gt;Basic and Digest Auth&lt;/h3&gt; &#xA;&lt;p&gt;Grape has built-in Basic and Digest authentication (the given &lt;code&gt;block&lt;/code&gt; is executed in the context of the current &lt;code&gt;Endpoint&lt;/code&gt;). Authentication applies to the current namespace and any children, but not parents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;http_basic do |username, password|&#xA;  # verify user&#39;s password here&#xA;  # IMPORTANT: make sure you use a comparison method which isn&#39;t prone to a timing attack&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Digest auth supports clear-text passwords and password hashes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;http_digest({ realm: &#39;Test Api&#39;, opaque: &#39;app secret&#39; }) do |username|&#xA;  # lookup the user&#39;s password here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;http_digest(realm: { realm: &#39;Test Api&#39;, opaque: &#39;app secret&#39;, passwords_hashed: true }) do |username|&#xA;  # lookup the user&#39;s password hash here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Register custom middleware for authentication&lt;/h3&gt; &#xA;&lt;p&gt;Grape can use custom Middleware for authentication. How to implement these Middleware have a look at &lt;code&gt;Rack::Auth::Basic&lt;/code&gt; or similar implementations.&lt;/p&gt; &#xA;&lt;p&gt;For registering a Middleware you need the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;label&lt;/code&gt; - the name for your authenticator to use it later&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MiddlewareClass&lt;/code&gt; - the MiddlewareClass to use for authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;option_lookup_proc&lt;/code&gt; - A Proc with one Argument to lookup the options at runtime (return value is an &lt;code&gt;Array&lt;/code&gt; as Parameter for the Middleware).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;Grape::Middleware::Auth::Strategies.add(:my_auth, AuthMiddleware, -&amp;gt;(options) { [options[:realm]] } )&#xA;&#xA;&#xA;auth :my_auth, { realm: &#39;Test Api&#39;} do |credentials|&#xA;  # lookup the user&#39;s password here&#xA;  { &#39;user1&#39; =&amp;gt; &#39;password1&#39; }[username]&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/doorkeeper-gem/doorkeeper&#34;&gt;Doorkeeper&lt;/a&gt;, &lt;a href=&#34;https://github.com/opperator/warden-oauth2&#34;&gt;warden-oauth2&lt;/a&gt; or &lt;a href=&#34;https://github.com/nov/rack-oauth2&#34;&gt;rack-oauth2&lt;/a&gt; for OAuth2 support.&lt;/p&gt; &#xA;&lt;p&gt;You can access the controller params, headers, and helpers through the context with the &lt;code&gt;#context&lt;/code&gt; method inside any auth middleware inherited from &lt;code&gt;Grape::Middleware::Auth::Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Describing and Inspecting an API&lt;/h2&gt; &#xA;&lt;p&gt;Grape routes can be reflected at runtime. This can notably be useful for generating documentation.&lt;/p&gt; &#xA;&lt;p&gt;Grape exposes arrays of API versions and compiled routes. Each route contains a &lt;code&gt;route_prefix&lt;/code&gt;, &lt;code&gt;route_version&lt;/code&gt;, &lt;code&gt;route_namespace&lt;/code&gt;, &lt;code&gt;route_method&lt;/code&gt;, &lt;code&gt;route_path&lt;/code&gt; and &lt;code&gt;route_params&lt;/code&gt;. You can add custom route settings to the route metadata with &lt;code&gt;route_setting&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class TwitterAPI &amp;lt; Grape::API&#xA;  version &#39;v1&#39;&#xA;  desc &#39;Includes custom settings.&#39;&#xA;  route_setting :custom, key: &#39;value&#39;&#xA;  get do&#xA;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examine the routes at runtime.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;TwitterAPI::versions # yields [ &#39;v1&#39;, &#39;v2&#39; ]&#xA;TwitterAPI::routes # yields an array of Grape::Route objects&#xA;TwitterAPI::routes[0].version # =&amp;gt; &#39;v1&#39;&#xA;TwitterAPI::routes[0].description # =&amp;gt; &#39;Includes custom settings.&#39;&#xA;TwitterAPI::routes[0].settings[:custom] # =&amp;gt; { key: &#39;value&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;Route#route_xyz&lt;/code&gt; methods have been deprecated since 0.15.0.&lt;/p&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;Route#xyz&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;Note that difference of &lt;code&gt;Route#options&lt;/code&gt; and &lt;code&gt;Route#settings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; can be referred from your route, it should be set by specifing key and value on verb methods such as &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt;. The &lt;code&gt;settings&lt;/code&gt; can also be referred from your route, but it should be set by specifing key and value on &lt;code&gt;route_setting&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Current Route and Endpoint&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to retrieve the information about the current route from within an API call with &lt;code&gt;route&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyAPI &amp;lt; Grape::API&#xA;  desc &#39;Returns a description of a parameter.&#39;&#xA;  params do&#xA;    requires :id, type: Integer, desc: &#39;Identity.&#39;&#xA;  end&#xA;  get &#39;params/:id&#39; do&#xA;    route.route_params[params[:id]] # yields the parameter description&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The current endpoint responding to the request is &lt;code&gt;self&lt;/code&gt; within the API block or &lt;code&gt;env[&#39;api.endpoint&#39;]&lt;/code&gt; elsewhere. The endpoint has some interesting properties, such as &lt;code&gt;source&lt;/code&gt; which gives you access to the original code block of the API implementation. This can be particularly useful for building a logger middleware.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApiLogger &amp;lt; Grape::Middleware::Base&#xA;  def before&#xA;    file = env[&#39;api.endpoint&#39;].source.source_location[0]&#xA;    line = env[&#39;api.endpoint&#39;].source.source_location[1]&#xA;    logger.debug &#34;[api] #{file}:#{line}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Before, After and Finally&lt;/h2&gt; &#xA;&lt;p&gt;Blocks can be executed before or after every API call, using &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;before_validation&lt;/code&gt; and &lt;code&gt;after_validation&lt;/code&gt;. If the API fails the &lt;code&gt;after&lt;/code&gt; call will not be triggered, if you need code to execute for sure use the &lt;code&gt;finally&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before and after callbacks execute in the following order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;before&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;before_validation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;validations&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;after_validation&lt;/code&gt; (upon successful validation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;the API call&lt;/em&gt; (upon successful validation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;after&lt;/code&gt; (upon successful validation and API call)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;finally&lt;/code&gt; (always)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Steps 4, 5 and 6 only happen if validation succeeds.&lt;/p&gt; &#xA;&lt;p&gt;If a request for a resource is made with an unsupported HTTP method (returning HTTP 405) only &lt;code&gt;before&lt;/code&gt; callbacks will be executed. The remaining callbacks will be bypassed.&lt;/p&gt; &#xA;&lt;p&gt;If a request for a resource is made that triggers the built-in &lt;code&gt;OPTIONS&lt;/code&gt; handler, only &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; callbacks will be executed. The remaining callbacks will be bypassed.&lt;/p&gt; &#xA;&lt;p&gt;For example, using a simple &lt;code&gt;before&lt;/code&gt; block to set a header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  header &#39;X-Robots-Tag&#39;, &#39;noindex&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can ensure a block of code runs after every request (including failures) with &lt;code&gt;finally&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;finally do&#xA;  # this code will run after every request (successful or failed)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Namespaces&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Callbacks apply to each API call within and below the current namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyAPI &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    &#34;root - #{@blah}&#34;&#xA;  end&#xA;&#xA;  namespace :foo do&#xA;    before do&#xA;      @blah = &#39;blah&#39;&#xA;    end&#xA;&#xA;    get &#39;/&#39; do&#xA;      &#34;root - foo - #{@blah}&#34;&#xA;    end&#xA;&#xA;    namespace :bar do&#xA;      get &#39;/&#39; do&#xA;        &#34;root - foo - bar - #{@blah}&#34;&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The behavior is then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /           # &#39;root - &#39;&#xA;GET /foo        # &#39;root - foo - blah&#39;&#xA;GET /foo/bar    # &#39;root - foo - bar - blah&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Params on a &lt;code&gt;namespace&lt;/code&gt; (or whichever alias you are using) will also be available when using &lt;code&gt;before_validation&lt;/code&gt; or &lt;code&gt;after_validation&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyAPI &amp;lt; Grape::API&#xA;  params do&#xA;    requires :blah, type: Integer&#xA;  end&#xA;  resource &#39;:blah&#39; do&#xA;    after_validation do&#xA;      # if we reach this point validations will have passed&#xA;      @blah = declared(params, include_missing: false)[:blah]&#xA;    end&#xA;&#xA;    get &#39;/&#39; do&#xA;      @blah.class&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The behavior is then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /123        # &#39;Integer&#39;&#xA;GET /foo        # 400 error - &#39;blah is invalid&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Versioning&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a callback is defined within a version block, it&#39;s only called for the routes defined in that block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Test &amp;lt; Grape::API&#xA;  resource :foo do&#xA;    version &#39;v1&#39;, :using =&amp;gt; :path do&#xA;      before do&#xA;        @output ||= &#39;v1-&#39;&#xA;      end&#xA;      get &#39;/&#39; do&#xA;        @output += &#39;hello&#39;&#xA;      end&#xA;    end&#xA;&#xA;    version &#39;v2&#39;, :using =&amp;gt; :path do&#xA;      before do&#xA;        @output ||= &#39;v2-&#39;&#xA;      end&#xA;      get &#39;/&#39; do&#xA;        @output += &#39;hello&#39;&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The behavior is then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /foo/v1       # &#39;v1-hello&#39;&#xA;GET /foo/v2       # &#39;v2-hello&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Altering Responses&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;present&lt;/code&gt; in any callback allows you to add data to a response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyAPI &amp;lt; Grape::API&#xA;  format :json&#xA;&#xA;  after_validation do&#xA;    present :name, params[:name] if params[:name]&#xA;  end&#xA;&#xA;  get &#39;/greeting&#39; do&#xA;    present :greeting, &#39;Hello!&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The behavior is then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /greeting              # {&#34;greeting&#34;:&#34;Hello!&#34;}&#xA;GET /greeting?name=Alan    # {&#34;name&#34;:&#34;Alan&#34;,&#34;greeting&#34;:&#34;Hello!&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of altering a response, you can also terminate and rewrite it from any callback using &lt;code&gt;error!&lt;/code&gt;, including &lt;code&gt;after&lt;/code&gt;. This will cause all subsequent steps in the process to not be called. &lt;strong&gt;This includes the actual api call and any callbacks&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Anchoring&lt;/h2&gt; &#xA;&lt;p&gt;Grape by default anchors all request paths, which means that the request URL should match from start to end to match, otherwise a &lt;code&gt;404 Not Found&lt;/code&gt; is returned. However, this is sometimes not what you want, because it is not always known upfront what can be expected from the call. This is because Rack-mount by default anchors requests to match from the start to the end, or not at all. Rails solves this problem by using a &lt;code&gt;anchor: false&lt;/code&gt; option in your routes. In Grape this option can be used as well when a method is defined.&lt;/p&gt; &#xA;&lt;p&gt;For instance when your API needs to get part of an URL, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class TwitterAPI &amp;lt; Grape::API&#xA;  namespace :statuses do&#xA;    get &#39;/(*:status)&#39;, anchor: false do&#xA;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will match all paths starting with &#39;/statuses/&#39;. There is one caveat though: the &lt;code&gt;params[:status]&lt;/code&gt; parameter only holds the first part of the request url. Luckily this can be circumvented by using the described above syntax for path specification and using the &lt;code&gt;PATH_INFO&lt;/code&gt; Rack environment variable, using &lt;code&gt;env[&#39;PATH_INFO&#39;]&lt;/code&gt;. This will hold everything that comes after the &#39;/statuses/&#39; part.&lt;/p&gt; &#xA;&lt;h2&gt;Using Custom Middleware&lt;/h2&gt; &#xA;&lt;h3&gt;Grape Middleware&lt;/h3&gt; &#xA;&lt;p&gt;You can make a custom middleware by using &lt;code&gt;Grape::Middleware::Base&lt;/code&gt;. It&#39;s inherited from some grape official middlewares in fact.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can write a middleware to log application exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class LoggingError &amp;lt; Grape::Middleware::Base&#xA;  def after&#xA;    return unless @app_response &amp;amp;&amp;amp; @app_response[0] == 500&#xA;    env[&#39;rack.logger&#39;].error(&#34;Raised error on #{env[&#39;PATH_INFO&#39;]}&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your middleware can overwrite application response as follows, except error case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Overwriter &amp;lt; Grape::Middleware::Base&#xA;  def after&#xA;    [200, { &#39;Content-Type&#39; =&amp;gt; &#39;text/plain&#39; }, [&#39;Overwritten.&#39;]]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add your custom middleware with &lt;code&gt;use&lt;/code&gt;, that push the middleware onto the stack, and you can also control where the middleware is inserted using &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;insert_before&lt;/code&gt; and &lt;code&gt;insert_after&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CustomOverwriter &amp;lt; Grape::Middleware::Base&#xA;  def after&#xA;    [200, { &#39;Content-Type&#39; =&amp;gt; &#39;text/plain&#39; }, [@options[:message]]]&#xA;  end&#xA;end&#xA;&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  use Overwriter&#xA;  insert_before Overwriter, CustomOverwriter, message: &#39;Overwritten again.&#39;&#xA;  insert 0, CustomOverwriter, message: &#39;Overwrites all other middleware.&#39;&#xA;&#xA;  get &#39;/&#39; do&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access the controller params, headers, and helpers through the context with the &lt;code&gt;#context&lt;/code&gt; method inside any middleware inherited from &lt;code&gt;Grape::Middleware::Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rails Middleware&lt;/h3&gt; &#xA;&lt;p&gt;Note that when you&#39;re using Grape mounted on Rails you don&#39;t have to use Rails middleware because it&#39;s already included into your middleware stack. You only have to implement the helpers to access the specific &lt;code&gt;env&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;If you are using a custom application that is inherited from &lt;code&gt;Rails::Application&lt;/code&gt; and need to insert a new middleware among the ones initiated via Rails, you will need to register it manually in your custom application class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Company::Application &amp;lt; Rails::Application&#xA;  config.middleware.insert_before(Rack::Attack, Middleware::ApiLogger)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remote IP&lt;/h3&gt; &#xA;&lt;p&gt;By default you can access remote IP with &lt;code&gt;request.ip&lt;/code&gt;. This is the remote IP address implemented by Rack. Sometimes it is desirable to get the remote IP &lt;a href=&#34;http://stackoverflow.com/questions/10997005/whats-the-difference-between-request-remote-ip-and-request-ip-in-rails&#34;&gt;Rails-style&lt;/a&gt; with &lt;code&gt;ActionDispatch::RemoteIp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#39;actionpack&#39;&lt;/code&gt; to your Gemfile and &lt;code&gt;require &#39;action_dispatch/middleware/remote_ip.rb&#39;&lt;/code&gt;. Use the middleware in your API and expose a &lt;code&gt;client_ip&lt;/code&gt; helper. See &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionDispatch/RemoteIp.html&#34;&gt;this documentation&lt;/a&gt; for additional options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  use ActionDispatch::RemoteIp&#xA;&#xA;  helpers do&#xA;    def client_ip&#xA;      env[&#39;action_dispatch.remote_ip&#39;].to_s&#xA;    end&#xA;  end&#xA;&#xA;  get :remote_ip do&#xA;    { ip: client_ip }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Writing Tests&lt;/h2&gt; &#xA;&lt;h3&gt;Writing Tests with Rack&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;rack-test&lt;/code&gt; and define your API as &lt;code&gt;app&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;RSpec&lt;/h4&gt; &#xA;&lt;p&gt;You can test a Grape API with RSpec by making HTTP requests and examining the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;&#xA;describe Twitter::API do&#xA;  include Rack::Test::Methods&#xA;&#xA;  def app&#xA;    Twitter::API&#xA;  end&#xA;&#xA;  context &#39;GET /api/statuses/public_timeline&#39; do&#xA;    it &#39;returns an empty array of statuses&#39; do&#xA;      get &#39;/api/statuses/public_timeline&#39;&#xA;      expect(last_response.status).to eq(200)&#xA;      expect(JSON.parse(last_response.body)).to eq []&#xA;    end&#xA;  end&#xA;  context &#39;GET /api/statuses/:id&#39; do&#xA;    it &#39;returns a status by id&#39; do&#xA;      status = Status.create!&#xA;      get &#34;/api/statuses/#{status.id}&#34;&#xA;      expect(last_response.body).to eq status.to_json&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s no standard way of sending arrays of objects via an HTTP GET, so POST JSON data and specify the correct content-type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe Twitter::API do&#xA;  context &#39;POST /api/statuses&#39; do&#xA;    it &#39;creates many statuses&#39; do&#xA;      statuses = [{ text: &#39;...&#39; }, { text: &#39;...&#39;}]&#xA;      post &#39;/api/statuses&#39;, statuses.to_json, &#39;CONTENT_TYPE&#39; =&amp;gt; &#39;application/json&#39;&#xA;      expect(last_response.body).to eq 201&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Airborne&lt;/h4&gt; &#xA;&lt;p&gt;You can test with other RSpec-based frameworks, including &lt;a href=&#34;https://github.com/brooklynDev/airborne&#34;&gt;Airborne&lt;/a&gt;, which uses &lt;code&gt;rack-test&lt;/code&gt; to make requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;airborne&#39;&#xA;&#xA;Airborne.configure do |config|&#xA;  config.rack_app = Twitter::API&#xA;end&#xA;&#xA;describe Twitter::API do&#xA;  context &#39;GET /api/statuses/:id&#39; do&#xA;    it &#39;returns a status by id&#39; do&#xA;      status = Status.create!&#xA;      get &#34;/api/statuses/#{status.id}&#34;&#xA;      expect_json(status.as_json)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MiniTest&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;test_helper&#39;&#xA;&#xA;class Twitter::APITest &amp;lt; MiniTest::Test&#xA;  include Rack::Test::Methods&#xA;&#xA;  def app&#xA;    Twitter::API&#xA;  end&#xA;&#xA;  def test_get_api_statuses_public_timeline_returns_an_empty_array_of_statuses&#xA;    get &#39;/api/statuses/public_timeline&#39;&#xA;    assert last_response.ok?&#xA;    assert_equal [], JSON.parse(last_response.body)&#xA;  end&#xA;&#xA;  def test_get_api_statuses_id_returns_a_status_by_id&#xA;    status = Status.create!&#xA;    get &#34;/api/statuses/#{status.id}&#34;&#xA;    assert_equal status.to_json, last_response.body&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Writing Tests with Rails&lt;/h3&gt; &#xA;&lt;h4&gt;RSpec&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe Twitter::API do&#xA;  context &#39;GET /api/statuses/public_timeline&#39; do&#xA;    it &#39;returns an empty array of statuses&#39; do&#xA;      get &#39;/api/statuses/public_timeline&#39;&#xA;      expect(response.status).to eq(200)&#xA;      expect(JSON.parse(response.body)).to eq []&#xA;    end&#xA;  end&#xA;  context &#39;GET /api/statuses/:id&#39; do&#xA;    it &#39;returns a status by id&#39; do&#xA;      status = Status.create!&#xA;      get &#34;/api/statuses/#{status.id}&#34;&#xA;      expect(response.body).to eq status.to_json&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Rails, HTTP request tests would go into the &lt;code&gt;spec/requests&lt;/code&gt; group. You may want your API code to go into &lt;code&gt;app/api&lt;/code&gt; - you can match that layout under &lt;code&gt;spec&lt;/code&gt; by adding the following in &lt;code&gt;spec/rails_helper.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.include RSpec::Rails::RequestExampleGroup, type: :request, file_path: /spec\/api/&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MiniTest&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::APITest &amp;lt; ActiveSupport::TestCase&#xA;  include Rack::Test::Methods&#xA;&#xA;  def app&#xA;    Rails.application&#xA;  end&#xA;&#xA;  test &#39;GET /api/statuses/public_timeline returns an empty array of statuses&#39; do&#xA;    get &#39;/api/statuses/public_timeline&#39;&#xA;    assert last_response.ok?&#xA;    assert_equal [], JSON.parse(last_response.body)&#xA;  end&#xA;&#xA;  test &#39;GET /api/statuses/:id returns a status by id&#39; do&#xA;    status = Status.create!&#xA;    get &#34;/api/statuses/#{status.id}&#34;&#xA;    assert_equal status.to_json, last_response.body&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stubbing Helpers&lt;/h3&gt; &#xA;&lt;p&gt;Because helpers are mixed in based on the context when an endpoint is defined, it can be difficult to stub or mock them for testing. The &lt;code&gt;Grape::Endpoint.before_each&lt;/code&gt; method can help by allowing you to define behavior on the endpoint that will run before every request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;an endpoint that needs helpers stubbed&#39; do&#xA;  before do&#xA;    Grape::Endpoint.before_each do |endpoint|&#xA;      allow(endpoint).to receive(:helper_name).and_return(&#39;desired_value&#39;)&#xA;    end&#xA;  end&#xA;&#xA;  after do&#xA;    Grape::Endpoint.before_each nil&#xA;  end&#xA;&#xA;  it &#39;stubs the helper&#39; do&#xA;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reloading API Changes in Development&lt;/h2&gt; &#xA;&lt;h3&gt;Reloading in Rack Applications&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/AlexYankee/grape-reload&#34;&gt;grape-reload&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Reloading in Rails Applications&lt;/h3&gt; &#xA;&lt;p&gt;Add API paths to &lt;code&gt;config/application.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Auto-load API and its subdirectories&#xA;config.paths.add File.join(&#39;app&#39;, &#39;api&#39;), glob: File.join(&#39;**&#39;, &#39;*.rb&#39;)&#xA;config.autoload_paths += Dir[Rails.root.join(&#39;app&#39;, &#39;api&#39;, &#39;*&#39;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create &lt;code&gt;config/initializers/reload_api.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if Rails.env.development?&#xA;  ActiveSupport::Dependencies.explicitly_unloadable_constants &amp;lt;&amp;lt; &#39;Twitter::API&#39;&#xA;&#xA;  api_files = Dir[Rails.root.join(&#39;app&#39;, &#39;api&#39;, &#39;**&#39;, &#39;*.rb&#39;)]&#xA;  api_reloader = ActiveSupport::FileUpdateChecker.new(api_files) do&#xA;    Rails.application.reload_routes!&#xA;  end&#xA;  ActionDispatch::Callbacks.to_prepare do&#xA;    api_reloader.execute_if_updated&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Rails &amp;gt;= 5.1.4, change this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActionDispatch::Callbacks.to_prepare do&#xA;  api_reloader.execute_if_updated&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::Reloader.to_prepare do&#xA;  api_reloader.execute_if_updated&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://stackoverflow.com/questions/3282655/ruby-on-rails-3-reload-lib-directory-for-each-request/4368838#4368838&#34;&gt;StackOverflow #3282655&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Performance Monitoring&lt;/h2&gt; &#xA;&lt;h3&gt;Active Support Instrumentation&lt;/h3&gt; &#xA;&lt;p&gt;Grape has built-in support for &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveSupport/Notifications.html&#34;&gt;ActiveSupport::Notifications&lt;/a&gt; which provides simple hook points to instrument key parts of your application.&lt;/p&gt; &#xA;&lt;p&gt;The following are currently supported:&lt;/p&gt; &#xA;&lt;h4&gt;endpoint_run.grape&lt;/h4&gt; &#xA;&lt;p&gt;The main execution of an endpoint, includes filters and rendering.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;endpoint&lt;/em&gt; - The endpoint instance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;endpoint_render.grape&lt;/h4&gt; &#xA;&lt;p&gt;The execution of the main content block of the endpoint.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;endpoint&lt;/em&gt; - The endpoint instance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;endpoint_run_filters.grape&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;endpoint&lt;/em&gt; - The endpoint instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;filters&lt;/em&gt; - The filters being executed&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;type&lt;/em&gt; - The type of filters (before, before_validation, after_validation, after)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;endpoint_run_validators.grape&lt;/h4&gt; &#xA;&lt;p&gt;The execution of validators.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;endpoint&lt;/em&gt; - The endpoint instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;validators&lt;/em&gt; - The validators being executed&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;request&lt;/em&gt; - The request being validated&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;format_response.grape&lt;/h4&gt; &#xA;&lt;p&gt;Serialization or template rendering.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;env&lt;/em&gt; - The request environment&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;formatter&lt;/em&gt; - The formatter object (e.g., &lt;code&gt;Grape::Formatter::Json&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveSupport/Notifications.html&#34;&gt;ActiveSupport::Notifications documentation&lt;/a&gt; for information on how to subscribe to these events.&lt;/p&gt; &#xA;&lt;h3&gt;Monitoring Products&lt;/h3&gt; &#xA;&lt;p&gt;Grape integrates with following third-party tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;New Relic&lt;/strong&gt; - &lt;a href=&#34;https://docs.newrelic.com/docs/agents/ruby-agent/frameworks/grape-instrumentation&#34;&gt;built-in support&lt;/a&gt; from v3.10.0 of the official &lt;a href=&#34;https://github.com/newrelic/rpm&#34;&gt;newrelic_rpm&lt;/a&gt; gem, also &lt;a href=&#34;https://github.com/xinminlabs/newrelic-grape&#34;&gt;newrelic-grape&lt;/a&gt; gem&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Librato Metrics&lt;/strong&gt; - &lt;a href=&#34;https://github.com/seanmoon/grape-librato&#34;&gt;grape-librato&lt;/a&gt; gem&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.skylight.io/&#34;&gt;Skylight&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&#34;https://github.com/skylightio/skylight-ruby&#34;&gt;skylight&lt;/a&gt; gem, &lt;a href=&#34;https://docs.skylight.io/grape/&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.appsignal.com&#34;&gt;AppSignal&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&#34;https://github.com/appsignal/appsignal-ruby&#34;&gt;appsignal-ruby&lt;/a&gt; gem, &lt;a href=&#34;http://docs.appsignal.com/getting-started/supported-frameworks.html#grape&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.elastic.co/products/apm&#34;&gt;ElasticAPM&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&#34;https://github.com/elastic/apm-agent-ruby&#34;&gt;elastic-apm&lt;/a&gt; gem, &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/3.x/getting-started-rack.html#getting-started-grape&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.datadoghq.com/tracing/&#34;&gt;Datadog APM&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&#34;https://github.com/datadog/dd-trace-rb&#34;&gt;ddtrace&lt;/a&gt; gem, &lt;a href=&#34;https://docs.datadoghq.com/tracing/setup_overview/setup/ruby/#grape&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Grape&lt;/h2&gt; &#xA;&lt;p&gt;Grape is work of hundreds of contributors. You&#39;re encouraged to submit pull requests, propose features and discuss issues.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/SECURITY.md&#34;&gt;SECURITY&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2010-2020 Michael Bleigh, Intridea Inc. and Contributors.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/tapioca</title>
    <updated>2023-03-26T02:01:45Z</updated>
    <id>tag:github.com,2023-03-26:/Shopify/tapioca</id>
    <link href="https://github.com/Shopify/tapioca" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The swiss army knife of RBI generation&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: This software is currently under active development. The API and interface should be considered unstable until a v1.0.0 release.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Tapioca logo&#34; width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/misc/tapioca-logo.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Tapioca - The swiss army knife of RBI generation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Shopify/tapioca/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tapioca makes it easy to work with &lt;a href=&#34;https://sorbet.org&#34;&gt;Sorbet&lt;/a&gt; in your codebase. It surfaces types and methods from many sources that Sorbet cannot otherwise see – such as gems, Rails and other DSLs – compiles them into &lt;a href=&#34;https://sorbet.org/docs/rbi&#34;&gt;RBI files&lt;/a&gt; and makes it easy for you to add gradual typing to your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy installation and configuration&lt;/li&gt; &#xA; &lt;li&gt;Generation of RBI files for the gems used in your application &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatic generation from your application&#39;s Gemfile&lt;/li&gt; &#xA;   &lt;li&gt;Importing of signatures from the source code of gems&lt;/li&gt; &#xA;   &lt;li&gt;Importing of documentation from the source code of gems&lt;/li&gt; &#xA;   &lt;li&gt;Synchronization validation for your CI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generation of RBI files for various DSL patterns that relies on meta-programming &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatic generation from your application&#39;s content&lt;/li&gt; &#xA;   &lt;li&gt;Support many DSL patterns such as Rails, Google Protobuf, SmartProperties and more out of the box&lt;/li&gt; &#xA;   &lt;li&gt;Extensible interface that allows you to write your own DSL compilers for other DSL patterns&lt;/li&gt; &#xA;   &lt;li&gt;Automatic generation of signatures for methods from known DSLs&lt;/li&gt; &#xA;   &lt;li&gt;Synchronization validation for your CI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Management of shim RBI files &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Find useless definitions in shim RBI files from gems generated RBI files&lt;/li&gt; &#xA;   &lt;li&gt;Find useless definitions in shim RBI files from DSL generated RBI files&lt;/li&gt; &#xA;   &lt;li&gt;Find useless definitions in shim RBI files from Sorbet&#39;s embedded RBI for core and stdlib&lt;/li&gt; &#xA;   &lt;li&gt;Synchronization validation for your CI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents &#xA; &lt;!-- no_toc --&gt;&lt;/h2&gt; &#xA;&lt;!-- START_TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#generating-rbi-files-for-gems&#34;&gt;Generating RBI files for gems&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#manually-requiring-parts-of-a-gem&#34;&gt;Manually requiring parts of a gem&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#excluding-a-gem-from-rbi-generation&#34;&gt;Excluding a gem from RBI generation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#changing-the-strictness-level-of-the-rbi-for-a-gem&#34;&gt;Changing the strictness level of the RBI for a gem&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#keeping-rbi-files-for-gems-up-to-date&#34;&gt;Keeping RBI files for gems up-to-date&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#pulling-rbi-annotations-from-remote-sources&#34;&gt;Pulling RBI annotations from remote sources&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#basic-authentication&#34;&gt;Basic authentication&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#using-a-netrc-file&#34;&gt;Using a .netrc file&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#changing-the-typed-strictness-of-annotations-files&#34;&gt;Changing the typed strictness of annotations files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#generating-rbi-files-for-rails-and-other-dsls&#34;&gt;Generating RBI files for Rails and other DSLs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#keeping-rbi-files-for-dsls-up-to-date&#34;&gt;Keeping RBI files for DSLs up-to-date&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#writing-custom-dsl-compilers&#34;&gt;Writing custom DSL compilers&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#rbi-files-for-missing-constants-and-methods&#34;&gt;RBI files for missing constants and methods&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#generating-the-rbi-file-for-missing-constants&#34;&gt;Generating the RBI file for missing constants&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#manually-writing-rbi-definitions-shims&#34;&gt;Manually writing RBI definitions (shims)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END_TOC --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;group :development do&#xA;  gem &#39;tapioca&#39;, require: false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;bundle install&lt;/code&gt; and make sure Tapioca is properly installed:&lt;/p&gt; &#xA;&lt;!-- START_HELP --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help&#xA;&#xA;Commands:&#xA;  tapioca --version, -v      # show version&#xA;  tapioca annotations        # Pull gem RBI annotations from remote sources&#xA;  tapioca check-shims        # check duplicated definitions in shim RBIs&#xA;  tapioca configure          # initialize folder structure and type checking configuration&#xA;  tapioca dsl [constant...]  # generate RBIs for dynamic methods&#xA;  tapioca gem [gem...]       # generate RBIs from gems&#xA;  tapioca help [COMMAND]     # Describe available commands or one specific command&#xA;  tapioca init               # get project ready for type checking&#xA;  tapioca require            # generate the list of files to be required by tapioca&#xA;  tapioca todo               # generate the list of unresolved constants&#xA;&#xA;Options:&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]  # Path to the Tapioca configuration file&#xA;                                     # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]    # Verbose output for debugging purposes&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP --&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Execute this command to get started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle exec tapioca init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create the &lt;a href=&#34;https://sorbet.org/docs/cli#config-file&#34;&gt;configuration file for Sorbet&lt;/a&gt;, the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#Configuration&#34;&gt;configuration file for Tapioca&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#manually-requiring-parts-of-a-gem&#34;&gt;require.rb file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;install the &lt;a href=&#34;https://bundler.io/man/bundle-binstubs.1.html#DESCRIPTION&#34;&gt;binstub&lt;/a&gt; for Tapioca in your app&#39;s &lt;code&gt;bin/&lt;/code&gt; folder, so that you can use &lt;code&gt;bin/tapioca&lt;/code&gt; to run commands in your app&lt;/li&gt; &#xA; &lt;li&gt;pull the community RBI annotations from the &lt;a href=&#34;https://github.com/Shopify/rbi-central&#34;&gt;central repository&lt;/a&gt; matching your app&#39;s gems&lt;/li&gt; &#xA; &lt;li&gt;generate the RBIs for your app&#39;s gems&lt;/li&gt; &#xA; &lt;li&gt;generate the RBI file for missing constants&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See the following sections for more details about each step.&lt;/p&gt; &#xA;&lt;!-- START_HELP_COMMAND_INIT --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help init&#xA;&#xA;Usage:&#xA;  tapioca init&#xA;&#xA;Options:&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]  # Path to the Tapioca configuration file&#xA;                                     # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]    # Verbose output for debugging purposes&#xA;&#xA;get project ready for type checking&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_INIT --&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Generating RBI files for gems&lt;/h3&gt; &#xA;&lt;p&gt;Sorbet does not read the code in your gem dependencies, so it does not know the constants and methods declared inside gems. Tapioca is able to load your gem dependencies from your application&#39;s &lt;code&gt;Gemfile&lt;/code&gt; and compile RBI files to represent their content.&lt;/p&gt; &#xA;&lt;p&gt;In order to generate the RBI files for the gems used in your application, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca gems [gems...]&#xA;&#xA;Removing RBI files of gems that have been removed:&#xA;&#xA;  Nothing to do.&#xA;&#xA;Generating RBI files of gems that are added or updated:&#xA;&#xA;  Requiring all gems to prepare for compiling...    Done&#xA;&#xA;  Compiled ansi&#xA;      create  sorbet/rbi/gems/ansi@1.5.0.rbi&#xA;&#xA;  ...&#xA;&#xA;All operations performed in working directory.&#xA;Please review changes and commit them.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will load your application, find all the gems required by it and generate an RBI file for each gem under the &lt;code&gt;sorbet/rbi/gems&lt;/code&gt; directory for each of those gems. This process will also import signatures that can be found inside each gem sources, and, optionally, any YARD documentation inside the gem.&lt;/p&gt; &#xA;&lt;!-- START_HELP_COMMAND_GEM --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help gem&#xA;&#xA;Usage:&#xA;  tapioca gem [gem...]&#xA;&#xA;Options:&#xA;  --out, -o, [--outdir=directory]                             # The output directory for generated gem RBI files&#xA;                                                              # Default: sorbet/rbi/gems&#xA;          [--file-header], [--no-file-header]                 # Add a &#34;This file is generated&#34; header on top of each generated RBI file&#xA;                                                              # Default: true&#xA;          [--all], [--no-all]                                 # Regenerate RBI files for all gems&#xA;  --pre, -b, [--prerequire=file]                              # A file to be required before Bundler.require is called&#xA;  --post, -a, [--postrequire=file]                            # A file to be required after Bundler.require is called&#xA;                                                              # Default: sorbet/tapioca/require.rb&#xA;  -x, [--exclude=gem [gem ...]]                               # Exclude the given gem(s) from RBI generation&#xA;  --typed, -t, [--typed-overrides=gem:level [gem:level ...]]  # Override for typed sigils for generated gem RBIs&#xA;                                                              # Default: {&#34;activesupport&#34;=&amp;gt;&#34;false&#34;}&#xA;          [--verify], [--no-verify]                           # Verify RBIs are up-to-date&#xA;          [--doc], [--no-doc]                                 # Include YARD documentation from sources when generating RBIs. Warning: this might be slow&#xA;                                                              # Default: true&#xA;          [--loc], [--no-loc]                                 # Include comments with source location when generating RBIs&#xA;                                                              # Default: true&#xA;          [--exported-gem-rbis], [--no-exported-gem-rbis]     # Include RBIs found in the `rbi/` directory of the gem&#xA;                                                              # Default: true&#xA;  -w, [--workers=N]                                           # Number of parallel workers to use when generating RBIs (default: auto)&#xA;          [--auto-strictness], [--no-auto-strictness]         # Autocorrect strictness in gem RBIs in case of conflict with the DSL RBIs&#xA;                                                              # Default: true&#xA;  --dsl-dir, [--dsl-dir=directory]                            # The DSL directory used to correct gems strictnesses&#xA;                                                              # Default: sorbet/rbi/dsl&#xA;          [--rbi-max-line-length=N]                           # Set the max line length of generated RBIs. Signatures longer than the max line length will be wrapped&#xA;                                                              # Default: 120&#xA;  -e, [--environment=ENVIRONMENT]                             # The Rack/Rails environment to use when generating RBIs&#xA;                                                              # Default: development&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]                           # Path to the Tapioca configuration file&#xA;                                                              # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]                             # Verbose output for debugging purposes&#xA;&#xA;generate RBIs from gems&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_GEM --&gt; &#xA;&lt;p&gt;By default, running &lt;code&gt;tapioca gem&lt;/code&gt; will only generate the RBI files for gems that have been added to or removed from the project&#39;s &lt;code&gt;Gemfile&lt;/code&gt; this means that Tapioca will not regenerate the RBI files for untouched gems. However, when changing Tapioca configuration or bumping its version, it may be useful to force the regeneration of the RBI files previously generated. This can be done with the &lt;code&gt;--all&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/tapioca gems --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Are you coming from &lt;code&gt;srb rbi&lt;/code&gt;? &lt;a href=&#34;https://github.com/Shopify/tapioca/wiki/How-does-tapioca-compare-to-%22srb-rbi-gems%22-%3F&#34;&gt;See how &lt;code&gt;tapioca gem&lt;/code&gt; compares to &lt;code&gt;srb rbi&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Manually requiring parts of a gem&lt;/h4&gt; &#xA;&lt;p&gt;It may happen that the RBI file generated for a gem listed inside your &lt;code&gt;Gemfile.lock&lt;/code&gt; is missing some definitions that you would expect it to be exporting.&lt;/p&gt; &#xA;&lt;p&gt;For gems that have a normal default &lt;code&gt;require&lt;/code&gt; and that load all of their constants through that, everything should work seamlessly. However, for gems that are marked as &lt;code&gt;require: false&lt;/code&gt; in the &lt;code&gt;Gemfile&lt;/code&gt;, or for gems that export constants optionally via different requires, where a single require does not load the whole gem code into memory, Tapioca will not be able to load some of the types into memory and, thus, won&#39;t be able to generate complete RBIs for them. For this reason, we need to keep a small external file named &lt;code&gt;sorbet/tapioca/require.rb&lt;/code&gt; that is executed after all the gems in the &lt;code&gt;Gemfile&lt;/code&gt; have been required and before generation of gem RBIs have started. This file is responsible for adding the requires for additional files from gems, which are not covered by the default require.&lt;/p&gt; &#xA;&lt;p&gt;For example, suppose you are using the class &lt;code&gt;BetterHtml::Parser&lt;/code&gt; exported from the &lt;code&gt;better_html&lt;/code&gt; gem. Just doing a &lt;code&gt;require &#34;better_html&#34;&lt;/code&gt; (which is the default require) does not load that type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle exec pry&#xA;&#xA;[1] pry(main)&amp;gt; require &#39;better_html&#39;&#xA;=&amp;gt; true&#xA;[2] pry(main)&amp;gt; BetterHtml&#xA;=&amp;gt; BetterHtml&#xA;[3] pry(main)&amp;gt; BetterHtml::Parser&#xA;NameError: uninitialized constant BetterHtml::Parser&#xA;from (pry):3:in `__pry__`&#xA;[4] pry(main)&amp;gt; require &#39;better_html/parser&#39;&#xA;=&amp;gt; true&#xA;[5] pry(main)&amp;gt; BetterHtml::Parser&#xA;=&amp;gt; BetterHtml::Parser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to make sure that &lt;code&gt;tapioca&lt;/code&gt; can reflect on that type, we need to add the line &lt;code&gt;require &#34;better_html/parser&#34;&lt;/code&gt; to the &lt;code&gt;sorbet/tapioca/require.rb&lt;/code&gt; file. This will make sure &lt;code&gt;BetterHtml::Parser&lt;/code&gt; is loaded into memory and a type annotation is generated for it in the &lt;code&gt;better_html.rbi&lt;/code&gt; file. If this extra &lt;code&gt;require&lt;/code&gt; line is not added to &lt;code&gt;sorbet/tapioca/require.rb&lt;/code&gt; file, then Tapioca will be able to generate definitions for &lt;code&gt;BetterHtml&lt;/code&gt; and other constants, but not for &lt;code&gt;BetterHtml::Parser&lt;/code&gt;, which will be missing from the RBI file.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can take a look at Tapioca&#39;s own &lt;a href=&#34;https://github.com/Shopify/tapioca/raw/main/sorbet/tapioca/require.rb&#34;&gt;&lt;code&gt;require.rb&lt;/code&gt; file&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# typed: strict&#xA;# frozen_string_literal: true&#xA;&#xA;require &#34;ansi/code&#34;&#xA;require &#34;google/protobuf&#34;&#xA;require &#34;rails/all&#34;&#xA;require &#34;rails/generators&#34;&#xA;require &#34;rails/generators/app_base&#34;&#xA;require &#34;rake/testtask&#34;&#xA;require &#34;rubocop/rake_task&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you ever run into a case, where you add a gem or update the version of a gem and run &lt;code&gt;tapioca gem&lt;/code&gt; but don&#39;t have some types you expect in the generated gem RBI files, you will need to make sure you have added the necessary requires to the &lt;code&gt;sorbet/tapioca/require.rb&lt;/code&gt; file and regenerate the RBI file for that gem explicitly using &lt;code&gt;bin/tapioca gem &amp;lt;gem-name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To help you get started, you can use the command &lt;code&gt;tapioca require&lt;/code&gt; to auto-populate the contents of the &lt;code&gt;sorbet/tapioca/require.rb&lt;/code&gt; file with all the requires found in your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca require&#xA;&#xA;Compiling sorbet/tapioca/require.rb, this may take a few seconds... Done&#xA;&#xA;All requires from this application have been written to sorbet/tapioca/require.rb.&#xA;Please review changes and commit them, then run `bin/tapioca gem`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the file is generated, you should review it, remove all unnecessary requires and commit it.&lt;/p&gt; &#xA;&lt;h4&gt;Excluding a gem from RBI generation&lt;/h4&gt; &#xA;&lt;p&gt;It may be useful to exclude some gems from the generation process. For example for gems that are in Bundle&#39;s debug group or gems of which the contents are dependent on the architecture they are loaded on.&lt;/p&gt; &#xA;&lt;p&gt;To do so you can pass the list of gems you want to exclude in the command line with the &lt;code&gt;--exclude&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca gems --exclude gemA gemB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or through the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gem:&#xA;  exclude:&#xA;    - gemA&#xA;    - gemB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a few development/test environment gems that can cause RBI generation issues, so Tapioca skips them by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fakefs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Changing the strictness level of the RBI for a gem&lt;/h4&gt; &#xA;&lt;p&gt;By default, all RBI files for gems are generated with the &lt;a href=&#34;https://sorbet.org/docs/static#file-level-granularity-strictness-levels&#34;&gt;strictness level&lt;/a&gt; &lt;code&gt;typed: true&lt;/code&gt;. Sometimes, this strictness level can create type-checking errors when a gem contains definitions that conflict with &lt;a href=&#34;https://sorbet.org/docs/faq#it-looks-like-sorbets-types-for-the-stdlib-are-wrong&#34;&gt;Sorbet internal definitions for Ruby core and standard library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Tapioca comes with an automatic detection (option &lt;code&gt;--auto-strictness&lt;/code&gt;, enabled by default) of such cases and will switch the strictness level to &lt;code&gt;typed: false&lt;/code&gt; in RBI files containing conflicts with the core and standard library definitions. It is nonetheless possible to manually switch the strictness level for a gem using the &lt;code&gt;--typed-overrides&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca gems --typed-overrides gemA:false gemB:false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or through the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gem:&#xA;  typed_overrides:&#xA;    gemA: &#34;false&#34;&#xA;    gemB: &#34;false&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Keeping RBI files for gems up-to-date&lt;/h4&gt; &#xA;&lt;p&gt;To ensure all RBI files for gems are up-to-date with the latest changes in your &lt;code&gt;Gemfile.lock&lt;/code&gt;, Tapioca provides a &lt;code&gt;--verify&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca gems --verify&#xA;&#xA;Checking for out-of-date RBIs...&#xA;&#xA;Nothing to do, all RBIs are up-to-date.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option can be used on CI to make sure the RBI files are always up-to-date and ensure accurate type checking. &lt;strong&gt;Warning&lt;/strong&gt;: doing so will break your normal Dependabot workflow as every pull-request opened to bump a gem version will fail CI since the RBI will be out-of-date and will require you to manually run &lt;code&gt;bin/tapioca gems&lt;/code&gt; to update them.&lt;/p&gt; &#xA;&lt;h3&gt;Pulling RBI annotations from remote sources&lt;/h3&gt; &#xA;&lt;p&gt;Since Tapioca does not perform any type inference, the RBI files generated for the gems do not contain any type signatures. Instead, Tapioca relies on the community to provide high-quality, manually written RBI annotations for public gems.&lt;/p&gt; &#xA;&lt;p&gt;To pull the annotations relevant to your project from the central repository, run the &lt;code&gt;annotations&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations&#xA;&#xA;Retrieving index from central repository... Done&#xA;Listing gems from Gemfile.lock... Done&#xA;Removing annotations for gems that have been removed...  Nothing to do&#xA;Fetching gem annotations from central repository...&#xA;&#xA;  Fetched activesupport&#xA;   created  sorbet/rbi/annotations/activesupport.rbi&#xA;&#xA;Done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- START_HELP_COMMAND_ANNOTATIONS --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help annotations&#xA;&#xA;Usage:&#xA;  tapioca annotations&#xA;&#xA;Options:&#xA;          [--sources=one two three]                           # URIs of the sources to pull gem RBI annotations from&#xA;                                                              # Default: [&#34;https://raw.githubusercontent.com/Shopify/rbi-central/main&#34;]&#xA;          [--netrc], [--no-netrc]                             # Use .netrc to authenticate to private sources&#xA;                                                              # Default: true&#xA;          [--netrc-file=NETRC_FILE]                           # Path to .netrc file&#xA;          [--auth=AUTH]                                       # HTTP authorization header for private sources&#xA;  --typed, -t, [--typed-overrides=gem:level [gem:level ...]]  # Override for typed sigils for pulled annotations&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]                           # Path to the Tapioca configuration file&#xA;                                                              # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]                             # Verbose output for debugging purposes&#xA;&#xA;Pull gem RBI annotations from remote sources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_ANNOTATIONS --&gt; &#xA;&lt;p&gt;By default, Tapioca will pull the annotations stored in the central repository located at &lt;a href=&#34;https://github.com/Shopify/rbi-central&#34;&gt;https://github.com/Shopify/rbi-central&lt;/a&gt;. It is possible to use a custom repository by changing the value of the &lt;code&gt;--sources&lt;/code&gt; options. For example if your repository is stored on Github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations --sources https://raw.githubusercontent.com/$USER/$REPO/$BRANCH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tapioca also supports pulling annotations from multiple sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations --sources https://raw.githubusercontent.com/$USER/$REPO1/$BRANCH https://raw.githubusercontent.com/$USER/$REPO2/$BRANCH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Basic authentication&lt;/h4&gt; &#xA;&lt;p&gt;Private repositories can be used as sources by passing the option &lt;code&gt;--auth&lt;/code&gt; with an authentication string. For Github, this string is &lt;code&gt;token $TOKEN&lt;/code&gt; where &lt;code&gt;$TOKEN&lt;/code&gt; is a &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;personal access token&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations --sources https://raw.githubusercontent.com/$USER/$PRIVATE_REPO/$BRANCH --auth &#34;token $TOKEN&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using a .netrc file&lt;/h4&gt; &#xA;&lt;p&gt;Tapioca supports reading credentials from a &lt;a href=&#34;https://www.gnu.org/software/inetutils/manual/html_node/The-_002enetrc-file.html&#34;&gt;netrc&lt;/a&gt; file (defaulting to &lt;code&gt;~/.netrc&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Given these lines in your netrc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-netrc&#34;&gt;machine raw.githubusercontent.com&#xA;  login $USERNAME&#xA;  password $TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;$USERNAME&lt;/code&gt; is your Github username and &lt;code&gt;$TOKEN&lt;/code&gt; is a &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;personal access token&lt;/a&gt;, then, if you run Tapioca with the &lt;code&gt;--netrc&lt;/code&gt; option (enabled by default), your annotation requests should be authenticated properly.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--netrc-file&lt;/code&gt; option can be specified to read from a file other than &lt;code&gt;~/.netrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations --netrc-file /path/to/my/netrc/file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;--netrc-file&lt;/code&gt;, you can also specify an alternative netrc file by using the &lt;code&gt;TAPIOCA_NETRC_FILE&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ TAPIOCA_NETRC_FILE=/path/to/my/netrc/file bin/tapioca annotations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tapioca will first try to find the netrc file as specified by the &lt;code&gt;--netrc-file&lt;/code&gt; option. If that option is not supplied, it will try the &lt;code&gt;TAPIOCA_NETRC_FILE&lt;/code&gt; environment variable value. If that value is not supplied either, it will fallback to &lt;code&gt;~/.netrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Changing the typed strictness of annotations files&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes the annotations files pulled by Tapioca will create type errors in your project because of incompatibilities. It is possible to ignore such files by switching their strictness level &lt;code&gt;--typed-overrides&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations --typed-overrides gemA:ignore gemB:false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or through the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;annotations:&#xA;  typed_overrides:&#xA;    gemA: &#34;ignore&#34;&#xA;    gemB: &#34;false&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating RBI files for Rails and other DSLs&lt;/h3&gt; &#xA;&lt;p&gt;Sorbet by itself does not understand DSLs involving meta-programming, such as Rails. This means that Sorbet won&#39;t know about constants and methods generated by &lt;code&gt;ActiveRecord&lt;/code&gt; or &lt;code&gt;ActiveSupport&lt;/code&gt;. To solve this, Tapioca can load your application and introspect it to find the constants and methods that would exist at runtime and compile them into RBI files.&lt;/p&gt; &#xA;&lt;p&gt;To generate the RBI files for the DSLs used in your application, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca dsl&#xA;&#xA;Loading Rails application... Done&#xA;Loading DSL compiler classes... Done&#xA;Compiling DSL RBI files...&#xA;&#xA;      create  sorbet/rbi/dsl/my_model.rbi&#xA;      ...&#xA;&#xA;Done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate DSL RBIs for specified constants (or for all handled constants, if a constant name is not supplied). You can read about DSL RBI compilers supplied by &lt;code&gt;tapioca&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/manual/compilers.md&#34;&gt;the manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- START_HELP_COMMAND_DSL --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help dsl&#xA;&#xA;Usage:&#xA;  tapioca dsl [constant...]&#xA;&#xA;Options:&#xA;  --out, -o, [--outdir=directory]                # The output directory for generated DSL RBI files&#xA;                                                 # Default: sorbet/rbi/dsl&#xA;          [--file-header], [--no-file-header]    # Add a &#34;This file is generated&#34; header on top of each generated RBI file&#xA;                                                 # Default: true&#xA;          [--only=compiler [compiler ...]]       # Only run supplied DSL compiler(s)&#xA;          [--exclude=compiler [compiler ...]]    # Exclude supplied DSL compiler(s)&#xA;          [--verify], [--no-verify]              # Verifies RBIs are up-to-date&#xA;  -q, [--quiet], [--no-quiet]                    # Suppresses file creation output&#xA;  -w, [--workers=N]                              # Number of parallel workers to use when generating RBIs (default: 2)&#xA;                                                 # Default: 2&#xA;          [--rbi-max-line-length=N]              # Set the max line length of generated RBIs. Signatures longer than the max line length will be wrapped&#xA;                                                 # Default: 120&#xA;  -e, [--environment=ENVIRONMENT]                # The Rack/Rails environment to use when generating RBIs&#xA;                                                 # Default: development&#xA;  -l, [--list-compilers], [--no-list-compilers]  # List all loaded compilers&#xA;          [--app-root=APP_ROOT]                  # The path to the Rails application&#xA;                                                 # Default: .&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]              # Path to the Tapioca configuration file&#xA;                                                 # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]                # Verbose output for debugging purposes&#xA;&#xA;generate RBIs for dynamic methods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_DSL --&gt; &#xA;&lt;h4&gt;Keeping RBI files for DSLs up-to-date&lt;/h4&gt; &#xA;&lt;p&gt;To ensure all RBI files for DSLs are up-to-date with the latest changes in your application or database, Tapioca provide a &lt;code&gt;--verify&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca dsl --verify&#xA;&#xA;Loading Rails application... Done&#xA;Loading DSL compiler classes... Done&#xA;Checking for out-of-date RBIs...&#xA;&#xA;&#xA;RBI files are out-of-date. In your development environment, please run:&#xA;  `bin/tapioca dsl`&#xA;Once it is complete, be sure to commit and push any changes&#xA;&#xA;Reason:&#xA;  File(s) changed:&#xA;  - sorbet/rbi/dsl/my_model.rbi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option can be used on CI to make sure the RBI files are always up-to-date and ensure accurate type checking.&lt;/p&gt; &#xA;&lt;h4&gt;Writing custom DSL compilers&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to create your own compilers for DSLs not supported by Tapioca out of the box.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s take for example this &lt;code&gt;Encryptable&lt;/code&gt; module that uses the &lt;a href=&#34;https://ruby-doc.org/core-3.1.1/Module.html#method-i-included&#34;&gt;&lt;code&gt;included&lt;/code&gt; hook&lt;/a&gt; to dynamically add a few methods to the classes that include it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;module Encryptable&#xA;  def self.included(base)&#xA;    base.extend(ClassMethods)&#xA;  end&#xA;&#xA;  module ClassMethods&#xA;    def attr_encrypted(attr_name)&#xA;      encrypted_attributes &amp;lt;&amp;lt; attr_name&#xA;&#xA;      attr_accessor(attr_name)&#xA;&#xA;      encrypted_attr_name = :&#34;#{attr_name}_encrypted&#34;&#xA;&#xA;      define_method(encrypted_attr_name) do&#xA;        value = send(attr_name)&#xA;        encrypt(value)&#xA;      end&#xA;&#xA;      define_method(&#34;#{encrypted_attr_name}=&#34;) do |value|&#xA;        send(&#34;#{attr_name}=&#34;, decrypt(value))&#xA;      end&#xA;    end&#xA;&#xA;    def encrypted_attributes&#xA;      @encrypted_attributes ||= []&#xA;    end&#xA;  end&#xA;&#xA;  private&#xA;&#xA;  def encrypt(value)&#xA;    value.unpack(&#34;H*&#34;).first&#xA;  end&#xA;&#xA;  def decrypt(value)&#xA;    [value].pack(&#34;H*&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;Encryptable&lt;/code&gt; is included in a class like this one, it makes it possible to call &lt;code&gt;attr_encrypted&lt;/code&gt; to define an attribute, its accessors and its encrypted accessors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class CreditCard&#xA;  include Encryptable&#xA;&#xA;  attr_encrypted :number&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These accessors can then be used on the &lt;code&gt;CreditCard&lt;/code&gt; instance without having to define them in the class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# typed: true&#xA;# file: example.rb&#xA;&#xA;card = CreditCard.new&#xA;card.number = &#34;1234 5678 9012 3456&#34;&#xA;&#xA;p card.number             # =&amp;gt; &#34;1234 5678 9012 3456&#34;&#xA;p card.number_encrypted   # =&amp;gt; &#34;31323334203536373820393031322033343536&#34;&#xA;&#xA;card.number_encrypted = &#34;31323334203536373820393031322033343536&#34;&#xA;p card.number             # =&amp;gt; &#34;1234 5678 9012 3456&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sadly, since these methods have been created dynamically at runtime, when our &lt;code&gt;attr_encryptable&lt;/code&gt; method was run, there are no static traces of the &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;number=&lt;/code&gt;, &lt;code&gt;number_encrypted&lt;/code&gt; and &lt;code&gt;number_encrypted=&lt;/code&gt; methods. Since Sorbet does not run the Ruby code but analyses it statically, it can&#39;t see these methods and running type-checking will show a bunch of errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle exec srb tc&#xA;&#xA;lib/example.rb:5: Method number= does not exist on CreditCard https://srb.help/7003&#xA;lib/example.rb:7: Method number does not exist on CreditCard https://srb.help/7003&#xA;lib/example.rb:8: Method number_encrypted does not exist on CreditCard https://srb.help/7003&#xA;lib/example.rb:10: Method number_encrypted= does not exist on CreditCard https://srb.help/7003&#xA;lib/example.rb:11: Method number does not exist on CreditCard https://srb.help/7003&#xA;&#xA;Errors: 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To solve this you will have to create your own DSL compiler able that understands the &lt;code&gt;Encryptable&lt;/code&gt; DSL and can generate the RBI definitions representing the actual shape of &lt;code&gt;CreditCard&lt;/code&gt; at runtime.&lt;/p&gt; &#xA;&lt;p&gt;To do so, you need to create a new DSL compiler similar to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;module Tapioca&#xA;  module Compilers&#xA;    class Encryptable &amp;lt; Tapioca::Dsl::Compiler&#xA;      extend T::Sig&#xA;&#xA;      ConstantType = type_member {{ fixed: T.class_of(Encryptable) }}&#xA;&#xA;      sig { override.returns(T::Enumerable[Module]) }&#xA;      def self.gather_constants&#xA;        # Collect all the classes that include Encryptable&#xA;        all_classes.select { |c| c &amp;lt; ::Encryptable }&#xA;      end&#xA;&#xA;      sig { override.void }&#xA;      def decorate&#xA;        # Create a RBI definition for each class that includes Encryptable&#xA;        root.create_path(constant) do |klass|&#xA;          # For each encrypted attribute we find in the class&#xA;          constant.encrypted_attributes.each do |attr_name|&#xA;            # Create the RBI definitions for all the missing methods&#xA;            klass.create_method(attr_name, return_type: &#34;String&#34;)&#xA;            klass.create_method(&#34;#{attr_name}=&#34;, parameters: [ create_param(&#34;value&#34;, type: &#34;String&#34;) ], return_type: &#34;void&#34;)&#xA;            klass.create_method(&#34;#{attr_name}_encrypted&#34;, return_type: &#34;String&#34;)&#xA;            klass.create_method(&#34;#{attr_name}_encrypted=&#34;, parameters: [ create_param(&#34;value&#34;, type: &#34;String&#34;) ], return_type: &#34;void&#34;)&#xA;          end&#xA;        end&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order for this DSL compiler to be discovered by Tapioca, it either needs to be placed inside the &lt;code&gt;sorbet/tapioca/compilers&lt;/code&gt; directory of your application or be inside a &lt;code&gt;tapioca/dsl/compilers&lt;/code&gt; folder on the load path. For example, if &lt;code&gt;Encryptable&lt;/code&gt; was being exposed by a gem, all the gem needs to do is to place the DSL compiler inside the &lt;code&gt;lib/tapioca/dsl/compilers&lt;/code&gt; folder and it will be automatically discovered and loaded by Tapioca.&lt;/p&gt; &#xA;&lt;p&gt;There are two main parts to the DSL compiler API: &lt;code&gt;gather_constants&lt;/code&gt; and &lt;code&gt;decorate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;gather_constants&lt;/code&gt; class method collects all classes (or modules) that should be processed by this specific DSL compiler.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;decorate&lt;/code&gt; method defines how to generate the necessary RBI definitions for the gathered constants.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every compiler must declare the type member &lt;code&gt;ConstantType&lt;/code&gt; in order for Sorbet to understand what the return type of the &lt;code&gt;constant&lt;/code&gt; attribute reader is. It needs to be assigned the correct type variable matching the type of constants that &lt;code&gt;gather_constants&lt;/code&gt; returns. This generic variable allows Sorbet to type-check method calls on the &lt;code&gt;constant&lt;/code&gt; reader in your &lt;code&gt;decorate&lt;/code&gt; method. See the Sorbet documentation on &lt;a href=&#34;https://sorbet.org/docs/generics&#34;&gt;generics&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;You can now run the new RBI compiler through the normal DSL generation process (your custom compiler will be loaded automatically by Tapioca):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca dsl&#xA;&#xA;Loading Rails application... Done&#xA;Loading DSL compiler classes... Done&#xA;Compiling DSL RBI files...&#xA;&#xA;      create  sorbet/rbi/dsl/credit_card.rbi&#xA;&#xA;Done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run Sorbet without error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle exec srb tc&#xA;&#xA;No errors! Great job.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more concrete and advanced examples, take a look at &lt;a href=&#34;https://github.com/Shopify/tapioca/tree/main/lib/tapioca/dsl/compilers&#34;&gt;Tapioca&#39;s default DSL compilers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;RBI files for missing constants and methods&lt;/h3&gt; &#xA;&lt;p&gt;Even after generating the RBIs, it is possible that some constants or methods are still undefined for Sorbet.&lt;/p&gt; &#xA;&lt;p&gt;This might be for multiple reasons, with the most frequents ones being:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The constant or method comes from a part of the gem that Tapioca cannot load (optional dependency, wrong architecture, etc.)&lt;/li&gt; &#xA; &lt;li&gt;The constant or method comes from a DSL or meta-programming that Tapioca doesn&#39;t support yet&lt;/li&gt; &#xA; &lt;li&gt;The constant or method only exists when a specific code path is executed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The best way to deal with such occurrences is to manually create RBI files (shims) for them so you can also add types but depending on the amount of meta-programming used in your project this can mean an overwhelming amount of manual work.&lt;/p&gt; &#xA;&lt;h4&gt;Generating the RBI file for missing constants&lt;/h4&gt; &#xA;&lt;p&gt;To get you started quickly, Tapioca can create a RBI file containing a stub of all the missing constants so you can typecheck your project without missing constants and shim them later as you need them.&lt;/p&gt; &#xA;&lt;p&gt;To generate the RBI file for the missing constants used in your application run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca todo&#xA;&#xA;Compiling sorbet/rbi/todo.rbi, this may take a few seconds... Done&#xA;All unresolved constants have been written to sorbet/rbi/todo.rbi.&#xA;Please review changes and commit them.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate the file &lt;code&gt;sorbet/rbi/todo.rbi&lt;/code&gt; defining all unresolved constants as empty modules. Since the constants are &#34;missing&#34;, Tapioca does not know if they should be marked as modules or classes and will use modules as a safer default. This file should be reviewed, corrected, if necessary, and then committed in your repository.&lt;/p&gt; &#xA;&lt;!-- START_HELP_COMMAND_TODO --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help todo&#xA;&#xA;Usage:&#xA;  tapioca todo&#xA;&#xA;Options:&#xA;      [--todo-file=TODO_FILE]              # Path to the generated todo RBI file&#xA;                                           # Default: sorbet/rbi/todo.rbi&#xA;      [--file-header], [--no-file-header]  # Add a &#34;This file is generated&#34; header on top of each generated RBI file&#xA;                                           # Default: true&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]        # Path to the Tapioca configuration file&#xA;                                           # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]          # Verbose output for debugging purposes&#xA;&#xA;generate the list of unresolved constants&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_TODO --&gt; &#xA;&lt;h4&gt;Manually writing RBI definitions (shims)&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;em&gt;shim&lt;/em&gt; is a hand-crafted RBI file that tells Sorbet about constants, ancestors, methods, etc. that it can&#39;t understand statically and aren&#39;t already generated by Tapioca.&lt;/p&gt; &#xA;&lt;p&gt;These shims are usually placed in the &lt;code&gt;sorbet/rbi/shims&lt;/code&gt; directory. From there, conventionally, you should follow the directory structure of the project to the file you&#39;d like to shim. For example, say you had a &lt;code&gt;person.rb&lt;/code&gt; file found at &lt;code&gt;app/models/person.rb&lt;/code&gt;. If you were to add a shim for it, you&#39;d want to create your RBI file at &lt;code&gt;sorbet/rbi/shims/app/models/person.rbi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A shim might be as simple as the class definition with an empty method body as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# typed: true&#xA;&#xA;class Person&#xA;  sig { void }&#xA;  def some_method_sorbet_cannot_find; end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you migrate to newer versions of Sorbet or Tapioca, some shims may become useless as Sorbet&#39;s internal definitions for Ruby&#39;s core and standard library is enhanced or Tapioca is able to generate definitions for new DSLs. To avoid keeping outdated or useless definitions inside your application shims, Tapioca provides the &lt;code&gt;check-shims&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca check-shims&#xA;&#xA;Loading Sorbet payload...  Done&#xA;Loading shim RBIs from sorbet/rbi/shims...  Done&#xA;Loading gem RBIs from sorbet/rbi/gems...  Done&#xA;Loading gem RBIs from sorbet/rbi/dsl...  Done&#xA;Loading annotation RBIs from sorbet/rbi/annotations...  Done&#xA;Looking for duplicates...  Done&#xA;&#xA;Duplicated RBI for ::MyModel#title:&#xA;  * sorbet/rbi/shims/my_model.rbi:2:2-2:14&#xA;  * sorbet/rbi/dsl/my_model.rbi:2:2-2:14&#xA;&#xA;Duplicated RBI for ::String#capitalize:&#xA;  * https://github.com/sorbet/sorbet/tree/master/rbi/core/string.rbi#L406&#xA;  * sorbet/rbi/shims/core/string.rbi:3:2-3:23&#xA;&#xA;Please remove the duplicated definitions from the sorbet/rbi/shims directory.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command can be used on CI to make sure the RBI shims are always up-to-date and non-redundant with generated files.&lt;/p&gt; &#xA;&lt;!-- START_HELP_COMMAND_CHECK_SHIMS --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help check_shims&#xA;&#xA;Usage:&#xA;  tapioca check-shims&#xA;&#xA;Options:&#xA;      [--gem-rbi-dir=GEM_RBI_DIR]                  # Path to gem RBIs&#xA;                                                   # Default: sorbet/rbi/gems&#xA;      [--dsl-rbi-dir=DSL_RBI_DIR]                  # Path to DSL RBIs&#xA;                                                   # Default: sorbet/rbi/dsl&#xA;      [--shim-rbi-dir=SHIM_RBI_DIR]                # Path to shim RBIs&#xA;                                                   # Default: sorbet/rbi/shims&#xA;      [--annotations-rbi-dir=ANNOTATIONS_RBI_DIR]  # Path to annotations RBIs&#xA;                                                   # Default: sorbet/rbi/annotations&#xA;      [--todo-rbi-file=TODO_RBI_FILE]              # Path to the generated todo RBI file&#xA;                                                   # Default: sorbet/rbi/todo.rbi&#xA;      [--payload], [--no-payload]                  # Check shims against Sorbet&#39;s payload&#xA;                                                   # Default: true&#xA;  -w, [--workers=N]                                # Number of parallel workers (default: auto)&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]                # Path to the Tapioca configuration file&#xA;                                                   # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]                  # Verbose output for debugging purposes&#xA;&#xA;check duplicated definitions in shim RBIs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_CHECK_SHIMS --&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Tapioca supports loading command defaults from a configuration file. The default configuration file location is &lt;code&gt;sorbet/tapioca/config.yml&lt;/code&gt; but this default can be changed using the &lt;code&gt;--config&lt;/code&gt; flag and supplying an alternative configuration file path.&lt;/p&gt; &#xA;&lt;p&gt;Tapioca&#39;s configuration file must be a well-formed YAML file with top-level keys for the various Tapioca commands. Keys under each such top-level command should be the underscore version of a long option name for that command and the value for that key should be the value of the option.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you always want to generate gem RBIs with inline documentation, then you would create the file &lt;code&gt;sorbet/tapioca/config.yml&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gem:&#xA;  doc: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, if you always want to exclude the &lt;code&gt;AASM&lt;/code&gt; and &lt;code&gt;ActiveRecordFixtures&lt;/code&gt; DSL compilers in your DSL RBI generation runs, your config file would then look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gem:&#xA;  doc: true&#xA;dsl:&#xA;  exclude:&#xA;  - UrlHelpers&#xA;  - ActiveRecordFixtures&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full configuration file, with each option and its default value, would look something like this:&lt;/p&gt; &#xA;&lt;!-- START_CONFIG_TEMPLATE --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;require:&#xA;  postrequire: sorbet/tapioca/require.rb&#xA;todo:&#xA;  todo_file: sorbet/rbi/todo.rbi&#xA;  file_header: true&#xA;dsl:&#xA;  outdir: sorbet/rbi/dsl&#xA;  file_header: true&#xA;  only: []&#xA;  exclude: []&#xA;  verify: false&#xA;  quiet: false&#xA;  workers: 2&#xA;  rbi_max_line_length: 120&#xA;  environment: development&#xA;  list_compilers: false&#xA;  app_root: &#34;.&#34;&#xA;gem:&#xA;  outdir: sorbet/rbi/gems&#xA;  file_header: true&#xA;  all: false&#xA;  prerequire: &#39;&#39;&#xA;  postrequire: sorbet/tapioca/require.rb&#xA;  exclude: []&#xA;  typed_overrides:&#xA;    activesupport: &#39;false&#39;&#xA;  verify: false&#xA;  doc: true&#xA;  loc: true&#xA;  exported_gem_rbis: true&#xA;  workers: 1&#xA;  auto_strictness: true&#xA;  dsl_dir: sorbet/rbi/dsl&#xA;  rbi_max_line_length: 120&#xA;  environment: development&#xA;check_shims:&#xA;  gem_rbi_dir: sorbet/rbi/gems&#xA;  dsl_rbi_dir: sorbet/rbi/dsl&#xA;  shim_rbi_dir: sorbet/rbi/shims&#xA;  annotations_rbi_dir: sorbet/rbi/annotations&#xA;  todo_rbi_file: sorbet/rbi/todo.rbi&#xA;  payload: true&#xA;  workers: 1&#xA;annotations:&#xA;  sources:&#xA;  - https://raw.githubusercontent.com/Shopify/rbi-central/main&#xA;  netrc: true&#xA;  netrc_file: &#39;&#39;&#xA;  typed_overrides: {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_CONFIG_TEMPLATE --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/Shopify/tapioca&#34;&gt;https://github.com/Shopify/tapioca&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://github.com/Shopify/tapioca/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://github.com/Shopify/tapioca/raw/main/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ytti/oxidized</title>
    <updated>2023-03-26T02:01:45Z</updated>
    <id>tag:github.com,2023-03-26:/ytti/oxidized</id>
    <link href="https://github.com/ytti/oxidized" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Oxidized is a network device configuration backup tool. It&#39;s a RANCID replacement!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Oxidized&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ytti/oxidized/actions/workflows/ruby.yml&#34;&gt;&lt;img src=&#34;https://github.com/ytti/oxidized/actions/workflows/ruby.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ytti/oxidized?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ytti/oxidized/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/ytti/oxidized?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=ytti/oxidized&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/5a90cb22db6a4d5ea23ad0dfb53fe03a&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/ytti/oxidized&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/ytti/oxidized/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/rb/oxidized&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/oxidized.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/oxidized/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/oxidized/Lobby.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/oxidized/Lobby&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Oxidized is a network device configuration backup tool. It&#39;s a RANCID replacement!&lt;/p&gt; &#xA;&lt;p&gt;Light and extensible, Oxidized supports over 130 operating system types.&lt;/p&gt; &#xA;&lt;p&gt;Feature highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically adds/removes threads to meet configured retrieval interval&lt;/li&gt; &#xA; &lt;li&gt;Restful API to a move node immediately to head-of-queue (GET/POST /node/next/[NODE])&lt;/li&gt; &#xA; &lt;li&gt;Syslog udp+file example to catch config change events (IOS/JunOS) and trigger a config fetch &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Will signal which IOS/JunOS user made the change, can then be used by output modules (via POST)&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;git&lt;/code&gt; output module uses this info - &#39;git blame&#39; will show who changed each line, and when&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Restful API to reload list of nodes (GET /reload)&lt;/li&gt; &#xA; &lt;li&gt;Restful API to fetch configurations (/node/fetch/[NODE] or /node/fetch/group/[NODE])&lt;/li&gt; &#xA; &lt;li&gt;Restful API to show list of nodes (GET /nodes)&lt;/li&gt; &#xA; &lt;li&gt;Restful API to show list of version for a node (/node/version[NODE]) and diffs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;http://youtu.be/kBQ_CTUuqeU#t=3h&#34;&gt;Oxidized TREX 2014 presentation&lt;/a&gt; video on YouTube!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#help-needed&#34;&gt;Maintainer Wanted!&lt;/a&gt; &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;Is your company using Oxidized and has Ruby developers on staff? I&#39;d love help from an extra maintainer!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Supported-OS-Types.md&#34;&gt;Supported OS Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#debian-and-ubuntu&#34;&gt;Debian and Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#centos-oracle-linux-red-hat-linux&#34;&gt;CentOS, Oracle Linux, Red Hat Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#freebsd&#34;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#build-from-git&#34;&gt;Build from Git&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#running-with-docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#installing-ruby-23-using-rvm&#34;&gt;Installing Ruby 2.3 using RVM&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#configuration&#34;&gt;Initial Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#privileged-mode&#34;&gt;Privileged mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#disabling-ssh-exec-channels&#34;&gt;Disabling SSH exec channels&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md&#34;&gt;Sources&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-csv&#34;&gt;Source: CSV&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-sql&#34;&gt;Source: SQL&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-sqlite&#34;&gt;Source: SQLite&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-mysql&#34;&gt;Source: Mysql&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-http&#34;&gt;Source: HTTP&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md&#34;&gt;Outputs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md#output-git&#34;&gt;Output: GIT&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md#output-git-crypt&#34;&gt;Output: GIT-Crypt&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md#output-http&#34;&gt;Output: HTTP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md#output-file&#34;&gt;Output: File&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md#output-types&#34;&gt;Output types&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#advanced-configuration&#34;&gt;Advanced Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#advanced-group-configuration&#34;&gt;Advanced Group Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md&#34;&gt;Hooks&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-exec&#34;&gt;Hook: exec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-githubrepo&#34;&gt;Hook: githubrepo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-awssns&#34;&gt;Hook: awssns&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-slackdiff&#34;&gt;Hook: slackdiff&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-xmppdiff&#34;&gt;Hook: xmppdiff&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-ciscosparkdiff&#34;&gt;Hook: ciscosparkdiff&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Creating-Models.md&#34;&gt;Creating and Extending Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#help&#34;&gt;Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Ruby-API.md#ruby-api&#34;&gt;Ruby API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Ruby-API.md#input&#34;&gt;Input&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Ruby-API.md#output&#34;&gt;Output&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Ruby-API.md#source&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Ruby-API.md#model&#34;&gt;Model&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;Debian &#34;buster&#34; or newer and Ubuntu 17.10 (artful) or newer are recommended. On Ubuntu, begin by enabling the &lt;code&gt;universe&lt;/code&gt; repository (required for libssh2-1-dev):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;add-apt-repository universe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt-get install ruby ruby-dev libsqlite3-dev libssl-dev pkg-config cmake libssh2-1-dev libicu-dev zlib1g-dev g++&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, install the gems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install oxidized&#xA;gem install oxidized-script oxidized-web # If you don&#39;t install oxidized-web, ensure &#34;rest&#34; is removed from your Oxidized config.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS, Oracle Linux, Red Hat Linux&lt;/h3&gt; &#xA;&lt;p&gt;On CentOS 6 and 7 / RHEL 6 and 7, begin by installing Ruby 2.3 or greater. This can be accomplished in one of several ways:&lt;/p&gt; &#xA;&lt;p&gt;Install Ruby 2.3 from &lt;a href=&#34;https://www.softwarecollections.org/en/scls/rhscl/rh-ruby23/&#34;&gt;SCL&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install centos-release-scl&#xA;yum install rh-ruby23 rh-ruby23-ruby-devel&#xA;scl enable rh-ruby23 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following additional packages will be required to build the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install make cmake which sqlite-devel openssl-devel libssh2-devel ruby gcc ruby-devel libicu-devel gcc-c++&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, install Ruby 2.6 via RVM by following the instructions:&lt;/p&gt; &#xA;&lt;p&gt;Make sure you dont have any leftover ruby: &lt;code&gt;yum erase ruby&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, install gpg key and rvm&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sudo&#34;&gt;curl -sSL https://get.rvm.io | bash -s stable&#xA;source /etc/profile.d/rvm.sh&#xA;rvm requirements run&#xA;rvm install 2.6.0&#xA;rvm use 2.6.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install oxidized requirements: &lt;code&gt;yum install make cmake which sqlite-devel openssl-devel libssh2-devel gcc libicu-devel gcc-c++&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install the gems: &lt;code&gt;gem install oxidized oxidized-web&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You need to wrap the gem and reference the wrap in the systemctl service file: &lt;code&gt;rvm wrapper oxidized&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can see where the wrapped gem is via &lt;code&gt;rvm wrapper show oxidized&lt;/code&gt; Use that path in the oxidized.service file, restart the systemctl daemon, run oxidized by hand once, edit config file, start service.&lt;/p&gt; &#xA;&lt;h3&gt;FreeBSD&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#installing-ruby-23-using-rvm&#34;&gt;Use RVM to install Ruby v2.3&lt;/a&gt;, then install all required packages and gems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pkg install cmake pkgconf&#xA;gem install oxidized&#xA;gem install oxidized-script oxidized-web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Oxidized is also available via &lt;a href=&#34;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=203374&#34;&gt;FreeBSD ports&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pkg install rubygem-oxidized rubygem-oxidized-script rubygem-oxidized-web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from Git&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/ytti/oxidized.git&#xA;cd oxidized/&#xA;gem install bundler&#xA;rake install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running with Docker&lt;/h3&gt; &#xA;&lt;p&gt;Currently, Docker Hub automatically builds the master branch as &lt;a href=&#34;https://hub.docker.com/r/oxidized/oxidized/&#34;&gt;oxidized/oxidized&lt;/a&gt;, you can make use of this container or build your own.&lt;/p&gt; &#xA;&lt;p&gt;To build your own, clone git repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/ytti/oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, build the container locally (requires docker 17.05.0-ce or higher):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -q -t oxidized/oxidized:latest oxidized/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve built the container (or chosen to make use of the automatically built container in Docker Hub, which will be downloaded for you by docker on the first &lt;code&gt;run&lt;/code&gt; command had you not built it), proceed as follows:&lt;/p&gt; &#xA;&lt;p&gt;Create a configuration directory in the host system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir /etc/oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the container for the first time to initialize the config:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: this step in only required for creating the Oxidized configuration file and can be skipped if you already have one.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -v /etc/oxidized:/home/oxidized/.config/oxidized -p 8888:8888/tcp -t oxidized/oxidized:latest oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the RESTful API and Web Interface are enabled, on the docker host running the container edit &lt;code&gt;/etc/oxidized/config&lt;/code&gt; and modify &lt;code&gt;rest: 127.0.0.1:8888&lt;/code&gt; to &lt;code&gt;rest: 0.0.0.0:8888&lt;/code&gt;. This will bind port 8888 to all interfaces, and expose the port so that it could be accessed externally. &lt;a href=&#34;https://github.com/ytti/oxidized/issues/445&#34;&gt;(Issue #445)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use docker-compose to launch the oxidized container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# docker-compose.yml&#xA;# docker-compose file example for oxidized that will start along with docker daemon&#xA;---&#xA;version: &#34;3&#34;&#xA;services:&#xA;  oxidized:&#xA;    restart: always&#xA;    image: oxidized/oxidized:latest&#xA;    ports:&#xA;      - 8888:8888/tcp&#xA;    environment:&#xA;      CONFIG_RELOAD_INTERVAL: 600&#xA;    volumes:&#xA;       - config:/home/oxidized/.config/oxidized/config&#xA;       - router.db:/home/oxidized/.config/oxidized/router.db&#xA;       - model:/home/oxidized/.config/oxidized/model&#xA;       # if git is use as input&#xA;       - data:/home/oxidized/.config/oxidized/backupcfg/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the &lt;code&gt;/etc/oxidized/router.db&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-csv&#34;&gt;CSV Source&lt;/a&gt; for further info):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vim /etc/oxidized/router.db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run container again to start oxidized with your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -v /etc/oxidized:/home/oxidized/.config/oxidized -p 8888:8888/tcp -t oxidized/oxidized:latest&#xA;oxidized[1]: Oxidized starting, running as pid 1&#xA;oxidized[1]: Loaded 1 nodes&#xA;Puma 2.13.4 starting...&#xA;* Min threads: 0, max threads: 16&#xA;* Environment: development&#xA;* Listening on tcp://0.0.0.0:8888&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to have the config automatically reloaded (e.g. when using a http source that changes):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -v /etc/oxidized:/home/oxidized/.config/oxidized -p 8888:8888/tcp -e CONFIG_RELOAD_INTERVAL=3600 -t oxidized/oxidized:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to use an internal CA (e.g. to connect to an private github instance):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -v /etc/oxidized:/home/oxidized/.config/oxidized -v /path/to/MY-CA.crt:/usr/local/share/ca-certificates/MY-CA.crt -p 8888:8888/tcp -e UPDATE_CA_CERTIFICATES=true -t oxidized/oxidized:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing Ruby 2.3 using RVM&lt;/h3&gt; &#xA;&lt;p&gt;Install Ruby 2.3 build dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install curl gcc-c++ patch readline readline-devel zlib zlib-devel&#xA;yum install libyaml-devel libffi-devel openssl-devel make cmake&#xA;yum install bzip2 autoconf automake libtool bison iconv-devel libssh2-devel libicu-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install RVM&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -L get.rvm.io | bash -s stable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setup RVM environment and compile and install Ruby 2.3 and set it as default&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source /etc/profile.d/rvm.sh&#xA;rvm install 2.3&#xA;rvm use --default 2.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Oxidized configuration is in YAML format. Configuration files are subsequently sourced from &lt;code&gt;/etc/oxidized/config&lt;/code&gt; then &lt;code&gt;~/.config/oxidized/config&lt;/code&gt;. The hashes will be merged, this might be useful for storing source information in a system wide file and user specific configuration in the home directory (to only include a staff specific username and password). Eg. if many users are using &lt;code&gt;oxs&lt;/code&gt;, see &lt;a href=&#34;https://github.com/ytti/oxidized-script&#34;&gt;Oxidized::Script&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended practice to run Oxidized using its own username. This username can be added using standard command-line tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;useradd -s /bin/bash -m oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is recommended &lt;strong&gt;not&lt;/strong&gt; to run Oxidized as root.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To initialize a default configuration in your home directory &lt;code&gt;~/.config/oxidized/config&lt;/code&gt;, simply run &lt;code&gt;oxidized&lt;/code&gt; once. If you don&#39;t further configure anything from the output and source sections, it&#39;ll extend the examples on a subsequent &lt;code&gt;oxidized&lt;/code&gt; execution. This is useful to see what options for a specific source or output backend are available.&lt;/p&gt; &#xA;&lt;p&gt;You can set the env variable &lt;code&gt;OXIDIZED_HOME&lt;/code&gt; to change its home directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;OXIDIZED_HOME=/etc/oxidized&#xA;&#xA;$ tree -L 1 /etc/oxidized&#xA;/etc/oxidized/&#xA;├── config&#xA;├── log-router-ssh&#xA;├── log-router-telnet&#xA;├── pid&#xA;├── router.db&#xA;└── repository.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Source&lt;/h2&gt; &#xA;&lt;p&gt;Oxidized supports &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#source-csv&#34;&gt;CSV&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#source-sqlite&#34;&gt;SQLite&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#source-mysql&#34;&gt;MySQL&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#source-http&#34;&gt;HTTP&lt;/a&gt; as source backends. The CSV backend reads nodes from a rancid compatible router.db file. The SQLite and MySQL backends will fire queries against a database and map certain fields to model items. The HTTP backend will fire queries against a http/https url. Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md&#34;&gt;Configuration&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Outputs&lt;/h2&gt; &#xA;&lt;p&gt;Possible outputs are either &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#output-file&#34;&gt;File&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#output-git&#34;&gt;GIT&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#output-git-crypt&#34;&gt;GIT-Crypt&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#output-http&#34;&gt;HTTP&lt;/a&gt;. The file backend takes a destination directory as argument and will keep a file per device, with most recent running version of a device. The GIT backend (recommended) will initialize an empty GIT repository in the specified path and create a new commit on every configuration change. The GIT-Crypt backend will also initialize a GIT repository but every configuration push to it will be encrypted on the fly by using &lt;code&gt;git-crypt&lt;/code&gt; tool. Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md&#34;&gt;Configuration&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Maps define how to map a model&#39;s fields to model &lt;a href=&#34;https://github.com/ytti/oxidized/tree/master/lib/oxidized/model&#34;&gt;model fields&lt;/a&gt;. Most of the settings should be self explanatory, log is ignored if &lt;code&gt;use_syslog&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First create the directory where the CSV &lt;code&gt;output&lt;/code&gt; is going to store device configs and start Oxidized once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir -p ~/.config/oxidized/configs&#xA;oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now tell Oxidized where it finds a list of network devices to backup configuration from. You can either use CSV or SQLite as source. To create a CSV source add the following snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;source:&#xA;  default: csv&#xA;  csv:&#xA;    file: ~/.config/oxidized/router.db&#xA;    delimiter: !ruby/regexp /:/&#xA;    map:&#xA;      name: 0&#xA;      model: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now lets create a file based device database (you might want to switch to SQLite later on). Put your routers in &lt;code&gt;~/.config/oxidized/router.db&lt;/code&gt; (file format is compatible with rancid). Simply add an item per line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;router01.example.com:ios&#xA;switch01.example.com:procurve&#xA;router02.example.com:ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;oxidized&lt;/code&gt; again to take the first backups.&lt;/p&gt; &#xA;&lt;h2&gt;Extra&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu init setup&lt;/h3&gt; &#xA;&lt;p&gt;The systemd service assumes that you have a user named &#39;oxidized&#39; and that oxidized is in one of the following paths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;/sbin&#xA;/bin&#xA;/usr/sbin&#xA;/usr/bin&#xA;/usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy systemd service file from extra/ folder to /etc/systemd/system&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo cp extra/oxidized.service /etc/systemd/system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Setup /var/run/&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir /run/oxidized&#xA;chown oxidized:oxidized /run/oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Make oxidized start on boot&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo systemctl enable oxidized.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you need help with Oxidized then we have a few methods you can use to get in touch.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/oxidized/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;Gitter&lt;/a&gt; - You can join the Lobby on gitter to chat to other Oxidized users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ytti/oxidized/&#34;&gt;GitHub&lt;/a&gt; - For help and requests for code changes / updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.librenms.org/c/help/oxidized&#34;&gt;Forum&lt;/a&gt; - A user forum run by &lt;a href=&#34;https://github.com/librenms/librenms&#34;&gt;LibreNMS&lt;/a&gt; where you can ask for help and support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help Needed&lt;/h2&gt; &#xA;&lt;p&gt;As things stand right now, &lt;code&gt;oxidized&lt;/code&gt; is maintained by a single person. A great many &lt;a href=&#34;https://github.com/ytti/oxidized/graphs/contributors&#34;&gt;contributors&lt;/a&gt; have helped further the software, however contributions are not the same as ongoing owner- and maintainer-ship. It appears that many companies use the software to manage their network infrastructure, this is great news! But without additional help to maintain the software and put out releases, the future of oxidized might be less bright. The current pace of development and the much needed refactoring simply are not sustainable if they are to be driven by a single person.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to be a maintainer for Oxidized then please read through the below and see if it&#39;s something you would like to help with. It&#39;s not a requirement that you can tick all the boxes below but it helps :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Triage on issues, review pull requests and help answer any questions from users.&lt;/li&gt; &#xA; &lt;li&gt;Above average knowledge of the Ruby programming language.&lt;/li&gt; &#xA; &lt;li&gt;Professional experience with both oxidized and some other config backup tool (like rancid).&lt;/li&gt; &#xA; &lt;li&gt;Ability to keep a cool head, and enjoy interaction with end users! :)&lt;/li&gt; &#xA; &lt;li&gt;A desire and passion to help drive &lt;code&gt;oxidized&lt;/code&gt; towards its &lt;code&gt;1.x.x&lt;/code&gt; stage of life &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Help refactor the code&lt;/li&gt; &#xA;   &lt;li&gt;Rework the core infrastructure&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Permission from your employer to contribute to open source projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;YES, I WANT TO HELP&lt;/h2&gt; &#xA;&lt;p&gt;Awesome! Simply send an e-mail to Saku Ytti at &lt;a href=&#34;mailto:saku@ytti.fi&#34;&gt;saku@ytti.fi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Further reading&lt;/h2&gt; &#xA;&lt;p&gt;Brian Anderson (from Rust fame) wrote an &lt;a href=&#34;http://brson.github.io/2017/04/05/minimally-nice-maintainer&#34;&gt;excellent post&lt;/a&gt; on what it means to be a maintainer.&lt;/p&gt; &#xA;&lt;h2&gt;License and Copyright&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;      Copyright&#xA;      2013-2015 Saku Ytti &amp;lt;saku@ytti.fi&amp;gt;&#xA;      2013-2015 Samer Abdel-Hafez &amp;lt;sam@arahant.net&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>