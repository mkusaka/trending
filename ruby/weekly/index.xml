<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T02:01:19Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chatwoot/chatwoot</title>
    <updated>2022-06-19T02:01:19Z</updated>
    <id>tag:github.com,2022-06-19:/chatwoot/chatwoot</id>
    <link href="https://github.com/chatwoot/chatwoot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source customer engagement suite, an alternative to Intercom, Zendesk, Salesforce Service Cloud etc. ðŸ”¥ðŸ’¬&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://s3.us-west-2.amazonaws.com/gh-assets.chatwoot.com/brand.svg?sanitize=true&#34; alt=&#34;Woot-logo&#34; width=&#34;240&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;Customer engagement suite, an open-source alternative to Intercom, Zendesk, Salesforce Service Cloud etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&#34; alt=&#34;Deploy to Heroku&#34;&gt; &lt;img width=&#34;150&#34; alt=&#34;Deploy&#34; src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt; &lt;img width=&#34;200&#34; alt=&#34;Deploy to DO&#34; src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://codeclimate.com/github/chatwoot/chatwoot/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/80f9e1a7c72d186289ad/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/circleci/build/github/chatwoot/chatwoot&#34; alt=&#34;CircleCI Badge&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/chatwoot/chatwoot/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/chatwoot/chatwoot&#34; alt=&#34;Docker Pull Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/chatwoot/chatwoot/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/chatwoot/chatwoot&#34; alt=&#34;Docker Build Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/chatwoot/chatwoot&#34; alt=&#34;Commits-per-month&#34;&gt; &lt;a title=&#34;Crowdin&#34; target=&#34;_self&#34; href=&#34;https://chatwoot.crowdin.com/chatwoot&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/e/37ced7eba411064bd792feb3b7a28b16/localized.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/cJXdrwS&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/647412545203994635&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huntr.dev/bounties/disclose&#34;&gt;&lt;img src=&#34;https://cdn.huntr.dev/huntr_security_badge_mono.svg?sanitize=true&#34; alt=&#34;Huntr&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://status.chatwoot.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fuptime.json&#34; alt=&#34;uptime&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://status.chatwoot.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fresponse-time.json&#34; alt=&#34;response time&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;img src=&#34;https://chatwoot-public-assets.s3.amazonaws.com/github/screenshot.png&#34; width=&#34;100%&#34; alt=&#34;Chat dashboard&#34;&gt; &#xA;&lt;p&gt;Chatwoot is an open-source, self-hosted customer engagement suite. Chatwoot lets you view and manage your customer data, communicate with them irrespective of which medium they use, and re-engage them based on their profile.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Chatwoot supports the following conversation channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: Talk to your customers using our live chat widget and make use of our SDK to identify a user and provide contextual support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Facebook&lt;/strong&gt;: Connect your Facebook pages and start replying to the direct messages to your page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instagram&lt;/strong&gt;: Connect your Instagram profile and start replying to the direct messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: Connect your Twitter profiles and reply to direct messages or the tweets where you are mentioned.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Telegram&lt;/strong&gt;: Connect your Telegram bot and reply to your customers right from a single dashboard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WhatsApp&lt;/strong&gt;: Connect your WhatsApp business account and manage the conversation in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Line&lt;/strong&gt;: Connect your Line account and manage the conversations in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SMS&lt;/strong&gt;: Connect your Twilio SMS account and reply to the SMS queries in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Channel&lt;/strong&gt;: Build custom communication channels using our API channel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt;: Forward all your email queries to Chatwoot and view it in our integrated dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And more.&lt;/p&gt; &#xA;&lt;p&gt;Other features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CRM&lt;/strong&gt;: Save all your customer information right inside Chatwoot, use contact notes to log emails, phone calls, or meeting notes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom Attributes&lt;/strong&gt;: Define custom attribute attributes to store information about a contact or a conversation and extend the product to match your workflow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shared multi-brand inboxes&lt;/strong&gt;: Manage multiple brands or pages using a shared inbox.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Private notes&lt;/strong&gt;: Use @mentions and private notes to communicate internally about a conversation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Canned responses (Saved replies)&lt;/strong&gt;: Improve the response rate by adding saved replies for frequently asked questions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversation Labels&lt;/strong&gt;: Use conversation labels to create custom workflows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto assignment&lt;/strong&gt;: Chatwoot intelligently assigns a ticket to the agents who have access to the inbox depending on their availability and load.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversation continuity&lt;/strong&gt;: If the user has provided an email address through the chat widget, Chatwoot will send an email to the customer under the agent name so that the user can continue the conversation over the email.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-lingual support&lt;/strong&gt;: Chatwoot supports 10+ languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful API &amp;amp; Webhooks&lt;/strong&gt;: Extend the capability of the software using Chatwootâ€™s webhooks and APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt;: Chatwoot natively integrates with Slack right now. Manage your conversations in Slack without logging into the dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation is available at &lt;a href=&#34;https://www.chatwoot.com/help-center&#34;&gt;chatwoot.com/help-center&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translation process&lt;/h2&gt; &#xA;&lt;p&gt;The translation process for Chatwoot web and mobile app is managed at &lt;a href=&#34;https://translate.chatwoot.com&#34;&gt;https://translate.chatwoot.com&lt;/a&gt; using Crowdin. Please read the &lt;a href=&#34;https://www.chatwoot.com/docs/contributing/translating-chatwoot-to-your-language&#34;&gt;translation guide&lt;/a&gt; for contributing to Chatwoot.&lt;/p&gt; &#xA;&lt;h2&gt;Branching model&lt;/h2&gt; &#xA;&lt;p&gt;We use the &lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;git-flow&lt;/a&gt; branching model. The base branch is &lt;code&gt;develop&lt;/code&gt;. If you are looking for a stable version, please use the &lt;code&gt;master&lt;/code&gt; or tags labelled as &lt;code&gt;v1.x.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;h3&gt;Heroku one-click deploy&lt;/h3&gt; &#xA;&lt;p&gt;Deploying Chatwoot to Heroku is a breeze. It&#39;s as simple as clicking this button:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow this &lt;a href=&#34;https://www.chatwoot.com/docs/environment-variables&#34;&gt;link&lt;/a&gt; to understand setting the correct environment variables for the app to work with all the features. There might be breakages if you do not set the relevant environment variables.&lt;/p&gt; &#xA;&lt;h3&gt;DigitalOcean 1-Click Kubernetes deployment&lt;/h3&gt; &#xA;&lt;p&gt;Chatwoot now supports 1-Click deployment to DigitalOcean as a kubernetes app.&lt;/p&gt; &#xA;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt; &lt;img width=&#34;200&#34; alt=&#34;Deploy to DO&#34; src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Other deployment options&lt;/h3&gt; &#xA;&lt;p&gt;For other supported options, checkout our &lt;a href=&#34;https://chatwoot.com/deploy&#34;&gt;deployment page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Looking to report a vulnerability? Please refer our &lt;a href=&#34;https://raw.githubusercontent.com/chatwoot/chatwoot/develop/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Community? Questions? Support ?&lt;/h2&gt; &#xA;&lt;p&gt;If you need help or just want to hang out, come, say hi on our &lt;a href=&#34;https://discord.gg/cJXdrwS&#34;&gt;Discord&lt;/a&gt; server.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors âœ¨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to all these &lt;a href=&#34;https://www.chatwoot.com/docs/contributors&#34;&gt;wonderful people&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chatwoot/chatwoot/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/chatwoot/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Chatwoot&lt;/em&gt; Â© 2017-2022, Chatwoot Inc - Released under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sidekiq-scheduler/sidekiq-scheduler</title>
    <updated>2022-06-19T02:01:19Z</updated>
    <id>tag:github.com,2022-06-19:/sidekiq-scheduler/sidekiq-scheduler</id>
    <link href="https://github.com/sidekiq-scheduler/sidekiq-scheduler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight job scheduler extension for Sidekiq&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sidekiq-scheduler&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://moove-it.github.io/sidekiq-scheduler/&#34;&gt; &lt;img src=&#34;https://moove-it.github.io/sidekiq-scheduler/images/small-logo.svg?sanitize=true&#34; width=&#34;468px&#34; height=&#34;200px&#34; alt=&#34;Sidekiq Scheduler&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://badge.fury.io/rb/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://badge.fury.io/rb/sidekiq-scheduler.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/moove-it/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://codeclimate.com/github/moove-it/sidekiq-scheduler/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/moove-it/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://api.travis-ci.org/moove-it/sidekiq-scheduler.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/moove-it/sidekiq-scheduler?branch=master&#34;&gt; &lt;img src=&#34;https://coveralls.io/repos/moove-it/sidekiq-scheduler/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://inch-ci.org/github/moove-it/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://inch-ci.org/github/moove-it/sidekiq-scheduler.svg?branch=master&#34; alt=&#34;Documentation Coverage&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://www.rubydoc.info/github/moove-it/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/yard-docs-blue.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sidekiq-scheduler&lt;/code&gt; is an extension to &lt;a href=&#34;http://github.com/mperham/sidekiq&#34;&gt;Sidekiq&lt;/a&gt; that pushes jobs in a scheduled way, mimicking cron utility.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Current branch contains work of the V4 release, if you are looking for version 2.2.* or 3.*, go to &lt;a href=&#34;https://github.com/moove-it/sidekiq-scheduler/tree/2.2-stable&#34;&gt;2.2-stable branch&lt;/a&gt; / &lt;a href=&#34;https://github.com/moove-it/sidekiq-scheduler/tree/v3-stable&#34;&gt;v3-stable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install sidekiq-scheduler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Hello World&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# hello-scheduler.rb&#xA;&#xA;require &#39;sidekiq-scheduler&#39;&#xA;&#xA;class HelloWorld&#xA;  include Sidekiq::Worker&#xA;&#xA;  def perform&#xA;    puts &#39;Hello world&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/sidekiq.yml&#xA;&#xA;:schedule:&#xA;  hello_world:&#xA;    cron: &#39;0 * * * * *&#39;   # Runs once per minute&#xA;    class: HelloWorld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run sidekiq:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sidekiq -r ./hello-scheduler.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2016-12-10T11:53:08.561Z 6452 TID-ovouhwvm4 INFO: Loading Schedule&#xA;2016-12-10T11:53:08.561Z 6452 TID-ovouhwvm4 INFO: Scheduling HelloWorld {&#34;cron&#34;=&amp;gt;&#34;0 * * * * *&#34;, &#34;class&#34;=&amp;gt;&#34;HelloWorld&#34;}&#xA;2016-12-10T11:53:08.562Z 6452 TID-ovouhwvm4 INFO: Schedules Loaded&#xA;&#xA;2016-12-10T11:54:00.212Z 6452 TID-ovoulivew HelloWorld JID-b35f36a562733fcc5e58444d INFO: start&#xA;Hello world&#xA;2016-12-10T11:54:00.213Z 6452 TID-ovoulivew HelloWorld JID-b35f36a562733fcc5e58444d INFO: done: 0.001 sec&#xA;&#xA;2016-12-10T11:55:00.287Z 6452 TID-ovoulist0 HelloWorld JID-b7e2b244c258f3cd153c2494 INFO: start&#xA;Hello world&#xA;2016-12-10T11:55:00.287Z 6452 TID-ovoulist0 HelloWorld JID-b7e2b244c258f3cd153c2494 INFO: done: 0.001 sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration options&lt;/h2&gt; &#xA;&lt;p&gt;Configuration options are placed inside &lt;code&gt;sidekiq.yml&lt;/code&gt; config file.&lt;/p&gt; &#xA;&lt;p&gt;Available options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;:dynamic: &amp;lt;if true the schedule can be modified in runtime [false by default]&amp;gt;&#xA;:dynamic_every: &amp;lt;if dynamic is true, the schedule is reloaded every interval [5s by default]&amp;gt;&#xA;:enabled: &amp;lt;enables scheduler if true [true by default]&amp;gt;&#xA;:scheduler:&#xA;  :listened_queues_only: &amp;lt;push jobs whose queue is being listened by sidekiq [false by default]&amp;gt;&#xA;:rufus_scheduler_options: &amp;lt;Set custom options for rufus scheduler, like max_work_threads [{} by default]&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schedule configuration&lt;/h2&gt; &#xA;&lt;p&gt;The schedule is configured through the &lt;code&gt;:schedule&lt;/code&gt; config entry in the sidekiq config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;:schedule:&#xA;  CancelAbandonedOrders:&#xA;    cron: &#39;0 */5 * * * *&#39;   # Runs when second = 0, every 5 minutes&#xA;&#xA;  queue_documents_for_indexing:&#xA;    cron: &#39;0 0 * * * *&#39;   # Runs every hour&#xA;&#xA;    # By default the job name will be taken as worker class name.&#xA;    # If you want to have a different job name and class name, provide the &#39;class&#39; option&#xA;    class: QueueDocuments&#xA;&#xA;    queue: slow&#xA;    args: [&#39;*.pdf&#39;]&#xA;    description: &#34;This job queues pdf content for indexing in solr&#34;&#xA;&#xA;    # Enable the `metadata` argument which will pass a Hash containing the schedule metadata&#xA;    # as the last argument of the `perform` method. `false` by default.&#xA;    include_metadata: true&#xA;&#xA;    # Enable / disable a job. All jobs are enabled by default.&#xA;    enabled: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Schedule metadata&lt;/h3&gt; &#xA;&lt;p&gt;You can configure Sidekiq-scheduler to pass an argument with metadata about the scheduling process to the worker&#39;s &lt;code&gt;perform&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;In the configuration file add the following on each worker class entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#xA;  SampleWorker:&#xA;    include_metadata: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On your &lt;code&gt;perform&lt;/code&gt; method, expect an additional argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def perform(args, ..., metadata)&#xA;    # Do something with the metadata&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;metadata&lt;/code&gt; hash contains the following keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  metadata.keys =&amp;gt;&#xA;    [&#xA;      :scheduled_at # The epoch when the job was scheduled to run&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schedule types&lt;/h2&gt; &#xA;&lt;p&gt;Supported types are &lt;code&gt;cron&lt;/code&gt;, &lt;code&gt;every&lt;/code&gt;, &lt;code&gt;interval&lt;/code&gt;, &lt;code&gt;at&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Cron, every, and interval types push jobs into sidekiq in a recurrent manner.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cron&lt;/code&gt; follows the same pattern as cron utility, with seconds resolution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;:schedule:&#xA;  HelloWorld:&#xA;    cron: &#39;0 * * * * *&#39; # Runs when second = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;every&lt;/code&gt; triggers following a given frequency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    every: &#39;45m&#39;    # Runs every 45 minutes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value is parsed by &lt;a href=&#34;https://github.com/floraison/fugit#fugitduration&#34;&gt;&lt;code&gt;Fugit::Duration.parse&lt;/code&gt;&lt;/a&gt;. It understands quite a number of formats, including human-readable ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    every: 45 minutes&#xA;    every: 2 hours and 30 minutes&#xA;    every: 1.5 hours&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;interval&lt;/code&gt; is similar to &lt;code&gt;every&lt;/code&gt;, the difference between them is that &lt;code&gt;interval&lt;/code&gt; type schedules the next execution after the interval has elapsed counting from its last job enqueue.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;every&lt;/code&gt; and &lt;code&gt;interval&lt;/code&gt; count from when the Sidekiq process (re)starts. So &lt;code&gt;every: &#39;48h&#39;&lt;/code&gt; will never run if the Sidekiq process is restarted daily, for example. You can do &lt;code&gt;every: [&#39;48h&#39;, first_in: &#39;0s&#39;]&lt;/code&gt; to make the job run immediately after a restart, and then have the worker check when it was last run.&lt;/p&gt; &#xA;&lt;p&gt;At, and in types push jobs only once. &lt;code&gt;at&lt;/code&gt; schedules in a point in time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    at: &#39;3001/01/01&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify any string that &lt;code&gt;DateTime.parse&lt;/code&gt; and &lt;code&gt;Chronic&lt;/code&gt; understand. To enable Chronic strings, you must add it as a dependency.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;in&lt;/code&gt; triggers after a time duration has elapsed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    in: 1h # pushes a sidekiq job in 1 hour, after start-up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can provide options to &lt;code&gt;every&lt;/code&gt; or &lt;code&gt;cron&lt;/code&gt; via an Array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    every: [&#39;30s&#39;, first_in: &#39;120s&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler&#34;&gt;https://github.com/jmettraux/rufus-scheduler&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Load the schedule from a different file&lt;/h2&gt; &#xA;&lt;p&gt;You can place the schedule configuration in a separate file from &lt;code&gt;config/sidekiq.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# sidekiq_scheduler.yml&#xA;&#xA;clear_leaderboards_contributors:&#xA;  cron: &#39;0 30 6 * * 1&#39;&#xA;  class: ClearLeaderboards&#xA;  queue: low&#xA;  args: contributors&#xA;  description: &#39;This job resets the weekly leaderboard for contributions&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please notice that the &lt;code&gt;schedule&lt;/code&gt; root key is not present in the separate file.&lt;/p&gt; &#xA;&lt;p&gt;To load the schedule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sidekiq&#39;&#xA;require &#39;sidekiq-scheduler&#39;&#xA;&#xA;Sidekiq.configure_server do |config|&#xA;  config.on(:startup) do&#xA;    Sidekiq.schedule = YAML.load_file(File.expand_path(&#39;../../sidekiq_scheduler.yml&#39;, __FILE__))&#xA;    SidekiqScheduler::Scheduler.instance.reload_schedule!&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above code can be placed in an initializer (in &lt;code&gt;config/initializers&lt;/code&gt;) that runs every time the app starts up.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic schedule&lt;/h2&gt; &#xA;&lt;p&gt;The schedule can be modified after startup. To add / update a schedule, you have to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq.set_schedule(&#39;heartbeat&#39;, { &#39;every&#39; =&amp;gt; [&#39;1m&#39;], &#39;class&#39; =&amp;gt; &#39;HeartbeatWorker&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the schedule did not exist it will be created, if it existed it will be updated.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;:dynamic&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt;, schedule changes are loaded every 5 seconds. Use the &lt;code&gt;:dynamic_every&lt;/code&gt; flag for a different interval.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/sidekiq.yml&#xA;:dynamic: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;:dynamic&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt;, you&#39;ll have to reload the schedule manually in sidekiq side:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SidekiqScheduler::Scheduler.instance.reload_schedule!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invoke &lt;code&gt;Sidekiq.get_schedule&lt;/code&gt; to obtain the current schedule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq.get_schedule&#xA;#  =&amp;gt; { &#39;every&#39; =&amp;gt; &#39;1m&#39;, &#39;class&#39; =&amp;gt; &#39;HardWorker&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Time zones&lt;/h2&gt; &#xA;&lt;p&gt;Note that if you use the cron syntax and are not running a Rails app, this will be interpreted in the server time zone.&lt;/p&gt; &#xA;&lt;p&gt;In a Rails app, &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler&#34;&gt;rufus-scheduler&lt;/a&gt; (&amp;gt;= 3.3.3) will use the &lt;code&gt;config.time_zone&lt;/code&gt; specified in Rails.&lt;/p&gt; &#xA;&lt;p&gt;You can explicitly specify the time zone that rufus-scheduler will use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    cron: &#39;0 30 6 * * 1 Europe/Stockholm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also note that &lt;code&gt;config.time_zone&lt;/code&gt; in Rails allows for a shorthand (e.g. &#34;Stockholm&#34;) that rufus-scheduler does not accept. If you write code to set the scheduler time zone from the &lt;code&gt;config.time_zone&lt;/code&gt; value, make sure it&#39;s the right format, e.g. with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::TimeZone.find_tzinfo(Rails.configuration.time_zone).name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes about connection pooling&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re configuring your own Redis connection pool, you need to make sure the size is adequate to be inclusive of both Sidekiq&#39;s own connection pool and Rufus Scheduler&#39;s.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s a minimum of &lt;code&gt;concurrency&lt;/code&gt; + 5 (per the &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Using-Redis#complete-control&#34;&gt;Sidekiq wiki&lt;/a&gt;) + &lt;code&gt;Rufus::Scheduler::MAX_WORK_THREADS&lt;/code&gt; (28 as of this writing; per the &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler#max_work_threads&#34;&gt;Rufus README&lt;/a&gt;), for a total of 58 with the default &lt;code&gt;concurrency&lt;/code&gt; of 25.&lt;/p&gt; &#xA;&lt;p&gt;You can also override the thread pool size in Rufus Scheduler by setting the following in your &lt;code&gt;sidekiq.yml&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;...&#xA;&#xA;rufus_scheduler_options:&#xA;  max_work_threads: 5&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes about running on Multiple Hosts&lt;/h2&gt; &#xA;&lt;p&gt;Under normal conditions, &lt;code&gt;cron&lt;/code&gt; and &lt;code&gt;at&lt;/code&gt; jobs are pushed once regardless of the number of &lt;code&gt;sidekiq-scheduler&lt;/code&gt; running instances, assumming that time deltas between hosts is less than 24 hours.&lt;/p&gt; &#xA;&lt;p&gt;Non-normal conditions that could push a specific job multiple times are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;high cpu load + a high number of jobs scheduled at the same time, like 100 jobs&lt;/li&gt; &#xA; &lt;li&gt;network / redis latency + 28 (see &lt;code&gt;MAX_WORK_THREADS&lt;/code&gt; &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler/raw/master/lib/rufus/scheduler.rb#L41&#34;&gt;https://github.com/jmettraux/rufus-scheduler/blob/master/lib/rufus/scheduler.rb#L41&lt;/a&gt;) or more jobs scheduled within the same network latency window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;every&lt;/code&gt;, &lt;code&gt;interval&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; jobs will be pushed once per host.&lt;/p&gt; &#xA;&lt;h2&gt;Notes on when Sidekiq worker is down&lt;/h2&gt; &#xA;&lt;p&gt;For a &lt;code&gt;cron&lt;/code&gt;/&lt;code&gt;at&lt;/code&gt; (and all other) job to be successfully enqueued, you need at least one sidekiq worker with scheduler to be up at that moment. Handling this is up to you and depends on your application.&lt;/p&gt; &#xA;&lt;p&gt;Possible solutions include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simply ignoring this fact, if you only run frequent periodic jobs, that can tolerate some increased interval&lt;/li&gt; &#xA; &lt;li&gt;Abstaining from deploys/restarts during time when critical jobs are usually scheduled&lt;/li&gt; &#xA; &lt;li&gt;Making your infrequent jobs idempotent (so that they can be enqueued multiple times but still produce result as if was run once) and scheduling them multiple times to reduce likelihood of not being run&lt;/li&gt; &#xA; &lt;li&gt;Zero downtime deploy for sidekiq workers: keep at least one worker up during whole deploy and only restart/shut it down after when new one has started&lt;/li&gt; &#xA; &lt;li&gt;Running scheduler inside your unicorn/rails processes (if you already have zero downtime deploy set up for these)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each option has it&#39;s own pros and cons.&lt;/p&gt; &#xA;&lt;h2&gt;Notes when running multiple Sidekiq processors on the same Redis&lt;/h2&gt; &#xA;&lt;h3&gt;TL;DR&lt;/h3&gt; &#xA;&lt;p&gt;Be &lt;strong&gt;sure&lt;/strong&gt; to include the &lt;code&gt;:enabled: false&lt;/code&gt; top-level key on any additional configurations to avoid any possibility of the &lt;code&gt;schedules&lt;/code&gt; definition being wiped by the second Sidekiq process.&lt;/p&gt; &#xA;&lt;p&gt;To illustrate what we mean:&lt;/p&gt; &#xA;&lt;p&gt;Say you have one process with the schedule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# e.g., config/sidekiq.yml&#xA;&#xA;:queues:&#xA;  - default&#xA;:schedule:&#xA;  do_something_every_minute:&#xA;    class: DoSomethingJob&#xA;    args: matey&#xA;    queue: :scheduler&#xA;    cron: &#39;0 * * * * * America/Los_Angeles&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a separate separate configured process without one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# e.g., config/sidekiq_other.yml&#xA;:queues:&#xA;  - scheduler&#xA;&#xA;## NOTE Disable the Scheduler&#xA;:enabled: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;This gem stores the configured schedule in Redis on boot. It&#39;s used, primarily, to display in the Web Integration, and allow you to interact with that schedule via that integration.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re running multiple Sidekiq processes on the same Redis namespace with different configurations, &lt;strong&gt;you&#39;ll want to explicitly &lt;em&gt;disable&lt;/em&gt; Sidekiq Scheduler&lt;/strong&gt; for the other processes not responsible for the schedule. If you don&#39;t, the last booted Sidekiq processes&#39; schedule will be what is stored in Redis.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/moove-it/sidekiq-scheduler/issues/361&#34;&gt;https://github.com/moove-it/sidekiq-scheduler/issues/361&lt;/a&gt; for a more details.&lt;/p&gt; &#xA;&lt;h2&gt;Sidekiq Web Integration&lt;/h2&gt; &#xA;&lt;p&gt;sidekiq-scheduler provides an extension to the Sidekiq web interface that adds a &lt;code&gt;Recurring Jobs&lt;/code&gt; page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;&#xA;require &#39;sidekiq/web&#39;&#xA;require &#39;sidekiq-scheduler/web&#39;&#xA;&#xA;run Sidekiq::Web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/moove-it/sidekiq-scheduler/raw/master/images/recurring-jobs-ui-tab.png&#34; alt=&#34;Sidekiq Web Integration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ActiveJob integration&lt;/h2&gt; &#xA;&lt;p&gt;When using sidekiq-scheduler with ActiveJob your jobs can just extend &lt;code&gt;ApplicationJob&lt;/code&gt; as usual, without the &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;include&lt;/code&gt; boilerplate. Under the hood Rails will load up the scheduler and include the worker module for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class HelloWorld &amp;lt; ApplicationJob&#xA;  def perform&#xA;    puts &#39;Hello world&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The Spring preloader and Testing your initializer via Rails console&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re pulling in your schedule from a YML file via an initializer as shown, be aware that the Spring application preloader included with Rails will interefere with testing via the Rails console.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spring will not reload initializers&lt;/strong&gt; unless the initializer is changed. Therefore, if you&#39;re making a change to your YML schedule file and reloading Rails console to see the change, Spring will make it seem like your modified schedule is not being reloaded.&lt;/p&gt; &#xA;&lt;p&gt;To see your updated schedule, be sure to reload Spring by stopping it prior to booting the Rails console.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;spring stop&lt;/code&gt; to stop Spring.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://github.com/Moove-it/sidekiq-scheduler/issues/35#issuecomment-48067183&#34;&gt;this issue&lt;/a&gt; and &lt;a href=&#34;https://github.com/rails/spring/raw/master/README.md&#34;&gt;Spring&#39;s README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manage tasks from Unicorn/Rails server&lt;/h2&gt; &#xA;&lt;p&gt;If you want start sidekiq-scheduler only from Unicorn/Rails, but not from sidekiq you can have something like this in an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/sidekiq_scheduler.rb&#xA;require &#39;sidekiq&#39;&#xA;require &#39;sidekiq-scheduler&#39;&#xA;&#xA;puts &#34;Sidekiq.server? is #{Sidekiq.server?.inspect}&#34;&#xA;puts &#34;defined?(Rails::Server) is #{defined?(Rails::Server).inspect}&#34;&#xA;puts &#34;defined?(Unicorn) is #{defined?(Unicorn).inspect}&#34;&#xA;&#xA;if Rails.env == &#39;production&#39; &amp;amp;&amp;amp; (defined?(Rails::Server) || defined?(Unicorn))&#xA;  Sidekiq.configure_server do |config|&#xA;&#xA;    config.on(:startup) do&#xA;      Sidekiq.schedule = YAML.load_file(File.expand_path(&#39;../../scheduler.yml&#39;, __FILE__))&#xA;      SidekiqScheduler::Scheduler.instance.reload_schedule!&#xA;    end&#xA;  end&#xA;else&#xA;  SidekiqScheduler::Scheduler.instance.enabled = false&#xA;  puts &#34;SidekiqScheduler::Scheduler.instance.enabled is #{SidekiqScheduler::Scheduler.instance.enabled.inspect}&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copyright 2021 - 2022 Marcelo Lauxen.&lt;/li&gt; &#xA; &lt;li&gt;Copyright 2013 - 2022 Moove-IT.&lt;/li&gt; &#xA; &lt;li&gt;Copyright 2012 Morton Jonuschat.&lt;/li&gt; &#xA; &lt;li&gt;Some parts copyright 2010 Ben VandenBos.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>joemasilotti/railsdevs.com</title>
    <updated>2022-06-19T02:01:19Z</updated>
    <id>tag:github.com,2022-06-19:/joemasilotti/railsdevs.com</id>
    <link href="https://github.com/joemasilotti/railsdevs.com" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The reverse job board for Ruby on Rails developers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rails Devs&lt;/h1&gt; &#xA;&lt;p&gt;The reverse job board for Rails developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2092156/147028085-eea40303-c572-48c0-b107-0be93cce067c.png&#34; alt=&#34;railsdevs homepage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;railsdevs&lt;/code&gt; empowers independent developers available for their next gig. It is being built around &lt;a href=&#34;https://railsdevs.com/about&#34;&gt;three core values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Empowering the independent developer&lt;/li&gt; &#xA; &lt;li&gt;Doing everything in public&lt;/li&gt; &#xA; &lt;li&gt;Creating a safe, inclusive environment&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You will need a few non-Ruby packages installed. Install these at once via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew bundle install --no-upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or manually:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 3.1.2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/9.5/libpq.html&#34;&gt;libpq&lt;/a&gt; - &lt;code&gt;brew install libpq&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;libpg&lt;/code&gt; is needed to use the native &lt;code&gt;pg&lt;/code&gt; gem without Rosetta on M1 macs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org&#34;&gt;postgresql&lt;/a&gt; - &lt;code&gt;brew install postgresql&lt;/code&gt; [Note: PostgreSQL 13+ is required]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node&lt;/a&gt; - &lt;code&gt;brew install node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yarnpkg.com&#34;&gt;Yarn&lt;/a&gt; - &lt;code&gt;brew install yarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt; - &lt;code&gt;brew install redis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://imagemagick.org&#34;&gt;Imagemagick&lt;/a&gt; - &lt;code&gt;brew install imagemagick&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stripe.com/docs/stripe-cli&#34;&gt;Stripe CLI&lt;/a&gt; - &lt;code&gt;brew install stripe/stripe-cli/stripe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddollar/foreman&#34;&gt;foreman&lt;/a&gt; - &lt;code&gt;gem install foreman&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Chrome + Chromedriver for system tests - &lt;code&gt;brew install --cask google-chrome chromedriver&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Initial setup&lt;/h3&gt; &#xA;&lt;p&gt;Start PostgreSQL server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services start postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start Redis server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services start redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An installation script is included with the repository that will automatically get the application setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Run the following to start the server and automatically build assets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires &lt;code&gt;foreman&lt;/code&gt; or &lt;code&gt;overmind&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Requires &lt;code&gt;stripe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Seeds&lt;/h3&gt; &#xA;&lt;p&gt;Seeding the database, either via &lt;code&gt;rails db:seed&lt;/code&gt; or during &lt;code&gt;bin/setup&lt;/code&gt;, creates a few accounts. Most importantly, use &lt;code&gt;developer@example.com&lt;/code&gt; and &lt;code&gt;business@example.com&lt;/code&gt; with password &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More information is in &lt;a href=&#34;https://raw.githubusercontent.com/joemasilotti/railsdevs.com/main/docs/seeds.md&#34;&gt;the docs on seeds&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stripe&lt;/h3&gt; &#xA;&lt;p&gt;You will need to configure Stripe or do a mock configuration (ie set dummy values for the last step listed below) if you are working on anything related to payments.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dashboard.stripe.com/register&#34;&gt;Register for Stripe&lt;/a&gt; and add an account&lt;/li&gt; &#xA; &lt;li&gt;Download the Stripe CLI via &lt;code&gt;brew install stripe/stripe-cli/stripe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Login to the Stripe CLI via &lt;code&gt;stripe login&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure your development credentials &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dashboard.stripe.com/test/apikeys&#34;&gt;Create a Stripe secret key for test mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;stripe listen --forward-to localhost:3000/pay/webhooks/stripe&lt;/code&gt; in order to generate your webhook signing secret.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dashboard.stripe.com/test/products/create&#34;&gt;Create a product&lt;/a&gt; with a recurring, monthly price&lt;/li&gt; &#xA;   &lt;li&gt;Generate your editable development credentials file via &lt;code&gt;EDITOR=&#34;mate --wait&#34; bin/rails credentials:edit --environment development&lt;/code&gt;. You may need to install and provide terminal access to the editor first (mate, subl, and atom should all work). If you run the code above and receive the message &#34;New credentials encrypted and saved&#34;, without having had the opportunity to edit the file first, things have gone astray. You will need to troubleshoot this step based on your OS and desired editor, to ensure you are able to edit the development.yml file before it is encoded and saved. &lt;a href=&#34;https://stackoverflow.com/questions/52370065/issue-to-open-credentials-file&#34;&gt;See here for more details.&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add the secret key, the price, and your webhook signing secret to your development credentials in the following format, and save/close the file:&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;stripe:&#xA;  private_key: sk_test_YOUR_TEST_STRIPE_KEY&#xA;  signing_secret: whsec_YOUR_SIGNING_SECRET&#xA;  price_ids:&#xA;    part_time_plan: price_YOUR_PRODUCT_PRICE_ID&#xA;    full_time_plan: price_ANOTHER_PRODUCT_PRICE_ID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monitoring&lt;/h2&gt; &#xA;&lt;p&gt;Application monitoring is powered by &lt;a href=&#34;https://scoutapm.com&#34;&gt;Scout APM&lt;/a&gt;. This helps identify N+1 queries, slow queries, memory bloats, and more. Scout APM is free for open source.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rails test&lt;/code&gt; to run unit/integration tests.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rails test:system&lt;/code&gt; to run system tests, using &lt;code&gt;headless_chrome&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;HEADFUL=1 rails test:system&lt;/code&gt; to run system tests, using &lt;code&gt;headful_chrome&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Significant changes and product updates are documented in the &lt;a href=&#34;https://raw.githubusercontent.com/joemasilotti/railsdevs.com/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Open source support&lt;/h2&gt; &#xA;&lt;p&gt;railsdevs uses a free or discounted open source plan from the following companies. Thank you for the support!&lt;/p&gt; &#xA;&lt;a href=&#34;https://tracking.scoutapm.com/t/102858/c/24eac3db-39dd-4863-b972-a35a3e35b72b/NB2HI4DTHIXS65DFOIXGY2JPNA4GWMRZOI======/ter-li-h8k29r&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2092156/169346365-12f3806f-5a04-494a-a2d6-45611666c57c.png&#34; width=&#34;250&#34; alt=&#34;Scout APM logo&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>