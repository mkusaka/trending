<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-20T01:45:15Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rails/tailwindcss-rails</title>
    <updated>2024-10-20T01:45:15Z</updated>
    <id>tag:github.com,2024-10-20:/rails/tailwindcss-rails</id>
    <link href="https://github.com/rails/tailwindcss-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tailwind CSS for Rails&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tailwindcss.com&#34;&gt;Tailwind CSS&lt;/a&gt; is a utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.&lt;/p&gt; &#xA;&lt;!-- regenerate TOC with `rake format:toc` --&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#choosing-a-specific-version-of-tailwindcss&#34;&gt;Choosing a specific version of &lt;code&gt;tailwindcss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#using-a-local-installation-of-tailwindcss&#34;&gt;Using a local installation of &lt;code&gt;tailwindcss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#developing-with-tailwindcss&#34;&gt;Developing with Tailwindcss&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#configuration-and-commands&#34;&gt;Configuration and commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#building-for-production&#34;&gt;Building for production&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#building-for-testing&#34;&gt;Building for testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#building-unminified-assets&#34;&gt;Building unminified assets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#live-rebuild&#34;&gt;Live rebuild&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#using-with-postcss&#34;&gt;Using with PostCSS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#custom-inputs-or-outputs&#34;&gt;Custom inputs or outputs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#lost-keystrokes-or-hanging-when-using-terminal-based-debugging-tools-eg-irb-pry-rubydebugetc-with-the-puma-plugin&#34;&gt;Lost keystrokes or hanging when using terminal-based debugging tools (e.g. IRB, Pry, &lt;code&gt;ruby/debug&lt;/code&gt;...etc.) with the Puma plugin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#running-in-a-docker-container-exits-prematurely&#34;&gt;Running in a docker container exits prematurely&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#conflict-with-sassc-rails&#34;&gt;Conflict with sassc-rails&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#class-names-must-be-spelled-out&#34;&gt;Class names must be spelled out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#error-cannot-find-the-tailwindcss-executable-for-supported-platform&#34;&gt;&lt;code&gt;ERROR: Cannot find the tailwindcss executable&lt;/code&gt; for supported platform&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#using-asset-pipeline-assets&#34;&gt;Using asset-pipeline assets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#conflict-with-pre-existing-asset-pipeline-stylesheets&#34;&gt;Conflict with pre-existing asset pipeline stylesheets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/tailwindcss-rails/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;With Rails 7 you can generate a new application preconfigured with Tailwind by using &lt;code&gt;--css tailwind&lt;/code&gt;. If you&#39;re adding Tailwind later, you need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./bin/bundle add tailwindcss-rails&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./bin/rails tailwindcss:install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This gem depends on the &lt;code&gt;tailwindcss-ruby&lt;/code&gt; gem to install a working tailwind executable.&lt;/p&gt; &#xA;&lt;h3&gt;Choosing a specific version of &lt;code&gt;tailwindcss&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tailwindcss-ruby&lt;/code&gt; gem is declared as a floating dependency of this gem, so by default you will get the most recent stable version. However, you can select a specific version of tailwind by pinning that gem to the analogous version in your application&#39;s &lt;code&gt;Gemfile&lt;/code&gt;. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;tailwindcss-rails&#34;&#xA;&#xA;# pin to tailwindcss version 3.4.13&#xA;gem &#34;tailwindcss-ruby&#34;, &#34;3.4.13&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a local installation of &lt;code&gt;tailwindcss&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can also use a local (npm-based) installation if you prefer, please go to &lt;a href=&#34;https://github.com/flavorjones/tailwindcss-ruby&#34;&gt;https://github.com/flavorjones/tailwindcss-ruby&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Developing with Tailwindcss&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration and commands&lt;/h3&gt; &#xA;&lt;h4&gt;Configuration file: &lt;code&gt;config/tailwind.config.js&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can customize the Tailwind build through the &lt;code&gt;config/tailwind.config.js&lt;/code&gt; file, just like you would if Tailwind was running in a traditional node installation. All the first-party plugins are supported.&lt;/p&gt; &#xA;&lt;h4&gt;Input file: &lt;code&gt;app/assets/stylesheets/application.tailwind.css&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The installer will generate a Tailwind input file in &lt;code&gt;app/assets/stylesheets/application.tailwind.css&lt;/code&gt;. This is where you import the plugins you want to use, and where you can setup your custom &lt;code&gt;@apply&lt;/code&gt; rules.&lt;/p&gt; &#xA;&lt;h4&gt;Output file: &lt;code&gt;app/assets/builds/tailwind.css&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;When you run &lt;code&gt;rails tailwindcss:build&lt;/code&gt;, the input file will be used to generate the output in &lt;code&gt;app/assets/builds/tailwind.css&lt;/code&gt;. That&#39;s the output CSS that you&#39;ll include in your app (the installer automatically configures this, alongside the Inter font as well).&lt;/p&gt; &#xA;&lt;h4&gt;Commands&lt;/h4&gt; &#xA;&lt;p&gt;This gem makes several Rails tasks available, some of which have multiple options which can be combined.&lt;/p&gt; &#xA;&lt;p&gt;Synopsis:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bin/rails tailwindcss:install&lt;/code&gt; - installs the configuration file, output file, and &lt;code&gt;Procfile.dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bin/rails tailwindcss:build&lt;/code&gt; - generate the output file &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bin/rails tailwindcss:build[debug]&lt;/code&gt; - generate unminimized output&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bin/rails tailwindcss:watch&lt;/code&gt; - start live rebuilds, generating output on file changes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bin/rails tailwindcss:watch[debug]&lt;/code&gt; - generate unminimized output&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bin/rails tailwindcss:watch[poll]&lt;/code&gt; - for systems without file system events&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bin/rails tailwindcss:watch[always]&lt;/code&gt; - for systems without TTY (e.g., some docker containers)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that you can combine task options, e.g. &lt;code&gt;rails tailwindcss:watch[debug,poll]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This gem also makes available a Puma plugin to manage a live rebuild process when you run &lt;code&gt;rails server&lt;/code&gt; (see &#34;Live Rebuild&#34; section below).&lt;/p&gt; &#xA;&lt;p&gt;This gem also generates a &lt;code&gt;Procfile.dev&lt;/code&gt; file which will run both the rails server and a live rebuild process (see &#34;Live Rebuild&#34; section below).&lt;/p&gt; &#xA;&lt;h3&gt;Building for production&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tailwindcss:build&lt;/code&gt; is automatically attached to &lt;code&gt;assets:precompile&lt;/code&gt;, so before the asset pipeline digests the files, the Tailwind output will be generated.&lt;/p&gt; &#xA;&lt;h3&gt;Building for testing&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tailwindcss:build&lt;/code&gt; task is automatically attached to the &lt;code&gt;test:prepare&lt;/code&gt; Rake task. This task runs before test commands. If you run &lt;code&gt;bin/rails test&lt;/code&gt; in your CI environment, your Tailwind output will be generated before tests run.&lt;/p&gt; &#xA;&lt;h3&gt;Building unminified assets&lt;/h3&gt; &#xA;&lt;p&gt;If you want unminified assets, you can pass a &lt;code&gt;debug&lt;/code&gt; argument to the rake task, i.e. &lt;code&gt;rails tailwindcss:build[debug]&lt;/code&gt; or &lt;code&gt;rails tailwindcss:watch[debug]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Live rebuild&lt;/h3&gt; &#xA;&lt;p&gt;While you&#39;re developing your application, you want to run Tailwind in &#34;watch&#34; mode, so changes are automatically reflected in the generated CSS output. You can do this in a few different ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use this gem&#39;s &lt;a href=&#34;https://puma.io/&#34;&gt;Puma&lt;/a&gt; plugin to integrate &#34;watch&#34; with &lt;code&gt;rails server&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;or run &lt;code&gt;rails tailwindcss:watch&lt;/code&gt; as a separate process,&lt;/li&gt; &#xA; &lt;li&gt;or run &lt;code&gt;bin/dev&lt;/code&gt; which uses &lt;a href=&#34;https://github.com/ddollar/foreman&#34;&gt;Foreman&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Puma plugin&lt;/h4&gt; &#xA;&lt;p&gt;This gem ships with a Puma plugin. To use it, add this line to your &lt;code&gt;puma.rb&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;plugin :tailwindcss if ENV.fetch(&#34;RAILS_ENV&#34;, &#34;development&#34;) == &#34;development&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then running &lt;code&gt;rails server&lt;/code&gt; will run the Tailwind watch process in the background&lt;/p&gt; &#xA;&lt;h4&gt;Run &lt;code&gt;rails tailwindcss:watch&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a flexible command, which can be run with a few different options.&lt;/p&gt; &#xA;&lt;p&gt;If you are running &lt;code&gt;rails tailwindcss:watch&lt;/code&gt; on a system that doesn&#39;t fully support file system events, pass a &lt;code&gt;poll&lt;/code&gt; argument to the task to instruct tailwindcss to instead use polling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails tailwindcss:watch[poll]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(If you use &lt;code&gt;bin/dev&lt;/code&gt; then you should modify your &lt;code&gt;Procfile.dev&lt;/code&gt; to use the &lt;code&gt;poll&lt;/code&gt; option.)&lt;/p&gt; &#xA;&lt;p&gt;If you are running &lt;code&gt;rails tailwindcss:watch&lt;/code&gt; as a process in a Docker container, set &lt;code&gt;tty: true&lt;/code&gt; in &lt;code&gt;docker-compose.yml&lt;/code&gt; for the appropriate container to keep the watch process running.&lt;/p&gt; &#xA;&lt;p&gt;If you are running &lt;code&gt;rails tailwindcss:watch&lt;/code&gt; in a docker container without a tty, pass the &lt;code&gt;always&lt;/code&gt; argument to the task to instruct tailwindcss to keep the watcher alive even when &lt;code&gt;stdin&lt;/code&gt; is closed: &lt;code&gt;rails tailwindcss:watch[always]&lt;/code&gt;. If you use &lt;code&gt;bin/dev&lt;/code&gt; then you should modify your &lt;code&gt;Procfile.dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Foreman&lt;/h4&gt; &#xA;&lt;p&gt;Running &lt;code&gt;bin/dev&lt;/code&gt; invokes Foreman to start both the Tailwind watch process and the rails server in development mode based on your &lt;code&gt;Procfile.dev&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Using with PostCSS&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use PostCSS as a preprocessor, create a custom &lt;code&gt;config/postcss.config.js&lt;/code&gt; and it will be loaded automatically.&lt;/p&gt; &#xA;&lt;p&gt;For example, to enable nesting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// config/postcss.config.js&#xA;module.exports = {&#xA;  plugins: {&#xA;    &#39;postcss-import&#39;: {},&#xA;    &#39;tailwindcss/nesting&#39;: {},&#xA;    tailwindcss: {},&#xA;    autoprefixer: {},&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom inputs or outputs&lt;/h3&gt; &#xA;&lt;p&gt;If you need to use a custom input or output file, you can run &lt;code&gt;bundle exec tailwindcss&lt;/code&gt; to access the platform-specific executable, and give it your own build options.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Some common problems experienced by users ...&lt;/p&gt; &#xA;&lt;h3&gt;Lost keystrokes or hanging when using terminal-based debugging tools (e.g. IRB, Pry, &lt;code&gt;ruby/debug&lt;/code&gt;...etc.) with the Puma plugin&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve addressed the issue and you can avoid the problem by upgrading &lt;code&gt;tailwindcss-rails&lt;/code&gt; to &lt;a href=&#34;https://github.com/rails/tailwindcss-rails/releases/tag/v2.4.1&#34;&gt;v2.4.1&lt;/a&gt; or later versions.&lt;/p&gt; &#xA;&lt;h3&gt;Running in a docker container exits prematurely&lt;/h3&gt; &#xA;&lt;p&gt;If you are running &lt;code&gt;rails tailwindcss:watch&lt;/code&gt; as a process in a Docker container, set &lt;code&gt;tty: true&lt;/code&gt; in &lt;code&gt;docker-compose.yml&lt;/code&gt; for the appropriate container to keep the watch process running.&lt;/p&gt; &#xA;&lt;p&gt;If you are running &lt;code&gt;rails tailwindcss:watch&lt;/code&gt; in a docker container without a tty, pass the &lt;code&gt;always&lt;/code&gt; argument to the task to instruct tailwindcss to keep the watcher alive even when &lt;code&gt;stdin&lt;/code&gt; is closed: &lt;code&gt;rails tailwindcss:watch[always]&lt;/code&gt;. If you use &lt;code&gt;bin/dev&lt;/code&gt; then you should modify your &lt;code&gt;Procfile.dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Conflict with sassc-rails&lt;/h3&gt; &#xA;&lt;p&gt;Tailwind uses modern CSS features that are not recognized by the &lt;code&gt;sassc-rails&lt;/code&gt; extension that was included by default in the Gemfile for Rails 6. In order to avoid any errors like &lt;code&gt;SassC::SyntaxError&lt;/code&gt;, you must remove that gem from your Gemfile.&lt;/p&gt; &#xA;&lt;h3&gt;Class names must be spelled out&lt;/h3&gt; &#xA;&lt;p&gt;For Tailwind to work, your class names need to be spelled out. If you need to make sure Tailwind generates class names that don&#39;t exist in your content files or that are programmatically composed, use the &lt;a href=&#34;https://tailwindcss.com/docs/content-configuration#safelisting-classes&#34;&gt;safelist option&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;ERROR: Cannot find the tailwindcss executable&lt;/code&gt; for supported platform&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/flavorjones/tailwindcss-ruby&#34;&gt;https://github.com/flavorjones/tailwindcss-ruby&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h3&gt;Using asset-pipeline assets&lt;/h3&gt; &#xA;&lt;p&gt;In Rails, you want to use &lt;a href=&#34;https://guides.rubyonrails.org/asset_pipeline.html#what-is-fingerprinting-and-why-should-i-care-questionmark&#34;&gt;assets from the asset pipeline to get fingerprinting&lt;/a&gt;. However, Tailwind isn&#39;t aware of those assets.&lt;/p&gt; &#xA;&lt;p&gt;To use assets from the pipeline, use &lt;code&gt;url(image.svg)&lt;/code&gt;. &lt;a href=&#34;https://github.com/rails/sprockets-rails/pull/476&#34;&gt;Since Sprockets v3.3.0&lt;/a&gt; &lt;code&gt;url(image.svg)&lt;/code&gt; is rewritten to &lt;code&gt;/path/to/assets/image-7801e7538c6f1cc57aa75a5876ab0cac.svg&lt;/code&gt; so output CSS will have the correct path to those assets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {&#xA;    theme: {&#xA;        extend: {&#xA;            backgroundImage: {&#xA;                &#39;image&#39;: &#34;url(&#39;image.svg&#39;)&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The inline version also works:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;section class=&#34;bg-[url(&#39;image.svg&#39;)]&#34;&amp;gt;Has the image as it&#39;s background&amp;lt;/section&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conflict with pre-existing asset pipeline stylesheets&lt;/h3&gt; &#xA;&lt;p&gt;If you get a warning &lt;code&gt;Unrecognized at-rule or error parsing at-rule ‘@tailwind’.&lt;/code&gt; in the browser console after installation, you are incorrectly double-processing &lt;code&gt;application.tailwind.css&lt;/code&gt;. This is a misconfiguration, even though the styles will be fully effective in many cases.&lt;/p&gt; &#xA;&lt;p&gt;The file &lt;code&gt;application.tailwind.css&lt;/code&gt; is installed when running &lt;code&gt;rails tailwindcss:install&lt;/code&gt; and is placed alongside the common &lt;code&gt;application.css&lt;/code&gt; in &lt;code&gt;app/assets/stylesheets&lt;/code&gt;. Because the &lt;code&gt;application.css&lt;/code&gt; in a newly generated Rails app includes a &lt;code&gt;require_tree .&lt;/code&gt; directive, the asset pipeline incorrectly processes &lt;code&gt;application.tailwind.css&lt;/code&gt;, where it should be taken care of by &lt;code&gt;tailwindcss&lt;/code&gt;. The asset pipeline ignores TailwindCSS&#39;s at-directives, and the browser can&#39;t process them.&lt;/p&gt; &#xA;&lt;p&gt;To fix the warning, you can either remove the &lt;code&gt;application.css&lt;/code&gt;, if you don&#39;t plan to use the asset pipeline for stylesheets, and instead rely on TailwindCSS completely for styles. This is what this installer assumes.&lt;/p&gt; &#xA;&lt;p&gt;Or, if you do want to keep using the asset pipeline in parallel, make sure to remove the &lt;code&gt;require_tree .&lt;/code&gt; line from the &lt;code&gt;application.css&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Tailwind for Rails is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;. The Inter font is released under the &lt;a href=&#34;https://github.com/rsms/inter/raw/master/LICENSE.txt&#34;&gt;SIL Open Font License, Version 1.1&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>