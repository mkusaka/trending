<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T02:05:07Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thoughtbot/shoulda-matchers</title>
    <updated>2023-07-30T02:05:07Z</updated>
    <id>tag:github.com,2023-07-30:/thoughtbot/shoulda-matchers</id>
    <link href="https://github.com/thoughtbot/shoulda-matchers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple one-liner tests for common Rails functionality&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shoulda Matchers &lt;a href=&#34;https://rubygems.org/gems/shoulda-matchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/shoulda-matchers.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thoughtbot/shoulda-matchers/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/thoughtbot/shoulda-matchers/ci.yml?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/shoulda-matchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/dt/shoulda-matchers.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/shoulda-matchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/dtv/shoulda-matchers.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matchers.shoulda.io/&#34;&gt;&lt;img src=&#34;https://matchers.shoulda.io/images/shoulda-matchers-logo.png&#34; alt=&#34;shoulda-matchers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shoulda Matchers provides RSpec- and Minitest-compatible one-liners to test common Rails functionality that, if written by hand, would be much longer, more complex, and error-prone.&lt;/p&gt; &#xA;&lt;h2&gt;Quick links&lt;/h2&gt; &#xA;&lt;p&gt;📖 &lt;strong&gt;&lt;a href=&#34;https://matchers.shoulda.io/docs&#34;&gt;Read the documentation for the latest version&lt;/a&gt;.&lt;/strong&gt; 📢 &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/CHANGELOG.md&#34;&gt;See what&#39;s changed in recent versions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#rspec&#34;&gt;RSpec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#minitest&#34;&gt;Minitest&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#on-the-subject-of-subject&#34;&gt;On the subject of &lt;code&gt;subject&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#availability-of-rspec-matchers-in-example-groups&#34;&gt;Availability of RSpec matchers in example groups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#should-vs-is_expectedto&#34;&gt;&lt;code&gt;should&lt;/code&gt; vs &lt;code&gt;is_expected.to&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#matchers&#34;&gt;Matchers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#activemodel-matchers&#34;&gt;ActiveModel matchers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#activerecord-matchers&#34;&gt;ActiveRecord matchers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#actioncontroller-matchers&#34;&gt;ActionController matchers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#independent-matchers&#34;&gt;Independent matchers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#compatibility&#34;&gt;Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#team&#34;&gt;Team&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#copyright-license&#34;&gt;Copyright/License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#about-thoughtbot&#34;&gt;About thoughtbot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;RSpec&lt;/h3&gt; &#xA;&lt;p&gt;Start by including &lt;code&gt;shoulda-matchers&lt;/code&gt; in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :test do&#xA;  gem &#39;shoulda-matchers&#39;, &#39;~&amp;gt; 5.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now you need to configure the gem by telling it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;which matchers you want to use in your tests&lt;/li&gt; &#xA; &lt;li&gt;that you&#39;re using RSpec so that it can make those matchers available in your example groups&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Rails apps&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re working on a Rails app, simply place this at the bottom of &lt;code&gt;spec/rails_helper.rb&lt;/code&gt; (or in a support file if you so choose):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Shoulda::Matchers.configure do |config|&#xA;  config.integrate do |with|&#xA;    with.test_framework :rspec&#xA;    with.library :rails&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Non-Rails apps&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re not working on a Rails app, but you still make use of ActiveRecord or ActiveModel in your project, you can still use this gem too! In that case, you&#39;ll want to place the following configuration at the bottom of &lt;code&gt;spec/spec_helper.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Shoulda::Matchers.configure do |config|&#xA;  config.integrate do |with|&#xA;    with.test_framework :rspec&#xA;&#xA;    # Keep as many of these lines as are necessary:&#xA;    with.library :active_record&#xA;    with.library :active_model&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minitest&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using our umbrella gem &lt;a href=&#34;https://github.com/thoughtbot/shoulda&#34;&gt;Shoulda&lt;/a&gt;, then make sure that you&#39;re using the latest version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :test do&#xA;  gem &#39;shoulda&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, add &lt;code&gt;shoulda-matchers&lt;/code&gt; to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :test do&#xA;  gem &#39;shoulda-matchers&#39;, &#39;~&amp;gt; 5.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now you need to configure the gem by telling it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;which matchers you want to use in your tests&lt;/li&gt; &#xA; &lt;li&gt;that you&#39;re using Minitest so that it can make those matchers available in your test case classes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Rails apps&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re working on a Rails app, simply place this at the bottom of &lt;code&gt;test/test_helper.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Shoulda::Matchers.configure do |config|&#xA;  config.integrate do |with|&#xA;    with.test_framework :minitest&#xA;    with.library :rails&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Non-Rails apps&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re not working on a Rails app, but you still make use of ActiveRecord or ActiveModel in your project, you can still use this gem too! In that case, you&#39;ll want to place the following configuration at the bottom of &lt;code&gt;test/test_helper.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Shoulda::Matchers.configure do |config|&#xA;  config.integrate do |with|&#xA;    with.test_framework :minitest&#xA;&#xA;    # Keep as many of these lines as are necessary:&#xA;    with.library :active_record&#xA;    with.library :active_model&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Most of the matchers provided by this gem are useful in a Rails context, and as such, can be used for different parts of a Rails app:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#activemodel-matchers&#34;&gt;database models backed by ActiveRecord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#activerecord-matchers&#34;&gt;non-database models, form objects, etc. backed by ActiveModel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#actioncontroller-matchers&#34;&gt;controllers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#routing-matchers&#34;&gt;routes&lt;/a&gt; (RSpec only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#independent-matchers&#34;&gt;Rails-specific features like &lt;code&gt;delegate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As the name of the gem indicates, most matchers are designed to be used in &#34;one-liner&#34; form using the &lt;code&gt;should&lt;/code&gt; macro, a special directive available in both RSpec and &lt;a href=&#34;https://github.com/thoughtbot/shoulda&#34;&gt;Shoulda&lt;/a&gt;. For instance, a model test case may look something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# RSpec&#xA;RSpec.describe MenuItem, type: :model do&#xA;  describe &#39;associations&#39; do&#xA;    it { should belong_to(:category).class_name(&#39;MenuCategory&#39;) }&#xA;  end&#xA;&#xA;  describe &#39;validations&#39; do&#xA;    it { should validate_presence_of(:name) }&#xA;    it { should validate_uniqueness_of(:name).scoped_to(:category_id) }&#xA;  end&#xA;end&#xA;&#xA;# Minitest (Shoulda)&#xA;class MenuItemTest &amp;lt; ActiveSupport::TestCase&#xA;  context &#39;associations&#39; do&#xA;    should belong_to(:category).class_name(&#39;MenuCategory&#39;)&#xA;  end&#xA;&#xA;  context &#39;validations&#39; do&#xA;    should validate_presence_of(:name)&#xA;    should validate_uniqueness_of(:name).scoped_to(:category_id)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/#matchers&#34;&gt;See below&lt;/a&gt; for the full set of matchers that you can use.&lt;/p&gt; &#xA;&lt;h3&gt;On the subject of &lt;code&gt;subject&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For both RSpec and Shoulda, the &lt;strong&gt;subject&lt;/strong&gt; is an implicit reference to the object under test, and through the use of &lt;code&gt;should&lt;/code&gt; as demonstrated above, all of the matchers make use of &lt;code&gt;subject&lt;/code&gt; internally when they are run. A &lt;code&gt;subject&lt;/code&gt; is always set automatically by your test framework in any given test case; however, in certain cases it can be advantageous to override it. For instance, when testing validations in a model, it is customary to provide a valid model instead of a fresh one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# RSpec&#xA;RSpec.describe Post, type: :model do&#xA;  describe &#39;validations&#39; do&#xA;    # Here we&#39;re using FactoryBot, but you could use anything&#xA;    subject { build(:post) }&#xA;&#xA;    it { should validate_presence_of(:title) }&#xA;  end&#xA;end&#xA;&#xA;# Minitest (Shoulda)&#xA;class PostTest &amp;lt; ActiveSupport::TestCase&#xA;  context &#39;validations&#39; do&#xA;    subject { build(:post) }&#xA;&#xA;    should validate_presence_of(:title)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When overriding the subject in this manner, then, it&#39;s important to provide the correct object. &lt;strong&gt;When in doubt, provide an instance of the class under test.&lt;/strong&gt; This is particularly necessary for controller tests, where it is easy to accidentally write something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe PostsController, type: :controller do&#xA;  describe &#39;GET #index&#39; do&#xA;    subject { get :index }&#xA;&#xA;    # This may work...&#xA;    it { should have_http_status(:success) }&#xA;    # ...but this will not!&#xA;    it { should permit(:title, :body).for(:post) }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, you would want to use &lt;code&gt;before&lt;/code&gt; rather than &lt;code&gt;subject&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe PostsController, type: :controller do&#xA;  describe &#39;GET #index&#39; do&#xA;    before { get :index }&#xA;&#xA;    # Notice that we have to assert have_http_status on the response here...&#xA;    it { expect(response).to have_http_status(:success) }&#xA;    # ...but we do not have to provide a subject for render_template&#xA;    it { should render_template(&#39;index&#39;) }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Availability of RSpec matchers in example groups&lt;/h3&gt; &#xA;&lt;h4&gt;Rails projects&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using RSpec, then you&#39;re probably familiar with the concept of example groups. Example groups can be assigned tags order to assign different behavior to different kinds of example groups. This comes into play especially when using &lt;code&gt;rspec-rails&lt;/code&gt;, where, for instance, controller example groups, tagged with &lt;code&gt;type: :controller&lt;/code&gt;, are written differently than request example groups, tagged with &lt;code&gt;type: :request&lt;/code&gt;. This difference in writing style arises because &lt;code&gt;rspec-rails&lt;/code&gt; mixes different behavior and methods into controller example groups vs. request example groups.&lt;/p&gt; &#xA;&lt;p&gt;Relying on this behavior, Shoulda Matchers automatically makes certain matchers available in certain kinds of example groups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ActiveRecord and ActiveModel matchers are available only in model example groups, i.e., those tagged with &lt;code&gt;type: :model&lt;/code&gt; or in files located under &lt;code&gt;spec/models&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ActionController matchers are available only in controller example groups, i.e., those tagged with &lt;code&gt;type: :controller&lt;/code&gt; or in files located under &lt;code&gt;spec/controllers&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;route&lt;/code&gt; matcher is available in routing example groups, i.e., those tagged with &lt;code&gt;type: :routing&lt;/code&gt; or in files located under &lt;code&gt;spec/routing&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Independent matchers are available in all example groups.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As long as you&#39;re using Rails, you don&#39;t need to worry about these details — everything should &#34;just work&#34;.&lt;/p&gt; &#xA;&lt;h4&gt;Non-Rails projects&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;What if you are using ActiveModel or ActiveRecord outside of Rails, however, and you want to use model matchers in a certain example group?&lt;/strong&gt; Then you&#39;ll need to manually include the module that holds those matchers into that example group. For instance, you might have to say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe MySpecialModel do&#xA;  include Shoulda::Matchers::ActiveModel&#xA;  include Shoulda::Matchers::ActiveRecord&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a lot of similar example groups in which you need to do this, then you might find it more helpful to tag your example groups appropriately, then instruct RSpec to mix these modules into any example groups that have that tag. For instance, you could add this to your &lt;code&gt;rails_helper.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.include(Shoulda::Matchers::ActiveModel, type: :model)&#xA;  config.include(Shoulda::Matchers::ActiveRecord, type: :model)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And from then on, you could say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe MySpecialModel, type: :model do&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;should&lt;/code&gt; vs &lt;code&gt;is_expected.to&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In this README and throughout the documentation, you&#39;ll notice that we use the &lt;code&gt;should&lt;/code&gt; form of RSpec&#39;s one-liner syntax over &lt;code&gt;is_expected.to&lt;/code&gt;. Beside being the namesake of the gem itself, this is our preferred syntax as it&#39;s short and sweet. But if you prefer to use &lt;code&gt;is_expected.to&lt;/code&gt;, you can do that too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe Person, type: :model do&#xA;  it { is_expected.to validate_presence_of(:name) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Matchers&lt;/h2&gt; &#xA;&lt;p&gt;Here is the full list of matchers that ship with this gem. If you need details about any of them, make sure to &lt;a href=&#34;https://matchers.shoulda.io/docs&#34;&gt;consult the documentation&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;ActiveModel matchers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/allow_value_matcher.rb&#34;&gt;allow_value&lt;/a&gt;&lt;/strong&gt; tests that an attribute is valid or invalid if set to one or more values. &lt;em&gt;(Aliased as #allow_values.)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/have_secure_password_matcher.rb&#34;&gt;have_secure_password&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;has_secure_password&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/validate_absence_of_matcher.rb&#34;&gt;validate_absence_of&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;validates_absence_of&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/validate_acceptance_of_matcher.rb&#34;&gt;validate_acceptance_of&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;validates_acceptance_of&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/validate_confirmation_of_matcher.rb&#34;&gt;validate_confirmation_of&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;validates_confirmation_of&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/validate_exclusion_of_matcher.rb&#34;&gt;validate_exclusion_of&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;validates_exclusion_of&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/validate_inclusion_of_matcher.rb&#34;&gt;validate_inclusion_of&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;validates_inclusion_of&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/validate_length_of_matcher.rb&#34;&gt;validate_length_of&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;validates_length_of&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/validate_numericality_of_matcher.rb&#34;&gt;validate_numericality_of&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;validates_numericality_of&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/validate_presence_of_matcher.rb&#34;&gt;validate_presence_of&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;validates_presence_of&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_model/validate_comparison_of_matcher.rb&#34;&gt;validate_comparison_of&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;validates_comparison_of&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ActiveRecord matchers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/accept_nested_attributes_for_matcher.rb&#34;&gt;accept_nested_attributes_for&lt;/a&gt;&lt;/strong&gt; tests usage of the &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; macro.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/association_matcher.rb&#34;&gt;belong_to&lt;/a&gt;&lt;/strong&gt; tests your &lt;code&gt;belongs_to&lt;/code&gt; associations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/define_enum_for_matcher.rb&#34;&gt;define_enum_for&lt;/a&gt;&lt;/strong&gt; tests usage of the &lt;code&gt;enum&lt;/code&gt; macro.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/association_matcher.rb#L827&#34;&gt;have_and_belong_to_many&lt;/a&gt;&lt;/strong&gt; tests your &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; associations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/have_db_column_matcher.rb&#34;&gt;have_db_column&lt;/a&gt;&lt;/strong&gt; tests that the table that backs your model has a specific column.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/have_db_index_matcher.rb&#34;&gt;have_db_index&lt;/a&gt;&lt;/strong&gt; tests that the table that backs your model has an index on a specific column.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/have_implicit_order_column.rb&#34;&gt;have_implicit_order_column&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;implicit_order_column&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/association_matcher.rb#L328&#34;&gt;have_many&lt;/a&gt;&lt;/strong&gt; tests your &lt;code&gt;has_many&lt;/code&gt; associations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/have_attached_matcher.rb&#34;&gt;have_many_attached&lt;/a&gt;&lt;/strong&gt; tests your &lt;code&gt;has_many_attached&lt;/code&gt; associations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/association_matcher.rb#L598&#34;&gt;have_one&lt;/a&gt;&lt;/strong&gt; tests your &lt;code&gt;has_one&lt;/code&gt; associations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/have_attached_matcher.rb&#34;&gt;have_one_attached&lt;/a&gt;&lt;/strong&gt; tests your &lt;code&gt;has_one_attached&lt;/code&gt; associations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/have_readonly_attribute_matcher.rb&#34;&gt;have_readonly_attribute&lt;/a&gt;&lt;/strong&gt; tests usage of the &lt;code&gt;attr_readonly&lt;/code&gt; macro.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/have_rich_text_matcher.rb&#34;&gt;have_rich_text&lt;/a&gt;&lt;/strong&gt; tests your &lt;code&gt;has_rich_text&lt;/code&gt; associations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/serialize_matcher.rb&#34;&gt;serialize&lt;/a&gt;&lt;/strong&gt; tests usage of the &lt;code&gt;serialize&lt;/code&gt; macro.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/active_record/validate_uniqueness_of_matcher.rb&#34;&gt;validate_uniqueness_of&lt;/a&gt;&lt;/strong&gt; tests usage of &lt;code&gt;validates_uniqueness_of&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ActionController matchers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/filter_param_matcher.rb&#34;&gt;filter_param&lt;/a&gt;&lt;/strong&gt; tests parameter filtering configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/permit_matcher.rb&#34;&gt;permit&lt;/a&gt;&lt;/strong&gt; tests that an action places a restriction on the &lt;code&gt;params&lt;/code&gt; hash.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/redirect_to_matcher.rb&#34;&gt;redirect_to&lt;/a&gt;&lt;/strong&gt; tests that an action redirects to a certain location.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/render_template_matcher.rb&#34;&gt;render_template&lt;/a&gt;&lt;/strong&gt; tests that an action renders a template.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/render_with_layout_matcher.rb&#34;&gt;render_with_layout&lt;/a&gt;&lt;/strong&gt; tests that an action is rendered with a certain layout.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/rescue_from_matcher.rb&#34;&gt;rescue_from&lt;/a&gt;&lt;/strong&gt; tests usage of the &lt;code&gt;rescue_from&lt;/code&gt; macro.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/respond_with_matcher.rb&#34;&gt;respond_with&lt;/a&gt;&lt;/strong&gt; tests that an action responds with a certain status code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/route_matcher.rb&#34;&gt;route&lt;/a&gt;&lt;/strong&gt; tests your routes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/set_session_matcher.rb&#34;&gt;set_session&lt;/a&gt;&lt;/strong&gt; makes assertions on the &lt;code&gt;session&lt;/code&gt; hash.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/set_flash_matcher.rb&#34;&gt;set_flash&lt;/a&gt;&lt;/strong&gt; makes assertions on the &lt;code&gt;flash&lt;/code&gt; hash.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/callback_matcher.rb#L29&#34;&gt;use_after_action&lt;/a&gt;&lt;/strong&gt; tests that an &lt;code&gt;after_action&lt;/code&gt; callback is defined in your controller.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/callback_matcher.rb#L75&#34;&gt;use_around_action&lt;/a&gt;&lt;/strong&gt; tests that an &lt;code&gt;around_action&lt;/code&gt; callback is defined in your controller.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/callback_matcher.rb#L4&#34;&gt;use_before_action&lt;/a&gt;&lt;/strong&gt; tests that a &lt;code&gt;before_action&lt;/code&gt; callback is defined in your controller.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Routing matchers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/action_controller/route_matcher.rb&#34;&gt;route&lt;/a&gt;&lt;/strong&gt; tests your routes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Independent matchers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/lib/shoulda/matchers/independent/delegate_method_matcher.rb&#34;&gt;delegate_method&lt;/a&gt;&lt;/strong&gt; tests that an object forwards messages to other, internal objects by way of delegation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Over time our community has created extensions to Shoulda Matchers. If you&#39;ve created something that you want to share, please &lt;a href=&#34;https://github.com/thoughtbot/shoulda-matchers/issues/new&#34;&gt;let us know&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/majioa/shoulda-matchers-cucumber&#34;&gt;shoulda-matchers-cucumber&lt;/a&gt;&lt;/strong&gt; – Adds support for using Shoulda Matchers in Cucumber tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Have a fix for a problem you&#39;ve been running into or an idea for a new feature you think would be useful? Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/CONTRIBUTING.md&#34;&gt;Contributing document&lt;/a&gt; for instructions on setting up the repo on your machine, understanding the codebase, and creating a good pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Shoulda Matchers is tested and supported against Ruby 3.0+, Rails 6.1+, RSpec 3.x, and Minitest 5.x.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Ruby &amp;lt; 2.4 and Rails &amp;lt; 4.1 compatibility, please use &lt;a href=&#34;https://github.com/thoughtbot/shoulda-matchers/tree/v3.1.3&#34;&gt;v3.1.3&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For Ruby &amp;lt; 3.0 and Rails &amp;lt; 6.1 compatibility, please use &lt;a href=&#34;https://github.com/thoughtbot/shoulda-matchers/tree/v4.5.1&#34;&gt;v4.5.1&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Shoulda Matchers follows Semantic Versioning 2.0 as defined at &lt;a href=&#34;https://semver.org&#34;&gt;https://semver.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;p&gt;Shoulda Matchers is maintained by &lt;a href=&#34;https://github.com/mcmire&#34;&gt;Elliot Winkler&lt;/a&gt;, &lt;a href=&#34;https://github.com/guialbuk&#34;&gt;Gui Albuk&lt;/a&gt; and &lt;a href=&#34;https://github.com/VSPPedro&#34;&gt;Pedro Paiva&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright/License&lt;/h2&gt; &#xA;&lt;p&gt;Shoulda Matchers is copyright © Tammer Saleh and &lt;a href=&#34;https://thoughtbot.com&#34;&gt;thoughtbot, inc&lt;/a&gt;. It is free and opensource software and may be redistributed under the terms specified in the &lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/shoulda-matchers/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;About thoughtbot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://thoughtbot.com/brand_assets/93:44.svg?sanitize=true&#34; alt=&#34;thoughtbot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The names and logos for thoughtbot are trademarks of thoughtbot, inc.&lt;/p&gt; &#xA;&lt;p&gt;We are passionate about open source software. See &lt;a href=&#34;https://thoughtbot.com/community?utm_source=github&#34;&gt;our other projects&lt;/a&gt;. We are &lt;a href=&#34;https://thoughtbot.com?utm_source=github&#34;&gt;available for hire&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>docusealco/docuseal</title>
    <updated>2023-07-30T02:05:07Z</updated>
    <id>tag:github.com,2023-07-30:/docusealco/docuseal</id>
    <link href="https://github.com/docusealco/docuseal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source DocuSign alternative. Create, fill, and sign digital documents ✍️&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34; style=&#34;border-bottom: none&#34;&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://www.docuseal.co&#34;&gt; &lt;img alt=&#34;DocuSeal&#34; src=&#34;https://github.com/docusealco/docuseal/assets/5418788/c12cd051-81cd-4402-bc3a-92f2cfdc1b06&#34; width=&#34;80&#34;&gt; &lt;br&gt; &lt;/a&gt; DocuSeal &#xA; &lt;/div&gt; &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Open source document filling and signing &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/docuseal/docuseal&#34;&gt; &lt;img alt=&#34;Docker releases&#34; src=&#34;https://img.shields.io/docker/v/docuseal/docuseal&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/qygYCDGck9&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1125112641170448454?logo=discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=docusealco&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/docusealco?style=social&#34; alt=&#34;Follow @docusealco&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt; DocuSeal is an open source platform that provides secure and efficient digital document signing and processing. Create PDF forms to have them filled and signed online on any device with an easy-to-use, mobile-optimized web tool. &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; &lt;a href=&#34;https://demo.docuseal.co&#34;&gt;✨ Live Demo&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href=&#34;https://docuseal.co/sign_up&#34;&gt;☁️ Try in Cloud&lt;/a&gt; &lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://demo.docuseal.co&#34;&gt;&lt;img src=&#34;https://github.com/docusealco/docuseal/assets/5418788/d8703ea3-361a-423f-8bfe-eff1bd9dbe14&#34; alt=&#34;Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PDF form fields builder (WYSIWYG)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 10 field types available (Signature, Date, File, Checkbox etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple submitters per document&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automated emails via SMTP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Files storage on AWS S3, Google Storage, or Azure&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatic PDF eSignature&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PDF signature verification&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Users management&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mobile-optimized&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Easy to deploy in minutes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Heroku&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Railway&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/docusealco/docuseal-heroku&#34;&gt;&lt;img alt=&#34;Deploy on Heroku&#34; src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://railway.app/template/IGoDnc?referralCode=ruU7JR&#34;&gt;&lt;img alt=&#34;Deploy on Railway&#34; src=&#34;https://railway.app/button.svg?sanitize=true&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;DigitalOcean&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Render&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://cloud.digitalocean.com/apps/new?repo=https://github.com/docusealco/docuseal-digitalocean/tree/master&amp;amp;refcode=421d50f53990&#34;&gt;&lt;img alt=&#34;Deploy on DigitalOcean&#34; src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://render.com/deploy?repo=https://github.com/docusealco/docuseal-render&#34;&gt;&lt;img alt=&#34;Deploy to Render&#34; src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --name docuseal -p 3000:3000 -v.:/data docuseal/docuseal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default DocuSeal docker container uses an SQLite database to store data and configurations. Alternatively, it is possible use PostgreSQL or MySQL databases by specifying the &lt;code&gt;DATABASE_URL&lt;/code&gt; env variable.&lt;/p&gt; &#xA;&lt;h4&gt;Docker Compose&lt;/h4&gt; &#xA;&lt;p&gt;Download docker-compose.yml into your private server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl https://raw.githubusercontent.com/docusealco/docuseal/master/docker-compose.yml &amp;gt; docker-compose.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the app under a custom domain over https using docker compose (make sure your DNS points to the server to automatically issue ssl certs with Caddy):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;HOST=your-domain-name.com docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;For Companies&lt;/h2&gt; &#xA;&lt;h3&gt;Integrate seamless document signing into your web or mobile apps with DocuSeal!&lt;/h3&gt; &#xA;&lt;p&gt;At DocuSeal we have expertise and technologies to make documents creation, filling, signing and processing seamlessly integrated with your product. We specialize in working with various industries, including &lt;strong&gt;Banking, Healthcare, Transport, eCommerce, KYC, CRM, and other software products&lt;/strong&gt; that require bulk document signing. By leveraging DocuSeal, we can assist in reducing the overall cost of developing and processing electronic documents while ensuring security and compliance with local electronic document laws.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cal.com/docuseal&#34;&gt;&lt;img src=&#34;https://cal.com/book-with-cal-dark.svg?sanitize=true&#34; alt=&#34;Book an Integration Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;DocuSeal is released under the GNU Affero General Public License v3.0.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>googleapis/google-api-ruby-client</title>
    <updated>2023-07-30T02:05:07Z</updated>
    <id>tag:github.com,2023-07-30:/googleapis/google-api-ruby-client</id>
    <link href="https://github.com/googleapis/google-api-ruby-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;REST client for Google APIs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simple REST Clients for Google APIs&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a set of simple client libraries for various Google APIs. These libraries are generated automatically from &lt;a href=&#34;https://developers.google.com/discovery&#34;&gt;Discovery Documents&lt;/a&gt;, and the code generator is also hosted here in this repository.&lt;/p&gt; &#xA;&lt;p&gt;Each client provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A client object that connects to the HTTP/JSON REST endpoint for the service.&lt;/li&gt; &#xA; &lt;li&gt;Ruby objects for data structures related to the service.&lt;/li&gt; &#xA; &lt;li&gt;Integration with the googleauth gem for authentication using OAuth, API keys, and service accounts.&lt;/li&gt; &#xA; &lt;li&gt;Control of retry, pagination, and timeouts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These client libraries are officially supported by Google, and are updated regularly to track changes to the service. However, many Google services, especially Google Cloud Platform services such as Cloud Storage, Pub/Sub, and BigQuery, may provide a more modern client that is easier to use and more performant. See the section below titled &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-ruby-client/main/#which-client-should-i-use&#34;&gt;&#34;Which client should I use?&#34;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Using the clients&lt;/h2&gt; &#xA;&lt;p&gt;The client gems are named according to the pattern &lt;code&gt;google-apis-&amp;lt;servicename&amp;gt;_&amp;lt;serviceversion&amp;gt;&lt;/code&gt;. For example, the client for the Google Drive V3 API is &lt;code&gt;google-apis-drive_v3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install the client using &lt;code&gt;gem install&lt;/code&gt; or by adding it to your &lt;code&gt;Gemfile&lt;/code&gt;. Then, to use it, require the file and instantiate the service. For example to use the Drive API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;google/apis/drive_v3&#39;&#xA;&#xA;drive = Google::Apis::DriveV3::DriveService.new&#xA;drive.authorization = ... # See Googleauth or Signet libraries&#xA;&#xA;# Search for files in Drive (first page only)&#xA;files = drive.list_files(q: &#34;title contains &#39;finances&#39;&#34;)&#xA;files.items.each do |file|&#xA;  puts file.title&#xA;end&#xA;&#xA;# Upload a file&#xA;metadata = Google::Apis::DriveV3::File.new(name: &#39;test.txt&#39;)&#xA;metadata = drive.create_file(metadata, upload_source: &#39;/tmp/test.txt&#39;, content_type: &#39;text/plain&#39;)&#xA;&#xA;# Download a file&#xA;drive.get_file(metadata.id, download_dest: &#39;/tmp/downloaded-test.txt&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Following is another example using the Content API (Google Merchant Center), provided by the &lt;code&gt;google-apis-content_v2_1&lt;/code&gt; gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;google/apis/content_v2_1&#39;&#xA;require &#39;googleauth&#39; # https://github.com/googleapis/google-auth-library-ruby&#xA;&#xA;content = Google::Apis::ContentV2_1::ShoppingContentService.new&#xA;&#xA;scope = &#39;https://www.googleapis.com/auth/content&#39;&#xA;merchant_id = # Merchant ID found on dashboard&#xA;&#xA;content.authorization = Google::Auth::ServiceAccountCredentials.make_creds(&#xA;  json_key_io: File.open(&#39;./content-api-key.json&#39;),&#xA;  scope: scope)&#xA;&#xA;content.authorization.fetch_access_token!&#xA;# Service methods: https://googleapis.dev/ruby/google-api-client/latest/Google/Apis/ContentV2_1/ShoppingContentService.html&#xA;content.list_datafeeds(merchant_id) # Returns Google::Apis::ContentV2_1::ListDatafeedsResponse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more detailed information, see the &lt;a href=&#34;https://github.com/googleapis/google-api-ruby-client/raw/main/docs/usage-guide.md&#34;&gt;Usage Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Which client should I use?&lt;/h2&gt; &#xA;&lt;p&gt;Google provides two types of Ruby API client libraries: &lt;strong&gt;simple REST clients&lt;/strong&gt; and &lt;strong&gt;modern clients&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The libraries in this repo are &lt;em&gt;simple REST clients&lt;/em&gt;. These clients connect to HTTP/JSON REST endpoints and are automatically generated from service discovery documents. They support most API functionality, but their class interfaces are sometimes awkward.&lt;/p&gt; &#xA;&lt;p&gt;Modern clients are produced by a modern code generator, combined with hand-crafted functionality for some services. Most modern clients connect to high-performance gRPC endpoints, although a few are backed by REST services. Modern clients are available for many Google services, especially Cloud Platform services, but do not yet support all the services covered by the simple clients. Most modern clients live in the &lt;a href=&#34;https://github.com/googleapis/google-cloud-ruby&#34;&gt;https://github.com/googleapis/google-cloud-ruby&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For most users, we recommend the modern client, if one is available.&lt;/strong&gt; Compared with simple clients, modern clients are generally much easier to use and more Ruby-like, support more advanced features such as streaming and long-running operations, and often provide much better performance. You may consider using a simple client instead, if a modern client is not yet available for the service you want to use, or if you are not able to use gRPC on your infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;The documentation for the particular Google service you are working with, may provide guidance regarding the preferred client library to use.&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/google/google-api-ruby-client/tree/main/samples&#34;&gt;samples&lt;/a&gt; for examples on how to use the client library for various services.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Ruby versions&lt;/h2&gt; &#xA;&lt;p&gt;This library is supported on Ruby 2.5+.&lt;/p&gt; &#xA;&lt;p&gt;Google provides official support for Ruby versions that are actively supported by Ruby Core -- that is, Ruby versions that are either in normal maintenance or in security maintenance, and not end of life. Currently, this means Ruby 2.5 and later. Older versions of Ruby &lt;em&gt;may&lt;/em&gt; still work, but are unsupported and not recommended. See &lt;a href=&#34;https://www.ruby-lang.org/en/downloads/branches/&#34;&gt;https://www.ruby-lang.org/en/downloads/branches/&lt;/a&gt; for details about the Ruby support schedule.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is licensed under Apache 2.0. Full license text is available in the &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-ruby-client/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-ruby-client/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/google/google-api-ruby-client/issues&#34;&gt;report bugs at the project on Github&lt;/a&gt;. Don&#39;t hesitate to &lt;a href=&#34;http://stackoverflow.com/questions/tagged/google-api-ruby-client&#34;&gt;ask questions&lt;/a&gt; about the client or APIs on &lt;a href=&#34;http://stackoverflow.com&#34;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>