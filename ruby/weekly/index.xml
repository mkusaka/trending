<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-23T01:46:11Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rails/sprockets-rails</title>
    <updated>2024-06-23T01:46:11Z</updated>
    <id>tag:github.com,2024-06-23:/rails/sprockets-rails</id>
    <link href="https://github.com/rails/sprockets-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sprockets Rails integration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sprockets Rails&lt;/h1&gt; &#xA;&lt;p&gt;Provides &lt;a href=&#34;https://github.com/rails/sprockets&#34;&gt;Sprockets&lt;/a&gt; implementation for Rails 4.x (and beyond) Asset Pipeline.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;sprockets-rails&#39;, :require =&amp;gt; &#39;sprockets/railtie&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or alternatively &lt;code&gt;require &#39;sprockets/railtie&#39;&lt;/code&gt; in your &lt;code&gt;config/application.rb&lt;/code&gt; if you have Bundler auto-require disabled.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Rake task&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;rake assets:precompile&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Deployment task that compiles any assets listed in &lt;code&gt;config.assets.precompile&lt;/code&gt; to &lt;code&gt;public/assets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;rake assets:clean&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Only removes old assets (keeps the most recent 3 copies) from &lt;code&gt;public/assets&lt;/code&gt;. Useful when doing rolling deploys that may still be serving old assets while the new ones are being compiled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;rake assets:clobber&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nuke &lt;code&gt;public/assets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customize&lt;/h4&gt; &#xA;&lt;p&gt;If the basic tasks don&#39;t do all that you need, it&#39;s straight forward to redefine them and replace them with something more specific to your app.&lt;/p&gt; &#xA;&lt;p&gt;You can also redefine the task with the built in task generator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sprockets/rails/task&#39;&#xA;Sprockets::Rails::Task.new(Rails.application) do |t|&#xA;  t.environment = lambda { Rails.application.assets }&#xA;  t.assets = %w( application.js application.css )&#xA;  t.keep = 5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each asset task will invoke &lt;code&gt;assets:environment&lt;/code&gt; first. By default this loads the Rails environment. You can override this task to add or remove dependencies for your specific compilation environment.&lt;/p&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://github.com/rails/sprockets-rails/raw/master/lib/sprockets/rails/task.rb&#34;&gt;Sprockets::Rails::Task&lt;/a&gt; and &lt;a href=&#34;https://github.com/rails/sprockets/raw/master/lib/rake/sprocketstask.rb&#34;&gt;Rake::SprocketsTask&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Initializer options&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.unknown_asset_fallback&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When set to a truthy value, a result will be returned even if the requested asset is not found in the asset pipeline. When set to a falsey value it will raise an error when no asset is found in the pipeline. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.precompile&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add additional assets to compile on deploy. Defaults to &lt;code&gt;application.js&lt;/code&gt;, &lt;code&gt;application.css&lt;/code&gt; and any other non-js/css file under &lt;code&gt;app/assets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.paths&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add additional load paths to this Array. Rails includes &lt;code&gt;app/assets&lt;/code&gt;, &lt;code&gt;lib/assets&lt;/code&gt; and &lt;code&gt;vendor/assets&lt;/code&gt; for you already. Plugins might want to add their custom paths to this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.quiet&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Suppresses logger output for asset requests. Uses the &lt;code&gt;config.assets.prefix&lt;/code&gt; path to match asset requests. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.version&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set a custom cache buster string. Changing it will cause all assets to recompile on the next build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.assets.version = &#39;v1&#39;&#xA;# after installing a new plugin, change loads paths&#xA;config.assets.version = &#39;v2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.prefix&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Defaults to &lt;code&gt;/assets&lt;/code&gt;. Changes the directory to compile assets to.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.digest&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When enabled, fingerprints will be added to asset filenames.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.debug&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enable asset debugging mode. A source map will be included with each asset when this is true.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.compile&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enables Sprockets compile environment. If disabled, &lt;code&gt;Rails.application.assets&lt;/code&gt; will be &lt;code&gt;nil&lt;/code&gt; to prevent inadvertent compilation calls. View helpers will depend on assets being precompiled to &lt;code&gt;public/assets&lt;/code&gt; in order to link to them. Initializers expecting &lt;code&gt;Rails.application.assets&lt;/code&gt; during boot should be accessing the environment in a &lt;code&gt;config.assets.configure&lt;/code&gt; block. See below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.configure&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Invokes block with environment when the environment is initialized. Allows direct access to the environment instance and lets you lazily load libraries only needed for asset compiling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.assets.configure do |env|&#xA;  env.js_compressor  = :uglifier # or :closure, :yui&#xA;  env.css_compressor = :sass   # or :yui&#xA;&#xA;  require &#39;my_processor&#39;&#xA;  env.register_preprocessor &#39;application/javascript&#39;, MyProcessor&#xA;&#xA;  env.logger = Rails.logger&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.resolve_assets_in_css_urls&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When this option is enabled, sprockets-rails will register a CSS postprocessor to resolve assets referenced in &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/url()&#34;&gt;&lt;code&gt;url()&lt;/code&gt;&lt;/a&gt; function calls and replace them with the digested paths. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.resolve_with&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A list of &lt;code&gt;:environment&lt;/code&gt; and &lt;code&gt;:manifest&lt;/code&gt; symbols that defines the order that we try to find assets: manifest first, environment second? Manifest only?&lt;/p&gt; &#xA;&lt;p&gt;By default, we check the manifest first if asset digests are enabled and debug is not enabled, then we check the environment if compiling is enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Dev where debug is true, or digests are disabled&#xA;%i[ environment ]&#xA;&#xA;# Dev default, or production with compile enabled.&#xA;%i[ manifest environment ]&#xA;&#xA;# Production default.&#xA;%i[ manifest ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the resolver list is empty (e.g. if debug is true and compile is false), the standard rails public path resolution will be used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;config.assets.check_precompiled_asset&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When enabled, an exception is raised for missing assets. This option is enabled by default.&lt;/p&gt; &#xA;&lt;h2&gt;Complementary plugins&lt;/h2&gt; &#xA;&lt;p&gt;The following plugins provide some extras for the Sprockets Asset Pipeline.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rails/coffee-rails&#34;&gt;coffee-rails&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rails/sass-rails&#34;&gt;sass-rails&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; That these plugins are optional. The core coffee-script, sass, less, uglify, (and many more) features are built into Sprockets itself. Many of these plugins only provide generators and extra helpers. You can probably get by without them.&lt;/p&gt; &#xA;&lt;h2&gt;Changes from Rails 3.x&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only compiles digest filenames. Static non-digest assets should simply live in public/.&lt;/li&gt; &#xA; &lt;li&gt;Unmanaged asset paths and urls fallback to linking to public/. This should make it easier to work with both compiled assets and simple static assets. As a side effect, there will never be any &#34;asset not precompiled errors&#34; when linking to missing assets. They will just link to a public file which may or may not exist.&lt;/li&gt; &#xA; &lt;li&gt;JS and CSS compressors must be explicitly set. Magic detection has been removed to avoid loading compressors in environments where you want to avoid loading any of the asset libraries. Assign &lt;code&gt;config.assets.js_compressor = :uglifier&lt;/code&gt; or &lt;code&gt;config.assets.css_compressor = :sass&lt;/code&gt; for the standard compressors.&lt;/li&gt; &#xA; &lt;li&gt;The manifest file is now in a JSON format. Since it lives in public/ by default, the initial filename is also randomized to obfuscate public access to the resource.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config.assets.manifest&lt;/code&gt; (if used) must now include the manifest filename, e.g. &lt;code&gt;Rails.root.join(&#39;config/manifest.json&#39;)&lt;/code&gt;. It cannot be a directory.&lt;/li&gt; &#xA; &lt;li&gt;Two cleanup tasks: &lt;code&gt;rake assets:clean&lt;/code&gt; is now a safe cleanup that only removes older assets that are no longer used, while &lt;code&gt;rake assets:clobber&lt;/code&gt; nukes the entire &lt;code&gt;public/assets&lt;/code&gt; directory. The clean task allows for rolling deploys that may still be linking to an old asset while the new assets are being built.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;But what if I want sprockets to generate non-digest assets?&lt;/h3&gt; &#xA;&lt;p&gt;You have several options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://github.com/mvz/non-digest-assets&#34;&gt;non-digest-assets gem&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://github.com/sikachu/sprockets-redirect&#34;&gt;sprockets-redirect gem&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://github.com/zarqman/smart_assets&#34;&gt;smart_assets gem&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;a href=&#34;https://github.com/rails/sprockets-rails/issues/49#issuecomment-20535134&#34;&gt;a rake task&lt;/a&gt; to pre-generate a non-digest version in &lt;code&gt;public/&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Experimental&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://www.w3.org/TR/SRI/&#34;&gt;SRI&lt;/a&gt; support&lt;/h3&gt; &#xA;&lt;p&gt;Sprockets 3.x adds experimental support for subresource integrity checks. The spec is still evolving and the API may change in backwards incompatible ways.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;javascript_include_tag :application, integrity: true&#xA;# =&amp;gt; &#34;&amp;lt;script src=&#34;/assets/application.js&#34; integrity=&#34;sha256-TvVUHzSfftWg1rcfL6TIJ0XKEGrgLyEq6lEpcmrG9qs=&#34;&amp;gt;&amp;lt;/script&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that sprockets-rails only adds integrity hashes to assets when served in a secure context (over an HTTPS connection or localhost).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Sprockets Rails&lt;/h2&gt; &#xA;&lt;p&gt;Sprockets Rails is work of many contributors. You&#39;re encouraged to submit pull requests, propose features and discuss issues.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets-rails/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;sprockets-rails 3.x will primarily target sprockets 3.x. And future versions will target the corresponding sprockets release line.&lt;/p&gt; &#xA;&lt;p&gt;The minor and patch version will be updated according to &lt;a href=&#34;http://semver.org/&#34;&gt;semver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any new APIs or config options that don&#39;t break compatibility will be in a minor release&lt;/li&gt; &#xA; &lt;li&gt;Any time the sprockets dependency is bumped, there will be a new minor release&lt;/li&gt; &#xA; &lt;li&gt;Simple bug fixes will be patch releases&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Sprockets Rails is released under the &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets-rails/master/MIT-LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://badge.fury.io/rb/sprockets-rails&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/sprockets-rails.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>