<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T02:02:54Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shopify/liquid</title>
    <updated>2022-07-17T02:02:54Z</updated>
    <id>tag:github.com,2022-07-17:/Shopify/liquid</id>
    <link href="https://github.com/Shopify/liquid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Liquid markup language. Safe, customer facing template language for flexible web apps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/Shopify/liquid&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/Shopify/liquid.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/Shopify/liquid&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/Shopify/liquid.svg?branch=master&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Liquid template engine&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/liquid/master/CONTRIBUTING.md&#34;&gt;Contributing guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/liquid/master/History.md&#34;&gt;Version history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shopify.dev/api/liquid&#34;&gt;Liquid documentation from Shopify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/liquid/wiki&#34;&gt;Liquid Wiki at GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://liquidmarkup.org/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Liquid is a template engine which was written with very specific requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It has to have beautiful and simple markup. Template engines which don&#39;t produce good looking markup are no fun to use.&lt;/li&gt; &#xA; &lt;li&gt;It needs to be non evaling and secure. Liquid templates are made so that users can edit them. You don&#39;t want to run code on your server which your users wrote.&lt;/li&gt; &#xA; &lt;li&gt;It has to be stateless. Compile and render steps have to be separate so that the expensive parsing and compiling can be done once and later on you can just render it passing in a hash with local variables and objects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why you should use Liquid&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You want to allow your users to edit the appearance of your application but don&#39;t want them to run &lt;strong&gt;insecure code on your server&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You want to render templates directly from the database.&lt;/li&gt; &#xA; &lt;li&gt;You like smarty (PHP) style template engines.&lt;/li&gt; &#xA; &lt;li&gt;You need a template engine which does HTML just as well as emails.&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t like the markup of your current templating engine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What does it look like?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ul id=&#34;products&#34;&amp;gt;&#xA;  {% for product in products %}&#xA;    &amp;lt;li&amp;gt;&#xA;      &amp;lt;h2&amp;gt;{{ product.name }}&amp;lt;/h2&amp;gt;&#xA;      Only {{ product.price | price }}&#xA;&#xA;      {{ product.description | prettyprint | paragraph }}&#xA;    &amp;lt;/li&amp;gt;&#xA;  {% endfor %}&#xA;&amp;lt;/ul&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use Liquid&lt;/h2&gt; &#xA;&lt;p&gt;Install Liquid by adding &lt;code&gt;gem &#39;liquid&#39;&lt;/code&gt; to your gemfile.&lt;/p&gt; &#xA;&lt;p&gt;Liquid supports a very simple API based around the Liquid::Template class. For standard use you can just pass it the content of a file and call render with a parameters hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@template = Liquid::Template.parse(&#34;hi {{name}}&#34;) # Parses and compiles the template&#xA;@template.render(&#39;name&#39; =&amp;gt; &#39;tobi&#39;)                # =&amp;gt; &#34;hi tobi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error Modes&lt;/h3&gt; &#xA;&lt;p&gt;Setting the error mode of Liquid lets you specify how strictly you want your templates to be interpreted. Normally the parser is very lax and will accept almost anything without error. Unfortunately this can make it very hard to debug and can lead to unexpected behaviour.&lt;/p&gt; &#xA;&lt;p&gt;Liquid also comes with a stricter parser that can be used when editing templates to give better error messages when templates are invalid. You can enable this new parser like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Liquid::Template.error_mode = :strict # Raises a SyntaxError when invalid syntax is used&#xA;Liquid::Template.error_mode = :warn # Adds strict errors to template.errors but continues as normal&#xA;Liquid::Template.error_mode = :lax # The default mode, accepts almost anything.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to set the error mode only on specific templates you can pass &lt;code&gt;:error_mode&lt;/code&gt; as an option to &lt;code&gt;parse&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Liquid::Template.parse(source, error_mode: :strict)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful for doing things like enabling strict mode only in the theme editor.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended that you enable &lt;code&gt;:strict&lt;/code&gt; or &lt;code&gt;:warn&lt;/code&gt; mode on new apps to stop invalid templates from being created. It is also recommended that you use it in the template editors of existing apps to give editors better error messages.&lt;/p&gt; &#xA;&lt;h3&gt;Undefined variables and filters&lt;/h3&gt; &#xA;&lt;p&gt;By default, the renderer doesn&#39;t raise or in any other way notify you if some variables or filters are missing, i.e. not passed to the &lt;code&gt;render&lt;/code&gt; method. You can improve this situation by passing &lt;code&gt;strict_variables: true&lt;/code&gt; and/or &lt;code&gt;strict_filters: true&lt;/code&gt; options to the &lt;code&gt;render&lt;/code&gt; method. When one of these options is set to true, all errors about undefined variables and undefined filters will be stored in &lt;code&gt;errors&lt;/code&gt; array of a &lt;code&gt;Liquid::Template&lt;/code&gt; instance. Here are some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template = Liquid::Template.parse(&#34;{{x}} {{y}} {{z.a}} {{z.b}}&#34;)&#xA;template.render({ &#39;x&#39; =&amp;gt; 1, &#39;z&#39; =&amp;gt; { &#39;a&#39; =&amp;gt; 2 } }, { strict_variables: true })&#xA;#=&amp;gt; &#39;1  2 &#39; # when a variable is undefined, it&#39;s rendered as nil&#xA;template.errors&#xA;#=&amp;gt; [#&amp;lt;Liquid::UndefinedVariable: Liquid error: undefined variable y&amp;gt;, #&amp;lt;Liquid::UndefinedVariable: Liquid error: undefined variable b&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template = Liquid::Template.parse(&#34;{{x | filter1 | upcase}}&#34;)&#xA;template.render({ &#39;x&#39; =&amp;gt; &#39;foo&#39; }, { strict_filters: true })&#xA;#=&amp;gt; &#39;&#39; # when at least one filter in the filter chain is undefined, a whole expression is rendered as nil&#xA;template.errors&#xA;#=&amp;gt; [#&amp;lt;Liquid::UndefinedFilter: Liquid error: undefined filter filter1&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to raise on a first exception instead of pushing all of them in &lt;code&gt;errors&lt;/code&gt;, you can use &lt;code&gt;render!&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template = Liquid::Template.parse(&#34;{{x}} {{y}}&#34;)&#xA;template.render!({ &#39;x&#39; =&amp;gt; 1}, { strict_variables: true })&#xA;#=&amp;gt; Liquid::UndefinedVariable: Liquid error: undefined variable y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage tracking&lt;/h3&gt; &#xA;&lt;p&gt;To help track usages of a feature or code path in production, we have released opt-in usage tracking. To enable this, we provide an empty &lt;code&gt;Liquid:: Usage.increment&lt;/code&gt; method which you can customize to your needs. The feature is well suited to &lt;a href=&#34;https://github.com/Shopify/statsd-instrument&#34;&gt;https://github.com/Shopify/statsd-instrument&lt;/a&gt;. However, the choice of implementation is up to you.&lt;/p&gt; &#xA;&lt;p&gt;Once you have enabled usage tracking, we recommend reporting any events through Github Issues that your system may be logging. It is highly likely this event has been added to consider deprecating or improving code specific to this event, so please raise any concerns.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sorbet/sorbet</title>
    <updated>2022-07-17T02:02:54Z</updated>
    <id>tag:github.com,2022-07-17:/sorbet/sorbet</id>
    <link href="https://github.com/sorbet/sorbet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, powerful type checker designed for Ruby&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Sorbet logo&#34; width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/docs/logo/sorbet-logo-purple-sparkles.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Sorbet&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains Sorbet, a fast, powerful type checker designed for Ruby. It aims to be easy to add to existing codebases with gradual types, and fast to respond with errors and suggestions.&lt;/p&gt; &#xA;&lt;p&gt;This README contains documentation specifically for contributing to Sorbet. You might also want to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://sorbet.org/docs/overview&#34;&gt;public Sorbet docs&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Or even &lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#writing-docs&#34;&gt;edit the docs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Watch the &lt;a href=&#34;https://sorbet.org/en/community#talks&#34;&gt;talks we&#39;ve given&lt;/a&gt; about Sorbet&lt;/li&gt; &#xA; &lt;li&gt;Try the &lt;a href=&#34;https://sorbet.run&#34;&gt;Sorbet playground&lt;/a&gt; online&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are at Stripe, you might also want to see &lt;a href=&#34;http://go/types/internals&#34;&gt;http://go/types/internals&lt;/a&gt; for docs about Stripe-specific development workflows and historical Stripe context.&lt;/p&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#sorbet-user-facing-design-principles&#34;&gt;Sorbet user-facing design principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#learning-how-sorbet-works&#34;&gt;Learning how Sorbet works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#building-sorbet&#34;&gt;Building Sorbet&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#common-compilation-errors&#34;&gt;Common Compilation Errors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#running-sorbet&#34;&gt;Running Sorbet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#running-the-tests&#34;&gt;Running the tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#testing-sorbet-against-pay-server&#34;&gt;Testing Sorbet against pay-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#writing-tests&#34;&gt;Writing tests&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#test_corpus-tests&#34;&gt;test_corpus tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#expectation-tests&#34;&gt;Expectation tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#cli-tests&#34;&gt;CLI tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#lsp-tests&#34;&gt;LSP tests&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#testing-find-definition-and-find-all-references&#34;&gt;Testing &#34;Find Definition&#34; and &#34;Find All References&#34;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#testing-go-to-type-definition&#34;&gt;Testing &#34;Go to Type Definition&#34;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#testing-hover&#34;&gt;Testing hover&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#testing-completion&#34;&gt;Testing completion&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#testing-workspace-symbols-symbol-search&#34;&gt;Testing workspace symbols (symbol search)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#testing-incremental-type-checking&#34;&gt;Testing incremental type checking&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#lsp-recorded-tests&#34;&gt;LSP recorded tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#updating-tests&#34;&gt;Updating tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#writing-docs&#34;&gt;Writing docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#editor-and-environment&#34;&gt;Editor and environment&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#bazel&#34;&gt;Bazel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#multiple-git-worktrees&#34;&gt;Multiple git worktrees&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#shell&#34;&gt;Shell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#formatting-files&#34;&gt;Formatting files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/#editor-setup-for-c&#34;&gt;Editor setup for C++&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Sorbet user-facing design principles&lt;/h2&gt; &#xA;&lt;p&gt;Early in our project, we&#39;ve defined some guidelines for how working with sorbet should feel like.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Explicit&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;We&#39;re willing to write annotations, and in fact see them as beneficial; they make code more readable and predictable. We&#39;re here to help readers as much as writers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Feel useful, not burdensome&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;While it is explicit, we are putting effort into making it concise. This shows in multiple ways:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;error messages should be clear&lt;/li&gt; &#xA;   &lt;li&gt;verbosity should be compensated with more safety&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;As simple as possible, but powerful enough&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Overall, we are not strong believers in super-complex type systems. They have their place, and we need a fair amount of expressive power to model (enough) real Ruby code, but all else being equal we want to be simpler. We believe that such a system scales better, and—most importantly—is easier for our users to learn &amp;amp; understand.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compatible with Ruby&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In particular, we don&#39;t want a new syntax. Existing Ruby syntax means we can leverage most of our existing tooling (editors, etc). Also, the point of Sorbet is to gradually improve an existing Ruby codebase. No new syntax makes it easier to be compatible with existing tools.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scales&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;On all axes: execution speed, number of collaborators, lines of code, codebase age. We work in large Ruby codebases, and they will only get larger.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Can be adopted gradually&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In order to make adoption possible at scale, we cannot require every team or project to adopt Sorbet all at once. Sorbet needs to support teams adopting it at different paces.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the dependencies&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;brew install bazel autoconf coreutils parallel&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone https://github.com/sorbet/sorbet.git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd sorbet&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build Sorbet&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;./bazel build //main:sorbet --config=dbg&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Sorbet!&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bazel-bin/main/sorbet -e &#34;42 + &#39;hello&#39;&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Learning how Sorbet works&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve documented the &lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/docs/internals.md&#34;&gt;internals of Sorbet&lt;/a&gt; in a separate doc. Cross-reference between that doc and here to learn how Sorbet works and how to change it!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/docs/internals.md&#34;&gt;→ internals.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is also a talk online that describes Sorbet&#39;s high-level architecture and the reasons why it&#39;s fast:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sorbet.org/docs/talks/jvm-ls-2019&#34;&gt;→ Fast type checking for Ruby&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building Sorbet&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to build &lt;code&gt;sorbet&lt;/code&gt;. This one is the most common:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bazel build //main:sorbet --config=dbg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build an executable in &lt;code&gt;bazel-bin/main/sorbet&lt;/code&gt; (see &#34;Running Sorbet&#34; below). There are many options you can pass when building &lt;code&gt;sorbet&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--config=dbg&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Most common build config for development.&lt;/li&gt; &#xA;   &lt;li&gt;Good stack traces, runs all ENFORCEs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--config=sanitize&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Link in extra sanitizers, in particular: UBSan and ASan.&lt;/li&gt; &#xA;   &lt;li&gt;Catches most memory and undefined-behavior errors.&lt;/li&gt; &#xA;   &lt;li&gt;Substantially larger and slower binary.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--config=debugsymbols&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Included by &lt;code&gt;--config=dbg&lt;/code&gt;) debugging symbols, and nothing else.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--config=forcedebug&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use more memory, but report even more sanity checks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--config=static-libs&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Forcibly use static linking (Sorbet defaults to dynamic linking for faster build times).&lt;/li&gt; &#xA;   &lt;li&gt;Sorbet already uses this option in release builds (see below).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--config=release-mac&lt;/code&gt; and &lt;code&gt;--config=release-linux&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Exact release configuration that we ship to our users.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Independently of providing or omitting any of the above flags, you can turn on optimizations for any build:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-c opt&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enables &lt;code&gt;clang&lt;/code&gt; optimizations (i.e., &lt;code&gt;-O2&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These args are not mutually exclusive. For example, a common pairing when debugging is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--config=dbg --config=sanitize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In &lt;code&gt;.bazelrc&lt;/code&gt; you can find out what all these options (and others) mean.&lt;/p&gt; &#xA;&lt;h3&gt;Common Compilation Errors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Mac) &lt;code&gt;Xcode version must be specified to use an Apple CROSSTOOL&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This error typically occurs after an Xcode upgrade.&lt;/p&gt; &#xA;&lt;p&gt;Developer tools must be installed, the Xcode license must be accepted, and your active Xcode command line tools directory must point to an installed version of Xcode.&lt;/p&gt; &#xA;&lt;p&gt;The following commands should do the trick:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Install command line tools&#xA;xcode-select --install&#xA;# Ensure that the system finds command line tools in an active Xcode directory&#xA;sudo xcode-select -s /Applications/Xcode.app/Contents/Developer&#xA;# Accept the Xcode license.&#xA;sudo xcodebuild -license&#xA;# Clear bazel&#39;s cache, which may contain files generated from a previous&#xA;# version of Xcode command line tools.&#xA;bazel clean --expunge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Mac) &lt;code&gt;fatal error: &#39;math.h&#39; file not found&lt;/code&gt;&lt;/strong&gt; (or some other system header)&lt;/p&gt; &#xA;&lt;p&gt;This error can happen on Macs when the &lt;code&gt;/usr/include&lt;/code&gt; folder is missing. The solution is to install macOS headers via the following package:&lt;/p&gt; &#xA;&lt;p&gt;macOS Mojave:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;macOS Catalina:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ln -s /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/* /usr/local/include/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Sorbet&lt;/h2&gt; &#xA;&lt;p&gt;Run Sorbet on an expression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel-bin/main/sorbet -e &#34;1 + false&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run Sorbet on a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel-bin/main/sorbet foo.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;bazel-bin/main/sorbet --help&lt;/code&gt; will show lots of options. These are the common ones for contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-p &amp;lt;IR&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Asks sorbet to print out any given intermediate representation.&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;code&gt;--help&lt;/code&gt; for available values of &lt;code&gt;&amp;lt;IR&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--stop-after &amp;lt;phase&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Useful when there&#39;s a bug in a later phase, and you want to quit early to debug.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;-vv&lt;/code&gt;, &lt;code&gt;-vvv&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Show &lt;code&gt;logger&lt;/code&gt; output (increasing verbosity)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max-threads=1&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Useful for determining if you&#39;re dealing with a concurrency bug or not.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--wait-for-dbg&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Will freeze Sorbet on startup and wait for a debugger to attach&lt;/li&gt; &#xA;   &lt;li&gt;This is useful when you don&#39;t have control over launching the process (LSP)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the tests&lt;/h2&gt; &#xA;&lt;p&gt;To run all the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel test //... --config=dbg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The &lt;code&gt;//...&lt;/code&gt; literally means &#34;all targets&#34;.)&lt;/p&gt; &#xA;&lt;p&gt;To run a subset of the tests curated for faster iteration and development speed, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel test test --config=dbg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in bazel terms, the second test is an alias for &lt;code&gt;//test:test&lt;/code&gt;, so we&#39;re being a bit cute here.&lt;/p&gt; &#xA;&lt;p&gt;By default, all test output goes into files. To also print it to the screen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel test //... --config=dbg --test_output=errors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If any test failed, you will see two pieces of information printed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. //test:test_testdata/resolver/optional_constant&#xA;2.   /private/var/tmp/.../test/test_testdata/resolver/optional_constant/test.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;the test&#39;s target (in case you want to run just this test again with &lt;code&gt;bazel test &amp;lt;target&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;a (runnable) file containing the test&#39;s output&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To see the failing output, either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Re-run &lt;code&gt;bazel test&lt;/code&gt; with the &lt;code&gt;--test_output=errors&lt;/code&gt; flag&lt;/li&gt; &#xA; &lt;li&gt;Copy/paste the &lt;code&gt;*.log&lt;/code&gt; file and run it (the output will open in &lt;code&gt;less&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing Sorbet against pay-server&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is specific to contributing to Sorbet at Stripe.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you are at Stripe and want to test your branch against pay-server, see &lt;a href=&#34;http://go/types/local-dev&#34;&gt;http://go/types/local-dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Writing tests&lt;/h2&gt; &#xA;&lt;p&gt;We write tests by adding files to subfolders of the &lt;code&gt;test/&lt;/code&gt; directory. Individual subfolders are &#34;magic&#34;; each contains specific types of tests. We aspire to have our tests be fully reproducible.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;C++ note&lt;/strong&gt;: In C++, hash functions are only required to produce the same result for the same input within a single execution of a program.&lt;/p&gt; &#xA; &lt;p&gt;Thus, we expect all user-visible outputs to be explicitly sorted using a key stable from one run to the next.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are many ways to test Sorbet, some &#34;better&#34; than others. We&#39;ve ordered them below in order from most preferable to least preferable. And we always prefer some tests to no tests!&lt;/p&gt; &#xA;&lt;h3&gt;test_corpus tests&lt;/h3&gt; &#xA;&lt;p&gt;The first kind of test can be called either &lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/test/pipeline_test_runner.cc&#34;&gt;test_corpus&lt;/a&gt; tests or &lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/test/testdata/&#34;&gt;testdata&lt;/a&gt; tests, based on the name of the test harness or the folder containing these tests, respectively.&lt;/p&gt; &#xA;&lt;p&gt;To create a test_corpus test, add any file &lt;code&gt;&amp;lt;name&amp;gt;.rb&lt;/code&gt; to &lt;code&gt;test/testdata&lt;/code&gt;, in any folder depth. The file must either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;type check entirely, or&lt;/li&gt; &#xA; &lt;li&gt;throw errors &lt;strong&gt;only&lt;/strong&gt; on lines marked with a comment (see below).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To mark that a line should have errors, append &lt;code&gt;# error: &amp;lt;message&amp;gt;&lt;/code&gt; (the &lt;code&gt;&amp;lt;message&amp;gt;&lt;/code&gt; must match the raised error message). In case there are multiple errors on this line, add an &lt;code&gt;# error: &amp;lt;message&amp;gt;&lt;/code&gt; on its own line just below.&lt;/p&gt; &#xA;&lt;p&gt;Error checks can optionally point to a range of characters rather than a line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;1 + &#39;&#39; # error: `String` doesn&#39;t match `Integer`&#xA;&#xA;rescue Foo, Bar =&amp;gt; baz&#xA;     # ^^^ error: Unable to resolve constant `Foo`&#xA;          # ^^^ error: Unable to resolve constant `Bar`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run this test with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel test //test:test_PosTests/testdata/path/to/&amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expectation tests&lt;/h3&gt; &#xA;&lt;p&gt;Each test_corpus test can be turned into an expectation test by optionally creating any number of &lt;code&gt;&amp;lt;name&amp;gt;.rb.&amp;lt;phase&amp;gt;.exp&lt;/code&gt; files (where &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; matches the name of the ruby file for this test). These files contain pretty printed representations of internal data structures, according to what would be printed by &lt;code&gt;-p &amp;lt;phase&amp;gt;&lt;/code&gt;. The snapshot must exactly match the output generated by running &lt;code&gt;sorbet -p &amp;lt;phase&amp;gt; &amp;lt;name&amp;gt;.rb&lt;/code&gt; for the test to pass.&lt;/p&gt; &#xA;&lt;p&gt;You can run this test with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel test //test:test_PosTests/testdata/path/to/&amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Files that begin with a prefix and &lt;code&gt;__&lt;/code&gt; will be run together. For example, &lt;code&gt;foo__1.rb&lt;/code&gt; and &lt;code&gt;foo__2.rb&lt;/code&gt; will be run together as test &lt;code&gt;foo&lt;/code&gt;. If such sets of files have &lt;code&gt;*.exp&lt;/code&gt; files associated with them, the &lt;code&gt;*.exp&lt;/code&gt; files must instead follow the pattern &lt;code&gt;&amp;lt;name&amp;gt;.&amp;lt;phase&amp;gt;.exp&lt;/code&gt;, where &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; does not include the &lt;code&gt;__*.rb&lt;/code&gt; suffix. So &lt;code&gt;foo__1.rb&lt;/code&gt; and &lt;code&gt;foo__2.rb&lt;/code&gt; would have an exp file like &lt;code&gt;foo.&amp;lt;pass&amp;gt;.exp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another exception: for &lt;code&gt;package-tree&lt;/code&gt; exp tests, the filename is always &lt;code&gt;pass.package-tree.exp&lt;/code&gt;, no matter the name of the test.&lt;/p&gt; &#xA;&lt;h3&gt;CLI tests&lt;/h3&gt; &#xA;&lt;p&gt;Any folder &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; that is added to &lt;code&gt;test/cli/&lt;/code&gt; becomes a test. This folder should have a file &lt;code&gt;test.sh&lt;/code&gt; that is executable. When run, its output will be compared against &lt;code&gt;test.out&lt;/code&gt; in that folder.&lt;/p&gt; &#xA;&lt;p&gt;Our bazel setup will produce two targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bazel run //test/cli:test_&amp;lt;name&amp;gt;&lt;/code&gt; will execute the &lt;code&gt;.sh&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bazel test //test/cli:test_&amp;lt;name&amp;gt;&lt;/code&gt; will execute the &lt;code&gt;.sh&lt;/code&gt; and check it against what&#39;s in the &lt;code&gt;.out&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The scripts are run inside Bazel, so they will be executed from the top of the workspace and have access to source files and built targets using their path from the root. In particular, the compiled sorbet binary is available under &lt;code&gt;main/sorbet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;LSP tests&lt;/h3&gt; &#xA;&lt;p&gt;Most LSP tests are expectation tests with additional LSP-specific annotations. They are primarily contained in &lt;code&gt;test/testdata/lsp&lt;/code&gt;, but all files in &lt;code&gt;test/testdata&lt;/code&gt; are tested in LSP mode. You can run a test &lt;code&gt;test/testdata/lsp/&amp;lt;name&amp;gt;.rb&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel test //test:test_LSPTests/testdata/lsp/&amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Testing &#34;Find Definition&#34; and &#34;Find All References&#34;&lt;/h4&gt; &#xA;&lt;p&gt;LSP tests have access to &lt;code&gt;def&lt;/code&gt; and &lt;code&gt;usage&lt;/code&gt; assertions that you can use to annotate definition and usage sites for a variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  a = 10&#xA;# ^ def: a&#xA;  b = a + 10&#xA;    # ^ usage: a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With these annotations, the test will check that &#34;Find Definition&#34; from the addition will lead to &lt;code&gt;a = 10&lt;/code&gt;, and that &#34;Find All References&#34; from either location will return both the definition and usage.&lt;/p&gt; &#xA;&lt;p&gt;If a variable is re-defined, it can be annotated with a version number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  a = 10&#xA;# ^ def: a 1&#xA;  a = 20&#xA;# ^ def: a 2&#xA;  b = a + 10&#xA;    # ^ usage: a 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;usage&lt;/code&gt; annotations can accept multiple version numbers, separated by a &lt;code&gt;,&lt;/code&gt;. This is useful if you have variables that get re-defined through multiple-paths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  if some_condition&#xA;    a = 10&#xA;  # ^ def a 1&#xA;  else&#xA;    a = &#39;hello&#39;&#xA;  # ^ def: a 2&#xA;  end&#xA;&#xA;  p a&#xA;  # ^ usage: a 1,2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a location should not report any definition or usage, then use the magic label &lt;code&gt;(nothing)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    a = 10&#xA;# ^ def: (nothing)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a location should report multiple definitions (e.g., a class or module opened in multiple files), then you can add a second &lt;code&gt;def&lt;/code&gt; with the same name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Foo&#xA;  #   ^^^ def: foo&#xA;end&#xA;&#xA;class Foo&#xA;  #   ^^^ def: foo&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When marking definitions that correspond to method arguments that have defaults, multiple definitions will need to be marked: one for the argument definition itself and one for its default value. The default value needs to be given a different version number, and also marked &lt;code&gt;default-arg-value&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def foo(a: 1)&#xA;        # ^ def: a 1&#xA;           # ^ def: a 2 default-arg-value&#xA;    p a&#xA;    # ^ usage: a 1,2&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is due to the translation of defaults into the CFG: there is a synthetic conditional that chooses either to initialize the variable from the argument passed at the send, or to the default value when no value is present.&lt;/p&gt; &#xA;&lt;h4&gt;Testing &#34;Go to Type Definition&#34;&lt;/h4&gt; &#xA;&lt;p&gt;This is somewhat similar to &#34;Find Definition&#34; above, but also slightly different because there&#39;s no analogue of &#34;Find All Type Definitions.&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class A; end&#xA;#     ^ type-def: some-label&#xA;&#xA;aaa = A.new&#xA;# ^ type: some-label&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;type: some-label&lt;/code&gt; assertion says &#34;please simulate a Go to Type Definition here, named &lt;code&gt;some-label&lt;/code&gt;&#34; and the &lt;code&gt;type-def: some-label&lt;/code&gt; assertion says &#34;assert that the results for &lt;code&gt;some-label&lt;/code&gt; are exactly these locations.&#34;&lt;/p&gt; &#xA;&lt;p&gt;That means if the type definition could return multiple locs, the assertions will have to cover all results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class A; end&#xA;#     ^ type-def: AorB&#xA;class B; end&#xA;#     ^ type-def: AorB&#xA;&#xA;aaa = T.let(A.new, T.any(A, B))&#xA;# ^ type: AorB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a location should not report any definition or usage, then use the magic label &lt;code&gt;(nothing)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# typed: false&#xA;class A; end&#xA;aaa = A.new&#xA;# ^ def: (nothing)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Testing hover&lt;/h4&gt; &#xA;&lt;p&gt;LSP tests can also assert the contents of hover responses with &lt;code&gt;hover&lt;/code&gt; assertions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  a = 10&#xA;# ^ hover: Integer(10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a location should report the empty string, use the special label &lt;code&gt;(nothing)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;     a = 10&#xA;# ^ hover: (nothing)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Testing completion&lt;/h4&gt; &#xA;&lt;p&gt;LSP tests can also assert the contents of completion responses with &lt;code&gt;completion&lt;/code&gt; assertions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class A&#xA;  def self.foo_1; end&#xA;  def self.foo_2; end&#xA;&#xA;  foo&#xA;#    ^ completion: foo_1, foo_2&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;^&lt;/code&gt; corresponds to the position of the cursor. So in the above example, it&#39;s as if the cursor is like this: &lt;code&gt;foo│&lt;/code&gt;. If the &lt;code&gt;^&lt;/code&gt; had been directly under the last &lt;code&gt;o&lt;/code&gt;, it would have been like this: &lt;code&gt;fo|o&lt;/code&gt;. Only the first &lt;code&gt;^&lt;/code&gt; is used. If you use &lt;code&gt;^^^&lt;/code&gt; in the assertion, the test harness will send a completion assertion at the position of the first caret.&lt;/p&gt; &#xA;&lt;p&gt;You can also write a test for a partial prefix of the completion results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class A&#xA;  def self.foo_1; end&#xA;  def self.foo_2; end&#xA;&#xA;  foo&#xA;#    ^ completion: foo_1, ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;, ...&lt;/code&gt; suffix to the end of a partial list of completion results, and the test harness will ensure that the listed identifiers match a prefix of the completion items. This prefix must still be listed in order.&lt;/p&gt; &#xA;&lt;p&gt;If a location should report zero completion items, use the special message &lt;code&gt;(nothing)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class A&#xA;  def self.foo_1; end&#xA;  def self.foo_2; end&#xA;&#xA;  zzz&#xA;#    ^ completion: (nothing)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To write a test for the snippet that would be inserted into the document if a particular completion item was selected, you can make two files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# -- test/testdata/lsp/completion/mytest.rb --&#xA;class A&#xA;  def self.foo_1; end&#xA;end&#xA;&#xA;A.foo_&#xA;#     ^ apply-completion: [A] item: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;apply-completion&lt;/code&gt; assertion says &#34;make sure the file &lt;code&gt;mytest.A.rbedited&lt;/code&gt; contains the result of inserting the completion snippet for the 0th completion item into the file.&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# -- test/testdata/lsp/completion/mytest.A.rbedited --&#xA;class A&#xA;  def self.foo_1; end&#xA;end&#xA;&#xA;A.foo_1${0}&#xA;#     ^ apply-completion: [A] item: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, the fancy &lt;code&gt;${...}&lt;/code&gt; (tabstop placeholders) show up verbatim in the output if they were sent in the completion response.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not currently possible to test these parts of a completion response:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;completion kind&lt;/li&gt; &#xA; &lt;li&gt;documentation&lt;/li&gt; &#xA; &lt;li&gt;detail&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For these, your best bet is to test manually in VS Code / your preferred editor and verify that you&#39;re seeing your changes. For documentation specifically, nearly all the code paths are shared with hover, so you can alternatively write a hover test.&lt;/p&gt; &#xA;&lt;h4&gt;Testing workspace symbols (symbol search)&lt;/h4&gt; &#xA;&lt;p&gt;LSP tests can assert that a specific item appears in a symbol search (the &lt;code&gt;textDocument/workspaceSymbols&lt;/code&gt; request) using the &lt;code&gt;symbol-search&lt;/code&gt; assertion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Project::Foo&#xA;#     ^^^ symbol-search: &#34;Foo&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;symbol-search&lt;/code&gt; can optionally specify &lt;em&gt;how&lt;/em&gt; that item should appear in search results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Project::Foo&#xA;#     ^^^ symbol-search: &#34;Foo&#34;, name = &#34;Foo&#34;, container = &#34;Project&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above, &lt;code&gt;container&lt;/code&gt; can also be the special string &lt;code&gt;&#34;(nothing)&#34;&lt;/code&gt; to indicate that the item has no container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;symbol-search&lt;/code&gt; can also specify the item&#39;s relative rank in the ordered search results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Project::Foo&#xA;#     ^^^ symbol-search: &#34;Foo&#34;, rank = 1&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Testing &#34;Go to Implementation&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Testing the &#34;Go to Implementation&#34; feature is really similar to the testing techniques of the &#34;Go to Type Definition&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module A&#xA;#      ^ find-implementation: A&#xA;  extend T::Sig&#xA;  extend T::Helpers&#xA;  interface!&#xA;end&#xA;&#xA; class B&#xA;#^^^^^^^ implementation: A&#xA;  extend T::Sig&#xA;  include A&#xA;#         ^ find-implementation: A&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are two types of assertions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;find-implementation: &amp;lt;symbol&amp;gt;&lt;/code&gt; means make a &#34;Go to Implementation&#34; request here. &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; marks the symbol name we are looking for.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;implementation: &amp;lt;symbol&amp;gt;&lt;/code&gt; marks the location which should be returned for the &#34;Go to Implementation&#34; call for a given &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If the request returns multiple locations, you should mark all of them with &lt;code&gt;implementation: &amp;lt;symbol&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Testing rename constant&lt;/h4&gt; &#xA;&lt;p&gt;To write a test for renaming constants, you need to make at least two files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -- test/testdata/lsp/refactor/mytest.rb --&#xA;&#xA;# typed: true&#xA;# frozen_string_literal: true&#xA;&#xA;class Foo&#xA;  class Foo&#xA;  end&#xA;end&#xA;&#xA;foo = Foo.new&#xA;#     ^ apply-rename: [A] newName: Bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;apply-rename&lt;/code&gt; assertion here says &#34;simulate a user starting a rename from the position of this caret.&#34; You&#39;ll need to add an &lt;code&gt;.rbedited&lt;/code&gt; file that reflects what the result of the changes should look like. In this case, the file would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -- test/testdata/lsp/refactor/mytest.A.rbedited --&#xA;&#xA;# typed: true&#xA;# frozen_string_literal: true&#xA;&#xA;class Bar&#xA;  class Foo&#xA;  end&#xA;end&#xA;&#xA;foo = Bar.new&#xA;#     ^ apply-rename: [A] newName: Bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can test that invalid renames aren&#39;t applied by adding &lt;code&gt;invalid: true&lt;/code&gt; to your test, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -- test/testdata/lsp/refactor/mytest.rb --&#xA;&#xA;# typed: true&#xA;# frozen_string_literal: true&#xA;&#xA;class Foo&#xA;  class Foo&#xA;  end&#xA;end&#xA;&#xA;foo = Foo.new&#xA;#     ^ apply-rename: [A] newName: foo invalid:true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test for a specific error message, add an &lt;code&gt;expectedErrorMessage&lt;/code&gt; argument to the test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# typed: true&#xA;# frozen_string_literal: true&#xA;&#xA;require_relative &#39;./constant__class_definition.rb&#39;&#xA;&#xA;sig { params(foo: Foo::Foo).returns(Foo::Foo) }&#xA;def foo(foo); end&#xA;&#xA;class Baz&#xA;#     ^ apply-rename: [D] newName: Bar invalid: true expectedErrorMessage: Renaming constants defined in .rbi files is not supported; symbol Baz is defined at test/testdata/lsp/rename/constant__rbi_class_reference.rbi&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add more files that reference the constant you&#39;re renaming, just make sure to add a matching &lt;code&gt;.rbedited&lt;/code&gt; file with the same version.&lt;/p&gt; &#xA;&lt;h4&gt;Testing incremental type checking&lt;/h4&gt; &#xA;&lt;p&gt;In LSP mode, Sorbet runs file updates on a &lt;em&gt;fast path&lt;/em&gt; or a &lt;em&gt;slow path&lt;/em&gt;. It checks the structure of the file before and after the update to determine if the change is covered under the fast path. If it is, it performs further processing to determine the set of files that need to be type checked.&lt;/p&gt; &#xA;&lt;p&gt;LSP tests can define file updates in &lt;code&gt;&amp;lt;name&amp;gt;.&amp;lt;version&amp;gt;.rbupdate&lt;/code&gt; files which contain the contents of &lt;code&gt;&amp;lt;name&amp;gt;.rb&lt;/code&gt; after the update occurs. For example, the file &lt;code&gt;foo.1.rbupdate&lt;/code&gt; contains the updated contents of &lt;code&gt;foo.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the test contains multiple files by using a &lt;code&gt;__&lt;/code&gt; suffixed prefix, then all rbupdates with the same version will be applied in the same update. For example, &lt;code&gt;foo__bar.1.rbupdate&lt;/code&gt; and &lt;code&gt;foo__baz.1.rbupdate&lt;/code&gt; will be applied simultaneously to update &lt;code&gt;foo__bar.rb&lt;/code&gt; and &lt;code&gt;foo__baz.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Inside &lt;code&gt;*.rbupdate&lt;/code&gt; files, you can assert that the slow path ran by adding a line with &lt;code&gt;# assert-slow-path: true&lt;/code&gt;. You can assert that the fast path ran on &lt;code&gt;foo__bar.rb&lt;/code&gt; and &lt;code&gt;foo__baz.rb&lt;/code&gt; with &lt;code&gt;#assert-fast-path: foo__bar.rb,foo__baz.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the default behavior when testing multi-file updates (e.g., &lt;code&gt;*__1.1.rbupdate&lt;/code&gt; + &lt;code&gt;*__2.1.rbupdate&lt;/code&gt;) is to include all the files in the file update that is created and sent to the LSP server. When testing changes that assert whether the right files were typechecked on the fast path with &lt;code&gt;assert-fast-path&lt;/code&gt;, you also likely want to declare which files &lt;strong&gt;should not&lt;/strong&gt; be included in the file edit, leaving Sorbet to figure out the subset of files to be typechecked. &lt;strong&gt;But&lt;/strong&gt; regardless of whether a file was included in the update set, you likely want to assert that error occur at certain points inside the file. For this, you can use &lt;code&gt;# exclude-from-file-update: true&lt;/code&gt; inside an &lt;code&gt;rbupdate&lt;/code&gt; file. Note that when using this, the act of adding the &lt;code&gt;exclude-from-file-update&lt;/code&gt; assertion in the &lt;code&gt;rbupdate&lt;/code&gt; will have the effect of shifting all the &lt;code&gt;error&lt;/code&gt; assertions off by one line compared to where the LSP server will be reporting those errors. To work around this, you should leave a spacer line in the previous file, so that the &lt;code&gt;exclude-from-file-update&lt;/code&gt; assertion replaces the spacer line, instead of being inserted into the file as a completely new line. Search for &lt;code&gt;spacer&lt;/code&gt; in some of the &lt;code&gt;fast_path&lt;/code&gt; tests to see an example.&lt;/p&gt; &#xA;&lt;h3&gt;LSP recorded tests&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to record an LSP session and use it as a test. We are attempting to move away from this form of testing, as these tests are hard to update and understand. If at all possible, try to add your test case as a regular LSP test.&lt;/p&gt; &#xA;&lt;p&gt;Any folder &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; that is added to &lt;code&gt;test/lsp/&lt;/code&gt; will become a test. This folder should contain a file named &lt;code&gt;&amp;lt;folderName&amp;gt;.rec&lt;/code&gt; that contains a recorded LSP session.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lines that start with &#34;Read:&#34; will be sent to sorbet as input.&lt;/li&gt; &#xA; &lt;li&gt;Lines that start with &#34;Write:&#34; will be expected from sorbet as output.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Updating tests&lt;/h3&gt; &#xA;&lt;p&gt;Frequently when a test is failing, it&#39;s because something inconsequential changed in the captured output, rather than there being a bug in your code.&lt;/p&gt; &#xA;&lt;p&gt;To recapture the traces, you can run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/scripts/update_exp_files.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will probably want to look through the changes and &lt;code&gt;git checkout&lt;/code&gt; any files with changes that you believe are actually bugs in your code and fix your code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;update_exp_files.sh&lt;/code&gt; updates every snapshot file kind known to Sorbet. This can be slow, depending on what needs to be recompiled and updated. Some faster commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Only update the `*.exp` files in `test/testdata`&#xA;tools/scripts/update_testdata_exp.sh&#xA;&#xA;# Only update the `*.exp` files in `test/testdata/cfg`&#xA;tools/scripts/update_testdata_exp.sh test/testdata/cfg&#xA;&#xA;# Only update a single exp file&#39;s test:&#xA;tools/scripts/update_testdata_exp.sh test/testdata/cfg/next.rb&#xA;&#xA;# Only update the `*.out` files in `test/cli`&#xA;bazel test //test/cli:update&#xA;&#xA;# Update the `*.exp` files in `gems/sorbet/test/hidden-method-finder`&#xA;gems/sorbet/test/hidden-method-finder/update_hidden_methods_exp.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;In general,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to debug a normal build of sorbet? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;lldb bazel-bin/main/sorbet -- &amp;lt;args&amp;gt; ...&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;(Consider using &lt;code&gt;--config=static-libs&lt;/code&gt; for better debug symbols)&lt;/li&gt; &#xA;   &lt;li&gt;If you see weird Python errors on macOS, try &lt;code&gt;PATH=/usr/bin lldb&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;to debug an existing Sorbet process (i.e., LSP) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;launch Sorbet with the &lt;code&gt;--wait-for-dbg&lt;/code&gt; flag&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;lldb -p &amp;lt;pid&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;set breakpoints and then &lt;code&gt;continue&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, it’s good to get in the practice of fixing bugs by first adding an &lt;code&gt;ENFORCE&lt;/code&gt; (assertion) that would have caught the bug before actually fixing the bug. It’s far easier to fix bugs when there’s a nice error message stating what invariant you’ve violated. &lt;code&gt;ENFORCE&lt;/code&gt;s are free in the release build.&lt;/p&gt; &#xA;&lt;h2&gt;Writing docs&lt;/h2&gt; &#xA;&lt;p&gt;The sources for Sorbet&#39;s documentation website live in the &lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/website/&#34;&gt;&lt;code&gt;website/&lt;/code&gt;&lt;/a&gt; folder. Specifically, the docs live in &lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/website/docs/&#34;&gt;&lt;code&gt;website/docs/&lt;/code&gt;&lt;/a&gt;, are all authored with Markdown, and are built using &lt;a href=&#34;https://docusaurus.io/&#34;&gt;Docusaurus&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet/master/website/README.md&#34;&gt;→ website/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;^ See here for how to work with the documentation site locally.&lt;/p&gt; &#xA;&lt;h2&gt;Editor and environment&lt;/h2&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;Bazel supports having a persistent cache of previous build results so that rebuilds for the same input files are fast. To enable this feature, run these commands to create a &lt;code&gt;./.bazelrc.local&lt;/code&gt; and cache folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# The .bazelrc.local will live in the sorbet repo so it doesn&#39;t interfere with&#xA;# other bazel-based repos you have.&#xA;echo &#34;build  --disk_cache=$HOME/.cache/sorbet/bazel-cache&#34; &amp;gt;&amp;gt; ./.bazelrc.local&#xA;echo &#34;test   --disk_cache=$HOME/.cache/sorbet/bazel-cache&#34; &amp;gt;&amp;gt; ./.bazelrc.local&#xA;mkdir -p &#34;$HOME/.cache/sorbet/bazel-cache&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple git worktrees&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it can be nice to have &lt;a href=&#34;https://git-scm.com/docs/git-worktree&#34;&gt;multiple working trees&lt;/a&gt; in Git. This allows you to have multiple active checkouts Sorbet, sharing the same &lt;code&gt;.git/&lt;/code&gt; folder. To set up a new worktree with Sorbet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tools/scripts/make_worktree.sh &amp;lt;worktree_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell&lt;/h3&gt; &#xA;&lt;p&gt;Many of the build commands are very long. You might consider shortening the common ones with shell aliases of your choice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# mnemonic: &#39;s&#39; for sorbet&#xA;alias sb=&#34;bazel build //main:sorbet --config=dbg&#34;&#xA;alias st=&#34;bazel test //... --config=dbg --test_output=errors&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Formatting files&lt;/h3&gt; &#xA;&lt;p&gt;We ensure that C++ files are formatted with &lt;code&gt;clang-format&lt;/code&gt; and that Bazel BUILD files are formatted with &lt;code&gt;buildifier&lt;/code&gt;. To avoid inconsistencies between different versions of these tools, we have scripts which download and run these tools through &lt;code&gt;bazel&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/scripts/format_cxx.sh&#xA;tools/scripts/format_build_files.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CI will fail if there are any unformatted files, so you might want to set up your files to be formatted automatically with one of these options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set up a pre-commit / pre-push hook which runs these scripts.&lt;/li&gt; &#xA; &lt;li&gt;Set up your editor to run these scripts. See below.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Editor setup for C++&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;clang&lt;/code&gt; suite of tools has a pretty great story around editor tooling: you can build a &lt;code&gt;compile_commands.json&lt;/code&gt; using Clang&#39;s &lt;a href=&#34;https://clang.llvm.org/docs/JSONCompilationDatabase.html&#34;&gt;Compilation Database&lt;/a&gt; format.&lt;/p&gt; &#xA;&lt;p&gt;Many clang-based tools consume this file to provide language-aware features in, for example, editor integrations.&lt;/p&gt; &#xA;&lt;p&gt;To build a &lt;code&gt;compile_commands.json&lt;/code&gt; file for Sorbet with bazel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tools/scripts/build_compilation_db.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds a &lt;code&gt;./compile_commands.json&lt;/code&gt; file (that is gitignored). This file hard-codes some paths into the Bazel sandbox. These files can get stale, especially when they&#39;re generated by Bazel &lt;code&gt;genrule&lt;/code&gt;&#39;s. In particular, the &lt;code&gt;./compile_commands.json&lt;/code&gt; references files in Bazel&#39;s &lt;code&gt;opt&lt;/code&gt; configuration (e.g., whatever was last built with &lt;code&gt;-c opt&lt;/code&gt; / &lt;code&gt;--compilation_mode=opt&lt;/code&gt;). If you&#39;re seeing stale errors, consider running a command like &lt;code&gt;./bazel build //main:sorbet -c opt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You are encouraged to play around with various clang-based tools which use the &lt;code&gt;compile_commands.json&lt;/code&gt; database. Some suggestions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;rtags&lt;/a&gt; -- Clang aware jump-to-definition / find references / etc.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install rtags&#xA;&#xA;# Have the rtags daemon be automatically launched by macOS on demand&#xA;brew services start rtags&#xA;&#xA;# cd into sorbet&#xA;# ensure that ./compile_commands.json exists&#xA;&#xA;# Tell rtags to index sorbet using our compile_commands.json file&#xA;rc -J .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There are rtags editor plugins for most text editors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://clang.llvm.org/extra/clangd.html&#34;&gt;clangd&lt;/a&gt; -- Clang-based language server implementation&lt;/p&gt; &lt;p&gt;&lt;code&gt;clangd&lt;/code&gt; supports more features than &lt;code&gt;rtags&lt;/code&gt; (specifically, reporting Diagnostics), but can be somewhat slower at times because it does not pre-index all your code like rtags does.&lt;/p&gt; &lt;p&gt;After successfully compiling Sorbet, point your editor to use the &lt;code&gt;clangd&lt;/code&gt; executable located in &lt;code&gt;bazel-sorbet/external/llvm_toolchain_12_0_0/bin/clangd&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;clang-format&lt;/a&gt; -- Clang-based source code formatter&lt;/p&gt; &lt;p&gt;We build &lt;code&gt;clang-format&lt;/code&gt; in Bazel to ensure that everyone uses the same version. Here&#39;s how you can get &lt;code&gt;clang-format&lt;/code&gt; out of Bazel to use it in your editor:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Build clang-format with bazel&#xA;./bazel build //tools:clang-format&#xA;&#xA;# Once bazel runs again, this symlink to clang-format will go away.&#xA;# We need to copy it out of bazel so our editor can use it:&#xA;mkdir -p &#34;$HOME/bin&#34;&#xA;cp bazel-bin/tools/clang-format $HOME/bin&#xA;&#xA;# (Be sure that $HOME/bin is on your PATH, or use a path that is)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With &lt;code&gt;clang-format&lt;/code&gt; on your path, you should be able to find an editor plugin that uses it to format your code on save.&lt;/p&gt; &lt;p&gt;Note: our format script passes some extra options to &lt;code&gt;clang-format&lt;/code&gt;. Configure your editor to pass these options along to &lt;code&gt;clang-format&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-style=file -assume-filename=&amp;lt;CURRENT_FILE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/clion/&#34;&gt;CLion&lt;/a&gt; -- JetBrains C/C++ IDE&lt;/p&gt; &lt;p&gt;CLion can be made aware of the &lt;code&gt;compile_commands.json&lt;/code&gt; database. Replaces your entire text editing workflow (full-fledged IDE).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd&#34;&gt;vscode-clangd&lt;/a&gt; -- Clangd extension for VS Code&lt;/p&gt; &lt;p&gt;This extension integrates clangd (see above) with VS Code. It will also run &lt;code&gt;clang-format&lt;/code&gt; whenever you save. &lt;strong&gt;Note: Microsoft&#39;s C/C++ extension does &lt;em&gt;not&lt;/em&gt; work properly with Sorbet&#39;s &lt;code&gt;compile_commands.json&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The settings for this repository automatically configure vscode-clangd to run the clangd executable in the &lt;code&gt;bazel-sorbet&lt;/code&gt; directory. Note that you will need to compile Sorbet once before it will work.&lt;/p&gt; &lt;p&gt;clangd operates on &lt;code&gt;compile_commands.json&lt;/code&gt;, so make sure you run the &lt;code&gt;./tools/scripts/build_compilation_db.sh&lt;/code&gt; script.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some sample config setups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jez/dotfiles/raw/dafe23c95fd908719bf477f189335bd1451bd8a7/vim/plug-settings.vim#L649-L676&#34;&gt;rtags (vim-rtags)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jez/dotfiles/raw/dafe23c95fd908719bf477f189335bd1451bd8a7/vim/plug-settings.vim#L288-L303&#34;&gt;clangd + clang-format (ALE)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/elliottt/vim-config/raw/35f328765528f6b322fb7d5a03fb3edd81067805/coc-settings.json#L3-L15&#34;&gt;clangd + clang-format (coc.nvim)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>solidusio/solidus</title>
    <updated>2022-07-17T02:02:54Z</updated>
    <id>tag:github.com,2022-07-17:/solidusio/solidus</id>
    <link href="https://github.com/solidusio/solidus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛒Solidus, Rails eCommerce System&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;250&#34; src=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/logo.svg?sanitize=true&#34; alt=&#34;Solidus logo&#34;&gt; &#xA;&lt;h1&gt;Solidus&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/solidusio/solidus/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/solidusio/solidus/tree/master.svg?style=shield&#34; alt=&#34;Circle CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/solidus&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/solidus.svg?sanitize=true&#34; alt=&#34;Gem&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/LICENSE.md&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-BSD-yellowgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;&lt;img src=&#34;https://opencollective.com/solidus/tiers/supporter/badge.svg?label=Supporters&amp;amp;color=brightgree&#34; alt=&#34;Supporters on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;&lt;img src=&#34;https://opencollective.com/solidus/tiers/bronze/badge.svg?label=Bronze%C2%A0Partners&amp;amp;color=brightgree&#34; alt=&#34;Bronze Partners on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;&lt;img src=&#34;https://opencollective.com/solidus/tiers/silver/badge.svg?label=Silver%C2%A0Partners&amp;amp;color=brightgree&#34; alt=&#34;Silver Partners on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;&lt;img src=&#34;https://opencollective.com/solidus/tiers/gold/badge.svg?label=Gold%C2%A0Partners&amp;amp;color=brightgree&#34; alt=&#34;Gold Partners on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/solidusio/solidus&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/solidusio/solidus/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://slack.solidus.io&#34;&gt;&lt;img src=&#34;http://slack.solidus.io/badge.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A free, open-source ecommerce platform that gives you complete control over your store.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visit our website&lt;/strong&gt;: &lt;a href=&#34;https://solidus.io/&#34;&gt;https://solidus.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read our Community Guidelines&lt;/strong&gt;: &lt;a href=&#34;https://solidus.io/community-guidelines/&#34;&gt;https://solidus.io/community-guidelines/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read our guides&lt;/strong&gt;: &lt;a href=&#34;https://guides.solidus.io/developers/&#34;&gt;https://guides.solidus.io/developers/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Join our Slack&lt;/strong&gt;: &lt;a href=&#34;http://slack.solidus.io/&#34;&gt;http://slack.solidus.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Solidus Security&lt;/strong&gt;: &lt;a href=&#34;https://groups.google.com/forum/#!forum/solidus-security&#34;&gt;mailing list&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#supporting-solidus&#34;&gt;Supporting Solidus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#installation-options&#34;&gt;Installation Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#developing-solidus&#34;&gt;Developing Solidus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supporting Solidus&lt;/h2&gt; &#xA;&lt;p&gt;As a community-driven project, Solidus relies on funds and time donated by developers and stakeholders who use Solidus for their businesses. If you&#39;d like to help Solidus keep growing, please consider:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;Become a backer or sponsor on Open Collective&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/raw/master/CONTRIBUTING.md&#34;&gt;Contribute to the project&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Main Contributor &amp;amp; Director&lt;/h3&gt; &#xA;&lt;p&gt;At present, Nebulab is the main code contributor and director of Solidus, providing technical guidance and coordinating community efforts and activities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nebulab.com/&#34;&gt;&lt;img src=&#34;https://nebulab.com/assets/img/logo-nebulab_gh-dark-light-mode.svg?sanitize=true&#34; alt=&#34;Nebulab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Ambassadors&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a Solidus Ambassador. Your logo will show up here with a link to your website. &lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;Become an Ambassador&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://supergood.software/&#34;&gt;&lt;img src=&#34;https://images.opencollective.com/supergoodsoft/f720462/logo/100.png&#34; alt=&#34;Super Good Software&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://karmacreative.io/&#34;&gt;&lt;img src=&#34;https://images.opencollective.com/proxy/images?src=https%3A%2F%2Fopencollective-production.s3-us-west-1.amazonaws.com%2Fab94d2a0-7253-11e9-a366-37673cc38cee.png&amp;amp;height=100&#34; alt=&#34;Karma Creative&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.moddedeuros.com&#34;&gt;&lt;img src=&#34;https://images.opencollective.com/proxy/images?src=https%3A%2F%2Fimages.opencollective.com%2Fmodded-euros%2Ff1a80ae%2Flogo.png&amp;amp;height=100&#34; alt=&#34;ModdedEuros&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;Solidus is a complete open source ecommerce solution built with Ruby on Rails. It is a fork of &lt;a href=&#34;https://spreecommerce.org&#34;&gt;Spree&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://docs.solidus.io&#34;&gt;Solidus class documentation&lt;/a&gt; and the &lt;a href=&#34;https://guides.solidus.io&#34;&gt;Solidus Guides&lt;/a&gt; for information about the functionality that Solidus provides.&lt;/p&gt; &#xA;&lt;p&gt;Solidus consists of several gems. When you require the &lt;code&gt;solidus&lt;/code&gt; gem in your &lt;code&gt;Gemfile&lt;/code&gt;, Bundler will install all of the gems maintained in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/api&#34;&gt;&lt;code&gt;solidus_api&lt;/code&gt;&lt;/a&gt; (RESTful API)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/frontend&#34;&gt;&lt;code&gt;solidus_frontend&lt;/code&gt;&lt;/a&gt; (Cart and storefront)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/backend&#34;&gt;&lt;code&gt;solidus_backend&lt;/code&gt;&lt;/a&gt; (Admin area)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/core&#34;&gt;&lt;code&gt;solidus_core&lt;/code&gt;&lt;/a&gt; (Essential models, mailers, and classes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/sample&#34;&gt;&lt;code&gt;solidus_sample&lt;/code&gt;&lt;/a&gt; (Sample data)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of the gems are designed to work together to provide a fully functional ecommerce platform. However, you may only want to use the &lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/core&#34;&gt;&lt;code&gt;solidus_core&lt;/code&gt;&lt;/a&gt; gem combine it with your own custom frontend, admin interface, and API.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;You can try the live Solidus demo &lt;a href=&#34;http://demo.solidus.io/&#34;&gt;here.&lt;/a&gt; The admin section can be accessed &lt;a href=&#34;http://demo.solidus.io/admin&#34;&gt;here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also try out Solidus with one-click on Heroku:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/solidusio/solidus-example-app&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can use Docker to run a demo on your local machine. Run the following command to download the image and run it at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -p 3000:3000 solidusio/solidus-demo:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The admin interface can be accessed at &lt;a href=&#34;http://localhost:3000/admin/&#34;&gt;http://localhost:3000/admin/&lt;/a&gt;, the default credentials are &lt;code&gt;admin@example.com&lt;/code&gt; and &lt;code&gt;test123&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Begin by making sure you have &lt;a href=&#34;http://imagemagick.org/script/download.php&#34;&gt;Imagemagick&lt;/a&gt; installed, which is required for Paperclip. (You can install it using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; if you&#39;re on a Mac.)&lt;/p&gt; &#xA;&lt;p&gt;To add Solidus, begin with a Rails 5.2, 6 or 6.1 application and a database configured and created.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Solidus&lt;/h3&gt; &#xA;&lt;p&gt;In your application&#39;s root folder run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle add solidus&#xA;bin/rails g solidus:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And follow the prompt&#39;s instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing Solidus Store&lt;/h3&gt; &#xA;&lt;p&gt;Start the Rails server with the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/frontend&#34;&gt;&lt;code&gt;solidus_frontend&lt;/code&gt;&lt;/a&gt; storefront will be accessible at &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; and the admin can be found at &lt;a href=&#34;http://localhost:3000/admin/&#34;&gt;http://localhost:3000/admin/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For information on how to customize your store, check out the &lt;a href=&#34;https://guides.solidus.io/developers/customizations/overview.html&#34;&gt;customization guides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Default Username/Password&lt;/h3&gt; &#xA;&lt;p&gt;As part of running the above installation steps, you will be asked to set an admin email/password combination. The default values are &lt;code&gt;admin@example.com&lt;/code&gt; and &lt;code&gt;test123&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;h3&gt;Questions?&lt;/h3&gt; &#xA;&lt;p&gt;The best way to ask questions is to &lt;a href=&#34;http://slack.solidus.io/&#34;&gt;join the Solidus Slack&lt;/a&gt; and join the &lt;a href=&#34;https://solidusio.slack.com/messages/support/details/&#34;&gt;#support channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation options&lt;/h2&gt; &#xA;&lt;p&gt;Instead of a stable build, if you want to use the bleeding edge version of Solidus, use this line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;solidus&#39;, github: &#39;solidusio/solidus&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: The master branch is not guaranteed to ever be in a fully functioning state. It is too risky to use this branch in production.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, the installation generator (&lt;code&gt;solidus:install&lt;/code&gt;) will run migrations as well as adding seed and sample data. This can be disabled using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g solidus:install --migrate=false --sample=false --seed=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can always perform any of these steps later by using these commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails railties:install:migrations&#xA;bin/rails db:migrate&#xA;bin/rails db:seed&#xA;bin/rails spree_sample:load&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also options and rake tasks provided by &lt;a href=&#34;https://github.com/solidusio/solidus_auth_devise&#34;&gt;solidus_auth_devise&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;You may notice that your Solidus store runs slowly in development mode. This can be because in development each CSS and JavaScript is loaded as a separate include. This can be disabled by adding the following to &lt;code&gt;config/environments/development.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.assets.debug = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Turbolinks&lt;/h3&gt; &#xA;&lt;p&gt;To gain some extra speed you may enable Turbolinks inside of Solidus admin.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#39;turbolinks&#39;, &#39;~&amp;gt; 5.0.0&#39;&lt;/code&gt; into your &lt;code&gt;Gemfile&lt;/code&gt; (if not already present) and change &lt;code&gt;vendor/assets/javascripts/spree/backend/all.js&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require turbolinks&#xA;//&#xA;// ... current file content&#xA;//&#xA;//= require spree/backend/turbolinks-integration.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; Please be aware that Turbolinks can break extensions and/or customizations to the Solidus admin. Use at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;Developing Solidus&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the Git repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git://github.com/solidusio/solidus.git&#xA;cd solidus&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Without Docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the gem dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: If you&#39;re using PostgreSQL or MySQL, you&#39;ll need to install those gems through the DB environment variable.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# PostgreSQL&#xA;export DB=postgresql&#xA;bin/setup&#xA;&#xA;# MySQL&#xA;export DB=mysql&#xA;bin/setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;With Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait for all the gems to be installed (progress can be checked through &lt;code&gt;docker-compose logs -f app&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can provide the ruby version you want your image to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build --build-arg RUBY_VERSION=2.7 app&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rails version can be customized at runtime through &lt;code&gt;RAILS_VERSION&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RAILS_VERSION=&#39;~&amp;gt; 5.0&#39; docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# sqlite&#xA;docker-compose exec app bin/rspec&#xA;# postgres&#xA;docker-compose exec app env DB=postgres bin/rspec&#xA;# mysql&#xA;docker-compose exec app env DB=mysql bin/rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing the databases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# sqlite&#xA;docker-compose exec app sqlite3 /path/to/db&#xA;# postgres&#xA;docker-compose exec app env PGPASSWORD=password psql -U root -h postgres&#xA;# mysql&#xA;docker-compose exec app mysql -u root -h mysql -ppassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to be able to access the &lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#sandbox&#34;&gt;sandbox application&lt;/a&gt;, just make sure to provide the appropriate &lt;code&gt;--binding&lt;/code&gt; option to &lt;code&gt;rails server&lt;/code&gt;. By default, port &lt;code&gt;3000&lt;/code&gt; is exposed, but you can change it through &lt;code&gt;SANDBOX_PORT&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SANDBOX_PORT=4000 docker-compose up -d&#xA;docker-compose exec app bin/sandbox&#xA;docker-compose exec app bin/rails server --binding 0.0.0.0 --port 4000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sandbox&lt;/h3&gt; &#xA;&lt;p&gt;Solidus is meant to be run within the context of Rails application. You can easily create a sandbox application inside of your cloned source directory for testing purposes.&lt;/p&gt; &#xA;&lt;p&gt;This sandbox includes solidus_auth_devise and generates with seed and sample data already loaded.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the sandbox application&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can create a sandbox with PostgreSQL or MySQL by setting the DB environment variable.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# PostgreSQL&#xA;export DB=postgresql&#xA;bin/sandbox&#xA;&#xA;# MySQL&#xA;export DB=mysql&#xA;bin/sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need to create a Rails 5.2 application for your sandbox, for example if you are still using Ruby 2.4 which is not supported by Rails 6, you can use the &lt;code&gt;RAILS_VERSION&lt;/code&gt; environment variable.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  export RAILS_VERSION=&#39;~&amp;gt; 5.2.0&#39;&#xA;  bin/setup&#xA;  bin/sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the server (&lt;code&gt;bin/rails&lt;/code&gt; will forward any argument to the sandbox)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Solidus uses &lt;a href=&#34;http://rspec.info&#34;&gt;RSpec&lt;/a&gt; for tests. Refer to its documentation for more information about the testing library.&lt;/p&gt; &#xA;&lt;h4&gt;CircleCI&lt;/h4&gt; &#xA;&lt;p&gt;We use CircleCI to run the tests for Solidus as well as all incoming pull requests. All pull requests must pass to be merged.&lt;/p&gt; &#xA;&lt;p&gt;You can see the build statuses at &lt;a href=&#34;https://circleci.com/gh/solidusio/solidus&#34;&gt;https://circleci.com/gh/solidusio/solidus&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Run all tests&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chromedriver.chromium.org/downloads&#34;&gt;ChromeDriver&lt;/a&gt; is required to run the frontend and backend test suites.&lt;/p&gt; &#xA;&lt;p&gt;To execute all of the test specs, run the &lt;code&gt;bin/build&lt;/code&gt; script at the root of the Solidus project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;createuser --superuser --echo postgres # only the first time&#xA;bin/build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;bin/build&lt;/code&gt; script runs using PostgreSQL by default, but it can be overridden by setting the DB environment variable to &lt;code&gt;DB=sqlite&lt;/code&gt; or &lt;code&gt;DB=mysql&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env DB=mysql bin/build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the command fails with MySQL related errors you can try creating a user with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Creates a user with the same name as the current user and no restrictions.&#xA;mysql --user=&#34;root&#34; --execute=&#34;CREATE USER &#39;$USER&#39;@&#39;localhost&#39;; GRANT ALL PRIVILEGES ON * . * TO &#39;$USER&#39;@&#39;localhost&#39;;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run an individual test suite&lt;/h4&gt; &#xA;&lt;p&gt;Each gem contains its own series of tests. To run the tests for the core project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd core&#xA;bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;rspec&lt;/code&gt; runs the tests for SQLite 3. If you would like to run specs against another database you may specify the database in the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env DB=postgresql bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Code coverage reports&lt;/h4&gt; &#xA;&lt;p&gt;If you want to run the &lt;a href=&#34;https://github.com/colszowka/simplecov&#34;&gt;SimpleCov&lt;/a&gt; code coverage report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;COVERAGE=true bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;In addition to core functionality provided in Solidus, there are a number of ways to add features to your store that are not (or not yet) part of the core project.&lt;/p&gt; &#xA;&lt;p&gt;A list can be found at &lt;a href=&#34;http://extensions.solidus.io/&#34;&gt;extensions.solidus.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to write an extension for Solidus, you can use the &lt;a href=&#34;https://github.com/solidusio/solidus_dev_support.git&#34;&gt;solidus_dev_support&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Solidus is an open source project and we encourage contributions. Please read &lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before contributing.&lt;/p&gt;</summary>
  </entry>
</feed>