<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:51:03Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lewagon/setup</title>
    <updated>2022-09-18T01:51:03Z</updated>
    <id>tag:github.com,2022-09-18:/lewagon/setup</id>
    <link href="https://github.com/lewagon/setup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Setup instructions for Le Wagon&#39;s students on their first day of Web Development Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;In Chinese?&lt;/h2&gt; &#xA;&lt;p&gt;如果你在参加中文课程，请打开&lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/README.cn.md&#34;&gt;中文设置指南&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;¿En Español?&lt;/h2&gt; &#xA;&lt;p&gt;Haga clic en &lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/README.es.md&#34;&gt;este enlace&lt;/a&gt; para acceder a la versión en español de la configuración.&lt;/p&gt; &#xA;&lt;h2&gt;En Français ?&lt;/h2&gt; &#xA;&lt;p&gt;Clique sur &lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/README.fr.md&#34;&gt;ce lien&lt;/a&gt; pour accéder à la version française du setup.&lt;/p&gt; &#xA;&lt;h2&gt;In English&lt;/h2&gt; &#xA;&lt;p&gt;Setup guides for &lt;a href=&#34;https://www.lewagon.com&#34;&gt;Le Wagon&lt;/a&gt; Web Development course. Please choose your operating system (OS):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/macos.md&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lewagon/setup/master/images/apple_logo.png&#34; alt=&#34;macOS&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/windows.md&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lewagon/setup/master/images/windows_logo.png&#34; alt=&#34;Windows&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/ubuntu.md&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lewagon/setup/master/images/linux_logo.png&#34; alt=&#34;Ubuntu&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/project-template-react-rails-api</title>
    <updated>2022-09-18T01:51:03Z</updated>
    <id>tag:github.com,2022-09-18:/learn-co-curriculum/project-template-react-rails-api</id>
    <link href="https://github.com/learn-co-curriculum/project-template-react-rails-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Project Template: React/Rails API&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This project is scaffolded so that you can build a React frontend and Rails backend together, and easily deploy them to Heroku.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 2.7.4&lt;/li&gt; &#xA; &lt;li&gt;NodeJS (v16), and npm&lt;/li&gt; &#xA; &lt;li&gt;Heroku CLI&lt;/li&gt; &#xA; &lt;li&gt;Postgresql&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See Environment Setup below for instructions on installing these tools if you don&#39;t already have them.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Start by &lt;strong&gt;cloning&lt;/strong&gt; (not forking) the project template repository and removing the remote:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone git@github.com:learn-co-curriculum/project-template-react-rails-api.git your-project-name&#xA;$ cd your-project-name&#xA;$ git remote rm origin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, &lt;a href=&#34;https://docs.github.com/en/github/importing-your-projects-to-github/importing-source-code-to-github/adding-an-existing-project-to-github-using-the-command-line#adding-a-project-to-github-without-github-cli&#34;&gt;create a new remote repository&lt;/a&gt; on GitHub. Head to &lt;a href=&#34;https://github.com&#34;&gt;github.com&lt;/a&gt; and click the &lt;strong&gt;+&lt;/strong&gt; icon in the top-right corner and follow the steps to create a new repository. &lt;strong&gt;Important&lt;/strong&gt;: don&#39;t check any of the options such as &#39;Add a README file&#39;, &#39;Add a .gitignore file&#39;, etc — since you&#39;re importing an existing repository, creating any of those files on GitHub will cause issues.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re working with a partner, &lt;a href=&#34;https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-user-account/managing-access-to-your-personal-repositories/inviting-collaborators-to-a-personal-repository&#34;&gt;add them as a collaborator&lt;/a&gt; on GitHub. From your repo on GitHub, go to Settings &amp;gt; Manage Access &amp;gt; Invite a collaborator and enter your partner&#39;s username. Once your partner has access, they should git &lt;strong&gt;clone&lt;/strong&gt; (not fork) the repository.&lt;/p&gt; &#xA;&lt;p&gt;Finally, connect the GitHub remote repository to your local repository and push up your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git remote add origin git@github.com:your-username/your-project-name.git&#xA;$ git push -u origin main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you&#39;re ready to start building your project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle install&#xA;rails db:create&#xA;npm install --prefix client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the following commands to run the application:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rails s&lt;/code&gt;: run the backend on &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm start --prefix client&lt;/code&gt;: run the frontend on &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure to also update this README to include documentation about your project. Here&#39;s a list of some &lt;a href=&#34;https://github.com/matiassingers/awesome-readme&#34;&gt;awesome readmes&lt;/a&gt; for inspiration.&lt;/p&gt; &#xA;&lt;h2&gt;Deploying&lt;/h2&gt; &#xA;&lt;p&gt;This application has all the starter code needed to help you deploy your application to Heroku. It&#39;s recommended to deploy your project early and push up changes often to ensure that your code works equally well in production and development environments.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve already set up your environment to deploy to Heroku, you can run the commands below to deploy your application. If not, make sure to check out the Environment Setup section below.&lt;/p&gt; &#xA;&lt;p&gt;To deploy, first log in to your Heroku account using the Heroku CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;heroku login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the new Heroku app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;heroku create my-app-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the buildpacks for Heroku to build the React app on Node and run the Rails app on Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;heroku buildpacks:add heroku/nodejs --index 1&#xA;heroku buildpacks:add heroku/ruby --index 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To deploy, commit your code and push the changes to Heroku:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add .&#xA;git commit -m &#39;Commit message&#39;&#xA;git push heroku main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: depending on your Git configuration, your default branch might be named &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt;. You can verify which by running &lt;code&gt;git branch --show-current&lt;/code&gt;. If it&#39;s &lt;code&gt;master&lt;/code&gt;, you&#39;ll need to run &lt;code&gt;git push heroku master&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Any time you have changes to deploy, just make sure your changes are committed on the main branch of your repo, and push those changes to Heroku to deploy them.&lt;/p&gt; &#xA;&lt;p&gt;You can view your deployed app with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;heroku open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Install the Latest Ruby Version&lt;/h3&gt; &#xA;&lt;p&gt;Verify which version of Ruby you&#39;re running by entering this in the terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ruby -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that the Ruby version you&#39;re running is listed in the &lt;a href=&#34;https://devcenter.heroku.com/articles/ruby-support#supported-runtimes&#34;&gt;supported runtimes&lt;/a&gt; by Heroku. At the time of writing, supported versions are 2.6.8, 2.7.4, or 3.0.2. Our recommendation is 2.7.4, but make sure to check the site for the latest supported versions.&lt;/p&gt; &#xA;&lt;p&gt;If it&#39;s not, you can use &lt;code&gt;rvm&lt;/code&gt; to install a newer version of Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rvm install 2.7.4 --default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should also install the latest versions of &lt;code&gt;bundler&lt;/code&gt; and &lt;code&gt;rails&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install bundler&#xA;gem install rails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install NodeJS&lt;/h3&gt; &#xA;&lt;p&gt;Verify you are running a recent version of Node with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;node -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your Node version is not 16.x.x, install it and set it as the current and default version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install 16&#xA;nvm use 16&#xA;nvm alias default 16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also update your npm version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i -g npm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sign Up for a &lt;a href=&#34;https://signup.heroku.com/devcenter&#34;&gt;Heroku Account&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can sign up at for a free account at &lt;a href=&#34;https://signup.heroku.com/devcenter&#34;&gt;https://signup.heroku.com/devcenter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Download the &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli#download-and-install&#34;&gt;Heroku CLI&lt;/a&gt; Application&lt;/h3&gt; &#xA;&lt;p&gt;Download the Heroku CLI. For OSX users, you can use Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew tap heroku/brew &amp;amp;&amp;amp; brew install heroku&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For WSL users, run this command in the Ubuntu terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl https://cli-assets.heroku.com/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run into issues installing, check out the &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli#download-and-install&#34;&gt;Heroku CLI&lt;/a&gt; downloads page for more options.&lt;/p&gt; &#xA;&lt;p&gt;After downloading, you can login via the CLI in the terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;heroku login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will open a browser window to log you into your Heroku account. After logging in, close the browser window and return to the terminal. You can run &lt;code&gt;heroku whoami&lt;/code&gt; in the terminal to verify that you have logged in successfully.&lt;/p&gt; &#xA;&lt;h3&gt;Install Postgresql&lt;/h3&gt; &#xA;&lt;p&gt;Heroku requires that you use PostgreSQL for your database instead of SQLite. PostgreSQL (or just Postgres for short) is an advanced database management system with more features than SQLite. If you don&#39;t already have it installed, you&#39;ll need to set it up.&lt;/p&gt; &#xA;&lt;h4&gt;PostgreSQL Installation for WSL&lt;/h4&gt; &#xA;&lt;p&gt;To install Postgres for WSL, run the following commands from your Ubuntu terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt update&#xA;sudo apt install postgresql postgresql-contrib libpq-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then confirm that Postgres was installed successfully:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;psql --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run this command to start the Postgres service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo service postgresql start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you&#39;ll also need to create a database user so that you are able to connect to the database from Rails. First, check what your operating system username is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;whoami&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your username is &#34;ian&#34;, for example, you&#39;d need to create a Postgres user with that same name. To do so, run this command to open the Postgres CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo -u postgres -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the Postgres CLI, run this command (replacing &#34;ian&#34; with your username):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;createuser -sr ian&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then enter &lt;code&gt;control + d&lt;/code&gt; or type &lt;code&gt;logout&lt;/code&gt; to exit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-database#install-postgresql&#34;&gt;This guide&lt;/a&gt; has more info on setting up Postgres on WSL if you get stuck.&lt;/p&gt; &#xA;&lt;h4&gt;Postgresql Installation for OSX&lt;/h4&gt; &#xA;&lt;p&gt;To install Postgres for OSX, you can use Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Postgres has been installed, run this command to start the Postgres service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew services start postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you ran into any errors along the way, here are some things you can try to troubleshoot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re on a Mac and got a server connection error when you tried to run &lt;code&gt;rails db:create&lt;/code&gt;, one option for solving this problem for Mac users is to install the Postgres app. To do this, first uninstall &lt;code&gt;postgresql&lt;/code&gt; by running &lt;code&gt;brew remove postgresql&lt;/code&gt;. Next, download the app from the &lt;a href=&#34;https://postgresapp.com/downloads.html&#34;&gt;Postgres downloads page&lt;/a&gt; and install it. Launch the app and click &#34;Initialize&#34; to create a new server. You should now be able to run &lt;code&gt;rails db:create&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re using WSL and got the following error running &lt;code&gt;rails db:create&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;PG::ConnectionBad: FATAL:  role &#34;yourusername&#34; does not exist&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The issue is that you did not create a role in Postgres for the default user account. Check &lt;a href=&#34;https://www.youtube.com/watch?v=bQC5izDzOgE&#34;&gt;this video&lt;/a&gt; for one possible fix.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your app failed to deploy at the build stage, make sure your local environment is set up correctly by following the steps at the beginning of this lesson. Check that you have the latest versions of Ruby and Bundler, and ensure that Postgresql was installed successfully.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you deployed successfully, but you ran into issues when you visited the site, make sure you migrated and seeded the database. Also, make sure that your application works locally and try to debug any issues on your local machine before re-deploying. You can also check the logs on the server by running &lt;code&gt;heroku logs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For additional support, check out these guides on Heroku:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-rails6&#34;&gt;Deploying a Rails 6 App to Heroku&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-rails6#troubleshooting&#34;&gt;Rails Troubleshooting on Heroku&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/ruby-lsp</title>
    <updated>2022-09-18T01:51:03Z</updated>
    <id>tag:github.com,2022-09-18:/Shopify/ruby-lsp</id>
    <link href="https://github.com/Shopify/ruby-lsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opinionated language server for Ruby&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/Shopify/ruby-lsp/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ruby LSP&lt;/h1&gt; &#xA;&lt;p&gt;This gem is an implementation of the language server protocol specification for Ruby, used to improve editor features.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install the gem. There&#39;s no need to require it, since the server is used as a standalone executable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development do&#xA;  gem &#34;ruby-lsp&#34;, require: false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using VS Code, install the &lt;a href=&#34;https://github.com/Shopify/vscode-ruby-lsp&#34;&gt;Ruby LSP plugin&lt;/a&gt; to get the extra features in the editor.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://shopify.github.io/ruby-lsp&#34;&gt;documentation&lt;/a&gt; for &lt;a href=&#34;https://shopify.github.io/ruby-lsp/RubyLsp/Requests.html&#34;&gt;supported features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/Shopify/ruby-lsp&#34;&gt;https://github.com/Shopify/ruby-lsp&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://github.com/Shopify/ruby-lsp/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct.&lt;/p&gt; &#xA;&lt;h3&gt;Expectation testing&lt;/h3&gt; &#xA;&lt;p&gt;To simplify the way we run tests over different pieces of Ruby code, we use a custom expectations test framework against a set of Ruby fixtures.&lt;/p&gt; &#xA;&lt;p&gt;To add a new fixture to the expectations test suite:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add a new fixture &lt;code&gt;my_fixture.rb&lt;/code&gt; file under &lt;code&gt;test/fixtures&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(optional) Add new expectations under &lt;code&gt;test/expectations/$HANDLER&lt;/code&gt; for the request handlers you&#39;re concerned by&lt;/li&gt; &#xA; &lt;li&gt;Profit by running &lt;code&gt;bin/test test/requests/$HANDLER_expectations_test my_fixture&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Handlers for which you added expectations will be checked with &lt;code&gt;assert_expectations&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Handlers without expectations will be ran against your new test to check that nothing breaks&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To add a new expectations test runner for a new request handler:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a new file under &lt;code&gt;test/requests/$HANDLER_expectations_test.rb&lt;/code&gt; that subclasses &lt;code&gt;ExpectationsTestRunner&lt;/code&gt; and calls &lt;code&gt;expectations_tests $HANDLER, &#34;$EXPECTATIONS_DIR&#34;&lt;/code&gt; where: &lt;code&gt;$HANDLER&lt;/code&gt; is the fully qualified name or your handler class and &lt;code&gt;$EXPECTATIONS_DIR&lt;/code&gt; is the directory name where you want to store the expectation files.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# frozen_string_literal: true&#xA;&#xA;require &#34;test_helper&#34;&#xA;require &#34;expectations/expectations_test_runner&#34;&#xA;&#xA;class $HANDLERExpectationsTest &amp;lt; ExpectationsTestRunner&#xA;  expectations_tests RubyLsp::Requests::$HANDLER, &#34;$EXPECTATIONS_DIR&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(optional) Override the &lt;code&gt;run_expectations&lt;/code&gt; and &lt;code&gt;assert_expectations&lt;/code&gt; methods if needed. See the different request handler expectations runners under &lt;code&gt;test/requests/*_expectations_test.rb&lt;/code&gt; for examples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(optional) Add new fixtures for your handler under &lt;code&gt;test/fixtures&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(optional) Add new expectations under &lt;code&gt;test/expectations/$HANDLER&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No need to write the expectations by hand, just run the test with an empty expectation file and copy from the output.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Profit by running, &lt;code&gt;bin/test test/expectations_test $HANDLER&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tests with expectations will be checked with &lt;code&gt;assert_expectations&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Tests without expectations will be ran against your new $HANDLER to check that nothing breaks&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;h3&gt;Tracing LSP requests and responses&lt;/h3&gt; &#xA;&lt;p&gt;LSP server tracing can be controlled through the &lt;code&gt;ruby lsp.trace.server&lt;/code&gt; config key in the &lt;code&gt;.vscode/settings.json&lt;/code&gt; config file.&lt;/p&gt; &#xA;&lt;p&gt;Possible values are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;off&lt;/code&gt;: no tracing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;messages&lt;/code&gt;: display requests and responses notifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;: display each request and response as JSON&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://github.com/Shopify/ruby-lsp/raw/main/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>