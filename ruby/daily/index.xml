<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-20T01:43:54Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>learn-co-curriculum/phase-4-serializing-associations</title>
    <updated>2023-03-20T01:43:54Z</updated>
    <id>tag:github.com,2023-03-20:/learn-co-curriculum/phase-4-serializing-associations</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-serializing-associations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Serializing Associations&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serialize nested data using &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;We have seen how &lt;code&gt;ActiveModel::Serializer&lt;/code&gt; can be used to easily customize the JSON being returned for a single model. But what if we have multiple associated models? As it turns out, that situation can also be handled easily with AMS, by using the Active Record macros &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt; that we&#39;re already familiar with. In this lesson, we&#39;ll learn how to implement serializers for associated models in our Movie app.&lt;/p&gt; &#xA;&lt;p&gt;To enable us to do this, we&#39;ve expanded our movie app to include two more models. Specifically, we made the following changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instead of including &lt;code&gt;director&lt;/code&gt; as an attribute of our &lt;code&gt;Movie&lt;/code&gt; instances, we created a separate &lt;code&gt;Director&lt;/code&gt; class.&lt;/li&gt; &#xA; &lt;li&gt;We modified our app to include movie reviews using a &lt;code&gt;Review&lt;/code&gt; class.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The relationships we want to model look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Director -&amp;lt; Movies -&amp;lt; Reviews&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To implement the &lt;code&gt;Director&lt;/code&gt; class, we made the following changes to our code:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Removed &lt;code&gt;director&lt;/code&gt; and &lt;code&gt;female_director&lt;/code&gt; as attributes in our movie migration file; added a &lt;code&gt;director_id&lt;/code&gt; attribute&lt;/li&gt; &#xA; &lt;li&gt;Added a new migration for our &lt;code&gt;director&lt;/code&gt; model with three attributes: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;birthplace&lt;/code&gt; and &lt;code&gt;female_director&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added the &lt;code&gt;belongs_to :director&lt;/code&gt; macro to the &lt;code&gt;Movie&lt;/code&gt; model and the &lt;code&gt;has_many :movies&lt;/code&gt; macro to the &lt;code&gt;Director&lt;/code&gt; model&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt; routes for the &lt;code&gt;Director&lt;/code&gt; model in &lt;code&gt;config/routes.rb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added a &lt;code&gt;DirectorsController&lt;/code&gt; and created the &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt; actions&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To implement the &lt;code&gt;Review&lt;/code&gt; class, we made the following changes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Added a new migration with four attributes: &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, and &lt;code&gt;movie_id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added the &lt;code&gt;has_many :reviews&lt;/code&gt; macro to the &lt;code&gt;Movie&lt;/code&gt; model and the &lt;code&gt;belongs_to :movie&lt;/code&gt; macro to the &lt;code&gt;Review&lt;/code&gt; model&lt;/li&gt; &#xA; &lt;li&gt;Added an &lt;code&gt;index&lt;/code&gt; route for the &lt;code&gt;Review&lt;/code&gt; model in &lt;code&gt;config/routes.rb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Created a &lt;code&gt;ReviewsController&lt;/code&gt; and added the &lt;code&gt;index&lt;/code&gt; action&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Spend a few minutes looking through the code to familiarize yourself with how everything is set up.&lt;/p&gt; &#xA;&lt;h2&gt;Using ActiveModel::Serializer with Associated Data&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s see the updated version of our app in action. To set it up, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle install&#xA;$ rails db:migrate db:seed&#xA;$ rails s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The setup for &lt;code&gt;Movie&lt;/code&gt; has not changed: you should still be able to navigate to its &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt; routes, as well as the custom &lt;code&gt;/movies/:id/summary&lt;/code&gt; and &lt;code&gt;movie_summaries&lt;/code&gt; routes we created in the last lesson.&lt;/p&gt; &#xA;&lt;p&gt;Take a look at the new &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt; routes for &lt;code&gt;Director&lt;/code&gt; in the browser. You&#39;ll see that the JSON for the directors includes two attributes that we don&#39;t want: &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt;. Luckily we know how to fix this â€” we simply need to create a serializer for &lt;code&gt;director&lt;/code&gt; as we did for &lt;code&gt;movies&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails g serializer director&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can then add the desired attributes to the &lt;code&gt;director_serializer&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app/serializers/director_serializer.rb&#xA;class DirectorSerializer &amp;lt; ActiveModel::Serializer&#xA;  attributes :id, :name, :birthplace, :female_director&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now if you navigate to &lt;code&gt;/directors&lt;/code&gt; or &lt;code&gt;/directors/:id&lt;/code&gt; you will see that we&#39;re only displaying the desired attributes.&lt;/p&gt; &#xA;&lt;h2&gt;Serializing a One-to-Many Association&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s take a look at our new &lt;code&gt;Movie&lt;/code&gt; index route. Now that we&#39;ve removed the &lt;code&gt;director&lt;/code&gt; and &lt;code&gt;female_director&lt;/code&gt; attributes, the JSON for &lt;code&gt;movies&lt;/code&gt; no longer includes any information about director. We need to figure out how to add the information about each movie&#39;s associated director to the JSON being returned by the &lt;code&gt;movies&lt;/code&gt; serializer. AMS allows us to do this using the same macros in the serializers that we use to set up associations in our model files. In this case, we want our serializer to reflect the fact that &lt;code&gt;Movie&lt;/code&gt; belongs to &lt;code&gt;Director&lt;/code&gt;, so we&#39;ll update the serializer as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# serializers/movie_serializer.rb&#xA;class MovieSerializer &amp;lt; ActiveModel::Serializer&#xA;  attributes :id, :title, :year, :length, :description, :poster_url, :category, :discount&#xA;&#xA;  belongs_to :director&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now if you navigate to &lt;code&gt;localhost:3000/movies/1&lt;/code&gt;, you should see the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;id&#34;: 1,&#xA;  &#34;title&#34;: &#34;The Color Purple&#34;,&#xA;  &#34;year&#34;: 1985,&#xA;  &#34;length&#34;: 154,&#xA;  &#34;description&#34;: &#34;Whoopi Goldberg brings Alice Walker&#39;s Pulitzer Prize-winning feminist novel to life as Celie, a Southern woman who suffered abuse over decades. A project brought to a hesitant Steven Spielberg by producer Quincy Jones, the film marks Spielberg&#39;s first female lead.&#34;,&#xA;  &#34;poster_url&#34;: &#34;https://pisces.bbystatic.com/image2/BestBuy_US/images/products/3071/3071213_so.jpg&#34;,&#xA;  &#34;category&#34;: &#34;Drama&#34;,&#xA;  &#34;discount&#34;: false,&#xA;  &#34;director&#34;: {&#xA;    &#34;id&#34;: 1,&#xA;    &#34;name&#34;: &#34;Steven Spielberg&#34;,&#xA;    &#34;birthplace&#34;: &#34;Cincinnati, OH&#34;,&#xA;    &#34;female_director&#34;: false&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We once again can see the director information for our movie!&lt;/p&gt; &#xA;&lt;p&gt;We can also set up the relationship in the other direction, by adding the corresponding macro in our &lt;code&gt;DirectorSerializer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# serializers/director_serializer.rb&#xA;class DirectorSerializer &amp;lt; ActiveModel::Serializer&#xA;  attributes :id, :name, :birthplace, :female_director&#xA;&#xA;  has_many :movies&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because we have included the &lt;code&gt;has_many&lt;/code&gt; macro in the &lt;code&gt;Director&lt;/code&gt; serializer, when we navigate to &lt;code&gt;localhost:3000/directors/:id&lt;/code&gt;, we can see the list of movies that belong to that particular director:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;id&#34;: 1,&#xA;  &#34;name&#34;: &#34;Steven Spielberg&#34;,&#xA;  &#34;birthplace&#34;: &#34;Cincinnati, OH&#34;,&#xA;  &#34;female_director&#34;: false,&#xA;  &#34;movies&#34;: [&#xA;    {&#xA;      &#34;id&#34;: 1,&#xA;      &#34;title&#34;: &#34;The Color Purple&#34;,&#xA;      &#34;year&#34;: 1985,&#xA;      &#34;length&#34;: 154,&#xA;      &#34;description&#34;: &#34;Whoopi Goldberg brings Alice Walker&#39;s Pulitzer Prize-winning feminist novel to life as Celie, a Southern woman who suffered abuse over decades. A project brought to a hesitant Steven Spielberg by producer Quincy Jones, the film marks Spielberg&#39;s first female lead.&#34;,&#xA;      &#34;poster_url&#34;: &#34;https://pisces.bbystatic.com/image2/BestBuy_US/images/products/3071/3071213_so.jpg&#34;,&#xA;      &#34;category&#34;: &#34;Drama&#34;,&#xA;      &#34;discount&#34;: false&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: You should only add macros to your serializers if you&#39;re sure you need the data! The level of complexity ramps up quickly as you add more macros, so keeping them to a minimum will save you headaches in the long run. It&#39;s also good to consider how much data is being sent with each request, since adding more data means running more SQL code to access that info from different tables in the database, which will make our responses slower.&lt;/p&gt; &#xA;&lt;p&gt;Rails automatically uses the appropriate serializer, based on naming conventions, to display the associated data for each of our models. We can see that in the example above: Rails has used the &lt;code&gt;MovieSerializer&lt;/code&gt; to render the &lt;code&gt;movie&lt;/code&gt; JSON, so all of the attributes we listed in that serializer are rendered in the &lt;code&gt;Director&lt;/code&gt;&#39;s &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt; routes.&lt;/p&gt; &#xA;&lt;h2&gt;Serializing a Many-to-Many Association&lt;/h2&gt; &#xA;&lt;p&gt;Our Movie example uses a one-to-many association (directors have many movies and movies belong to a director), but you you can also use Active Model Serializers with a many-to-many association.&lt;/p&gt; &#xA;&lt;p&gt;For example, if we had an app with &lt;code&gt;Article&lt;/code&gt; and &lt;code&gt;Tag&lt;/code&gt; models, we could create a join table and set up &lt;code&gt;has_many :through&lt;/code&gt; associations for both models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app/models/article.rb&#xA;class Article &amp;lt; ApplicationRecord&#xA;  has_many :article_tags&#xA;  has_many :tags, through: :article_tags&#xA;end&#xA;&#xA;# app/models/article_tag.rb&#xA;class ArticleTag &amp;lt; ApplicationRecord&#xA;  belongs_to :article&#xA;  belongs_to :tag&#xA;end&#xA;&#xA;# app/models/tag.rb&#xA;class Tag &amp;lt; ApplicationRecord&#xA;  has_many :article_tags&#xA;  has_many :articles, through: :article_tags&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, if we want the JSON for &lt;code&gt;Article&lt;/code&gt; to include a list of the article&#39;s tags, we would simply use &lt;code&gt;has_many :tags&lt;/code&gt; in our &lt;code&gt;ArticleSerializer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app/serializers/article_serializer.rb&#xA;class ArticleSerializer &amp;lt; ActiveModel::Serializer&#xA;  attributes :id, :title, :author, :content&#xA;&#xA;  has_many :tags&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because the &lt;code&gt;has_many :through&lt;/code&gt; association is defined in the model files, Rails will know to nest a list of each article&#39;s tags in the JSON that&#39;s being returned.&lt;/p&gt; &#xA;&lt;h2&gt;Adding Custom Serializers&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s return to our Movie example. We have successfully set up our Director serializer to include a list of the director&#39;s movies in the JSON that&#39;s returned:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;id&#34;: 1,&#xA;  &#34;name&#34;: &#34;Steven Spielberg&#34;,&#xA;  &#34;birthplace&#34;: &#34;Cincinnati, OH&#34;,&#xA;  &#34;female_director&#34;: false,&#xA;  &#34;movies&#34;: [&#xA;    {&#xA;      &#34;id&#34;: 1,&#xA;      &#34;title&#34;: &#34;The Color Purple&#34;,&#xA;      &#34;year&#34;: 1985,&#xA;      &#34;length&#34;: 154,&#xA;      &#34;description&#34;: &#34;Whoopi Goldberg brings Alice Walker&#39;s Pulitzer Prize-winning feminist novel to life as Celie, a Southern woman who suffered abuse over decades. A project brought to a hesitant Steven Spielberg by producer Quincy Jones, the film marks Spielberg&#39;s first female lead.&#34;,&#xA;      &#34;poster_url&#34;: &#34;https://pisces.bbystatic.com/image2/BestBuy_US/images/products/3071/3071213_so.jpg&#34;,&#xA;      &#34;category&#34;: &#34;Drama&#34;,&#xA;      &#34;discount&#34;: false&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With only one Steven Spielberg movie in our data, including all that information isn&#39;t too unreasonable. But what happens when we add the rest of his movies to our database? We may decide we don&#39;t need to include &lt;strong&gt;all&lt;/strong&gt; the details of every movie in this view.&lt;/p&gt; &#xA;&lt;p&gt;To fix this, we can simply create a new, streamlined serializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails g serializer director_movie&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we&#39;ll include just the title and year of each of the director&#39;s movies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class DirectorMovieSerializer &amp;lt; ActiveModel::Serializer&#xA;  attributes :title, :year&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, if you refresh the page... nothing changes. Why not?&lt;/p&gt; &#xA;&lt;p&gt;Recall that Rails automatically selects the serializer based on naming conventions, so it&#39;s still using the &lt;code&gt;DirectorSerializer&lt;/code&gt; to render the data. To fix this, we need to tell the &lt;code&gt;DirectorSerializer&lt;/code&gt; that it should be using this new serializer instead; we need to pass it &lt;em&gt;explicitly&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class DirectorSerializer &amp;lt; ActiveModel::Serializer&#xA;  attributes :id, :name, :birthplace, :female_director&#xA;&#xA;  has_many :movies, serializer: DirectorMovieSerializer&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rails is still using &lt;code&gt;DirectorSerializer&lt;/code&gt; to render the JSON for the director, but now &lt;code&gt;DirectorSerializer&lt;/code&gt; is passing along the request for the director&#39;s movies to the new, simplified serializer.&lt;/p&gt; &#xA;&lt;p&gt;Now if you refresh the page, you should see the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;id&#34;: 1,&#xA;  &#34;name&#34;: &#34;Steven Spielberg&#34;,&#xA;  &#34;birthplace&#34;: &#34;Cincinnati, OH&#34;,&#xA;  &#34;female_director&#34;: false,&#xA;  &#34;movies&#34;: [&#xA;    {&#xA;      &#34;title&#34;: &#34;The Color Purple&#34;,&#xA;      &#34;year&#34;: 1985&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deeply Nested Models&lt;/h2&gt; &#xA;&lt;p&gt;Now that we&#39;ve got the JSON set up the way we want for our associated &lt;code&gt;Movie&lt;/code&gt; and &lt;code&gt;Director&lt;/code&gt; models, we can turn our attention to the &lt;code&gt;Review&lt;/code&gt; model. Let&#39;s take another look at our model relationships:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Director -&amp;lt; Movies -&amp;lt; Reviews&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;ve already set up the association in the &lt;code&gt;Movie&lt;/code&gt; and &lt;code&gt;Review&lt;/code&gt; model files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app/models/movie.rb&#xA;class Movie &amp;lt; ApplicationRecord&#xA;  belongs_to :director&#xA;  has_many :reviews&#xA;end&#xA;&#xA;# app/models/review.rb&#xA;class Review &amp;lt; ApplicationRecord&#xA;  belongs_to :movie&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we&#39;ll create our &lt;code&gt;review&lt;/code&gt; serializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails g serializer review&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also specify the attributes we want to include:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app/serializers/review_serializer.rb&#xA;class ReviewSerializer &amp;lt; ActiveModel::Serializer&#xA;  attributes :id, :author, :date, :url&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now go to &lt;code&gt;localhost:3000/reviews&lt;/code&gt; and see our reviews listed. However, viewing a list of reviews separately from the information about the movies they&#39;re associated with is not particularly helpful.&lt;/p&gt; &#xA;&lt;p&gt;What we really want to do is render the information about a movie&#39;s reviews along with the rest of the information about that movie. In fact, we don&#39;t really need to render information about reviews at all &lt;em&gt;except&lt;/em&gt; as part of the data rendered for a particular movie!&lt;/p&gt; &#xA;&lt;p&gt;Before we figure out how to get that in place, let&#39;s follow good programming practice and delete the code we no longer need: we&#39;ll remove the resource for &lt;code&gt;review&lt;/code&gt;s from the &lt;code&gt;routes.rb&lt;/code&gt; file and the &lt;code&gt;index&lt;/code&gt; action from the &lt;code&gt;ReviewsController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once that&#39;s done, to get reviews included in the JSON that&#39;s returned for a given movie, we&#39;ll simply add the appropriate macro to the &lt;code&gt;MovieSerializer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class MovieSerializer &amp;lt; ActiveModel::Serializer&#xA;  attributes :id, :title, :year, :length, :description, :poster_url, :category, :discount&#xA;&#xA;  belongs_to :director&#xA;  has_many :reviews&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now if we visit &lt;code&gt;localhost:3000/movies/1&lt;/code&gt;, we can verify that the reviews are now included in the movie&#39;s JSON.&lt;/p&gt; &#xA;&lt;p&gt;So let&#39;s review where we are: the JSON for directors includes their movies, and the JSON for movies includes their reviews. Given that, if we visit &lt;code&gt;localhost:3000/directors/1&lt;/code&gt;, will we see the full set of nested data? Unfortunately, no, we won&#39;t. Our &lt;code&gt;Director&lt;/code&gt; JSON will look just the same as it did before we added the &lt;code&gt;Review&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;id&#34;: 1,&#xA;  &#34;name&#34;: &#34;Steven Spielberg&#34;,&#xA;  &#34;birthplace&#34;: &#34;Cincinnati, OH&#34;,&#xA;  &#34;female_director&#34;: false,&#xA;  &#34;movies&#34;: [&#xA;    {&#xA;      &#34;title&#34;: &#34;The Color Purple&#34;,&#xA;      &#34;year&#34;: 1985&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is because, by default, &lt;strong&gt;AMS only nests associations one level deep&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This behavior is intended to protect against overly complex JSON that&#39;s nested many layers deep. Luckily, we can override the behavior by using the &lt;a href=&#34;https://github.com/rails-api/active_model_serializers/raw/v0.10.6/docs/general/adapters.md#include-option&#34;&gt;include option&lt;/a&gt; in the top-level controller â€” in this case, the &lt;code&gt;DirectorsController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app/controllers/directors_controller.rb&#xA;class DirectorsController &amp;lt; ApplicationController&#xA;&#xA;  def index&#xA;    directors = Director.all&#xA;    render json: directors, include: [&#39;movies&#39;, &#39;movies.reviews&#39;]&#xA;  end&#xA;&#xA;  def show&#xA;    director = Director.find(params[:id])&#xA;    render json: director, include: [&#39;movies&#39;, &#39;movies.reviews&#39;]&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s take a look at the render statement in our &lt;code&gt;show&lt;/code&gt; action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;render json: director, include: [&#39;movies&#39;, &#39;movies.reviews&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code tells AMS that we want to render information for the &lt;code&gt;director&lt;/code&gt;, and to also include information for the &lt;code&gt;movies&lt;/code&gt; associated with that director, and for the &lt;code&gt;reviews&lt;/code&gt; associated with those &lt;code&gt;movies&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, because we&#39;re using our custom &lt;code&gt;DirectorMovieSerializer&lt;/code&gt; to render the movies in our &lt;code&gt;Director&lt;/code&gt; routes, we also need to add the &lt;code&gt;has_many :reviews&lt;/code&gt; macro to that serializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class DirectorMovieSerializer &amp;lt; ActiveModel::Serializer&#xA;  attributes :title, :year&#xA;&#xA;  has_many :reviews&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With these changes in place, refresh the page and you should now see this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;id&#34;: 1,&#xA;  &#34;name&#34;: &#34;Steven Spielberg&#34;,&#xA;  &#34;birthplace&#34;: &#34;Cincinnati, OH&#34;,&#xA;  &#34;female_director&#34;: false,&#xA;  &#34;movies&#34;: [&#xA;    {&#xA;      &#34;title&#34;: &#34;The Color Purple&#34;,&#xA;      &#34;year&#34;: 1985,&#xA;      &#34;reviews&#34;: [&#xA;        {&#xA;          &#34;id&#34;: 1,&#xA;          &#34;author&#34;: &#34;Roger Ebert&#34;,&#xA;          &#34;date&#34;: &#34;December 20, 1985&#34;,&#xA;          &#34;url&#34;: &#34;https://www.rogerebert.com/reviews/the-color-purple-1985&#34;&#xA;        },&#xA;        {&#xA;          &#34;id&#34;: 2,&#xA;          &#34;author&#34;: &#34;Variety Staff&#34;,&#xA;          &#34;date&#34;: &#34;December 31, 1984&#34;,&#xA;          &#34;url&#34;: &#34;https://variety.com/1984/film/reviews/the-color-purple-1200426436/&#34;&#xA;        },&#xA;        {&#xA;          &#34;id&#34;: 3,&#xA;          &#34;author&#34;: &#34;Janet Maslin&#34;,&#xA;          &#34;date&#34;: &#34;December 18, 1985&#34;,&#xA;          &#34;url&#34;: &#34;https://www.nytimes.com/1985/12/18/movies/moviesspecial/the-color-purple.html&#34;&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nice!&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ActiveModel::Serializer&lt;/code&gt; provides some powerful yet simple-to-use tools for crafting the JSON our app returns, and it does so in a way that&#39;s consistent with Rails conventions.&lt;/p&gt; &#xA;&lt;p&gt;To summarize:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To customize the JSON returned for a resource, create a &lt;strong&gt;serializer&lt;/strong&gt; for that resource and list the desired attributes.&lt;/li&gt; &#xA; &lt;li&gt;The serializer is used &lt;strong&gt;implicitly&lt;/strong&gt; by Rails based on naming conventions; to override this, custom serializers can be passed &lt;strong&gt;explicitly&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;AMS enables the use of the &lt;code&gt;belongs_to&lt;/code&gt; and &lt;code&gt;has_many&lt;/code&gt; macros in serializers to render associated data; these macros should be used sparingly.&lt;/li&gt; &#xA; &lt;li&gt;By default, AMS will only nest associations one level deep in the serialized JSON. To override this, the &lt;code&gt;include&lt;/code&gt; option can be used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Check For Understanding&lt;/h2&gt; &#xA;&lt;p&gt;Before you move on, make sure you can answer the following questions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If we have &lt;code&gt;Recipe&lt;/code&gt; and &lt;code&gt;Ingredient&lt;/code&gt; resources and we want to nest ingredients under recipes in the json we&#39;re returning, in which file would we use the &lt;code&gt;has_many&lt;/code&gt; macro? In which file would we use the &lt;code&gt;belongs_to&lt;/code&gt; macro?&lt;/li&gt; &#xA; &lt;li&gt;If we want to specify a custom serializer for the parent resource (&lt;code&gt;Recipe&lt;/code&gt;), in which file would we do that? In which file would we specify a custom serializer for the child resource (&lt;code&gt;Ingredient&lt;/code&gt;)?&lt;/li&gt; &#xA; &lt;li&gt;In which file do we use the &lt;code&gt;include&lt;/code&gt; keyword to set up deep nesting?&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rails-api/active_model_serializers/raw/0-10-stable/docs/general/getting_started.md&#34;&gt;Getting Started with Active Model Serializer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rails-api/active_model_serializers/raw/v0.10.6/docs/general/adapters.md#include-option&#34;&gt;Including Nested Associations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-4-active-model-serializer-lab</title>
    <updated>2023-03-20T01:43:54Z</updated>
    <id>tag:github.com,2023-03-20:/learn-co-curriculum/phase-4-active-model-serializer-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-active-model-serializer-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Active Model Serializer Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use Active Model Serializer to render JSON&lt;/li&gt; &#xA; &lt;li&gt;Use Active Model Serializer to render JSON for associations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;For this lab, we&#39;re going to return to our Blog application and update it to use &lt;code&gt;ActiveModel::Serializer&lt;/code&gt; for JSON serialization.&lt;/p&gt; &#xA;&lt;p&gt;To set up the app, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle install&#xA;$ rails db:migrate db:seed&#xA;$ rails s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our app includes four resources: &lt;code&gt;Author&lt;/code&gt;, &lt;code&gt;Profile&lt;/code&gt;, &lt;code&gt;Post&lt;/code&gt;, and &lt;code&gt;Tag&lt;/code&gt;, as well as a &lt;code&gt;post_tag&lt;/code&gt; join table. All the associations have been set up, as well as &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt; routes and actions for each of the four resources.&lt;/p&gt; &#xA;&lt;p&gt;Start by building the serializers based on the instructions below. Check your work in the browser as you go. Then, run &lt;code&gt;learn test&lt;/code&gt; to make sure your code passes the tests.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Author&lt;/h3&gt; &#xA;&lt;p&gt;Set up a serializer for &lt;code&gt;Author&lt;/code&gt; that returns the following JSON:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The author&#39;s &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The author&#39;s &lt;code&gt;profile&lt;/code&gt;, including only the &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;bio&lt;/code&gt; and &lt;code&gt;avatar_url&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A list of the author&#39;s posts, including:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the &lt;code&gt;title&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;the first 40 characters of the post&#39;s content as &lt;code&gt;short_content&lt;/code&gt;, with a trailing ellipsis (&lt;code&gt;...&lt;/code&gt;) at the end&lt;/li&gt; &#xA; &lt;li&gt;a list of the associated &lt;code&gt;tags&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You will need to make serializers for the &lt;code&gt;Profile&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt; models to get this working.&lt;/p&gt; &#xA;&lt;h3&gt;Posts&lt;/h3&gt; &#xA;&lt;p&gt;Set up a serializer for the &lt;code&gt;Post&lt;/code&gt; model that displays the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The post&#39;s &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The name of the author&lt;/li&gt; &#xA; &lt;li&gt;The tags associated with the post&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Tags&lt;/h3&gt; &#xA;&lt;p&gt;Set up a serializer for &lt;code&gt;Tag&lt;/code&gt; that displays the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The name of the tag&lt;/li&gt; &#xA; &lt;li&gt;A list of the posts the tag is associated with&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>