<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T01:32:36Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tmuxinator/tmuxinator</title>
    <updated>2022-06-04T01:32:36Z</updated>
    <id>tag:github.com,2022-06-04:/tmuxinator/tmuxinator</id>
    <link href="https://github.com/tmuxinator/tmuxinator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Manage complex tmux sessions easily&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tmuxinator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/tmuxinator&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/tmuxinator.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://travis-ci.org/tmuxinator/tmuxinator?branch=master&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/tmuxinator/tmuxinator.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/tmuxinator/tmuxinator?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/tmuxinator/tmuxinator.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/tmuxinator/tmuxinator&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/tmuxinator/tmuxinator/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gemnasium.com/tmuxinator/tmuxinator&#34;&gt;&lt;img src=&#34;https://gemnasium.com/tmuxinator/tmuxinator.svg?sanitize=true&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/tmuxinator/tmuxinator?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create and manage tmux sessions easily.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr align=&#34;center&#34;&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/289949/44366875-1a6cee00-a49c-11e8-9322-76e70df0c88b.gif&#34; alt=&#34;Screenshot&#34; width=&#34;80%&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;RubyGems&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install tmuxinator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install tmuxinator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some users have &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/issues/841&#34;&gt;reported issues&lt;/a&gt; when installing via Homebrew, so the RubyGems installation is preferred until these are resolved.&lt;/p&gt; &#xA;&lt;p&gt;tmuxinator aims to be compatible with &lt;a href=&#34;https://www.ruby-lang.org/en/downloads/&#34;&gt;the currently maintained versions of Ruby&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some operating systems may provide an unsupported version of Ruby as their &#34;system ruby&#34;. In these cases, users should use &lt;a href=&#34;https://rvm.io/&#34;&gt;RVM&lt;/a&gt; or &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; to install a supported Ruby version and use that version&#39;s &lt;code&gt;gem&lt;/code&gt; binary to install tmuxinator.&lt;/p&gt; &#xA;&lt;h2&gt;Editor and Shell&lt;/h2&gt; &#xA;&lt;p&gt;tmuxinator uses your shell&#39;s default editor for opening files. If you&#39;re not sure what that is type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $EDITOR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For me that produces &#34;vim&#34;. If you want to change your default editor simply put a line in ~/.bashrc that changes it. Mine looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export EDITOR=&#39;vim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;tmux&lt;/h2&gt; &#xA;&lt;p&gt;The recommended version of tmux to use is 1.8 or later, with the exception of 2.5, which is &lt;strong&gt;not&lt;/strong&gt; supported (see &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/issues/536&#34;&gt;issue 536&lt;/a&gt; for details). Your mileage may vary for earlier versions. Refer to the FAQ for any odd behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;Completion&lt;/h2&gt; &#xA;&lt;p&gt;Your distribution&#39;s package manager may install the completion files in the appropriate location for the completion to load automatically on startup. But, if you installed tmuxinator via Ruby&#39;s &lt;code&gt;gem&lt;/code&gt;, you&#39;ll need to run the following commands to put the completion files where they&#39;ll be loaded by your shell.&lt;/p&gt; &#xA;&lt;h3&gt;bash&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# wget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.bash -O /etc/bash_completion.d/tmuxinator.bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;zsh&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# wget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.zsh -O /usr/local/share/zsh/site-functions/_tmuxinator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: ZSH&#39;s completion files can be put in other locations in your &lt;code&gt;$fpath&lt;/code&gt;. Please refer to the &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Functions.html&#34;&gt;manual&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;fish&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.fish ~/.config/fish/completions/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A working knowledge of tmux is assumed. You should understand what windows and panes are in tmux. If not please consult the &lt;a href=&#34;https://web.archive.org/web/20220308205829/https://man.openbsd.org/OpenBSD-current/man1/tmux.1&#34;&gt;man pages&lt;/a&gt; for tmux.&lt;/p&gt; &#xA;&lt;h3&gt;Create a project&lt;/h3&gt; &#xA;&lt;p&gt;Create or edit your projects with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator new [project]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create or edit a local project where the config file will be stored in the current working directory (in &lt;code&gt;.tmuxinator.yml&lt;/code&gt;) instead of the default project configuration file location (e.g. &lt;code&gt;~/.config/tmuxinator&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator new --local [project]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For editing you can also use &lt;code&gt;tmuxinator open [project]&lt;/code&gt;. &lt;code&gt;new&lt;/code&gt; is aliased to &lt;code&gt;n&lt;/code&gt;,&lt;code&gt;open&lt;/code&gt; to &lt;code&gt;o&lt;/code&gt;, and &lt;code&gt;edit&lt;/code&gt; to &lt;code&gt;e&lt;/code&gt;. Please note that dots can&#39;t be used in project names as tmux uses them internally to delimit between windows and panes. Your default editor (&lt;code&gt;$EDITOR&lt;/code&gt;) is used to open the file. If this is a new project you will see this default config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# ~/.tmuxinator/sample.yml&#xA;&#xA;name: sample&#xA;root: ~/&#xA;&#xA;# Optional tmux socket&#xA;# socket_name: foo&#xA;&#xA;# Note that the pre and post options have been deprecated and will be replaced by&#xA;# project hooks.&#xA;&#xA;# Project hooks&#xA;&#xA;# Runs on project start, always&#xA;# on_project_start: command&#xA;&#xA;# Run on project start, the first time&#xA;# on_project_first_start: command&#xA;&#xA;# Run on project start, after the first time&#xA;# on_project_restart: command&#xA;&#xA;# Run on project exit ( detaching from tmux session )&#xA;# on_project_exit: command&#xA;&#xA;# Run on project stop&#xA;# on_project_stop: command&#xA;&#xA;# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.&#xA;# pre_window: rbenv shell 2.0.0-p247&#xA;&#xA;# Pass command line options to tmux. Useful for specifying a different tmux.conf.&#xA;# tmux_options: -f ~/.tmux.mac.conf&#xA;&#xA;# Change the command to call tmux.  This can be used by derivatives/wrappers like byobu.&#xA;# tmux_command: byobu&#xA;&#xA;# Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.&#xA;# startup_window: editor&#xA;&#xA;# Specifies (by index) which pane of the specified window will be selected on project startup. If not set, the first pane is used.&#xA;# startup_pane: 1&#xA;&#xA;# Controls whether the tmux session should be attached to automatically. Defaults to true.&#xA;# attach: false&#xA;&#xA;windows:&#xA;  - editor:&#xA;      layout: main-vertical&#xA;      # Synchronize all panes of this window, can be enabled before or after the pane commands run.&#xA;      # &#39;before&#39; represents legacy functionality and will be deprecated in a future release, in favour of &#39;after&#39;&#xA;      # synchronize: after&#xA;      panes:&#xA;        - vim&#xA;        - guard&#xA;  - server: bundle exec rails s&#xA;  - logs: tail -f log/development.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;The windows option allows the specification of any number of tmux windows. Each window is denoted by a YAML array entry, followed by a name* and command to be run.&lt;/p&gt; &#xA;&lt;p&gt;*Users may optionally provide a null YAML value (e.g. &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;) in place of a named window key, which will cause the window to use its default name (usually the name of their shell).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;windows:&#xA;  - editor: vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Window specific root&lt;/h3&gt; &#xA;&lt;p&gt;An optional root option can be specified per window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: test&#xA;root: ~/projects/company&#xA;&#xA;windows:&#xA;  - small_project:&#xA;      root: ~/projects/company/small_project&#xA;      panes:&#xA;        - start this&#xA;        - start that&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This takes precedence over the main root option.&lt;/p&gt; &#xA;&lt;h2&gt;Panes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note that if you wish to use panes, make sure that you do not have &lt;code&gt;.&lt;/code&gt; in your project name. tmux uses &lt;code&gt;.&lt;/code&gt; to delimit between window and pane indices, and tmuxinator uses the project name in combination with these indices to target the correct pane or window.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Panes are optional and are children of window entries, but unlike windows, they do not need a name. In the following example, the &lt;code&gt;editor&lt;/code&gt; window has 2 panes, one running vim, the other guard.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;windows:&#xA;  - editor:&#xA;      layout: main-vertical&#xA;      panes:&#xA;        - vim&#xA;        - guard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The layout setting gets handed down to tmux directly, so you can choose from one of &lt;a href=&#34;https://web.archive.org/web/20220308205829/https://man.openbsd.org/OpenBSD-current/man1/tmux.1#even-horizontal&#34;&gt;the five standard layouts&lt;/a&gt; or &lt;a href=&#34;http://stackoverflow.com/a/9976282/183537&#34;&gt;specify your own&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note the indentation here is deliberate. YAML&#39;s indentation rules can be confusing, so if your config isn&#39;t working as expected, please check the indentation.&lt;/strong&gt; For a more detailed explanation of &lt;em&gt;why&lt;/em&gt; YAML behaves this way, see &lt;a href=&#34;https://stackoverflow.com/questions/50594758/why-isnt-two-spaced-yaml-parsed-like-four-spaced-yaml/50600253#50600253&#34;&gt;this&lt;/a&gt; Stack Overflow question.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re noticing inconsistencies when using a custom layout it may be due &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/issues/651&#34;&gt;#651&lt;/a&gt;. See &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/issues/651#issuecomment-497780424&#34;&gt;this comment&lt;/a&gt; for a workaround.&lt;/p&gt; &#xA;&lt;h2&gt;Interpreter Managers &amp;amp; Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;To use tmuxinator with rbenv, RVM, NVM etc, use the &lt;code&gt;pre_window&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pre_window: rbenv shell 2.0.0-p247&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These command(s) will run before any subsequent commands in all panes and windows.&lt;/p&gt; &#xA;&lt;h2&gt;Custom session attachment&lt;/h2&gt; &#xA;&lt;p&gt;You can set tmuxinator to skip auto-attaching to the session by using the &lt;code&gt;attach&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;attach: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to attach to tmux in a non-standard way (e.g. for a program that makes use of tmux control mode like iTerm2), you can run arbitrary commands by using a project hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on_project_exit: tmux -CC attach&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Passing directly to send-keys&lt;/h2&gt; &#xA;&lt;p&gt;tmuxinator passes commands directly to send keys. This differs from simply chaining commands together using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt;, in that tmux will directly send the commands to a shell as if you typed them in. This allows commands to be executed on a remote server over SSH for example.&lt;/p&gt; &#xA;&lt;p&gt;To support this both the window and pane options can take an array as an argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: sample&#xA;root: ~/&#xA;&#xA;windows:&#xA;  - stats:&#xA;    - ssh stats@example.com&#xA;    - tail -f /var/log/stats.log&#xA;  - logs:&#xA;      layout: main-vertical&#xA;      panes:&#xA;        - logs:&#xA;          - ssh logs@example.com&#xA;          - cd /var/logs&#xA;          - tail -f development.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ERB&lt;/h2&gt; &#xA;&lt;p&gt;Project files support &lt;a href=&#34;https://en.wikipedia.org/wiki/ERuby#erb&#34;&gt;ERB&lt;/a&gt; for reusability across environments. Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;root: &amp;lt;%= ENV[&#34;MY_CUSTOM_DIR&#34;] %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass arguments to your projects, and access them with ERB. Simple arguments are available in an array named &lt;code&gt;@args&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tmuxinator start project foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# ~/.tmuxinator/project.yml&#xA;&#xA;name: project&#xA;root: ~/&amp;lt;%= @args[0] %&amp;gt;&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass key-value pairs using the format &lt;code&gt;key=value&lt;/code&gt;. These will be available in a hash named &lt;code&gt;@settings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tmuxinator start project workspace=~/workspace/todo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# ~/.tmuxinator/project.yml&#xA;&#xA;name: project&#xA;root: ~/&amp;lt;%= @settings[&#34;workspace&#34;] %&amp;gt;&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Starting a session&lt;/h2&gt; &#xA;&lt;p&gt;This will fire up tmux with all the tabs and panes you configured, &lt;code&gt;start&lt;/code&gt; is aliased to &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator start [project] -n [name] -p [project-config]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the optional &lt;code&gt;[name]&lt;/code&gt; argument, it will start a new tmux session with the custom name provided. This is to enable reuse of a project without tmux session name collision.&lt;/p&gt; &#xA;&lt;p&gt;If there is a &lt;code&gt;./.tmuxinator.yml&lt;/code&gt; file in the current working directory but not a named project file in &lt;code&gt;~/.tmuxinator&lt;/code&gt;, tmuxinator will use the local file. This is primarily intended to be used for sharing tmux configurations in complex development environments.&lt;/p&gt; &#xA;&lt;p&gt;You can provide tmuxinator with a project config file using the optional &lt;code&gt;[project-config]&lt;/code&gt; argument (e.g. &lt;code&gt;--project-config=path/to/my-project.yaml&lt;/code&gt; or &lt;code&gt;-p path/to/my-project.yaml&lt;/code&gt;). This option will override a &lt;code&gt;[project]&lt;/code&gt; name (if provided) and a local tmuxinator file (if present).&lt;/p&gt; &#xA;&lt;h2&gt;Shorthand&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/#completion&#34;&gt;shell completion files&lt;/a&gt; also include a shorthand alias for tmuxinator that can be used in place of the full name*.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mux [command]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*The &lt;code&gt;mux&lt;/code&gt; alias has been removed from the Zsh completion script because it was resulting in unexpected behavior in some setups. Including aliases in completion scripts is not standard practice and the Bash and Fish aliases may be removed in a future release. Going forward, users should create their own aliases in their shell&#39;s RC file (e.g. &lt;code&gt;alias mux=tmuxinator&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Other Commands&lt;/h2&gt; &#xA;&lt;p&gt;Copy an existing project. Aliased to &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;cp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator copy [existing] [new]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List all the projects you have configured. Aliased to &lt;code&gt;l&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove a project. Aliased to &lt;code&gt;rm&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator delete [project]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove all tmuxinator configs, aliases and scripts. Aliased to &lt;code&gt;i&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator implode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examines your environment and identifies problems with your configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator doctor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shows tmuxinator&#39;s help. Aliased to &lt;code&gt;h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shows the shell commands that get executed for a project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator debug [project]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shows tmuxinator&#39;s version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Configuration Location&lt;/h2&gt; &#xA;&lt;p&gt;Using environment variables, it&#39;s possible to define which directory tmuxinator will use when creating or searching for project config files. (See &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/pull/511&#34;&gt;PR #511&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Tmuxinator will attempt to use the following locations (in this order) when creating or searching for existing project configuration files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$TMUXINATOR_CONFIG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/tmuxinator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.tmuxinator&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Window names are not displaying properly?&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;export DISABLE_AUTO_TITLE=true&lt;/code&gt; to your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To contribute, please read the &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/raw/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2010-2020 Allen Bargi, Christopher Chow. See LICENSE for further details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kgiszczak/shale</title>
    <updated>2022-06-04T01:32:36Z</updated>
    <id>tag:github.com,2022-06-04:/kgiszczak/shale</id>
    <link href="https://github.com/kgiszczak/shale" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shale is a Ruby object mapper and serializer for JSON, YAML and XML. It allows you to parse JSON, YAML and XML data and convert it into Ruby data structures, as well as serialize data structures into JSON, YAML or XML.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shale&lt;/h1&gt; &#xA;&lt;p&gt;Shale is a Ruby object mapper and serializer for JSON, YAML and XML. It allows you to parse JSON, YAML and XML data and convert it into Ruby data structures, as well as serialize data structures into JSON, YAML or XML.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Convert JSON, YAML and XML to Ruby data model&lt;/li&gt; &#xA; &lt;li&gt;Convert Ruby data model to JSON, YAML and XML&lt;/li&gt; &#xA; &lt;li&gt;Generate JSON and XML Schema from Ruby models&lt;/li&gt; &#xA; &lt;li&gt;Compile JSON Schema into Ruby models&lt;/li&gt; &#xA; &lt;li&gt;Out of the box support for JSON, YAML, Nokogiri, REXML and Ox parsers&lt;/li&gt; &#xA; &lt;li&gt;Support for custom adapters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Shale supports Ruby (MRI) 2.7+&lt;/p&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;shale&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install shale&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#user-content-simple-use-case&#34;&gt;Simple use case&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#creating-objects&#34;&gt;Creating objects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#converting-json-to-object&#34;&gt;Converting JSON to object&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#converting-object-to-json&#34;&gt;Converting object to JSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#converting-yaml-to-object&#34;&gt;Converting YAML to object&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#converting-object-to-yaml&#34;&gt;Converting object to YAML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#converting-hash-to-object&#34;&gt;Converting Hash to object&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#converting-object-to-hash&#34;&gt;Converting object to Hash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#converting-xml-to-object&#34;&gt;Converting XML to object&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#converting-object-to-xml&#34;&gt;Converting object to XML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#mapping-json-keys-to-object-attributes&#34;&gt;Mapping JSON keys to object attributes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#mapping-yaml-keys-to-object-attributes&#34;&gt;Mapping YAML keys to object attributes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#mapping-hash-keys-to-object-attributes&#34;&gt;Mapping Hash keys to object attributes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#mapping-xml-elements-and-attributes-to-object-attributes&#34;&gt;Mapping XML elements and attributes to object attributes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#using-xml-namespaces&#34;&gt;Using XML namespaces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#using-methods-to-extract-and-generate-data&#34;&gt;Using methods to extract and generate data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#pretty-printing-and-xml-declaration&#34;&gt;Pretty printing and XML declaration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#supported-types&#34;&gt;Supported types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#writing-your-own-type&#34;&gt;Writing your own type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#adapters&#34;&gt;Adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#generating-json-schema&#34;&gt;Generating JSON Schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#compiling-json-schema-into-shale-model&#34;&gt;Compiling JSON Schema into Shale model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgiszczak/shale/master/#generating-xml-schema&#34;&gt;Generating XML Schema&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Documentation with interactive examples is available at &lt;a href=&#34;https://www.shalerb.org&#34;&gt;Shale website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Simple use case&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;shale&#39;&#xA;&#xA;class Address &amp;lt; Shale::Mapper&#xA;  attribute :city, Shale::Type::String&#xA;  attribute :street, Shale::Type::String&#xA;  attribute :zip, Shale::Type::String&#xA;end&#xA;&#xA;class Person &amp;lt; Shale::Mapper&#xA;  attribute :first_name, Shale::Type::String&#xA;  attribute :last_name, Shale::Type::String&#xA;  attribute :age, Shale::Type::Integer&#xA;  attribute :married, Shale::Type::Boolean, default: -&amp;gt; { false }&#xA;  attribute :hobbies, Shale::Type::String, collection: true&#xA;  attribute :address, Address&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default: -&amp;gt; { &#39;value&#39; }&lt;/code&gt; - add a default value to attribute (it must be a proc that returns value)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;collection: true&lt;/code&gt; - indicates that a attribute is a collection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Creating objects&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person = Person.new(&#xA;  first_name: &#39;John&#39;,&#xA;  last_name: &#39;Doe&#39;,&#xA;  age: 50,&#xA;  hobbies: [&#39;Singing&#39;, &#39;Dancing&#39;],&#xA;  address: Address.new(city: &#39;London&#39;, street: &#39;Oxford Street&#39;, zip: &#39;E1 6AN&#39;),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting JSON to object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person = Person.from_json(&amp;lt;&amp;lt;~DATA)&#xA;{&#xA;  &#34;first_name&#34;: &#34;John&#34;,&#xA;  &#34;last_name&#34;: &#34;Doe&#34;,&#xA;  &#34;age&#34;: 50,&#xA;  &#34;married&#34;: false,&#xA;  &#34;hobbies&#34;: [&#34;Singing&#34;, &#34;Dancing&#34;],&#xA;  &#34;address&#34;: {&#xA;    &#34;city&#34;: &#34;London&#34;,&#xA;    &#34;street&#34;: &#34;Oxford Street&#34;,&#xA;    &#34;zip&#34;: &#34;E1 6AN&#34;&#xA;  }&#xA;}&#xA;DATA&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# #&amp;lt;Person:0x00007f9bc3086d60&#xA;#  @address=&#xA;#   #&amp;lt;Address:0x00007f9bc3086748&#xA;#    @city=&#34;London&#34;,&#xA;#    @street=&#34;Oxford Street&#34;,&#xA;#    @zip=&#34;E1 6AN&#34;&amp;gt;,&#xA;#  @age=50,&#xA;#  @first_name=&#34;John&#34;,&#xA;#  @hobbies=[&#34;Singing&#34;, &#34;Dancing&#34;],&#xA;#  @last_name=&#34;Doe&#34;,&#xA;#  @married=false&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting object to JSON&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person.to_json&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# {&#xA;#   &#34;first_name&#34;: &#34;John&#34;,&#xA;#   &#34;last_name&#34;: &#34;Doe&#34;,&#xA;#   &#34;age&#34;: 50,&#xA;#   &#34;married&#34;: false,&#xA;#   &#34;hobbies&#34;: [&#34;Singing&#34;, &#34;Dancing&#34;],&#xA;#   &#34;address&#34;: {&#xA;#     &#34;city&#34;: &#34;London&#34;,&#xA;#     &#34;street&#34;: &#34;Oxford Street&#34;,&#xA;#     &#34;zip&#34;: &#34;E1 6AN&#34;&#xA;#   }&#xA;# }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting YAML to object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person = Person.from_yaml(&amp;lt;&amp;lt;~DATA)&#xA;first_name: John&#xA;last_name: Doe&#xA;age: 50&#xA;married: false&#xA;hobbies:&#xA;- Singing&#xA;- Dancing&#xA;address:&#xA;  city: London&#xA;  street: Oxford Street&#xA;  zip: E1 6AN&#xA;DATA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting object to YAML&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person.to_yaml&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# ---&#xA;# first_name: John&#xA;# last_name: Doe&#xA;# age: 50&#xA;# married: false&#xA;# hobbies:&#xA;# - Singing&#xA;# - Dancing&#xA;# address:&#xA;#   city: London&#xA;#   street: Oxford Street&#xA;#   zip: E1 6AN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting Hash to object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person = Person.from_hash(&#xA;  &#39;first_name&#39; =&amp;gt; &#39;John&#39;,&#xA;  &#39;last_name&#39; =&amp;gt; &#39;Doe&#39;,&#xA;  &#39;age&#39; =&amp;gt; 50,&#xA;  &#39;married&#39; =&amp;gt; false,&#xA;  &#39;hobbies&#39; =&amp;gt; [&#39;Singing&#39;, &#39;Dancing&#39;],&#xA;  &#39;address&#39; =&amp;gt; {&#xA;    &#39;city&#39;=&amp;gt;&#39;London&#39;,&#xA;    &#39;street&#39;=&amp;gt;&#39;Oxford Street&#39;,&#xA;    &#39;zip&#39;=&amp;gt;&#39;E1 6AN&#39;&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting object to Hash&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person.to_hash&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# {&#xA;#   &#34;first_name&#34;=&amp;gt;&#34;John&#34;,&#xA;#   &#34;last_name&#34;=&amp;gt;&#34;Doe&#34;,&#xA;#   &#34;age&#34;=&amp;gt;50,&#xA;#   &#34;married&#34;=&amp;gt;false,&#xA;#   &#34;hobbies&#34;=&amp;gt;[&#34;Singing&#34;, &#34;Dancing&#34;],&#xA;#   &#34;address&#34;=&amp;gt;{&#34;city&#34;=&amp;gt;&#34;London&#34;, &#34;street&#34;=&amp;gt;&#34;Oxford Street&#34;, &#34;zip&#34;=&amp;gt;&#34;E1 6AN&#34;}&#xA;# }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting XML to object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person = Person.from_xml(&amp;lt;&amp;lt;~DATA)&#xA;&amp;lt;person&amp;gt;&#xA;  &amp;lt;first_name&amp;gt;John&amp;lt;/first_name&amp;gt;&#xA;  &amp;lt;last_name&amp;gt;Doe&amp;lt;/last_name&amp;gt;&#xA;  &amp;lt;age&amp;gt;50&amp;lt;/age&amp;gt;&#xA;  &amp;lt;married&amp;gt;false&amp;lt;/married&amp;gt;&#xA;  &amp;lt;hobbies&amp;gt;Singing&amp;lt;/hobbies&amp;gt;&#xA;  &amp;lt;hobbies&amp;gt;Dancing&amp;lt;/hobbies&amp;gt;&#xA;  &amp;lt;address&amp;gt;&#xA;    &amp;lt;city&amp;gt;London&amp;lt;/city&amp;gt;&#xA;    &amp;lt;street&amp;gt;Oxford Street&amp;lt;/street&amp;gt;&#xA;    &amp;lt;zip&amp;gt;E1 6AN&amp;lt;/zip&amp;gt;&#xA;  &amp;lt;/address&amp;gt;&#xA;&amp;lt;/person&amp;gt;&#xA;DATA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting object to XML&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person.to_xml&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# &amp;lt;person&amp;gt;&#xA;#   &amp;lt;first_name&amp;gt;John&amp;lt;/first_name&amp;gt;&#xA;#   &amp;lt;last_name&amp;gt;Doe&amp;lt;/last_name&amp;gt;&#xA;#   &amp;lt;age&amp;gt;50&amp;lt;/age&amp;gt;&#xA;#   &amp;lt;married&amp;gt;false&amp;lt;/married&amp;gt;&#xA;#   &amp;lt;hobbies&amp;gt;Singing&amp;lt;/hobbies&amp;gt;&#xA;#   &amp;lt;hobbies&amp;gt;Dancing&amp;lt;/hobbies&amp;gt;&#xA;#   &amp;lt;address&amp;gt;&#xA;#     &amp;lt;city&amp;gt;London&amp;lt;/city&amp;gt;&#xA;#     &amp;lt;street&amp;gt;Oxford Street&amp;lt;/street&amp;gt;&#xA;#     &amp;lt;zip&amp;gt;E1 6AN&amp;lt;/zip&amp;gt;&#xA;#   &amp;lt;/address&amp;gt;&#xA;# &amp;lt;/person&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mapping JSON keys to object attributes&lt;/h3&gt; &#xA;&lt;p&gt;By default keys are named the same as attributes. To use custom keys use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Person &amp;lt; Shale::Mapper&#xA;  attribute :first_name, Shale::Type::String&#xA;  attribute :last_name, Shale::Type::String&#xA;&#xA;  json do&#xA;    map &#39;firstName&#39;, to: :first_name&#xA;    map &#39;lastName&#39;, to: :last_name&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mapping YAML keys to object attributes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Person &amp;lt; Shale::Mapper&#xA;  attribute :first_name, Shale::Type::String&#xA;  attribute :last_name, Shale::Type::String&#xA;&#xA;  yaml do&#xA;    map &#39;firstName&#39;, to: :first_name&#xA;    map &#39;lastName&#39;, to: :last_name&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mapping Hash keys to object attributes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Person &amp;lt; Shale::Mapper&#xA;  attribute :first_name, Shale::Type::String&#xA;  attribute :last_name, Shale::Type::String&#xA;&#xA;  hsh do&#xA;    map &#39;firstName&#39;, to: :first_name&#xA;    map &#39;lastName&#39;, to: :last_name&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mapping XML elements and attributes to object attributes&lt;/h3&gt; &#xA;&lt;p&gt;XML is more complicated format than JSON or YAML. To map elements, attributes and content use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Address &amp;lt; Shale::Mapper&#xA;  attribute :street, Shale::Type::String&#xA;  attribute :city, Shale::Type::String&#xA;  attribute :zip, Shale::Type::String&#xA;&#xA;  xml do&#xA;    map_content to: :street&#xA;    map_element &#39;City&#39;, to: :city&#xA;    map_element &#39;ZIP&#39;, to: :zip&#xA;  end&#xA;end&#xA;&#xA;class Person &amp;lt; Shale::Mapper&#xA;  attribute :first_name, Shale::Type::String&#xA;  attribute :last_name, Shale::Type::String&#xA;  attribute :age, Shale::Type::Integer&#xA;  attribute :hobbies, Shale::Type::String, collection: true&#xA;  attribute :address, Address&#xA;&#xA;  xml do&#xA;    root &#39;Person&#39;&#xA;&#xA;    map_attribute &#39;age&#39;, to: :age&#xA;&#xA;    map_element &#39;FirstName&#39;, to: :first_name&#xA;    map_element &#39;LastName&#39;, to: :last_name&#xA;    map_element &#39;Hobby&#39;, to: :hobbies&#xA;    map_element &#39;Address&#39;, to: :address&#xA;  end&#xA;end&#xA;&#xA;person = Person.from_xml(&amp;lt;&amp;lt;~DATA)&#xA;&amp;lt;Person age=&#34;50&#34;&amp;gt;&#xA;  &amp;lt;FirstName&amp;gt;John&amp;lt;/FirstName&amp;gt;&#xA;  &amp;lt;LastName&amp;gt;Doe&amp;lt;/LastName&amp;gt;&#xA;  &amp;lt;Hobby&amp;gt;Singing&amp;lt;/Hobby&amp;gt;&#xA;  &amp;lt;Hobby&amp;gt;Dancing&amp;lt;/Hobby&amp;gt;&#xA;  &amp;lt;Address&amp;gt;&#xA;    Oxford Street&#xA;    &amp;lt;City&amp;gt;London&amp;lt;/City&amp;gt;&#xA;    &amp;lt;ZIP&amp;gt;E1 6AN&amp;lt;/ZIP&amp;gt;&#xA;  &amp;lt;/Address&amp;gt;&#xA;&amp;lt;/person&amp;gt;&#xA;DATA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;root&lt;/code&gt; - name of the root element&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;map_element&lt;/code&gt; - map content of element to attribute&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;map_attribute&lt;/code&gt; - map element&#39;s attribute to attribute&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;map_content&lt;/code&gt; - map first text node to attribute&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using XML namespaces&lt;/h3&gt; &#xA;&lt;p&gt;To map namespaced elements and attributes use &lt;code&gt;namespace&lt;/code&gt; and &lt;code&gt;prefix&lt;/code&gt; properties on &lt;code&gt;map_element&lt;/code&gt; and &lt;code&gt;map_attribute&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Person &amp;lt; Shale::Mapper&#xA;  attribute :first_name, Shale::Type::String&#xA;  attribute :last_name, Shale::Type::String&#xA;  attribute :age, Shale::Type::Integer&#xA;&#xA;  xml do&#xA;    root &#39;person&#39;&#xA;&#xA;    map_element &#39;first_name&#39;, to: :first_name, namespace: &#39;http://ns1.com&#39;, prefix: &#39;ns1&#39;&#xA;    map_element &#39;last_name&#39;, to: :last_name, namespace: &#39;http://ns2.com&#39;, prefix: &#39;ns2&#39;&#xA;    map_attribute &#39;age&#39;, to: :age, namespace: &#39;http://ns2.com&#39;, prefix: &#39;ns2&#39;&#xA;  end&#xA;end&#xA;&#xA;person = Person.from_xml(&amp;lt;&amp;lt;~DATA)&#xA;&amp;lt;person xmlns:ns1=&#34;http://ns1.com&#34; xmlns:ns2=&#34;http://ns2.com&#34; ns2:age=&#34;50&#34;&amp;gt;&#xA;  &amp;lt;ns1:first_name&amp;gt;John&amp;lt;/ns1:first_name&amp;gt;&#xA;  &amp;lt;ns2:last_name&amp;gt;Doe&amp;lt;/ns2:last_name&amp;gt;&#xA;&amp;lt;/person&amp;gt;&#xA;DATA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To define default namespace for all elements use &lt;code&gt;namespace&lt;/code&gt; declaration (this will define namespace on elements only, if you want to define namespace on an attribute explicitly declare it on &lt;code&gt;map_attribute&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Person &amp;lt; Shale::Mapper&#xA;  attribute :first_name, Shale::Type::String&#xA;  attribute :middle_name, Shale::Type::String&#xA;  attribute :last_name, Shale::Type::String&#xA;  attribute :age, Shale::Type::Integer&#xA;  attribute :hobby, Shale::Type::String&#xA;&#xA;  xml do&#xA;    root &#39;person&#39;&#xA;    namespace &#39;http://ns1.com&#39;, &#39;ns1&#39;&#xA;&#xA;    map_element &#39;first_name&#39;, to: :first_name&#xA;&#xA;    # undeclare namespace on &#39;middle_name&#39; element&#xA;    map_element &#39;middle_name&#39;, to: :middle_name, namespace: nil, prefix: nil&#xA;&#xA;    # overwrite default namespace&#xA;    map_element &#39;last_name&#39;, to: :last_name, namespace: &#39;http://ns2.com&#39;, prefix: &#39;ns2&#39;&#xA;&#xA;    map_attribute &#39;age&#39;, to: :age&#xA;    map_attribute &#39;hobby&#39;, to: :hobby, namespace: &#39;http://ns1.com&#39;, prefix: &#39;ns1&#39;&#xA;  end&#xA;end&#xA;&#xA;person = Person.from_xml(&amp;lt;&amp;lt;~DATA)&#xA;&amp;lt;ns1:person xmlns:ns1=&#34;http://ns1.com&#34; xmlns:ns2=&#34;http://ns2.com&#34; age=&#34;50&#34; ns1:hobby=&#34;running&#34;&amp;gt;&#xA;  &amp;lt;ns1:first_name&amp;gt;John&amp;lt;/ns1:first_name&amp;gt;&#xA;  &amp;lt;middle_name&amp;gt;Joe&amp;lt;/middle_name&amp;gt;&#xA;  &amp;lt;ns2:last_name&amp;gt;Doe&amp;lt;/ns2:last_name&amp;gt;&#xA;&amp;lt;/ns1:person&amp;gt;&#xA;DATA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using methods to extract and generate data&lt;/h3&gt; &#xA;&lt;p&gt;If you need full controll over extracting and generating data from/to document, you can use methods to do so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Person &amp;lt; Shale::Mapper&#xA;  attribute :hobbies, Shale::Type::String, collection: true&#xA;  attribute :street, Shale::Type::String&#xA;  attribute :city, Shale::Type::String&#xA;&#xA;  json do&#xA;    map &#39;hobbies&#39;, using: { from: :hobbies_from_json, to: :hobbies_to_json }&#xA;    map &#39;address&#39;, using: { from: :address_from_json, to: :address_to_json }&#xA;  end&#xA;&#xA;  xml do&#xA;    root &#39;Person&#39;&#xA;&#xA;    map_attribute &#39;hobbies&#39;, using: { from: :hobbies_from_xml, to: :hobbies_to_xml }&#xA;    map_element &#39;Address&#39;, using: { from: :address_from_xml, to: :address_to_xml }&#xA;  end&#xA;&#xA;  def hobbies_from_json(value)&#xA;    self.hobbies = value.split(&#39;,&#39;).map(&amp;amp;:strip)&#xA;  end&#xA;&#xA;  def hobbies_to_json&#xA;    hobbies.join(&#39;, &#39;)&#xA;  end&#xA;&#xA;  def address_from_json(value)&#xA;    self.street = value[&#39;street&#39;]&#xA;    self.city = value[&#39;city&#39;]&#xA;  end&#xA;&#xA;  def address_to_json&#xA;    { &#39;street&#39; =&amp;gt; street, &#39;city&#39; =&amp;gt; city }&#xA;  end&#xA;&#xA;  def hobbies_from_xml(value)&#xA;    self.hobbies = value.split(&#39;,&#39;).map(&amp;amp;:strip)&#xA;  end&#xA;&#xA;  def hobbies_to_xml(element, doc)&#xA;    doc.add_attribute(element, &#39;hobbies&#39;, hobbies.join(&#39;, &#39;))&#xA;  end&#xA;&#xA;  def address_from_xml(node)&#xA;    self.street = node.children.find { |e| e.name == &#39;Street&#39; }.text&#xA;    self.city = node.children.find { |e| e.name == &#39;City&#39; }.text&#xA;  end&#xA;&#xA;  def address_to_xml(parent, doc)&#xA;    street_element = doc.create_element(&#39;Street&#39;)&#xA;    doc.add_text(street_element, street.to_s)&#xA;&#xA;    city_element = doc.create_element(&#39;City&#39;)&#xA;    doc.add_text(city_element, city.to_s)&#xA;&#xA;    address_element = doc.create_element(&#39;Address&#39;)&#xA;    doc.add_element(address_element, street_element)&#xA;    doc.add_element(address_element, city_element)&#xA;    doc.add_element(parent, address_element)&#xA;  end&#xA;end&#xA;&#xA;person = Person.from_json(&amp;lt;&amp;lt;~DATA)&#xA;{&#xA;  &#34;hobbies&#34;: &#34;Singing, Dancing, Running&#34;,&#xA;  &#34;address&#34;: {&#xA;    &#34;street&#34;: &#34;Oxford Street&#34;,&#xA;    &#34;city&#34;: &#34;London&#34;&#xA;  }&#xA;}&#xA;DATA&#xA;&#xA;person = Person.from_xml(&amp;lt;&amp;lt;~DATA)&#xA;&amp;lt;Person hobbies=&#34;Singing, Dancing, Running&#34;&amp;gt;&#xA;  &amp;lt;Address&amp;gt;&#xA;    &amp;lt;Street&amp;gt;Oxford Street&amp;lt;/Street&amp;gt;&#xA;    &amp;lt;City&amp;gt;London&amp;lt;/City&amp;gt;&#xA;  &amp;lt;/Address&amp;gt;&#xA;&amp;lt;/person&amp;gt;&#xA;DATA&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# #&amp;lt;Person:0x00007f9bc3086d60&#xA;#  @hobbies=[&#34;Singing&#34;, &#34;Dancing&#34;, &#34;Running&#34;],&#xA;#  @street=&#34;Oxford Street&#34;,&#xA;#  @city=&#34;London&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pretty printing and XML declaration&lt;/h3&gt; &#xA;&lt;p&gt;If you need formatted output you can pass &lt;code&gt;:pretty&lt;/code&gt; parameter to &lt;code&gt;#to_json&lt;/code&gt; and &lt;code&gt;#to_xml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person.to_json(:pretty)&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# {&#xA;#   &#34;name&#34;: &#34;John Doe&#34;,&#xA;#   &#34;address&#34;: {&#xA;#     &#34;city&#34;: &#34;London&#34;&#xA;#   }&#xA;# }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add an XML declaration by passing &lt;code&gt;:declaration&lt;/code&gt; to &lt;code&gt;#to_xml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person.to_xml(:pretty, :declaration)&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# &amp;lt;?xml version=&#34;1.0&#34;?&amp;gt;&#xA;# &amp;lt;Person&amp;gt;&#xA;#   &amp;lt;Address city=&#34;London&#34;/&amp;gt;&#xA;# &amp;lt;/Person&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported types&lt;/h3&gt; &#xA;&lt;p&gt;Shale supports these types out of the box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Shale::Type::Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shale::Type::Date&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shale::Type::Float&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shale::Type::Integer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shale::Type::String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shale::Type::Time&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Writing your own type&lt;/h3&gt; &#xA;&lt;p&gt;To add your own type extend it from &lt;code&gt;Shale::Type::Value&lt;/code&gt; and implement &lt;code&gt;.cast&lt;/code&gt; class method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;shale/type/value&#39;&#xA;&#xA;class MyIntegerType &amp;lt; Shale::Type::Value&#xA;  def self.cast(value)&#xA;    value.to_i&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adapters&lt;/h3&gt; &#xA;&lt;p&gt;Shale uses adapters for parsing and generating documents. By default Ruby&#39;s standard JSON parser is used for handling JSON documents, YAML for YAML and REXML for XML.&lt;/p&gt; &#xA;&lt;p&gt;You can change it by providing your own adapter. For JSON and YAML, adapter must implement &lt;code&gt;.load&lt;/code&gt; and &lt;code&gt;.dump&lt;/code&gt; class methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;shale&#39;&#xA;require &#39;multi_json&#39;&#xA;&#xA;Shale.json_adapter = MultiJson&#xA;Shale.yaml_adapter = MyYamlAdapter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shale provides adapters for most popular Ruby XML parsers:&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Ox doesn&#39;t support XML namespaces&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;shale&#39;&#xA;&#xA;# REXML is used by default:&#xA;&#xA;require &#39;shale/adapter/rexml&#39;&#xA;Shale.xml_adapter = Shale::Adapter::REXML&#xA;&#xA;# if you want to use Nokogiri:&#xA;&#xA;require &#39;shale/adapter/nokogiri&#39;&#xA;Shale.xml_adapter = Shale::Adapter::Nokogiri&#xA;&#xA;# or if you want to use Ox:&#xA;&#xA;require &#39;shale/adapter/ox&#39;&#xA;Shale.xml_adapter = Shale::Adapter::Ox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating JSON Schema&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Only &lt;strong&gt;&lt;a href=&#34;https://json-schema.org/draft/2020-12/schema&#34;&gt;Draft 2020-12&lt;/a&gt;&lt;/strong&gt; JSON Schema is supported&lt;/p&gt; &#xA;&lt;p&gt;To generate JSON Schema from your Shale data model use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;shale/schema&#39;&#xA;&#xA;Shale::Schema.to_json(&#xA;  Person,&#xA;  id: &#39;http://foo.bar/schema/person&#39;,&#xA;  description: &#39;My description&#39;,&#xA;  pretty: true&#xA;)&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# {&#xA;#   &#34;$schema&#34;: &#34;https://json-schema.org/draft/2020-12/schema&#34;,&#xA;#   &#34;$id&#34;: &#34;http://foo.bar/schema/person&#34;,&#xA;#   &#34;description&#34;: &#34;My description&#34;,&#xA;#   &#34;$ref&#34;: &#34;#/$defs/Person&#34;,&#xA;#   &#34;$defs&#34;: {&#xA;#     &#34;Address&#34;: {&#xA;#       &#34;type&#34;: [&#xA;#         &#34;object&#34;,&#xA;#         &#34;null&#34;&#xA;#       ],&#xA;#       &#34;properties&#34;: {&#xA;#         &#34;city&#34;: {&#xA;#           &#34;type&#34;: [&#xA;#             &#34;string&#34;,&#xA;#             &#34;null&#34;&#xA;#           ]&#xA;#         }&#xA;#       }&#xA;#     },&#xA;#     &#34;Person&#34;: {&#xA;#       &#34;type&#34;: &#34;object&#34;,&#xA;#       &#34;properties&#34;: {&#xA;#         &#34;name&#34;: {&#xA;#           &#34;type&#34;: [&#xA;#             &#34;string&#34;,&#xA;#             &#34;null&#34;&#xA;#           ]&#xA;#         },&#xA;#         &#34;address&#34;: {&#xA;#           &#34;$ref&#34;: &#34;#/$defs/Address&#34;&#xA;#         }&#xA;#       }&#xA;#     }&#xA;#   }&#xA;# }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a command line tool to do it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ shaleb -i data_model.rb -r Person -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to convert your own types to JSON Schema types use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;shale&#39;&#xA;require &#39;shale/schema&#39;&#xA;&#xA;class MyEmailType &amp;lt; Shale::Type::Value&#xA;  ...&#xA;end&#xA;&#xA;class MyEmailJSONType &amp;lt; Shale::Schema::JSONGenerator::Base&#xA;  def as_type&#xA;    { &#39;type&#39; =&amp;gt; &#39;string&#39;, &#39;format&#39; =&amp;gt; &#39;email&#39; }&#xA;  end&#xA;end&#xA;&#xA;Shale::Schema::JSONGenerator.register_json_type(MyEmailType, MyEmailJSONType)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling JSON Schema into Shale model&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Only &lt;strong&gt;&lt;a href=&#34;https://json-schema.org/draft/2020-12/schema&#34;&gt;Draft 2020-12&lt;/a&gt;&lt;/strong&gt; JSON Schema is supported&lt;/p&gt; &#xA;&lt;p&gt;To generate Shale data model from JSON Schema use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;shale/schema&#39;&#xA;&#xA;schema = &amp;lt;&amp;lt;~SCHEMA&#xA;{&#xA;  &#34;type&#34;: &#34;object&#34;,&#xA;  &#34;properties&#34;: {&#xA;    &#34;firstName&#34;: { &#34;type&#34;: &#34;string&#34; },&#xA;    &#34;lastName&#34;: { &#34;type&#34;: &#34;string&#34; },&#xA;    &#34;address&#34;: {&#xA;      &#34;type&#34;: &#34;object&#34;,&#xA;      &#34;properties&#34;: {&#xA;        &#34;street&#34;: { &#34;type&#34;: &#34;string&#34; },&#xA;        &#34;city&#34;: { &#34;type&#34;: &#34;string&#34; }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;SCHEMA&#xA;&#xA;Shale::Schema.from_json([schema], root_name: &#39;Person&#39;)&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# {&#xA;#   &#34;address&#34; =&amp;gt; &#34;&#xA;#     require &#39;shale&#39;&#xA;#&#xA;#     class Address &amp;lt; Shale::Mapper&#xA;#       attribute :street, Shale::Type::String&#xA;#       attribute :city, Shale::Type::String&#xA;#&#xA;#       json do&#xA;#         map &#39;street&#39;, to: :street&#xA;#         map &#39;city&#39;, to: :city&#xA;#       end&#xA;#     end&#xA;#   &#34;,&#xA;#   &#34;person&#34; =&amp;gt; &#34;&#xA;#     require &#39;shale&#39;&#xA;#&#xA;#     require_relative &#39;address&#39;&#xA;#&#xA;#     class Person &amp;lt; Shale::Mapper&#xA;#       attribute :first_name, Shale::Type::String&#xA;#       attribute :last_name, Shale::Type::String&#xA;#       attribute :address, Address&#xA;#&#xA;#       json do&#xA;#         map &#39;firstName&#39;, to: :first_name&#xA;#         map &#39;lastName&#39;, to: :last_name&#xA;#         map &#39;address&#39;, to: :address&#xA;#       end&#xA;#     end&#xA;#   &#34;&#xA;# }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a command line tool to do it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ shaleb -c -i schema.json -r Person&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating XML Schema&lt;/h3&gt; &#xA;&lt;p&gt;To generate XML Schema from your Shale data model use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;shale/schema&#39;&#xA;&#xA;Shale::Schema.to_xml(Person, pretty: true)&#xA;&#xA;# =&amp;gt;&#xA;#&#xA;# {&#xA;#   &#39;schema0.xsd&#39; =&amp;gt; &#39;&#xA;#     &amp;lt;xs:schema&#xA;#       elementFormDefault=&#34;qualified&#34;&#xA;#       attributeFormDefault=&#34;qualified&#34;&#xA;#       xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;&#xA;#       xmlns:foo=&#34;http://foo.com&#34;&#xA;#     &amp;gt;&#xA;#       &amp;lt;xs:import namespace=&#34;http://foo.com&#34; schemaLocation=&#34;schema1.xsd&#34;/&amp;gt;&#xA;#       &amp;lt;xs:element name=&#34;person&#34; type=&#34;Person&#34;/&amp;gt;&#xA;#       &amp;lt;xs:complexType name=&#34;Person&#34;&amp;gt;&#xA;#         &amp;lt;xs:sequence&amp;gt;&#xA;#           &amp;lt;xs:element name=&#34;name&#34; type=&#34;xs:string&#34; minOccurs=&#34;0&#34;/&amp;gt;&#xA;#           &amp;lt;xs:element ref=&#34;foo:address&#34; minOccurs=&#34;0&#34;/&amp;gt;&#xA;#         &amp;lt;/xs:sequence&amp;gt;&#xA;#       &amp;lt;/xs:complexType&amp;gt;&#xA;#     &amp;lt;/xs:schema&amp;gt;&#39;,&#xA;#&#xA;#   &#39;schema1.xsd&#39; =&amp;gt; &#39;&#xA;#     &amp;lt;xs:schema&#xA;#       elementFormDefault=&#34;qualified&#34;&#xA;#       attributeFormDefault=&#34;qualified&#34;&#xA;#       targetNamespace=&#34;http://foo.com&#34;&#xA;#       xmlns:xs=&#34;http://www.w3.org/2001/XMLSchema&#34;&#xA;#       xmlns:foo=&#34;http://foo.com&#34;&#xA;#     &amp;gt;&#xA;#       &amp;lt;xs:element name=&#34;address&#34; type=&#34;foo:Address&#34;/&amp;gt;&#xA;#       &amp;lt;xs:complexType name=&#34;Address&#34;&amp;gt;&#xA;#         &amp;lt;xs:sequence&amp;gt;&#xA;#           &amp;lt;xs:element name=&#34;city&#34; type=&#34;xs:string&#34; minOccurs=&#34;0&#34;/&amp;gt;&#xA;#         &amp;lt;/xs:sequence&amp;gt;&#xA;#       &amp;lt;/xs:complexType&amp;gt;&#xA;#     &amp;lt;/xs:schema&amp;gt;&#39;&#xA;# }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a command line tool to do it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ shaleb -i data_model.rb -r Person -p -f xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to convert your own types to XML Schema types use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;shale&#39;&#xA;require &#39;shale/schema&#39;&#xA;&#xA;class MyEmailType &amp;lt; Shale::Type::Value&#xA;  ...&#xA;end&#xA;&#xA;Shale::Schema::XMLGenerator.register_xml_type(MyEmailType, &#39;myEmailXMLType&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/kgiszczak/shale&#34;&gt;https://github.com/kgiszczak/shale&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kaminari/kaminari</title>
    <updated>2022-06-04T01:32:36Z</updated>
    <id>tag:github.com,2022-06-04:/kaminari/kaminari</id>
    <link href="https://github.com/kaminari/kaminari" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡ A Scope &amp; Engine based, clean, powerful, customizable and sophisticated paginator for Ruby webapps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kaminari &lt;a href=&#34;https://github.com/kaminari/kaminari/actions&#34;&gt;&lt;img src=&#34;https://github.com/kaminari/kaminari/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/kaminari/kaminari&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/kaminari/kaminari/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A Scope &amp;amp; Engine based, clean, powerful, customizable and sophisticated paginator for modern web app frameworks and ORMs&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Clean&lt;/h3&gt; &#xA;&lt;p&gt;Does not globally pollute &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;AR::Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Easy to Use&lt;/h3&gt; &#xA;&lt;p&gt;Just bundle the gem, then your models are ready to be paginated. No configuration required. Don&#39;t have to define anything in your models or helpers.&lt;/p&gt; &#xA;&lt;h3&gt;Simple Scope-based API&lt;/h3&gt; &#xA;&lt;p&gt;Everything is method chainable with less &#34;Hasheritis&#34;. You know, that&#39;s the modern Rails way. No special collection class or anything for the paginated values, instead using a general &lt;code&gt;AR::Relation&lt;/code&gt; instance. So, of course you can chain any other conditions before or after the paginator scope.&lt;/p&gt; &#xA;&lt;h3&gt;Customizable Engine-based I18n-aware Helpers&lt;/h3&gt; &#xA;&lt;p&gt;As the whole pagination helper is basically just a collection of links and non-links, Kaminari renders each of them through its own partial template inside the Engine. So, you can easily modify their behaviour, style or whatever by overriding partial templates.&lt;/p&gt; &#xA;&lt;h3&gt;ORM &amp;amp; Template Engine Agnostic&lt;/h3&gt; &#xA;&lt;p&gt;Kaminari supports multiple ORMs (ActiveRecord, DataMapper, Mongoid, MongoMapper) multiple web frameworks (Rails, Sinatra, Grape), and multiple template engines (ERB, Haml, Slim).&lt;/p&gt; &#xA;&lt;h3&gt;Modern&lt;/h3&gt; &#xA;&lt;p&gt;The pagination helper outputs the HTML5 &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tag by default. Plus, the helper supports Rails unobtrusive Ajax.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ruby 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 3.0, 3.1, 3.2&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rails 4.1, 4.2, 5.0, 5.1, 5.2, 6.0, 6.1, 7.0, 7.1&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sinatra 1.4, 2.0&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Haml 3+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mongoid 3+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MongoMapper 0.9+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DataMapper 1.1.0+&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install kaminari on the default Rails stack, just put this line in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then bundle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re building non-Rails of non-ActiveRecord app and want the pagination feature on it, please take a look at &lt;a href=&#34;https://raw.githubusercontent.com/kaminari/kaminari/master/#other-frameworklibrary-support&#34;&gt;Other Framework/Library Support&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Query Basics&lt;/h2&gt; &#xA;&lt;h3&gt;The &lt;code&gt;page&lt;/code&gt; Scope&lt;/h3&gt; &#xA;&lt;p&gt;To fetch the 7th page of users (default &lt;code&gt;per_page&lt;/code&gt; is 25)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.page(7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: pagination starts at page 1, not at page 0 (page(0) will return the same results as page(1)).&lt;/p&gt; &#xA;&lt;p&gt;Kaminari does not add an &lt;code&gt;order&lt;/code&gt; to queries. To avoid surprises, you should generally include an order in paginated queries. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.order(:name).page(7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get page numbers or page conditions by using below methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.count                     #=&amp;gt; 1000&#xA;User.page(1).limit_value       #=&amp;gt; 20&#xA;User.page(1).total_pages       #=&amp;gt; 50&#xA;User.page(1).current_page      #=&amp;gt; 1&#xA;User.page(1).next_page         #=&amp;gt; 2&#xA;User.page(2).prev_page         #=&amp;gt; 1&#xA;User.page(1).first_page?       #=&amp;gt; true&#xA;User.page(50).last_page?       #=&amp;gt; true&#xA;User.page(100).out_of_range?   #=&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;per&lt;/code&gt; Scope&lt;/h3&gt; &#xA;&lt;p&gt;To show a lot more users per each page (change the &lt;code&gt;per&lt;/code&gt; value)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.order(:name).page(7).per(50)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;per&lt;/code&gt; scope is not directly defined on the models but is just a method defined on the page scope. This is absolutely reasonable because you will never actually use &lt;code&gt;per&lt;/code&gt; without specifying the &lt;code&gt;page&lt;/code&gt; number.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that &lt;code&gt;per&lt;/code&gt; internally utilizes &lt;code&gt;limit&lt;/code&gt; and so it will override any &lt;code&gt;limit&lt;/code&gt; that was set previously. And if you want to get the size for all request records you can use &lt;code&gt;total_count&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.count                     #=&amp;gt; 1000&#xA;a = User.limit(5); a.count     #=&amp;gt; 5&#xA;a.page(1).per(20).size         #=&amp;gt; 20&#xA;a.page(1).per(20).total_count  #=&amp;gt; 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;padding&lt;/code&gt; Scope&lt;/h3&gt; &#xA;&lt;p&gt;Occasionally you need to pad a number of records that is not a multiple of the page size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.order(:name).page(7).per(50).padding(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;padding&lt;/code&gt; scope also is not directly defined on the models.&lt;/p&gt; &#xA;&lt;h3&gt;Unscoping&lt;/h3&gt; &#xA;&lt;p&gt;If for some reason you need to unscope &lt;code&gt;page&lt;/code&gt; and &lt;code&gt;per&lt;/code&gt; methods you can call &lt;code&gt;except(:limit, :offset)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;users = User.order(:name).page(7).per(50)&#xA;unpaged_users = users.except(:limit, :offset) # unpaged_users will not use the kaminari scopes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuring Kaminari&lt;/h2&gt; &#xA;&lt;h3&gt;General Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;You can configure the following default values by overriding these values using &lt;code&gt;Kaminari.configure&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;default_per_page      # 25 by default&#xA;max_per_page          # nil by default&#xA;max_pages             # nil by default&#xA;window                # 4 by default&#xA;outer_window          # 0 by default&#xA;left                  # 0 by default&#xA;right                 # 0 by default&#xA;page_method_name      # :page by default&#xA;param_name            # :page by default&#xA;params_on_first_page  # false by default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s a handy generator that generates the default configuration file into config/initializers directory. Run the following generator command, then edit the generated file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changing &lt;code&gt;page_method_name&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can change the method name &lt;code&gt;page&lt;/code&gt; to &lt;code&gt;bonzo&lt;/code&gt; or &lt;code&gt;plant&lt;/code&gt; or whatever you like, in order to play nice with existing &lt;code&gt;page&lt;/code&gt; method or association or scope or any other plugin that defines &lt;code&gt;page&lt;/code&gt; method on your models.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring Default per_page Value for Each Model by &lt;code&gt;paginates_per&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can specify default &lt;code&gt;per_page&lt;/code&gt; value per each model using the following declarative DSL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  paginates_per 50&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Max per_page Value for Each Model by &lt;code&gt;max_paginates_per&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can specify max &lt;code&gt;per_page&lt;/code&gt; value per each model using the following declarative DSL. If the variable that specified via &lt;code&gt;per&lt;/code&gt; scope is more than this variable, &lt;code&gt;max_paginates_per&lt;/code&gt; is used instead of it. Default value is nil, which means you are not imposing any max &lt;code&gt;per_page&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  max_paginates_per 100&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring max_pages Value for Each Model by &lt;code&gt;max_pages&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;max_pages&lt;/code&gt; value per each model using the following declarative DSL. This value restricts the total number of pages that can be returned. Useful for setting limits on large collections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  max_pages 100&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring params_on_first_page when using ransack_memory&lt;/h3&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/richardrails/ransack_memory&#34;&gt;the &lt;code&gt;ransack_memory&lt;/code&gt; gem&lt;/a&gt; and experience problems navigating back to the previous or first page, set the &lt;code&gt;params_on_first_page&lt;/code&gt; setting to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Controllers&lt;/h2&gt; &#xA;&lt;h3&gt;The Page Parameter Is in &lt;code&gt;params[:page]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Typically, your controller code will look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@users = User.order(:name).page params[:page]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Views&lt;/h2&gt; &#xA;&lt;h3&gt;The Same Old Helper Method&lt;/h3&gt; &#xA;&lt;p&gt;Just call the &lt;code&gt;paginate&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will render several &lt;code&gt;?page=N&lt;/code&gt; pagination links surrounded by an HTML5 &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;h3&gt;The &lt;code&gt;paginate&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output several pagination links such as &lt;code&gt;« First ‹ Prev ... 2 3 4 5 6 7 8 9 10 ... Next › Last »&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Specifying the &#34;inner window&#34; Size (4 by default)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, window: 2 %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output something like &lt;code&gt;... 5 6 7 8 9 ...&lt;/code&gt; when 7 is the current page.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying the &#34;outer window&#34; Size (0 by default)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, outer_window: 3 %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output something like &lt;code&gt;1 2 3 ...(snip)... 18 19 20&lt;/code&gt; while having 20 pages in total.&lt;/p&gt; &#xA;&lt;h3&gt;Outer Window Can Be Separately Specified by left, right (0 by default)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, left: 1, right: 3 %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output something like &lt;code&gt;1 ...(snip)... 18 19 20&lt;/code&gt; while having 20 pages in total.&lt;/p&gt; &#xA;&lt;h3&gt;Changing the Parameter Name (&lt;code&gt;:param_name&lt;/code&gt;) for the Links&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, param_name: :pagina %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would modify the query parameter name on each links.&lt;/p&gt; &#xA;&lt;h3&gt;Extra Parameters (&lt;code&gt;:params&lt;/code&gt;) for the Links&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, params: {controller: &#39;foo&#39;, action: &#39;bar&#39;, format: :turbo_stream} %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would modify each link&#39;s &lt;code&gt;url_option&lt;/code&gt;. :&lt;code&gt;controller&lt;/code&gt; and :&lt;code&gt;action&lt;/code&gt; might be the keys in common.&lt;/p&gt; &#xA;&lt;h3&gt;Ajax Links (crazy simple, but works perfectly!)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, remote: true %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would add &lt;code&gt;data-remote=&#34;true&#34;&lt;/code&gt; to all the links inside.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying an Alternative Views Directory (default is kaminari/)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, views_prefix: &#39;templates&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would search for partials in &lt;code&gt;app/views/templates/kaminari&lt;/code&gt;. This option makes it easier to do things like A/B testing pagination templates/themes, using new/old templates at the same time as well as better integration with other gems such as &lt;a href=&#34;https://github.com/apotonick/cells&#34;&gt;cells&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;link_to_next_page&lt;/code&gt; and &lt;code&gt;link_to_previous_page&lt;/code&gt; (aliased to &lt;code&gt;link_to_prev_page&lt;/code&gt;) Helper Methods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= link_to_next_page @items, &#39;Next Page&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This simply renders a link to the next page. This would be helpful for creating a Twitter-like pagination feature.&lt;/p&gt; &#xA;&lt;p&gt;The helper methods support a &lt;code&gt;params&lt;/code&gt; option to further specify the link. If &lt;code&gt;format&lt;/code&gt; needs to be set, inlude it in the &lt;code&gt;params&lt;/code&gt; hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= link_to_next_page @items, &#39;Next Page&#39;, params: {controller: &#39;foo&#39;, action: &#39;bar&#39;, format: :turbo_stream} %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;page_entries_info&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= page_entries_info @posts %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This renders a helpful message with numbers of displayed vs. total entries.&lt;/p&gt; &#xA;&lt;p&gt;By default, the message will use the humanized class name of objects in collection: for instance, &#34;project types&#34; for ProjectType models. The namespace will be cut out and only the last name will be used. Override this with the &lt;code&gt;:entry_name&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= page_entries_info @posts, entry_name: &#39;item&#39; %&amp;gt;&#xA;#=&amp;gt; Displaying items 6 - 10 of 26 in total&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;rel_next_prev_link_tags&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= rel_next_prev_link_tags @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This renders the rel next and prev link tags for the head.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;path_to_next_page&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= path_to_next_page @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns the server relative path to the next page.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;path_to_prev_page&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= path_to_prev_page @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns the server relative path to the previous page.&lt;/p&gt; &#xA;&lt;h2&gt;I18n and Labels&lt;/h2&gt; &#xA;&lt;p&gt;The default labels for &#39;first&#39;, &#39;last&#39;, &#39;previous&#39;, &#39;...&#39; and &#39;next&#39; are stored in the I18n yaml inside the engine, and rendered through I18n API. You can switch the label value per I18n.locale for your internationalized application. Keys and the default values are the following. You can override them by adding to a YAML file in your &lt;code&gt;Rails.root/config/locales&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  views:&#xA;    pagination:&#xA;      first: &#34;&amp;amp;laquo; First&#34;&#xA;      last: &#34;Last &amp;amp;raquo;&#34;&#xA;      previous: &#34;&amp;amp;lsaquo; Prev&#34;&#xA;      next: &#34;Next &amp;amp;rsaquo;&#34;&#xA;      truncate: &#34;&amp;amp;hellip;&#34;&#xA;  helpers:&#xA;    page_entries_info:&#xA;      one_page:&#xA;        display_entries:&#xA;          zero: &#34;No %{entry_name} found&#34;&#xA;          one: &#34;Displaying &amp;lt;b&amp;gt;1&amp;lt;/b&amp;gt; %{entry_name}&#34;&#xA;          other: &#34;Displaying &amp;lt;b&amp;gt;all %{count}&amp;lt;/b&amp;gt; %{entry_name}&#34;&#xA;      more_pages:&#xA;        display_entries: &#34;Displaying %{entry_name} &amp;lt;b&amp;gt;%{first}&amp;amp;nbsp;-&amp;amp;nbsp;%{last}&amp;lt;/b&amp;gt; of &amp;lt;b&amp;gt;%{total}&amp;lt;/b&amp;gt; in total&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use non-English localization see &lt;a href=&#34;https://github.com/svenfuchs/i18n/raw/master/test/test_data/locales/plurals.rb&#34;&gt;i18n rules&lt;/a&gt; for changing &lt;code&gt;one_page:display_entries&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing the Pagination Helper&lt;/h2&gt; &#xA;&lt;p&gt;Kaminari includes a handy template generator.&lt;/p&gt; &#xA;&lt;h3&gt;To Edit Your Paginator&lt;/h3&gt; &#xA;&lt;p&gt;Run the generator first,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then edit the partials in your app&#39;s &lt;code&gt;app/views/kaminari/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;For Haml/Slim Users&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/haml/html2haml&#34;&gt;html2haml gem&lt;/a&gt; or the &lt;a href=&#34;https://github.com/slim-template/html2slim&#34;&gt;html2slim gem&lt;/a&gt; to convert erb templates. The kaminari gem will automatically pick up haml/slim templates if you place them in &lt;code&gt;app/views/kaminari/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Templates&lt;/h3&gt; &#xA;&lt;p&gt;In case you need different templates for your paginator (for example public and admin), you can pass &lt;code&gt;--views-prefix directory&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views default --views-prefix admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;that will generate partials in &lt;code&gt;app/views/admin/kaminari/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Themes&lt;/h3&gt; &#xA;&lt;p&gt;The generator has the ability to fetch several sample template themes from the external repository (&lt;a href=&#34;https://github.com/amatsuda/kaminari_themes&#34;&gt;https://github.com/amatsuda/kaminari_themes&lt;/a&gt;) in addition to the bundled &#34;default&#34; one, which will help you creating a nice looking paginator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views THEME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the full list of available themes, take a look at the themes repository, or just hit the generator without specifying &lt;code&gt;THEME&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Themes&lt;/h3&gt; &#xA;&lt;p&gt;To utilize multiple themes from within a single application, create a directory within the app/views/kaminari/ and move your custom template files into that directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views default (skip if you have existing kaminari views)&#xA;% cd app/views/kaminari&#xA;% mkdir my_custom_theme&#xA;% cp _*.html.* my_custom_theme/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, reference that directory when calling the &lt;code&gt;paginate&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, theme: &#39;my_custom_theme&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Customize away!&lt;/p&gt; &#xA;&lt;p&gt;Note: if the theme isn&#39;t present or none is specified, kaminari will default back to the views included within the gem.&lt;/p&gt; &#xA;&lt;h2&gt;Paginating Without Issuing SELECT COUNT Query&lt;/h2&gt; &#xA;&lt;p&gt;Generally the paginator needs to know the total number of records to display the links, but sometimes we don&#39;t need the total number of records and just need the &#34;previous page&#34; and &#34;next page&#34; links. For such use case, Kaminari provides &lt;code&gt;without_count&lt;/code&gt; mode that creates a paginatable collection without counting the number of all records. This may be helpful when you&#39;re dealing with a very large dataset because counting on a big table tends to become slow on RDBMS.&lt;/p&gt; &#xA;&lt;p&gt;Just add &lt;code&gt;.without_count&lt;/code&gt; to your paginated object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.page(3).without_count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your view file, you can only use simple helpers like the following instead of the full-featured &lt;code&gt;paginate&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= link_to_prev_page @users, &#39;Previous Page&#39; %&amp;gt;&#xA;&amp;lt;%= link_to_next_page @users, &#39;Next Page&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Paginating a Generic Array object&lt;/h2&gt; &#xA;&lt;p&gt;Kaminari provides an Array wrapper class that adapts a generic Array object to the &lt;code&gt;paginate&lt;/code&gt; view helper. However, the &lt;code&gt;paginate&lt;/code&gt; helper doesn&#39;t automatically handle your Array object (this is intentional and by design). &lt;code&gt;Kaminari::paginate_array&lt;/code&gt; method converts your Array object into a paginatable Array that accepts &lt;code&gt;page&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@paginatable_array = Kaminari.paginate_array(my_array_object).page(params[:page]).per(10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify the &lt;code&gt;total_count&lt;/code&gt; value through options Hash. This would be helpful when handling an Array-ish object that has a different &lt;code&gt;count&lt;/code&gt; value from actual &lt;code&gt;count&lt;/code&gt; such as RSolr search result or when you need to generate a custom pagination. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@paginatable_array = Kaminari.paginate_array([], total_count: 145).page(params[:page]).per(10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, in the case of using an external API to source the page of data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page_size = 10&#xA;one_page = get_page_of_data params[:page], page_size&#xA;@paginatable_array = Kaminari.paginate_array(one_page.data, total_count: one_page.total_count).page(params[:page]).per(page_size)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating Friendly URLs and Caching&lt;/h2&gt; &#xA;&lt;p&gt;Because of the &lt;code&gt;page&lt;/code&gt; parameter and Rails routing, you can easily generate SEO and user-friendly URLs. For any resource you&#39;d like to paginate, just add the following to your &lt;code&gt;routes.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;resources :my_resources do&#xA;  get &#39;page/:page&#39;, action: :index, on: :collection&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Rails 4 or later, you can simplify route definitions by using &lt;code&gt;concern&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;concern :paginatable do&#xA;  get &#39;(page/:page)&#39;, action: :index, on: :collection, as: &#39;&#39;&#xA;end&#xA;&#xA;resources :my_resources, concerns: :paginatable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create URLs like &lt;code&gt;/my_resources/page/33&lt;/code&gt; instead of &lt;code&gt;/my_resources?page=33&lt;/code&gt;. This is now a friendly URL, but it also has other added benefits...&lt;/p&gt; &#xA;&lt;p&gt;Because the &lt;code&gt;page&lt;/code&gt; parameter is now a URL segment, we can leverage on Rails page &lt;a href=&#34;http://guides.rubyonrails.org/caching_with_rails.html#page-caching&#34;&gt;caching&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;NOTE: In this example, I&#39;ve pointed the route to my &lt;code&gt;:index&lt;/code&gt; action. You may have defined a custom pagination action in your controller - you should point &lt;code&gt;action: :your_custom_action&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Other Framework/Library Support&lt;/h2&gt; &#xA;&lt;h3&gt;The kaminari gem&lt;/h3&gt; &#xA;&lt;p&gt;Technically, the kaminari gem consists of 3 individual components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kaminari-core: the core pagination logic&#xA;kaminari-activerecord: Active Record adapter&#xA;kaminari-actionview: Action View adapter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, bundling &lt;code&gt;gem &#39;kaminari&#39;&lt;/code&gt; is equivalent to the following 2 lines (kaminari-core is referenced from the adapters):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari-activerecord&#39;&#xA;gem &#39;kaminari-actionview&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For Other ORM Users&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use other supported ORMs instead of ActiveRecord, for example Mongoid, bundle its adapter instead of kaminari-activerecord.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari-mongoid&#39;&#xA;gem &#39;kaminari-actionview&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kaminari currently provides adapters for the following ORMs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Active Record: &lt;a href=&#34;https://github.com/kaminari/kaminari/tree/master/kaminari-activerecord&#34;&gt;https://github.com/kaminari/kaminari/tree/master/kaminari-activerecord&lt;/a&gt; (included in this repo)&lt;/li&gt; &#xA; &lt;li&gt;Mongoid: &lt;a href=&#34;https://github.com/kaminari/kaminari-mongoid&#34;&gt;https://github.com/kaminari/kaminari-mongoid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MongoMapper: &lt;a href=&#34;https://github.com/kaminari/kaminari-mongo_mapper&#34;&gt;https://github.com/kaminari/kaminari-mongo_mapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DataMapper: &lt;a href=&#34;https://github.com/kaminari/kaminari-data_mapper&#34;&gt;https://github.com/kaminari/kaminari-data_mapper&lt;/a&gt; (would not work on kaminari 1.0.x)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Other Web Framework Users&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use other web frameworks instead of Rails + Action View, for example Sinatra, bundle its adapter instead of kaminari-actionview.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari-activerecord&#39;&#xA;gem &#39;kaminari-sinatra&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kaminari currently provides adapters for the following web frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Action View: &lt;a href=&#34;https://github.com/kaminari/kaminari/tree/master/kaminari-actionview&#34;&gt;https://github.com/kaminari/kaminari/tree/master/kaminari-actionview&lt;/a&gt; (included in this repo)&lt;/li&gt; &#xA; &lt;li&gt;Sinatra: &lt;a href=&#34;https://github.com/kaminari/kaminari-sinatra&#34;&gt;https://github.com/kaminari/kaminari-sinatra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grape: &lt;a href=&#34;https://github.com/kaminari/kaminari-grape&#34;&gt;https://github.com/kaminari/kaminari-grape&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;For More Information&lt;/h2&gt; &#xA;&lt;p&gt;Check out Kaminari recipes on the GitHub Wiki for more advanced tips and techniques. &lt;a href=&#34;https://github.com/kaminari/kaminari/wiki/Kaminari-recipes&#34;&gt;https://github.com/kaminari/kaminari/wiki/Kaminari-recipes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Questions, Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to message me on Github (amatsuda) or Twitter (&lt;a href=&#34;https://twitter.com/a_matsuda&#34;&gt;@a_matsuda&lt;/a&gt;) ☇☇☇ :)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Kaminari&lt;/h2&gt; &#xA;&lt;p&gt;Fork, fix, then send a pull request.&lt;/p&gt; &#xA;&lt;p&gt;To run the test suite locally against all supported frameworks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% bundle install&#xA;% rake test:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To target the test suite against one framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rake test:active_record_50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find a list of supported test tasks by running &lt;code&gt;rake -T&lt;/code&gt;. You may also find it useful to run a specific test for a specific framework. To do so, you&#39;ll have to first make sure you have bundled everything for that configuration, then you can run the specific test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% BUNDLE_GEMFILE=&#39;gemfiles/active_record_50.gemfile&#39; bundle install&#xA;% BUNDLE_GEMFILE=&#39;gemfiles/active_record_50.gemfile&#39; TEST=kaminari-core/test/requests/navigation_test.rb bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2011- Akira Matsuda. See MIT-LICENSE for further details.&lt;/p&gt;</summary>
  </entry>
</feed>