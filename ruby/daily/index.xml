<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-09T01:38:23Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rails/jbuilder</title>
    <updated>2022-10-09T01:38:23Z</updated>
    <id>tag:github.com,2022-10-09:/rails/jbuilder</id>
    <link href="https://github.com/rails/jbuilder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jbuilder: generate JSON objects with a Builder-style DSL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jbuilder&lt;/h1&gt; &#xA;&lt;p&gt;Jbuilder gives you a simple DSL for declaring JSON structures that beats manipulating giant hash structures. This is particularly helpful when the generation process is fraught with conditionals and loops. Here&#39;s a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/messages/show.json.jbuilder&#xA;&#xA;json.content format_content(@message.content)&#xA;json.(@message, :created_at, :updated_at)&#xA;&#xA;json.author do&#xA;  json.name @message.creator.name.familiar&#xA;  json.email_address @message.creator.email_address_with_name&#xA;  json.url url_for(@message.creator, format: :json)&#xA;end&#xA;&#xA;if current_user.admin?&#xA;  json.visitors calculate_visitors(@message)&#xA;end&#xA;&#xA;json.comments @message.comments, :content, :created_at&#xA;&#xA;json.attachments @message.attachments do |attachment|&#xA;  json.filename attachment.filename&#xA;  json.url url_for(attachment)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;content&#34;: &#34;&amp;lt;p&amp;gt;This is &amp;lt;i&amp;gt;serious&amp;lt;/i&amp;gt; monkey business&amp;lt;/p&amp;gt;&#34;,&#xA;  &#34;created_at&#34;: &#34;2011-10-29T20:45:28-05:00&#34;,&#xA;  &#34;updated_at&#34;: &#34;2011-10-29T20:45:28-05:00&#34;,&#xA;&#xA;  &#34;author&#34;: {&#xA;    &#34;name&#34;: &#34;David H.&#34;,&#xA;    &#34;email_address&#34;: &#34;&#39;David Heinemeier Hansson&#39; &amp;lt;david@heinemeierhansson.com&amp;gt;&#34;,&#xA;    &#34;url&#34;: &#34;http://example.com/users/1-david.json&#34;&#xA;  },&#xA;&#xA;  &#34;visitors&#34;: 15,&#xA;&#xA;  &#34;comments&#34;: [&#xA;    { &#34;content&#34;: &#34;Hello everyone!&#34;, &#34;created_at&#34;: &#34;2011-10-29T20:45:28-05:00&#34; },&#xA;    { &#34;content&#34;: &#34;To you my good sir!&#34;, &#34;created_at&#34;: &#34;2011-10-29T20:47:28-05:00&#34; }&#xA;  ],&#xA;&#xA;  &#34;attachments&#34;: [&#xA;    { &#34;filename&#34;: &#34;forecast.xls&#34;, &#34;url&#34;: &#34;http://example.com/downloads/forecast.xls&#34; },&#xA;    { &#34;filename&#34;: &#34;presentation.pdf&#34;, &#34;url&#34;: &#34;http://example.com/downloads/presentation.pdf&#34; }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To define attribute and structure names dynamically, use the &lt;code&gt;set!&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.set! :author do&#xA;  json.set! :name, &#39;David&#39;&#xA;end&#xA;&#xA;# =&amp;gt; {&#34;author&#34;: { &#34;name&#34;: &#34;David&#34; }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To merge existing hash or array to current context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hash = { author: { name: &#34;David&#34; } }&#xA;json.post do&#xA;  json.title &#34;Merge HOWTO&#34;&#xA;  json.merge! hash&#xA;end&#xA;&#xA;# =&amp;gt; &#34;post&#34;: { &#34;title&#34;: &#34;Merge HOWTO&#34;, &#34;author&#34;: { &#34;name&#34;: &#34;David&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Top level arrays can be handled directly. Useful for index and other collection actions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# @comments = @post.comments&#xA;&#xA;json.array! @comments do |comment|&#xA;  next if comment.marked_as_spam_by?(current_user)&#xA;&#xA;  json.body comment.body&#xA;  json.author do&#xA;    json.first_name comment.author.first_name&#xA;    json.last_name comment.author.last_name&#xA;  end&#xA;end&#xA;&#xA;# =&amp;gt; [ { &#34;body&#34;: &#34;great post...&#34;, &#34;author&#34;: { &#34;first_name&#34;: &#34;Joe&#34;, &#34;last_name&#34;: &#34;Bloe&#34; }} ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also extract attributes from array directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# @people = People.all&#xA;&#xA;json.array! @people, :id, :name&#xA;&#xA;# =&amp;gt; [ { &#34;id&#34;: 1, &#34;name&#34;: &#34;David&#34; }, { &#34;id&#34;: 2, &#34;name&#34;: &#34;Jamie&#34; } ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make a plain array without keys, construct and pass in a standard Ruby array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;my_array = %w(David Jamie)&#xA;&#xA;json.people my_array&#xA;&#xA;# =&amp;gt; &#34;people&#34;: [ &#34;David&#34;, &#34;Jamie&#34; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You don&#39;t always have or need a collection when building an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.people do&#xA;  json.child! do&#xA;    json.id 1&#xA;    json.name &#39;David&#39;&#xA;  end&#xA;  json.child! do&#xA;    json.id 2&#xA;    json.name &#39;Jamie&#39;&#xA;  end&#xA;end&#xA;&#xA;# =&amp;gt; { &#34;people&#34;: [ { &#34;id&#34;: 1, &#34;name&#34;: &#34;David&#34; }, { &#34;id&#34;: 2, &#34;name&#34;: &#34;Jamie&#34; } ] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Jbuilder objects can be directly nested inside each other. Useful for composing objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Person&#xA;  # ... Class Definition ... #&#xA;  def to_builder&#xA;    Jbuilder.new do |person|&#xA;      person.(self, :name, :age)&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class Company&#xA;  # ... Class Definition ... #&#xA;  def to_builder&#xA;    Jbuilder.new do |company|&#xA;      company.name name&#xA;      company.president president.to_builder&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;company = Company.new(&#39;Doodle Corp&#39;, Person.new(&#39;John Stobs&#39;, 58))&#xA;company.to_builder.target!&#xA;&#xA;# =&amp;gt; {&#34;name&#34;:&#34;Doodle Corp&#34;,&#34;president&#34;:{&#34;name&#34;:&#34;John Stobs&#34;,&#34;age&#34;:58}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can either use Jbuilder stand-alone or directly as an ActionView template language. When required in Rails, you can create views Ã  la show.json.jbuilder (the json is already yielded):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Any helpers available to views are available to the builder&#xA;json.content format_content(@message.content)&#xA;json.(@message, :created_at, :updated_at)&#xA;&#xA;json.author do&#xA;  json.name @message.creator.name.familiar&#xA;  json.email_address @message.creator.email_address_with_name&#xA;  json.url url_for(@message.creator, format: :json)&#xA;end&#xA;&#xA;if current_user.admin?&#xA;  json.visitors calculate_visitors(@message)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use partials as well. The following will render the file &lt;code&gt;views/comments/_comments.json.jbuilder&lt;/code&gt;, and set a local variable &lt;code&gt;comments&lt;/code&gt; with all this message&#39;s comments, which you can use inside the partial.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.partial! &#39;comments/comments&#39;, comments: @message.comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to render collections of partials:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.array! @posts, partial: &#39;posts/post&#39;, as: :post&#xA;&#xA;# or&#xA;json.partial! &#39;posts/post&#39;, collection: @posts, as: :post&#xA;&#xA;# or&#xA;json.partial! partial: &#39;posts/post&#39;, collection: @posts, as: :post&#xA;&#xA;# or&#xA;json.comments @post.comments, partial: &#39;comments/comment&#39;, as: :comment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;as: :some_symbol&lt;/code&gt; is used with partials. It will take care of mapping the passed in object to a variable for the partial. If the value is a collection either implicitly or explicitly by using the &lt;code&gt;collection:&lt;/code&gt; option, then each value of the collection is passed to the partial as the variable &lt;code&gt;some_symbol&lt;/code&gt;. If the value is a singular object, then the object is passed to the partial as the variable &lt;code&gt;some_symbol&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Be sure not to confuse the &lt;code&gt;as:&lt;/code&gt; option to mean nesting of the partial. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt; # Use the default `views/comments/_comment.json.jbuilder`, putting @comment as the comment local variable.&#xA; # Note, `comment` attributes are &#34;inlined&#34;.&#xA; json.partial! @comment, as: :comment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is quite different from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt; # comment attributes are nested under a &#34;comment&#34; property&#xA;json.comment do&#xA;  json.partial! &#34;/comments/comment.json.jbuilder&#34;, comment: @comment&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass any objects into partial templates with or without &lt;code&gt;:locals&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.partial! &#39;sub_template&#39;, locals: { user: user }&#xA;&#xA;# or&#xA;&#xA;json.partial! &#39;sub_template&#39;, user: user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can explicitly make Jbuilder object return null if you want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.extract! @post, :id, :title, :content, :published_at&#xA;json.author do&#xA;  if @post.anonymous?&#xA;    json.null! # or json.nil!&#xA;  else&#xA;    json.first_name @post.author_first_name&#xA;    json.last_name @post.author_last_name&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To prevent Jbuilder from including null values in the output, you can use the &lt;code&gt;ignore_nil!&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.ignore_nil!&#xA;json.foo nil&#xA;json.bar &#34;bar&#34;&#xA;# =&amp;gt; { &#34;bar&#34;: &#34;bar&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caching&lt;/h2&gt; &#xA;&lt;p&gt;Fragment caching is supported, it uses &lt;code&gt;Rails.cache&lt;/code&gt; and works like caching in HTML templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.cache! [&#39;v1&#39;, @person], expires_in: 10.minutes do&#xA;  json.extract! @person, :name, :age&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also conditionally cache a block by using &lt;code&gt;cache_if!&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.cache_if! !admin?, [&#39;v1&#39;, @person], expires_in: 10.minutes do&#xA;  json.extract! @person, :name, :age&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Aside from that, the &lt;code&gt;:cached&lt;/code&gt; options on collection rendering is available on Rails &amp;gt;= 6.0. This will cache the rendered results effectively using the multi fetch feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.array! @posts, partial: &#34;posts/post&#34;, as: :post, cached: true&#xA;&#xA;# or:&#xA;json.comments @post.comments, partial: &#34;comments/comment&#34;, as: :comment, cached: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your collection cache depends on multiple sources (try to avoid this to keep things simple), you can name all these dependencies as part of a block that returns an array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.array! @posts, partial: &#34;posts/post&#34;, as: :post, cached: -&amp;gt; post { [post, current_user] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will include both records as part of the cache key and updating either of them will expire the cache.&lt;/p&gt; &#xA;&lt;h2&gt;Formatting Keys&lt;/h2&gt; &#xA;&lt;p&gt;Keys can be auto formatted using &lt;code&gt;key_format!&lt;/code&gt;, this can be used to convert keynames from the standard ruby_format to camelCase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.key_format! camelize: :lower&#xA;json.first_name &#39;David&#39;&#xA;&#xA;# =&amp;gt; { &#34;firstName&#34;: &#34;David&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set this globally with the class method &lt;code&gt;key_format&lt;/code&gt; (from inside your environment.rb for example):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Jbuilder.key_format camelize: :lower&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, key format is not applied to keys of hashes that are passed to methods like &lt;code&gt;set!&lt;/code&gt;, &lt;code&gt;array!&lt;/code&gt; or &lt;code&gt;merge!&lt;/code&gt;. You can opt into deeply transforming these as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json.key_format! camelize: :lower&#xA;json.deep_format_keys!&#xA;json.settings([{some_value: &#34;abc&#34;}])&#xA;&#xA;# =&amp;gt; { &#34;settings&#34;: [{ &#34;someValue&#34;: &#34;abc&#34; }]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set this globally with the class method &lt;code&gt;deep_format_keys&lt;/code&gt; (from inside your environment.rb for example):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Jbuilder.deep_format_keys true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing to Jbuilder&lt;/h2&gt; &#xA;&lt;p&gt;Jbuilder is the work of many contributors. You&#39;re encouraged to submit pull requests, propose features and discuss issues.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rails/jbuilder/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Jbuilder is released under the &lt;a href=&#34;http://www.opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/pitchfork</title>
    <updated>2022-10-09T01:38:23Z</updated>
    <id>tag:github.com,2022-10-09:/Shopify/pitchfork</id>
    <link href="https://github.com/Shopify/pitchfork" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pitchfork: Rack HTTP server for shared-nothing architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;pitchfork&lt;/code&gt; is a preforking HTTP server for Rack applications designed to minimize memory usage by maximizing Copy-on-Write performance.&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;a href=&#34;https://yhbt.net/unicorn/README.html&#34;&gt;&lt;code&gt;unicorn&lt;/code&gt;&lt;/a&gt; (which &lt;code&gt;pitchfork&lt;/code&gt; is a derivative of), it is designed to only serve fast clients on low-latency, high-bandwidth connections and take advantage of features in Unix/Unix-like kernels. Slow clients should only be served by placing a reverse proxy capable of fully buffering both the request and response in between &lt;code&gt;pitchfork&lt;/code&gt; and slow clients.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Until this notice is removed from the README, &lt;code&gt;pitchfork&lt;/code&gt; should be considered experimental. As such it is not encouraged to run it in production just yet unless you feel capable of debugging yourself any issue that may arise.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Designed for Rack, Linux, fast clients, and ease-of-debugging. We cut out everything that is better supported by the operating system, &lt;a href=&#34;https://nginx.org/&#34;&gt;nginx&lt;/a&gt; or &lt;a href=&#34;https://rack.github.io/&#34;&gt;Rack&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Shared-Nothing architecture: workers all run within their own isolated address space and only serve one client at a time for maximum performance and robustness. Concurrent requests don&#39;t need to compete for the GVL, or impact each others latency when triggering garbage collection. It also does not care if your application is thread-safe or not.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reforking: &lt;code&gt;pitchfork&lt;/code&gt; can be configured to periodically promote a warmed up worker as the new template from which workers are forked. This dramatically improves the proportion of shared memory, making processes use only marginally more memory than threads would.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compatible with Ruby 2.5.0 and later.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Process management: &lt;code&gt;pitchfork&lt;/code&gt; will reap and restart workers that die from broken apps. There is no need to manage multiple processes or ports yourself. &lt;code&gt;pitchfork&lt;/code&gt; can spawn and manage any number of worker processes you choose to scale to your backend.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Load balancing is done entirely by the operating system kernel. Requests never pile up behind a busy worker process.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Ruby(MRI) Version 2.5 and above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pitchfork&lt;/code&gt; can be used on any Unix-like system, however the reforking feature requires &lt;code&gt;PR_SET_CHILD_SUBREAPER&lt;/code&gt; which is a Linux 3.4 (May 2012) feature.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;pitchfork&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install pitchfork&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Rack&lt;/h3&gt; &#xA;&lt;p&gt;In your application root directory, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec pitchfork&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;pitchfork&lt;/code&gt; will bind to all interfaces on TCP port 8080 by default. You may use the &lt;code&gt;--listen&lt;/code&gt; switch to bind to a different address:port or a UNIX socket.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration File(s)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pitchfork&lt;/code&gt; will look for the config.ru file used by rackup in APP_ROOT.&lt;/p&gt; &#xA;&lt;p&gt;For deployments, it can use a config file for pitchfork-specific options specified by the &lt;code&gt;--config-file/-c&lt;/code&gt; command-line switch. See the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/pitchfork/master/docs/CONFIGURATION.md&#34;&gt;configuration documentation&lt;/a&gt; for the syntax of the pitchfork-specific options.&lt;/p&gt; &#xA;&lt;p&gt;The default settings are designed for maximum out-of-the-box compatibility with existing applications.&lt;/p&gt; &#xA;&lt;p&gt;Most command-line options for other Rack applications (above) are also supported. Run &lt;code&gt;pitchfork -h&lt;/code&gt; to see command-line options.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;pitchfork is copyright 2022 Shopify Inc and all contributors. It is based on Unicorn 6.1.0.&lt;/p&gt; &#xA;&lt;p&gt;Unicorn is copyright 2009-2018 by all contributors (see logs in git). It is based on Mongrel 1.1.5. Mongrel is copyright 2007 Zed A. Shaw and contributors.&lt;/p&gt; &#xA;&lt;p&gt;pitchfork is licensed under the GPLv2 or later or Ruby (1.8)-specific terms. See the included LICENSE file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to Eric Wong and all Unicorn and Mongrel contributors over the years. Pitchfork would have been much harder to implement otherwise.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to Will Jordan who implemented Puma&#39;s &#34;fork worker&#34; experimental feature which have been a significant inspiration for Pitchfork.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to Peter Bui for letting us use the &lt;code&gt;pitchfork&lt;/code&gt; name on Rubygems.&lt;/p&gt;</summary>
  </entry>
</feed>