<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-31T01:38:54Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>a7ex/homebrew-formulae</title>
    <updated>2024-03-31T01:38:54Z</updated>
    <id>tag:github.com,2024-03-31:/a7ex/homebrew-formulae</id>
    <link href="https://github.com/a7ex/homebrew-formulae" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Homebrew support for Mac tools. Starting with xcresultparser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;homebrew-formulae&lt;/h1&gt; &#xA;&lt;p&gt;Homebrew support for my own Mac tools.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/a7ex/xcresultparser&#34;&gt;https://github.com/a7ex/xcresultparser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/a7ex/FindSimulator&#34;&gt;https://github.com/a7ex/FindSimulator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/a7ex/SBEnumerator&#34;&gt;https://github.com/a7ex/SBEnumerator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note to self: After editing the formula, you can run brew fetch your-formula --build-from-source to fetch the tarball and display the new checksum. If you&#39;ve already downloaded the tarball somewhere, you can calculate the hash with &lt;code&gt;openssl sha256 &amp;lt; some_tarball.tar.gz&lt;/code&gt; or &lt;code&gt;shasum -a 256 some_tarball.tar.gz&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>josefarias/hotwire_combobox</title>
    <updated>2024-03-31T01:38:54Z</updated>
    <id>tag:github.com,2024-03-31:/josefarias/hotwire_combobox</id>
    <link href="https://github.com/josefarias/hotwire_combobox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An accessible autocomplete for Ruby on Rails.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/josefarias/hotwire_combobox/main/docs/assets/images/logo.png&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Easy and Accessible Autocomplete for Ruby on Rails&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/josefarias/hotwire_combobox/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/josefarias/hotwire_combobox/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/hotwire_combobox&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/hotwire_combobox.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] HotwireCombobox is at an early stage of development. It&#39;s nearing a beta release, but the API might change and bugs are expected. Please continue to use the library and report any issues in the GitHub repo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First, make sure &lt;a href=&#34;https://github.com/hotwired/turbo-rails&#34;&gt;Turbo&lt;/a&gt; and &lt;a href=&#34;https://github.com/hotwired/stimulus-rails&#34;&gt;Stimulus&lt;/a&gt; are configured and running properly on your app.&lt;/p&gt; &#xA;&lt;p&gt;Then, add this line to your application&#39;s Gemfile and run &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;hotwire_combobox&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, configure your assets:&lt;/p&gt; &#xA;&lt;h3&gt;Configuring JS&lt;/h3&gt; &#xA;&lt;p&gt;Before continuing, you should know whether your app is using importmaps or JS bundling in your asset pipeline.&lt;/p&gt; &#xA;&lt;h4&gt;Importmaps&lt;/h4&gt; &#xA;&lt;p&gt;Most apps using importmaps won&#39;t need any configuration. If things aren&#39;t working for you, read on.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;app/javascript/controllers/index.js&lt;/code&gt; you should have one of the following:&lt;/p&gt; &#xA;&lt;p&gt;Either,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { application } from &#34;controllers/application&#34; // or equivalent&#xA;import { eagerLoadControllersFrom } from &#34;@hotwired/stimulus-loading&#34;&#xA;&#xA;eagerLoadControllersFrom(&#34;controllers&#34;, application)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { application } from &#34;controllers/application&#34; // or equivalent&#xA;import { lazyLoadControllersFrom } from &#34;@hotwired/stimulus-loading&#34;&#xA;&#xA;lazyLoadControllersFrom(&#34;controllers&#34;, application)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { application } from &#34;controllers/application&#34; // or equivalent&#xA;&#xA;import HwComboboxController from &#34;controllers/hw_combobox_controller&#34;&#xA;application.register(&#34;hw-combobox&#34;, HwComboboxController)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JS bundling (esbuild, rollup, etc)&lt;/h4&gt; &#xA;&lt;p&gt;First, install the JS portion of HotwireCombobox from npm with one of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add @josefarias/hotwire_combobox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @josefarias/hotwire_combobox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, register the library&#39;s stimulus controller in &lt;code&gt;app/javascript/controllers/index.js&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { application } from &#34;./application&#34; // or equivalent&#xA;&#xA;import HwComboboxController from &#34;@josefarias/hotwire_combobox&#34;&#xA;application.register(&#34;hw-combobox&#34;, HwComboboxController)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Keep in mind you need to update both the npm package and the gem every time there&#39;s a new version of HotwireCombobox. You should always run the same version number on both sides.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuring CSS&lt;/h3&gt; &#xA;&lt;p&gt;This library comes with optional default styles. Follow the instructions below to include them in your app.&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/josefarias/hotwire_combobox/main/#Docs&#34;&gt;docs section&lt;/a&gt; for instructions on styling the combobox yourself.&lt;/p&gt; &#xA;&lt;h4&gt;Default&lt;/h4&gt; &#xA;&lt;p&gt;This approach works for all setups. Simply add the stylesheet to your layout (this would go in your document&#39;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= combobox_style_tag %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This helper accepts any of the options you can pass to &lt;code&gt;stylesheet_link_tag&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Sprockets&lt;/h4&gt; &#xA;&lt;p&gt;Require the styles in &lt;code&gt;app/assets/stylesheets/application.css&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;*= require hotwire_combobox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://hotwirecombobox.com/&#34;&gt;the docs site&lt;/a&gt; for a demo and detailed documentation. If the site is down, you can run the docs locally by cloning &lt;a href=&#34;https://github.com/josefarias/hotwire_combobox_docs&#34;&gt;the docs repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Notes about accessibility&lt;/h2&gt; &#xA;&lt;p&gt;This gem follows the &lt;a href=&#34;https://www.w3.org/WAI/ARIA/apg/patterns/combobox/&#34;&gt;APG combobox pattern guidelines&lt;/a&gt; with some exceptions we feel increase the usefulness of the component without much detriment to the overall accessible experience.&lt;/p&gt; &#xA;&lt;p&gt;These are the exceptions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Users cannot manipulate the combobox while it&#39;s closed. As long as the combobox is focused, the listbox is shown.&lt;/li&gt; &#xA; &lt;li&gt;The escape key closes the listbox and blurs the combobox. It does not clear the combobox.&lt;/li&gt; &#xA; &lt;li&gt;The listbox has wrap-around selection. That is, pressing &lt;code&gt;Up Arrow&lt;/code&gt; when the user is on the first option will select the last option. And pressing &lt;code&gt;Down Arrow&lt;/code&gt; when on the last option will select the first option. In paginated comboboxes, the first and last options refer to the currently available options. More options may be loaded after navigating to the last currently available option.&lt;/li&gt; &#xA; &lt;li&gt;It is possible to have an unlabled combobox, as that responsibility is delegated to the implementing user.&lt;/li&gt; &#xA; &lt;li&gt;There are currently &lt;a href=&#34;https://github.com/w3c/aria-practices/issues/1512&#34;&gt;no APG guidelines&lt;/a&gt; for a multiselect combobox. We&#39;ve introduced some mechanisms to make the experience accessible, like announcing multi-selections via a live region. But we&#39;d welcome feedback on how to make it better until official guidelines are available.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It should be noted none of the maintainers use assistive technologies in their daily lives. If you do, and you feel these exceptions are detrimental to your ability to use the component, or if you find an undocumented exception, please &lt;a href=&#34;https://github.com/josefarias/hotwire_combobox/issues&#34;&gt;open a GitHub issue&lt;/a&gt;. We&#39;ll get it sorted.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/josefarias/hotwire_combobox/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mdsol/pagem</title>
    <updated>2024-03-31T01:38:54Z</updated>
    <id>tag:github.com,2024-03-31:/mdsol/pagem</id>
    <link href="https://github.com/mdsol/pagem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pagination library for Mdsol Rails applications&lt;/p&gt;&lt;hr&gt;&lt;p&gt;= Pagem&lt;/p&gt; &#xA;&lt;p&gt;Rails gem pagination helper that works off of scopes (named) to facilitate data retrieval and display.&lt;/p&gt; &#xA;&lt;p&gt;== Install&lt;/p&gt; &#xA;&lt;p&gt;Use the bundler gem (sudo gem install bundler) Add the following to your Gemfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#34;pagem&#34;, :git =&amp;gt; &#34;git://github.com/mdsol/pagem.git&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;== Testing&lt;/p&gt; &#xA;&lt;p&gt;rvm use ruby-1.9.3-p125 bundle install bundle exec rspec spec/*&lt;/p&gt; &#xA;&lt;p&gt;== Usage&lt;/p&gt; &#xA;&lt;p&gt;=== Controller In your controller, create an instance of the helper. Pass your scope and the params hash as arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  @pager = Pagem.new(@study.subjects, params)&#xA;&#xA;Retrieve the paged scope from the Pagem instance.&#xA;&#xA;  @subjects = @pager.paged_scope&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=== View&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;In your view, use the paged scope to display the data as you would for any data set.&#xA;Then, render the pagination controls at the bottom.&#xA;&#xA;&amp;lt;%= @pager %&amp;gt;&#xA;&#xA;The pagem class can work with remote forms (AJAX) as well.&#xA;&#xA;&amp;lt;%= @pager.render(:is_remote =&amp;gt; true) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>