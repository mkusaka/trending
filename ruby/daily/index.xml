<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-14T01:32:34Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>voxpupuli/puppet-systemd</title>
    <updated>2022-07-14T01:32:34Z</updated>
    <id>tag:github.com,2022-07-14:/voxpupuli/puppet-systemd</id>
    <link href="https://github.com/voxpupuli/puppet-systemd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Puppet module to manage systemd&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Systemd&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/voxpupuli/puppet-systemd/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/voxpupuli/puppet-systemd/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/voxpupuli/puppet-systemd/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/voxpupuli/puppet-systemd/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forge.puppetlabs.com/puppet/systemd&#34;&gt;&lt;img src=&#34;https://img.shields.io/puppetforge/v/puppet/systemd.svg?sanitize=true&#34; alt=&#34;Puppet Forge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forge.puppetlabs.com/puppet/systemd&#34;&gt;&lt;img src=&#34;https://img.shields.io/puppetforge/dt/puppet/systemd.svg?sanitize=true&#34; alt=&#34;Puppet Forge - downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forge.puppetlabs.com/puppet/systemd&#34;&gt;&lt;img src=&#34;https://img.shields.io/puppetforge/e/puppet/systemd.svg?sanitize=true&#34; alt=&#34;Puppet Forge - endorsement&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forge.puppetlabs.com/puppet/systemd&#34;&gt;&lt;img src=&#34;https://img.shields.io/puppetforge/f/puppet/systemd.svg?sanitize=true&#34; alt=&#34;Puppet Forge - scores&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.puppetmodule.info/m/puppet-systemd&#34;&gt;&lt;img src=&#34;http://www.puppetmodule.info/images/badge.png&#34; alt=&#34;puppetmodule.info docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/voxpupuli/puppet-systemd/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/voxpupuli/puppet-systemd.svg?sanitize=true&#34; alt=&#34;Apache-2 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/voxpupuli/puppet-systemd/master/#transfer-notice&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donated%20by-camptocamp-fb7047.svg?sanitize=true&#34; alt=&#34;Donated by Camptocamp&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This module declares exec resources to create global sync points for reloading systemd.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Version 2 and newer of the module don&#39;t work with Hiera 3! You need to migrate your existing Hiera setup to Hiera 5&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage and examples&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways to use this module.&lt;/p&gt; &#xA;&lt;h3&gt;unit files&lt;/h3&gt; &#xA;&lt;p&gt;Let this module handle file creation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;systemd::unit_file { &#39;foo.service&#39;:&#xA; source =&amp;gt; &#34;puppet:///modules/${module_name}/foo.service&#34;,&#xA;}&#xA;~&amp;gt; service {&#39;foo&#39;:&#xA;  ensure =&amp;gt; &#39;running&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;file { &#39;/usr/lib/systemd/system/foo.service&#39;:&#xA;  ensure =&amp;gt; file,&#xA;  owner  =&amp;gt; &#39;root&#39;,&#xA;  group  =&amp;gt; &#39;root&#39;,&#xA;  mode   =&amp;gt; &#39;0644&#39;,&#xA;  source =&amp;gt; &#34;puppet:///modules/${module_name}/foo.service&#34;,&#xA;}&#xA;~&amp;gt; service {&#39;foo&#39;:&#xA;  ensure =&amp;gt; &#39;running&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use this module to more fully manage the new unit. This example deploys the unit, reloads systemd and then enables and starts it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;systemd::unit_file { &#39;foo.service&#39;:&#xA;  content =&amp;gt; file(&#34;${module_name}/foo.service&#34;),&#xA;  enable =&amp;gt; true,&#xA;  active =&amp;gt; true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;drop-in files&lt;/h3&gt; &#xA;&lt;p&gt;Drop-in files are used to add or alter settings of a unit without modifying the unit itself. As for the unit files, the module can handle the file and directory creation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;systemd::dropin_file { &#39;foo.conf&#39;:&#xA;  unit   =&amp;gt; &#39;foo.service&#39;,&#xA;  source =&amp;gt; &#34;puppet:///modules/${module_name}/foo.conf&#34;,&#xA;}&#xA;~&amp;gt; service {&#39;foo&#39;:&#xA;  ensure    =&amp;gt; &#39;running&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;file { &#39;/etc/systemd/system/foo.service.d&#39;:&#xA;  ensure =&amp;gt; directory,&#xA;  owner  =&amp;gt; &#39;root&#39;,&#xA;  group  =&amp;gt; &#39;root&#39;,&#xA;}&#xA;&#xA;file { &#39;/etc/systemd/system/foo.service.d/foo.conf&#39;:&#xA;  ensure =&amp;gt; file,&#xA;  owner  =&amp;gt; &#39;root&#39;,&#xA;  group  =&amp;gt; &#39;root&#39;,&#xA;  mode   =&amp;gt; &#39;0644&#39;,&#xA;  source =&amp;gt; &#34;puppet:///modules/${module_name}/foo.conf&#34;,&#xA;}&#xA;~&amp;gt; service {&#39;foo&#39;:&#xA;  ensure =&amp;gt; &#39;running&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;dropin-files can also be generated via hiera:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;systemd::dropin_files:&#xA;  my-foo.conf:&#xA;    unit: foo.service&#xA;    source: puppet:///modules/${module_name}/foo.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;modules-load.d&lt;/h3&gt; &#xA;&lt;p&gt;Create a file entry for modules-loads directory and start &lt;code&gt;systemd-modules-load.service&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;systemd::modules_load{&#39;impi.conf&#39;:&#xA;  content =&amp;gt; &#34;ipmi\n&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;tmpfiles&lt;/h3&gt; &#xA;&lt;p&gt;Let this module handle file creation and systemd reloading&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;systemd::tmpfile { &#39;foo.conf&#39;:&#xA;  source =&amp;gt; &#34;puppet:///modules/${module_name}/foo.conf&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or handle file creation yourself and trigger systemd.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;include systemd::tmpfiles&#xA;&#xA;file { &#39;/etc/tmpfiles.d/foo.conf&#39;:&#xA;  ensure =&amp;gt; file,&#xA;  owner  =&amp;gt; &#39;root&#39;,&#xA;  group  =&amp;gt; &#39;root&#39;,&#xA;  mode   =&amp;gt; &#39;0644&#39;,&#xA;  source =&amp;gt; &#34;puppet:///modules/${module_name}/foo.conf&#34;,&#xA;}&#xA;~&amp;gt; Class[&#39;systemd::tmpfiles&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;timer units&lt;/h3&gt; &#xA;&lt;p&gt;Create a systemd timer unit and a systemd service unit to execute from that timer&lt;/p&gt; &#xA;&lt;p&gt;The following will create a timer unit and a service unit file. When &lt;code&gt;active&lt;/code&gt; and &lt;code&gt;enable&lt;/code&gt; are set to &lt;code&gt;true&lt;/code&gt; the puppet service &lt;code&gt;runoften.timer&lt;/code&gt; will be declared, started and enabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;systemd::timer{&#39;runoften.timer&#39;:&#xA;  timer_source   =&amp;gt; &#34;puppet:///modules/${module_name}/runoften.timer&#34;,&#xA;  service_source =&amp;gt; &#34;puppet:///modules/${module_name}/runoften.service&#34;,&#xA;  active         =&amp;gt; true,&#xA;  enable         =&amp;gt; true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A trivial daily run. In this case enable and active are both unset and so the service &lt;code&gt;daily.timer&lt;/code&gt; is not declared by the &lt;code&gt;systemd::timer&lt;/code&gt; type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;$_timer = @(EOT)&#xA;[Timer]&#xA;OnCalendar=daily&#xA;RandomizedDelaySec=1d&#xA;EOT&#xA;&#xA;$_service = @(EOT)&#xA;[Service]&#xA;Type=oneshot&#xA;ExecStart=/usr/bin/touch /tmp/file&#xA;EOT&#xA;&#xA;systemd::timer{&#39;daily.timer&#39;:&#xA;  timer_content   =&amp;gt; $_timer,&#xA;  service_content =&amp;gt; $_service,&#xA;}&#xA;&#xA;service{&#39;daily.timer&#39;:&#xA;  ensure    =&amp;gt; running,&#xA;  subscribe =&amp;gt; Systemd::Timer[&#39;daily.timer&#39;],&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If neither &lt;code&gt;service_content&lt;/code&gt; or &lt;code&gt;service_source&lt;/code&gt; are specified then no service unit will be created.&lt;/p&gt; &#xA;&lt;p&gt;The service unit name can also be specified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;$_timer = @(EOT)&#xA;[Timer]&#xA;OnCalendar=daily&#xA;RandomizedDelaySec=1d&#xA;Unit=touch-me-today.service&#xA;EOT&#xA;&#xA;$_service = @(EOT)&#xA;[Service]&#xA;Type=oneshot&#xA;ExecStart=/usr/bin/touch /tmp/file&#xA;EOT&#xA;&#xA;&#xA;systemd::timer{&#39;daily.timer&#39;:&#xA;  timer_content   =&amp;gt; $_timer,&#xA;  service_unit    =&amp;gt; &#39;touch-me-today.service&#39;,&#xA;  service_content =&amp;gt; $_service,&#xA;  active          =&amp;gt; true,&#xA;  enable          =&amp;gt; true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;service limits&lt;/h3&gt; &#xA;&lt;p&gt;Manage soft and hard limits on various resources for executed processes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;systemd::service_limits { &#39;foo.service&#39;:&#xA;  limits =&amp;gt; {&#xA;    &#39;LimitNOFILE&#39; =&amp;gt; 8192,&#xA;    &#39;LimitNPROC&#39;  =&amp;gt; 16384,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or provide the configuration file yourself. Systemd reloading and restarting of the service are handled by the module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;systemd::service_limits { &#39;foo.service&#39;:&#xA;  source =&amp;gt; &#34;puppet:///modules/${module_name}/foo.conf&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;machine-info (hostnamectl)&lt;/h3&gt; &#xA;&lt;p&gt;You can set elements of &lt;code&gt;/etc/machine-info&lt;/code&gt; via the &lt;code&gt;machine_info_settings&lt;/code&gt; parameter. These values are read by &lt;code&gt;hostnamectl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To manage these, you&#39;ll need to add an additional module, &lt;a href=&#34;https://forge.puppet.com/modules/herculesteam/augeasproviders_shellvar&#34;&gt;augeasproviders_shellvar&lt;/a&gt;, to your environment.&lt;/p&gt; &#xA;&lt;h3&gt;Daemon reloads&lt;/h3&gt; &#xA;&lt;p&gt;Systemd caches unit files and their relations. This means it needs to reload, typically done via &lt;code&gt;systemctl daemon-reload&lt;/code&gt;. Since Puppet 6.1.0 (&lt;a href=&#34;https://tickets.puppetlabs.com/browse/PUP-3483&#34;&gt;PUP-3483&lt;/a&gt;) takes care of this by calling &lt;code&gt;systemctl show $SERVICE -- --property=NeedDaemonReload&lt;/code&gt; to determine if a reload is needed. Typically this works well and removes the need for &lt;code&gt;systemd::systemctl::daemon_reload&lt;/code&gt; as provided prior to camptocamp/systemd 3.0.0. This avoids common circular dependencies.&lt;/p&gt; &#xA;&lt;p&gt;It does contain a workaround for &lt;a href=&#34;https://tickets.puppetlabs.com/browse/PUP-9473&#34;&gt;PUP-9473&lt;/a&gt; but there&#39;s no guarantee that this works in every case.&lt;/p&gt; &#xA;&lt;h3&gt;network&lt;/h3&gt; &#xA;&lt;p&gt;systemd-networkd is able to manage your network configuration. We provide a defined resource which can write the interface configurations. systemd-networkd needs to be restarted to apply the configs. The defined resource can do this for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;systemd::network{&#39;eth0.network&#39;:&#xA;  source          =&amp;gt; &#34;puppet:///modules/${module_name}/eth0.network&#34;,&#xA;  restart_service =&amp;gt; true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Services&lt;/h3&gt; &#xA;&lt;p&gt;The default target is managed via the &lt;code&gt;default_target&lt;/code&gt; parameter. If this is left at its default value (&lt;code&gt;undef&lt;/code&gt;), the default-target will be unmanaged by puppet.&lt;/p&gt; &#xA;&lt;p&gt;Systemd provides multiple services. Currently you can manage &lt;code&gt;systemd-resolved&lt;/code&gt;, &lt;code&gt;systemd-timesyncd&lt;/code&gt;, &lt;code&gt;systemd-networkd&lt;/code&gt;, &lt;code&gt;systemd-journald&lt;/code&gt;, &lt;code&gt;systemd-coredump&lt;/code&gt; and &lt;code&gt;systemd-logind&lt;/code&gt; via the main class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class{&#39;systemd&#39;:&#xA;  manage_resolved  =&amp;gt; true,&#xA;  manage_networkd  =&amp;gt; true,&#xA;  manage_timesyncd =&amp;gt; true,&#xA;  manage_journald  =&amp;gt; true,&#xA;  manage_udevd     =&amp;gt; true,&#xA;  manage_logind    =&amp;gt; true,&#xA;  manage_coredump  =&amp;gt; true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;$manage_networkd is required if you want to reload it for new &lt;code&gt;systemd::network&lt;/code&gt; resources. Setting $manage_resolved will also manage your &lt;code&gt;/etc/resolv.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When configuring &lt;code&gt;systemd::resolved&lt;/code&gt; you could set &lt;code&gt;use_stub_resolver&lt;/code&gt; to false (default) to use a &lt;em&gt;standard&lt;/em&gt; &lt;code&gt;/etc/resolved.conf&lt;/code&gt;, or you could set it to &lt;code&gt;true&lt;/code&gt; to use the local resolver provided by &lt;code&gt;systemd-resolved&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Systemd introduced &lt;code&gt;DNS Over TLS&lt;/code&gt; in release 239. Currently three states are supported &lt;code&gt;yes&lt;/code&gt; (since systemd 243), &lt;code&gt;opportunistic&lt;/code&gt; (true) and &lt;code&gt;no&lt;/code&gt; (false, default). When enabled with &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;opportunistic&lt;/code&gt; &lt;code&gt;systemd-resolved&lt;/code&gt; will start a TCP-session to a DNS server with &lt;code&gt;DNS Over TLS&lt;/code&gt; support. When enabled with &lt;code&gt;yes&lt;/code&gt; (strict mode), queries will fail if the configured DNS servers do not support &lt;code&gt;DNS Over TLS&lt;/code&gt;. Note that there will be no host checking for &lt;code&gt;DNS Over TLS&lt;/code&gt; due to missing implementation in &lt;code&gt;systemd-resolved&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Stopping &lt;code&gt;systemd-resolved&lt;/code&gt; once running can be problematic and care should be taken.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class{&#39;systemd&#39;:&#xA;  manage_resolved =&amp;gt; true,&#xA;  resolved_ensure =&amp;gt; false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will stop the service and should also copy &lt;code&gt;/run/systemd/resolve/resolv.conf&lt;/code&gt; to &lt;code&gt;/etc/resolve.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Writing your own file to &lt;code&gt;/etc/resolv.conf&lt;/code&gt; is also possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is possible to configure the default ntp servers in &lt;code&gt;/etc/systemd/timesyncd.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class{&#39;systemd&#39;:&#xA;  manage_timesyncd    =&amp;gt; true,&#xA;  ntp_server          =&amp;gt; [&#39;0.pool.ntp.org&#39;, &#39;1.pool.ntp.org&#39;],&#xA;  fallback_ntp_server =&amp;gt; [&#39;2.pool.ntp.org&#39;, &#39;3.pool.ntp.org&#39;],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;when &lt;code&gt;manage_systemd&lt;/code&gt; is true any required sub package, e.g. &lt;code&gt;systemd-resolved&lt;/code&gt; on CentOS 9, will be installed. However configuration of systemd-resolved will only occur on second puppet run after that installation.&lt;/p&gt; &#xA;&lt;p&gt;This requires &lt;a href=&#34;https://forge.puppet.com/puppetlabs/inifile&#34;&gt;puppetlabs-inifile&lt;/a&gt;, which is only a soft dependency in this module (you need to explicitly install it). Both parameters accept a string or an array.&lt;/p&gt; &#xA;&lt;h3&gt;Resource Accounting&lt;/h3&gt; &#xA;&lt;p&gt;Systemd has support for different accounting option. It can track CPU/Memory/Network stats per process. This is explained in depth at &lt;a href=&#34;https://www.freedesktop.org/software/systemd/man/systemd-system.conf.html&#34;&gt;systemd-system.conf&lt;/a&gt;. This defaults to off (default on most operating systems). You can enable this with the &lt;code&gt;$manage_accounting&lt;/code&gt; parameter. The module provides a default set of working accounting options per operating system, but you can still modify them with &lt;code&gt;$accounting&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class{&#39;systemd&#39;:&#xA;  manage_accounting =&amp;gt; true,&#xA;  accounting        =&amp;gt; {&#xA;    &#39;DefaultCPUAccounting&#39;    =&amp;gt; &#39;yes&#39;,&#xA;    &#39;DefaultMemoryAccounting&#39; =&amp;gt; &#39;no&#39;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;journald configuration&lt;/h3&gt; &#xA;&lt;p&gt;It also allows you to manage journald settings. You can manage journald settings through setting the &lt;code&gt;journald_settings&lt;/code&gt; parameter. If you want a parameter to be removed, you can pass its value as params.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;systemd::journald_settings:&#xA;  Storage: auto&#xA;  MaxRetentionSec: 5day&#xA;  MaxLevelStore:&#xA;    ensure: absent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;udevd configuration&lt;/h3&gt; &#xA;&lt;p&gt;It allows you to manage the udevd configuration. You can set the udev.conf values via the &lt;code&gt;udev_log&lt;/code&gt;, &lt;code&gt;udev_children_max&lt;/code&gt;, &lt;code&gt;udev_exec_delay&lt;/code&gt;, &lt;code&gt;udev_event_timeout&lt;/code&gt;, &lt;code&gt;udev_resolve_names&lt;/code&gt;, and &lt;code&gt;udev_timeout_signal&lt;/code&gt; parameters.&lt;/p&gt; &#xA;&lt;p&gt;Additionally you can set custom udev rules with the &lt;code&gt;udev_rules&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class { &#39;systemd&#39;:&#xA;  manage_udevd =&amp;gt; true,&#xA;  udev_rules   =&amp;gt; {&#xA;      &#39;example_raw.rules&#39; =&amp;gt; {&#xA;      &#39;rules&#39;             =&amp;gt; [&#xA;        &#39;ACTION==&#34;add&#34;, KERNEL==&#34;sda&#34;, RUN+=&#34;/bin/raw /dev/raw/raw1 %N&#34;&#39;,&#xA;        &#39;ACTION==&#34;add&#34;, KERNEL==&#34;sdb&#34;, RUN+=&#34;/bin/raw /dev/raw/raw2 %N&#34;&#39;,&#xA;      ],&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;udev::rules configuration&lt;/h3&gt; &#xA;&lt;p&gt;Custom udev rules can be defined for specific events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;systemd::udev::rule:&#xA;  ensure: present&#xA;  path: /etc/udev/rules.d&#xA;  selinux_ignore_defaults: false&#xA;  notify: &#34;Service[systemd-udevd&#39;]&#34;&#xA;  rules:&#xA;    - &#39;ACTION==&#34;add&#34;, KERNEL==&#34;sda&#34;, RUN+=&#34;/bin/raw /dev/raw/raw1 %N&#34;&#39;&#xA;    - &#39;ACTION==&#34;add&#34;, KERNEL==&#34;sdb&#34;, RUN+=&#34;/bin/raw /dev/raw/raw2 %N&#34;&#39;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;oomd configuration&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;systemd-oomd &lt;/code&gt;system can be configured.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class{&#39;systemd&#39;:&#xA;  manage_oomd   =&amp;gt; true,&#xA;  oomd_ensure   =&amp;gt; &#39;running&#39;&#xA;  oomd_settings =&amp;gt; {&#xA;    &#39;SwapUsedLimit&#39; =&amp;gt; &#39;90%&#39;,&#xA;    &#39;DefaultMemoryPressureLimit&#39; =&amp;gt; &#39;60%&#39;,&#xA;    &#39;DefaultMemoryPressureDurationSec&#39; =&amp;gt; 30,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;coredump configuration&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;systemd-coredump &lt;/code&gt;system can be configured.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class{&#39;systemd&#39;:&#xA;  manage_coredump    =&amp;gt; true,&#xA;  coredump_backtrace =&amp;gt; true,&#xA;  coredump_settings  =&amp;gt; {&#xA;    &#39;Storage&#39;         =&amp;gt; &#39;external&#39;,&#xA;    &#39;Compress&#39;        =&amp;gt; &#39;yes&#39;,&#xA;    &#39;ProcessSizeMax&#39;  =&amp;gt; &#39;2G&#39;,&#xA;    &#39;ExternalSizeMax&#39; =&amp;gt; &#39;10G&#39;,&#xA;    &#39;JournalSizeMax&#39;  =&amp;gt; &#39;20T&#39;,&#xA;    &#39;MaxUse&#39;          =&amp;gt; &#39;1E&#39;,&#xA;    &#34;MaxFree&#39;         =&amp;gt; &#39;1P&#39;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;logind configuration&lt;/h3&gt; &#xA;&lt;p&gt;It also allows you to manage logind settings. You can manage logind settings through setting the &lt;code&gt;logind_settings&lt;/code&gt; parameter. If you want a parameter to be removed, you can pass its value as params.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;systemd::logind_settings:&#xA;  HandleSuspendKey: &#39;ignore&#39;&#xA;  KillUserProcesses: &#39;no&#39;&#xA;  RemoveIPC:&#xA;    ensure: absent&#xA;  UserTasksMax: 10000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;User linger&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;loginctl_user&lt;/code&gt; resource is available to manage user linger enablement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;loginctl_user { &#39;foo&#39;:&#xA;  linger =&amp;gt; enabled,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or as a hash via the &lt;code&gt;systemd::loginctl_users&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;h3&gt;Systemd Escape Function&lt;/h3&gt; &#xA;&lt;p&gt;Partially escape strings as &lt;code&gt;systemd-escape&lt;/code&gt; command does.&lt;/p&gt; &#xA;&lt;p&gt;This functions only escapes a subset of chars. Non-ASCII character will not escape.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;$result = systemd::escape(&#39;foo::bar/&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$result&lt;/code&gt; would be &lt;code&gt;foo::bar-&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or path escape as if with &lt;code&gt;-p&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;$result = systemd::escape(&#39;/mnt/foobar/&#39;, true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$result&lt;/code&gt; would be &lt;code&gt;mnt-foobar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Systemd Escape Function (uses systemd-escape)&lt;/h3&gt; &#xA;&lt;p&gt;Escape strings call the &lt;code&gt;systemd-escape&lt;/code&gt; command in the background.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s highly recommend running the function as &lt;a href=&#34;https://puppet.com/docs/puppet/6/deferring_functions.html&#34;&gt;deferred function&lt;/a&gt; since it executes the command on the agent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;$result = Deferred(&#39;systemd::systemd_escape&#39;, [&#34;foo::bar&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$result&lt;/code&gt; would be &lt;code&gt;foo::bar-&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or path escape as if with &lt;code&gt;-p&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;$result = Deferred(&#39;systemd::systemd_escape&#39;, [&#34;/mnt/foo-bar/&#34;, true])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$result&lt;/code&gt; would be &lt;code&gt;mnt-foo\x2dbar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Transfer Notice&lt;/h2&gt; &#xA;&lt;p&gt;This plugin was originally authored by &lt;a href=&#34;http://www.camptocamp.com&#34;&gt;Camptocamp&lt;/a&gt;. The maintainer preferred that Puppet Community take ownership of the module for future improvement and maintenance. Existing pull requests and issues were transferred over, please fork and continue to contribute here instead of Camptocamp.&lt;/p&gt; &#xA;&lt;p&gt;Previously: &lt;a href=&#34;https://github.com/camptocamp/puppet-systemd&#34;&gt;https://github.com/camptocamp/puppet-systemd&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RubyMoney/money</title>
    <updated>2022-07-14T01:32:34Z</updated>
    <id>tag:github.com,2022-07-14:/RubyMoney/money</id>
    <link href="https://github.com/RubyMoney/money" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby Library for dealing with money and currency conversion.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RubyMoney - Money&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/money&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/money.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RubyMoney/money/actions/workflows/ruby.yml&#34;&gt;&lt;img src=&#34;https://github.com/RubyMoney/money/actions/workflows/ruby.yml/badge.svg?sanitize=true&#34; alt=&#34;Ruby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/RubyMoney/money&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/RubyMoney/money.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inch-ci.org/github/RubyMoney/money&#34;&gt;&lt;img src=&#34;https://inch-ci.org/github/RubyMoney/money.svg?sanitize=true&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/RubyMoney/money.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Please read the &lt;a href=&#34;https://raw.githubusercontent.com/RubyMoney/money/main/#migration-notes&#34;&gt;migration notes&lt;/a&gt; before upgrading to a new major version.&lt;/p&gt; &#xA;&lt;p&gt;If you miss String parsing, check out the new &lt;a href=&#34;https://github.com/RubyMoney/monetize&#34;&gt;monetize gem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/RubyMoney/money/raw/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;A Ruby Library for dealing with money and currency conversion.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provides a &lt;code&gt;Money&lt;/code&gt; class which encapsulates all information about a certain amount of money, such as its value and its currency.&lt;/li&gt; &#xA; &lt;li&gt;Provides a &lt;code&gt;Money::Currency&lt;/code&gt; class which encapsulates all information about a monetary unit.&lt;/li&gt; &#xA; &lt;li&gt;Represents monetary values as integers, in cents. This avoids floating point rounding errors.&lt;/li&gt; &#xA; &lt;li&gt;Represents currency as &lt;code&gt;Money::Currency&lt;/code&gt; instances providing a high level of flexibility.&lt;/li&gt; &#xA; &lt;li&gt;Provides APIs for exchanging money from one currency to another.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubymoney.github.io/money/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/gems/money/frames&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RubyMoney/money&#34;&gt;Git Repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your app must use UTF-8 to function with this library. There are a number of non-ASCII currency attributes.&lt;/li&gt; &#xA; &lt;li&gt;This app requires JSON. If you&#39;re using JRuby &amp;lt; 1.7.0 you&#39;ll need to add &lt;code&gt;gem &#34;json&#34;&lt;/code&gt; to your Gemfile or similar.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloading&lt;/h2&gt; &#xA;&lt;p&gt;Install stable releases with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install money&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The development version (hosted on Github) can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git://github.com/RubyMoney/money.git&#xA;cd money&#xA;rake install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;money&#39;&#xA;&#xA;# 10.00 USD&#xA;money = Money.from_cents(1000, &#34;USD&#34;)&#xA;money.cents     #=&amp;gt; 1000&#xA;money.currency  #=&amp;gt; Currency.new(&#34;USD&#34;)&#xA;&#xA;# Comparisons&#xA;Money.from_cents(1000, &#34;USD&#34;) == Money.from_cents(1000, &#34;USD&#34;)   #=&amp;gt; true&#xA;Money.from_cents(1000, &#34;USD&#34;) == Money.from_cents(100, &#34;USD&#34;)    #=&amp;gt; false&#xA;Money.from_cents(1000, &#34;USD&#34;) == Money.from_cents(1000, &#34;EUR&#34;)   #=&amp;gt; false&#xA;Money.from_cents(1000, &#34;USD&#34;) != Money.from_cents(1000, &#34;EUR&#34;)   #=&amp;gt; true&#xA;&#xA;# Arithmetic&#xA;Money.from_cents(1000, &#34;USD&#34;) + Money.from_cents(500, &#34;USD&#34;) == Money.from_cents(1500, &#34;USD&#34;)&#xA;Money.from_cents(1000, &#34;USD&#34;) - Money.from_cents(200, &#34;USD&#34;) == Money.from_cents(800, &#34;USD&#34;)&#xA;Money.from_cents(1000, &#34;USD&#34;) / 5                            == Money.from_cents(200, &#34;USD&#34;)&#xA;Money.from_cents(1000, &#34;USD&#34;) * 5                            == Money.from_cents(5000, &#34;USD&#34;)&#xA;&#xA;# Unit to subunit conversions&#xA;Money.from_amount(5, &#34;USD&#34;) == Money.from_cents(500, &#34;USD&#34;)  # 5 USD&#xA;Money.from_amount(5, &#34;JPY&#34;) == Money.from_cents(5, &#34;JPY&#34;)    # 5 JPY&#xA;Money.from_amount(5, &#34;TND&#34;) == Money.from_cents(5000, &#34;TND&#34;) # 5 TND&#xA;&#xA;# Currency conversions&#xA;some_code_to_setup_exchange_rates&#xA;Money.from_cents(1000, &#34;USD&#34;).exchange_to(&#34;EUR&#34;) == Money.from_cents(some_value, &#34;EUR&#34;)&#xA;&#xA;# Swap currency&#xA;Money.from_cents(1000, &#34;USD&#34;).with_currency(&#34;EUR&#34;) == Money.from_cents(1000, &#34;EUR&#34;)&#xA;&#xA;# Formatting (see Formatting section for more options)&#xA;Money.from_cents(100, &#34;USD&#34;).format #=&amp;gt; &#34;$1.00&#34;&#xA;Money.from_cents(100, &#34;GBP&#34;).format #=&amp;gt; &#34;£1.00&#34;&#xA;Money.from_cents(100, &#34;EUR&#34;).format #=&amp;gt; &#34;€1.00&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Currency&lt;/h2&gt; &#xA;&lt;p&gt;Currencies are consistently represented as instances of &lt;code&gt;Money::Currency&lt;/code&gt;. The most part of &lt;code&gt;Money&lt;/code&gt; APIs allows you to supply either a &lt;code&gt;String&lt;/code&gt; or a &lt;code&gt;Money::Currency&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.from_cents(1000, &#34;USD&#34;) == Money.from_cents(1000, Money::Currency.new(&#34;USD&#34;))&#xA;Money.from_cents(1000, &#34;EUR&#34;).currency == Money::Currency.new(&#34;EUR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;Money::Currency&lt;/code&gt; instance holds all the information about the currency, including the currency symbol, name and much more.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;currency = Money.from_cents(1000, &#34;USD&#34;).currency&#xA;currency.iso_code #=&amp;gt; &#34;USD&#34;&#xA;currency.name     #=&amp;gt; &#34;United States Dollar&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To define a new &lt;code&gt;Money::Currency&lt;/code&gt; use &lt;code&gt;Money::Currency.register&lt;/code&gt; as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;curr = {&#xA;  priority:            1,&#xA;  iso_code:            &#34;USD&#34;,&#xA;  iso_numeric:         &#34;840&#34;,&#xA;  name:                &#34;United States Dollar&#34;,&#xA;  symbol:              &#34;$&#34;,&#xA;  subunit:             &#34;Cent&#34;,&#xA;  subunit_to_unit:     100,&#xA;  decimal_mark:        &#34;.&#34;,&#xA;  thousands_separator: &#34;,&#34;&#xA;}&#xA;&#xA;Money::Currency.register(curr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The pre-defined set of attributes includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:priority&lt;/code&gt; a numerical value you can use to sort/group the currency list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:iso_code&lt;/code&gt; the international 3-letter code as defined by the ISO 4217 standard&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:iso_numeric&lt;/code&gt; the international 3-digit code as defined by the ISO 4217 standard&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:name&lt;/code&gt; the currency name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:symbol&lt;/code&gt; the currency symbol (UTF-8 encoded)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:subunit&lt;/code&gt; the name of the fractional monetary unit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:subunit_to_unit&lt;/code&gt; the proportion between the unit and the subunit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:decimal_mark&lt;/code&gt; character between the whole and fraction amounts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:thousands_separator&lt;/code&gt; character between each thousands place&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All attributes except &lt;code&gt;:iso_code&lt;/code&gt; are optional. Some attributes, such as &lt;code&gt;:symbol&lt;/code&gt;, are used by the Money class to print out a representation of the object. Other attributes, such as &lt;code&gt;:name&lt;/code&gt; or &lt;code&gt;:priority&lt;/code&gt;, exist to provide a basic API you can take advantage of to build your application.&lt;/p&gt; &#xA;&lt;h3&gt;:priority&lt;/h3&gt; &#xA;&lt;p&gt;The priority attribute is an arbitrary numerical value you can assign to the &lt;code&gt;Money::Currency&lt;/code&gt; and use in sorting/grouping operation.&lt;/p&gt; &#xA;&lt;p&gt;For instance, let&#39;s assume your Rails application needs to render a currency selector like the one available &lt;a href=&#34;https://finance.yahoo.com/currency-converter/&#34;&gt;here&lt;/a&gt;. You can create a couple of custom methods to return the list of major currencies and all currencies as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Returns an array of currency id where&#xA;# priority &amp;lt; 10&#xA;def major_currencies(hash)&#xA;  hash.inject([]) do |array, (id, attributes)|&#xA;    priority = attributes[:priority]&#xA;    if priority &amp;amp;&amp;amp; priority &amp;lt; 10&#xA;      array[priority] ||= []&#xA;      array[priority] &amp;lt;&amp;lt; id&#xA;    end&#xA;    array&#xA;  end.compact.flatten&#xA;end&#xA;&#xA;# Returns an array of all currency id&#xA;def all_currencies(hash)&#xA;  hash.keys&#xA;end&#xA;&#xA;major_currencies(Money::Currency.table)&#xA;# =&amp;gt; [:usd, :eur, :gbp, :aud, :cad, :jpy]&#xA;&#xA;all_currencies(Money::Currency.table)&#xA;# =&amp;gt; [:aed, :afn, :all, ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Currency&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;Money&lt;/code&gt; defaults to USD as its currency. This can be overwritten using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.default_currency = Money::Currency.new(&#34;CAD&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://github.com/RubyMoney/money/tree/master#ruby-on-rails&#34;&gt;Rails&lt;/a&gt;, then &lt;code&gt;config/initializers/money.rb&lt;/code&gt; is a very good place to put this.&lt;/p&gt; &#xA;&lt;h3&gt;Currency Exponent&lt;/h3&gt; &#xA;&lt;p&gt;The exponent of a money value is the number of digits after the decimal separator (which separates the major unit from the minor unit). See e.g. &lt;a href=&#34;https://www.currency-iso.org/en/shared/amendments/iso-4217-amendment.html&#34;&gt;ISO 4217&lt;/a&gt; for more information. You can find the exponent (as an &lt;code&gt;Integer&lt;/code&gt;) by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money::Currency.new(&#34;USD&#34;).exponent  # =&amp;gt; 2&#xA;Money::Currency.new(&#34;JPY&#34;).exponent  # =&amp;gt; 0&#xA;Money::Currency.new(&#34;MGA&#34;).exponent  # =&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Currency Lookup&lt;/h3&gt; &#xA;&lt;p&gt;To find a given currency by ISO 4217 numeric code (three digits) you can do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money::Currency.find_by_iso_numeric(978) #=&amp;gt; Money::Currency.new(:eur)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Currency Exchange&lt;/h2&gt; &#xA;&lt;p&gt;Exchanging money is performed through an exchange bank object. The default exchange bank object requires one to manually specify the exchange rate. Here&#39;s an example of how it works:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.add_rate(&#34;USD&#34;, &#34;CAD&#34;, 1.24515)&#xA;Money.add_rate(&#34;CAD&#34;, &#34;USD&#34;, 0.803115)&#xA;&#xA;Money.us_dollar(100).exchange_to(&#34;CAD&#34;)  # =&amp;gt; Money.from_cents(124, &#34;CAD&#34;)&#xA;Money.ca_dollar(100).exchange_to(&#34;USD&#34;)  # =&amp;gt; Money.from_cents(80, &#34;USD&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Comparison and arithmetic operations work as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.from_cents(1000, &#34;USD&#34;) &amp;lt;=&amp;gt; Money.from_cents(900, &#34;USD&#34;)   # =&amp;gt; 1; 9.00 USD is smaller&#xA;Money.from_cents(1000, &#34;EUR&#34;) + Money.from_cents(10, &#34;EUR&#34;) == Money.from_cents(1010, &#34;EUR&#34;)&#xA;&#xA;Money.add_rate(&#34;USD&#34;, &#34;EUR&#34;, 0.5)&#xA;Money.from_cents(1000, &#34;EUR&#34;) + Money.from_cents(1000, &#34;USD&#34;) == Money.from_cents(1500, &#34;EUR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exchange rate stores&lt;/h3&gt; &#xA;&lt;p&gt;The default bank is initialized with an in-memory store for exchange rates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.default_bank = Money::Bank::VariableExchange.new(Money::RatesStore::Memory.new)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass your own store implementation, i.e. for storing and retrieving rates off a database, file, cache, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.default_bank = Money::Bank::VariableExchange.new(MyCustomStore.new)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stores must implement the following interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Add new exchange rate.&#xA;# @param [String] iso_from Currency ISO code. ex. &#39;USD&#39;&#xA;# @param [String] iso_to Currency ISO code. ex. &#39;CAD&#39;&#xA;# @param [Numeric] rate Exchange rate. ex. 0.0016&#xA;#&#xA;# @return [Numeric] rate.&#xA;def add_rate(iso_from, iso_to, rate); end&#xA;&#xA;# Get rate. Must be idempotent. i.e. adding the same rate must not produce duplicates.&#xA;# @param [String] iso_from Currency ISO code. ex. &#39;USD&#39;&#xA;# @param [String] iso_to Currency ISO code. ex. &#39;CAD&#39;&#xA;#&#xA;# @return [Numeric] rate.&#xA;def get_rate(iso_from, iso_to); end&#xA;&#xA;# Iterate over rate tuples (iso_from, iso_to, rate)&#xA;#&#xA;# @yieldparam iso_from [String] Currency ISO string.&#xA;# @yieldparam iso_to [String] Currency ISO string.&#xA;# @yieldparam rate [Numeric] Exchange rate.&#xA;#&#xA;# @return [Enumerator]&#xA;#&#xA;# @example&#xA;#   store.each_rate do |iso_from, iso_to, rate|&#xA;#     puts [iso_from, iso_to, rate].join&#xA;#   end&#xA;def each_rate(&amp;amp;block); end&#xA;&#xA;# Wrap store operations in a thread-safe transaction&#xA;# (or IO or Database transaction, depending on your implementation)&#xA;#&#xA;# @yield [n] Block that will be wrapped in transaction.&#xA;#&#xA;# @example&#xA;#   store.transaction do&#xA;#     store.add_rate(&#39;USD&#39;, &#39;CAD&#39;, 0.9)&#xA;#     store.add_rate(&#39;USD&#39;, &#39;CLP&#39;, 0.0016)&#xA;#   end&#xA;def transaction(&amp;amp;block); end&#xA;&#xA;# Serialize store and its content to make Marshal.dump work.&#xA;#&#xA;# Returns an array with store class and any arguments needed to initialize the store in the current state.&#xA;&#xA;# @return [Array] [class, arg1, arg2]&#xA;def marshal_dump; end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following example implements an &lt;code&gt;ActiveRecord&lt;/code&gt; store to save exchange rates to a database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# rails g model exchange_rate from:string to:string rate:float&#xA;&#xA;class ExchangeRate &amp;lt; ApplicationRecord&#xA;  def self.get_rate(from_iso_code, to_iso_code)&#xA;    rate = find_by(from: from_iso_code, to: to_iso_code)&#xA;    rate&amp;amp;.rate&#xA;  end&#xA;&#xA;  def self.add_rate(from_iso_code, to_iso_code, rate)&#xA;    exrate = find_or_initialize_by(from: from_iso_code, to: to_iso_code)&#xA;    exrate.rate = rate&#xA;    exrate.save!&#xA;  end&#xA;&#xA;  def self.each_rate&#xA;    return find_each unless block_given?&#xA;&#xA;    find_each do |rate|&#xA;      yield rate.from, rate.to, rate.rate&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use it with the default bank.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# For Rails 6 pass model name as a string to make it compatible with zeitwerk&#xA;# Money.default_bank = Money::Bank::VariableExchange.new(&#34;ExchangeRate&#34;)&#xA;Money.default_bank = Money::Bank::VariableExchange.new(ExchangeRate)&#xA;&#xA;# Add to the underlying store&#xA;Money.default_bank.add_rate(&#39;USD&#39;, &#39;CAD&#39;, 0.9)&#xA;# Retrieve from the underlying store&#xA;Money.default_bank.get_rate(&#39;USD&#39;, &#39;CAD&#39;) # =&amp;gt; 0.9&#xA;# Exchanging amounts just works.&#xA;Money.from_cents(1000, &#39;USD&#39;).exchange_to(&#39;CAD&#39;) #=&amp;gt; #&amp;lt;Money fractional:900 currency:CAD&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is nothing stopping you from creating store objects which scrapes &lt;a href=&#34;http://www.xe.com&#34;&gt;XE&lt;/a&gt; for the current rates or just returns &lt;code&gt;rand(2)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.default_bank = Money::Bank::VariableExchange.new(StoreWhichScrapesXeDotCom.new)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also implement your own Bank to calculate exchanges differently. Different banks can share Stores.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.default_bank = MyCustomBank.new(Money::RatesStore::Memory.new)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to disable automatic currency conversion to prevent arithmetic when currencies don&#39;t match:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.disallow_currency_conversion!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Implementations&lt;/h3&gt; &#xA;&lt;p&gt;The following is a list of Money.gem compatible currency exchange rate implementations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RubyMoney/eu_central_bank&#34;&gt;eu_central_bank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RubyMoney/google_currency&#34;&gt;google_currency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/askuratovsky/currencylayer&#34;&gt;currencylayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matiaskorhonen/nordea&#34;&gt;nordea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/slbug/nbrb_currency&#34;&gt;nbrb_currency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phlegx/money-currencylayer-bank&#34;&gt;money-currencylayer-bank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spk/money-open-exchange-rates&#34;&gt;money-open-exchange-rates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atwam/money-historical-bank&#34;&gt;money-historical-bank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rmustafin/russian_central_bank&#34;&gt;russian_central_bank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/subvisual/money-uphold-bank&#34;&gt;money-uphold-bank&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;p&gt;There are several formatting rules for when &lt;code&gt;Money#format&lt;/code&gt; is called. For more information, check out the &lt;a href=&#34;https://github.com/RubyMoney/money/raw/master/lib/money/money/formatter.rb&#34;&gt;formatting module source&lt;/a&gt;, or read the latest release&#39;s &lt;a href=&#34;http://www.rubydoc.info/gems/money/Money/Formatter&#34;&gt;rdoc version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to format money according to the EU&#39;s &lt;a href=&#34;http://publications.europa.eu/code/en/en-370303.htm#position&#34;&gt;Rules for expressing monetary units&lt;/a&gt; in either English, Irish, Latvian or Maltese:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;m = Money.from_cents(&#39;123&#39;, :gbp) # =&amp;gt; #&amp;lt;Money fractional:123 currency:GBP&amp;gt;&#xA;m.format(symbol: m.currency.to_s + &#39; &#39;) # =&amp;gt; &#34;GBP 1.23&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rounding&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;Money&lt;/code&gt; objects are rounded to the nearest cent and the additional precision is not preserved:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.from_amount(2.34567).format #=&amp;gt; &#34;$2.35&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To retain the additional precision, you will also need to set &lt;code&gt;infinite_precision&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.default_infinite_precision = true&#xA;Money.from_amount(2.34567).format #=&amp;gt; &#34;$2.34567&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To round to the nearest cent (or anything more precise), you can use the &lt;code&gt;round&lt;/code&gt; method. However, note that the &lt;code&gt;round&lt;/code&gt; method on a &lt;code&gt;Money&lt;/code&gt; object does not work the same way as a normal Ruby &lt;code&gt;Float&lt;/code&gt; object. Money&#39;s &lt;code&gt;round&lt;/code&gt; method accepts different arguments. The first argument to the round method is the rounding mode, while the second argument is the level of precision relative to the cent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Float&#xA;2.34567.round     #=&amp;gt; 2&#xA;2.34567.round(2)  #=&amp;gt; 2.35&#xA;&#xA;# Money&#xA;Money.default_infinite_precision = true&#xA;Money.from_cents(2.34567).format       #=&amp;gt; &#34;$0.0234567&#34;&#xA;Money.from_cents(2.34567).round.format #=&amp;gt; &#34;$0.02&#34;&#xA;Money.from_cents(2.34567).round(BigDecimal::ROUND_HALF_UP, 2).format #=&amp;gt; &#34;$0.0235&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the default rounding mode by passing one of the &lt;code&gt;BigDecimal&lt;/code&gt; mode enumerables like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.rounding_mode = BigDecimal::ROUND_HALF_EVEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ruby-doc.org/stdlib-2.5.1/libdoc/bigdecimal/rdoc/BigDecimal.html#ROUND_MODE&#34;&gt;BigDecimal::ROUND_MODE&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;Ruby on Rails&lt;/h2&gt; &#xA;&lt;p&gt;To integrate money in a Rails application use &lt;a href=&#34;https://github.com/RubyMoney/money-rails&#34;&gt;money-rails&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For deprecated methods of integrating with Rails, check &lt;a href=&#34;https://github.com/RubyMoney/money/wiki&#34;&gt;the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;In order to localize formatting you can use &lt;code&gt;I18n&lt;/code&gt; gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.locale_backend = :i18n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this enabled a thousands seperator and a decimal mark will get looked up in your &lt;code&gt;I18n&lt;/code&gt; translation files. In a Rails application this may look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# config/locale/en.yml&#xA;en:&#xA;  number:&#xA;    currency:&#xA;      format:&#xA;        delimiter: &#34;,&#34;&#xA;        separator: &#34;.&#34;&#xA;  # falling back to&#xA;  number:&#xA;    format:&#xA;      delimiter: &#34;,&#34;&#xA;      separator: &#34;.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For this example &lt;code&gt;Money.from_cents(123456789, &#34;SEK&#34;).format&lt;/code&gt; will return &lt;code&gt;1,234,567.89 kr&lt;/code&gt; which otherwise would have returned &lt;code&gt;1 234 567,89 kr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will work seamlessly with &lt;a href=&#34;https://github.com/svenfuchs/rails-i18n&#34;&gt;rails-i18n&lt;/a&gt; gem that already has a lot of locales defined.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to disable this feature and use defaults instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.locale_backend = nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deprecation&lt;/h3&gt; &#xA;&lt;p&gt;The current default behaviour always checks the I18n locale first, falling back to &#34;per currency&#34; localization. This is now deprecated and will be removed in favour of explicitly defined behaviour in the next major release.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to use I18n localization (formatting depends on the locale):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.locale_backend = :i18n&#xA;&#xA;# example (using default localization from rails-i18n):&#xA;I18n.locale = :en&#xA;Money.from_cents(10_000_00, &#39;USD&#39;).format # =&amp;gt; $10,000.00&#xA;Money.from_cents(10_000_00, &#39;EUR&#39;).format # =&amp;gt; €10,000.00&#xA;&#xA;I18n.locale = :es&#xA;Money.from_cents(10_000_00, &#39;USD&#39;).format # =&amp;gt; $10.000,00&#xA;Money.from_cents(10_000_00, &#39;EUR&#39;).format # =&amp;gt; €10.000,00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to localize the position of the currency symbol, you have to pass it manually. &lt;em&gt;Note: this will become the default formatting behavior in the next version.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;I18n.locale = :fr&#xA;format = I18n.t :format, scope: &#39;number.currency.format&#39;&#xA;Money.from_cents(10_00, &#39;EUR&#39;).format(format: format) # =&amp;gt; 10,00 €&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the legacy behaviour of &#34;per currency&#34; localization (formatting depends only on currency):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.locale_backend = :currency&#xA;&#xA;# example:&#xA;Money.from_cents(10_000_00, &#39;USD&#39;).format # =&amp;gt; $10,000.00&#xA;Money.from_cents(10_000_00, &#39;EUR&#39;).format # =&amp;gt; €10.000,00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you don&#39;t need localization and would like to use default values (can be redefined using &lt;code&gt;Money.default_formatting_rules&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.locale_backend = nil&#xA;&#xA;# example:&#xA;Money.from_cents(10_000_00, &#39;USD&#39;).format # =&amp;gt; $10000.00&#xA;Money.from_cents(10_000_00, &#39;EUR&#39;).format # =&amp;gt; €10000.00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Collection&lt;/h2&gt; &#xA;&lt;p&gt;In case you&#39;re working with collections of &lt;code&gt;Money&lt;/code&gt; instances, have a look at &lt;a href=&#34;https://github.com/RubyMoney/money-collection&#34;&gt;money-collection&lt;/a&gt; for improved performance and accuracy.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have some locale and don&#39;t want to get a runtime error such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;I18n::InvalidLocale: :en is not a valid locale&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;I18n.enforce_available_locales = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Heuristics&lt;/h2&gt; &#xA;&lt;p&gt;Prior to v6.9.0 heuristic analysis of string input was part of this gem. Since then it was extracted in to &lt;a href=&#34;https://github.com/RubyMoney/money-heuristics&#34;&gt;money-heuristics gem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migration Notes&lt;/h2&gt; &#xA;&lt;h4&gt;Version 6.0.0&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;Money#dollars&lt;/code&gt; and &lt;code&gt;Money#amount&lt;/code&gt; methods now return instances of &lt;code&gt;BigDecimal&lt;/code&gt; rather than &lt;code&gt;Float&lt;/code&gt;. We should avoid representing monetary values with floating point types so to avoid a whole class of errors relating to lack of precision. There are two migration options for this change: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The first is to test your application and where applicable update the application to accept a &lt;code&gt;BigDecimal&lt;/code&gt; return value. This is the recommended path.&lt;/li&gt; &#xA;   &lt;li&gt;The second is to migrate from the &lt;code&gt;#amount&lt;/code&gt; and &lt;code&gt;#dollars&lt;/code&gt; methods to use the &lt;code&gt;#to_f&lt;/code&gt; method instead. This option should only be used where &lt;code&gt;Float&lt;/code&gt; is the desired type and nothing else will do for your application&#39;s requirements.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/OMS-Agent-for-Linux</title>
    <updated>2022-07-14T01:32:34Z</updated>
    <id>tag:github.com,2022-07-14:/microsoft/OMS-Agent-for-Linux</id>
    <link href="https://github.com/microsoft/OMS-Agent-for-Linux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Operations Management Suite Agent for Linux&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the Log Analytics agent for Linux! The agent for Linux enables rich and real-time analytics for operational data (Syslog, performance, alerts, inventory) from Linux servers, Docker containers and monitoring tools like Nagios, Zabbix and System Center.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Install guide&lt;/h2&gt; &#xA;&lt;p&gt;The following steps configure setup of the Log Analytics agent in Azure and Azure Government cloud. &lt;em&gt;Commands are for 64-bit&lt;/em&gt;. Before installing the Log Analytics agent for Linux, you need the workspace ID and key for your Azure Monitor Log Analytics workspace.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the Azure portal, click &lt;strong&gt;All services&lt;/strong&gt; found in the upper left-hand corner. In the list of resources, type &lt;strong&gt;Log Analytics&lt;/strong&gt;. As you begin typing, the list filters based on your input. Select &lt;strong&gt;Log Analytics&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In your list of Log Analytics workspaces, select the workspace.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;Advanced settings&lt;/strong&gt; from the left hand pane.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;Connected Sources&lt;/strong&gt;, and then select &lt;strong&gt;Linux Servers&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The value to the right of &lt;strong&gt;Workspace ID&lt;/strong&gt; and &lt;strong&gt;Primary Key&lt;/strong&gt;. Copy and paste both into your favorite editor.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To configure the Linux computer to connect to an Azure Monitor Log Analytics workspace, run the following command providing the workspace ID and primary key copied earlier. The following command downloads the agent, validates its checksum, and installs it.&lt;/p&gt; &#xA;&lt;p&gt;For Azure Monitor Log Analytics workspace in commercial cloud:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh &amp;amp;&amp;amp; sh onboard_agent.sh -w &amp;lt;YOUR WORKSPACE ID&amp;gt; -s &amp;lt;YOUR WORKSPACE PRIMARY KEY&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Azure Monitor Log Analytics workspace in Azure Government cloud:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh &amp;amp;&amp;amp; sh onboard_agent.sh -w &amp;lt;YOUR WORKSPACE ID&amp;gt; -s &amp;lt;YOUR WORKSPACE PRIMARY KEY&amp;gt; -d opinsights.azure.us&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Azure Install guide&lt;/h2&gt; &#xA;&lt;p&gt;If you are an Azure customer, we have an Azure VM extension that allows you to easily onboard to Azure Monitor Log Analytics workspace.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/virtual-machines/extensions/oms-linux?toc=%2Fazure%2Fazure-monitor%2Ftoc.json&#34;&gt;Log Analytics Agent for Linux Azure VM extension documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mF1wtHPEzT0&#34;&gt;Azure Video walkthrough&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/azure-monitor/platform/log-analytics-agent&#34;&gt;Full installation guide&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/microsoft/OMS-Agent-for-Linux/releases/download/OMSAgent_v1.14.16-0/omsagent-1.14.16-0.universal.x64.sh&#34;&gt;Download Latest OMS Agent for Linux (64-bit)&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/microsoft/OMS-Agent-for-Linux/releases/download/OMSAgent_v1.12.15-0/omsagent-1.12.15-0.universal.x86.sh&#34;&gt;Download Latest OMS Agent for Linux (Final 32-bit Release)&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We love feedback! Whether it be good, bad or indifferent, it really helps us build a better product for you. There are a few different routes to give feedback:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;UserVoice:&lt;/strong&gt; Post ideas for new Azure Monitor logs features to work on &lt;a href=&#34;http://feedback.azure.com/forums/267889-azure-operational-insights&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Monthly survey:&lt;/strong&gt; if you are an Azure Monitor customer, you know we send out a survey every month asking our customers about the features we’re working on next.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Elite Linux customer panel:&lt;/strong&gt; If you are a die-hard Azure Monitor Linux user and want to join our weekly calls and talk directly to the product team apply through this &lt;strong&gt;&lt;a href=&#34;https://www.surveymonkey.com/r/6MTHN3P&#34;&gt;survey&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Linux Operating Systems&lt;/h2&gt; &#xA;&lt;h3&gt;Supported Distro/Version strategy&lt;/h3&gt; &#xA;&lt;p&gt;The Log Analytics agent for Linux is built to work with Azure Monitor logs, which has a limited scope of scenarios. Our strategy for supporting new distros and versions starting August 2018 is that we will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Only support server versions, no client OS versions.&lt;/li&gt; &#xA; &lt;li&gt;Focus support on any of the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-machines/linux/endorsed-distros&#34;&gt;Azure Linux Endorsed distros&lt;/a&gt;. Note that there may be some delay between a new distro/version being Azure Linux Endorsed and it being supported for the Log Analytics Linux agent.&lt;/li&gt; &#xA; &lt;li&gt;Not support versions that have passed their manufacturer&#39;s end-of-support date.&lt;/li&gt; &#xA; &lt;li&gt;Always support the latest GA version of a supported distro.&lt;/li&gt; &#xA; &lt;li&gt;Only support VM images; containers, even those derived from official distro publishers&#39; images, are not supported.&lt;/li&gt; &#xA; &lt;li&gt;Not support new versions of AMI.&lt;/li&gt; &#xA; &lt;li&gt;Only support versions that run SSL 1.x by default.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you are using a distro or version that is not currently supported and doesn&#39;t fit our future support strategy, we recommend that you fork this repo, acknowledging that Microsoft support will not provide assistance with for forked agent versions.&lt;/p&gt; &#xA;&lt;h3&gt;Pre-1.13.27 &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-monitor/platform/agent-linux#python-2-requirement&#34;&gt;Python Requirements&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;64-bit&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CentOS 6, 7, and 8&lt;/li&gt; &#xA; &lt;li&gt;Amazon Linux 2017.09&lt;/li&gt; &#xA; &lt;li&gt;Oracle Linux 6 and 7&lt;/li&gt; &#xA; &lt;li&gt;Red Hat Enterprise Linux Server 6, 7, and 8&lt;/li&gt; &#xA; &lt;li&gt;Debian GNU/Linux 8 and 9&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu Linux 14.04 LTS, 16.04 LTS, 18.04 LTS, and 20.04 LTS&lt;/li&gt; &#xA; &lt;li&gt;SUSE Linux Enterprise Server 12 and 15&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;32-bit&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CentOS 6&lt;/li&gt; &#xA; &lt;li&gt;Oracle Linux 6&lt;/li&gt; &#xA; &lt;li&gt;Red Hat Enterprise Linux Server 6&lt;/li&gt; &#xA; &lt;li&gt;Debian GNU/Linux 8 and 9&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu Linux 14.04 LTS and 16.04 LTS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Containers are not supported. If you need to monitor containers, please leverage the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-monitor/insights/containers&#34;&gt;Container Monitoring solution&lt;/a&gt; for Docker hosts or &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-monitor/insights/container-insights-overview&#34;&gt;Azure Monitor for containers&lt;/a&gt; for Kubernetes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Openssl 1.1.0 is only supported on x86_64 platforms (64-bit).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; OpenSSL &amp;lt; 1.x is not supported on any platform.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/azure-monitor/platform/agent-linux-troubleshoot&#34;&gt;Troubleshooting Guide&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Supported Scenarios&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/log-analytics/log-analytics-queries?toc=/azure/azure-monitor/toc.json#write-a-query&#34;&gt;Heartbeat data collection&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/azure-monitor/platform/data-sources-syslog&#34;&gt;Syslog data collection&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/azure-monitor/insights/containers&#34;&gt;Docker collection&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/azure-monitor/platform/data-sources-performance-counters&#34;&gt;Performance data collection&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/azure-monitor/platform/data-sources-alerts-nagios-zabbix&#34;&gt;Nagios and Zabbix alert collection&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/azure-monitor/platform/data-sources-collectd&#34;&gt;CollectD Metrics Collection&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/azure-monitor/platform/data-sources-json&#34;&gt;Custom JSON Data&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/azure-monitor/insights/vmware&#34;&gt;VMware Monitoring&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
</feed>