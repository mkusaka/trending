<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-21T01:44:59Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mkzzn/personal-site</title>
    <updated>2023-03-21T01:44:59Z</updated>
    <id>tag:github.com,2023-03-21:/mkzzn/personal-site</id>
    <link href="https://github.com/mkzzn/personal-site" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Personal Website&lt;/p&gt;&lt;hr&gt;&lt;p&gt;h1. This is the data for my blog&lt;/p&gt; &#xA;&lt;p&gt;It is automatically transformed by &#34;Jekyll&#34;:&lt;a href=&#34;http://github.com/mojombo/jekyll&#34;&gt;http://github.com/mojombo/jekyll&lt;/a&gt; into a static site whenever I push this repository to GitHub.&lt;/p&gt; &#xA;&lt;p&gt;I was tired of having my blog posts end up in a database off on some remote server. That is backwards. I&#39;ve lost valuable posts that way. I want to author my posts locally in Textile or Markdown. My blog should be easily stylable and customizable any way I please. It should take care of creating a feed for me. And most of all, my site should be stored on GitHub so that I never lose data again.&lt;/p&gt; &#xA;&lt;p&gt;h1. License&lt;/p&gt; &#xA;&lt;p&gt;The following directories and their contents are Copyright Tom Preston-Werner. You may not reuse anything therein without my permission:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;_posts/&lt;/li&gt; &#xA; &lt;li&gt;images/&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All other directories and files are MIT Licensed. Feel free to use the HTML and CSS as you please. If you do use them, a link back to &lt;a href=&#34;http://github.com/mojombo/jekyll&#34;&gt;http://github.com/mojombo/jekyll&lt;/a&gt; would be appreciated, but is not required.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JasonBarnabe/greasyfork</title>
    <updated>2023-03-21T01:44:59Z</updated>
    <id>tag:github.com,2023-03-21:/JasonBarnabe/greasyfork</id>
    <link href="https://github.com/JasonBarnabe/greasyfork" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An online repository of user scripts.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://greasyfork.org&#34;&gt;Greasy Fork&lt;/a&gt; is an online repository of user scripts and user styles.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;Post in the &lt;a href=&#34;https://greasyfork.org/forum/&#34;&gt;Greasy Forum&lt;/a&gt; for help with Greasy Fork, user scripts, user script managers, or related.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/JasonBarnabe/greasyfork&#34;&gt;&lt;img src=&#34;https://travis-ci.org/JasonBarnabe/greasyfork.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Greasy Fork welcomes contributions. Learn about &lt;a href=&#34;https://github.com/JasonBarnabe/greasyfork/wiki/Running-Greasy-Fork-locally&#34;&gt;running Greasy Fork locally&lt;/a&gt; and &lt;a href=&#34;https://github.com/JasonBarnabe/greasyfork/wiki/Contributing-code&#34;&gt;contributing code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;If you like Greasy Fork, consider making a donation to help pay for hosting. Suggested amount is $10.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=jason.barnabe@gmail.com&amp;amp;item_name=Contribution+for+Greasy+Fork&#34;&gt;Donate by PayPal or credit card&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Greasy Fork is licensed under the &lt;a href=&#34;https://github.com/JasonBarnabe/greasyfork/raw/master/COPYING&#34;&gt;GPLv3&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-4-active-record-associations-review-readme</title>
    <updated>2023-03-21T01:44:59Z</updated>
    <id>tag:github.com,2023-03-21:/learn-co-curriculum/phase-4-active-record-associations-review-readme</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-active-record-associations-review-readme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Active Record Associations Review&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understand how the foreign key is used to connect between two tables&lt;/li&gt; &#xA; &lt;li&gt;Create one-to-many relationships using the &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt; Active Record macros&lt;/li&gt; &#xA; &lt;li&gt;Create one-to-one relationships using the &lt;code&gt;has_one&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt; macros&lt;/li&gt; &#xA; &lt;li&gt;Create many-to-many relationships using a join table and &lt;code&gt;has_many :through&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use convenience builders to write less verbose code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Active Record associations are an iconic Rails feature. They allow developers to work with complex networks of related models without having to write a single line of SQL â€” as long as all of the names line up!&lt;/p&gt; &#xA;&lt;p&gt;To code along, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle install&#xA;$ rails db:migrate db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;rails console&lt;/code&gt; to follow along with the examples. Remember you&#39;ll need to relaunch the console each time you make changes to the files.&lt;/p&gt; &#xA;&lt;h2&gt;Foreign Keys&lt;/h2&gt; &#xA;&lt;p&gt;It all starts in the database. &lt;strong&gt;Foreign keys&lt;/strong&gt; are columns that refer to the primary key of another table. Conventionally, we label foreign keys in Active Record using the name of the model you&#39;re referencing, and &lt;code&gt;_id&lt;/code&gt;. So for example if the foreign key was for an &lt;code&gt;authors&lt;/code&gt; table it would be &lt;code&gt;author_id&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can visualize the relationship between two tables using foreign keys in an Entity Relationship Diagram (ERD):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-4/active-record-associations-review/posts-authors.png&#34; alt=&#34;one-to-many&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The schema for this ERD would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;create_table &#34;authors&#34;, force: :cascade do |t|&#xA;  t.string &#34;name&#34;&#xA;end&#xA;&#xA;create_table &#34;posts&#34;, force: :cascade do |t|&#xA;  t.string &#34;title&#34;&#xA;  t.text &#34;content&#34;&#xA;  t.integer &#34;author_id&#34;, null: false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like any other column, foreign keys are accessible through instance methods of the same name. This means you could find a given &lt;code&gt;post&lt;/code&gt;&#39;s author with the following Active Record query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Author.find(post.author_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which is equivalent to the SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM authors WHERE id = #{post.author_id}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you could look up a given &lt;code&gt;author&lt;/code&gt;&#39;s posts like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Post.where(&#34;author_id = ?&#34;, author.id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which is equivalent to the SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM posts WHERE author_id = #{author.id}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is all great, but Rails is always looking for ways to save us keystrokes.&lt;/p&gt; &#xA;&lt;h2&gt;One-To-Many Relationships&lt;/h2&gt; &#xA;&lt;p&gt;By using Active Record&#39;s macro-style association class methods, we can add some convenient instance methods to our models.&lt;/p&gt; &#xA;&lt;p&gt;The most common relationship is &lt;strong&gt;one-to-many&lt;/strong&gt;. Active Record gives us the &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt; macros for creating instance methods to access data across models in a &lt;strong&gt;one-to-many&lt;/strong&gt; relationship.&lt;/p&gt; &#xA;&lt;h3&gt;belongs_to&lt;/h3&gt; &#xA;&lt;p&gt;Each &lt;code&gt;Post&lt;/code&gt; is associated with &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;Author&lt;/code&gt;. Update your model to include this association macro:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ApplicationRecord&#xA;  belongs_to :author&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives us access to an &lt;code&gt;author&lt;/code&gt; method in our &lt;code&gt;Post&lt;/code&gt; class. We can now retrieve the actual &lt;code&gt;Author&lt;/code&gt; object that is attached to a &lt;code&gt;post&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post = Post.first&#xA;post.author #=&amp;gt; #&amp;lt;Author @id=1&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;has_many&lt;/h3&gt; &#xA;&lt;p&gt;In the opposite direction, each &lt;code&gt;Author&lt;/code&gt; might be associated with zero, one, or many &lt;code&gt;Post&lt;/code&gt; objects. We haven&#39;t changed the schema of the &lt;code&gt;authors&lt;/code&gt; table at all; Active Record is just going to use &lt;code&gt;posts.author_id&lt;/code&gt; to do all of the lookups. Update your model to include this association macro:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Author &amp;lt; ApplicationRecord&#xA;  has_many :posts&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can look up an author&#39;s posts just as easily:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;author = Author.last&#xA;author.posts #=&amp;gt; [#&amp;lt;Post @id=3&amp;gt;, #&amp;lt;Post @id=4&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember, Active Record uses its &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html&#34;&gt;Inflector&lt;/a&gt; to switch between the singular and plural forms of your models.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Data&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Model&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Author&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Foreign Key&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;author_id&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:author&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:posts&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Like many other Active Record class methods, the symbol you pass determines the name of the instance method that will be defined. So &lt;code&gt;belongs_to :author&lt;/code&gt; will give you a &lt;code&gt;post.author&lt;/code&gt; instance method, and &lt;code&gt;has_many :posts&lt;/code&gt; will give you &lt;code&gt;author.posts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Convenience Builders&lt;/h2&gt; &#xA;&lt;h3&gt;Building a new item in a collection&lt;/h3&gt; &#xA;&lt;p&gt;If you want to add a new post for an author, you might start this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;new_post = Post.create(author_id: author.id, title: &#34;Web Development for Cats&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But the association macros save the day again, allowing this instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;author = Author.first&#xA;new_post = author.posts.create(title: &#34;Web Development for Cats&#34;)&#xA;&#xA;author.posts&#xA;#=&amp;gt; [#&amp;lt;Post @id=1&amp;gt;, #&amp;lt;Post @id=5&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new &lt;code&gt;Post&lt;/code&gt; object with the &lt;code&gt;author_id&lt;/code&gt; already set for you! We use this one as much as possible because it&#39;s just easier.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;author.posts.create&lt;/code&gt; will create a new instance and persist it to the database. You can also use &lt;code&gt;author.posts.build&lt;/code&gt; to generate a new instance without persisting.&lt;/p&gt; &#xA;&lt;h3&gt;Setting a singular association&lt;/h3&gt; &#xA;&lt;p&gt;The setup process is a little bit less intuitive for singular associations. Remember, a given post &lt;code&gt;belongs_to&lt;/code&gt; an author. The verbose way of creating this association would be like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post.author = Author.new(name: &#34;Lasandra Gulgowski&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the previous section, once the &lt;code&gt;has_many&lt;/code&gt; relationship is defined in the &lt;code&gt;Author&lt;/code&gt; model, &lt;code&gt;author.posts&lt;/code&gt; always exists, even if it&#39;s an empty array. Here, &lt;code&gt;post.author&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; until the author is defined, so using &lt;code&gt;post.author.create&lt;/code&gt; would throw an error. Instead, Active Record allows us to prepend the attribute with &lt;code&gt;build_&lt;/code&gt; or &lt;code&gt;create_&lt;/code&gt;. The &lt;code&gt;create_&lt;/code&gt; option will persist to the database for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post = Post.new(title: &#34;Web Development for Dogs&#34;)&#xA;new_author = post.create_author(name: &#34;Lasandra Gulgowski&#34;)&#xA;post.save&#xA;&#xA;post.author&#xA;#=&amp;gt; #&amp;lt;Author @name=&#34;Lasandra Gulgowski&#34;&amp;gt;&#xA;new_author.posts&#xA;#=&amp;gt; [#&amp;lt;Post @title=&#34;Web Development for Dogs&#34;&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember, if you use the &lt;code&gt;build_&lt;/code&gt; option, you&#39;ll need to persist your new &lt;code&gt;author&lt;/code&gt; with &lt;code&gt;#save&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These methods are also documented in the &lt;a href=&#34;http://guides.rubyonrails.org/association_basics.html&#34;&gt;Rails Associations Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Collection Convenience&lt;/h3&gt; &#xA;&lt;p&gt;If you add an existing object to a collection association, Active Record will conveniently take care of setting the foreign key for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;author = Author.find_by(name: &#34;Lasandra Gulgowski&#34;)&#xA;author.posts&#xA;#=&amp;gt; [#&amp;lt;Post @title=&#34;Web Development for Dogs&#34;&amp;gt;]&#xA;&#xA;post = Post.new(title: &#34;Web Development for Cats&#34;)&#xA;post.author&#xA;#=&amp;gt; nil&#xA;&#xA;author.posts &amp;lt;&amp;lt; post&#xA;post.author&#xA;#=&amp;gt; #&amp;lt;Author @name=&#34;Lasandra Gulgowski&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;One-to-One Relationships&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;strong&gt;one-to-one&lt;/strong&gt; relationship is probably the least common type of relationship you&#39;ll find.&lt;/p&gt; &#xA;&lt;p&gt;One case where you might reach for a &lt;strong&gt;one-to-one&lt;/strong&gt; relationship is for creating a separate &lt;code&gt;Profile&lt;/code&gt; model with data related to an &lt;code&gt;Author&lt;/code&gt;. Profiles can get pretty complex, so in large applications it can be a good idea to give them their own model. In this case:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every author would have one, and only one, profile.&lt;/li&gt; &#xA; &lt;li&gt;Every profile would have one, and only one, author.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s an example of what that ERD would look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-4/active-record-associations-review/profiles-authors.png&#34; alt=&#34;one-to-one diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;belongs_to&lt;/code&gt; makes another appearance in this relationship, but instead of &lt;code&gt;has_many&lt;/code&gt; the other model is declared with &lt;code&gt;has_one&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class Author &amp;lt; ApplicationRecord&#xA;  has_many :posts&#xA;&#xA;  # add this:&#xA;  has_one :profile&#xA;end&#xA;&#xA;class Profile &amp;lt; ApplicationRecord&#xA;  # add this:&#xA;  belongs_to :author&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not sure which model should be declared with which macro, it&#39;s usually a safe bet to put &lt;code&gt;belongs_to&lt;/code&gt; on whichever model has the foreign key column in its database table.&lt;/p&gt; &#xA;&lt;p&gt;With this in place, we can now do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;author = Author.first&#xA;profile = Profile.first&#xA;&#xA;author.profile&#xA;#=&amp;gt; #&amp;lt;Profile @username=&#34;ljenk&#34;&amp;gt;&#xA;&#xA;profile.author&#xA;#=&amp;gt; #&amp;lt;Author @name=&#34;Leeroy Jenkins&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Many-to-Many Relationships and Join Tables&lt;/h2&gt; &#xA;&lt;p&gt;Each author has many posts, each post has one author.&lt;/p&gt; &#xA;&lt;p&gt;The universe is in balance. We&#39;re programmers, so this really disturbs us. Let&#39;s shake things up and think about tags.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;One-to-one&lt;/strong&gt; doesn&#39;t work because a post can have multiple tags.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One-to-many&lt;/strong&gt; doesn&#39;t work because a tag can appear on multiple posts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Because there is no &#34;owner&#34; model in this relationship, there&#39;s also no right place to put the foreign key column.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;post_id&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;tag_id&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This join table depicts the relationship between posts and tags in the seed data. Post 1 has tags 1 and 2, Post 2 has tags 1 and 3, etc.&lt;/p&gt; &#xA;&lt;p&gt;We need a new table that sits between &lt;code&gt;posts&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-4/active-record-associations-review/posts-post_tags-tags.png&#34; alt=&#34;many-to-many diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;has_many :through&lt;/h3&gt; &#xA;&lt;p&gt;To work with the join table, both our &lt;code&gt;Post&lt;/code&gt; and &lt;code&gt;Tag&lt;/code&gt; models will have a &lt;code&gt;has_many&lt;/code&gt; association with the &lt;code&gt;post_tags&lt;/code&gt; table. We also still need to associate &lt;code&gt;Post&lt;/code&gt; and &lt;code&gt;Tag&lt;/code&gt; themselves. Ideally, we&#39;d like to be able to call a &lt;code&gt;@my_post.tags&lt;/code&gt; method, right? That&#39;s where &lt;code&gt;has_many :through&lt;/code&gt; comes in.&lt;/p&gt; &#xA;&lt;p&gt;To do this requires a bit of focus. But you can do it! First of all, let&#39;s add the &lt;code&gt;has_many :post_tags&lt;/code&gt; line to our &lt;code&gt;Post&lt;/code&gt; and &lt;code&gt;Tag&lt;/code&gt; models, and add the &lt;code&gt;belongs_to&lt;/code&gt; relationships to our &lt;code&gt;PostTag&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ApplicationRecord&#xA;  belongs_to :author&#xA;  has_many :post_tags&#xA;end&#xA;&#xA;class PostTag &amp;lt; ApplicationRecord&#xA;  belongs_to :post&#xA;  belongs_to :tag&#xA;end&#xA;&#xA;class Tag &amp;lt; ApplicationRecord&#xA;  has_many :post_tags&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So now we can run code like &lt;code&gt;post.post_tags&lt;/code&gt; to get all the join entries. This is kinda sorta what we want. What we really want is to be able to call &lt;code&gt;post.tags&lt;/code&gt;, so we need one more &lt;code&gt;has_many&lt;/code&gt; relationship to complete the link between tags and posts: &lt;code&gt;has_many :through&lt;/code&gt;. Essentially, our &lt;code&gt;Post&lt;/code&gt; model has many &lt;code&gt;tags&lt;/code&gt; &lt;em&gt;through&lt;/em&gt; the &lt;code&gt;post_tags&lt;/code&gt; table, and vice versa. Let&#39;s write that out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ApplicationRecord&#xA;  belongs_to :author&#xA;  has_many :post_tags&#xA;  has_many :tags, through: :post_tags&#xA;end&#xA;&#xA;class PostTag &amp;lt; ApplicationRecord&#xA;  belongs_to :post&#xA;  belongs_to :tag&#xA;end&#xA;&#xA;class Tag &amp;lt; ApplicationRecord&#xA;  has_many :post_tags&#xA;  has_many :posts, through: :post_tags&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we&#39;ve unlocked our &lt;code&gt;@post.tags&lt;/code&gt; and &lt;code&gt;@tag.posts&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;post = Post.first&#xA;post.tags&#xA;#=&amp;gt; [#&amp;lt;Tag @id=1&amp;gt;, #&amp;lt;Tag @id=2&amp;gt;]&#xA;&#xA;tag = Tag.last&#xA;tag.posts&#xA;#=&amp;gt; [#&amp;lt;Post @id=2&amp;gt;, #&amp;lt;Post @id=4&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consult the documentation to learn more about the &lt;a href=&#34;http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association&#34;&gt;has many through&lt;/a&gt; association.&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;For every relationship, there is a foreign key somewhere. Foreign keys correspond to the &lt;code&gt;belongs_to&lt;/code&gt; macro on the model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;One-to-one&lt;/strong&gt; and &lt;strong&gt;many-to-one&lt;/strong&gt; relationships only require a single foreign key, which is stored in the &#39;subordinate&#39; or &#39;owned&#39; model. The other model can access data in the associated table via a &lt;code&gt;has_one&lt;/code&gt; or &lt;code&gt;has_many&lt;/code&gt; method, respectively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Many-to-many&lt;/strong&gt; relationships require a join table containing a foreign key for both models. The models need to use the &lt;code&gt;has_many :through&lt;/code&gt; method to access data from the related table via the join table.&lt;/p&gt; &#xA;&lt;p&gt;You can see the entire &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html&#34;&gt;list of class methods&lt;/a&gt; in the Rails API docs.&lt;/p&gt; &#xA;&lt;h2&gt;Check For Understanding&lt;/h2&gt; &#xA;&lt;p&gt;Before you move on, make sure you can answer the following questions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In a one-to-many or one-to-one relationship, how do you determine which model&#39;s table should include a foreign key?&lt;/li&gt; &#xA; &lt;li&gt;What is a join table and under what circumstances do we need one?&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://guides.rubyonrails.org/association_basics.html&#34;&gt;Active Record Association Basics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dbdiagram.io/d&#34;&gt;Entity Relationship Diagram Generator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>