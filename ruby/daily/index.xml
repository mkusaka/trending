<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-14T01:47:09Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cgallagher/filterize</title>
    <updated>2023-02-14T01:47:09Z</updated>
    <id>tag:github.com,2023-02-14:/cgallagher/filterize</id>
    <link href="https://github.com/cgallagher/filterize" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apply imagemagick effects to your graphics&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#Filterize&lt;/p&gt; &#xA;&lt;p&gt;Because RMagick is fat!&lt;/p&gt; &#xA;&lt;p&gt;This gem will soon be renamed to something cooler but this will do for now!&lt;/p&gt; &#xA;&lt;p&gt;###Setup 1). Add the following to your Gemfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source &#39;https://gems.gemfury.com/gqzpdJ9pZKzYwqcrhZ8q/&#39;&#xA;gem &#39;filterize&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Filterize is currently running at version 0.0.6&lt;/p&gt; &#xA;&lt;p&gt;Once installed you can run commands such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dir = File.dirname(File.expand_path(__FILE__))&#xA;img = File.open(&#34;#{dir}/borat.jpg&#34;, &#39;r&#39;)&#xA;factory = Filterize::Factory.new(img).insert_text(&#34;Very nice, I like!&#34;).tilt_shift&#xA;result = factory.result.path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Producing: &lt;img src=&#34;https://s3.amazonaws.com/dove-by-you/1.jpg&#34; alt=&#34;alt text&#34; title=&#34;Example 1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dir = File.dirname(File.expand_path(__FILE__))&#xA;img = File.open(&#34;#{dir}/borat.jpg&#34;, &#39;r&#39;)&#xA;overlay_image = File.open(&#34;#{dir}/overlay.png&#34;, &#39;r&#39;)&#xA;font_path = &#34;#{dir}/fonts/petitformalscript-regular.ttf&#34;&#xA;factory = Filterize::Factory.new(img).overlay_image(overlay_image, 0, 0, &#39;center&#39;).gotham.grayscale&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Producing:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/dove-by-you/2.jpg&#34; alt=&#34;alt text&#34; title=&#34;Example 2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A full list of the available helpers can be found in lib/filterize/helpers.rb&lt;/p&gt; &#xA;&lt;p&gt;To see a quick example, clone the rep and run the following command from the root directory to run the tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rspec spec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the tests to make borat look different. If you see some nice filters or effects using the imagemagick convert command then add them to the helpers too.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>turingschool-examples/fictional-spoon-2299</title>
    <updated>2023-02-14T01:47:09Z</updated>
    <id>tag:github.com,2023-02-14:/turingschool-examples/fictional-spoon-2299</id>
    <link href="https://github.com/turingschool-examples/fictional-spoon-2299" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hells Kitchen&lt;/h1&gt; &#xA;&lt;p&gt;This repository requires and has been tested on Ruby v2.7.4 and is based on Rails 5.2.8.&lt;/p&gt; &#xA;&lt;p&gt;RSpec and Shoulda-Matchers have been installed and set up.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;fork this repo&lt;/li&gt; &#xA; &lt;li&gt;clone your fork&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone &amp;lt;repo_name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd &amp;lt;repo_name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rails db:{drop,create,migrate,seed}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When you run &lt;code&gt;bundle exec rspec&lt;/code&gt;, you should have 6 failing tests to start.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work on this assessment independently. DO NOT discuss with anyone.&lt;/li&gt; &#xA; &lt;li&gt;You are allowed to use any references including notes, Google, lesson plans, etc.&lt;/li&gt; &#xA; &lt;li&gt;Read each story carefully before you start working.&lt;/li&gt; &#xA; &lt;li&gt;Commit Frequently, about every 15 - 30 minutes&lt;/li&gt; &#xA; &lt;li&gt;Push your code to your fork &lt;strong&gt;once the time is up (not before!)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Once the time for the assessment is up&lt;/strong&gt;, push your code to your fork and create a pull request to the &lt;code&gt;turingschool-examples&lt;/code&gt; repository. Include the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your Name&lt;/li&gt; &#xA; &lt;li&gt;A reflection on how you felt you did with this challenge and what story you got through&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TDD all new work&lt;/li&gt; &#xA; &lt;li&gt;model methods and relationships must be fully tested.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Not Required&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No visual styling is required or expected&lt;/li&gt; &#xA; &lt;li&gt;You do not need to test for or create any model validations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;We are creating an application to track recipes and ingredients at Hell&#39;s Kitchen.&lt;/p&gt; &#xA;&lt;p&gt;Recipes will have a name, complexity and genre. For example: &lt;code&gt;name: &#34;Pasta&#34;, complexity: 2 (integer), genre: &#34;Italian&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ingredients will have a name and a cost stored as an integer. Example: &lt;code&gt;name: &#34;noodles&#34;, cost: 3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure all 6 failing tests you started with are passing before beginning user stories.&lt;/p&gt; &#xA;&lt;h3&gt;User Stories&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;User Story 1&#xA;&#xA;As a visitor,&#xA;When I visit &#39;/ingredients&#39;&#xA;I see a list of all the ingredients including their name and cost&#xA;(e.g. &#34;Ground Beef: 2&#34;&#xA;     &#34;Salt: 4&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;User Story 2&#xA;&#xA;As a visitor,&#xA;When I visit &#39;/recipes/:id&#39;,&#xA;Then I see the recipe&#39;s name, complexity and genre,&#xA;and I see a list of the names of the ingredients for the recipe.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;User Story 3&#xA;&#xA;As a visitor,&#xA;When I visit &#39;/recipes/:id&#39;&#xA;I see the total cost of all of the ingredients in the recipe.&#xA;(e.g. &#34;Total Cost: 22&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Extension&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Extension 1&#xA;Ingredients Sorted Alphabetically&#xA;&#xA;As a visitor,&#xA;When I visit &#39;/ingredients&#39;,&#xA;Then I see that the list of ingredients is sorted alphabetically by name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Extension 2&#xA;Add an Ingredient to a Recipe&#xA;&#xA;As a visitor&#xA;When I visit &#39;/recipes/:id&#39;&#xA;Then I see a form to add an ingredient to this recipe.&#xA;When I fill in a field with an existing ingredient&#39;s ID,&#xA;And I click submit,&#xA;Then I am redirrected to the recipe&#39;s show page,&#xA;And I see the new ingredient listed for this recipe.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-ruby-oo-class-variables-and-class-methods-lab</title>
    <updated>2023-02-14T01:47:09Z</updated>
    <id>tag:github.com,2023-02-14:/learn-co-curriculum/phase-3-ruby-oo-class-variables-and-class-methods-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-ruby-oo-class-variables-and-class-methods-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Class Variables And Class Methods Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use class variables to keep track of data pertaining to a class&lt;/li&gt; &#xA; &lt;li&gt;Define class methods to expose data pertaining to a class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this lab, we&#39;ll be dealing with a &lt;code&gt;Song&lt;/code&gt; class. The &lt;code&gt;Song&lt;/code&gt; class can produce individual songs. Each song has a name, an artist and a genre. We need our &lt;code&gt;Song&lt;/code&gt; class to be able to keep track of the number of songs that it creates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Song.count&#xA;# =&amp;gt; 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We need our &lt;code&gt;Song&lt;/code&gt; class to be able to show us all of the artists of existing songs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Song.artists&#xA;# =&amp;gt; [&#34;Jay-Z&#34;, &#34;Drake&#34;, &#34;Beyonce&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We need our &lt;code&gt;Song&lt;/code&gt; class to be able to show us all of the genres of existing songs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Song.genres&#xA;# =&amp;gt; [&#34;Rap&#34;, &#34;Pop&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also need our &lt;code&gt;Song&lt;/code&gt; class to be able to keep track of the number of songs of each genre it creates.&lt;/p&gt; &#xA;&lt;p&gt;In other words, calling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Song.genre_count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should return something like this;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{&#34;rap&#34; =&amp;gt; 5, &#34;rock&#34; =&amp;gt; 1, &#34;country&#34; =&amp;gt; 3}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, we want our &lt;code&gt;Song&lt;/code&gt; class to reveal to us the number of songs each artist is responsible for.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Song.artist_count&#xA;# =&amp;gt; {&#34;Beyonce&#34; =&amp;gt; 17, &#34;Jay-Z&#34; =&amp;gt; 40}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;ll accomplish this with the use of &lt;strong&gt;class variables&lt;/strong&gt; and &lt;strong&gt;class methods&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Define your &lt;code&gt;Song&lt;/code&gt; class such that an individual song is initialized with a name, artist and genre.&lt;/p&gt; &#xA;&lt;p&gt;There should be an &lt;code&gt;attr_accessor&lt;/code&gt; for those three attributes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ninety_nine_problems = Song.new(&#34;99 Problems&#34;, &#34;Jay-Z&#34;, &#34;rap&#34;)&#xA;&#xA;ninety_nine_problems.name&#xA;# =&amp;gt; &#34;99 Problems&#34;&#xA;&#xA;ninety_nine_problems.artist&#xA;# =&amp;gt; &#34;Jay-Z&#34;&#xA;&#xA;ninety_nine_problems.genre&#xA;# =&amp;gt; &#34;rap&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a class variable, &lt;code&gt;@@count&lt;/code&gt;. We will use this variable to keep track of the number of new songs that are created from the &lt;code&gt;Song&lt;/code&gt; class. Set this variable equal to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At what point should we increment our &lt;code&gt;@@count&lt;/code&gt; of songs? Whenever a new song is created. Your &lt;code&gt;#initialize&lt;/code&gt; method should use the &lt;code&gt;@@count&lt;/code&gt; variable and increment the value of that variable by &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Next, define the following class methods:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Song.count&lt;/code&gt;: returns the total number of songs created.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Song.genres&lt;/code&gt;: returns an array of all of the genres of existing songs. This array should contain only &lt;em&gt;unique genres&lt;/em&gt; — no duplicates! Think about what you&#39;ll need to do to get this method working:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You&#39;ll need a class variable, let&#39;s call it &lt;code&gt;@@genres&lt;/code&gt;, that is equal to an empty array.&lt;/li&gt; &#xA; &lt;li&gt;When should you add genres to the array? Whenever a new song is created. Your &lt;code&gt;#initialize&lt;/code&gt; method should add the genre of the song being created to the &lt;code&gt;@@genres&lt;/code&gt; array. All genres should be added to the array. Control for duplicates when you code your &lt;code&gt;.genres&lt;/code&gt; class method, not when you add genres to the original &lt;code&gt;@@genres&lt;/code&gt; array. We will want to know how many songs of each genre have been created. We&#39;ll revisit that job a little later on.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Song.artists&lt;/code&gt;: returns an array of all of the artists of the existing songs. This array should only contain unique artists––no repeats! Once again think about what you need to do to implement this behavior.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You&#39;ll need a class variable, let&#39;s call it &lt;code&gt;@@artists&lt;/code&gt;, that is equal to an empty array.&lt;/li&gt; &#xA; &lt;li&gt;When should you add artists to this array? Whenever a new song is initialized. Your &lt;code&gt;#initialize&lt;/code&gt; method should add artists to the &lt;code&gt;@@artists&lt;/code&gt; array. All artists should be added to the array. Control for duplicates when you code your &lt;code&gt;.artists&lt;/code&gt; class method, not when you add artists to the original &lt;code&gt;@@artists&lt;/code&gt; array. We will want to know how many songs each have been assigned to each artist. We&#39;ll revisit that job a little later on when we write our &lt;code&gt;.artist_count&lt;/code&gt; method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Song.genre_count&lt;/code&gt;: returns a hash in which the keys are the names of each genre. Each genre name key should point to a value that is the number of songs that have that genre.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Song.genre_count&#xA;  # =&amp;gt; {&#34;rap&#34; =&amp;gt; 5, &#34;rock&#34; =&amp;gt; 1, &#34;country&#34; =&amp;gt; 3}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This manner of displaying numerical data is called a &lt;a href=&#34;https://en.wikipedia.org/wiki/Histogram&#34;&gt;histogram&lt;/a&gt;. How will you create your histogram? There are a few ways!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can need to iterate over the &lt;code&gt;@@genres&lt;/code&gt; array and populate a hash with the key/value pairs. You will need to check to see if the hash already contains a key of a particular genre. If so, increment the value of that key by one, otherwise, create a new key/value pair.&lt;/li&gt; &#xA; &lt;li&gt;You can also look into the &lt;a href=&#34;https://ruby-doc.org/core-2.7.0/Enumerable.html#method-i-tally&#34;&gt;&lt;code&gt;#tally&lt;/code&gt;&lt;/a&gt; method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Song.artist_count&lt;/code&gt;: returns a histogram similar to the one above, but for artists rather than genres.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruby-doc.org/core-2.7.0/Enumerable.html#method-i-tally&#34;&gt;&lt;code&gt;#tally&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>