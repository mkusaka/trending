<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-07T01:33:39Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rubyconfig/config</title>
    <updated>2024-08-07T01:33:39Z</updated>
    <id>tag:github.com,2024-08-07:/rubyconfig/config</id>
    <link href="https://github.com/rubyconfig/config" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easiest way to add multi-environment yaml settings to Rails, Sinatra, Padrino and other Ruby projects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/config&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/config&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/config&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/dt/config&#34; alt=&#34;Downloads Total&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rubyconfig/config/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/rubyconfig/config/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubyconfig&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubyconfig/all/badge.svg?label=backers&#34; alt=&#34;Financial Contributors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;Config helps you easily manage environment specific settings in an easy and usable manner.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simple YAML config files&lt;/li&gt; &#xA; &lt;li&gt;config files support ERB&lt;/li&gt; &#xA; &lt;li&gt;config files support inheritance and multiple environments&lt;/li&gt; &#xA; &lt;li&gt;access config information via convenient object member notation&lt;/li&gt; &#xA; &lt;li&gt;support for multi-level settings (&lt;code&gt;Settings.group.subgroup.setting&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;local developer settings ignored when committing the code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Current version supports and is &lt;a href=&#34;https://raw.githubusercontent.com/rubyconfig/config/master/.github/workflows/tests.yml#L19&#34;&gt;tested&lt;/a&gt; for the following interpreters and frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interpreters &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org&#34;&gt;Ruby&lt;/a&gt; &lt;code&gt;&amp;gt;= 2.6&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.jruby.org&#34;&gt;JRuby&lt;/a&gt; &lt;code&gt;&amp;gt;= 9.2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/oracle/truffleruby&#34;&gt;TruffleRuby&lt;/a&gt; &lt;code&gt;&amp;gt;= 19.3&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Application frameworks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rails &lt;code&gt;&amp;gt;= 5.2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Padrino&lt;/li&gt; &#xA;   &lt;li&gt;Sinatra&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Ruby &lt;code&gt;2.0&lt;/code&gt; to &lt;code&gt;2.3&lt;/code&gt; or Rails &lt;code&gt;3&lt;/code&gt; to &lt;code&gt;4.1&lt;/code&gt; use version &lt;code&gt;1.x&lt;/code&gt; of this gem. For older versions of Rails or Ruby use &lt;a href=&#34;http://github.com/fredwu/app_config&#34;&gt;AppConfig&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Ruby &lt;code&gt;2.4&lt;/code&gt; or &lt;code&gt;2.5&lt;/code&gt; or Rails &lt;code&gt;4.2&lt;/code&gt;, &lt;code&gt;5.0&lt;/code&gt;, or &lt;code&gt;5.1&lt;/code&gt; use version &lt;code&gt;3.x&lt;/code&gt; of this gem.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;Installing on Rails&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#39;config&#39;&lt;/code&gt; to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt; to install it. Then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails g config:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will generate customizable config file &lt;code&gt;config/initializers/config.rb&lt;/code&gt; and set of default settings files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;config/settings.yml&#xA;config/settings.local.yml&#xA;config/settings/development.yml&#xA;config/settings/production.yml&#xA;config/settings/test.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now edit them to adjust to your needs.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: By default, the config environment will match the Rails environment (&lt;code&gt;Rails.env&lt;/code&gt;). This can be changed by setting &lt;code&gt;config.environment&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installing on Padrino&lt;/h3&gt; &#xA;&lt;p&gt;Add the gem to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt; to install it. Then edit &lt;code&gt;app.rb&lt;/code&gt; and register &lt;code&gt;Config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;register Config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing on Sinatra&lt;/h3&gt; &#xA;&lt;p&gt;Add the gem to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt; to install it. Afterwards in need to register &lt;code&gt;Config&lt;/code&gt; in your app and give it a root so it can find the config files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :root, File.dirname(__FILE__)&#xA;register Config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing on other ruby projects&lt;/h3&gt; &#xA;&lt;p&gt;Add the gem to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt; to install it. Then initialize &lt;code&gt;Config&lt;/code&gt; manually within your configure block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Config.load_and_set_settings(Config.setting_files(&#34;/path/to/config_root&#34;, &#34;your_project_environment&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to initialize &lt;code&gt;Config&lt;/code&gt; manually within your configure block if you want to just give it some yml paths to load from.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Config.load_and_set_settings(&#34;/path/to/yaml1&#34;, &#34;/path/to/yaml2&#34;, ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing the Settings object&lt;/h2&gt; &#xA;&lt;p&gt;After installing the gem, &lt;code&gt;Settings&lt;/code&gt; object will become available globally and by default will be compiled from the files listed below. Settings defined in files that are lower in the list override settings higher.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;config/settings.yml&#xA;config/settings/#{environment}.yml&#xA;config/environments/#{environment}.yml&#xA;&#xA;config/settings.local.yml&#xA;config/settings/#{environment}.local.yml&#xA;config/environments/#{environment}.local.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Entries can be accessed via object member notation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.my_config_entry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nested entries are supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.my_section.some_entry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can also use the &lt;code&gt;[]&lt;/code&gt; operator if you don&#39;t know which exact setting you need to access ahead of time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# All the following are equivalent to Settings.my_section.some_entry&#xA;Settings.my_section[:some_entry]&#xA;Settings.my_section[&#39;some_entry&#39;]&#xA;Settings[:my_section][:some_entry]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reloading settings&lt;/h3&gt; &#xA;&lt;p&gt;You can reload the Settings object at any time by running &lt;code&gt;Settings.reload!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Reloading settings and config files&lt;/h3&gt; &#xA;&lt;p&gt;You can also reload the &lt;code&gt;Settings&lt;/code&gt; object from different config files at runtime.&lt;/p&gt; &#xA;&lt;p&gt;For example, in your tests if you want to test the production settings, you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.env = &#34;production&#34;&#xA;Settings.reload_from_files(&#xA;  Rails.root.join(&#34;config&#34;, &#34;settings.yml&#34;).to_s,&#xA;  Rails.root.join(&#34;config&#34;, &#34;settings&#34;, &#34;#{Rails.env}.yml&#34;).to_s,&#xA;  Rails.root.join(&#34;config&#34;, &#34;environments&#34;, &#34;#{Rails.env}.yml&#34;).to_s&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment specific config files&lt;/h3&gt; &#xA;&lt;p&gt;You can have environment specific config files. Environment specific config entries take precedence over common config entries.&lt;/p&gt; &#xA;&lt;p&gt;Example development environment config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#{Rails.root}/config/environments/development.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example production environment config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#{Rails.root}/config/environments/production.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Developer specific config files&lt;/h3&gt; &#xA;&lt;p&gt;If you want to have local settings, specific to your machine or development environment, you can use the following files, which are automatically &lt;code&gt;.gitignore&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.root.join(&#34;config&#34;, &#34;settings.local.yml&#34;).to_s,&#xA;Rails.root.join(&#34;config&#34;, &#34;settings&#34;, &#34;#{Rails.env}.local.yml&#34;).to_s,&#xA;Rails.root.join(&#34;config&#34;, &#34;environments&#34;, &#34;#{Rails.env}.local.yml&#34;).to_s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The file &lt;code&gt;settings.local.yml&lt;/code&gt; will not be loaded in tests to prevent local configuration from causing flaky or non-deterministic tests. Environment-specific files (e.g. &lt;code&gt;settings/test.local.yml&lt;/code&gt;) will still be loaded to allow test-specific credentials.&lt;/p&gt; &#xA;&lt;h3&gt;Adding sources at runtime&lt;/h3&gt; &#xA;&lt;p&gt;You can add new YAML config files at runtime. Just use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.add_source!(&#34;/path/to/source.yml&#34;)&#xA;Settings.reload!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will use the given source.yml file and use its settings to overwrite any previous ones.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, you can prepend a YML file to the list of configuration files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.prepend_source!(&#34;/path/to/source.yml&#34;)&#xA;Settings.reload!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will do the same as &lt;code&gt;add_source&lt;/code&gt;, but the given YML file will be loaded first (instead of last) and its settings will be overwritten by any other configuration file. This is especially useful if you want to define defaults.&lt;/p&gt; &#xA;&lt;p&gt;One thing I like to do for my Rails projects is provide a local.yml config file that is .gitignored (so its independent per developer). Then I create a new initializer in &lt;code&gt;config/initializers/add_local_config.rb&lt;/code&gt; with the contents&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.add_source!(&#34;#{Rails.root}/config/settings/local.yml&#34;)&#xA;Settings.reload!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: this is an example usage, it is easier to just use the default local files &lt;code&gt;settings.local.yml&lt;/code&gt;, &lt;code&gt;settings/#{Rails.env}.local.yml&lt;/code&gt; and &lt;code&gt;environments/#{Rails.env}.local.yml&lt;/code&gt; for your developer specific settings.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You also have the option to add a raw hash as a source. One use case might be storing settings in the database or in environment variables that overwrite what is in the YML files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.add_source!({some_secret: ENV[&#39;some_secret&#39;]})&#xA;Settings.reload!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may pass a hash to &lt;code&gt;prepend_source!&lt;/code&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;Embedded Ruby (ERB)&lt;/h2&gt; &#xA;&lt;p&gt;Embedded Ruby is allowed in the YAML configuration files. ERB will be evaluated at load time by default, and when the &lt;code&gt;evaluate_erb_in_yaml&lt;/code&gt; configuration is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Consider the two following config files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;#{Rails.root}/config/settings.yml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;size: 1&#xA;server: google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;#{Rails.root}/config/environments/development.yml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;size: 2&#xA;computed: &amp;lt;%= 1 + 2 + 3 %&amp;gt;&#xA;section:&#xA;  size: 3&#xA;  servers: [ {name: yahoo.com}, {name: amazon.com} ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the environment specific config entries overwrite the common entries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.size   # =&amp;gt; 2&#xA;Settings.server # =&amp;gt; google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice the embedded Ruby.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.computed # =&amp;gt; 6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that object member notation is maintained even in nested entries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.section.size # =&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice array notation and object member notation is maintained.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.section.servers[0].name # =&amp;gt; yahoo.com&#xA;Settings.section.servers[1].name # =&amp;gt; amazon.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple configuration options available, however you can customize &lt;code&gt;Config&lt;/code&gt; only once, preferably during application initialization phase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Config.setup do |config|&#xA;  config.const_name = &#39;Settings&#39;&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing &lt;code&gt;Config&lt;/code&gt; in Rails, you will find automatically generated file that contains default configuration located at &lt;code&gt;config/initializers/config.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;const_name&lt;/code&gt; - name of the object holding your settings. Default: &lt;code&gt;&#39;Settings&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evaluate_erb_in_yaml&lt;/code&gt; - evaluate ERB in YAML config files. Set to false if the config file contains ERB that should not be evaluated at load time. Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;file_name&lt;/code&gt; - name of the file to store general keys accessible in all environments. Default: &lt;code&gt;&#39;settings&#39;&lt;/code&gt; - located at &lt;code&gt;config/settings.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dir_name&lt;/code&gt; - name of the directory to store environment-specific files. Default: &lt;code&gt;&#39;settings&#39;&lt;/code&gt; - located at &lt;code&gt;config/settings/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Merge customization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;overwrite_arrays&lt;/code&gt; - overwrite arrays found in previously loaded settings file. Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge_hash_arrays&lt;/code&gt; - merge hashes inside of arrays from previously loaded settings files. Makes sense only when &lt;code&gt;overwrite_arrays = false&lt;/code&gt;. Default: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;knockout_prefix&lt;/code&gt; - ability to remove elements of the array set in earlier loaded settings file. Makes sense only when &lt;code&gt;overwrite_arrays = false&lt;/code&gt;, otherwise array settings would be overwritten by default. Default: &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge_nil_values&lt;/code&gt; - &lt;code&gt;nil&lt;/code&gt; values will overwrite an existing value when merging configs. Default: &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# merge_nil_values is true by default&#xA;c = Config.load_files(&#34;./spec/fixtures/development.yml&#34;) # =&amp;gt; #&amp;lt;Config::Options size=2, ...&amp;gt;&#xA;c.size # =&amp;gt; 2&#xA;c.merge!(size: nil) =&amp;gt; #&amp;lt;Config::Options size=nil, ...&amp;gt;&#xA;c.size # =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# To reject nil values when merging settings:&#xA;Config.setup do |config|&#xA;  config.merge_nil_values = false&#xA;end&#xA;&#xA;c = Config.load_files(&#34;./spec/fixtures/development.yml&#34;) # =&amp;gt; #&amp;lt;Config::Options size=2, ...&amp;gt;&#xA;c.size # =&amp;gt; 2&#xA;c.merge!(size: nil) =&amp;gt; #&amp;lt;Config::Options size=nil, ...&amp;gt;&#xA;c.size # =&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/danielsdeleo/deep_merge&#34;&gt;Deep Merge&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Validation&lt;/h3&gt; &#xA;&lt;p&gt;With Ruby 2.1 or newer, you can optionally define a &lt;a href=&#34;https://github.com/dry-rb/dry-schema&#34;&gt;schema&lt;/a&gt; or &lt;a href=&#34;https://github.com/dry-rb/dry-validation&#34;&gt;contract&lt;/a&gt; (added in &lt;code&gt;config-2.1&lt;/code&gt;) using &lt;a href=&#34;https://github.com/dry-rb&#34;&gt;dry-rb&lt;/a&gt; to validate presence (and type) of specific config values. Generally speaking contracts allow to describe more complex validations with depencecies between fields.&lt;/p&gt; &#xA;&lt;p&gt;If you provide either validation option (or both) it will automatically be used to validate your config. If validation fails it will raise a &lt;code&gt;Config::Validation::Error&lt;/code&gt; containing information about all the mismatches between the schema and your config.&lt;/p&gt; &#xA;&lt;p&gt;Both examples below demonstrates how to ensure that the configuration has an optional &lt;code&gt;email&lt;/code&gt; and the &lt;code&gt;youtube&lt;/code&gt; structure with the &lt;code&gt;api_key&lt;/code&gt; field filled. The contract adds an additional rule.&lt;/p&gt; &#xA;&lt;h4&gt;Contract&lt;/h4&gt; &#xA;&lt;p&gt;Leverage dry-validation, you can create a contract with a params schema and rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ConfigContract &amp;lt; Dry::Validation::Contract&#xA;  params do&#xA;    optional(:email).maybe(:str?)&#xA;&#xA;    required(:youtube).schema do&#xA;      required(:api_key).filled&#xA;    end&#xA;  end&#xA;&#xA;  rule(:email) do&#xA;    unless /\A[\w+\-.]+@[a-z\d\-]+(\.[a-z\d\-]+)*\.[a-z]+\z/i.match?(value)&#xA;      key.failure(&#39;has invalid format&#39;)&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;Config.setup do |config|&#xA;  config.validation_contract = ConfigContract.new&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example adds a rule to ensure the &lt;code&gt;email&lt;/code&gt; is valid by matching it against the provided regular expression.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/dry-rb/dry-validation&#34;&gt;dry-validation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Schema&lt;/h4&gt; &#xA;&lt;p&gt;You may also specify a schema using &lt;a href=&#34;https://github.com/dry-rb/dry-schema&#34;&gt;dry-schema&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Config.setup do |config|&#xA;  # ...&#xA;  config.schema do&#xA;    optional(:email).maybe(:str?)&#xA;&#xA;    required(:youtube).schema do&#xA;      required(:api_key).filled&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/dry-rb/dry-schema&#34;&gt;dry-schema&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Missing keys&lt;/h3&gt; &#xA;&lt;p&gt;For an example settings file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;size: 1&#xA;server: google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can test if a value was set for a given key using &lt;code&gt;key?&lt;/code&gt; and its alias &lt;code&gt;has_key?&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.key?(:path)&#xA;# =&amp;gt; false&#xA;Settings.key?(:server)&#xA;# =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, accessing to a missing key returns &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.key?(:path)&#xA;# =&amp;gt; false&#xA;Settings.path&#xA;# =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is not &#34;typo-safe&#34;. To solve this problem, you can configure the &lt;code&gt;fail_on_missing&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Config.setup do |config|&#xA;  config.fail_on_missing = true&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So it will raise a &lt;code&gt;KeyError&lt;/code&gt; when accessing a non-existing key (similar to &lt;code&gt;Hash#fetch&lt;/code&gt; behaviour):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.path&#xA;# =&amp;gt; raises KeyError: key not found: :path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;See section below for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Working with environment variables&lt;/h2&gt; &#xA;&lt;p&gt;To load environment variables from the &lt;code&gt;ENV&lt;/code&gt; object, that will override any settings defined in files, set the &lt;code&gt;use_env&lt;/code&gt; to true in your &lt;code&gt;config/initializers/config.rb&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Config.setup do |config|&#xA;  config.const_name = &#39;Settings&#39;&#xA;  config.use_env = true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now config would read values from the ENV object to the settings. For the example above it would look for keys starting with &lt;code&gt;Settings&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ENV[&#39;Settings.section.size&#39;] = 1&#xA;ENV[&#39;Settings.section.server&#39;] = &#39;google.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It won&#39;t work with arrays, though.&lt;/p&gt; &#xA;&lt;p&gt;It is considered an error to use environment variables to simultaneously assign a &#34;flat&#34; value and a multi-level value to a key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Raises an error when settings are loaded&#xA;ENV[&#39;BACKEND_DATABASE&#39;] = &#39;development&#39;&#xA;ENV[&#39;BACKEND_DATABASE_USER&#39;] = &#39;postgres&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead, specify keys of equal depth in the environment variable names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ENV[&#39;BACKEND_DATABASE_NAME&#39;] = &#39;development&#39;&#xA;ENV[&#39;BACKEND_DATABASE_USER&#39;] = &#39;postgres&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with Heroku&lt;/h3&gt; &#xA;&lt;p&gt;Heroku uses ENV object to store sensitive settings. You cannot upload such files to Heroku because it&#39;s ephemeral filesystem gets recreated from the git sources on each instance refresh. To use config with Heroku just set the &lt;code&gt;use_env&lt;/code&gt; var to &lt;code&gt;true&lt;/code&gt; as mentioned above.&lt;/p&gt; &#xA;&lt;p&gt;To upload your local values to Heroku you could ran &lt;code&gt;bundle exec rake config:heroku&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Fine-tuning&lt;/h3&gt; &#xA;&lt;p&gt;You can customize how environment variables are processed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;env_prefix&lt;/code&gt; (default: &lt;code&gt;const_name&lt;/code&gt;) - load only ENV variables starting with this prefix (case-sensitive)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;env_separator&lt;/code&gt; (default: &lt;code&gt;&#39;.&#39;&lt;/code&gt;) - what string to use as level separator - default value of &lt;code&gt;.&lt;/code&gt; works well with Heroku, but you might want to change it for example for &lt;code&gt;__&lt;/code&gt; to easy override settings from command line, where using dots in variable names might not be allowed (eg. Bash)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;env_converter&lt;/code&gt; (default: &lt;code&gt;:downcase&lt;/code&gt;) - how to process variables names: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;nil&lt;/code&gt; - no change&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:downcase&lt;/code&gt; - convert to lower case&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;env_parse_values&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) - try to parse values to a correct type (&lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For instance, given the following environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SETTINGS__SECTION__SERVER_SIZE=1&#xA;SETTINGS__SECTION__SERVER=google.com&#xA;SETTINGS__SECTION__SSL_ENABLED=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Config.setup do |config|&#xA;  config.use_env = true&#xA;  config.env_prefix = &#39;SETTINGS&#39;&#xA;  config.env_separator = &#39;__&#39;&#xA;  config.env_converter = :downcase&#xA;  config.env_parse_values = true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following settings will be available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.section.server_size # =&amp;gt; 1&#xA;Settings.section.server # =&amp;gt; &#39;google.com&#39;&#xA;Settings.section.ssl_enabled # =&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with AWS Secrets Manager&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to parse variables stored in an AWS Secrets Manager Secret as if they were environment variables by using &lt;code&gt;Config::Sources::EnvSource&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the plaintext secret might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Settings.foo&#34;: &#34;hello&#34;,&#xA;  &#34;Settings.bar&#34;: &#34;world&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to load those settings, fetch the settings from AWS Secrets Manager, parse the plaintext as JSON, pass the resulting &lt;code&gt;Hash&lt;/code&gt; into a new &lt;code&gt;EnvSource&lt;/code&gt;, load the new source, and reload.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# fetch secrets from AWS&#xA;client = Aws::SecretsManager::Client.new&#xA;response = client.get_secret_value(secret_id: &#34;#{ENV[&#39;ENVIRONMENT&#39;]}/my_application&#34;)&#xA;secrets = JSON.parse(response.secret_string)&#xA;&#xA;# load secrets into config&#xA;secret_source = Config::Sources::EnvSource.new(secrets)&#xA;Settings.add_source!(secret_source)&#xA;Settings.reload!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, the following settings will be available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Settings.foo # =&amp;gt; &#34;hello&#34;&#xA;Settings.bar # =&amp;gt; &#34;world&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;EnvSource&lt;/code&gt; will use configuration for &lt;code&gt;env_prefix&lt;/code&gt;, &lt;code&gt;env_separator&lt;/code&gt;, &lt;code&gt;env_converter&lt;/code&gt;, and &lt;code&gt;env_parse_values&lt;/code&gt;, but any of these can be overridden in the constructor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;secret_source = Config::Sources::EnvSource.new(secrets,&#xA;                                               prefix: &#39;MyConfig&#39;,&#xA;                                               separator: &#39;__&#39;,&#xA;                                               converter: nil,&#xA;                                               parse_values: false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You are very warmly welcome to help. Please follow our &lt;a href=&#34;https://raw.githubusercontent.com/rubyconfig/config/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any and all contributions offered in any form, past present or future are understood to be in complete agreement and acceptance with &lt;a href=&#34;https://raw.githubusercontent.com/rubyconfig/config/master/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;h3&gt;Running specs&lt;/h3&gt; &#xA;&lt;p&gt;Setup&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle install&#xA;bundle exec appraisal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List defined appraisals:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle exec appraisal list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run specs for specific appraisal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle exec appraisal rails-6.1 rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run specs for all appraisals:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle exec appraisal rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/pkuczynski&#34;&gt;Piotr Kuczynski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/fredwu&#34;&gt;Fred Wu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/railsjedi&#34;&gt;Jacques Crocker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Inherited from &lt;a href=&#34;http://github.com/cjbottaro/app_config&#34;&gt;AppConfig&lt;/a&gt; by &lt;a href=&#34;http://github.com/cjbottaro&#34;&gt;Christopher J. Bottaro&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute and you are very warmly welcome to help. Please follow our &lt;a href=&#34;https://raw.githubusercontent.com/rubyconfig/config/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any and all contributions offered in any form, past present or future are understood to be in complete agreement and acceptance with the &lt;a href=&#34;https://raw.githubusercontent.com/rubyconfig/config/master/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rubyconfig/config/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubyconfig/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/rubyconfig#backer&#34;&gt;Become a backer&lt;/a&gt; and support us with a small monthly donation to help us continue our activities. Thank you if you already one! 🙏&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/rubyconfig&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubyconfig/backers.svg?width=890&#34; alt=&#34;Backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Sponsors&lt;/h4&gt; &#xA;&lt;p&gt;Support this project by becoming a &lt;a href=&#34;https://opencollective.com/rubyconfig#sponsor&#34;&gt;sponsor&lt;/a&gt;. Your logo will show up here with a link to your website.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/rubyconfig&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubyconfig/sponsors.svg?width=890&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) Piotr Kuczynski. Released under the &lt;a href=&#34;https://raw.githubusercontent.com/rubyconfig/config/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ruby/rexml</title>
    <updated>2024-08-07T01:33:39Z</updated>
    <id>tag:github.com,2024-08-07:/ruby/rexml</id>
    <link href="https://github.com/ruby/rexml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;REXML is an XML toolkit for Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;REXML&lt;/h1&gt; &#xA;&lt;p&gt;REXML was inspired by the Electric XML library for Java, which features an easy-to-use API, small size, and speed. Hopefully, REXML, designed with the same philosophy, has these same features. I&#39;ve tried to keep the API as intuitive as possible, and have followed the Ruby methodology for method naming and code flow, rather than mirroring the Java API.&lt;/p&gt; &#xA;&lt;p&gt;REXML supports both tree and stream document parsing. Stream parsing is faster (about 1.5 times as fast). However, with stream parsing, you don&#39;t get access to features such as XPath.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://ruby.github.io/rexml/&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ll start with parsing an XML document&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;rexml/document&#34;&#xA;file = File.new( &#34;mydoc.xml&#34; )&#xA;doc = REXML::Document.new file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Line 3 creates a new document and parses the supplied file. You can also do the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;rexml/document&#34;&#xA;include REXML  # so that we don&#39;t have to prefix everything with REXML::...&#xA;string = &amp;lt;&amp;lt;EOF&#xA;  &amp;lt;mydoc&amp;gt;&#xA;    &amp;lt;someelement attribute=&#34;nanoo&#34;&amp;gt;Text, text, text&amp;lt;/someelement&amp;gt;&#xA;  &amp;lt;/mydoc&amp;gt;&#xA;EOF&#xA;doc = Document.new string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So parsing a string is just as easy as parsing a file.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;REXML support follows the same maintenance cycle as Ruby releases, as shown on &lt;a href=&#34;https://www.ruby-lang.org/en/downloads/branches/&#34;&gt;https://www.ruby-lang.org/en/downloads/branches/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are running on an end-of-life Ruby, do not expect modern REXML releases to be compatible with it; in fact, it&#39;s recommended that you DO NOT use this gem, and instead use the REXML version that came bundled with your end-of-life Ruby version.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;required_ruby_version&lt;/code&gt; on the gemspec is kept updated on a &lt;a href=&#34;https://github.com/ruby/rexml/pull/70&#34;&gt;best-effort basis&lt;/a&gt; by the community. Up to version 3.2.5, this information was not set. That version &lt;a href=&#34;https://github.com/ruby/rexml/issues/69&#34;&gt;is known broken with at least Ruby &amp;lt; 2.3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;rake test&lt;/code&gt; to run the tests.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and tags, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/ruby/rexml&#34;&gt;https://github.com/ruby/rexml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/ruby/rexml/master/LICENSE.txt&#34;&gt;BSD-2-Clause&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>