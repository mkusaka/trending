<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-25T01:39:12Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rpush/rpush</title>
    <updated>2024-09-25T01:39:12Z</updated>
    <id>tag:github.com,2024-09-25:/rpush/rpush</id>
    <link href="https://github.com/rpush/rpush" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The push notification service for Ruby.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/rpush&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rpush.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rpush/rpush/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/rpush/rpush/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;RPush Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rpush/rpush&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rpush/rpush/badges/coverage.svg?sanitize=true&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rpush/rpush&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rpush/rpush/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/rpush/rpush?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/rpush/rpush&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.github.com/rpush/rpush/master/logo.png&#34; align=&#34;right&#34; width=&#34;200px&#34;&gt; &#xA;&lt;h3&gt;Rpush. The push notification service for Ruby.&lt;/h3&gt; &#xA;&lt;p&gt;Rpush aims to be the &lt;em&gt;de facto&lt;/em&gt; gem for sending push notifications in Ruby. Its core goals are ease of use, reliability and a rich feature set. Rpush provides numerous advanced features not found in others gems, giving you greater control &amp;amp; insight as your project grows. These are a few of the reasons why companies worldwide rely on Rpush to deliver their notifications.&lt;/p&gt; &#xA;&lt;h4&gt;Supported Services&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rpush/rpush/master/#apple-push-notification-service&#34;&gt;&lt;strong&gt;Apple Push Notification Service&lt;/strong&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Including Safari Push Notifications.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rpush/rpush/master/#firebase-cloud-messaging&#34;&gt;&lt;strong&gt;Firebase Cloud Messaging&lt;/strong&gt;&lt;/a&gt; (used to be Google Cloud Messaging)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rpush/rpush/master/#amazon-device-messaging&#34;&gt;&lt;strong&gt;Amazon Device Messaging&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rpush/rpush/master/#windows-phone-notification-service&#34;&gt;&lt;strong&gt;Windows Phone Push Notification Service&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rpush/rpush/master/#pushy&#34;&gt;&lt;strong&gt;Pushy&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rpush/rpush/master/#webpush&#34;&gt;&lt;strong&gt;Webpush&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Feature Highlights&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Using-ActiveRecord&#34;&gt;&lt;strong&gt;ActiveRecord&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Using-Redis&#34;&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/a&gt; for storage.&lt;/li&gt; &#xA; &lt;li&gt;Plugins for &lt;a href=&#34;https://github.com/rpush/rpush-plugin-bugsnag&#34;&gt;&lt;strong&gt;Bugsnag&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/rpush/rpush-plugin-sentry&#34;&gt;&lt;strong&gt;Sentry&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/rpush/rpush-plugin-statsd&#34;&gt;&lt;strong&gt;StatsD&lt;/strong&gt;&lt;/a&gt;. Third party plugins: &lt;a href=&#34;https://github.com/equinux/rpush-plugin-prometheus-exporter&#34;&gt;&lt;strong&gt;Prometheus Exporter&lt;/strong&gt;&lt;/a&gt;. Or &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Writing-a-Plugin&#34;&gt;write your own&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Seamless integration with your projects, including &lt;strong&gt;Rails&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run as a &lt;a href=&#34;https://github.com/rpush/rpush#as-a-daemon&#34;&gt;daemon&lt;/a&gt;, inside a &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Push-API&#34;&gt;job queue&lt;/a&gt;, on the &lt;a href=&#34;https://github.com/rpush/rpush#on-the-command-line&#34;&gt;command-line&lt;/a&gt; or &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Embedding-API&#34;&gt;embedded&lt;/a&gt; in another process.&lt;/li&gt; &#xA; &lt;li&gt;Scales vertically (threading) and horizontally (multiple processes).&lt;/li&gt; &#xA; &lt;li&gt;Designed for uptime - new apps are loaded automatically, signal &lt;code&gt;HUP&lt;/code&gt; to update running apps.&lt;/li&gt; &#xA; &lt;li&gt;Hooks for fine-grained instrumentation and error handling (&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Reflection-API&#34;&gt;Reflection API&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Tested with &lt;strong&gt;MRI&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rpush&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initialize Rpush into your project. &lt;strong&gt;Rails will be detected automatically.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /path/to/project&#xA;$ bundle&#xA;$ bundle exec rpush init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create an App &amp;amp; Notification&lt;/h3&gt; &#xA;&lt;h4&gt;Apple Push Notification Service&lt;/h4&gt; &#xA;&lt;p&gt;There is a choice of two modes (and one legacy mode) using certificates or using tokens:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Rpush::Apns2&lt;/code&gt; This requires an annually renewable certificate. see &lt;a href=&#34;https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_certificate-based_connection_to_apns&#34;&gt;https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_certificate-based_connection_to_apns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Rpush::Apnsp8&lt;/code&gt; This uses encrypted tokens and requires an encryption key id and encryption key (provide as a p8 file). (see &lt;a href=&#34;https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_token-based_connection_to_apns&#34;&gt;https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_token-based_connection_to_apns&lt;/a&gt;) Apple have &lt;a href=&#34;https://developer.apple.com/news/?id=c88acm2b&#34;&gt;announced&lt;/a&gt; that this is not supported after March 31, 2021.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If this is your first time using the APNs, you will need to generate either SSL certificates (for standard Apns) or an Encryption Key (p8) and an Encryption Key ID (for Apnsp8). See &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Generating-Certificates&#34;&gt;Generating Certificates&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h5&gt;Apnsp8&lt;/h5&gt; &#xA;&lt;p&gt;To use the p8 APNs Api:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;app = Rpush::Apnsp8::App.new&#xA;app.name = &#34;ios_app&#34;&#xA;app.apn_key = File.read(&#34;/path/to/sandbox.p8&#34;)&#xA;app.environment = &#34;development&#34; # APNs environment.&#xA;app.apn_key_id = &#34;APN KEY ID&#34; # This is the Encryption Key ID provided by apple&#xA;app.team_id = &#34;TEAM ID&#34; # the team id - e.g. ABCDE12345&#xA;app.bundle_id = &#34;BUNDLE ID&#34; # the unique bundle id of the app, like com.example.appname&#xA;app.connections = 1&#xA;app.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = Rpush::Apnsp8::Notification.new&#xA;n.app = Rpush::Apnsp8::App.find_by_name(&#34;ios_app&#34;)&#xA;n.device_token = &#34;...&#34; # hex string&#xA;n.alert = &#34;hi mom!&#34;&#xA;# n.alert = { title: &#34;push title&#34;, subtitle: &#34;more to say&#34;, body: &#34;hi mom!&#34; }&#xA;n.data = { foo: :bar }&#xA;n.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Apns2&lt;/h5&gt; &#xA;&lt;p&gt;(NB this uses the same protocol as Apnsp8, but authenticates with a certificate rather than tokens)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;app = Rpush::Apns2::App.new&#xA;app.name = &#34;ios_app&#34;&#xA;app.certificate = File.read(&#34;/path/to/sandbox.pem&#34;)&#xA;app.environment = &#34;development&#34;&#xA;app.password = &#34;certificate password&#34;&#xA;app.bundle_id = &#34;BUNDLE ID&#34; # the unique bundle id of the app, like com.example.appname&#xA;app.connections = 1&#xA;app.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = Rpush::Apns2::Notification.new&#xA;n.app = Rpush::Apns2::App.find_by_name(&#34;ios_app&#34;)&#xA;n.device_token = &#34;...&#34; # hex string&#xA;n.alert = &#34;hi mom!&#34;&#xA;# n.alert = { title: &#34;push title&#34;, subtitle: &#34;more to say&#34;, body: &#34;hi mom!&#34; }&#xA;n.data = {&#xA;  headers: { &#39;apns-topic&#39;: &#34;BUNDLE ID&#34; }, # the bundle id of the app, like com.example.appname. Not necessary if set on the app (see above)&#xA;  foo: :bar&#xA;}&#xA;n.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should also implement the &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Reflection-API&#34;&gt;ssl_certificate_will_expire&lt;/a&gt; reflection to monitor when your certificate is due to expire.&lt;/p&gt; &#xA;&lt;h5&gt;Safari Push Notifications&lt;/h5&gt; &#xA;&lt;p&gt;Using one of the notifications methods above, the &lt;code&gt;url_args&lt;/code&gt; attribute is available for Safari Push Notifications.&lt;/p&gt; &#xA;&lt;h5&gt;Environment&lt;/h5&gt; &#xA;&lt;p&gt;The app &lt;code&gt;environment&lt;/code&gt; for any Apns* option is &#34;development&#34; for XCode installs, and &#34;production&#34; for app store and TestFlight. Note that you can now use one (production + sandbox) certificate (you don&#39;t need a separate &#34;sandbox&#34; or development certificate), but if you do generate a development/sandbox certificate it can only be used for &#34;development&#34;. With Apnsp8 tokens, you can target either &#34;development&#34; or &#34;production&#34; environments.&lt;/p&gt; &#xA;&lt;h4&gt;Firebase Cloud Messaging&lt;/h4&gt; &#xA;&lt;p&gt;You will need two params to make use of FCM via Rpush.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;firebase_project_id&lt;/code&gt; - The &lt;code&gt;Project ID&lt;/code&gt; in your Firebase Project Settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;json_key&lt;/code&gt; - The JSON key file for a service account with the &lt;code&gt;Firebase Admin SDK Administrator Service Agent&lt;/code&gt; role.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Create service account in the google cloud account attached to your firebase account: &lt;a href=&#34;https://console.cloud.google.com/iam-admin/serviceaccounts&#34;&gt;https://console.cloud.google.com/iam-admin/serviceaccounts&lt;/a&gt; Make sure it has Role &lt;code&gt;Firebase Admin SDK Administrator Service Agent&lt;/code&gt; Add + Download the json key for the service account.&lt;/p&gt; &#xA;&lt;p&gt;Once you have those two params, you can create an FCM app and send notifications.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;fcm_app = Rpush::Fcm::App.new&#xA;fcm_app.name = &#34;fcm_app&#34;&#xA;fcm_app.firebase_project_id = &#34;someapp-123456&#34;&#xA;fcm_app.json_key = Rails.root.join(&#34;your/key/somewhere.json&#34;).read # or from a ENV variable - just needs to be the whole json file&#xA;fcm_app.connections = 30&#xA;fcm_app.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = Rpush::Fcm::Notification.new&#xA;n.app = Rpush::Fcm::App.where(name: &#34;fcm_app&#34;).first&#xA;n.device_token = device_token # Note that device_token is used here instead of registration_ids&#xA;n.data = {}.transform_values(&amp;amp;:to_s) # All values going in here have to be strings, if you have anything else - nothing goes through&#xA;n.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FCM also requires you to respond to &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Canonical-IDs&#34;&gt;Canonical IDs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://firebase.google.com/docs/cloud-messaging/http-server-ref#notification-payload-support&#34;&gt;FCM reference&lt;/a&gt; for what keys you can use and are available to you. &lt;strong&gt;Note:&lt;/strong&gt; Not all are yet implemented in Rpush.&lt;/p&gt; &#xA;&lt;h4&gt;Amazon Device Messaging&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;app = Rpush::Adm::App.new&#xA;app.name = &#34;kindle_app&#34;&#xA;app.client_id = &#34;...&#34;&#xA;app.client_secret = &#34;...&#34;&#xA;app.connections = 1&#xA;app.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = Rpush::Adm::Notification.new&#xA;n.app = Rpush::Adm::App.find_by_name(&#34;kindle_app&#34;)&#xA;n.registration_ids = [&#34;...&#34;]&#xA;n.data = { message: &#34;hi mom!&#34;}&#xA;n.collapse_key = &#34;Optional consolidationKey&#34;&#xA;n.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more documentation on &lt;a href=&#34;https://developer.amazon.com/sdk/adm.html&#34;&gt;ADM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Windows Phone Notification Service (Windows Phone 8.0 and 7.x)&lt;/h4&gt; &#xA;&lt;p&gt;Uses the older &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/jj662938(v=vs.105).aspx&#34;&gt;Windows Phone 8 Toast template&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;app = Rpush::Wpns::App.new&#xA;app.name = &#34;windows_phone_app&#34;&#xA;app.client_id = # Get this from your apps dashboard https://dev.windows.com&#xA;app.client_secret = # Get this from your apps dashboard https://dev.windows.com&#xA;app.connections = 1&#xA;app.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = Rpush::Wpns::Notification.new&#xA;n.app = Rpush::Wpns::App.find_by_name(&#34;windows_phone_app&#34;)&#xA;n.uri = &#34;http://...&#34;&#xA;n.data = {title:&#34;MyApp&#34;, body:&#34;Hello world&#34;, param:&#34;user_param1&#34;}&#xA;n.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows Notification Service (Windows 8.1, 10 Apps &amp;amp; Phone &amp;gt; 8.0)&lt;/h4&gt; &#xA;&lt;p&gt;Uses the more recent &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/xaml/mt631604.aspx&#34;&gt;Toast template&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;client_id&lt;/code&gt; here is the SID URL as seen &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/hh465407.aspx#7-SIDandSecret&#34;&gt;here&lt;/a&gt;. Do not confuse it with the &lt;code&gt;client_id&lt;/code&gt; on dashboard.&lt;/p&gt; &#xA;&lt;p&gt;You can (optionally) include a launch argument by adding a &lt;code&gt;launch&lt;/code&gt; key to the notification data.&lt;/p&gt; &#xA;&lt;p&gt;You can (optionally) include an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br230842.aspx&#34;&gt;audio element&lt;/a&gt; by setting the sound on the notification.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;app = Rpush::Wns::App.new&#xA;app.name = &#34;windows_phone_app&#34;&#xA;app.client_id = YOUR_SID_URL&#xA;app.client_secret = YOUR_CLIENT_SECRET&#xA;app.connections = 1&#xA;app.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = Rpush::Wns::Notification.new&#xA;n.app = Rpush::Wns::App.find_by_name(&#34;windows_phone_app&#34;)&#xA;n.uri = &#34;http://...&#34;&#xA;n.data = {title:&#34;MyApp&#34;, body:&#34;Hello world&#34;, launch:&#34;launch-argument&#34;}&#xA;n.sound = &#34;ms-appx:///mynotificationsound.wav&#34;&#xA;n.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows Raw Push Notifications&lt;/h4&gt; &#xA;&lt;p&gt;Note: The data is passed as &lt;code&gt;.to_json&lt;/code&gt; so only this format is supported, although raw notifications are meant to support any kind of data. Current data structure enforces hashes and &lt;code&gt;.to_json&lt;/code&gt; representation is natural presentation of it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = Rpush::Wns::RawNotification.new&#xA;n.app = Rpush::Wns::App.find_by_name(&#34;windows_phone_app&#34;)&#xA;n.uri = &#39;http://...&#39;&#xA;n.data = { foo: &#39;foo&#39;, bar: &#39;bar&#39; }&#xA;n.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows Badge Push Notifications&lt;/h4&gt; &#xA;&lt;p&gt;Uses the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/xaml/br212849.aspx&#34;&gt;badge template&lt;/a&gt; and the type &lt;code&gt;wns/badge&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = Rpush::Wns::BadgeNotification.new&#xA;n.app = Rpush::Wns::App.find_by_name(&#34;windows_phone_app&#34;)&#xA;n.uri = &#39;http://...&#39;&#xA;n.badge = 4&#xA;n.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pushy&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pushy.me/&#34;&gt;Pushy&lt;/a&gt; is a highly-reliable push notification gateway, based on &lt;a href=&#34;https://pushy.me/support#what-is-mqtt&#34;&gt;MQTT&lt;/a&gt; protocol for cross platform push notification delivery that includes web, Android, and iOS. One of its advantages is it allows for reliable notification delivery to Android devices in China where Google Cloud Messaging and Firebase Cloud Messaging are blocked and to custom hardware devices that use Android OS but are not using Google Play Services.&lt;/p&gt; &#xA;&lt;p&gt;Note: current implementation of Pushy only supports Android devices and does not include &lt;a href=&#34;https://pushy.me/docs/android/subscribe-topics&#34;&gt;subscriptions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;app = Rpush::Pushy::App.new&#xA;app.name = &#34;android_app&#34;&#xA;app.api_key = YOUR_API_KEY&#xA;app.connections = 1&#xA;app.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = Rpush::Pushy::Notification.new&#xA;n.app = Rpush::Pushy::App.find_by_name(&#34;android_app&#34;)&#xA;n.registration_ids = [&#34;...&#34;]&#xA;n.data = { message: &#34;hi mom!&#34;}&#xA;n.time_to_live = 60 # seconds&#xA;n.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more documentation on &lt;a href=&#34;https://pushy.me/docs&#34;&gt;Pushy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Webpush&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-webpush-protocol-10&#34;&gt;Webpush&lt;/a&gt; is a protocol for delivering push messages to desktop browsers. It&#39;s supported by all major browsers (except Safari, you have to use one of the Apns transports for that).&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-webpush-vapid-01&#34;&gt;VAPID&lt;/a&gt;, there is no need for the sender of push notifications to register upfront with push services (as was the case with the now legacy Mozilla or Google desktop push providers).&lt;/p&gt; &#xA;&lt;p&gt;Instead, you generate a pair of keys and use the public key when subscribing users in your web app. The keys are stored along with an email address (which, according to the spec, can be used by push service providers to contact you in case of problems) in the &lt;code&gt;certificates&lt;/code&gt; field of the Rpush Application record:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;vapid_keypair = Webpush.generate_key.to_hash&#xA;app = Rpush::Webpush::App.new&#xA;app.name = &#39;webpush&#39;&#xA;app.certificate = vapid_keypair.merge(subject: &#39;user@example.org&#39;).to_json&#xA;app.connections = 1&#xA;app.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;subscription&lt;/code&gt; object you obtain from a subscribed browser holds an endpoint URL and cryptographic keys. When sending a notification, simply pass the whole subscription as sole member of the &lt;code&gt;registration_ids&lt;/code&gt; collection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = Rpush::Webpush::Notification.new&#xA;n.app = Rpush::App.find_by_name(&#34;webpush&#34;)&#xA;n.registration_ids = [subscription]&#xA;n.data = { message: &#34;hi mom!&#34; }&#xA;n.save!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to send the same message to multiple devices, create one &lt;code&gt;Notification&lt;/code&gt; per device, as passing multiple subscriptions at once as &lt;code&gt;registration_ids&lt;/code&gt; is not supported.&lt;/p&gt; &#xA;&lt;h3&gt;Running Rpush&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to run Rpush as a separate process in most cases, though embedding and manual modes are provided for low-workload environments.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;rpush help&lt;/code&gt; for all available commands and options.&lt;/p&gt; &#xA;&lt;h4&gt;As a daemon&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /path/to/project&#xA;$ rpush start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;As a foreground process&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /path/to/project&#xA;$ rpush start -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;On the command-line&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rpush push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rpush will deliver all pending notifications and then exit.&lt;/p&gt; &#xA;&lt;h4&gt;In a scheduled job&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rpush.push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Push-API&#34;&gt;Push API&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Embedded inside an existing process&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if defined?(Rails)&#xA;  ActiveSupport.on_load(:after_initialize) do&#xA;    Rpush.embed&#xA;  end&#xA;else&#xA;  Rpush.embed&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call this during startup of your application, for example, by adding it to the end of &lt;code&gt;config/rpush.rb&lt;/code&gt;. See &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Embedding-API&#34;&gt;Embedding API&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Using mina&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://github.com/mina-deploy/mina&#34;&gt;mina&lt;/a&gt;, there is a gem called &lt;a href=&#34;https://github.com/d4rky-pl/mina-rpush&#34;&gt;mina-rpush&lt;/a&gt; which helps you control rpush.&lt;/p&gt; &#xA;&lt;h3&gt;Cleanup&lt;/h3&gt; &#xA;&lt;p&gt;Rpush leaves delivered notifications in the database. If you do not clear them out, they will take up more and more space. This isn&#39;t great for any database, but is especially problematic if using Redis as the Rpush store. &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Using-Redis&#34;&gt;Here&lt;/a&gt; is an example solution for cleaning up delivered notifications in Redis.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/rpush/rpush/wiki/Configuration&#34;&gt;Configuration&lt;/a&gt; for a list of options.&lt;/p&gt; &#xA;&lt;h3&gt;Updating Rpush&lt;/h3&gt; &#xA;&lt;p&gt;You should run &lt;code&gt;rpush init&lt;/code&gt; after upgrading Rpush to check for configuration and migration changes.&lt;/p&gt; &#xA;&lt;h3&gt;From The Wiki&lt;/h3&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Using-Redis&#34;&gt;Using Redis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Using-ActiveRecord&#34;&gt;Using ActiveRecord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Moving-from-Rapns-to-Rpush&#34;&gt;Moving from Rapns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Heroku&#34;&gt;Deploying to Heroku&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Hot-App-Updates&#34;&gt;Hot App Updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Signals&#34;&gt;Signals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Reflection-API&#34;&gt;Reflection API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Push-API&#34;&gt;Push API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Embedding-API&#34;&gt;Embedding API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Writing-a-Plugin&#34;&gt;Writing a Plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Implementing-your-own-storage-backend&#34;&gt;Implementing your own storage backend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Upgrading-from-version-2.x-to-3.0&#34;&gt;Upgrading from 2.x to 3.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Apple Push Notification Service&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Generating-Certificates&#34;&gt;Generating Certificates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Advanced-APNs-Features&#34;&gt;Advanced APNs Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/APNs-Delivery-Failure-Handling&#34;&gt;APNs Delivery Failure Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Why-open-multiple-connections-to-the-APNs%3F&#34;&gt;Why open multiple connections to the APNs?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Dropped-connections&#34;&gt;Silent failures might be dropped connections&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Firebase Cloud Messaging&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/GCM-Notification-Options&#34;&gt;Notification Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Canonical-IDs&#34;&gt;Canonical IDs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpush/rpush/wiki/Delivery-Failures-&amp;amp;-Retries&#34;&gt;Delivery Failures &amp;amp; Retries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;h4&gt;Running Tests&lt;/h4&gt; &#xA;&lt;p&gt;Rpush uses &lt;a href=&#34;https://github.com/thoughtbot/appraisal&#34;&gt;Appraisal&lt;/a&gt; to run tests against multiple versions of Ruby on Rails. This helps making sure that Rpush performs correctly with multiple Rails versions.&lt;/p&gt; &#xA;&lt;p&gt;Rpush also uses RSpec for its tests.&lt;/p&gt; &#xA;&lt;h5&gt;Bootstrapping your test suite:&lt;/h5&gt; &#xA;&lt;p&gt;First, we need to setup a test database, &lt;code&gt;rpush_test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;E.g. (postgres): &lt;code&gt;psql -c &#39;create database rpush_test;&#39; -U postgres &amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;bundle exec appraisal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install all the required gems that requires to test against each version of Rails, which defined in &lt;code&gt;gemfiles/*.gemfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;To run a full test suite:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec appraisal rake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run RSpec against all versions of Rails.&lt;/p&gt; &#xA;&lt;h5&gt;To run a single test&lt;/h5&gt; &#xA;&lt;p&gt;You need to specify a &lt;code&gt;BUNDLE_GEMFILE&lt;/code&gt; pointing to the gemfile before running the normal test command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BUNDLE_GEMFILE=gemfiles/rails_6.0.gemfile rspec spec/unit/apns_feedback_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Multiple database adapter support&lt;/h5&gt; &#xA;&lt;p&gt;When running specs, please note that the ActiveRecord adapter can be changed by setting the &lt;code&gt;ADAPTER&lt;/code&gt; environment variable. For example: &lt;code&gt;ADAPTER=postgresql rake&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available adapters for testing are &lt;code&gt;postgresql&lt;/code&gt;, &lt;code&gt;jdbcpostgresql&lt;/code&gt;, &lt;code&gt;mysql2&lt;/code&gt;, &lt;code&gt;jdbcmysql&lt;/code&gt;, &lt;code&gt;jdbch2&lt;/code&gt;, and &lt;code&gt;sqlite3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the database username is changed at runtime to be the currently logged in user&#39;s name. So if you&#39;re testing with mysql and you&#39;re using a user named &#39;bob&#39;, you will need to grant a mysql user &#39;bob&#39; access to the &#39;rpush_test&#39; mysql database.&lt;/p&gt; &#xA;&lt;p&gt;To switch between ActiveRecord and Redis, set the &lt;code&gt;CLIENT&lt;/code&gt; environment variable to either &lt;code&gt;active_record&lt;/code&gt; or &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>