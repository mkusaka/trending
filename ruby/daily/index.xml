<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-26T01:34:26Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rubycdp/ferrum</title>
    <updated>2024-09-26T01:34:26Z</updated>
    <id>tag:github.com,2024-09-26:/rubycdp/ferrum</id>
    <link href="https://github.com/rubycdp/ferrum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Headless Chrome Ruby API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ferrum - high-level API to control Chrome in Ruby&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img align=&#34;right&#34; width=&#34;320&#34; height=&#34;241&#34; alt=&#34;Ferrum logo&#34; src=&#34;https://raw.githubusercontent.com/rubycdp/ferrum/main/logo.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;As simple as Puppeteer, though even simpler.&lt;/h4&gt; &#xA;&lt;p&gt;It is Ruby clean and high-level API to Chrome. Runs headless by default, but you can configure it to run in a headful mode. All you need is Ruby and &lt;a href=&#34;https://www.google.com/chrome/&#34;&gt;Chrome&lt;/a&gt; or &lt;a href=&#34;https://www.chromium.org/&#34;&gt;Chromium&lt;/a&gt;. Ferrum connects to the browser by &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/&#34;&gt;CDP protocol&lt;/a&gt; and there&#39;s &lt;em&gt;no&lt;/em&gt; Selenium/WebDriver/ChromeDriver dependency. The emphasis was made on a raw CDP protocol because Chrome allows you to do so many things that are barely supported by WebDriver because it should have consistent design with other browsers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rubycdp/cuprite&#34;&gt;Cuprite&lt;/a&gt; is a pure Ruby driver for &lt;a href=&#34;https://github.com/teamcapybara/capybara&#34;&gt;Capybara&lt;/a&gt; based on Ferrum. If you are going to crawl sites you better use Ferrum or &lt;a href=&#34;https://github.com/rubycdp/vessel&#34;&gt;Vessel&lt;/a&gt; because you crawl, not test.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rubycdp/vessel&#34;&gt;Vessel&lt;/a&gt; high-level web crawling framework based on Ferrum and Mechanize.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The development is done in &lt;a href=&#34;https://jb.gg/ruby&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/RubyMine_icon.svg?width=10px&#34; alt=&#34;RubyMine&#34;&gt;&lt;/a&gt; provided by &lt;a href=&#34;https://jb.gg/OpenSourceSupport&#34;&gt;OSS license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#navigation&#34;&gt;Navigation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#finders&#34;&gt;Finders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#network&#34;&gt;Network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#downloads&#34;&gt;Downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#proxy&#34;&gt;Proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#mouse&#34;&gt;Mouse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#keyboard&#34;&gt;Keyboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#cookies&#34;&gt;Cookies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#headers&#34;&gt;Headers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#javascript&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#frames&#34;&gt;Frames&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#frame&#34;&gt;Frame&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#dialogs&#34;&gt;Dialogs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#animation&#34;&gt;Animation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#node&#34;&gt;Node&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#tracing&#34;&gt;Tracing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#clean-up&#34;&gt;Clean Up&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#thread-safety&#34;&gt;Thread safety&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubycdp/ferrum#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s no official Chrome or Chromium package for Linux don&#39;t install it this way because it&#39;s either outdated or unofficial, both are bad. Download it from official source for &lt;a href=&#34;https://www.google.com/chrome/&#34;&gt;Chrome&lt;/a&gt; or &lt;a href=&#34;https://www.chromium.org/getting-involved/download-chromium&#34;&gt;Chromium&lt;/a&gt;. Chrome binary should be in the &lt;code&gt;PATH&lt;/code&gt; or &lt;code&gt;BROWSER_PATH&lt;/code&gt; and you can pass it as an option to browser instance see &lt;code&gt;:browser_path&lt;/code&gt; in &lt;a href=&#34;https://github.com/rubycdp/ferrum#customization&#34;&gt;Customization&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add this to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;ferrum&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Navigate to a website and save a screenshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser = Ferrum::Browser.new&#xA;browser.go_to(&#34;https://google.com&#34;)&#xA;browser.screenshot(path: &#34;google.png&#34;)&#xA;browser.quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you work with browser instance Ferrum creates and maintains a default page for you, in fact all the methods above are sent to the &lt;code&gt;page&lt;/code&gt; instance that is created in the &lt;code&gt;default_context&lt;/code&gt; of the &lt;code&gt;browser&lt;/code&gt; instance. You can interact with a page created manually and this is preferred:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser = Ferrum::Browser.new&#xA;page = browser.create_page&#xA;page.go_to(&#34;https://google.com&#34;)&#xA;input = page.at_xpath(&#34;//input[@name=&#39;q&#39;]&#34;)&#xA;input.focus.type(&#34;Ruby headless driver for Chrome&#34;, :Enter)&#xA;page.at_css(&#34;a &amp;gt; h3&#34;).text # =&amp;gt; &#34;rubycdp/ferrum: Ruby Chrome/Chromium driver - GitHub&#34;&#xA;browser.quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Evaluate some JavaScript and get full width/height:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser = Ferrum::Browser.new&#xA;page = browser.create_page&#xA;page.go_to(&#34;https://www.google.com/search?q=Ruby+headless+driver+for+Capybara&#34;)&#xA;width, height = page.evaluate &amp;lt;&amp;lt;~JS&#xA;  [document.documentElement.offsetWidth,&#xA;   document.documentElement.offsetHeight]&#xA;JS&#xA;# =&amp;gt; [1024, 1931]&#xA;browser.quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do any mouse movements you like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Trace a 100x100 square&#xA;browser = Ferrum::Browser.new&#xA;page = browser.create_page&#xA;page.go_to(&#34;https://google.com&#34;)&#xA;page.mouse&#xA;  .move(x: 0, y: 0)&#xA;  .down&#xA;  .move(x: 0, y: 100)&#xA;  .move(x: 100, y: 100)&#xA;  .move(x: 100, y: 0)&#xA;  .move(x: 0, y: 0)&#xA;  .up&#xA;&#xA;browser.quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;In docker as root you must pass the no-sandbox browser option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ferrum::Browser.new(browser_options: { &#39;no-sandbox&#39;: nil })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It has also been reported that the Chrome process repeatedly crashes when running inside a Docker container on an M1 Mac preventing Ferrum from working. Ferrum should work as expected when deployed to a Docker container on a non-M1 Mac.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;You can customize options with the following code in your test setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ferrum::Browser.new(options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;:headless&lt;/code&gt; (String | Boolean) - Set browser as headless or not, &lt;code&gt;true&lt;/code&gt; by default. You can set &lt;code&gt;&#34;new&#34;&lt;/code&gt; to support &lt;a href=&#34;https://developer.chrome.com/articles/new-headless/&#34;&gt;new headless mode&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:xvfb&lt;/code&gt; (Boolean) - Run browser in a virtual framebuffer, &lt;code&gt;false&lt;/code&gt; by default.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:flatten&lt;/code&gt; (Boolean) - Use one websocket connection to the browser and all the pages in flatten mode.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:window_size&lt;/code&gt; (Array) - The dimensions of the browser window in which to test, expressed as a 2-element array, e.g. [1024, 768]. Default: [1024, 768]&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:extensions&lt;/code&gt; (Array[String | Hash]) - An array of paths to files or JS source code to be preloaded into the browser e.g.: &lt;code&gt;[&#34;/path/to/script.js&#34;, { source: &#34;window.secret = &#39;top&#39;&#34; }]&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:logger&lt;/code&gt; (Object responding to &lt;code&gt;puts&lt;/code&gt;) - When present, debug output is written to this object.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:slowmo&lt;/code&gt; (Integer | Float) - Set a delay in seconds to wait before sending command. Useful companion of headless option, so that you have time to see changes.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:timeout&lt;/code&gt; (Numeric) - The number of seconds we&#39;ll wait for a response when communicating with browser. Default is 5.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:js_errors&lt;/code&gt; (Boolean) - When true, JavaScript errors get re-raised in Ruby.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:pending_connection_errors&lt;/code&gt; (Boolean) - When main frame is still waiting for slow responses while timeout is reached &lt;code&gt;PendingConnectionsError&lt;/code&gt; is raised. It&#39;s better to figure out why you have slow responses and fix or block them rather than turn this setting off. Default is true.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:browser_name&lt;/code&gt; (Symbol) - &lt;code&gt;:chrome&lt;/code&gt; by default, only experimental support for &lt;code&gt;:firefox&lt;/code&gt; for now.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:browser_path&lt;/code&gt; (String) - Path to Chrome binary, you can also set ENV variable as &lt;code&gt;BROWSER_PATH=some/path/chrome bundle exec rspec&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:browser_options&lt;/code&gt; (Hash) - Additional command line options, &lt;a href=&#34;https://peter.sh/experiments/chromium-command-line-switches/&#34;&gt;see them all&lt;/a&gt; e.g. &lt;code&gt;{ &#34;ignore-certificate-errors&#34; =&amp;gt; nil }&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:ignore_default_browser_options&lt;/code&gt; (Boolean) - Ferrum has a number of default options it passes to the browser, if you set this to &lt;code&gt;true&lt;/code&gt; then only options you put in &lt;code&gt;:browser_options&lt;/code&gt; will be passed to the browser, except required ones of course.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:port&lt;/code&gt; (Integer) - Remote debugging port for headless Chrome.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:host&lt;/code&gt; (String) - Remote debugging address for headless Chrome.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:url&lt;/code&gt; (String) - URL for a running instance of Chrome. If this is set, a browser process will not be spawned.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:ws_url&lt;/code&gt; (String) - Websocket url for a running instance of Chrome. If this is set, a browser process will not be spawned. It&#39;s higher priority than &lt;code&gt;:url&lt;/code&gt;, setting both doesn&#39;t make sense.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:process_timeout&lt;/code&gt; (Integer) - How long to wait for the Chrome process to respond on startup.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:ws_max_receive_size&lt;/code&gt; (Integer) - How big messages to accept from Chrome over the web socket, in bytes. Defaults to 64MB. Incoming messages larger than this will cause a &lt;code&gt;Ferrum::DeadBrowserError&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:proxy&lt;/code&gt; (Hash) - Specify proxy settings, &lt;a href=&#34;https://github.com/rubycdp/ferrum#proxy&#34;&gt;read more&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:save_path&lt;/code&gt; (String) - Path to save attachments with &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition&#34;&gt;Content-Disposition&lt;/a&gt; header.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:env&lt;/code&gt; (Hash) - Environment variables you&#39;d like to pass through to the process&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Navigation&lt;/h2&gt; &#xA;&lt;h4&gt;go_to(url) : &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Navigate page to.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;url &lt;code&gt;String&lt;/code&gt; The url should include scheme unless you set &lt;code&gt;base_url&lt;/code&gt; when configuring driver.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;back&lt;/h4&gt; &#xA;&lt;p&gt;Navigate to the previous page in history.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.at_xpath(&#34;//a&#34;).click&#xA;page.back&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;forward&lt;/h4&gt; &#xA;&lt;p&gt;Navigate to the next page in history.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.at_xpath(&#34;//a&#34;).click&#xA;page.back&#xA;page.forward&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;refresh&lt;/h4&gt; &#xA;&lt;p&gt;Reload current page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.refresh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;stop&lt;/h4&gt; &#xA;&lt;p&gt;Stop all navigations and loading pending resources on the page&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;position = **options&lt;/h4&gt; &#xA;&lt;p&gt;Set the position for the browser window&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:left &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:top &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser.position = { left: 10, top: 20 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;position : &lt;code&gt;Array&amp;lt;Integer&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Get the position for the browser window&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser.position # =&amp;gt; [10, 20]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;window_bounds = **options&lt;/h4&gt; &#xA;&lt;p&gt;Set window bounds&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:left &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:top &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:width &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:height &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:window_state &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser.window_bounds = { left: 10, top: 20, width: 1024, height: 768, window_state: &#34;normal&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;window_bounds : &lt;code&gt;Hash&amp;lt;String, Integer | String&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Get window bounds&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser.window_bounds # =&amp;gt; { &#34;left&#34;: 0, &#34;top&#34;: 1286, &#34;width&#34;: 10, &#34;height&#34;: 10, &#34;windowState&#34;: &#34;normal&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;window_id : &lt;code&gt;Integer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Current window id&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser.window_id # =&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Finders&lt;/h2&gt; &#xA;&lt;h4&gt;at_css(selector, **options) : &lt;code&gt;Node&lt;/code&gt; | &lt;code&gt;nil&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find node by selector. Runs &lt;code&gt;document.querySelector&lt;/code&gt; within the document or provided node.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;selector &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:within &lt;code&gt;Node&lt;/code&gt; | &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.at_css(&#34;a[aria-label=&#39;Issues you created&#39;]&#34;) # =&amp;gt; Node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;css(selector, **options) : &lt;code&gt;Array&amp;lt;Node&amp;gt;&lt;/code&gt; | &lt;code&gt;[]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find nodes by selector. The method runs &lt;code&gt;document.querySelectorAll&lt;/code&gt; within the document or provided node.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;selector &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:within &lt;code&gt;Node&lt;/code&gt; | &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.css(&#34;a[aria-label=&#39;Issues you created&#39;]&#34;) # =&amp;gt; [Node]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;at_xpath(selector, **options) : &lt;code&gt;Node&lt;/code&gt; | &lt;code&gt;nil&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find node by xpath.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;selector &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:within &lt;code&gt;Node&lt;/code&gt; | &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.at_xpath(&#34;//a[@aria-label=&#39;Issues you created&#39;]&#34;) # =&amp;gt; Node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;xpath(selector, **options) : &lt;code&gt;Array&amp;lt;Node&amp;gt;&lt;/code&gt; | &lt;code&gt;[]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find nodes by xpath.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;selector &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:within &lt;code&gt;Node&lt;/code&gt; | &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.xpath(&#34;//a[@aria-label=&#39;Issues you created&#39;]&#34;) # =&amp;gt; [Node]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;current_url : &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns current top window location href.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://google.com/&#34;)&#xA;page.current_url # =&amp;gt; &#34;https://www.google.com/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;current_title : &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns current top window title&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://google.com/&#34;)&#xA;page.current_title # =&amp;gt; &#34;Google&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;body : &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns current page&#39;s html.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://google.com/&#34;)&#xA;page.body # =&amp;gt; &#39;&amp;lt;html itemscope=&#34;&#34; itemtype=&#34;http://schema.org/WebPage&#34; lang=&#34;ru&#34;&amp;gt;&amp;lt;head&amp;gt;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h4&gt;screenshot(**options) : &lt;code&gt;String&lt;/code&gt; | &lt;code&gt;Integer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Saves screenshot on a disk or returns it as base64.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:path &lt;code&gt;String&lt;/code&gt; to save a screenshot on the disk. &lt;code&gt;:encoding&lt;/code&gt; will be set to &lt;code&gt;:binary&lt;/code&gt; automatically&lt;/li&gt; &#xA;   &lt;li&gt;:encoding &lt;code&gt;Symbol&lt;/code&gt; &lt;code&gt;:base64&lt;/code&gt; | &lt;code&gt;:binary&lt;/code&gt; you can set it to return image as Base64&lt;/li&gt; &#xA;   &lt;li&gt;:format &lt;code&gt;String&lt;/code&gt; &#34;jpeg&#34; | &#34;png&#34;&lt;/li&gt; &#xA;   &lt;li&gt;:quality &lt;code&gt;Integer&lt;/code&gt; 0-100 works for jpeg only&lt;/li&gt; &#xA;   &lt;li&gt;:full &lt;code&gt;Boolean&lt;/code&gt; whether you need full page screenshot or a viewport&lt;/li&gt; &#xA;   &lt;li&gt;:selector &lt;code&gt;String&lt;/code&gt; css selector for given element, optional&lt;/li&gt; &#xA;   &lt;li&gt;:area &lt;code&gt;Hash&lt;/code&gt; area for screenshot, optional &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;:x &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;:y &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;:width &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;:height &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;:scale &lt;code&gt;Float&lt;/code&gt; zoom in/out&lt;/li&gt; &#xA;   &lt;li&gt;:background_color &lt;code&gt;Ferrum::RGBA.new(0, 0, 0, 0.0)&lt;/code&gt; to have specific background color&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://google.com/&#34;)&#xA;# Save on the disk in PNG&#xA;page.screenshot(path: &#34;google.png&#34;) # =&amp;gt; 134660&#xA;# Save on the disk in JPG&#xA;page.screenshot(path: &#34;google.jpg&#34;) # =&amp;gt; 30902&#xA;# Save to Base64 the whole page not only viewport and reduce quality&#xA;page.screenshot(full: true, quality: 60, encoding: :base64) # &#34;iVBORw0KGgoAAAANSUhEUgAABAAAAAMACAYAAAC6uhUNAAAAAXNSR0IArs4c6Q...&#xA;# Save on the disk with the selected element in PNG&#xA;page.screenshot(path: &#34;google.png&#34;, selector: &#39;textarea&#39;) # =&amp;gt; 11340&#xA;# Save to Base64 with an area of the page in PNG&#xA;page.screenshot(path: &#34;google.png&#34;, area: { x: 0, y: 0, width: 400, height: 300 }) # =&amp;gt; 54239&#xA;# Save with specific background color&#xA;page.screenshot(background_color: Ferrum::RGBA.new(0, 0, 0, 0.0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;pdf(**options) : &lt;code&gt;String&lt;/code&gt; | &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Saves PDF on a disk or returns it as base64.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;:path &lt;code&gt;String&lt;/code&gt; to save a pdf on the disk. &lt;code&gt;:encoding&lt;/code&gt; will be set to &lt;code&gt;:binary&lt;/code&gt; automatically&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;:encoding &lt;code&gt;Symbol&lt;/code&gt; &lt;code&gt;:base64&lt;/code&gt; | &lt;code&gt;:binary&lt;/code&gt; you can set it to return pdf as Base64&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;:landscape &lt;code&gt;Boolean&lt;/code&gt; paper orientation. Defaults to false.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;:scale &lt;code&gt;Float&lt;/code&gt; zoom in/out&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;:format &lt;code&gt;symbol&lt;/code&gt; standard paper sizes :letter, :legal, :tabloid, :ledger, :A0, :A1, :A2, :A3, :A4, :A5, :A6&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;:paper_width &lt;code&gt;Float&lt;/code&gt; set paper width&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;:paper_height &lt;code&gt;Float&lt;/code&gt; set paper height&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;See other &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/tot/Page#method-printToPDF&#34;&gt;native options&lt;/a&gt; you can pass&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://google.com/&#34;)&#xA;# Save to disk as a PDF&#xA;page.pdf(path: &#34;google.pdf&#34;, paper_width: 1.0, paper_height: 1.0) # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;mhtml(**options) : &lt;code&gt;String&lt;/code&gt; | &lt;code&gt;Integer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Saves MHTML on a disk or returns it as a string.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:path &lt;code&gt;String&lt;/code&gt; to save a file on the disk.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://google.com/&#34;)&#xA;page.mhtml(path: &#34;google.mhtml&#34;) # =&amp;gt; 87742&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Network&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;page.network&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;traffic &lt;code&gt;Array&amp;lt;Network::Exchange&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns all information about network traffic as &lt;code&gt;Network::Exchange&lt;/code&gt; instance which in general is a wrapper around &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;response&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.network.traffic # =&amp;gt; [#&amp;lt;Ferrum::Network::Exchange, ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;request : &lt;code&gt;Network::Request&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Page request of the main frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.network.request # =&amp;gt; #&amp;lt;Ferrum::Network::Request...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;response : &lt;code&gt;Network::Response&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Page response of the main frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.network.response # =&amp;gt; #&amp;lt;Ferrum::Network::Response...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;status : &lt;code&gt;Integer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Contains the status code of the main page response (e.g., 200 for a success). This is just a shortcut for &lt;code&gt;response.status&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://github.com/&#34;)&#xA;page.network.status # =&amp;gt; 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;wait_for_idle(**options) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Waits for network idle, returns &lt;code&gt;true&lt;/code&gt; in case of success and &lt;code&gt;false&lt;/code&gt; if there are still connections.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:connections &lt;code&gt;Integer&lt;/code&gt; how many connections are allowed for network to be idling, &lt;code&gt;0&lt;/code&gt; by default&lt;/li&gt; &#xA;   &lt;li&gt;:duration &lt;code&gt;Float&lt;/code&gt; sleep for given amount of time and check again, &lt;code&gt;0.05&lt;/code&gt; by default&lt;/li&gt; &#xA;   &lt;li&gt;:timeout &lt;code&gt;Float&lt;/code&gt; during what time we try to check idle, &lt;code&gt;browser.timeout&lt;/code&gt; by default&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://example.com/&#34;)&#xA;page.at_xpath(&#34;//a[text() = &#39;No UI changes button&#39;]&#34;).click&#xA;page.network.wait_for_idle # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;wait_for_idle!(**options)&lt;/h4&gt; &#xA;&lt;p&gt;Waits for network idle or raises &lt;code&gt;Ferrum::TimeoutError&lt;/code&gt; error. Accepts same arguments as &lt;code&gt;wait_for_idle&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://example.com/&#34;)&#xA;page.at_xpath(&#34;//a[text() = &#39;No UI changes button&#39;]&#34;).click&#xA;page.network.wait_for_idle! # might raise an error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;clear(type)&lt;/h4&gt; &#xA;&lt;p&gt;Clear page&#39;s cache or collected traffic.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;type &lt;code&gt;Symbol&lt;/code&gt; it is either &lt;code&gt;:traffic&lt;/code&gt; or &lt;code&gt;:cache&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;traffic = page.network.traffic # =&amp;gt; []&#xA;page.go_to(&#34;https://github.com/&#34;)&#xA;traffic.size # =&amp;gt; 51&#xA;page.network.clear(:traffic)&#xA;traffic.size # =&amp;gt; 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;intercept(**options)&lt;/h4&gt; &#xA;&lt;p&gt;Set request interception for given options. This method is only sets request interception, you should use &lt;code&gt;on&lt;/code&gt; callback to catch requests and abort or continue them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:pattern &lt;code&gt;String&lt;/code&gt; * by default&lt;/li&gt; &#xA;   &lt;li&gt;:resource_type &lt;code&gt;Symbol&lt;/code&gt; one of the &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/tot/Network#type-ResourceType&#34;&gt;resource types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser = Ferrum::Browser.new&#xA;page = browser.create_page&#xA;page.network.intercept&#xA;page.on(:request) do |request|&#xA;  if request.match?(/bla-bla/)&#xA;    request.abort&#xA;  elsif request.match?(/lorem/)&#xA;    request.respond(body: &#34;Lorem ipsum&#34;)&#xA;  else&#xA;    request.continue&#xA;  end&#xA;end&#xA;page.go_to(&#34;https://google.com&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;authorize(**options, &amp;amp;block)&lt;/h4&gt; &#xA;&lt;p&gt;If site or proxy uses authorization you can provide credentials using this method.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:type &lt;code&gt;Symbol&lt;/code&gt; &lt;code&gt;:server&lt;/code&gt; | &lt;code&gt;:proxy&lt;/code&gt; site or proxy authorization&lt;/li&gt; &#xA;   &lt;li&gt;:user &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:password &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&amp;amp;block accepts authenticated request, which you must subsequently allow or deny, if you don&#39;t care about unwanted requests just call &lt;code&gt;request.continue&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.network.authorize(user: &#34;login&#34;, password: &#34;pass&#34;) { |req| req.continue }&#xA;page.go_to(&#34;http://example.com/authenticated&#34;)&#xA;puts page.network.status # =&amp;gt; 200&#xA;puts page.body # =&amp;gt; Welcome, authenticated client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since Chrome implements authorize using request interception you must continue or abort authorized requests. If you already have code that uses interception you can use &lt;code&gt;authorize&lt;/code&gt; without block, but if not you are obliged to pass block, so this is version doesn&#39;t pass block and can work just fine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser = Ferrum::Browser.new&#xA;page = browser.create_page&#xA;page.network.intercept&#xA;page.on(:request) do |request|&#xA;  if request.resource_type == &#34;Image&#34;&#xA;    request.abort&#xA;  else&#xA;    request.continue&#xA;  end&#xA;end&#xA;&#xA;page.network.authorize(user: &#34;login&#34;, password: &#34;pass&#34;, type: :proxy)&#xA;&#xA;page.go_to(&#34;https://google.com&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You used to call &lt;code&gt;authorize&lt;/code&gt; method without block, but since it&#39;s implemented using request interception there could be a collision with another part of your code that also uses request interception, so that authorize allows the request while your code denies but it&#39;s too late. The block is mandatory now.&lt;/p&gt; &#xA;&lt;h4&gt;emulate_network_conditions(**options)&lt;/h4&gt; &#xA;&lt;p&gt;Activates emulation of network conditions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:offline &lt;code&gt;Boolean&lt;/code&gt; emulate internet disconnection, &lt;code&gt;false&lt;/code&gt; by default&lt;/li&gt; &#xA;   &lt;li&gt;:latency &lt;code&gt;Integer&lt;/code&gt; minimum latency from request sent to response headers received (ms), &lt;code&gt;0&lt;/code&gt; by default&lt;/li&gt; &#xA;   &lt;li&gt;:download_throughput &lt;code&gt;Integer&lt;/code&gt; maximal aggregated download throughput (bytes/sec), &lt;code&gt;-1&lt;/code&gt; by default, disables download throttling&lt;/li&gt; &#xA;   &lt;li&gt;:upload_throughput &lt;code&gt;Integer&lt;/code&gt; maximal aggregated upload throughput (bytes/sec), &lt;code&gt;-1&lt;/code&gt; by default, disables download throttling&lt;/li&gt; &#xA;   &lt;li&gt;:connection_type &lt;code&gt;String&lt;/code&gt; connection type if known, one of: none, cellular2g, cellular3g, cellular4g, bluetooth, ethernet, wifi, wimax, other. &lt;code&gt;nil&lt;/code&gt; by default&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.network.emulate_network_conditions(connection_type: &#34;cellular2g&#34;)&#xA;page.go_to(&#34;https://github.com/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;offline_mode&lt;/h4&gt; &#xA;&lt;p&gt;Activates offline mode for a page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.network.offline_mode&#xA;page.go_to(&#34;https://github.com/&#34;) # =&amp;gt; Ferrum::StatusError (Request to https://github.com/ failed(net::ERR_INTERNET_DISCONNECTED))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;cache(disable: &lt;code&gt;Boolean&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Toggles ignoring cache for each request. If true, cache will not be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.network.cache(disable: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;page.downloads&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;files &lt;code&gt;Array&amp;lt;Hash&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns all information about downloaded files as a &lt;code&gt;Hash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;http://localhost/attachment.pdf&#34;)&#xA;page.downloads.files # =&amp;gt; [{&#34;frameId&#34;=&amp;gt;&#34;E3316DF1B5383D38F8ADF7485005FDE3&#34;, &#34;guid&#34;=&amp;gt;&#34;11a68745-98ac-4d54-9b57-9f9016c268b3&#34;, &#34;url&#34;=&amp;gt;&#34;http://localhost/attachment.pdf&#34;, &#34;suggestedFilename&#34;=&amp;gt;&#34;attachment.pdf&#34;, &#34;totalBytes&#34;=&amp;gt;4911, &#34;receivedBytes&#34;=&amp;gt;4911, &#34;state&#34;=&amp;gt;&#34;completed&#34;}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;wait(timeout)&lt;/h4&gt; &#xA;&lt;p&gt;Waits until the download is finished.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;http://localhost/attachment.pdf&#34;)&#xA;page.downloads.wait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;http://localhost/page&#34;)&#xA;page.downloads.wait { page.at_css(&#34;#download&#34;).click }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;set_behavior(**options)&lt;/h4&gt; &#xA;&lt;p&gt;Sets behavior in case of file to be downloaded.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:save_path &lt;code&gt;String&lt;/code&gt; absolute path of where to store the file&lt;/li&gt; &#xA;   &lt;li&gt;:behavior &lt;code&gt;Symbol&lt;/code&gt; &lt;code&gt;deny | allow | allowAndName | default&lt;/code&gt;, &lt;code&gt;allow&lt;/code&gt; by default&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://example.com/&#34;)&#xA;page.downloads.set_behavior(save_path: &#34;/tmp&#34;, behavior: :allow)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Proxy&lt;/h2&gt; &#xA;&lt;p&gt;You can set a proxy with a &lt;code&gt;:proxy&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ferrum::Browser.new(proxy: { host: &#34;x.x.x.x&#34;, port: &#34;8800&#34;, user: &#34;user&#34;, password: &#34;pa$$&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;:bypass&lt;/code&gt; can specify semi-colon-separated list of hosts for which proxy shouldn&#39;t be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ferrum::Browser.new(proxy: { host: &#34;x.x.x.x&#34;, port: &#34;8800&#34;, bypass: &#34;*.google.com;*foo.com&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In general passing a proxy option when instantiating a browser results in a browser running with proxy command line flags, so that it affects all pages and contexts. You can create a page in a new context which can use its own proxy settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser = Ferrum::Browser.new&#xA;&#xA;browser.create_page(proxy: { host: &#34;x.x.x.x&#34;, port: 31337, user: &#34;user&#34;, password: &#34;password&#34; }) do |page|&#xA;  page.go_to(&#34;https://api.ipify.org?format=json&#34;)&#xA;  page.body # =&amp;gt; &#34;x.x.x.x&#34;&#xA;end&#xA;&#xA;browser.create_page(proxy: { host: &#34;y.y.y.y&#34;, port: 31337, user: &#34;user&#34;, password: &#34;password&#34; }) do |page|&#xA;  page.go_to(&#34;https://api.ipify.org?format=json&#34;)&#xA;  page.body # =&amp;gt; &#34;y.y.y.y&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mouse&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;page.mouse&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;scroll_to(x, y)&lt;/h4&gt; &#xA;&lt;p&gt;Scroll page to a given x, y&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x &lt;code&gt;Integer&lt;/code&gt; the pixel along the horizontal axis of the document that you want displayed in the upper left&lt;/li&gt; &#xA; &lt;li&gt;y &lt;code&gt;Integer&lt;/code&gt; the pixel along the vertical axis of the document that you want displayed in the upper left&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://www.google.com/search?q=Ruby+headless+driver+for+Capybara&#34;)&#xA;page.mouse.scroll_to(0, 400)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;click(**options) : &lt;code&gt;Mouse&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Click given coordinates, fires mouse move, down and up events.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:x &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:y &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:delay &lt;code&gt;Float&lt;/code&gt; defaults to 0. Delay between mouse down and mouse up events&lt;/li&gt; &#xA;   &lt;li&gt;:button &lt;code&gt;Symbol&lt;/code&gt; :left | :right, defaults to :left&lt;/li&gt; &#xA;   &lt;li&gt;:count &lt;code&gt;Integer&lt;/code&gt; defaults to 1&lt;/li&gt; &#xA;   &lt;li&gt;:modifiers &lt;code&gt;Integer&lt;/code&gt; bitfield for key modifiers. See&lt;code&gt;keyboard.modifiers&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;down(**options) : &lt;code&gt;Mouse&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Mouse down for given coordinates.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:button &lt;code&gt;Symbol&lt;/code&gt; :left | :right, defaults to :left&lt;/li&gt; &#xA;   &lt;li&gt;:count &lt;code&gt;Integer&lt;/code&gt; defaults to 1&lt;/li&gt; &#xA;   &lt;li&gt;:modifiers &lt;code&gt;Integer&lt;/code&gt; bitfield for key modifiers. See&lt;code&gt;keyboard.modifiers&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;up(**options) : &lt;code&gt;Mouse&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Mouse up for given coordinates.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:button &lt;code&gt;Symbol&lt;/code&gt; :left | :right, defaults to :left&lt;/li&gt; &#xA;   &lt;li&gt;:count &lt;code&gt;Integer&lt;/code&gt; defaults to 1&lt;/li&gt; &#xA;   &lt;li&gt;:modifiers &lt;code&gt;Integer&lt;/code&gt; bitfield for key modifiers. See&lt;code&gt;keyboard.modifiers&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;move(x:, y:, steps: 1) : &lt;code&gt;Mouse&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Mouse move to given x and y.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:x &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:y &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:steps &lt;code&gt;Integer&lt;/code&gt; defaults to 1. Sends intermediate mousemove events.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keyboard&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;page.keyboard&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;down(key) : &lt;code&gt;Keyboard&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Dispatches a keydown event.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;key &lt;code&gt;String&lt;/code&gt; | &lt;code&gt;Symbol&lt;/code&gt; Name of key such as &#34;a&#34;, :enter, :backspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;up(key) : &lt;code&gt;Keyboard&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Dispatches a keyup event.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;key &lt;code&gt;String&lt;/code&gt; | &lt;code&gt;Symbol&lt;/code&gt; Name of key such as &#34;b&#34;, :enter, :backspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;type(*keys) : &lt;code&gt;Keyboard&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Sends a keydown, keypress/input, and keyup event for each character in the text.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;text &lt;code&gt;String&lt;/code&gt; | &lt;code&gt;Array&amp;lt;String&amp;gt; | Array&amp;lt;Symbol&amp;gt;&lt;/code&gt; A text to type into a focused element, &lt;code&gt;[:Shift, &#34;s&#34;], &#34;tring&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;modifiers(keys) : &lt;code&gt;Integer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns bitfield for a given keys&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;keys &lt;code&gt;Array&amp;lt;Symbol&amp;gt;&lt;/code&gt; :alt | :ctrl | :command | :shift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cookies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;page.cookies&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;all : &lt;code&gt;Hash&amp;lt;String, Cookie&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns cookies hash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.cookies.all # =&amp;gt; {&#34;NID&#34;=&amp;gt;#&amp;lt;Ferrum::Cookies::Cookie:0x0000558624b37a40 @attributes={&#34;name&#34;=&amp;gt;&#34;NID&#34;, &#34;value&#34;=&amp;gt;&#34;...&#34;, &#34;domain&#34;=&amp;gt;&#34;.google.com&#34;, &#34;path&#34;=&amp;gt;&#34;/&#34;, &#34;expires&#34;=&amp;gt;1583211046.575681, &#34;size&#34;=&amp;gt;178, &#34;httpOnly&#34;=&amp;gt;true, &#34;secure&#34;=&amp;gt;false, &#34;session&#34;=&amp;gt;false}&amp;gt;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rubycdp/ferrum/main/value&#34;&gt;&lt;/a&gt; : &lt;code&gt;Cookie&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns cookie&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;value &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.cookies[&#34;NID&#34;] # =&amp;gt; &amp;lt;Ferrum::Cookies::Cookie:0x0000558624b67a88 @attributes={&#34;name&#34;=&amp;gt;&#34;NID&#34;, &#34;value&#34;=&amp;gt;&#34;...&#34;, &#34;domain&#34;=&amp;gt;&#34;.google.com&#34;, &#34;path&#34;=&amp;gt;&#34;/&#34;, &#34;expires&#34;=&amp;gt;1583211046.575681, &#34;size&#34;=&amp;gt;178, &#34;httpOnly&#34;=&amp;gt;true, &#34;secure&#34;=&amp;gt;false, &#34;session&#34;=&amp;gt;false}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;set(value) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Sets a cookie&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;value &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:name &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:value &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:domain &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:expires &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:samesite &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:httponly &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.cookies.set(name: &#34;stealth&#34;, value: &#34;omg&#34;, domain: &#34;google.com&#34;) # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;value &lt;code&gt;Cookie&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;nid_cookie = page.cookies[&#34;NID&#34;] # =&amp;gt; &amp;lt;Ferrum::Cookies::Cookie:0x0000558624b67a88&amp;gt;&#xA;page.cookies.set(nid_cookie) # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;remove(**options) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Removes given cookie&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:name &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:domain &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:url &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.cookies.remove(name: &#34;stealth&#34;, domain: &#34;google.com&#34;) # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;clear : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Removes all cookies for current page&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.cookies.clear # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;store(path) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Stores all cookies of current page in a file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Cookies are saved into cookies.yml&#xA;page.cookies.store # =&amp;gt; 15657&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;load(path) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Loads all cookies from the file and sets them for current page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Cookies are loaded from cookies.yml&#xA;page.cookies.load # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Headers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;page.headers&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;get : &lt;code&gt;Hash&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Get all headers&lt;/p&gt; &#xA;&lt;h4&gt;set(headers) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set given headers. Eventually clear all headers and set given ones.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;headers &lt;code&gt;Hash&lt;/code&gt; key-value pairs for example &lt;code&gt;&#34;User-Agent&#34; =&amp;gt; &#34;Browser&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;add(headers) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Adds given headers to already set ones.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;headers &lt;code&gt;Hash&lt;/code&gt; key-value pairs for example &lt;code&gt;&#34;Referer&#34; =&amp;gt; &#34;http://example.com&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;clear : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Clear all headers.&lt;/p&gt; &#xA;&lt;h2&gt;JavaScript&lt;/h2&gt; &#xA;&lt;h4&gt;evaluate(expression, *args)&lt;/h4&gt; &#xA;&lt;p&gt;Evaluate and return result for given JS expression&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;expression &lt;code&gt;String&lt;/code&gt; should be valid JavaScript&lt;/li&gt; &#xA; &lt;li&gt;args &lt;code&gt;Object&lt;/code&gt; you can pass arguments, though it should be a valid &lt;code&gt;Node&lt;/code&gt; or a simple value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.evaluate(&#34;[window.scrollX, window.scrollY]&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;evaluate_async(expression, wait_time, *args)&lt;/h4&gt; &#xA;&lt;p&gt;Evaluate asynchronous expression and return result&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;expression &lt;code&gt;String&lt;/code&gt; should be valid JavaScript&lt;/li&gt; &#xA; &lt;li&gt;wait_time How long we should wait for Promise to resolve or reject&lt;/li&gt; &#xA; &lt;li&gt;args &lt;code&gt;Object&lt;/code&gt; you can pass arguments, though it should be a valid &lt;code&gt;Node&lt;/code&gt; or a simple value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.evaluate_async(%(arguments[0]({foo: &#34;bar&#34;})), 5) # =&amp;gt; { &#34;foo&#34; =&amp;gt; &#34;bar&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;execute(expression, *args)&lt;/h4&gt; &#xA;&lt;p&gt;Execute expression. Doesn&#39;t return the result&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;expression &lt;code&gt;String&lt;/code&gt; should be valid JavaScript&lt;/li&gt; &#xA; &lt;li&gt;args &lt;code&gt;Object&lt;/code&gt; you can pass arguments, though it should be a valid &lt;code&gt;Node&lt;/code&gt; or a simple value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.execute(%(1 + 1)) # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;evaluate_on_new_document(expression)&lt;/h4&gt; &#xA;&lt;p&gt;Evaluate JavaScript to modify things before a page load&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;expression &lt;code&gt;String&lt;/code&gt; should be valid JavaScript&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser.evaluate_on_new_document &amp;lt;&amp;lt;~JS&#xA;  Object.defineProperty(navigator, &#34;languages&#34;, {&#xA;    get: function() { return [&#34;tlh&#34;]; }&#xA;  });&#xA;JS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;add_script_tag(**options) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:url &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:path &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:content &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:type &lt;code&gt;String&lt;/code&gt; - &lt;code&gt;text/javascript&lt;/code&gt; by default&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.add_script_tag(url: &#34;http://example.com/stylesheet.css&#34;) # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;add_style_tag(**options) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:url &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:path &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:content &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.add_style_tag(content: &#34;h1 { font-size: 40px; }&#34;) # =&amp;gt; true&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;bypass_csp(**options) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:enabled &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; by default&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.bypass_csp # =&amp;gt; true&#xA;page.go_to(&#34;https://github.com/ruby-concurrency/concurrent-ruby/blob/master/docs-source/promises.in.md&#34;)&#xA;page.refresh&#xA;page.add_script_tag(content: &#34;window.__injected = 42&#34;)&#xA;page.evaluate(&#34;window.__injected&#34;) # =&amp;gt; 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Emulation&lt;/h2&gt; &#xA;&lt;h4&gt;disable_javascript&lt;/h4&gt; &#xA;&lt;p&gt;Disables Javascripts from the loaded HTML source. You can still evaluate JavaScript with &lt;code&gt;evaluate&lt;/code&gt; or &lt;code&gt;execute&lt;/code&gt;. Returns nothing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.disable_javascript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;set_viewport&lt;/h4&gt; &#xA;&lt;p&gt;Overrides device screen dimensions and emulates viewport.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:width &lt;code&gt;Integer&lt;/code&gt;, viewport width. &lt;code&gt;0&lt;/code&gt; by default&lt;/li&gt; &#xA;   &lt;li&gt;:height &lt;code&gt;Integer&lt;/code&gt;, viewport height. &lt;code&gt;0&lt;/code&gt; by default&lt;/li&gt; &#xA;   &lt;li&gt;:scale_factor &lt;code&gt;Float&lt;/code&gt;, device scale factor. &lt;code&gt;0&lt;/code&gt; by default&lt;/li&gt; &#xA;   &lt;li&gt;:mobile &lt;code&gt;Boolean&lt;/code&gt;, whether to emulate mobile device. &lt;code&gt;false&lt;/code&gt; by default&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.set_viewport(width: 1000, height: 600, scale_factor: 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frames&lt;/h2&gt; &#xA;&lt;h4&gt;frames : &lt;code&gt;Array[Frame] | []&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns all the frames current page have.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://www.w3schools.com/tags/tag_frame.asp&#34;)&#xA;page.frames # =&amp;gt;&#xA;# [&#xA;#   #&amp;lt;Ferrum::Frame @id=&#34;C6D104CE454A025FBCF22B98DE612B12&#34; @parent_id=nil @name=nil @state=:stopped_loading @execution_id=1&amp;gt;,&#xA;#   #&amp;lt;Ferrum::Frame @id=&#34;C09C4E4404314AAEAE85928EAC109A93&#34; @parent_id=&#34;C6D104CE454A025FBCF22B98DE612B12&#34; @state=:stopped_loading @execution_id=2&amp;gt;,&#xA;#   #&amp;lt;Ferrum::Frame @id=&#34;2E9C7F476ED09D87A42F2FEE3C6FBC3C&#34; @parent_id=&#34;C6D104CE454A025FBCF22B98DE612B12&#34; @state=:stopped_loading @execution_id=3&amp;gt;,&#xA;#   ...&#xA;# ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;main_frame : &lt;code&gt;Frame&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns page&#39;s main frame, the top of the tree and the parent of all frames.&lt;/p&gt; &#xA;&lt;h4&gt;frame_by(**options) : &lt;code&gt;Frame | nil&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find frame by given options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:id &lt;code&gt;String&lt;/code&gt; - Unique frame&#39;s id that browser provides&lt;/li&gt; &#xA;   &lt;li&gt;:name &lt;code&gt;String&lt;/code&gt; - Frame&#39;s name if there&#39;s one&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.frame_by(id: &#34;C6D104CE454A025FBCF22B98DE612B12&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frame&lt;/h2&gt; &#xA;&lt;h4&gt;id : &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Frame&#39;s unique id.&lt;/p&gt; &#xA;&lt;h4&gt;parent_id : &lt;code&gt;String | nil&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parent frame id if this one is nested in another one.&lt;/p&gt; &#xA;&lt;h4&gt;execution_id : &lt;code&gt;Integer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Execution context id which is used by JS, each frame has it&#39;s own context in which JS evaluates.&lt;/p&gt; &#xA;&lt;h4&gt;name : &lt;code&gt;String | nil&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If frame was given a name it should be here.&lt;/p&gt; &#xA;&lt;h4&gt;state : &lt;code&gt;Symbol | nil&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;One of the states frame&#39;s in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:started_loading&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:navigated&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:stopped_loading&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;url : &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns current frame&#39;s location href.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&#34;)&#xA;frame = page.frames[1]&#xA;frame.url # =&amp;gt; https://interactive-examples.mdn.mozilla.net/pages/tabbed/iframe.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;title&lt;/h4&gt; &#xA;&lt;p&gt;Returns current frame&#39;s title.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&#34;)&#xA;frame = page.frames[1]&#xA;frame.title # =&amp;gt; HTML Demo: &amp;lt;iframe&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;main? : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If current frame is the main frame of the page (top of the tree).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://www.w3schools.com/tags/tag_frame.asp&#34;)&#xA;frame = page.frame_by(id: &#34;C09C4E4404314AAEAE85928EAC109A93&#34;)&#xA;frame.main? # =&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;current_url : &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns current frame&#39;s top window location href.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://www.w3schools.com/tags/tag_frame.asp&#34;)&#xA;frame = page.frame_by(id: &#34;C09C4E4404314AAEAE85928EAC109A93&#34;)&#xA;frame.current_url # =&amp;gt; &#34;https://www.w3schools.com/tags/tag_frame.asp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;current_title : &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns current frame&#39;s top window title.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://www.w3schools.com/tags/tag_frame.asp&#34;)&#xA;frame = page.frame_by(id: &#34;C09C4E4404314AAEAE85928EAC109A93&#34;)&#xA;frame.current_title # =&amp;gt; &#34;HTML frame tag&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;body : &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns current frame&#39;s html.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://www.w3schools.com/tags/tag_frame.asp&#34;)&#xA;frame = page.frame_by(id: &#34;C09C4E4404314AAEAE85928EAC109A93&#34;)&#xA;frame.body # =&amp;gt; &#34;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;doctype&lt;/h4&gt; &#xA;&lt;p&gt;Returns current frame&#39;s doctype.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://www.w3schools.com/tags/tag_frame.asp&#34;)&#xA;page.main_frame.doctype # =&amp;gt; &#34;&amp;lt;!DOCTYPE html&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;content = html&lt;/h4&gt; &#xA;&lt;p&gt;Sets a content of a given frame.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;html &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.go_to(&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&#34;)&#xA;frame = page.frames[1]&#xA;frame.body # &amp;lt;html lang=&#34;en&#34;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;style&amp;gt;body {transition: opacity ease-in 0.2s; }...&#xA;frame.content = &#34;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;lol&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;&#xA;frame.body # =&amp;gt; &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;lol&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dialogs&lt;/h2&gt; &#xA;&lt;h4&gt;accept(text)&lt;/h4&gt; &#xA;&lt;p&gt;Accept dialog with given text or default prompt if applicable&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;text &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;dismiss&lt;/h4&gt; &#xA;&lt;p&gt;Dismiss dialog&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.on(:dialog) do |dialog|&#xA;  if dialog.match?(/bla-bla/)&#xA;    dialog.accept&#xA;  else&#xA;    dialog.dismiss&#xA;  end&#xA;end&#xA;page.go_to(&#34;https://google.com&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Animation&lt;/h2&gt; &#xA;&lt;p&gt;You can slow down or speed up CSS animations.&lt;/p&gt; &#xA;&lt;h4&gt;playback_rate : &lt;code&gt;Integer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns playback rate for CSS animations, defaults to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;playback_rate = value&lt;/h4&gt; &#xA;&lt;p&gt;Sets playback rate of CSS animations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;value &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.playback_rate = 2000&#xA;page.go_to(&#34;https://google.com&#34;)&#xA;page.playback_rate # =&amp;gt; 2000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Node&lt;/h2&gt; &#xA;&lt;h4&gt;node? : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;frame_id&lt;/h4&gt; &#xA;&lt;h4&gt;frame : &lt;code&gt;Frame&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns &lt;a href=&#34;https://github.com/rubycdp/ferrum#frame&#34;&gt;Frame&lt;/a&gt; object for current node, you can keep using &lt;a href=&#34;https://github.com/rubycdp/ferrum#Finders&#34;&gt;Finders&lt;/a&gt; for that object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;frame =  page.at_xpath(&#34;//iframe&#34;).frame # =&amp;gt; Frame&#xA;frame.at_css(&#34;//a[text() = &#39;Log in&#39;]&#34;) # =&amp;gt; Node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;focus&lt;/h4&gt; &#xA;&lt;h4&gt;focusable?&lt;/h4&gt; &#xA;&lt;h4&gt;moving? : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;wait_for_stop_moving&lt;/h4&gt; &#xA;&lt;h4&gt;blur&lt;/h4&gt; &#xA;&lt;h4&gt;type&lt;/h4&gt; &#xA;&lt;h4&gt;click&lt;/h4&gt; &#xA;&lt;h4&gt;hover&lt;/h4&gt; &#xA;&lt;h4&gt;select_file&lt;/h4&gt; &#xA;&lt;h4&gt;at_xpath&lt;/h4&gt; &#xA;&lt;h4&gt;at_css&lt;/h4&gt; &#xA;&lt;h4&gt;xpath&lt;/h4&gt; &#xA;&lt;h4&gt;css&lt;/h4&gt; &#xA;&lt;h4&gt;text&lt;/h4&gt; &#xA;&lt;h4&gt;inner_text&lt;/h4&gt; &#xA;&lt;h4&gt;value&lt;/h4&gt; &#xA;&lt;h4&gt;property&lt;/h4&gt; &#xA;&lt;h4&gt;attribute&lt;/h4&gt; &#xA;&lt;h4&gt;evaluate&lt;/h4&gt; &#xA;&lt;h4&gt;selected : &lt;code&gt;Array&amp;lt;Node&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;select&lt;/h4&gt; &#xA;&lt;h4&gt;scroll_into_view&lt;/h4&gt; &#xA;&lt;h4&gt;in_viewport?(of: &lt;code&gt;Node | nil&lt;/code&gt;) : &lt;code&gt;Boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;remove&lt;/h4&gt; &#xA;&lt;h4&gt;exists?&lt;/h4&gt; &#xA;&lt;p&gt;(chainable) Selects options by passed attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.at_xpath(&#34;//*[select]&#34;).select([&#34;1&#34;]) # =&amp;gt; Node (select)&#xA;page.at_xpath(&#34;//*[select]&#34;).select([&#34;text&#34;], by: :text) # =&amp;gt; Node (select)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accept string, array or strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.at_xpath(&#34;//*[select]&#34;).select(&#34;1&#34;)&#xA;page.at_xpath(&#34;//*[select]&#34;).select(&#34;1&#34;, &#34;2&#34;)&#xA;page.at_xpath(&#34;//*[select]&#34;).select([&#34;1&#34;, &#34;2&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tracing&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;tracing.record&lt;/code&gt; to create a trace file which can be opened in Chrome DevTools or &lt;a href=&#34;https://chromedevtools.github.io/timeline-viewer/&#34;&gt;timeline viewer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.tracing.record(path: &#34;trace.json&#34;) do&#xA;  page.go_to(&#34;https://www.google.com&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;tracing.record(**options) : &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Accepts block, records trace and by default returns trace data from &lt;code&gt;Tracing.tracingComplete&lt;/code&gt; event as output. When &lt;code&gt;path&lt;/code&gt; is specified returns &lt;code&gt;true&lt;/code&gt; and stores trace data into file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &lt;code&gt;Hash&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;:path &lt;code&gt;String&lt;/code&gt; save data on the disk, &lt;code&gt;nil&lt;/code&gt; by default&lt;/li&gt; &#xA;   &lt;li&gt;:encoding &lt;code&gt;Symbol&lt;/code&gt; &lt;code&gt;:base64&lt;/code&gt; | &lt;code&gt;:binary&lt;/code&gt; encode output as Base64 or plain text. &lt;code&gt;:binary&lt;/code&gt; by default&lt;/li&gt; &#xA;   &lt;li&gt;:timeout &lt;code&gt;Float&lt;/code&gt; wait until file streaming finishes in the specified time or raise error, defaults to &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;:screenshots &lt;code&gt;Boolean&lt;/code&gt; capture screenshots in the trace, &lt;code&gt;false&lt;/code&gt; by default&lt;/li&gt; &#xA;   &lt;li&gt;:trace_config &lt;code&gt;Hash&amp;lt;String, Object&amp;gt;&lt;/code&gt; config for &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/tot/Tracing/#type-TraceConfig&#34;&gt;trace&lt;/a&gt;, for categories see &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/tot/Tracing/#method-getCategories&#34;&gt;getCategories&lt;/a&gt;, only one trace config can be active at a time per browser.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Clean Up&lt;/h2&gt; &#xA;&lt;h4&gt;reset&lt;/h4&gt; &#xA;&lt;p&gt;Closes browser tabs opened by the &lt;code&gt;Browser&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# connect to a long-running Chrome process&#xA;browser = Ferrum::Browser.new(url: &#39;http://localhost:9222&#39;)&#xA;&#xA;browser.go_to(&#34;https://github.com/&#34;)&#xA;&#xA;# clean up, lest the tab stays there hanging forever&#xA;browser.reset&#xA;&#xA;browser.quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Thread safety&lt;/h2&gt; &#xA;&lt;p&gt;Ferrum is fully thread-safe. You can create one browser or a few as you wish and start playing around using threads. Example below shows how to create a few pages which share the same context. Context is similar to an incognito profile but you can have more than one, think of it like it&#39;s independent browser session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser = Ferrum::Browser.new&#xA;context = browser.contexts.create&#xA;&#xA;t1 = Thread.new(context) do |c|&#xA;  page = c.create_page&#xA;  page.go_to(&#34;https://www.google.com/search?q=Ruby+headless+driver+for+Capybara&#34;)&#xA;  page.screenshot(path: &#34;t1.png&#34;)&#xA;end&#xA;&#xA;t2 = Thread.new(context) do |c|&#xA;  page = c.create_page&#xA;  page.go_to(&#34;https://www.google.com/search?q=Ruby+static+typing&#34;)&#xA;  page.screenshot(path: &#34;t2.png&#34;)&#xA;end&#xA;&#xA;t1.join&#xA;t2.join&#xA;&#xA;context.dispose&#xA;browser.quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can create two independent contexts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser = Ferrum::Browser.new&#xA;&#xA;t1 = Thread.new(browser) do |b|&#xA;  context = b.contexts.create&#xA;  page = context.create_page&#xA;  page.go_to(&#34;https://www.google.com/search?q=Ruby+headless+driver+for+Capybara&#34;)&#xA;  page.screenshot(path: &#34;t1.png&#34;)&#xA;  context.dispose&#xA;end&#xA;&#xA;t2 = Thread.new(browser) do |b|&#xA;  context = b.contexts.create&#xA;  page = context.create_page&#xA;  page.go_to(&#34;https://www.google.com/search?q=Ruby+static+typing&#34;)&#xA;  page.screenshot(path: &#34;t2.png&#34;)&#xA;  context.dispose&#xA;end&#xA;&#xA;t1.join&#xA;t2.join&#xA;&#xA;browser.quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bundle install&lt;/code&gt; to install dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Then, run &lt;code&gt;bundle exec rake test&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and the created tag, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on &lt;a href=&#34;https://github.com/rubycdp/ferrum&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>