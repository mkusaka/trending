<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-31T01:37:44Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>customerio/customerio-ruby</title>
    <updated>2025-03-31T01:37:44Z</updated>
    <id>tag:github.com,2025-03-31:/customerio/customerio-ruby</id>
    <link href="https://github.com/customerio/customerio-ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A ruby client for the Customer.io event API.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://customer.io&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1152079?s=200&amp;amp;v=4&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/customerio/customerio-ruby/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blueviolet?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/customerio/customerio-ruby/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/customerio/customerio-ruby/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Customer.io Ruby&lt;/h1&gt; &#xA;&lt;p&gt;A ruby client for the &lt;a href=&#34;https://customer.io/docs/api/track/&#34;&gt;Customer.io Journeys Track API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;customerio&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install customerio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Before we get started: API client vs. JavaScript snippet&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s helpful to know that everything below can also be accomplished through the &lt;a href=&#34;https://customer.io/docs/javascript-quick-start/&#34;&gt;Customer.io JavaScript snippet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In many cases, using the JavaScript snippet will be easier to integrate with your app, but there are several reasons why using the API client is useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You&#39;re not planning on triggering emails based on how customers interact with your website (e.g. users who haven&#39;t visited the site in X days)&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re using the javascript snippet, but have a few events you&#39;d like to send from your backend system. They will work well together!&lt;/li&gt; &#xA; &lt;li&gt;You&#39;d rather not have another javascript snippet slowing down your frontend. Our snippet is asynchronous (doesn&#39;t affect initial page load) and very small, but we understand.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the end, the decision on whether or not to use the API client or the JavaScript snippet should be based on what works best for you. You&#39;ll be able to integrate &lt;strong&gt;fully&lt;/strong&gt; with &lt;a href=&#34;https://customer.io&#34;&gt;Customer.io&lt;/a&gt; with either approach.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Create an instance of the client with your &lt;a href=&#34;https://fly.customer.io/settings/api_credentials&#34;&gt;Customer.io credentials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Rails, create an initializer &lt;code&gt;config/initializers/customerio.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$customerio = Customerio::Client.new(&#34;YOUR SITE ID&#34;, &#34;YOUR API SECRET KEY&#34;, region: Customerio::Regions::US)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;region&lt;/code&gt; is optional and takes one of two valuesâ€”&lt;code&gt;US&lt;/code&gt; or &lt;code&gt;EU&lt;/code&gt;. If you do not specify your region, we assume that your account is based in the US (&lt;code&gt;US&lt;/code&gt;). If your account is based in the EU and you do not provide the correct region (&lt;code&gt;EU&lt;/code&gt;), we&#39;ll route requests to our EU data centers accordingly, however this may cause data to be logged in the US.&lt;/p&gt; &#xA;&lt;h3&gt;Identify logged in customers&lt;/h3&gt; &#xA;&lt;p&gt;Tracking data of logged in customers is a key part of &lt;a href=&#34;https://customer.io&#34;&gt;Customer.io&lt;/a&gt;. In order to send triggered emails, we must know the email address of the customer. You can also specify any number of customer attributes which help tailor &lt;a href=&#34;https://customer.io&#34;&gt;Customer.io&lt;/a&gt; to your business.&lt;/p&gt; &#xA;&lt;p&gt;Attributes you specify are useful in several ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;As customer variables in your triggered emails. For instance, if you specify the customer&#39;s name, you can personalize the triggered email by using it in the subject or body.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;As a way to filter who should receive a triggered email. For instance, if you pass along the current subscription plan (free / basic / premium) for your customers, you can set up triggers which are only sent to customers who have subscribed to a particular plan (e.g. &#34;premium&#34;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;ll want to identify your customers when they sign up for your app and any time their key information changes. This keeps &lt;a href=&#34;https://customer.io&#34;&gt;Customer.io&lt;/a&gt; up to date with your customer information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Arguments&#xA;# attributes (required) - a hash of information about the customer. You can pass any&#xA;#                         information that would be useful in your triggers. You &#xA;#                         must at least pass in an id, email, and created_at timestamp.&#xA;&#xA;$customerio.identify(&#xA;  :id =&amp;gt; 5,&#xA;  :email =&amp;gt; &#34;bob@example.com&#34;,&#xA;  :created_at =&amp;gt; customer.created_at.to_i,&#xA;  :first_name =&amp;gt; &#34;Bob&#34;,&#xA;  :plan =&amp;gt; &#34;basic&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating customers: Changing identifiers&lt;/h3&gt; &#xA;&lt;p&gt;You can use the identify operation to update customers. If you need to change the &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;email&lt;/code&gt; identifiers for a customer, you will need to pass in the &lt;code&gt;cio_id&lt;/code&gt; identifier. &lt;code&gt;cio_id&lt;/code&gt; is a unique identifier set by Customer.io, used to reference a person, and cannot be changed.&lt;/p&gt; &#xA;&lt;p&gt;E.g.: if the customer created in the identify operation above was given the &lt;code&gt;cio_id&lt;/code&gt; of &lt;code&gt;&#34;f000000d&#34;&lt;/code&gt;, you could change its ID and email address using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$customerio.identify(&#xA;  :cio_id =&amp;gt; &#34;f000000d&#34;,&#xA;  :id =&amp;gt; 1005,&#xA;  :email =&amp;gt; &#34;bob.fullname@example.com&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method requires either the &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;cio_id&lt;/code&gt; for the person. It does not work with email addresses.&lt;/p&gt; &#xA;&lt;p&gt;You can also use this method to make other updates to the person using the &lt;code&gt;cio_id&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Updating customers: Using email address&lt;/h3&gt; &#xA;&lt;p&gt;If you need to identify a person using their email address, then you can do so by passing in a customer ID to the &lt;code&gt;identify&lt;/code&gt; method. This allows you to specify a customer ID that is different than the one used in the &lt;code&gt;id&lt;/code&gt; attribute. E.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Arguments&#xA;# customer_id (required) - the customer ID to use for this customer, may be an id, email address, or the cio_id.&#xA;#                         This will be used to construct the URL but not sent in the body attributes.&#xA;# attributes (required) - a hash of information about the customer. You can pass any&#xA;#                         information that would be useful in your triggers. You&#xA;#                         must at least pass in an id, email, and created_at timestamp.&#xA;&#xA;$customerio.identify(&#xA;  :customer_id =&amp;gt; &#34;bob@example.com&#34;,&#xA;  :location =&amp;gt; &#34;Australia&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to use the &lt;code&gt;cio_id&lt;/code&gt; in the &lt;code&gt;customer_id&lt;/code&gt; field of &lt;code&gt;identify_customer_id&lt;/code&gt;, you will need to prefix it with &lt;code&gt;&#34;cio_&#34;&lt;/code&gt;. E.g.: &lt;code&gt;&#34;cio_f000000d&#34;&lt;/code&gt; for a &lt;code&gt;cio_id&lt;/code&gt; of &lt;code&gt;f000000d&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;identify&lt;/code&gt; method can identify the person using one of &lt;code&gt;customer_id&lt;/code&gt;, &lt;code&gt;cio_id&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt;. The order of precedence is &lt;code&gt;customer_id&lt;/code&gt; &amp;gt; &lt;code&gt;cio_id&lt;/code&gt; &amp;gt; &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deleting customers&lt;/h3&gt; &#xA;&lt;p&gt;Deleting a customer will remove them, and all their information from Customer.io. Note: if you&#39;re still sending data to Customer.io via other means (such as the javascript snippet), the customer could be recreated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Arguments&#xA;# customer_id (required) - a unique identifier for the customer.  This&#xA;#                          should be the same id you&#39;d pass into the&#xA;#                          `identify` command above.&#xA;&#xA;$customerio.delete(5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Merge duplicate customer profiles&lt;/h3&gt; &#xA;&lt;p&gt;When you merge two people, you pick a primary person and merge a secondary, duplicate person into it. The primary person remains after the merge and the secondary is deleted. This process is permanent: you cannot recover the secondary person.&lt;/p&gt; &#xA;&lt;p&gt;The first and third parameters represent the identifier for the primary and secondary people respectivelyâ€”one of &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, or &lt;code&gt;cio_id&lt;/code&gt;. The second and fourth parameters are the identifier values for the primary and secondary people respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# $customerio.merge_customers(&#34;primaryType&#34;, &#34;primaryIdentifier&#34;, &#34;secondaryType&#34;, &#34;secondaryIdentifier&#34;)&#xA;# primaryType / secondaryType are one of &#34;id&#34;, &#34;email&#34;, or &#34;cio_id&#34;&#xA;# primaryIdentifier / secondaryIdentifier are the identifier value corresponding to the type.&#xA;&#xA;# merge customer &#34;cperson@gmail.com&#34; into &#34;cool.person@company.com&#34;&#xA;$customerio.merge_customers(&#34;email&#34;, &#34;cool.person@company.com&#34;, &#34;email&#34;, &#34;cperson@gmail.com&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tracking a custom event&lt;/h3&gt; &#xA;&lt;p&gt;Now that you&#39;re identifying your customers with &lt;a href=&#34;https://customer.io&#34;&gt;Customer.io&lt;/a&gt;, you can now send events like &#34;purchased&#34; or &#34;watchedIntroVideo&#34;. These allow you to more specifically target your users with automated emails, and track conversions when you&#39;re sending automated emails to encourage your customers to perform an action.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Arguments&#xA;# customer_id (required) - the id of the customer who you want to associate with the event.&#xA;# name (required)        - the name of the event you want to track.&#xA;# attributes (optional)  - any related information you&#39;d like to attach to this&#xA;#                          event. These attributes can be used in your triggers to control who should&#xA;#                          receive the triggered email. You can set any number of data values.&#xA;&#xA;$customerio.track(5, &#34;purchase&#34;, :type =&amp;gt; &#34;socks&#34;, :price =&amp;gt; &#34;13.99&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to track events which occurred in the past, you can include a &lt;code&gt;timestamp&lt;/code&gt; attribute (in seconds since the epoch), and we&#39;ll use that as the date the event occurred.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$customerio.track(5, &#34;purchase&#34;, :type =&amp;gt; &#34;socks&#34;, :price =&amp;gt; &#34;13.99&#34;, :timestamp =&amp;gt; 1365436200)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tracking anonymous events&lt;/h3&gt; &#xA;&lt;p&gt;You can also send anonymous events, for situations where you don&#39;t yet have a customer record yet. An anonymous event requires an &lt;code&gt;anonymous_id&lt;/code&gt; representing the unknown person and an event &lt;code&gt;name&lt;/code&gt;. When you identify a person, you can set their &lt;code&gt;anonymous_id&lt;/code&gt; attribute. If &lt;a href=&#34;https://customer.io/docs/anonymous-events/#turn-on-merging&#34;&gt;event merging&lt;/a&gt; is turned on in your workspace, and the attribute matches the &lt;code&gt;anonymous_id&lt;/code&gt; in one or more events that were logged within the last 30 days, we associate those events with the person.&lt;/p&gt; &#xA;&lt;p&gt;Anonymous events cannot trigger campaigns by themselves. To trigger a campaign, the anonymous event must be associated with a person within 72 hours of the &lt;code&gt;track_anonymous&lt;/code&gt; request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Arguments&#xA;# anonymous_id (required, nullable) - the id representing the unknown person.&#xA;# name (required)                   - the name of the event you want to track.&#xA;# attributes (optional)             - related information you want to attach to the event.&#xA;&#xA;$customerio.track_anonymous(anonymous_id, &#34;product_view&#34;, :type =&amp;gt; &#34;socks&#34; )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;recipient&lt;/code&gt; attribute to specify the email address to send the messages to. &lt;a href=&#34;https://customer.io/docs/invite-emails/&#34;&gt;See our documentation on how to use anonymous events for more details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Anonymous invite events&lt;/h4&gt; &#xA;&lt;p&gt;If you previously sent &lt;a href=&#34;https://customer.io/docs/anonymous-invite-emails/&#34;&gt;invite events&lt;/a&gt;, you can achieve the same functionality by sending an anonymous event with &lt;code&gt;nil&lt;/code&gt; for the anonymous identifier. To send anonymous invites, your event &lt;em&gt;must&lt;/em&gt; include a &lt;code&gt;recipient&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$customerio.track_anonymous(nil, &#34;invite&#34;, :recipient =&amp;gt; &#34;new.person@example.com&#34; )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding a mobile device&lt;/h3&gt; &#xA;&lt;p&gt;To send push notifications, you can add ios and android device tokens to a customer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$customerio.add_device(5, &#34;my_ios_device_id&#34;, &#34;ios&#34;)&#xA;$customerio.add_device(5, &#34;my_android_device_id&#34;, &#34;android&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, &lt;code&gt;last_used&lt;/code&gt; can be passed in to specify the last touch of the device. Otherwise, this attribute is set by the API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$customerio.add_device(5, &#34;my_ios_device_id&#34;, &#34;ios&#34;, {:last_used=&amp;gt;Time.now.to_i})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Removing a mobile device&lt;/h3&gt; &#xA;&lt;p&gt;Deleting a device token will remove it from the associated customer to stop further push notifications from being sent for that device&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$customerio.delete_device(5, &#34;my_device_token&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Suppress a user&lt;/h3&gt; &#xA;&lt;p&gt;Deletes the customer with the provided id if it exists and suppresses all future events and identifies for that customer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$customerio.suppress(5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unsuppress a user&lt;/h3&gt; &#xA;&lt;p&gt;Start tracking events and identifies again for a previously suppressed customer. Note when a user is suppressed thier history is deleted and unsupressing them wil not recover that history.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$customerio.unsuppress(5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Send Transactional Messages&lt;/h3&gt; &#xA;&lt;p&gt;To use the Customer.io &lt;a href=&#34;https://customer.io/docs/transactional-api&#34;&gt;Transactional API&lt;/a&gt;, create an instance of the API client using an &lt;a href=&#34;https://customer.io/docs/managing-credentials#app-api-keys&#34;&gt;app key&lt;/a&gt; and create a request object of your message type.&lt;/p&gt; &#xA;&lt;h4&gt;Email&lt;/h4&gt; &#xA;&lt;p&gt;Create a new &lt;code&gt;SendEmailRequest&lt;/code&gt; object containing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;transactional_message_id&lt;/code&gt;: the ID of the transactional message you want to send, or the &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt;, and &lt;code&gt;subject&lt;/code&gt; of a new message.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;to&lt;/code&gt;: the email address of your recipients&lt;/li&gt; &#xA; &lt;li&gt;an &lt;code&gt;identifiers&lt;/code&gt; object containing the &lt;code&gt;id&lt;/code&gt; of your recipient. If the &lt;code&gt;id&lt;/code&gt; does not exist, Customer.io creates it.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;code&gt;message_data&lt;/code&gt; object containing properties that you want reference in your message using liquid.&lt;/li&gt; &#xA; &lt;li&gt;You can also send attachments with your message. Use &lt;code&gt;attach&lt;/code&gt; to encode attachments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;code&gt;send_email&lt;/code&gt; referencing your request to send a transactional message. &lt;a href=&#34;https://customer.io/docs/transactional-api&#34;&gt;Learn more about transactional messages and &lt;code&gt;SendEmailRequest&lt;/code&gt; properties&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;customerio&#34;&#xA;&#xA;client = Customerio::APIClient.new(&#34;your API key&#34;, region: Customerio::Regions::US)&#xA;&#xA;request = Customerio::SendEmailRequest.new(&#xA;  to: &#34;person@example.com&#34;,&#xA;  transactional_message_id: &#34;3&#34;,&#xA;  message_data: {&#xA;    name: &#34;Person&#34;,&#xA;    items: {&#xA;      name: &#34;shoes&#34;,&#xA;      price: &#34;59.99&#34;,&#xA;    },&#xA;    products: [],&#xA;  },&#xA;  identifiers: {&#xA;    id: &#34;2&#34;,&#xA;  },&#xA;)&#xA;&#xA;file = File.open(&#39;&amp;lt;file-path&amp;gt;&#39;, &#39;r&#39;)&#xA;request.attach(&#34;filename&#34;, file.read)&#xA;&#xA;begin&#xA;  response = client.send_email(request)&#xA;  puts response&#xA;rescue Customerio::InvalidResponse =&amp;gt; e&#xA;  puts e.code, e.message&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Push&lt;/h4&gt; &#xA;&lt;p&gt;Create a new &lt;code&gt;SendPushRequest&lt;/code&gt; object containing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;transactional_message_id&lt;/code&gt;: the ID or trigger name of the transactional message you want to send.&lt;/li&gt; &#xA; &lt;li&gt;an &lt;code&gt;identifiers&lt;/code&gt; object containing the &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;email&lt;/code&gt; of your recipient. If the profile does not exist, Customer.io creates it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;code&gt;send_push&lt;/code&gt; referencing your request to send a transactional message. &lt;a href=&#34;https://customer.io/docs/transactional-api&#34;&gt;Learn more about transactional messages and &lt;code&gt;SendPushRequest&lt;/code&gt; properties&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;customerio&#34;&#xA;&#xA;client = Customerio::APIClient.new(&#34;your API key&#34;, region: Customerio::Regions::US)&#xA;&#xA;request = Customerio::SendPushRequest.new(&#xA;  transactional_message_id: &#34;3&#34;,&#xA;  message_data: {&#xA;    name: &#34;Person&#34;,&#xA;    items: {&#xA;      name: &#34;shoes&#34;,&#xA;      price: &#34;59.99&#34;,&#xA;    },&#xA;    products: [],&#xA;  },&#xA;  identifiers: {&#xA;    id: &#34;2&#34;,&#xA;  },&#xA;)&#xA;&#xA;begin&#xA;  response = client.send_push(request)&#xA;  puts response&#xA;rescue Customerio::InvalidResponse =&amp;gt; e&#xA;  puts e.code, e.message&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Clone your fork (&lt;code&gt;git clone git@github.com:MY_USERNAME/customerio-ruby.git &amp;amp;&amp;amp; cd customerio-ruby&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Added some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>