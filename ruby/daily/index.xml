<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-29T01:30:54Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zayneio/open-flights</title>
    <updated>2024-04-29T01:30:54Z</updated>
    <id>tag:github.com,2024-04-29:/zayneio/open-flights</id>
    <link href="https://github.com/zayneio/open-flights" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenFlights - A CRUD app example built with ruby on rails and react.js using webpacker&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;OpenFlights&lt;/h2&gt; &#xA;&lt;h3&gt;A flight reviews app built with Ruby on Rails and React.js&lt;/h3&gt; &#xA;&lt;p&gt;This app is intended to be a simple example of a CRUD app built with &lt;strong&gt;Ruby on Rails&lt;/strong&gt; and &lt;strong&gt;React.js&lt;/strong&gt; using &lt;strong&gt;Webpacker&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zayneio/open-flights/assets/37857673/489827d5-f142-4064-ba00-48e194acf2c7&#34;&gt;https://github.com/zayneio/open-flights/assets/37857673/489827d5-f142-4064-ba00-48e194acf2c7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Running it locally&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run &lt;code&gt;rails db:prepare&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;bundle exec rails s&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;in another tab run &lt;code&gt;./bin/webpack-dev-server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;in another tab run &lt;code&gt;sidekiq&lt;/code&gt; (optional, but necessary for things like password reset emails)&lt;/li&gt; &#xA; &lt;li&gt;navigate to &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;If you want functionality like password reset emails to work locally, you&#39;ll need to set the following environment variables in &lt;code&gt;config/application.yml&lt;/code&gt; with your own unique values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ROOT_URL: http://localhost:3000&#xA;SENDGRID_API_KEY: xxxxxxxxxxxxxx&#xA;SENDGRID_USERNAME: xxxxxxxxxxxxxx&#xA;SENDGRID_PASSWORD: xxxxxxxxxxxxxx&#xA;DEFAULT_FROM_EMAIL: you@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Routes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;             Prefix Verb   URI Pattern                           Controller#Action&#xA;               root GET    /                                     pages#index&#xA;    api_v1_airlines GET    /api/v1/airlines(.:format)            api/v1/airlines#index&#xA;                    POST   /api/v1/airlines(.:format)            api/v1/airlines#create&#xA; new_api_v1_airline GET    /api/v1/airlines/new(.:format)        api/v1/airlines#new&#xA;edit_api_v1_airline GET    /api/v1/airlines/:slug/edit(.:format) api/v1/airlines#edit&#xA;     api_v1_airline GET    /api/v1/airlines/:slug(.:format)      api/v1/airlines#show&#xA;                    PATCH  /api/v1/airlines/:slug(.:format)      api/v1/airlines#update&#xA;                    PUT    /api/v1/airlines/:slug(.:format)      api/v1/airlines#update&#xA;                    DELETE /api/v1/airlines/:slug(.:format)      api/v1/airlines#destroy&#xA;     api_v1_reviews POST   /api/v1/reviews(.:format)             api/v1/reviews#create&#xA;      api_v1_review DELETE /api/v1/reviews/:id(.:format)         api/v1/reviews#destroy&#xA;                    GET    /*path(.:format)                      pages#index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Api V2 (Graphql)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Get Airlines#index&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;query Airlines {&#xA;  airlines {&#xA;    id&#xA;    name&#xA;    imageUrl&#xA;    slug&#xA;    averageScore&#xA;    reviews {&#xA;      id&#xA;      title&#xA;      description&#xA;      score&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Get Airlines#show&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;query Airline {&#xA;  airline(slug:) {&#xA;    id&#xA;    name&#xA;    imageUrl&#xA;    slug&#xA;    averageScore&#xA;    reviews {&#xA;      id&#xA;      title&#xA;      description&#xA;      score&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Create Review&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mutation {&#xA;  createReview(&#xA;    title: &#34;test&#34;,&#xA;    description: &#34;test&#34;,&#xA;    score: 1,&#xA;    airlineId: 1&#xA;  ) {&#xA;    id&#xA;    title&#xA;    description&#xA;    score&#xA;    airlineId&#xA;    error&#xA;    message&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Destroy Review&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mutation {&#xA;  destroyReview(id:) {&#xA;    message&#xA;    error&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How to rebuild this app from scratch (*WORK IN PROGRESS)&lt;/h2&gt; &#xA;&lt;p&gt;For an up to date, full step-by-step guide on how to rebuild this app from scratch, check out &lt;a href=&#34;https://zayne.io/articles/how-to-build-a-crud-app-with-ruby-on-rails-and-react&#34;&gt;this article I&#39;ve put together.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started: Creating a New Rails App With React &amp;amp; Webpacker&lt;/h3&gt; &#xA;&lt;p&gt;First things first, let&#39;s create a brand new rails app. We can do this from the command line by doing &lt;code&gt;rails new app-name&lt;/code&gt; where app-name is the name of our app, however we are going to add a few additional things. We need to add &lt;code&gt;--webpack=react&lt;/code&gt; to configure our new app with webpacker to use react, and additionally I&#39;m going to add &lt;code&gt;--database=postgresql&lt;/code&gt; to configure my app to use postgres as the default database. so the final output to create our new app will look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rails new open-flights --webpack=react --database=postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once this finishes running, make sure to cd into the directory of your new rails app (&lt;code&gt;cd open-flights&lt;/code&gt;), then we can go ahead and create the database for our app by entering the following into our command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec rails db:create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Models&lt;/h2&gt; &#xA;&lt;p&gt;Our data model for this app will be pretty simple. Our app will have &lt;code&gt;airlines&lt;/code&gt;, and each airline in our app will have many &lt;code&gt;reviews&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For our airlines, we want to have a &lt;code&gt;name&lt;/code&gt; for each airline, a unique url-safe &lt;code&gt;slug&lt;/code&gt;, and an &lt;code&gt;image_url&lt;/code&gt; for airline logos (Note: I&#39;m not going to handle file uploading in this article, instead we will just link to an image hosted on s3).&lt;/p&gt; &#xA;&lt;p&gt;For our reviews, we want to have a &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;score&lt;/code&gt;, and the &lt;code&gt;airline_id&lt;/code&gt; for the airline the review will belong to. The scoring system I&#39;m going to use for our reviews will be a star rating system that ranges from 1 to 5 stars; 1 being the worst score and 5 being the best score.&lt;/p&gt; &#xA;&lt;p&gt;So from our command line we can enter the following generators to create our airline and review models in our app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rails g model Airline name slug image_url&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rails g model Review title description score:integer airline:belongs_to&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create two new files in our &lt;code&gt;db/migrations&lt;/code&gt; folder; one for airlines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreateAirlines &amp;lt; ActiveRecord::Migration[5.2]&#xA;  def change&#xA;    create_table :airlines do |t|&#xA;      t.string :name&#xA;      t.string :slug&#xA;      t.string :image_url&#xA;&#xA;      t.timestamps&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and one for reviews:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreateReviews &amp;lt; ActiveRecord::Migration[5.2]&#xA;  def change&#xA;    create_table :reviews do |t|&#xA;      t.string :title&#xA;      t.string :description&#xA;      t.integer :score&#xA;      t.belongs_to :airline, foreign_key: true&#xA;&#xA;      t.timestamps&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, we should now have airline and review model files created for us inside of our &lt;code&gt;app/models&lt;/code&gt; directory. Because we used &lt;code&gt;airline:belongs_to&lt;/code&gt; when we generated our review model, our &lt;code&gt;Review&lt;/code&gt; model should already have the &lt;code&gt;belongs_to&lt;/code&gt; relationship established, so our this model so far should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Review &amp;lt; ApplicationRecord&#xA;  belongs_to :airline&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We need to additionally add &lt;code&gt;has_many :reviews&lt;/code&gt; to our airline model. Once we do, our airline model should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Airline &amp;lt; ApplicationRecord&#xA;  has_many :reviews&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, we can go ahead and migrate our database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you run that, you should see a new &lt;code&gt;schema.rb&lt;/code&gt; file created within the &lt;code&gt;db&lt;/code&gt; folder in our app. Your schema file should now look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveRecord::Schema.define(version: 2019_12_26_200455) do&#xA;  enable_extension &#34;plpgsql&#34;&#xA;&#xA;  create_table &#34;airlines&#34;, force: :cascade do |t|&#xA;    t.string &#34;name&#34;&#xA;    t.string &#34;slug&#34;&#xA;    t.string &#34;image_url&#34;&#xA;    t.datetime &#34;created_at&#34;, null: false&#xA;    t.datetime &#34;updated_at&#34;, null: false&#xA;  end&#xA;&#xA;  create_table &#34;reviews&#34;, force: :cascade do |t|&#xA;    t.string &#34;title&#34;&#xA;    t.string &#34;description&#34;&#xA;    t.integer &#34;score&#34;&#xA;    t.bigint &#34;airline_id&#34;&#xA;    t.datetime &#34;created_at&#34;, null: false&#xA;    t.datetime &#34;updated_at&#34;, null: false&#xA;    t.index [&#34;airline_id&#34;], name: &#34;index_reviews_on_airline_id&#34;&#xA;  end&#xA;&#xA;  add_foreign_key &#34;reviews&#34;, &#34;airlines&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So now for our airline model, we need to do a couple things. First off, I want to add a &lt;code&gt;before_create&lt;/code&gt; callback method that creates a unique slug based off of the airline&#39;s name when we create a new airline. To do this, we can add a new &lt;code&gt;slugify&lt;/code&gt; method with a before create callback to our airline model like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Airline &amp;lt; ApplicationRecord&#xA;  has_many :reviews&#xA;&#xA;  before_create :slugify&#xA;&#xA;  def slugify&#xA;    self.slug = name.downcase.gsub(&#39; &#39;, &#39;-&#39;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This slugify method will take the name of an airline, convert any uppercase characters to lowercase, replace any spaces with hyphens, and set this value as our slug before saving the record.&lt;/p&gt; &#xA;&lt;p&gt;Actually, I think we can simplify this method further by just calling parameterize on our name attribute instead of using downcase and gsub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Airline &amp;lt; ApplicationRecord&#xA;  has_many :reviews&#xA;&#xA;  before_create :slugify&#xA;&#xA;  def slugify&#xA;    self.slug = name.parameterize&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This parameterize method should handle both downcasing characters and replacing spaces with hyphens for us. Of course, we can quickly test this out from our rails console to confirm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#39;Fake AIRline Name     1&#39;.parameterize&#xA;# =&amp;gt; &#34;fake-airline-name-1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So now if/when we create a new airline, for example &#34;United Airlines&#34;, this will convert the name to &lt;code&gt;united-airlines&lt;/code&gt; and save it as the unique slug for that airline.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, we need to create a method that will take all of the reviews that belong to an airline and get the average overall rating. We can add an avg_score method to our model like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Airline &amp;lt; ApplicationRecord&#xA;  ...&#xA;&#xA;  def avg_score&#xA;    reviews.average(:score).to_f.round(2)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method will return 0 if an airline has no reviews yet. Otherwise it will get the sum of all the review scores for an airline divided by the total number of reviews for that airline to get the average rating.&lt;/p&gt; &#xA;&lt;p&gt;So our full Airline model with our slugify method and avg_score method should now look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;class Airline &amp;lt; ApplicationRecord&#xA;  has_many :reviews&#xA;&#xA;  before_create :slugify&#xA;&#xA;  def slugify&#xA;    self.slug = name.parameterize&#xA;  end&#xA;&#xA;  def avg_score&#xA;    reviews.average(:score).to_f.round(2)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Seeding Our Database&lt;/h2&gt; &#xA;&lt;p&gt;Now that we have got our models created, let&#39;s go ahead and seed our database with some data! We can add this to the &lt;code&gt;seeds.rb&lt;/code&gt; file located inside of our &lt;code&gt;db&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Airline.create([&#xA;  { &#xA;    name: &#34;United Airlines&#34;,&#xA;    image_url: &#34;https://open-flights.s3.amazonaws.com/United-Airlines.png&#34;&#xA;  }, &#xA;  { &#xA;    name: &#34;Southwest&#34;,&#xA;    image_url: &#34;https://open-flights.s3.amazonaws.com/Southwest-Airlines.png&#34;&#xA;  },&#xA;  { &#xA;    name: &#34;Delta&#34;,&#xA;    image_url: &#34;https://open-flights.s3.amazonaws.com/Delta.png&#34; &#xA;  }, &#xA;  { &#xA;    name: &#34;Alaska Airlines&#34;,&#xA;    image_url: &#34;https://open-flights.s3.amazonaws.com/Alaska-Airlines.png&#34; &#xA;  }, &#xA;  { &#xA;    name: &#34;JetBlue&#34;,&#xA;    image_url: &#34;https://open-flights.s3.amazonaws.com/JetBlue.png&#34; &#xA;  }, &#xA;  { &#xA;    name: &#34;American Airlines&#34;,&#xA;    image_url: &#34;https://open-flights.s3.amazonaws.com/American-Airlines.png&#34; &#xA;  }&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we can seed our database by running the following command in our terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rails db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now if we jump into our rails console with &lt;code&gt;rails c&lt;/code&gt; we should be able to see our new data in the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Airline.first&#xA;# =&amp;gt; #&amp;lt;Airline id: 1, name: &#34;United Airlines&#34;, slug: &#34;united-airlines&#34;, image_url: &#34;https://open-flights.s3.amazonaws.com/United-Airlines.png&#34;, created_at: &#34;2019-12-26 23:02:58&#34;, updated_at: &#34;2019-12-26 23:02:58&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that even though we only included the name and image_url in our seed data, we additionally have a slug value (in this case &#34;united-airlines&#34;) because we added that slugify method to our airline model. We will use this slug shortly as the paramater to find records by in our controllers, instead of using the id param.&lt;/p&gt; &#xA;&lt;h2&gt;Serializers: Building Our JSON API&lt;/h2&gt; &#xA;&lt;p&gt;For this app we are going to use &lt;a href=&#34;https://github.com/Netflix/fast_jsonapi&#34;&gt;fast_jsonapi&lt;/a&gt;, a gem created by the Netflix engineering team. If you have ever used Active Model Serializer (AMS), you will likely notice some similarities.&lt;/p&gt; &#xA;&lt;p&gt;with fast_jsonapi, we can create the exact structure for the data we want to expose in our api, and then use that when we render json from within our controllers.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s install the fast_jsonapi gem, by adding it to our Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;fast_jsonapi&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we can install it with bundle install from our terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can use a generator to create a new airline serializer and review serializer, passing along the specific attributes we want to expose in our api:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rails g serializer Airline name slug image_url&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rails g serializer Review title description score airline_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new serializer folder in our app and create a new airline serializer that should so far look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AirlineSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;  attributes :name, :slug, :image_url&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a reviews serializer that should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ReviewSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;  attributes :title, :description, :score, :airline_id&#xA;end  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For our airlines serializer, we want to include the relationship with reviews in our serialized json. We can add this simply by adding &lt;code&gt;has_many :reviews&lt;/code&gt; into our serializer. So then our serializer should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AirlineSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;  attributes :name, :slug, :image_url&#xA;  has_many :reviews&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s take a quick look at how we can use our serializers now to structure our api. If we jump into a rails console (&lt;code&gt;rails c&lt;/code&gt;) in our terminal, let&#39;s get the first airline from our database. Then we can initialize a new instance of our airline serializer with that record and return the result as serialized json:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Get the first airline record from our database&#xA;airline = Airline.first&#xA;=&amp;gt; #&amp;lt;Airline id: 1, name: &#34;United Airlines&#34;, slug: &#34;united-airlines&#34;, image_url: &#34;https://open-flights.s3.amazonaws.com/United-Airlines.png&#34;, created_at: &#34;2019-12-26 23:02:58&#34;, updated_at: &#34;2019-12-26 23:02:58&#34;&amp;gt;&#xA;&#xA;# Serialized JSON&#xA;AirlineSerializer.new(airline).serialized_json&#xA;=&amp;gt; &#34;{\&#34;data\&#34;:{\&#34;id\&#34;:\&#34;1\&#34;,\&#34;type\&#34;:\&#34;airline\&#34;,\&#34;attributes\&#34;:{\&#34;name\&#34;:\&#34;United Airlines\&#34;,\&#34;slug\&#34;:\&#34;united-airlines\&#34;,\&#34;image_url\&#34;:\&#34;https://open-flights.s3.amazonaws.com/United-Airlines.png\&#34;},\&#34;relationships\&#34;:{\&#34;reviews\&#34;:{\&#34;data\&#34;:[]}}}}&#34;&#xA;&#xA;# Formatted JSON&#xA;AirlineSerializer.new(airline).as_json&#xA;=&amp;gt; {&#xA;  &#34;data&#34; =&amp;gt; {&#xA;    &#34;id&#34; =&amp;gt; &#34;1&#34;, &#xA;    &#34;type&#34; =&amp;gt; &#34;airline&#34;, &#xA;    &#34;attributes&#34; =&amp;gt;  {&#xA;      &#34;name&#34; =&amp;gt; &#34;United Airlines&#34;, &#xA;      &#34;slug&#34; =&amp;gt; &#34;united-airlines&#34;, &#xA;      &#34;image_url&#34; =&amp;gt; &#34;https://open-flights.s3.amazonaws.com/United-Airlines.png&#34;&#xA;    }, &#xA;    &#34;relationships&#34; =&amp;gt; {&#xA;      &#34;reviews&#34; =&amp;gt; {&#xA;        &#34;data&#34; =&amp;gt; []&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above examples, you can see that the only attributes shared within the attributes section are those that we have explicitly declared in our airline seriaizer.&lt;/p&gt; &#xA;&lt;h2&gt;Controllers&lt;/h2&gt; &#xA;&lt;p&gt;Our app is going to have three controllers: an airlines controller, a reviews controller and a pages controller. Our pages controller will have a single index action that I&#39;m going to use as the root path of our app. I&#39;m also going to use Pages#index as a sort of catch-all for any requests outside of our api. This will come in handy once we start using react-router in a little, as we will need to be able to match routes to different components.&lt;/p&gt; &#xA;&lt;p&gt;For our airlines and reviews controllers, we are going to namespace everything under api/v1. Again, this will give us an easy way to manage routing from both the react side of our app and the rails side once we additionally start using react-router in a moment.&lt;/p&gt; &#xA;&lt;p&gt;For example, if a user navigates to /airlines in our app, on the react side we can load the necessary components to show a list of all airlines, and on the back end we can make the request to our Airline#index action in our controller as /api/v1/airlines to get a list of all of the airlines from our api.&lt;/p&gt; &#xA;&lt;h3&gt;Routes&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s actually go ahead and set up our routes, adding our root path and our namespaced api resources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.routes.draw do&#xA;&#xA;  root &#39;pages#index&#39;&#xA;&#xA;  namespace :api do&#xA;    namespace :v1 do&#xA;      resources :airlines, param: :slug&#xA;      resources :reviews, only: [:create, :destroy]&#xA;    end&#xA;  end&#xA;&#xA;  get &#39;*path&#39;, to: &#39;pages#index&#39;, via: :all&#xA;end   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that I added &lt;code&gt;param: :slug&lt;/code&gt; to our airlines resources so that we can use our slugs as the primary param for airlines instead of using id.&lt;/p&gt; &#xA;&lt;h3&gt;Airlines Controller&lt;/h3&gt; &#xA;&lt;p&gt;Inside of &lt;code&gt;app/controllers&lt;/code&gt;, let&#39;s create a new &lt;code&gt;api&lt;/code&gt; folder, and inside of that, a new &lt;code&gt;v1&lt;/code&gt; folder, and then inside of that let&#39;s create a new airlines controller, namespaced under&lt;code&gt;Api::V1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Api&#xA;  module V1&#xA;    class AirlinesController &amp;lt; ApplicationController&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Airlines#index&lt;/h3&gt; &#xA;&lt;p&gt;Now let&#39;s add an index method to our new controller. All we need to do for this method is get all of the airlines from our database, then render the data as JSON using our AirlineSerializer.&lt;/p&gt; &#xA;&lt;p&gt;To get all of our airlines, we can simply call all on our Airline model like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;airlines = Airline.all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we can pass our airlines variable as an argument into a new instance of our AirlineSerializer and return our data as serialized JSON like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;AirlineSerializer.new(airlines).serialized_json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So putting these two steps together, and then rendering the result as JSON from our controller, our index method should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Api&#xA;  module V1&#xA;    class AirlinesController &amp;lt; ApplicationController&#xA;      def index&#xA;        airlines = Airline.all&#xA;&#xA;        render json: AirlineSerializer.new(airlines).serialized_json&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Airlines#show&lt;/h3&gt; &#xA;&lt;p&gt;Our show method will also be pretty simple. For this we just need to find a specific airline, not by its id, but using it&#39;s slug as the param. We can do this by calling find_by on our Airline model and searching for a record that has a matching slug, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;airline = Airline.find_by(slug: params[:slug])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, we will again render the resulting JSON using our AirlineSerializer. So our show method should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Api&#xA;  module V1&#xA;    class AirlinesController &amp;lt; ApplicationController&#xA;      ...&#xA;      &#xA;      def show&#xA;        airline = Airline.find_by(slug: params[:slug])&#xA;&#xA;        render json: AirlineSerializer.new(airlines).serialized_json&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Airlines#create&lt;/h3&gt; &#xA;&lt;p&gt;Before we add our create method, let&#39;s use strong paramaters to create a whitelist of allowed parameters when creating a new airline in our app. For now we will allow only &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;image_url&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Api&#xA;  module V1&#xA;    class AirlinesController &amp;lt; ApplicationController&#xA;      &#xA;      ... &#xA;&#xA;      private&#xA;&#xA;      def airline_params&#xA;        params.require(:airline).permit(:name, :image_url)&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we can go ahead and add our create method. For this, we will simply initialize a new instance of Airline, passing in our airline_params. If everything is valid and saves, we will render data for our new airline again using our airline serializer, otherwise we will return an error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;module Api&#xA;  module V1&#xA;    class AirlinesController &amp;lt; ApplicationController&#xA;&#xA;      ...&#xA;&#xA;      def create&#xA;        airline = Airline.new(airline_params)&#xA;&#xA;        if airline.save&#xA;          render json: AirlineSerializer.new(airline).serialized_json&#xA;        else&#xA;          render json: { error: airline.errors.messages }, status: 422&#xA;        end&#xA;      end&#xA;&#xA;      private&#xA;&#xA;      def airline_params&#xA;        params.require(:airline).permit(:name, :image_url)&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This README is still being written - check back soon!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2020 zayneio&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>dillongrove/DeviceRental</title>
    <updated>2024-04-29T01:30:54Z</updated>
    <id>tag:github.com,2024-04-29:/dillongrove/DeviceRental</id>
    <link href="https://github.com/dillongrove/DeviceRental" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A device rental application for Carnegie Mellon students to rent mobile devices from CMU Mobile Apps Club for debugging and testing purposes.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;== Device Rental App&lt;/p&gt; &#xA;&lt;p&gt;This application allows students and faculty at Carnegie Mellon to rent mobile devices from the CMU Mobile Apps Club for testing, debugging, and development purposes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/Docker-Provider</title>
    <updated>2024-04-29T01:30:54Z</updated>
    <id>tag:github.com,2024-04-29:/microsoft/Docker-Provider</id>
    <link href="https://github.com/microsoft/Docker-Provider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Azure Monitor for Containers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains source code for Azure Monitor for containers Linux and Windows Agent&lt;/p&gt; &#xA;&lt;h1&gt;Questions?&lt;/h1&gt; &#xA;&lt;p&gt;Feel free to contact engineering team owners in case you have any questions about this repository or project.&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;h2&gt;Common&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; for authoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go lang&lt;/a&gt; for building go code. Go lang version 1.18.3 (both Linux &amp;amp; Windows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are using WSL2, make sure you have cloned the code onto ubuntu not onto windows&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;WSL2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;WSL2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;configure &lt;a href=&#34;https://docs.docker.com/docker-for-windows/wsl/&#34;&gt;Docker-for-windows-wsl2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 14.04 or higher to build Linux Agent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;Docker&lt;/a&gt; to build the docker image for Linux Agent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: if you are using WSL2, you can ignore Docker since Docker for windows will be used.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10 Professional machine to build Windows Agent&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-windows/&#34;&gt;Docker for Windows&lt;/a&gt; to build docker image for Windows Agent&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;.NET Core SDK&lt;/a&gt; to build the Windows Agent code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmeubank/tdm-gcc/releases/download/v9.2.0-tdm64-1/tdm64-gcc-9.2.0.exe&#34;&gt;gcc for windows&lt;/a&gt; to build go code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Repo structure&lt;/h1&gt; &#xA;&lt;p&gt;The general directory structure is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── .pipelines/                               - files related to azure devops ci and cd pipelines&#xA;├── build/                                    - files to related to  compile and build the code&#xA;│   ├── version                               - build version used for docker prvider and go shared object(so) files&#xA;│   ├── common/                               - common to both windows and linux installers&#xA;│   │   ├── installer                         - files related to installer&#xA;|   |   |   |── scripts/                      - script files related to configmap parsing&#xA;│   ├── linux/                                - Makefile and installer files for the Docker Provider&#xA;│   │   ├── Makefile                          - Makefile to build the docker provider&#xA;│   │   ├── installer                         - files related to installer&#xA;|   |   |   |── bundle/                       - shell scripts to create shell bundle&#xA;|   |   |   |── conf/                         - plugin configuration files&#xA;|   |   |   |── datafiles/                    - data files for the installer&#xA;|   |   |   |── scripts/                      - script files related to livenessproble, tomlparser etc..&#xA;|   |   |   |── InstallBuilder/               - python script files for the install builder&#xA;│   ├── windows/                              - scripts to build the .net and go code&#xA;|   |   |── Makefile.ps1                      - powershell script to build .net and go lang code and copy the files to amalogswindows directory&#xA;│   │   ├── installer                         - files related to installer&#xA;|   |   |   |── conf/                         - fluent, fluentbit and out_oms plugin configuration files&#xA;|   |   |   |── scripts/                      - script files related to livenessproble, filesystemwatcher, keepCertificateAlive etc..&#xA;|   |   |   |── certificategenerator/         - .NET code for the generation self-signed certificate of the windows agent&#xA;├── charts/                                   - helm charts&#xA;│   ├── azuremonitor-containers/              - azure monitor for containers helm chart used for non-AKS clusters&#xA;├── alerts/                                   - alert queries&#xA;├── kubernetes/                               - files related to Linux and Windows Agent for Kubernetes&#xA;│   ├── linux/                                - scripts to build the Docker image for Linux Agent&#xA;│   │   ├── dockerbuild                       - script to build docker provider, docker image and publish docker image&#xA;│   │   ├── DockerFile.multiarch              - DockerFile for Linux Agent Container Image&#xA;│   │   ├── main.sh                           - Linux Agent container entry point&#xA;│   │   ├── setup.sh                          - setup file for Linux Agent Container Image&#xA;│   │   ├── acrworkflows/                     - acr work flows for the Linux Agent container image&#xA;│   │   ├── defaultpromenvvariables           - default environment variables for Prometheus scraping&#xA;│   │   ├── defaultpromenvvariables-rs        - cluster level default environment variables for Prometheus scraping&#xA;│   │   ├── defaultpromenvvariables-sidecar   - cluster level default environment variables for Prometheus scraping in sidecar&#xA;│   ├── windows/                              - scripts to build the Docker image for Windows Agent&#xA;│   │   ├── dockerbuild                       - script to build the code and docker imag, and publish docker image&#xA;│   │   ├── acrworkflows/                     - acr work flows for the Windows Agent container image&#xA;│   │   ├── DockerFile                        - DockerFile for Windows Agent Container Image&#xA;│   │   ├── main.ps1                          - Windows Agent container entry point&#xA;│   │   ├── setup.ps1                         - setup file for Windows Agent Container Image&#xA;│   ├── ama-logs.yaml                         - kubernetes yaml for both Linux and Windows Agent&#xA;│   ├── container-azm-ms-agentconfig.yaml     - kubernetes yaml for agent configuration&#xA;├── scripts/                                  - scripts for onboarding, troubleshooting and preview scripts related to Azure Monitor for containers&#xA;│   ├── troubleshoot/                         - scripts for troubleshooting of Azure Monitor for containers onboarding issues&#xA;│   ├── onboarding/                           - scripts related to Azure Monitor for containers onboarding.&#xA;│   ├── preview/                              - scripts related to preview features ...&#xA;│   ├── build/                                - scripts related to build such as installing pre-requisites etc.&#xA;│   ├── deployment/                           - scripts related to deployment goes here.&#xA;│   ├── release/                              - scripts related to release  goes here.&#xA;├── source/                                   - source code&#xA;│   ├── plugins/                              - plugins source code&#xA;│   │   ├── go/                               - out_oms plugin code in go lang&#xA;│   │   ├── ruby/                             - plugins code in ruby&#xA;│   │   |   ├── health/                       - code for health feature&#xA;│   │   |   ├── lib/                          - lib for app insights ruby and this code of application_insights gem&#xA;│   │   |   ...                               - plugins in, out and filters code in ruby&#xA;├── test/                                     - source code for tests&#xA;│   ├── e2e/                                  - e2e tests to validate agent and e2e workflow(s)&#xA;│   ├── unit-tests/                           - unit tests code&#xA;│   ├── scenario/                             - scenario tests code&#xA;├── !_README.md                               - this file&#xA;├── .gitignore                                - git config file with include/exclude file rules&#xA;├── LICENSE                                   - License file&#xA;├── Rakefile                                  - Rake file to trigger ruby plugin tests&#xA;└── ReleaseProcess.md                         - Release process instructions&#xA;└── ReleaseNotes.md                           - Release notes for the release of the Azure Monitor for containers agent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Branches&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We are using a single branch which has all the code in development and we will be releasing from this branch itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ci_prod&lt;/code&gt; branch contains codebase version in development.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To contribute: create your private branch off of &lt;code&gt;ci_prod&lt;/code&gt;, make changes and use pull request to merge back to &lt;code&gt;ci_prod&lt;/code&gt;. Pull request must be approved by at least one engineering team members.&lt;/p&gt; &#xA;&lt;h1&gt;Authoring code&lt;/h1&gt; &#xA;&lt;p&gt;We recommend using &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; for authoring. Windows 10 with Ubuntu App can be used for both Windows and Linux Agent development and recommened to clone the code onto Ubuntu app so that you dont need to worry about line ending issues LF vs CRLF.&lt;/p&gt; &#xA;&lt;h1&gt;Building code&lt;/h1&gt; &#xA;&lt;h2&gt;Linux Agent&lt;/h2&gt; &#xA;&lt;h3&gt;Install Pre-requisites&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install go1.18.3, dotnet, powershell, docker and build dependencies to build go code for both Linux and Windows platforms&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash ~/Docker-Provider/scripts/build/linux/install-build-pre-requisites.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Verify python, docker and golang installed properly and also PATH and GOBIN environment variables set with go bin path. For some reason go env not set by install-build-pre-requisites.sh script, run the following commands to set them &lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/go/bin&#xA;export GOBIN=/usr/local/go/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you want to use Docker on the WSL2, verify following configuration settings configured on your Ubuntu app &lt;pre&gt;&lt;code&gt;echo $DOCKER_HOST&#xA;# if either DOCKER_HOST not set already or doesnt have tcp://localhost:2375 value, set DOCKER_HOST value via this command&#xA;echo &#34;export DOCKER_HOST=tcp://localhost:2375&#34; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; source ~/.bashrc&#xA;# on Docker Desktop for Windows make sure docker running linux mode and enabled Expose daemon on tcp://localhost:2375 without TLS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build Docker Provider Shell Bundle and Docker Image and Publish Docker Image&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are using WSL2, ensure &lt;code&gt;Docker for windows&lt;/code&gt; running with Linux containers mode on your windows machine to build Linux agent image successfully&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: format of the imagetag will be &lt;code&gt;ci&amp;lt;release&amp;gt;&amp;lt;MMDDYYYY&amp;gt;&lt;/code&gt;. possible values for release are test, dev, preview, dogfood, prod etc. Please use MCR urls while building internally.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Preferred Way: You can build and push images for multiple architectures. This is powered by docker buildx Directly use the docker buildx commands (the MCR images can be found in our internal wiki to be used as arguments)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# multiple platforms&#xA;cd ~/Docker-Provider&#xA;docker buildx build --platform linux/arm64/v8,linux/amd64 -t &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; --build-arg IMAGE_TAG=&amp;lt;imagetag&amp;gt; --build-arg CI_BASE_IMAGE=&amp;lt;ciimage&amp;gt; --build-arg GOLANG_BASE_IMAGE=&amp;lt;golangimage&amp;gt; -f kubernetes/linux/Dockerfile.multiarch --push .&#xA;&#xA;# single platform&#xA;cd ~/Docker-Provider&#xA;docker buildx build --platform linux/amd64 -t &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; --build-arg IMAGE_TAG=&amp;lt;imagetag&amp;gt; --build-arg CI_BASE_IMAGE=&amp;lt;ciimage&amp;gt; --build-arg GOLANG_BASE_IMAGE=&amp;lt;golangimage&amp;gt; -f kubernetes/linux/Dockerfile.multiarch --push .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the build and publish script&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/Docker-Provider/kubernetes/linux/dockerbuild&#xA;sudo docker login # if you want to publish the image to acr then login to acr via `docker login &amp;lt;acr-name&amp;gt;`&#xA;# build provider, docker image and publish to docker image&#xA;bash build-and-publish-docker-image.sh --image &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; --ubuntu &amp;lt;ubuntu image url&amp;gt; --golang &amp;lt;golang image url&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/Docker-Provider/kubernetes/linux/dockerbuild&#xA;sudo docker login # if you want to publish the image to acr then login to acr via `docker login &amp;lt;acr-name&amp;gt;`&#xA;# build and publish using docker buildx&#xA;bash build-and-publish-docker-image.sh --image &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; --ubuntu &amp;lt;ubuntu image url&amp;gt; --golang &amp;lt;golang image url&amp;gt; --multiarch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build and push images for multiple architectures. This is powered by docker buildx&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/Docker-Provider/kubernetes/linux/dockerbuild&#xA;sudo docker login # if you want to publish the image to acr then login to acr via `docker login &amp;lt;acr-name&amp;gt;`&#xA;# build and publish using docker buildx&#xA;bash build-and-publish-docker-image.sh --image &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; --multiarch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or directly use the docker buildx commands&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# multiple platforms&#xA;cd ~/Docker-Provider&#xA;docker buildx build --platform linux/arm64/v8,linux/amd64 -t &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; --build-arg IMAGE_TAG=&amp;lt;imagetag&amp;gt; -f kubernetes/linux/Dockerfile.multiarch --push .&#xA;&#xA;# single platform&#xA;cd ~/Docker-Provider&#xA;docker buildx build --platform linux/amd64 -t &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; --build-arg IMAGE_TAG=&amp;lt;imagetag&amp;gt; -f kubernetes/linux/Dockerfile.multiarch --push .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to build docker provider shell bundle and image separately, then you can follow below instructions&lt;/p&gt; &#xA;&lt;h5&gt;Build Docker Provider shell bundle&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/Docker-Provider/build/linux&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Build and Push Docker Image&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/Docker-Provider/kubernetes/linux/&#xA;docker build -t &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; --build-arg IMAGE_TAG=&amp;lt;imagetag&amp;gt; --build-arg CI_BASE_IMAGE=&amp;lt;ciimage&amp;gt; .&#xA;docker push &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows Agent&lt;/h2&gt; &#xA;&lt;p&gt;To build the windows agent, you will have to build .NET and Go code, and docker image for windows agent. Docker image for windows agent can only build on Windows machine with &lt;code&gt;Docker for windows&lt;/code&gt; with Windows containers mode but the .NET code and Go code can be built either on Windows or Linux or WSL2.&lt;/p&gt; &#xA;&lt;h3&gt;Install Pre-requisites&lt;/h3&gt; &#xA;&lt;p&gt;Install pre-requisites based on OS platform you will be using to build the windows agent code&lt;/p&gt; &#xA;&lt;h4&gt;Option 1 - Using Windows Machine to Build the Windows agent&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;powershell # launch powershell with elevated admin on your windows machine&#xA;Set-ExecutionPolicy -ExecutionPolicy bypass # set the execution policy&#xA;cd %userprofile%\Docker-Provider\scripts\build\windows # based on your repo path&#xA;.\install-build-pre-requisites.ps1 #&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Option 2 - Using WSL2 to Build the Windows agent&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;powershell # launch powershell with elevated admin on your windows machine&#xA;Set-ExecutionPolicy -ExecutionPolicy bypass # set the execution policy&#xA;net use z: \\wsl$\Ubuntu-16.04 # map the network drive of the ubuntu app to windows&#xA;cd z:\home\sshadmin\Docker-Provider\scripts\build\windows # based on your repo path&#xA;.\install-build-pre-requisites.ps1 #&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build Windows Agent code and Docker Image&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: format of the windows agent imagetag will be &lt;code&gt;win-ci&amp;lt;release&amp;gt;&amp;lt;MMDDYYYY&amp;gt;&lt;/code&gt;. possible values for release are test, dev, preview, dogfood, prod etc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Option 1 - Using Windows Machine to Build the Windows agent&lt;/h4&gt; &#xA;&lt;p&gt;Execute below instructions on elevated command prompt to build windows agent code and docker image, publishing the image to acr or docker hub&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd %userprofile%\Docker-Provider\kubernetes\windows\dockerbuild # based on your repo path&#xA;docker login # if you want to publish the image to acr then login to acr via `docker login &amp;lt;acr-name&amp;gt;`&#xA;powershell -ExecutionPolicy bypass  # switch to powershell if you are not on powershell already&#xA;.\build-and-publish-docker-image.ps1 -image &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; # trigger build code and image and publish docker hub or acr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Developer Build optimizations&lt;/h5&gt; &#xA;&lt;p&gt;If you do not want to build the image from scratch every time you make changes during development,you can choose to build the docker images that are separated out by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Base image and dependencies including agent bootstrap(setup.ps1)&lt;/li&gt; &#xA; &lt;li&gt;Agent conf and plugin changes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To do this, the very first time you start developing you would need to execute below instructions in elevated command prompt of powershell. This builds the base image(ama-logs-win-base) with all the package dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd %userprofile%\Docker-Provider\kubernetes\windows\dockerbuild # based on your repo path&#xA;docker login # if you want to publish the image to acr then login to acr via `docker login &amp;lt;acr-name&amp;gt;`&#xA;powershell -ExecutionPolicy bypass  # switch to powershell if you are not on powershell already&#xA;.\build-dev-base-image.ps1  # builds base image and dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run the script to build the image consisting of code and conf changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\build-and-publish-dev-docker-image.ps1 -image &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; # trigger build code and image and publish docker hub or acr&#xA;By default, multi-arc docker image will be built, but if you want generate test image either with ltsc2019 or ltsc2022 base image, then you can follow the instructions below&#xA;&#xA;For building image with base image version ltsc2019&#xA;.\build-and-publish-dev-docker-image.ps1 -image &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; -windowsBaseImageVersion ltsc2019&#xA;&#xA;For building image with base image version ltsc2022&#xA;.\build-and-publish-dev-docker-image.ps1 -image &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; -windowsBaseImageVersion ltsc2022&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the subsequent builds, you can just run -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\build-and-publish-dev-docker-image.ps1 -image &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; # trigger build code and image and publish docker hub or acr&#xA;By default, multi-arc docker image will be built, but if you want generate test image either with ltsc2019 or ltsc2022 base image, then you can follow the instructions below&#xA;&#xA;For building image with base image version ltsc2019&#xA;.\build-and-publish-dev-docker-image.ps1 -image &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; -windowsBaseImageVersion ltsc2019&#xA;&#xA;For building image with base image version ltsc2022&#xA;.\build-and-publish-dev-docker-image.ps1 -image &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; -windowsBaseImageVersion ltsc2022&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Note - If you have changes in setup.ps1 and want to test those changes, uncomment the section consisting of setup.ps1 in the Dockerfile-dev-image file.&lt;/h6&gt; &#xA;&lt;h4&gt;Option 2 - Using WSL2 to Build the Windows agent&lt;/h4&gt; &#xA;&lt;h5&gt;On WSL2, Build Certificate Generator Source code and Out OMS Go plugin code&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/Docker-Provider/build/windows # based on your repo path on WSL2 Ubuntu app&#xA;pwsh #switch to powershell&#xA;.\Makefile.ps1 # trigger build and publish of .net and go code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;On Windows machine, build and Push Docker Image&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Docker image for windows container can only built on windows hence you will have to execute below commands on windows via accessing network share or copying published bits amalogswindows under kubernetes directory on to windows machine&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;net use z: \\wsl$\Ubuntu-16.04 # map the network drive of the ubuntu app to windows&#xA;cd z:\home\sshadmin\Docker-Provider\kubernetes\windows # based on your repo path&#xA;docker build -t &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; --build-arg IMAGE_TAG=&amp;lt;imagetag&amp;gt; .&#xA;docker push &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Azure DevOps Build Pipeline&lt;/h1&gt; &#xA;&lt;p&gt;Navigate to &lt;a href=&#34;https://github-private.visualstudio.com/microsoft/_build?definitionId=444&amp;amp;_a=summary&#34;&gt;https://github-private.visualstudio.com/microsoft/_build?definitionId=444&amp;amp;_a=summary&lt;/a&gt; to see Linux and Windows Agent build pipelines. These pipelines are configured with CI triggers for ci_prod.&lt;/p&gt; &#xA;&lt;p&gt;Docker Images will be pushed to CDPX ACR repos and these needs to retagged and pushed to corresponding ACR or docker hub. Only onboarded Azure AD AppId has permission to pull the images from CDPx ACRs.&lt;/p&gt; &#xA;&lt;p&gt;Please reach out the agent engineering team if you need access to it.&lt;/p&gt; &#xA;&lt;h2&gt;Onboarding feature branch&lt;/h2&gt; &#xA;&lt;p&gt;Here are the instructions to onboard the feature branch to Azure Dev Ops pipeline&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to &lt;a href=&#34;https://github-private.visualstudio.com/microsoft/_apps/hub/azurecdp.cdpx-onboarding.cdpx-onboarding-tab&#34;&gt;https://github-private.visualstudio.com/microsoft/_apps/hub/azurecdp.cdpx-onboarding.cdpx-onboarding-tab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select the repository as &#34;docker-provider&#34; from repository drop down&lt;/li&gt; &#xA; &lt;li&gt;click on validate repository&lt;/li&gt; &#xA; &lt;li&gt;select the your feature branch from Branch drop down&lt;/li&gt; &#xA; &lt;li&gt;Select the Operation system as &#34;Linux&#34; and Build type as &#34;buddy&#34;&lt;/li&gt; &#xA; &lt;li&gt;create build definition&lt;/li&gt; &#xA; &lt;li&gt;enable continous integration on trigger on the build definition&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will create build definition for the Linux agent. Repeat above steps except that this time select Operation system as &#34;Windows&#34; to onboard the pipeline for Windows agent.&lt;/p&gt; &#xA;&lt;h1&gt;Azure DevOps Release Pipeline&lt;/h1&gt; &#xA;&lt;p&gt;Integrated to Azure DevOps release pipeline for the ci_prod branch. With this, for every commit to ci_prod branch, latest bits automatically deployed to DEV AKS clusters in Build subscription.&lt;/p&gt; &#xA;&lt;p&gt;When releasing the agent, we have a separate Azure DevOps pipeline which needs to be run to publish the image to prod MCR and our PROD AKS clusters.&lt;/p&gt; &#xA;&lt;p&gt;For development, agent image will be in this format mcr.microsoft.com/azuremonitor/containerinsights/cidev:&lt;code&gt;Major.Minor.Patch&lt;/code&gt;-CommitAheadCount-&#xA; &lt;git-commit-id&gt;&#xA;  . Image tag for windows will be win-&#xA;  &lt;code&gt;Major.Minor.Patch&lt;/code&gt;-CommitAheadCount-&#xA;  &lt;git-commit-id&gt;&#xA;   . For releases, agent will be in this format mcr.microsoft.com/azuremonitor/containerinsights/ciprod:&#xA;   &lt;code&gt;Major.Minor.Patch&lt;/code&gt;. Image tag for windows will be win-&#xA;   &lt;code&gt;Major.Minor.Patch&lt;/code&gt;.&#xA;  &lt;/git-commit-id&gt;&#xA; &lt;/git-commit-id&gt;&lt;/p&gt; &#xA;&lt;p&gt;Navigate to &lt;a href=&#34;https://github-private.visualstudio.com/microsoft/_release?_a=releases&amp;amp;view=all&#34;&gt;https://github-private.visualstudio.com/microsoft/_release?_a=releases&amp;amp;view=all&lt;/a&gt; to see the release pipelines.&lt;/p&gt; &#xA;&lt;h1&gt;Update Kubernetes yamls&lt;/h1&gt; &#xA;&lt;p&gt;Navigate to Kubernetes directory and update the yamls with latest docker image of Linux and Windows Agent and other relevant updates.&lt;/p&gt; &#xA;&lt;h1&gt;Deployment and Validation&lt;/h1&gt; &#xA;&lt;p&gt;For our single branch ci_prod, automatically deployed latest yaml with latest agent image (which automatically built by the azure devops pipeline) onto CIDEV AKS clusters in build subscription. So, you can use CIDEV AKS cluster to validate E2E. Similarly, you can set up build and release pipelines for your feature branch.&lt;/p&gt; &#xA;&lt;h1&gt;Testing MSI Auth Mode Using Yaml&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enable Monitoring addon with Managed Idenity Auth Mode either using Portal or CLI or Template&lt;/li&gt; &#xA; &lt;li&gt;Get the MSI token (which is valid for 24 hrs.) value via &lt;code&gt;kubectl get secrets -n kube-system aad-msi-auth-token -o=jsonpath=&#39;{.data.token}&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Disable Monitoring addon via &lt;code&gt;az aks disable-addons -a monitoring -g &amp;lt;rgName&amp;gt; -n &amp;lt;clusterName&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deploy &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Docker-Provider/ci_prod/scripts/onboarding/aks/onboarding-using-msi-auth/&#34;&gt;ARM template&lt;/a&gt; with enabled = false to create DCR, DCR-A and link the workspace to Portal&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note - Make sure to update the parameter values in existingClusterParam.json file and have enabled = false in template file &lt;code&gt;az deployment group create --resource-group &amp;lt;ResourceGroupName&amp;gt; --template-file ./existingClusterOnboarding.json --parameters @./existingClusterParam.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Uncomment MSI auth related yaml lines, replace all the placeholder values, MSI token value and image tag in the ama-logs.yaml&lt;/li&gt; &#xA; &lt;li&gt;Deploy the ama-logs.yaml via &lt;code&gt;kubectl apply -f ama-logs.yaml&lt;/code&gt; &amp;gt; Note: use the image toggle for release E2E validation&lt;/li&gt; &#xA; &lt;li&gt;validate E2E for LA &amp;amp; Metrics data flows, and other scenarios&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;E2E Tests&lt;/h1&gt; &#xA;&lt;h2&gt;For executing tests&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Deploy the ama-logs.yaml with your agent image. In the yaml, make sure &lt;code&gt;ISTEST&lt;/code&gt; environment variable set to &lt;code&gt;true&lt;/code&gt; if its not set already&lt;/li&gt; &#xA; &lt;li&gt;Update the Service Principal CLIENT_ID, CLIENT_SECRET and TENANT_ID placeholder values and apply e2e-tests.yaml to execute the tests &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Note: Service Principal requires reader role on log analytics workspace and cluster resource to query LA and metrics&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code&gt;cd ~/Docker-Provider/test/e2e # based on your repo path&#xA;kubectl apply -f e2e-tests.yaml # this will trigger job to run the tests in sonobuoy namespace&#xA;kubectl get po -n sonobuoy # to check the pods and jobs associated to tests&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download (sonobuoy)[https://github.com/vmware-tanzu/sonobuoy/releases] on your dev box to view the results of the tests &lt;pre&gt;&lt;code&gt;results=$(sonobuoy retrieve) # downloads tar file which has logs and test results&#xA;sonobuoy results $results # get the summary of the results&#xA;tar -xzvf &amp;lt;downloaded-tar-file&amp;gt; # extract downloaded tar file and look for pod logs, results and other k8s resources if there are any failures&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;For adding new tests&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the test python file with your test code under &lt;code&gt;tests&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;Build the docker image, recommended to use ACR &amp;amp; MCR&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt; cd ~/Docker-Provider/test/e2e/src # based on your repo path&#xA; docker login &amp;lt;acr&amp;gt; -u &amp;lt;user&amp;gt; -p &amp;lt;pwd&amp;gt; # login to acr&#xA; docker build -f ./core/Dockerfile -t &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt; .&#xA; docker push &amp;lt;repo&amp;gt;/&amp;lt;imagename&amp;gt;:&amp;lt;imagetag&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;update existing agentest image tag in e2e-tests.yaml &amp;amp; conformance.yaml with newly built image tag with MCR repo&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Scenario Tests&lt;/h1&gt; &#xA;&lt;p&gt;Clusters are used in release pipeline already has the yamls under test\scenario deployed. Make sure to validate these scenarios. If you have new interesting scenarios, please add/update them.&lt;/p&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;This project has adopted the [Microsoft Open Source Code of Conduct] (&lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;https://opensource.microsoft.com/codeofconduct/&lt;/a&gt;). For more information see the [Code of Conduct FAQ] (&lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;https://opensource.microsoft.com/codeofconduct/faq/&lt;/a&gt;) or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
</feed>