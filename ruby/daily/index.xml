<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-01T01:38:23Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ankane/blazer</title>
    <updated>2024-03-01T01:38:23Z</updated>
    <id>tag:github.com,2024-03-01:/ankane/blazer</id>
    <link href="https://github.com/ankane/blazer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Business intelligence made simple&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Blazer&lt;/h1&gt; &#xA;&lt;p&gt;Explore your data with SQL. Easily create charts and dashboards, and share them with your team.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blazer.dokkuapp.com&#34;&gt;Try it out&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blazer.dokkuapp.com&#34;&gt;&lt;img src=&#34;https://blazer.dokkuapp.com/assets/blazer-a10baa40fef1ca2f5bb25fc97bcf261a6a54192fb1ad0f893c0f562b8c7c4697.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blazer is also available as a &lt;a href=&#34;https://github.com/ankane/blazer-docker&#34;&gt;Docker image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;üçä&lt;/span&gt; Battle-tested at &lt;a href=&#34;https://www.instacart.com/opensource&#34;&gt;Instacart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankane/blazer/actions&#34;&gt;&lt;img src=&#34;https://github.com/ankane/blazer/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple data sources&lt;/strong&gt; - PostgreSQL, MySQL, Redshift, and &lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#full-list&#34;&gt;many more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt; - run the same queries with different values&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Checks &amp;amp; alerts&lt;/strong&gt; - get emailed when bad data appears&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Audits&lt;/strong&gt; - all queries are tracked&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; - works with your authentication system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#queries&#34;&gt;Queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#charts&#34;&gt;Charts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#dashboards&#34;&gt;Dashboards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#checks&#34;&gt;Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#cohorts&#34;&gt;Cohorts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#anomaly-detection&#34;&gt;Anomaly Detection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#forecasting&#34;&gt;Forecasting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#uploads&#34;&gt;Uploads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#data-sources&#34;&gt;Data Sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#query-permissions&#34;&gt;Query Permissions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application‚Äôs Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;blazer&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rails generate blazer:install&#xA;rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And mount the dashboard in your &lt;code&gt;config/routes.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mount Blazer::Engine, at: &#34;blazer&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For production, specify your database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ENV[&#34;BLAZER_DATABASE_URL&#34;] = &#34;postgres://user:password@hostname:5432/database&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When possible, Blazer tries to protect against queries which modify data by running each query in a transaction and rolling it back, but a safer approach is to use a read-only user. &lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#permissions&#34;&gt;See how to create one&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Checks (optional)&lt;/h4&gt; &#xA;&lt;p&gt;Be sure to set a host in &lt;code&gt;config/environments/production.rb&lt;/code&gt; for emails to work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.action_mailer.default_url_options = {host: &#34;blazer.dokkuapp.com&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Schedule checks to run (with cron, &lt;a href=&#34;https://elements.heroku.com/addons/scheduler&#34;&gt;Heroku Scheduler&lt;/a&gt;, etc). The default options are every 5 minutes, 1 hour, or 1 day, which you can customize. For each of these options, set up a task to run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake blazer:run_checks SCHEDULE=&#34;5 minutes&#34;&#xA;rake blazer:run_checks SCHEDULE=&#34;1 hour&#34;&#xA;rake blazer:run_checks SCHEDULE=&#34;1 day&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set up failing checks to be sent once a day (or whatever you prefer).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake blazer:send_failing_checks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here‚Äôs what it looks like with cron.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*/5 * * * * rake blazer:run_checks SCHEDULE=&#34;5 minutes&#34;&#xA;0   * * * * rake blazer:run_checks SCHEDULE=&#34;1 hour&#34;&#xA;30  7 * * * rake blazer:run_checks SCHEDULE=&#34;1 day&#34;&#xA;0   8 * * * rake blazer:send_failing_checks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Slack notifications, create an &lt;a href=&#34;https://slack.com/apps/A0F7XDUAZ-incoming-webhooks&#34;&gt;incoming webhook&lt;/a&gt; and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;BLAZER_SLACK_WEBHOOK_URL=https://hooks.slack.com/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Name the webhook ‚ÄúBlazer‚Äù and add a cool icon.&lt;/p&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;Don‚Äôt forget to protect the dashboard in production.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Authentication&lt;/h3&gt; &#xA;&lt;p&gt;Set the following variables in your environment or an initializer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ENV[&#34;BLAZER_USERNAME&#34;] = &#34;andrew&#34;&#xA;ENV[&#34;BLAZER_PASSWORD&#34;] = &#34;secret&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Devise&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;authenticate :user, -&amp;gt;(user) { user.admin? } do&#xA;  mount Blazer::Engine, at: &#34;blazer&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;Specify a &lt;code&gt;before_action&lt;/code&gt; method to run in &lt;code&gt;blazer.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;before_action_method: require_admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define this method in your &lt;code&gt;ApplicationController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def require_admin&#xA;  # depending on your auth, something like...&#xA;  redirect_to root_path unless current_user &amp;amp;&amp;amp; current_user.admin?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to render or redirect for unauthorized users.&lt;/p&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;h3&gt;PostgreSQL&lt;/h3&gt; &#xA;&lt;p&gt;Create a user with read-only permissions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN;&#xA;CREATE ROLE blazer LOGIN PASSWORD &#39;secret&#39;;&#xA;GRANT CONNECT ON DATABASE dbname TO blazer;&#xA;GRANT USAGE ON SCHEMA public TO blazer;&#xA;GRANT SELECT ON ALL TABLES IN SCHEMA public TO blazer;&#xA;ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO blazer;&#xA;COMMIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MySQL&lt;/h3&gt; &#xA;&lt;p&gt;Create a user with read-only permissions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE USER &#39;blazer&#39;@&#39;127.0.0.1&#39; IDENTIFIED BY &#39;secret&#39;;&#xA;GRANT SELECT, SHOW VIEW ON dbname.* TO &#39;blazer&#39;@&#39;127.0.0.1&#39;;&#xA;FLUSH PRIVILEGES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sensitive Data&lt;/h2&gt; &#xA;&lt;p&gt;If your database contains sensitive or personal data, check out &lt;a href=&#34;https://github.com/ankane/hypershield&#34;&gt;Hypershield&lt;/a&gt; to shield it.&lt;/p&gt; &#xA;&lt;h2&gt;Encrypted Data&lt;/h2&gt; &#xA;&lt;p&gt;If you need to search encrypted data, use &lt;a href=&#34;https://github.com/ankane/blind_index&#34;&gt;blind indexing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can have Blazer transform specific variables with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Blazer.transform_variable = lambda do |name, value|&#xA;  value = User.generate_email_bidx(value) if name == &#34;email_bidx&#34;&#xA;  value&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Queries&lt;/h2&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;p&gt;Create queries with variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM users WHERE gender = {gender}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;{start_time}&lt;/code&gt; and &lt;code&gt;{end_time}&lt;/code&gt; for time ranges. &lt;a href=&#34;https://blazer.dokkuapp.com/queries/9-time-range-selector?start_time=1997-10-03T05%3A00%3A00%2B00%3A00&amp;amp;end_time=1997-10-04T04%3A59%3A59%2B00%3A00&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM ratings WHERE rated_at &amp;gt;= {start_time} AND rated_at &amp;lt;= {end_time}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Smart Variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blazer.dokkuapp.com/queries/1-smart-variable&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Suppose you have the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM users WHERE occupation_id = {occupation_id}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of remembering each occupation‚Äôs id, users can select occupations by name.&lt;/p&gt; &#xA;&lt;p&gt;Add a smart variable with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;smart_variables:&#xA;  occupation_id: &#34;SELECT id, name FROM occupations ORDER BY name ASC&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first column is the value of the variable, and the second column is the label.&lt;/p&gt; &#xA;&lt;p&gt;You can also use an array or hash for static data and enums.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;smart_variables:&#xA;  period: [&#34;day&#34;, &#34;week&#34;, &#34;month&#34;]&#xA;  status: {0: &#34;Active&#34;, 1: &#34;Archived&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linked Columns&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blazer.dokkuapp.com/queries/3-linked-column&#34;&gt;Example&lt;/a&gt; - title column&lt;/p&gt; &#xA;&lt;p&gt;Link results to other pages in your apps or around the web. Specify a column name and where it should link to. You can use the value of the result with &lt;code&gt;{value}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;linked_columns:&#xA;  user_id: &#34;/admin/users/{value}&#34;&#xA;  ip_address: &#34;https://www.infosniper.net/index.php?ip_address={value}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Smart Columns&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blazer.dokkuapp.com/queries/2-smart-column&#34;&gt;Example&lt;/a&gt; - occupation_id column&lt;/p&gt; &#xA;&lt;p&gt;Suppose you have the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT name, city_id FROM users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See which city the user belongs to without a join.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;smart_columns:&#xA;  city_id: &#34;SELECT id, name FROM cities WHERE id IN {value}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a hash for static data and enums.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;smart_columns:&#xA;  status: {0: &#34;Active&#34;, 1: &#34;Archived&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caching&lt;/h3&gt; &#xA;&lt;p&gt;Blazer can automatically cache results to improve speed. It can cache slow queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;cache:&#xA;  mode: slow&#xA;  expires_in: 60 # min&#xA;  slow_threshold: 15 # sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or it can cache all queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;cache:&#xA;  mode: all&#xA;  expires_in: 60 # min&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you can force a refresh at any time.&lt;/p&gt; &#xA;&lt;h2&gt;Charts&lt;/h2&gt; &#xA;&lt;p&gt;Blazer will automatically generate charts based on the types of the columns returned in your query.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The order of columns matters.&lt;/p&gt; &#xA;&lt;h3&gt;Line Chart&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to generate line charts.&lt;/p&gt; &#xA;&lt;p&gt;2+ columns - timestamp, numeric(s) - &lt;a href=&#34;https://blazer.dokkuapp.com/queries/4-line-chart-format-1&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT date_trunc(&#39;week&#39;, created_at), COUNT(*) FROM users GROUP BY 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3 columns - timestamp, string, numeric - &lt;a href=&#34;https://blazer.dokkuapp.com/queries/5-line-chart-format-2&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT date_trunc(&#39;week&#39;, created_at), gender, COUNT(*) FROM users GROUP BY 1, 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Column Chart&lt;/h3&gt; &#xA;&lt;p&gt;There are also two ways to generate column charts.&lt;/p&gt; &#xA;&lt;p&gt;2+ columns - string, numeric(s) - &lt;a href=&#34;https://blazer.dokkuapp.com/queries/6-column-chart-format-1&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT gender, COUNT(*) FROM users GROUP BY 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3 columns - string, string, numeric - &lt;a href=&#34;https://blazer.dokkuapp.com/queries/7-column-chart-format-2&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT gender, zip_code, COUNT(*) FROM users GROUP BY 1, 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scatter Chart&lt;/h3&gt; &#xA;&lt;p&gt;2 columns - both numeric - &lt;a href=&#34;https://blazer.dokkuapp.com/queries/16-scatter-chart&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT x, y FROM table&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pie Chart&lt;/h3&gt; &#xA;&lt;p&gt;2 columns - string, numeric - and last column named &lt;code&gt;pie&lt;/code&gt; - &lt;a href=&#34;https://blazer.dokkuapp.com/queries/17-pie-chart&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT gender, COUNT(*) AS pie FROM users GROUP BY 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maps&lt;/h3&gt; &#xA;&lt;p&gt;Columns named &lt;code&gt;latitude&lt;/code&gt; and &lt;code&gt;longitude&lt;/code&gt; or &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lon&lt;/code&gt; or &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lng&lt;/code&gt; - &lt;a href=&#34;https://blazer.dokkuapp.com/queries/15-map&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT name, latitude, longitude FROM cities&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or a column named &lt;code&gt;geojson&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT name, geojson FROM counties&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable, get an access token from &lt;a href=&#34;https://www.mapbox.com/&#34;&gt;Mapbox&lt;/a&gt; and set &lt;code&gt;ENV[&#34;MAPBOX_ACCESS_TOKEN&#34;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Targets&lt;/h3&gt; &#xA;&lt;p&gt;Use the column name &lt;code&gt;target&lt;/code&gt; to draw a line for goals. &lt;a href=&#34;https://blazer.dokkuapp.com/queries/8-target-line&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT date_trunc(&#39;week&#39;, created_at), COUNT(*) AS new_users, 100000 AS target FROM users GROUP BY 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dashboards&lt;/h2&gt; &#xA;&lt;p&gt;Create a dashboard with multiple queries. &lt;a href=&#34;https://blazer.dokkuapp.com/dashboards/1-dashboard-demo&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the query has a chart, the chart is shown. Otherwise, you‚Äôll see a table.&lt;/p&gt; &#xA;&lt;p&gt;If any queries have variables, they will show up on the dashboard.&lt;/p&gt; &#xA;&lt;h2&gt;Checks&lt;/h2&gt; &#xA;&lt;p&gt;Checks give you a centralized place to see the health of your data. &lt;a href=&#34;https://blazer.dokkuapp.com/checks&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a query to identify bad rows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM ratings WHERE user_id IS NULL /* all ratings should have a user */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create check with optional emails if you want to be notified. Emails are sent when a check starts failing, and when it starts passing again.&lt;/p&gt; &#xA;&lt;h2&gt;Cohorts&lt;/h2&gt; &#xA;&lt;p&gt;Create a cohort analysis from a simple SQL query. &lt;a href=&#34;https://blazer.dokkuapp.com/queries/19-cohort-analysis-from-first-order&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a query with the comment &lt;code&gt;/* cohort analysis */&lt;/code&gt;. The result should have columns named &lt;code&gt;user_id&lt;/code&gt; and &lt;code&gt;conversion_time&lt;/code&gt; and optionally &lt;code&gt;cohort_time&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can generate cohorts from the first conversion time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/* cohort analysis */&#xA;SELECT user_id, created_at AS conversion_time FROM orders&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(the first conversion isn‚Äôt counted in the first time period with this format)&lt;/p&gt; &#xA;&lt;p&gt;Or from another time, like sign up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;/* cohort analysis */&#xA;SELECT users.id AS user_id, orders.created_at AS conversion_time, users.created_at AS cohort_time&#xA;FROM users LEFT JOIN orders ON orders.user_id = users.id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature requires PostgreSQL or MySQL 8.&lt;/p&gt; &#xA;&lt;h2&gt;Anomaly Detection&lt;/h2&gt; &#xA;&lt;p&gt;Blazer supports three different approaches to anomaly detection.&lt;/p&gt; &#xA;&lt;h3&gt;Prophet&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ankane/prophet&#34;&gt;prophet-rb&lt;/a&gt; to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;prophet-rb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add to &lt;code&gt;config/blazer.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;anomaly_checks: prophet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Trend&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://trendapi.org/&#34;&gt;Trend&lt;/a&gt; uses an external service by default, but you can run it on your own infrastructure as well.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ankane/trend&#34;&gt;trend&lt;/a&gt; to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;trend&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add to &lt;code&gt;config/blazer.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;anomaly_checks: trend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the &lt;a href=&#34;https://github.com/ankane/trend-api&#34;&gt;self-hosted API&lt;/a&gt;, create an initializer with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Trend.url = &#34;http://localhost:8000&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AnomalyDetection.rb&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ankane/AnomalyDetection.rb&#34;&gt;anomaly_detection&lt;/a&gt; to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;anomaly_detection&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add to &lt;code&gt;config/blazer.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;anomaly_checks: anomaly_detection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Forecasting&lt;/h2&gt; &#xA;&lt;p&gt;Blazer supports for two different forecasting methods. &lt;a href=&#34;https://blazer.dokkuapp.com/queries/18-forecast?forecast=t&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A forecast link will appear for queries that return 2 columns with types timestamp and numeric.&lt;/p&gt; &#xA;&lt;h3&gt;Prophet&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ankane/prophet&#34;&gt;prophet-rb&lt;/a&gt; to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;prophet-rb&#34;, &#34;&amp;gt;= 0.2.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add to &lt;code&gt;config/blazer.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;forecasting: prophet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Trend&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://trendapi.org/&#34;&gt;Trend&lt;/a&gt; uses an external service by default, but you can run it on your own infrastructure as well.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ankane/trend&#34;&gt;trend&lt;/a&gt; to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;trend&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add to &lt;code&gt;config/blazer.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;forecasting: trend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the &lt;a href=&#34;https://github.com/ankane/trend-api&#34;&gt;self-hosted API&lt;/a&gt;, create an initializer with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Trend.url = &#34;http://localhost:8000&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Uploads&lt;/h2&gt; &#xA;&lt;p&gt;Create database tables from CSV files. &lt;a href=&#34;https://blazer.dokkuapp.com/uploads&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rails generate blazer:uploads&#xA;rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add to &lt;code&gt;config/blazer.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;uploads:&#xA;  url: postgres://...&#xA;  schema: uploads&#xA;  data_source: main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature requires PostgreSQL. Create a new schema just for uploads.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE SCHEMA uploads;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Sources&lt;/h2&gt; &#xA;&lt;p&gt;Blazer supports multiple data sources &lt;span&gt;üéâ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add additional data sources in &lt;code&gt;config/blazer.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  main:&#xA;    url: &amp;lt;%= ENV[&#34;BLAZER_DATABASE_URL&#34;] %&amp;gt;&#xA;    # timeout, smart_variables, linked_columns, smart_columns&#xA;  catalog:&#xA;    url: &amp;lt;%= ENV[&#34;CATALOG_DATABASE_URL&#34;] %&amp;gt;&#xA;    # ...&#xA;  redshift:&#xA;    url: &amp;lt;%= ENV[&#34;REDSHIFT_DATABASE_URL&#34;] %&amp;gt;&#xA;    # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Full List&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#amazon-athena&#34;&gt;Amazon Athena&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#amazon-redshift&#34;&gt;Amazon Redshift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#apache-drill&#34;&gt;Apache Drill&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#apache-hive&#34;&gt;Apache Hive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#apache-ignite&#34;&gt;Apache Ignite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#apache-spark&#34;&gt;Apache Spark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#cassandra&#34;&gt;Cassandra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#druid&#34;&gt;Druid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#google-bigquery&#34;&gt;Google BigQuery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#ibm-db2-and-informix&#34;&gt;IBM DB2 and Informix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#influxdb&#34;&gt;InfluxDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#mysql-1&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#neo4j&#34;&gt;Neo4j&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#opensearch&#34;&gt;OpenSearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#oracle&#34;&gt;Oracle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#postgresql-1&#34;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#presto&#34;&gt;Presto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#salesforce&#34;&gt;Salesforce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#socrata-open-data-api-soda&#34;&gt;Socrata Open Data API (SODA)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#snowflake&#34;&gt;Snowflake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#sqlite&#34;&gt;SQLite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#sql-server&#34;&gt;SQL Server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#creating-an-adapter&#34;&gt;create an adapter&lt;/a&gt; for any other data store.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the examples below, we recommend using environment variables for urls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: &amp;lt;%= ENV[&#34;BLAZER_MY_SOURCE_URL&#34;] %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Amazon Athena&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/aws/aws-sdk-ruby&#34;&gt;aws-sdk-athena&lt;/a&gt; and &lt;a href=&#34;https://github.com/aws/aws-sdk-ruby&#34;&gt;aws-sdk-glue&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: athena&#xA;    database: database&#xA;&#xA;    # optional settings&#xA;    output_location: s3://some-bucket/&#xA;    workgroup: primary&#xA;    access_key_id: ...&#xA;    secret_access_key: ...&#xA;    region: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here‚Äôs an example IAM policy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;Version&#34;: &#34;2012-10-17&#34;,&#xA;    &#34;Statement&#34;: [&#xA;        {&#xA;            &#34;Effect&#34;: &#34;Allow&#34;,&#xA;            &#34;Action&#34;: [&#xA;                &#34;athena:GetQueryExecution&#34;,&#xA;                &#34;athena:GetQueryResults&#34;,&#xA;                &#34;athena:StartQueryExecution&#34;&#xA;            ],&#xA;            &#34;Resource&#34;: [&#xA;                &#34;arn:aws:athena:region:account-id:workgroup/primary&#34;&#xA;            ]&#xA;        },&#xA;        {&#xA;            &#34;Effect&#34;: &#34;Allow&#34;,&#xA;            &#34;Action&#34;: [&#xA;                &#34;glue:GetTable&#34;,&#xA;                &#34;glue:GetTables&#34;&#xA;            ],&#xA;            &#34;Resource&#34;: [&#xA;                &#34;arn:aws:glue:region:account-id:catalog&#34;,&#xA;                &#34;arn:aws:glue:region:account-id:database/default&#34;,&#xA;                &#34;arn:aws:glue:region:account-id:table/default/*&#34;&#xA;            ]&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to configure &lt;a href=&#34;https://aws.amazon.com/premiumsupport/knowledge-center/access-denied-athena/&#34;&gt;S3 permissions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Amazon Redshift&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/kwent/activerecord6-redshift-adapter&#34;&gt;activerecord6-redshift-adapter&lt;/a&gt; or &lt;a href=&#34;https://github.com/ConsultingMD/activerecord5-redshift-adapter&#34;&gt;activerecord5-redshift-adapter&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: redshift://user:password@hostname:5439/database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://docs.aws.amazon.com/redshift/latest/dg/r_GRANT.html&#34;&gt;read-only user&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Apache Drill&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ankane/drill-sergeant&#34;&gt;drill-sergeant&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: drill&#xA;    url: http://hostname:8047&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://drill.apache.org/docs/roles-and-privileges/&#34;&gt;read-only user&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Apache Hive&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ankane/hexspace&#34;&gt;hexspace&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: hive&#xA;    url: sasl://user:password@hostname:10000/database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Authorization&#34;&gt;read-only user&lt;/a&gt;. Requires &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/Setting+Up+HiveServer2&#34;&gt;HiveServer2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Apache Ignite&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ankane/ignite-ruby&#34;&gt;ignite-client&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: ignite://user:password@hostname:10800&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://www.gridgain.com/docs/latest/administrators-guide/security/authorization-permissions&#34;&gt;read-only user&lt;/a&gt; (requires a third-party plugin).&lt;/p&gt; &#xA;&lt;h3&gt;Apache Spark&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ankane/hexspace&#34;&gt;hexspace&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: spark&#xA;    url: sasl://user:password@hostname:10000/database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a read-only user. Requires the &lt;a href=&#34;https://spark.apache.org/docs/latest/sql-distributed-sql-engine.html&#34;&gt;Thrift server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cassandra&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/datastax/ruby-driver&#34;&gt;cassandra-driver&lt;/a&gt; (and &lt;a href=&#34;https://github.com/knu/sorted_set&#34;&gt;sorted_set&lt;/a&gt; for Ruby 3+) to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: cassandra://user:password@hostname:9042/keyspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://docs.datastax.com/en/cql-oss/3.3/cql/cql_using/useSecurePermission.html&#34;&gt;read-only role&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Druid&lt;/h3&gt; &#xA;&lt;p&gt;Enable &lt;a href=&#34;http://druid.io/docs/latest/querying/sql.html#configuration&#34;&gt;SQL support&lt;/a&gt; on the broker and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: druid&#xA;    url: http://hostname:8082&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://druid.apache.org/docs/latest/development/extensions-core/druid-basic-security.html&#34;&gt;read-only role&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Elasticsearch&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/elastic/elasticsearch-ruby&#34;&gt;elasticsearch&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: elasticsearch&#xA;    url: http://user:password@hostname:9200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/security-privileges.html&#34;&gt;read-only role&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Google BigQuery&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/GoogleCloudPlatform/google-cloud-ruby/tree/master/google-cloud-bigquery&#34;&gt;google-cloud-bigquery&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: bigquery&#xA;    project: your-project&#xA;    keyfile: path/to/keyfile.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IBM DB2 and Informix&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ibmdb/ruby-ibmdb&#34;&gt;ibm_db&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: ibm-db://user:password@hostname:50000/database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://www.ibm.com/support/pages/creating-read-only-database-permissions-user&#34;&gt;read-only user&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;InfluxDB&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/influxdata/influxdb-ruby&#34;&gt;influxdb&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: influxdb&#xA;    url: http://user:password@hostname:8086/database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://docs.influxdata.com/influxdb/v1.8/administration/authentication_and_authorization/&#34;&gt;read-only user&lt;/a&gt;. Supports &lt;a href=&#34;https://docs.influxdata.com/influxdb/v1.8/query_language/explore-data/&#34;&gt;InfluxQL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MySQL&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/brianmario/mysql2&#34;&gt;mysql2&lt;/a&gt; to your Gemfile (if it‚Äôs not there) and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: mysql2://user:password@hostname:3306/database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#mysql&#34;&gt;read-only user&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Neo4j&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/neo4jrb/neo4j-core&#34;&gt;neo4j-core&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: neo4j&#xA;    url: http://user:password@hostname:7474&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://neo4j.com/docs/cypher-manual/current/access-control/manage-privileges/&#34;&gt;read-only user&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;OpenSearch&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/opensearch-project/opensearch-ruby&#34;&gt;opensearch-ruby&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: opensearch&#xA;    url: http://user:password@hostname:9200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://opensearch.org/docs/latest/security-plugin/access-control/permissions/&#34;&gt;read-only user&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Oracle&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/rsim/oracle-enhanced&#34;&gt;activerecord-oracle_enhanced-adapter&lt;/a&gt; and &lt;a href=&#34;https://github.com/kubo/ruby-oci8&#34;&gt;ruby-oci8&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: oracle-enhanced://user:password@hostname:1521/database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://docs.oracle.com/cd/B19306_01/network.102/b14266/authoriz.htm&#34;&gt;read-only user&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;PostgreSQL&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/ged/ruby-pg&#34;&gt;pg&lt;/a&gt; to your Gemfile (if it‚Äôs not there) and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: postgres://user:password@hostname:5432/database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://raw.githubusercontent.com/ankane/blazer/master/#postgresql&#34;&gt;read-only user&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Presto&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/treasure-data/presto-client-ruby&#34;&gt;presto-client&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: presto://user@hostname:8080/catalog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://prestodb.io/docs/current/security/built-in-system-access-control.html&#34;&gt;read-only user&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Salesforce&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/restforce/restforce&#34;&gt;restforce&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: salesforce&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And set the appropriate environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;SALESFORCE_USERNAME=&#34;username&#34;&#xA;SALESFORCE_PASSWORD=&#34;password&#34;&#xA;SALESFORCE_SECURITY_TOKEN=&#34;security token&#34;&#xA;SALESFORCE_CLIENT_ID=&#34;client id&#34;&#xA;SALESFORCE_CLIENT_SECRET=&#34;client secret&#34;&#xA;SALESFORCE_API_VERSION=&#34;41.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a read-only user. Supports &lt;a href=&#34;https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql.htm&#34;&gt;SOQL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Socrata Open Data API (SODA)&lt;/h3&gt; &#xA;&lt;p&gt;Set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: soda&#xA;    url: https://soda.demo.socrata.com/resource/4tka-6guv.json&#xA;    app_token: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supports &lt;a href=&#34;https://dev.socrata.com/docs/functions/&#34;&gt;SoQL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Snowflake&lt;/h3&gt; &#xA;&lt;p&gt;First, install ODBC. For Homebrew, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install unixodbc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Ubuntu, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install unixodbc-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Heroku, use the &lt;a href=&#34;https://github.com/heroku/heroku-buildpack-apt&#34;&gt;Apt buildpack&lt;/a&gt; and create an &lt;code&gt;Aptfile&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;unixodbc-dev&#xA;https://sfc-repo.snowflakecomputing.com/odbc/linux/2.21.5/snowflake-odbc-2.21.5.x86_64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This installs the driver at &lt;code&gt;/app/.apt/usr/lib/snowflake/odbc/lib/libSnowflake.so&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Then, download the &lt;a href=&#34;https://docs.snowflake.net/manuals/user-guide/odbc-download.html&#34;&gt;Snowflake ODBC driver&lt;/a&gt;. Add &lt;a href=&#34;https://github.com/localytics/odbc_adapter&#34;&gt;odbc_adapter&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: snowflake&#xA;    conn_str: Driver=/path/to/libSnowflake.so;uid=user;pwd=password;server=host.snowflakecomputing.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://docs.snowflake.com/en/user-guide/security-access-control-configure.html&#34;&gt;read-only role&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SQLite&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/sparklemotion/sqlite3-ruby&#34;&gt;sqlite3&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: sqlite3:path/to/database.sqlite3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQL Server&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://github.com/rails-sqlserver/tiny_tds&#34;&gt;tiny_tds&lt;/a&gt; and &lt;a href=&#34;https://github.com/rails-sqlserver/activerecord-sqlserver-adapter&#34;&gt;activerecord-sqlserver-adapter&lt;/a&gt; to your Gemfile and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    url: sqlserver://user:password@hostname:1433/database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/relational-databases/security/authentication-access/getting-started-with-database-engine-permissions?view=sql-server-ver15&#34;&gt;read-only user&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Creating an Adapter&lt;/h2&gt; &#xA;&lt;p&gt;Create an adapter for any data store with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class FooAdapter &amp;lt; Blazer::Adapters::BaseAdapter&#xA;  # code goes here&#xA;end&#xA;&#xA;Blazer.register_adapter &#34;foo&#34;, FooAdapter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/ankane/blazer/raw/master/lib/blazer/adapters/presto_adapter.rb&#34;&gt;Presto adapter&lt;/a&gt; for a good example. Then use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;data_sources:&#xA;  my_source:&#xA;    adapter: foo&#xA;    url: http://user:password@hostname:9200/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Query Permissions&lt;/h2&gt; &#xA;&lt;p&gt;Blazer supports a basic permissions model.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Queries without a name are unlisted&lt;/li&gt; &#xA; &lt;li&gt;Queries whose name starts with &lt;code&gt;#&lt;/code&gt; are only listed to the creator&lt;/li&gt; &#xA; &lt;li&gt;Queries whose name starts with &lt;code&gt;*&lt;/code&gt; can only be edited by the creator&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Learn SQL&lt;/h2&gt; &#xA;&lt;p&gt;Have team members who want to learn SQL? Here are a few great, free resources.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dataschool.com/learn-sql/&#34;&gt;The Data School&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sqlbolt.com/&#34;&gt;SQLBolt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful Tools&lt;/h2&gt; &#xA;&lt;p&gt;For an easy way to group by day, week, month, and more with correct time zones, check out &lt;a href=&#34;https://github.com/ankane/groupdate.sql&#34;&gt;Groupdate.sql&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Standalone Version&lt;/h2&gt; &#xA;&lt;p&gt;Looking for a standalone version? Check out &lt;a href=&#34;https://github.com/buren/ghost_blazer&#34;&gt;Ghost Blazer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;By default, queries take up a request while they are running. To run queries asynchronously, add to your config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;async: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Requires caching to be enabled. If you have multiple web processes, your app must use a centralized cache store like Memcached or Redis.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.cache_store = :mem_cache_store&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Archiving&lt;/h2&gt; &#xA;&lt;p&gt;Archive queries that haven‚Äôt been viewed in over 90 days.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake blazer:archive_queries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Content Security Policy&lt;/h2&gt; &#xA;&lt;p&gt;If views are stuck with a &lt;code&gt;Loading...&lt;/code&gt; message, there might be a problem with strict CSP settings in your app. This can be checked with Firefox or Chrome dev tools. You can allow Blazer to override these settings for its controllers with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;override_csp: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;h3&gt;3.0&lt;/h3&gt; &#xA;&lt;p&gt;Maps now use Mapbox GL JS v1 instead of Mapbox.js, which affects Mapbox billing.&lt;/p&gt; &#xA;&lt;h3&gt;2.6&lt;/h3&gt; &#xA;&lt;p&gt;Custom adapters now need to specify how to quote variables in queries (there is no longer a default)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class FooAdapter &amp;lt; Blazer::Adapters::BaseAdapter&#xA;  def quoting&#xA;    :backslash_escape # single quote strings and convert &#39; to \&#39; and \ to \\&#xA;    # or&#xA;    :single_quote_escape # single quote strings and convert &#39; to &#39;&#39;&#xA;    # or&#xA;    -&amp;gt;(value) { ... } # custom method&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.3&lt;/h3&gt; &#xA;&lt;p&gt;To archive queries, create a migration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rails g migration add_status_to_blazer_queries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;add_column :blazer_queries, :status, :string&#xA;Blazer::Query.update_all(status: &#34;active&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.0&lt;/h3&gt; &#xA;&lt;p&gt;To use Slack notifications, create a migration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rails g migration add_slack_channels_to_blazer_checks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;add_column :blazer_checks, :slack_channels, :text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;View the &lt;a href=&#34;https://github.com/ankane/blazer/raw/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Blazer uses a number of awesome open source projects, including &lt;a href=&#34;https://github.com/rails/rails/&#34;&gt;Rails&lt;/a&gt;, &lt;a href=&#34;https://github.com/vuejs/vue&#34;&gt;Vue.js&lt;/a&gt;, &lt;a href=&#34;https://github.com/jquery/jquery&#34;&gt;jQuery&lt;/a&gt;, &lt;a href=&#34;https://github.com/twbs/bootstrap&#34;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&#34;https://github.com/brianreavis/selectize.js&#34;&gt;Selectize&lt;/a&gt;, &lt;a href=&#34;https://github.com/jmosbech/StickyTableHeaders&#34;&gt;StickyTableHeaders&lt;/a&gt;, &lt;a href=&#34;https://github.com/joequery/Stupid-Table-Plugin&#34;&gt;Stupid jQuery Table Sort&lt;/a&gt;, and &lt;a href=&#34;https://github.com/dangrossman/bootstrap-daterangepicker&#34;&gt;Date Range Picker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Demo data from &lt;a href=&#34;https://grouplens.org/datasets/movielens/&#34;&gt;MovieLens&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Want to Make Blazer Better?&lt;/h2&gt; &#xA;&lt;p&gt;That‚Äôs awesome! Here are a few ways you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankane/blazer/issues&#34;&gt;Report bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fix bugs and &lt;a href=&#34;https://github.com/ankane/blazer/pulls&#34;&gt;submit pull requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write, clarify, or fix documentation&lt;/li&gt; &#xA; &lt;li&gt;Suggest or add new features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/ankane/blazer-dev&#34;&gt;dev app&lt;/a&gt; to get started.&lt;/p&gt;</summary>
  </entry>
</feed>