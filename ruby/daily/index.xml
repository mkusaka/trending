<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-12T01:39:55Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>publiclab/plots2</title>
    <updated>2022-10-12T01:39:55Z</updated>
    <id>tag:github.com,2022-10-12:/publiclab/plots2</id>
    <link href="https://github.com/publiclab/plots2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a collaborative knowledge-exchange platform in Rails; we welcome first-time contributors! üéà&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PublicLab.org&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://publiclab.org/conduct&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code-of%20conduct-green.svg?sanitize=true&#34; alt=&#34;Code of Conduct&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/publiclab/plots2/actions&#34;&gt;&lt;img src=&#34;https://github.com/publiclab/plots2/workflows/tests/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://code.publiclab.org#r=all&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/first--timers--only-friendly-blue.svg?style=flat-square&#34; alt=&#34;first-timers-only-friendly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://publiclab.org/chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-in%20different%20ways-blue.svg?sanitize=true&#34; alt=&#34;Join the chat at https://publiclab.org/chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/publiclab/plots2&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/publiclab/plots2/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/publiclab/plots2&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/publiclab/plots2/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.skylight.io/app/applications/GZDPChmcfm1Q&#34;&gt;&lt;img src=&#34;https://badges.skylight.io/typical/GZDPChmcfm1Q.svg?sanitize=true&#34; alt=&#34;View performance data on Skylight&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://code.publiclab.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/newcomers-welcome-pink.svg?sanitize=true&#34; alt=&#34;Newcomers welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/publiclab/plots2?logo=gpl&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/publiclab/plots2/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The content management system for the Public Lab research community, the &lt;code&gt;plots2&lt;/code&gt; web application is a combination of a group research blog -what we call &#34;research notes&#34;-and a wiki. Read more about the &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/doc/DATA_MODEL.md&#34;&gt;data model here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Begin running (and contributing to) this codebase immediately with &lt;a href=&#34;https://gitpod.io&#34;&gt;GitPod&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/publiclab/plots2&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It showcases a variety of features that help the Public Lab community collaborate on environmental technology, design, documentation, and community organizing. Originally a Drupal site, it was rewritten in 2012 with Ruby on Rails and has since extended but &lt;a href=&#34;https://github.com/publiclab/plots2/issues/956&#34;&gt;not yet entirely replaced&lt;/a&gt; the legacy Drupal data model and database design. We ‚ù§Ô∏è Open Source and actively participate in various OSS programs such as &lt;a href=&#34;https://publiclab.org/wiki/gsoc&#34;&gt;Google Summer of Code(GSoC)&lt;/a&gt;, Rails Girls Summer of Code (RGSoC), Outreachy, and Google Code-In (GCI). Some key features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://publiclab.org/questions&#34;&gt;Q&amp;amp;A portal&lt;/a&gt; for peer-based problem solving&lt;/li&gt; &#xA; &lt;li&gt;A rich text and Markdown &lt;a href=&#34;https://github.com/publiclab/PublicLab.Editor&#34;&gt;editor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://publiclab.org/wiki&#34;&gt;Wiki editing&lt;/a&gt; and revision tracking&lt;/li&gt; &#xA; &lt;li&gt;Tagging and &lt;a href=&#34;https://publiclab.org/tags&#34;&gt;topically-based groups and content organization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email notification subscriptions for topics and comments&lt;/li&gt; &#xA; &lt;li&gt;A search interface built out of &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/doc/API.md&#34;&gt;our growing API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A user dashboard &lt;a href=&#34;https://publiclab.org/dashboard&#34;&gt;presenting recent activity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A privacy-sensitive, Leaflet-based &lt;a href=&#34;https://github.com/publiclab/leaflet-blurred-location/&#34;&gt;location tagging system&lt;/a&gt; and &lt;a href=&#34;https://publiclab.org/people&#34;&gt;community map&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;We are developing a draft Roadmap for &lt;code&gt;plots2&lt;/code&gt; and our broader Public Lab code projects; &lt;a href=&#34;https://publiclab.org/notes/warren/05-22-2019/draft-of-a-public-lab-software-roadmap-comments-welcome&#34;&gt;read more and comment here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A full description of the features, audiences, inter-relationships, and goals of Public Lab software projects can be found here: &lt;a href=&#34;https://publiclab.org/software-overview&#34;&gt;https://publiclab.org/software-overview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#what-makes-this-project-different&#34;&gt;What Makes This Project Different&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#data-model&#34;&gt;Data model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#standard-installation&#34;&gt;Standard Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#windows-installation&#34;&gt;Windows Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#windows-subsystem-for-linux-2-installation&#34;&gt;Windows Subsystem for Linux 2 Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#redis-installation&#34;&gt;Redis Installation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#ssl-in-development&#34;&gt;SSL in Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#login&#34;&gt;Login&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#how-to-start-and-modify-cron-jobs&#34;&gt;How to start and modify cron jobs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#bundle-exec&#34;&gt;Bundle Exec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#reply-by-email&#34;&gt;Reply-by-email&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#bugs-and-support&#34;&gt;Bugs and Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#recaptcha&#34;&gt;Recaptcha&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#internationalization&#34;&gt;Internationalization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#developers&#34;&gt;Developers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#first-time&#34;&gt;First Time?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#hacktoberfest&#34;&gt;Hacktoberfest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;What makes this project different&lt;/h2&gt; &#xA;&lt;p&gt;The people who create our platform make very different design and technology decisions from other projects. This stems from our deep belief that, to see a change in the world, we must build and maintain systems that &lt;strong&gt;reflect our values and principles.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;From design to system architecture to basic vocabulary and communication patterns, our systems have grown organically since 2010 to support a powerful, diverse, and cooperative network of people capable of taking on environmental problems that affect communities globally. The platform we have built together speaks to this shared history in many ways, big and small. It reflects input from people facing serious health issues, on-the-ground organizers, policy specialists, hardware hackers, educators, and civil servants.&lt;/p&gt; &#xA;&lt;p&gt;This broad community and the Public Lab team have facilitated a space where we can discuss, break down, construct, prototype, and critique real-world projects. Together we have shaped a platform that incorporates familiar pieces but ultimately looks and feels quite different from anything else on the internet. Despite the growth of our platform, it remains committed to hearing the voices of others, mutual respect and support, an awareness of the barriers and challenges presented by gaps in expertise and knowledge, and a sensitivity to the inequalities and power imbalances perpetuated by many mainstream modes of knowledge production and technological and scientific development.&lt;/p&gt; &#xA;&lt;p&gt;Our mutual aim to democratize inexpensive and accessible do-it-yourself techniques has allowed us to create a collaborative network of practitioners who actively re-imagine the human relationship with the environment. Our goals are supported and facilitated by a system which questions and even challenges how collaborative work can happen.&lt;/p&gt; &#xA;&lt;h2&gt;Data Model&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24359/50705765-d84ae000-1029-11e9-9e4c-f166a0c0d5d1.png&#34; alt=&#34;Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(Above: draft of our &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/doc/DATA_MODEL.md&#34;&gt;Data model&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions, and are especially interested in welcoming &lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#first-time&#34;&gt;first time contributors&lt;/a&gt;. Read more about &lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#developers&#34;&gt;how to contribute&lt;/a&gt; below! We especially welcome contributions from people belonging to groups under-represented in free and open source software!&lt;/p&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;Please read and abide by our &lt;a href=&#34;https://publiclab.org/conduct&#34;&gt;Code of Conduct&lt;/a&gt;; our community aspires to be a respectful place both during online and in-¬≠person interactions.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;For installation, prerequisites include sqlite3 and rvm. &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/doc/PREREQUISITES.md&#34;&gt;Click here for a complete list and instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Standard Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork our repo from &lt;a href=&#34;https://github.com/publiclab/plots2&#34;&gt;https://github.com/publiclab/plots2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the console, download a copy of your forked repo with &lt;code&gt;git clone https://github.com/your_username/plots2.git&lt;/code&gt; where &lt;code&gt;your_username&lt;/code&gt; is your GitHub username.&lt;/li&gt; &#xA; &lt;li&gt;Enter the new &lt;strong&gt;plots2&lt;/strong&gt; directory with &lt;code&gt;cd plots2&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set the upstream remote to the original repository url so that git knows where to fetch updates from in future: &lt;code&gt;git remote add upstream https://github.com/publiclab/plots2.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Steps to install gems: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You may need to first run &lt;code&gt;bundle install&lt;/code&gt; if you have older gems in your environment from previous Rails work. If you get an error message like &lt;code&gt;Your Ruby version is 2.x.x, but your Gemfile specified 2.7.3&lt;/code&gt; then you need to install the ruby version 2.7.3 using &lt;code&gt;rvm&lt;/code&gt; or &lt;code&gt;rbenv&lt;/code&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Using &lt;strong&gt;rvm&lt;/strong&gt;: &lt;code&gt;rvm install 2.7.3&lt;/code&gt; followed by &lt;code&gt;rvm use 2.7.3&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Using &lt;strong&gt;rbenv&lt;/strong&gt;: &lt;code&gt;rbenv install 2.7.3&lt;/code&gt; followed by &lt;code&gt;rbenv local 2.7.3&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Run this &lt;code&gt;bundle config set without &#39;production mysql&#39;&lt;/code&gt; from the rails root folder to set your project to exclude libraries only needed in production.&lt;/li&gt; &#xA;   &lt;li&gt;Install gems with &lt;code&gt;bundle install&lt;/code&gt; from the rails root folder.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cp db/schema.rb.example db/schema.rb&lt;/code&gt; to make a copy of &lt;code&gt;db/schema.rb.example&lt;/code&gt; in &lt;code&gt;db/schema.rb&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You could choose to use mysql2 or sqlite3 as your database. &lt;em&gt;We &lt;strong&gt;recommend&lt;/strong&gt; using &lt;code&gt;sqlite3&lt;/code&gt; as your plots2 database as some of our contributors have reported issues while using &lt;code&gt;mysql2&lt;/code&gt;&lt;/em&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If mysql2, run &lt;code&gt;cp config/database.yml.mysql.example config/database.yml&lt;/code&gt; to make a copy of &lt;code&gt;config/database.yml.mysql.example&lt;/code&gt; in &lt;code&gt;config/database.yml&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If sqlite3, run &lt;code&gt;cp config/database.yml.sqlite.example config/database.yml&lt;/code&gt; to make a copy of &lt;code&gt;config/database.yml.sqlite.example&lt;/code&gt; in &lt;code&gt;config/database.yml&lt;/code&gt;. &lt;em&gt;kindly note if you choose to use sqlite some tests may fail. The project was setup initially to use mysql and some tests are tailored for mysql db. No need for alarm, we are working to fix these and this will not interfere with your development process&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rake db:setup&lt;/code&gt; to set up the database&lt;/li&gt; &#xA; &lt;li&gt;Install static assets (like external javascript libraries, fonts) with &lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Setup React &amp;amp; webpacker by running &lt;code&gt;rails webpacker:install &amp;amp;&amp;amp; rails webpacker:install:react &amp;amp;&amp;amp; rails generate react:install&lt;/code&gt;(for local SSL work, see &lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/#ssl-in-development&#34;&gt;SSL&lt;/a&gt; below)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you get any prompt to overwrite files in this step please choose no. The prompt will be something like &lt;em&gt;&#34;Overwrite /home/plots2/config/webpacker.yml? (enter &#34;h&#34; for help) [Ynaqdhm]&#34;&lt;/em&gt; :- type &#34;n&#34; and enter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;11&#34;&gt; &#xA; &lt;li&gt;Start the server with &lt;code&gt;passenger start&lt;/code&gt; and navigate to &lt;code&gt;http://localhost:3000/&lt;/code&gt; on your browser.&lt;/li&gt; &#xA; &lt;li&gt;Wheeeee! You&#39;re up and running! Log in with test usernames &#34;user&#34;, &#34;moderator&#34;, or &#34;admin&#34;, and password &#34;password&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rails test&lt;/code&gt; to confirm that your install is working properly. You can also run &lt;code&gt;rails test:system&lt;/code&gt; for system tests. (&lt;em&gt;Note: if you chose sqlite as your database, some tests may fail; Please ignore these, we are working to fix this. If your server starts correctly, you are all set&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Windows Installation&lt;/h3&gt; &#xA;&lt;p&gt;We recommend you either work in a virtual environment, or on a dual booted system to avoid dependencies issues as Unix systems tend to work smoother with Ruby and Rails. This will not only benefit you now for plots2, but also in the future while working on other Ruby projects, a Linux or Mac based OS will make your development much easier.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;Windows Subsystem for Linux&lt;/a&gt; (recommended)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tecmint.com/install-ubuntu-alongside-with-windows-dual-boot/amp/&#34;&gt;Dual Booting&lt;/a&gt;, &lt;a href=&#34;https://askubuntu.com/questions/1031993/how-to-install-ubuntu-18-04-alongside-windows-10&#34;&gt;option2&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=qNeJvujdB-0&amp;amp;fbclid=IwAR0APhs89jlNR_ENKbSwrp6TI6P-wxlx-a0My9XBvPNAfwtADZaAXqcKtP4&#34;&gt;video guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itsfoss.com/install-linux-in-virtualbox/&#34;&gt;Setting up a Linux virtual env&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Windows Subsystem for Linux 2 Installation&lt;/h3&gt; &#xA;&lt;p&gt;Before continuing with the installation steps in this README, users of Windows Subsystem for Linux 2 (WSL 2) should open the WSL 2 Terminal and type out the commands below.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Dependencies required from Ruby Source with the following commands:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo apt update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo apt install curl g++ gcc autoconf automake bison libc6-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo apt install libffi-dev libgdbm-dev libncurses5-dev libsqlite3-dev libtool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo apt install libyaml-dev make pkg-config sqlite3 zlib1g-dev libgmp-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo apt install libreadline-dev libssl-dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add GPG Key &amp;amp; Install RVM:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;curl -sSL https://get.rvm.io | bash -s stable&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Load the Script environment variables using source command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;source ~/.rvm/scripts/rvm&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Install and use specific Ruby version:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rvm install ruby-x.x.x (this projects Ruby version)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rvm --default use ruby-x.x.x (replace x.x.x with this project&#39;s Ruby version)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;For further reference, &lt;a href=&#34;https://linuxize.com/post/how-to-install-ruby-on-ubuntu-20-04/&#34;&gt;read here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Redis Installation&lt;/h3&gt; &#xA;&lt;p&gt;Public Lab uses Redis and may be required for some functionality when running the application locally.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Redis if you haven&#39;t already:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;MacOS&lt;/strong&gt;: &lt;code&gt;brew install redis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;Linux&lt;/strong&gt;: &lt;code&gt;sudo yum -y install redis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;Ubuntu WSL2&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;update &amp;amp; upgrade Ubuntu: &lt;code&gt;sudo apt update &amp;amp;&amp;amp; apt upgrade&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;install redis: &lt;code&gt;sudo apt install Redis-server&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;open Redis.config file: &lt;code&gt;sudo nano /etc/redis/redis.conf&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;update the file by changing the supervised no line to supervised systemd(ubuntu uses systemd)&lt;/li&gt; &#xA;   &lt;li&gt;start Redis: &lt;code&gt;sudo service redis-server start&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;open Redis CLI: &lt;code&gt;redis-cli&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;test Redis: type &lt;code&gt;ping&lt;/code&gt; &amp;amp; response should be &lt;code&gt;pong&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;exit cli: type &lt;code&gt;quit&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Awesome &lt;span&gt;üëç&lt;/span&gt; All done &lt;span&gt;‚úÖ&lt;/span&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run Redis server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;MacOS&lt;/strong&gt;: &lt;code&gt;brew services start redis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;Linux&lt;/strong&gt;: &lt;code&gt;redis-server&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run SideKiq: &lt;code&gt;bundle exec sidekiq&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If SideKiq started correctly Redis is now configured and working!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;SSL in Development&lt;/h2&gt; &#xA;&lt;p&gt;At Public Lab we use the &lt;a href=&#34;https://github.com/ruby/openssl&#34;&gt;openssl&lt;/a&gt; gem to provide SSL (Secure Sockets Layer) for a secure connection (https) in the development mode. You can run the https connection on localhost through the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;passenger start --ssl --ssl-certificate config/localhost.crt --ssl-certificate-key config/localhost.key --ssl-port 3001&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open up &lt;a href=&#34;https://localhost:3001&#34;&gt;https://localhost:3001&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add security exceptions from the advance settings of the browser. You can also use http (unsecure connection) on the port number 3000 by going to &#39;&lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&#39;. We use port number 3001 for &#39;https&#39; and port number 3000 for &#39;http&#39; connection. Secure connection is needed for OAuth authentication etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Login&lt;/h2&gt; &#xA;&lt;p&gt;Once you complete the installation, use any of these credentials to login into the PL website in your local development/testing environment to gain additional permissions for logged in users only. Each one comes with its own set of permissions; nevertheless, the experience across them is pretty much the same.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;username&lt;/strong&gt;: &lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;moderator&lt;/code&gt;, or &lt;code&gt;user&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;: &lt;code&gt;password&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more on the login systems, see &lt;a href=&#34;https://github.com/publiclab/plots2/raw/b1c57446d016f8cd0ec149a75298711270e1643e/doc/LOGIN_SYSTEMS.md#how-to-setup-login-modal-on-various-locations&#34;&gt;this page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Click &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/doc/TESTING.md&#34;&gt;here&lt;/a&gt; for a comprehensive description of testing and &lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/SYSTEM_TESTS.md&#34;&gt;here&lt;/a&gt; to learn about system tests.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/doc/MAINTAINERS.md&#34;&gt;/doc/MAINTAINERS.md&lt;/a&gt; for Public Lab&#39;s policy on feature maintainers!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to start and modify cron jobs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We are using &lt;a href=&#34;https://github.com/javan/whenever&#34;&gt;Whenever&lt;/a&gt; gem to schedule cron jobs.&lt;/li&gt; &#xA; &lt;li&gt;All the cron jobs are written in easy ruby syntax using this gem and can be found in config/schedule.rb.&lt;/li&gt; &#xA; &lt;li&gt;Go to the config/schedule.rb file to create and modify the cron jobs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/javan/whenever&#34;&gt;Click here&lt;/a&gt; to learn more about how to write cron jobs.&lt;/li&gt; &#xA; &lt;li&gt;After updating config/schedule.rb file run the command &lt;code&gt;whenever --update-crontab&lt;/code&gt; to update the cron jobs.&lt;/li&gt; &#xA; &lt;li&gt;To see the installed list of cron jobs use command &lt;code&gt;crontab -l&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For more details about this gem, visit the official repository of the &lt;a href=&#34;https://github.com/javan/whenever&#34;&gt;Whenever&lt;/a&gt; gem.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Bundle exec&lt;/h2&gt; &#xA;&lt;p&gt;For some, it will be necessary to prepend your gem-related commands with &lt;code&gt;bundle exec&lt;/code&gt;. For example, &lt;code&gt;bundle exec passenger start&lt;/code&gt;. Adding &lt;code&gt;bundle exec&lt;/code&gt; ensures you&#39;re using the version of passenger you just installed with Bundler. &lt;code&gt;bundle exec rake db:setup&lt;/code&gt;, &lt;code&gt;bundle exec rake db:seed&lt;/code&gt; are other examples of where this might be necessary.&lt;/p&gt; &#xA;&lt;h2&gt;Reply-by-email&lt;/h2&gt; &#xA;&lt;p&gt;Public Lab now supports &#34;reply by email to comment&#34; feature. For more details, go to the &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/doc/EMAIL.md&#34;&gt;email documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bugs and support&lt;/h2&gt; &#xA;&lt;p&gt;To report bugs and request features, please use the &lt;a href=&#34;https://github.com/publiclab/plots2/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For additional support, join the Public Lab website and mailing list at &lt;a href=&#34;http://publiclab.org/lists&#34;&gt;http://publiclab.org/lists&lt;/a&gt;. For urgent requests, email &lt;a href=&#34;mailto:web@publiclab.org&#34;&gt;web@publiclab.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Recaptcha&lt;/h2&gt; &#xA;&lt;p&gt;This application uses RECAPTCHA via the recaptcha gem in production only. For more information, &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/doc/RECAPTCHA.md&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Internationalization&lt;/h2&gt; &#xA;&lt;p&gt;Publiclab.org now supports Internationalization and localization, though we are in the initial stages. This has been accomplished with &lt;a href=&#34;https://github.com/svenfuchs/rails-i18n&#34;&gt;rails-I8n&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To see it in action, click on the &#39;Language&#39; drop-down located in the footer section of the page. All the guidelines and best practices for I18n can be found &lt;a href=&#34;http://guides.rubyonrails.org/i18n.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Translations are arranged in the YAML files &lt;a href=&#34;https://github.com/publiclab/plots2/tree/main/config/locales&#34;&gt;here&lt;/a&gt;, which are set in a similar way to &lt;a href=&#34;https://github.com/publiclab/plots2/tree/main/app/views&#34;&gt;views&lt;/a&gt; files. An example for adding translations can be found &lt;a href=&#34;http://guides.rubyonrails.org/i18n.html#adding-translations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since the implementation of our new &lt;a href=&#34;https://github.com/publiclab/plots2/issues/5737&#34;&gt;Translation system&lt;/a&gt;, we now use the &lt;code&gt;translation()&lt;/code&gt; helper, &lt;a href=&#34;https://github.com/publiclab/plots2/raw/438b649669b2029d01437bec9eb2826cf764851b/app/helpers/application_helper.rb#L141-L153&#34;&gt;found here&lt;/a&gt;. This provides some extra translation features such as inserting a prompt visible to site visitors if no translation exists yet. You can learn more about our translation system by reading our &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/doc/Translation_System.md&#34;&gt;Translation system docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add new languages or for additional support, please write to &lt;a href=&#34;mailto:plots-dev@googlegroups.com&#34;&gt;plots-dev@googlegroups.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;To report security vulnerabilities or for questions about security, please contact &lt;a href=&#34;mailto:web@publiclab.org&#34;&gt;web@publiclab.org&lt;/a&gt;. Our Web Working Group will assess and respond promptly.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Help improve Public Lab software!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the &lt;a href=&#34;mailto:plots-dev@googlegroups.com&#34;&gt;plots-dev@googlegroups.com&lt;/a&gt; discussion list to get involved&lt;/li&gt; &#xA; &lt;li&gt;Look for open issues at &lt;a href=&#34;https://github.com/publiclab/plots2/labels/help-wanted&#34;&gt;https://github.com/publiclab/plots2/labels/help-wanted&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;We&#39;re specifically asking for help with issues labelled with &lt;a href=&#34;https://github.com/publiclab/plots2/labels/help-wanted&#34;&gt;help-wanted&lt;/a&gt; tag&lt;/li&gt; &#xA; &lt;li&gt;Find lots of info on contributing at &lt;a href=&#34;http://publiclab.org/wiki/developers&#34;&gt;http://publiclab.org/wiki/developers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Review specific contributor guidelines at &lt;a href=&#34;http://publiclab.org/wiki/contributing-to-public-lab-software&#34;&gt;http://publiclab.org/wiki/contributing-to-public-lab-software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Some devs hang out in the &lt;a href=&#34;http://publiclab.org/chat&#34;&gt;irc webchat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://gitter.im/publiclab/publiclab&#34;&gt;gitter chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Try out some &lt;a href=&#34;https://github.com/publiclab/plots2/wiki/Supportive-Tasks&#34;&gt;supportive tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get involved with our weekly community check-ins. For guidelines: &lt;a href=&#34;https://github.com/publiclab/plots2/tree/main/doc/CHECKINS.md&#34;&gt;https://github.com/publiclab/plots2/tree/main/doc/CHECKINS.md &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can help us by opening first timers issues or fto. The template for opening an issue can be found at &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/.github/ISSUE_TEMPLATE/--first-timers-only.md&#34;&gt;https://github.com/publiclab/plots2/blob/main/.github/ISSUE_TEMPLATE/--first-timers-only.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;First Time?&lt;/h2&gt; &#xA;&lt;p&gt;New to open source/free software? Here is a selection of issues we&#39;ve made &lt;strong&gt;especially for first-timers&lt;/strong&gt;. We&#39;re here to help, so just ask if one looks interesting : &lt;a href=&#34;https://code.publiclab.org&#34;&gt;https://code.publiclab.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://publiclab.org/notes/warren/11-22-2017/use-git-and-github-to-contribute-and-improve-public-lab-software&#34;&gt;Here&lt;/a&gt; is a link to our Git workflow.&lt;/p&gt; &#xA;&lt;h2&gt;Hacktoberfest&lt;/h2&gt; &#xA;&lt;p&gt;Wishing to contribute to Publiclab as part of Hacktoberfest? Check out our &lt;a href=&#34;https://github.com/publiclab/plots2/raw/main/HACKTOBERFEST.md&#34;&gt;Hacktoberfest contributing docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Let the code be with you.&lt;/h2&gt; &#xA;&lt;h3&gt;Happy opensourcing. &lt;span&gt;üòÑ&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;center&gt; &#xA; &lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/publiclab/plots2/main/doc/SUPPORTERS.md&#34;&gt;Platforms that &lt;span&gt;‚ù§Ô∏è&lt;/span&gt; OSS&lt;/a&gt;&lt;/h4&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://twitter.com/PublicLab&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/PublicLab?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/center&gt;</summary>
  </entry>
  <entry>
    <title>rest-client/rest-client</title>
    <updated>2022-10-12T01:39:55Z</updated>
    <id>tag:github.com,2022-10-12:/rest-client/rest-client</id>
    <link href="https://github.com/rest-client/rest-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple HTTP and REST client for Ruby, inspired by microframework syntax for specifying actions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;REST Client -- simple DSL for accessing HTTP and REST resources&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/rest-client&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/dt/rest-client.svg?sanitize=true&#34; alt=&#34;Gem Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/rest-client/rest-client&#34;&gt;&lt;img src=&#34;https://travis-ci.org/rest-client/rest-client.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rest-client/rest-client&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rest-client/rest-client.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.rubydoc.info/github/rest-client/rest-client/master&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/rest-client/rest-client.svg?branch=master&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/ruby-rest-client/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/ruby-rest-client/community.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/ruby-rest-client/community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple HTTP and REST client for Ruby, inspired by the Sinatra&#39;s microframework style of specifying actions: get, put, post, delete.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Main page: &lt;a href=&#34;https://github.com/rest-client/rest-client&#34;&gt;https://github.com/rest-client/rest-client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;https://groups.io/g/rest-client&#34;&gt;https://groups.io/g/rest-client&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;New mailing list&lt;/h3&gt; &#xA;&lt;p&gt;We have a new email list for announcements, hosted by Groups.io.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Subscribe on the web: &lt;a href=&#34;https://groups.io/g/rest-client&#34;&gt;https://groups.io/g/rest-client&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Subscribe by sending an email: mailto:&lt;a href=&#34;mailto:rest-client+subscribe@groups.io&#34;&gt;rest-client+subscribe@groups.io&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open discussion subgroup: &lt;a href=&#34;https://groups.io/g/rest-client+discuss&#34;&gt;https://groups.io/g/rest-client+discuss&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The old Librelist mailing list is &lt;em&gt;defunct&lt;/em&gt;, as Librelist appears to be broken and not accepting new mail. The old archives are still up, but have been imported into the new list archives as well. &lt;a href=&#34;http://librelist.com/browser/rest.client&#34;&gt;http://librelist.com/browser/rest.client&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;MRI Ruby 2.0 and newer are supported. Alternative interpreters compatible with 2.0+ should work as well.&lt;/p&gt; &#xA;&lt;p&gt;Earlier Ruby versions such as 1.8.7, 1.9.2, and 1.9.3 are no longer supported. These versions no longer have any official support, and do not receive security updates.&lt;/p&gt; &#xA;&lt;p&gt;The rest-client gem depends on these other gems for usage at runtime:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubygems.org/gems/mime-types&#34;&gt;mime-types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubygems.org/gems/netrc&#34;&gt;netrc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubygems.org/gems/http-accept&#34;&gt;http-accept&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubygems.org/gems/http-cookie&#34;&gt;http-cookie&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are also several development dependencies. It&#39;s recommended to use &lt;a href=&#34;http://bundler.io/&#34;&gt;bundler&lt;/a&gt; to manage these dependencies for hacking on rest-client.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading to rest-client 2.0 from 1.x&lt;/h3&gt; &#xA;&lt;p&gt;Users are encouraged to upgrade to rest-client 2.0, which cleans up a number of API warts and wrinkles, making rest-client generally more useful. Usage is largely compatible, so many applications will be able to upgrade with no changes.&lt;/p&gt; &#xA;&lt;p&gt;Overview of significant changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;requires Ruby &amp;gt;= 2.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RestClient::Response&lt;/code&gt; objects are a subclass of &lt;code&gt;String&lt;/code&gt; rather than a Frankenstein monster. And &lt;code&gt;#body&lt;/code&gt; or &lt;code&gt;#to_s&lt;/code&gt; return a true &lt;code&gt;String&lt;/code&gt; object.&lt;/li&gt; &#xA; &lt;li&gt;cleanup of exception classes, including new &lt;code&gt;RestClient::Exceptions::Timeout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;improvements to handling of redirects: responses and history are properly exposed&lt;/li&gt; &#xA; &lt;li&gt;major changes to cookie support: cookie jars are used for browser-like behavior throughout&lt;/li&gt; &#xA; &lt;li&gt;encoding: Content-Type charset response headers are used to automatically set the encoding of the response string&lt;/li&gt; &#xA; &lt;li&gt;HTTP params: handling of GET/POST params is more consistent and sophisticated for deeply nested hash objects, and &lt;code&gt;ParamsArray&lt;/code&gt; can be used to pass ordered params&lt;/li&gt; &#xA; &lt;li&gt;improved proxy support with per-request proxy configuration, plus the ability to disable proxies set by environment variables&lt;/li&gt; &#xA; &lt;li&gt;default request headers: rest-client sets &lt;code&gt;Accept: */*&lt;/code&gt; and &lt;code&gt;User-Agent: rest-client/...&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rest-client/rest-client/master/history.md&#34;&gt;history.md&lt;/a&gt; for a more complete description of changes.&lt;/p&gt; &#xA;&lt;h2&gt;Usage: Raw URL&lt;/h2&gt; &#xA;&lt;p&gt;Basic usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rest-client&#39;&#xA;&#xA;RestClient.get(url, headers={})&#xA;&#xA;RestClient.post(url, payload, headers={})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the high level helpers, only POST, PATCH, and PUT take a payload argument. To pass a payload with other HTTP verbs or to pass more advanced options, use &lt;code&gt;RestClient::Request.execute&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;More detailed examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rest-client&#39;&#xA;&#xA;RestClient.get &#39;http://example.com/resource&#39;&#xA;&#xA;RestClient.get &#39;http://example.com/resource&#39;, {params: {id: 50, &#39;foo&#39; =&amp;gt; &#39;bar&#39;}}&#xA;&#xA;RestClient.get &#39;https://user:password@example.com/private/resource&#39;, {accept: :json}&#xA;&#xA;RestClient.post &#39;http://example.com/resource&#39;, {param1: &#39;one&#39;, nested: {param2: &#39;two&#39;}}&#xA;&#xA;RestClient.post &#34;http://example.com/resource&#34;, {&#39;x&#39; =&amp;gt; 1}.to_json, {content_type: :json, accept: :json}&#xA;&#xA;RestClient.delete &#39;http://example.com/resource&#39;&#xA;&#xA;&amp;gt;&amp;gt; response = RestClient.get &#39;http://example.com/resource&#39;&#xA;=&amp;gt; &amp;lt;RestClient::Response 200 &#34;&amp;lt;!doctype h...&#34;&amp;gt;&#xA;&amp;gt;&amp;gt; response.code&#xA;=&amp;gt; 200&#xA;&amp;gt;&amp;gt; response.cookies&#xA;=&amp;gt; {&#34;Foo&#34;=&amp;gt;&#34;BAR&#34;, &#34;QUUX&#34;=&amp;gt;&#34;QUUUUX&#34;}&#xA;&amp;gt;&amp;gt; response.headers&#xA;=&amp;gt; {:content_type=&amp;gt;&#34;text/html; charset=utf-8&#34;, :cache_control=&amp;gt;&#34;private&#34; ... }&#xA;&amp;gt;&amp;gt; response.body&#xA;=&amp;gt; &#34;&amp;lt;!doctype html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n    &amp;lt;title&amp;gt;Example Domain&amp;lt;/title&amp;gt;\n\n ...&#34;&#xA;&#xA;RestClient.post( url,&#xA;  {&#xA;    :transfer =&amp;gt; {&#xA;      :path =&amp;gt; &#39;/foo/bar&#39;,&#xA;      :owner =&amp;gt; &#39;that_guy&#39;,&#xA;      :group =&amp;gt; &#39;those_guys&#39;&#xA;    },&#xA;     :upload =&amp;gt; {&#xA;      :file =&amp;gt; File.new(path, &#39;rb&#39;)&#xA;    }&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Passing advanced options&lt;/h2&gt; &#xA;&lt;p&gt;The top level helper methods like RestClient.get accept a headers hash as their last argument and don&#39;t allow passing more complex options. But these helpers are just thin wrappers around &lt;code&gt;RestClient::Request.execute&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient::Request.execute(method: :get, url: &#39;http://example.com/resource&#39;,&#xA;                            timeout: 10)&#xA;&#xA;RestClient::Request.execute(method: :get, url: &#39;http://example.com/resource&#39;,&#xA;                            ssl_ca_file: &#39;myca.pem&#39;,&#xA;                            ssl_ciphers: &#39;AESGCM:!aNULL&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use this to pass a payload for HTTP verbs like DELETE, where the &lt;code&gt;RestClient.delete&lt;/code&gt; helper doesn&#39;t accept a payload.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient::Request.execute(method: :delete, url: &#39;http://example.com/resource&#39;,&#xA;                            payload: &#39;foo&#39;, headers: {myheader: &#39;bar&#39;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Due to unfortunate choices in the original API, the params used to populate the query string are actually taken out of the headers hash. So if you want to pass both the params hash and more complex options, use the special key &lt;code&gt;:params&lt;/code&gt; in the headers hash. This design may change in a future major release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient::Request.execute(method: :get, url: &#39;http://example.com/resource&#39;,&#xA;                            timeout: 10, headers: {params: {foo: &#39;bar&#39;}})&#xA;&#xA;‚ûî GET http://example.com/resource?foo=bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Multipart&lt;/h2&gt; &#xA;&lt;p&gt;Yeah, that&#39;s right! This does multipart sends for you!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient.post &#39;/data&#39;, :myfile =&amp;gt; File.new(&#34;/path/to/image.jpg&#34;, &#39;rb&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This does two things for you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Auto-detects that you have a File value sends it as multipart&lt;/li&gt; &#xA; &lt;li&gt;Auto-detects the mime of the file and sets it in the HEAD of the payload for each entry&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are sending params that do not contain a File object but the payload needs to be multipart then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient.post &#39;/data&#39;, {:foo =&amp;gt; &#39;bar&#39;, :multipart =&amp;gt; true}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage: ActiveResource-Style&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;resource = RestClient::Resource.new &#39;http://example.com/resource&#39;&#xA;resource.get&#xA;&#xA;private_resource = RestClient::Resource.new &#39;https://example.com/private/resource&#39;, &#39;user&#39;, &#39;pass&#39;&#xA;private_resource.put File.read(&#39;pic.jpg&#39;), :content_type =&amp;gt; &#39;image/jpg&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See RestClient::Resource module docs for details.&lt;/p&gt; &#xA;&lt;h2&gt;Usage: Resource Nesting&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;site = RestClient::Resource.new(&#39;http://example.com&#39;)&#xA;site[&#39;posts/1/comments&#39;].post &#39;Good article.&#39;, :content_type =&amp;gt; &#39;text/plain&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;RestClient::Resource&lt;/code&gt; docs for details.&lt;/p&gt; &#xA;&lt;h2&gt;Exceptions (see &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&#34;&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for result codes between &lt;code&gt;200&lt;/code&gt; and &lt;code&gt;207&lt;/code&gt;, a &lt;code&gt;RestClient::Response&lt;/code&gt; will be returned&lt;/li&gt; &#xA; &lt;li&gt;for result codes &lt;code&gt;301&lt;/code&gt;, &lt;code&gt;302&lt;/code&gt; or &lt;code&gt;307&lt;/code&gt;, the redirection will be followed if the request is a &lt;code&gt;GET&lt;/code&gt; or a &lt;code&gt;HEAD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;for result code &lt;code&gt;303&lt;/code&gt;, the redirection will be followed and the request transformed into a &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;for other cases, a &lt;code&gt;RestClient::ExceptionWithResponse&lt;/code&gt; holding the Response will be raised; a specific exception class will be thrown for known error codes&lt;/li&gt; &#xA; &lt;li&gt;call &lt;code&gt;.response&lt;/code&gt; on the exception to get the server&#39;s response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; RestClient.get &#39;http://example.com/nonexistent&#39;&#xA;Exception: RestClient::NotFound: 404 Not Found&#xA;&#xA;&amp;gt;&amp;gt; begin&#xA;     RestClient.get &#39;http://example.com/nonexistent&#39;&#xA;   rescue RestClient::ExceptionWithResponse =&amp;gt; e&#xA;     e.response&#xA;   end&#xA;=&amp;gt; &amp;lt;RestClient::Response 404 &#34;&amp;lt;!doctype h...&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other exceptions&lt;/h3&gt; &#xA;&lt;p&gt;While most exceptions have been collected under &lt;code&gt;RestClient::RequestFailed&lt;/code&gt; aka &lt;code&gt;RestClient::ExceptionWithResponse&lt;/code&gt;, there are a few quirky exceptions that have been kept for backwards compatibility.&lt;/p&gt; &#xA;&lt;p&gt;RestClient will propagate up exceptions like socket errors without modification:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; RestClient.get &#39;http://localhost:12345&#39;&#xA;Exception: Errno::ECONNREFUSED: Connection refused - connect(2) for &#34;localhost&#34; port 12345&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RestClient handles a few specific error cases separately in order to give better error messages. These will hopefully be cleaned up in a future major release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;RestClient::ServerBrokeConnection&lt;/code&gt; is translated from &lt;code&gt;EOFError&lt;/code&gt; to give a better error message.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;RestClient::SSLCertificateNotVerified&lt;/code&gt; is raised when HTTPS validation fails. Other &lt;code&gt;OpenSSL::SSL::SSLError&lt;/code&gt; errors are raised as is.&lt;/p&gt; &#xA;&lt;h3&gt;Redirection&lt;/h3&gt; &#xA;&lt;p&gt;By default, rest-client will follow HTTP 30x redirection requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;New in 2.0:&lt;/strong&gt; &lt;code&gt;RestClient::Response&lt;/code&gt; exposes a &lt;code&gt;#history&lt;/code&gt; method that returns a list of each response received in a redirection chain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; r = RestClient.get(&#39;http://httpbin.org/redirect/2&#39;)&#xA;=&amp;gt; &amp;lt;RestClient::Response 200 &#34;{\n  \&#34;args\&#34;:...&#34;&amp;gt;&#xA;&#xA;# see each response in the redirect chain&#xA;&amp;gt;&amp;gt; r.history&#xA;=&amp;gt; [&amp;lt;RestClient::Response 302 &#34;&amp;lt;!DOCTYPE H...&#34;&amp;gt;, &amp;lt;RestClient::Response 302 &#34;&#34;&amp;gt;]&#xA;&#xA;# see each requested URL&#xA;&amp;gt;&amp;gt; r.request.url&#xA;=&amp;gt; &#34;http://httpbin.org/get&#34;&#xA;&amp;gt;&amp;gt; r.history.map {|x| x.request.url}&#xA;=&amp;gt; [&#34;http://httpbin.org/redirect/2&#34;, &#34;http://httpbin.org/relative-redirect/1&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manually following redirection&lt;/h4&gt; &#xA;&lt;p&gt;To disable automatic redirection, set &lt;code&gt;:max_redirects =&amp;gt; 0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;New in 2.0:&lt;/strong&gt; Prior versions of rest-client would raise &lt;code&gt;RestClient::MaxRedirectsReached&lt;/code&gt;, with no easy way to access the server&#39;s response. In 2.0, rest-client raises the normal &lt;code&gt;RestClient::ExceptionWithResponse&lt;/code&gt; as it would with any other non-HTTP-20x response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; RestClient::Request.execute(method: :get, url: &#39;http://httpbin.org/redirect/1&#39;)&#xA;=&amp;gt; RestClient::Response 200 &#34;{\n  &#34;args&#34;:...&#34;&#xA;&#xA;&amp;gt;&amp;gt; RestClient::Request.execute(method: :get, url: &#39;http://httpbin.org/redirect/1&#39;, max_redirects: 0)&#xA;RestClient::Found: 302 Found&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To manually follow redirection, you can call &lt;code&gt;Response#follow_redirection&lt;/code&gt;. Or you could of course inspect the result and choose custom behavior.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; RestClient::Request.execute(method: :get, url: &#39;http://httpbin.org/redirect/1&#39;, max_redirects: 0)&#xA;RestClient::Found: 302 Found&#xA;&amp;gt;&amp;gt; begin&#xA;       RestClient::Request.execute(method: :get, url: &#39;http://httpbin.org/redirect/1&#39;, max_redirects: 0)&#xA;   rescue RestClient::ExceptionWithResponse =&amp;gt; err&#xA;   end&#xA;&amp;gt;&amp;gt; err&#xA;=&amp;gt; #&amp;lt;RestClient::Found: 302 Found&amp;gt;&#xA;&amp;gt;&amp;gt; err.response&#xA;=&amp;gt; RestClient::Response 302 &#34;&amp;lt;!DOCTYPE H...&#34;&#xA;&amp;gt;&amp;gt; err.response.headers[:location]&#xA;=&amp;gt; &#34;/get&#34;&#xA;&amp;gt;&amp;gt; err.response.follow_redirection&#xA;=&amp;gt; RestClient::Response 200 &#34;{\n  &#34;args&#34;:...&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Result handling&lt;/h2&gt; &#xA;&lt;p&gt;The result of a &lt;code&gt;RestClient::Request&lt;/code&gt; is a &lt;code&gt;RestClient::Response&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;New in 2.0:&lt;/strong&gt; &lt;code&gt;RestClient::Response&lt;/code&gt; objects are now a subclass of &lt;code&gt;String&lt;/code&gt;. Previously, they were a real String object with response functionality mixed in, which was very confusing to work with.&lt;/p&gt; &#xA;&lt;p&gt;Response objects have several useful methods. (See the class rdoc for more details.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Response#code&lt;/code&gt;: The HTTP response code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Response#body&lt;/code&gt;: The response body as a string. (AKA .to_s)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Response#headers&lt;/code&gt;: A hash of HTTP response headers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Response#raw_headers&lt;/code&gt;: A hash of HTTP response headers as unprocessed arrays&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Response#cookies&lt;/code&gt;: A hash of HTTP cookies set by the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Response#cookie_jar&lt;/code&gt;: &lt;em&gt;New in 1.8&lt;/em&gt; An HTTP::CookieJar of cookies&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Response#request&lt;/code&gt;: The RestClient::Request object used to make the request&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Response#history&lt;/code&gt;: &lt;em&gt;New in 2.0&lt;/em&gt; If redirection was followed, a list of prior Response objects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient.get(&#39;http://example.com&#39;)&#xA;‚ûî &amp;lt;RestClient::Response 200 &#34;&amp;lt;!doctype h...&#34;&amp;gt;&#xA;&#xA;begin&#xA; RestClient.get(&#39;http://example.com/notfound&#39;)&#xA;rescue RestClient::ExceptionWithResponse =&amp;gt; err&#xA;  err.response&#xA;end&#xA;‚ûî &amp;lt;RestClient::Response 404 &#34;&amp;lt;!doctype h...&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response callbacks, error handling&lt;/h3&gt; &#xA;&lt;p&gt;A block can be passed to the RestClient method. This block will then be called with the Response. Response.return! can be called to invoke the default response&#39;s behavior.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Don&#39;t raise exceptions but return the response&#xA;&amp;gt;&amp;gt; RestClient.get(&#39;http://example.com/nonexistent&#39;) {|response, request, result| response }&#xA;=&amp;gt; &amp;lt;RestClient::Response 404 &#34;&amp;lt;!doctype h...&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Manage a specific error code&#xA;RestClient.get(&#39;http://example.com/resource&#39;) { |response, request, result, &amp;amp;block|&#xA;  case response.code&#xA;  when 200&#xA;    p &#34;It worked !&#34;&#xA;    response&#xA;  when 423&#xA;    raise SomeCustomExceptionIfYouWant&#xA;  else&#xA;    response.return!(&amp;amp;block)&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But note that it may be more straightforward to use exceptions to handle different HTTP error response cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;begin&#xA;  resp = RestClient.get(&#39;http://example.com/resource&#39;)&#xA;rescue RestClient::Unauthorized, RestClient::Forbidden =&amp;gt; err&#xA;  puts &#39;Access denied&#39;&#xA;  return err.response&#xA;rescue RestClient::ImATeapot =&amp;gt; err&#xA;  puts &#39;The server is a teapot! # RFC 2324&#39;&#xA;  return err.response&#xA;else&#xA;  puts &#39;It worked!&#39;&#xA;  return resp&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For GET and HEAD requests, rest-client automatically follows redirection. For other HTTP verbs, call &lt;code&gt;.follow_redirection&lt;/code&gt; on the response object (works both in block form and in exception form).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Follow redirections for all request types and not only for get and head&#xA;# RFC : &#34;If the 301, 302 or 307 status code is received in response to a request other than GET or HEAD,&#xA;#        the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user,&#xA;#        since this might change the conditions under which the request was issued.&#34;&#xA;&#xA;# block style&#xA;RestClient.post(&#39;http://example.com/redirect&#39;, &#39;body&#39;) { |response, request, result|&#xA;  case response.code&#xA;  when 301, 302, 307&#xA;    response.follow_redirection&#xA;  else&#xA;    response.return!&#xA;  end&#xA;}&#xA;&#xA;# exception style by explicit classes&#xA;begin&#xA;  RestClient.post(&#39;http://example.com/redirect&#39;, &#39;body&#39;)&#xA;rescue RestClient::MovedPermanently,&#xA;       RestClient::Found,&#xA;       RestClient::TemporaryRedirect =&amp;gt; err&#xA;  err.response.follow_redirection&#xA;end&#xA;&#xA;# exception style by response code&#xA;begin&#xA;  RestClient.post(&#39;http://example.com/redirect&#39;, &#39;body&#39;)&#xA;rescue RestClient::ExceptionWithResponse =&amp;gt; err&#xA;  case err.http_code&#xA;  when 301, 302, 307&#xA;    err.response.follow_redirection&#xA;  else&#xA;    raise&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Non-normalized URIs&lt;/h2&gt; &#xA;&lt;p&gt;If you need to normalize URIs, e.g. to work with International Resource Identifiers (IRIs), use the Addressable gem (&lt;a href=&#34;https://github.com/sporkmonger/addressable/&#34;&gt;https://github.com/sporkmonger/addressable/&lt;/a&gt;) in your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  require &#39;addressable/uri&#39;&#xA;  RestClient.get(Addressable::URI.parse(&#34;http://www.Ë©πÂßÜÊñØ.com/&#34;).normalize.to_str)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lower-level access&lt;/h2&gt; &#xA;&lt;p&gt;For cases not covered by the general API, you can use the &lt;code&gt;RestClient::Request&lt;/code&gt; class, which provides a lower-level API.&lt;/p&gt; &#xA;&lt;p&gt;You can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;specify ssl parameters&lt;/li&gt; &#xA; &lt;li&gt;override cookies&lt;/li&gt; &#xA; &lt;li&gt;manually handle the response (e.g. to operate on it as a stream rather than reading it all into memory)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;code&gt;RestClient::Request&lt;/code&gt;&#39;s documentation for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Streaming request payload&lt;/h3&gt; &#xA;&lt;p&gt;RestClient will try to stream any file-like payload rather than reading it into memory. This happens through &lt;code&gt;RestClient::Payload::Streamed&lt;/code&gt;, which is automatically called internally by &lt;code&gt;RestClient::Payload.generate&lt;/code&gt; on anything with a &lt;code&gt;read&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; r = RestClient.put(&#39;http://httpbin.org/put&#39;, File.open(&#39;/tmp/foo.txt&#39;, &#39;r&#39;),&#xA;                      content_type: &#39;text/plain&#39;)&#xA;=&amp;gt; &amp;lt;RestClient::Response 200 &#34;{\n  \&#34;args\&#34;:...&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Multipart requests, RestClient will also stream file handles passed as Hash (or &lt;strong&gt;new in 2.1&lt;/strong&gt; ParamsArray).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; r = RestClient.put(&#39;http://httpbin.org/put&#39;,&#xA;                      {file_a: File.open(&#39;a.txt&#39;, &#39;r&#39;),&#xA;                       file_b: File.open(&#39;b.txt&#39;, &#39;r&#39;)})&#xA;=&amp;gt; &amp;lt;RestClient::Response 200 &#34;{\n  \&#34;args\&#34;:...&#34;&amp;gt;&#xA;&#xA;# received by server as two file uploads with multipart/form-data&#xA;&amp;gt;&amp;gt; JSON.parse(r)[&#39;files&#39;].keys&#xA;=&amp;gt; [&#39;file_a&#39;, &#39;file_b&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Streaming responses&lt;/h3&gt; &#xA;&lt;p&gt;Normally, when you use &lt;code&gt;RestClient.get&lt;/code&gt; or the lower level &lt;code&gt;RestClient::Request.execute method: :get&lt;/code&gt; to retrieve data, the entire response is buffered in memory and returned as the response to the call.&lt;/p&gt; &#xA;&lt;p&gt;However, if you are retrieving a large amount of data, for example a Docker image, an iso, or any other large file, you may want to stream the response directly to disk rather than loading it in memory. If you have a very large file, it may become &lt;em&gt;impossible&lt;/em&gt; to load it into memory.&lt;/p&gt; &#xA;&lt;p&gt;There are two main ways to do this:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;raw_response&lt;/code&gt;, saves into Tempfile&lt;/h4&gt; &#xA;&lt;p&gt;If you pass &lt;code&gt;raw_response: true&lt;/code&gt; to &lt;code&gt;RestClient::Request.execute&lt;/code&gt;, it will save the response body to a temporary file (using &lt;code&gt;Tempfile&lt;/code&gt;) and return a &lt;code&gt;RestClient::RawResponse&lt;/code&gt; object rather than a &lt;code&gt;RestClient::Response&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the tempfile created by &lt;code&gt;Tempfile.new&lt;/code&gt; will be in &lt;code&gt;Dir.tmpdir&lt;/code&gt; (usually &lt;code&gt;/tmp/&lt;/code&gt;), which you can override to store temporary files in a different location. This file will be unlinked when it is dereferenced.&lt;/p&gt; &#xA;&lt;p&gt;If logging is enabled, this will also print download progress. &lt;strong&gt;New in 2.1:&lt;/strong&gt; Customize the interval with &lt;code&gt;:stream_log_percent&lt;/code&gt; (defaults to 10 for printing a message every 10% complete).&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; raw = RestClient::Request.execute(&#xA;           method: :get,&#xA;           url: &#39;http://releases.ubuntu.com/16.04.2/ubuntu-16.04.2-desktop-amd64.iso&#39;,&#xA;           raw_response: true)&#xA;=&amp;gt; &amp;lt;RestClient::RawResponse @code=200, @file=#&amp;lt;Tempfile:/tmp/rest-client.20170522-5346-1pptjm1&amp;gt;, @request=&amp;lt;RestClient::Request @method=&#34;get&#34;, @url=&#34;http://releases.ubuntu.com/16.04.2/ubuntu-16.04.2-desktop-amd64.iso&#34;&amp;gt;&amp;gt;&#xA;&amp;gt;&amp;gt; raw.file.size&#xA;=&amp;gt; 1554186240&#xA;&amp;gt;&amp;gt; raw.file.path&#xA;=&amp;gt; &#34;/tmp/rest-client.20170522-5346-1pptjm1&#34;&#xA;raw.file.path&#xA;=&amp;gt; &#34;/tmp/rest-client.20170522-5346-1pptjm1&#34;&#xA;&#xA;&amp;gt;&amp;gt; require &#39;digest/sha1&#39;&#xA;&amp;gt;&amp;gt; Digest::SHA1.file(raw.file.path).hexdigest&#xA;=&amp;gt; &#34;4375b73e3a1aa305a36320ffd7484682922262b3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;block_response&lt;/code&gt;, receives raw Net::HTTPResponse&lt;/h4&gt; &#xA;&lt;p&gt;If you want to stream the data from the response to a file as it comes, rather than entirely in memory, you can also pass &lt;code&gt;RestClient::Request.execute&lt;/code&gt; a parameter &lt;code&gt;:block_response&lt;/code&gt; to which you pass a block/proc. This block receives the raw unmodified Net::HTTPResponse object from Net::HTTP, which you can use to stream directly to a file as each chunk is received.&lt;/p&gt; &#xA;&lt;p&gt;Note that this bypasses all the usual HTTP status code handling, so you will want to do you own checking for HTTP 20x response codes, redirects, etc.&lt;/p&gt; &#xA;&lt;p&gt;The following is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;File.open(&#39;/some/output/file&#39;, &#39;w&#39;) {|f|&#xA;  block = proc { |response|&#xA;    response.read_body do |chunk|&#xA;      f.write chunk&#xA;    end&#xA;  }&#xA;  RestClient::Request.execute(method: :get,&#xA;                              url: &#39;http://example.com/some/really/big/file.img&#39;,&#xA;                              block_response: block)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shell&lt;/h2&gt; &#xA;&lt;p&gt;The restclient shell command gives an IRB session with RestClient already loaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ restclient&#xA;&amp;gt;&amp;gt; RestClient.get &#39;http://example.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify a URL argument for get/post/put/delete on that resource:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ restclient http://example.com&#xA;&amp;gt;&amp;gt; put &#39;/resource&#39;, &#39;data&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a user and password for authenticated resources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ restclient https://example.com user pass&#xA;&amp;gt;&amp;gt; delete &#39;/private/resource&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create ~/.restclient for named sessions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  sinatra:&#xA;    url: http://localhost:4567&#xA;  rack:&#xA;    url: http://localhost:9292&#xA;  private_site:&#xA;    url: http://example.com&#xA;    username: user&#xA;    password: pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then invoke:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ restclient private_site&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use as a one-off, curl-style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ restclient get http://example.com/resource &amp;gt; output_body&#xA;&#xA;$ restclient put http://example.com/resource &amp;lt; input_body&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;To enable logging globally you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;set RestClient.log with a Ruby Logger&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient.log = STDOUT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;or set an environment variable to avoid modifying the code (in this case you can use a file name, &#34;stdout&#34; or &#34;stderr&#34;):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ RESTCLIENT_LOG=stdout path/to/my/program&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set individual loggers when instantiating a Resource or making an individual request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;resource = RestClient::Resource.new &#39;http://example.com/resource&#39;, log: Logger.new(STDOUT)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient::Request.execute(method: :get, url: &#39;http://example.com/foo&#39;, log: Logger.new(STDERR))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All options produce logs like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient.get &#34;http://some/resource&#34;&#xA;# =&amp;gt; 200 OK | text/html 250 bytes&#xA;RestClient.put &#34;http://some/resource&#34;, &#34;payload&#34;&#xA;# =&amp;gt; 401 Unauthorized | application/xml 340 bytes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that these logs are valid Ruby, so you can paste them into the &lt;code&gt;restclient&lt;/code&gt; shell or a script to replay your sequence of rest calls.&lt;/p&gt; &#xA;&lt;h2&gt;Proxy&lt;/h2&gt; &#xA;&lt;p&gt;All calls to RestClient, including Resources, will use the proxy specified by &lt;code&gt;RestClient.proxy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient.proxy = &#34;http://proxy.example.com/&#34;&#xA;RestClient.get &#34;http://some/resource&#34;&#xA;# =&amp;gt; response from some/resource as proxied through proxy.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Often the proxy URL is set in an environment variable, so you can do this to use whatever proxy the system is configured to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  RestClient.proxy = ENV[&#39;http_proxy&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;New in 2.0:&lt;/strong&gt; Specify a per-request proxy by passing the :proxy option to RestClient::Request. This will override any proxies set by environment variable or by the global &lt;code&gt;RestClient.proxy&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient::Request.execute(method: :get, url: &#39;http://example.com&#39;,&#xA;                            proxy: &#39;http://proxy.example.com&#39;)&#xA;# =&amp;gt; single request proxied through the proxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be used to disable the use of a proxy for a particular request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient.proxy = &#34;http://proxy.example.com/&#34;&#xA;RestClient::Request.execute(method: :get, url: &#39;http://example.com&#39;, proxy: nil)&#xA;# =&amp;gt; single request sent without a proxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Query parameters&lt;/h2&gt; &#xA;&lt;p&gt;Rest-client can render a hash as HTTP query parameters for GET/HEAD/DELETE requests or as HTTP post data in &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; format for POST requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;New in 2.0:&lt;/strong&gt; Even though there is no standard specifying how this should work, rest-client follows a similar convention to the one used by Rack / Rails servers for handling arrays, nested hashes, and null values.&lt;/p&gt; &#xA;&lt;p&gt;The implementation in &lt;a href=&#34;RestClient::Utils.encode_query_string&#34;&gt;./lib/rest-client/utils.rb&lt;/a&gt; closely follows &lt;a href=&#34;http://www.rubydoc.info/gems/rack/Rack/Utils#build_nested_query-class_method&#34;&gt;Rack::Utils.build_nested_query&lt;/a&gt;, but treats empty arrays and hashes as &lt;code&gt;nil&lt;/code&gt;. (Rack drops them entirely, which is confusing behavior.)&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t like this behavior and want more control, just serialize params yourself (e.g. with &lt;code&gt;URI.encode_www_form&lt;/code&gt;) and add the query string to the URL directly for GET parameters or pass the payload as a string for POST requests.&lt;/p&gt; &#xA;&lt;p&gt;Basic GET params:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient.get(&#39;https://httpbin.org/get&#39;, params: {foo: &#39;bar&#39;, baz: &#39;qux&#39;})&#xA;# GET &#34;https://httpbin.org/get?foo=bar&amp;amp;baz=qux&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basic &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; POST params:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; r = RestClient.post(&#39;https://httpbin.org/post&#39;, {foo: &#39;bar&#39;, baz: &#39;qux&#39;})&#xA;# POST &#34;https://httpbin.org/post&#34;, data: &#34;foo=bar&amp;amp;baz=qux&#34;&#xA;=&amp;gt; &amp;lt;RestClient::Response 200 &#34;{\n  \&#34;args\&#34;:...&#34;&amp;gt;&#xA;&amp;gt;&amp;gt; JSON.parse(r.body)&#xA;=&amp;gt; {&#34;args&#34;=&amp;gt;{},&#xA;    &#34;data&#34;=&amp;gt;&#34;&#34;,&#xA;    &#34;files&#34;=&amp;gt;{},&#xA;    &#34;form&#34;=&amp;gt;{&#34;baz&#34;=&amp;gt;&#34;qux&#34;, &#34;foo&#34;=&amp;gt;&#34;bar&#34;},&#xA;    &#34;headers&#34;=&amp;gt;&#xA;    {&#34;Accept&#34;=&amp;gt;&#34;*/*&#34;,&#xA;        &#34;Accept-Encoding&#34;=&amp;gt;&#34;gzip, deflate&#34;,&#xA;        &#34;Content-Length&#34;=&amp;gt;&#34;15&#34;,&#xA;        &#34;Content-Type&#34;=&amp;gt;&#34;application/x-www-form-urlencoded&#34;,&#xA;        &#34;Host&#34;=&amp;gt;&#34;httpbin.org&#34;},&#xA;    &#34;json&#34;=&amp;gt;nil,&#xA;    &#34;url&#34;=&amp;gt;&#34;https://httpbin.org/post&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JSON payload: rest-client does not speak JSON natively, so serialize your payload to a string before passing it to rest-client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; payload = {&#39;name&#39; =&amp;gt; &#39;newrepo&#39;, &#39;description&#39;: &#39;A new repo&#39;}&#xA;&amp;gt;&amp;gt; RestClient.post(&#39;https://api.github.com/user/repos&#39;, payload.to_json, content_type: :json)&#xA;=&amp;gt; &amp;lt;RestClient::Response 201 &#34;{\&#34;id\&#34;:75149...&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Advanced GET params (arrays):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; r = RestClient.get(&#39;https://http-params.herokuapp.com/get&#39;, params: {foo: [1,2,3]})&#xA;# GET &#34;https://http-params.herokuapp.com/get?foo[]=1&amp;amp;foo[]=2&amp;amp;foo[]=3&#34;&#xA;=&amp;gt; &amp;lt;RestClient::Response 200 &#34;Method: GET...&#34;&amp;gt;&#xA;&amp;gt;&amp;gt; puts r.body&#xA;query_string: &#34;foo[]=1&amp;amp;foo[]=2&amp;amp;foo[]=3&#34;&#xA;decoded:      &#34;foo[]=1&amp;amp;foo[]=2&amp;amp;foo[]=3&#34;&#xA;&#xA;GET:&#xA;  {&#34;foo&#34;=&amp;gt;[&#34;1&#34;, &#34;2&#34;, &#34;3&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Advanced GET params (nested hashes):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; r = RestClient.get(&#39;https://http-params.herokuapp.com/get&#39;, params: {outer: {foo: 123, bar: 456}})&#xA;# GET &#34;https://http-params.herokuapp.com/get?outer[foo]=123&amp;amp;outer[bar]=456&#34;&#xA;=&amp;gt; &amp;lt;RestClient::Response 200 &#34;Method: GET...&#34;&amp;gt;&#xA;&amp;gt;&amp;gt; puts r.body&#xA;...&#xA;query_string: &#34;outer[foo]=123&amp;amp;outer[bar]=456&#34;&#xA;decoded:      &#34;outer[foo]=123&amp;amp;outer[bar]=456&#34;&#xA;&#xA;GET:&#xA;  {&#34;outer&#34;=&amp;gt;{&#34;foo&#34;=&amp;gt;&#34;123&#34;, &#34;bar&#34;=&amp;gt;&#34;456&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;New in 2.0:&lt;/strong&gt; The new &lt;code&gt;RestClient::ParamsArray&lt;/code&gt; class allows callers to provide ordering even to structured parameters. This is useful for unusual cases where the server treats the order of parameters as significant or you want to pass a particular key multiple times.&lt;/p&gt; &#xA;&lt;p&gt;Multiple fields with the same name using ParamsArray:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; RestClient.get(&#39;https://httpbin.org/get&#39;, params:&#xA;                  RestClient::ParamsArray.new([[:foo, 1], [:foo, 2]]))&#xA;# GET &#34;https://httpbin.org/get?foo=1&amp;amp;foo=2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nested ParamsArray:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;gt;&amp;gt; RestClient.get(&#39;https://httpbin.org/get&#39;, params:&#xA;                  {foo: RestClient::ParamsArray.new([[:a, 1], [:a, 2]])})&#xA;# GET &#34;https://httpbin.org/get?foo[a]=1&amp;amp;foo[a]=2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Headers&lt;/h2&gt; &#xA;&lt;p&gt;Request headers can be set by passing a ruby hash containing keys and values representing header names and values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# GET request with modified headers&#xA;RestClient.get &#39;http://example.com/resource&#39;, {:Authorization =&amp;gt; &#39;Bearer cT0febFoD5lxAlNAXHo6g&#39;}&#xA;&#xA;# POST request with modified headers&#xA;RestClient.post &#39;http://example.com/resource&#39;, {:foo =&amp;gt; &#39;bar&#39;, :baz =&amp;gt; &#39;qux&#39;}, {:Authorization =&amp;gt; &#39;Bearer cT0febFoD5lxAlNAXHo6g&#39;}&#xA;&#xA;# DELETE request with modified headers&#xA;RestClient.delete &#39;http://example.com/resource&#39;, {:Authorization =&amp;gt; &#39;Bearer cT0febFoD5lxAlNAXHo6g&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Timeouts&lt;/h2&gt; &#xA;&lt;p&gt;By default the timeout for a request is 60 seconds. Timeouts for your request can be adjusted by setting the &lt;code&gt;timeout:&lt;/code&gt; to the number of seconds that you would like the request to wait. Setting &lt;code&gt;timeout:&lt;/code&gt; will override both &lt;code&gt;read_timeout:&lt;/code&gt; and &lt;code&gt;open_timeout:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient::Request.execute(method: :get, url: &#39;http://example.com/resource&#39;,&#xA;                            timeout: 120)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can set &lt;code&gt;read_timeout:&lt;/code&gt; and &lt;code&gt;open_timeout:&lt;/code&gt; separately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient::Request.execute(method: :get, url: &#39;http://example.com/resource&#39;,&#xA;                            read_timeout: 120, open_timeout: 240)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cookies&lt;/h2&gt; &#xA;&lt;p&gt;Request and Response objects know about HTTP cookies, and will automatically extract and set headers for them as needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = RestClient.get &#39;http://example.com/action_which_sets_session_id&#39;&#xA;response.cookies&#xA;# =&amp;gt; {&#34;_applicatioN_session_id&#34; =&amp;gt; &#34;1234&#34;}&#xA;&#xA;response2 = RestClient.post(&#xA;  &#39;http://localhost:3000/&#39;,&#xA;  {:param1 =&amp;gt; &#34;foo&#34;},&#xA;  {:cookies =&amp;gt; {:session_id =&amp;gt; &#34;1234&#34;}}&#xA;)&#xA;# ...response body&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Full cookie jar support (new in 1.8)&lt;/h3&gt; &#xA;&lt;p&gt;The original cookie implementation was very naive and ignored most of the cookie RFC standards. &lt;strong&gt;New in 1.8&lt;/strong&gt;: An HTTP::CookieJar of cookies&lt;/p&gt; &#xA;&lt;p&gt;Response objects now carry a cookie_jar method that exposes an HTTP::CookieJar of cookies, which supports full standards compliant behavior.&lt;/p&gt; &#xA;&lt;h2&gt;SSL/TLS support&lt;/h2&gt; &#xA;&lt;p&gt;Various options are supported for configuring rest-client&#39;s TLS settings. By default, rest-client will verify certificates using the system&#39;s CA store on all platforms. (This is intended to be similar to how browsers behave.) You can specify an :ssl_ca_file, :ssl_ca_path, or :ssl_cert_store to customize the certificate authorities accepted.&lt;/p&gt; &#xA;&lt;h3&gt;SSL Client Certificates&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RestClient::Resource.new(&#xA;  &#39;https://example.com&#39;,&#xA;  :ssl_client_cert  =&amp;gt;  OpenSSL::X509::Certificate.new(File.read(&#34;cert.pem&#34;)),&#xA;  :ssl_client_key   =&amp;gt;  OpenSSL::PKey::RSA.new(File.read(&#34;key.pem&#34;), &#34;passphrase, if any&#34;),&#xA;  :ssl_ca_file      =&amp;gt;  &#34;ca_certificate.pem&#34;,&#xA;  :verify_ssl       =&amp;gt;  OpenSSL::SSL::VERIFY_PEER&#xA;).get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Self-signed certificates can be generated with the openssl command-line tool.&lt;/p&gt; &#xA;&lt;h2&gt;Hook&lt;/h2&gt; &#xA;&lt;p&gt;RestClient.add_before_execution_proc add a Proc to be called before each execution. It&#39;s handy if you need direct access to the HTTP request.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Add oauth support using the oauth gem&#xA;require &#39;oauth&#39;&#xA;access_token = ...&#xA;&#xA;RestClient.add_before_execution_proc do |req, params|&#xA;  access_token.sign! req&#xA;end&#xA;&#xA;RestClient.get &#39;http://example.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;Need caching, more advanced logging or any ability provided by Rack middleware?&lt;/p&gt; &#xA;&lt;p&gt;Have a look at rest-client-components: &lt;a href=&#34;http://github.com/crohr/rest-client-components&#34;&gt;http://github.com/crohr/rest-client-components&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;REST Client Team&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Andy Brody&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Creator&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adam Wiggins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Maintainers Emeriti&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lawrence Leonard Gilbert, Matthew Manning, Julien Kirch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Major contributions&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blake Mizerany, Julien Kirch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A great many generous folks have contributed features and patches. See AUTHORS for the full list.&lt;/p&gt; &#xA;&lt;h2&gt;Legal&lt;/h2&gt; &#xA;&lt;p&gt;Released under the MIT License: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Photo of the International Space Station was produced by NASA and is in the public domain.&lt;/p&gt; &#xA;&lt;p&gt;Code for reading Windows root certificate store derived from work by Puppet; used under terms of the Apache License, Version 2.0.&lt;/p&gt;</summary>
  </entry>
</feed>