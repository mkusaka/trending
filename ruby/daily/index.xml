<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-06T01:32:53Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rack/rack</title>
    <updated>2022-07-06T01:32:53Z</updated>
    <id>tag:github.com,2022-07-06:/rack/rack</id>
    <link href="https://github.com/rack/rack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modular Ruby web server interface.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;= rdoc-image:contrib/logo.webp&lt;/p&gt; &#xA;&lt;p&gt;{&lt;img src=&#34;https://github.com/rack/rack/workflows/Development/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions status&#34;&gt;}[https://github.com/rack/rack/actions?query=workflow%3ADevelopment] {&lt;img src=&#34;https://badge.fury.io/rb/rack.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;}[http://badge.fury.io/rb/rack] {&lt;img src=&#34;http://inch-ci.org/github/rack/rack.svg?branch=master&#34; alt=&#34;Inline docs&#34;&gt;}[http://inch-ci.org/github/rack/rack]&lt;/p&gt; &#xA;&lt;p&gt;\Rack provides a minimal, modular, and adaptable interface for developing web applications in Ruby. By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for web servers, web frameworks, and software in between (the so-called middleware) into a single method call.&lt;/p&gt; &#xA;&lt;p&gt;The exact details of this are described in the {\Rack specification}[rdoc-ref:SPEC.rdoc], which all \Rack applications should conform to.&lt;/p&gt; &#xA;&lt;p&gt;== Supported web servers&lt;/p&gt; &#xA;&lt;p&gt;The included &lt;em&gt;handlers&lt;/em&gt; can connect these web servers to \Rack:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WEBrick[https://github.com/ruby/webrick]&lt;/li&gt; &#xA; &lt;li&gt;CGI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These web servers include \Rack handlers in their distributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agoo[https://github.com/ohler55/agoo]&lt;/li&gt; &#xA; &lt;li&gt;Falcon[https://github.com/socketry/falcon]&lt;/li&gt; &#xA; &lt;li&gt;Iodine[https://github.com/boazsegev/iodine]&lt;/li&gt; &#xA; &lt;li&gt;{NGINX Unit}[https://unit.nginx.org/]&lt;/li&gt; &#xA; &lt;li&gt;{Phusion Passenger}[https://www.phusionpassenger.com/] (which is mod_rack for Apache and for nginx)&lt;/li&gt; &#xA; &lt;li&gt;Puma[https://puma.io/]&lt;/li&gt; &#xA; &lt;li&gt;Thin[https://rubygems.org/gems/thin]&lt;/li&gt; &#xA; &lt;li&gt;Unicorn[https://yhbt.net/unicorn/]&lt;/li&gt; &#xA; &lt;li&gt;uWSGI[https://uwsgi-docs.readthedocs.io/en/latest/]&lt;/li&gt; &#xA; &lt;li&gt;Lamby[https://lamby.custominktech.com] (for AWS Lambda)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any valid \Rack app will run the same on all these handlers, without changing anything.&lt;/p&gt; &#xA;&lt;p&gt;== Supported web frameworks&lt;/p&gt; &#xA;&lt;p&gt;These frameworks and many others support the \Rack API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Camping[http://www.ruby-camping.com/]&lt;/li&gt; &#xA; &lt;li&gt;Coset[http://leahneukirchen.org/repos/coset/]&lt;/li&gt; &#xA; &lt;li&gt;Hanami[https://hanamirb.org/]&lt;/li&gt; &#xA; &lt;li&gt;Padrino[http://padrinorb.com/]&lt;/li&gt; &#xA; &lt;li&gt;Ramaze[http://ramaze.net/]&lt;/li&gt; &#xA; &lt;li&gt;Roda[https://github.com/jeremyevans/roda]&lt;/li&gt; &#xA; &lt;li&gt;{Ruby on Rails}[https://rubyonrails.org/]&lt;/li&gt; &#xA; &lt;li&gt;Rum[https://github.com/leahneukirchen/rum]&lt;/li&gt; &#xA; &lt;li&gt;Sinatra[http://sinatrarb.com/]&lt;/li&gt; &#xA; &lt;li&gt;Utopia[https://github.com/socketry/utopia]&lt;/li&gt; &#xA; &lt;li&gt;WABuR[https://github.com/ohler55/wabur]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Available middleware shipped with \Rack&lt;/p&gt; &#xA;&lt;p&gt;Between the server and the framework, \Rack can be customized to your applications needs using middleware. \Rack itself ships with the following middleware:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rack::Chunked, for streaming responses using chunked encoding.&lt;/li&gt; &#xA; &lt;li&gt;Rack::CommonLogger, for creating Apache-style logfiles.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ConditionalGet, for returning not modified responses when the response has not changed.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Config, for modifying the environment before processing the request.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ContentLength, for setting content-length header based on body size.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ContentType, for setting default content-type header for responses.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Deflater, for compressing responses with gzip.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ETag, for setting ETag header on string bodies.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Events, for providing easy hooks when a request is received and when the response is sent.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Files, for serving static files.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Head, for returning an empty body for HEAD requests.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Lint, for checking conformance to the \Rack API.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Lock, for serializing requests using a mutex.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Logger, for setting a logger to handle logging errors.&lt;/li&gt; &#xA; &lt;li&gt;Rack::MethodOverride, for modifying the request method based on a submitted parameter.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Recursive, for including data from other paths in the application, and for performing internal redirects.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Reloader, for reloading files if they have been modified.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Runtime, for including a response header with the time taken to process the request.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Sendfile, for working with web servers that can use optimized file serving for file system paths.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ShowException, for catching unhandled exceptions and presenting them in a nice and helpful way with clickable backtrace.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ShowStatus, for using nice error pages for empty client error responses.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Static, for more configurable serving of static files.&lt;/li&gt; &#xA; &lt;li&gt;Rack::TempfileReaper, for removing temporary files creating during a request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All these components use the same interface, which is described in detail in the \Rack specification. These optional components can be used in any way you wish.&lt;/p&gt; &#xA;&lt;p&gt;== Convenience&lt;/p&gt; &#xA;&lt;p&gt;If you want to develop outside of existing frameworks, implement your own ones, or develop middleware, \Rack provides many helpers to create \Rack applications quickly and without doing the same web stuff all over:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rack::Request, which also provides query string parsing and multipart handling.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Response, for convenient generation of HTTP replies and cookie handling.&lt;/li&gt; &#xA; &lt;li&gt;Rack::MockRequest and Rack::MockResponse for efficient and quick testing of \Rack application without real HTTP round-trips.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Cascade, for trying additional \Rack applications if an application returns a not found or method not supported response.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Directory, for serving files under a given directory, with directory indexes.&lt;/li&gt; &#xA; &lt;li&gt;Rack::MediaType, for parsing content-type headers.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Mime, for determining content-type based on file extension.&lt;/li&gt; &#xA; &lt;li&gt;Rack::RewindableInput, for making any IO object rewindable, using a temporary file buffer.&lt;/li&gt; &#xA; &lt;li&gt;Rack::URLMap, to route to multiple applications inside the same process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== rack-contrib&lt;/p&gt; &#xA;&lt;p&gt;The plethora of useful middleware created the need for a project that collects fresh \Rack middleware. rack-contrib includes a variety of add-on components for \Rack and it is easy to contribute new modules.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rack/rack-contrib&#34;&gt;https://github.com/rack/rack-contrib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== rackup&lt;/p&gt; &#xA;&lt;p&gt;rackup is a useful tool for running \Rack applications, which uses the Rack::Builder DSL to configure middleware and build up applications easily.&lt;/p&gt; &#xA;&lt;p&gt;rackup automatically figures out the environment it is run in, and runs your application as FastCGI, CGI, or WEBrick---all from the same configuration.&lt;/p&gt; &#xA;&lt;p&gt;== Quick start&lt;/p&gt; &#xA;&lt;p&gt;Try the lobster!&lt;/p&gt; &#xA;&lt;p&gt;Either with the embedded WEBrick starter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ruby -Ilib lib/rack/lobster.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with rackup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/rackup -Ilib example/lobster.ru&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the lobster is found at &lt;a href=&#34;http://localhost:9292&#34;&gt;http://localhost:9292&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;== Installing with RubyGems&lt;/p&gt; &#xA;&lt;p&gt;A Gem of \Rack is available at {rubygems.org}[https://rubygems.org/gems/rack]. You can install it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install rack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;== Usage&lt;/p&gt; &#xA;&lt;p&gt;You should require the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require &#39;rack&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;\Rack uses autoload to automatically load other files \Rack ships with on demand, so you should not need require paths under +rack+. If you require paths under +rack+ without requiring +rack+ itself, things may not work correctly.&lt;/p&gt; &#xA;&lt;p&gt;== Configuration&lt;/p&gt; &#xA;&lt;p&gt;Several parameters can be modified on Rack::Utils to configure \Rack behaviour.&lt;/p&gt; &#xA;&lt;p&gt;e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Rack::Utils.param_depth_limit = 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=== param_depth_limit&lt;/p&gt; &#xA;&lt;p&gt;The maximum amount of nesting allowed in parameters. For example, if set to 3, this query string would be allowed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;?a[b][c]=d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but this query string would not be allowed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;?a[b][c][d]=e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Limiting the depth prevents a possible stack overflow when parsing parameters.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to 32.&lt;/p&gt; &#xA;&lt;p&gt;=== multipart_part_limit&lt;/p&gt; &#xA;&lt;p&gt;The maximum number of parts a request can contain. Accepting too many part can lead to the server running out of file handles.&lt;/p&gt; &#xA;&lt;p&gt;The default is 128, which means that a single request can&#39;t upload more than 128 files at once.&lt;/p&gt; &#xA;&lt;p&gt;Set to 0 for no limit.&lt;/p&gt; &#xA;&lt;p&gt;Can also be set via the +RACK_MULTIPART_PART_LIMIT+ environment variable.&lt;/p&gt; &#xA;&lt;p&gt;=== key_space_limit&lt;/p&gt; &#xA;&lt;p&gt;No longer has an effect, deprecated.&lt;/p&gt; &#xA;&lt;p&gt;== Changelog&lt;/p&gt; &#xA;&lt;p&gt;See {CHANGELOG.md}[https://github.com/rack/rack/blob/master/CHANGELOG.md].&lt;/p&gt; &#xA;&lt;p&gt;== Contributing&lt;/p&gt; &#xA;&lt;p&gt;See {CONTRIBUTING.md}[https://github.com/rack/rack/blob/master/CONTRIBUTING.md].&lt;/p&gt; &#xA;&lt;p&gt;== Contact&lt;/p&gt; &#xA;&lt;p&gt;Please post bugs, suggestions and patches to the bug tracker at {issues}[https://github.com/rack/rack/issues].&lt;/p&gt; &#xA;&lt;p&gt;Please post security related bugs and suggestions to the core team at &lt;a href=&#34;https://groups.google.com/forum/#!forum/rack-core&#34;&gt;https://groups.google.com/forum/#!forum/rack-core&lt;/a&gt; or &lt;a href=&#34;mailto:rack-core@googlegroups.com&#34;&gt;rack-core@googlegroups.com&lt;/a&gt;. This list is not public. Due to wide usage of the library, it is strongly preferred that we manage timing in order to provide viable patches at the time of disclosure. Your assistance in this matter is greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Mailing list archives are available at &lt;a href=&#34;https://groups.google.com/forum/#!forum/rack-devel&#34;&gt;https://groups.google.com/forum/#!forum/rack-devel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Git repository (send Git patches to the mailing list):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rack/rack&#34;&gt;https://github.com/rack/rack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are also welcome to join the #rack channel on irc.freenode.net.&lt;/p&gt; &#xA;&lt;p&gt;== Thanks&lt;/p&gt; &#xA;&lt;p&gt;The \Rack Core Team, consisting of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Aaron Patterson (tenderlove[https://github.com/tenderlove])&lt;/li&gt; &#xA; &lt;li&gt;Samuel Williams (ioquatix[https://github.com/ioquatix])&lt;/li&gt; &#xA; &lt;li&gt;Jeremy Evans (jeremyevans[https://github.com/jeremyevans])&lt;/li&gt; &#xA; &lt;li&gt;Eileen Uchitelle (eileencodes[https://github.com/eileencodes])&lt;/li&gt; &#xA; &lt;li&gt;Matthew Draper (matthewd[https://github.com/matthewd])&lt;/li&gt; &#xA; &lt;li&gt;Rafael França (rafaelfranca[https://github.com/rafaelfranca])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and the \Rack Alumni&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ryan Tomayko (rtomayko[https://github.com/rtomayko])&lt;/li&gt; &#xA; &lt;li&gt;Scytrin dai Kinthra (scytrin[https://github.com/scytrin])&lt;/li&gt; &#xA; &lt;li&gt;Leah Neukirchen (leahneukirchen[https://github.com/leahneukirchen])&lt;/li&gt; &#xA; &lt;li&gt;James Tucker (raggi[https://github.com/raggi])&lt;/li&gt; &#xA; &lt;li&gt;Josh Peek (josh[https://github.com/josh])&lt;/li&gt; &#xA; &lt;li&gt;José Valim (josevalim[https://github.com/josevalim])&lt;/li&gt; &#xA; &lt;li&gt;Michael Fellinger (manveru[https://github.com/manveru])&lt;/li&gt; &#xA; &lt;li&gt;Santiago Pastorino (spastorino[https://github.com/spastorino])&lt;/li&gt; &#xA; &lt;li&gt;Konstantin Haase (rkh[https://github.com/rkh])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;would like to thank:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adrian Madrid, for the LiteSpeed handler.&lt;/li&gt; &#xA; &lt;li&gt;Christoffer Sawicki, for the first Rails adapter and Rack::Deflater.&lt;/li&gt; &#xA; &lt;li&gt;Tim Fletcher, for the HTTP authentication code.&lt;/li&gt; &#xA; &lt;li&gt;Luc Heinrich for the Cookie sessions, the static file handler and bugfixes.&lt;/li&gt; &#xA; &lt;li&gt;Armin Ronacher, for the logo and racktools.&lt;/li&gt; &#xA; &lt;li&gt;Alex Beregszaszi, Alexander Kahn, Anil Wadghule, Aredridel, Ben Alpert, Dan Kubb, Daniel Roethlisberger, Matt Todd, Tom Robinson, Phil Hagelberg, S. Brent Faulkner, Bosko Milekic, Daniel Rodríguez Troitiño, Genki Takiuchi, Geoffrey Grosenbach, Julien Sanchez, Kamal Fariz Mahyuddin, Masayoshi Takahashi, Patrick Aljordm, Mig, Kazuhiro Nishiyama, Jon Bardin, Konstantin Haase, Larry Siden, Matias Korhonen, Sam Ruby, Simon Chiang, Tim Connor, Timur Batyrshin, and Zach Brock for bug fixing and other improvements.&lt;/li&gt; &#xA; &lt;li&gt;Eric Wong, Hongli Lai, Jeremy Kemper for their continuous support and API improvements.&lt;/li&gt; &#xA; &lt;li&gt;Yehuda Katz and Carl Lerche for refactoring rackup.&lt;/li&gt; &#xA; &lt;li&gt;Brian Candler, for Rack::ContentType.&lt;/li&gt; &#xA; &lt;li&gt;Graham Batty, for improved handler loading.&lt;/li&gt; &#xA; &lt;li&gt;Stephen Bannasch, for bug reports and documentation.&lt;/li&gt; &#xA; &lt;li&gt;Gary Wright, for proposing a better Rack::Response interface.&lt;/li&gt; &#xA; &lt;li&gt;Jonathan Buch, for improvements regarding Rack::Response.&lt;/li&gt; &#xA; &lt;li&gt;Armin Röhrl, for tracking down bugs in the Cookie generator.&lt;/li&gt; &#xA; &lt;li&gt;Alexander Kellett for testing the Gem and reviewing the announcement.&lt;/li&gt; &#xA; &lt;li&gt;Marcus Rückert, for help with configuring and debugging lighttpd.&lt;/li&gt; &#xA; &lt;li&gt;The WSGI team for the well-done and documented work they&#39;ve done and \Rack builds up on.&lt;/li&gt; &#xA; &lt;li&gt;All bug reporters and patch contributors not mentioned above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Links&lt;/p&gt; &#xA;&lt;p&gt;\Rack:: &lt;a href=&#34;https://rack.github.io/&#34;&gt;https://rack.github.io/&lt;/a&gt; Official \Rack repositories:: &lt;a href=&#34;https://github.com/rack&#34;&gt;https://github.com/rack&lt;/a&gt; \Rack Bug Tracking:: &lt;a href=&#34;https://github.com/rack/rack/issues&#34;&gt;https://github.com/rack/rack/issues&lt;/a&gt; rack-devel mailing list:: &lt;a href=&#34;https://groups.google.com/forum/#!forum/rack-devel&#34;&gt;https://groups.google.com/forum/#!forum/rack-devel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;== License&lt;/p&gt; &#xA;&lt;p&gt;\Rack is released under the {MIT License}[https://opensource.org/licenses/MIT].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/shopify-api-ruby</title>
    <updated>2022-07-06T01:32:53Z</updated>
    <id>tag:github.com,2022-07-06:/Shopify/shopify-api-ruby</id>
    <link href="https://github.com/Shopify/shopify-api-ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ShopifyAPI is a lightweight gem for accessing the Shopify admin REST and GraphQL web services.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shopify API Library for Ruby&lt;/h1&gt; &#xA;&lt;!-- ![Build Status]() --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/Shopify/shopify_api/workflows/CI/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library provides support for Ruby &lt;a href=&#34;https://apps.shopify.com/&#34;&gt;Shopify apps&lt;/a&gt; to access the &lt;a href=&#34;https://shopify.dev/api/admin&#34;&gt;Shopify Admin API&lt;/a&gt;, by making it easier to perform the following actions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating &lt;a href=&#34;https://shopify.dev/concepts/about-apis/authentication#online-access&#34;&gt;online&lt;/a&gt; or &lt;a href=&#34;https://shopify.dev/concepts/about-apis/authentication#offline-access&#34;&gt;offline&lt;/a&gt; access tokens for the Admin API via OAuth&lt;/li&gt; &#xA; &lt;li&gt;Making requests to the &lt;a href=&#34;https://shopify.dev/api/admin-rest&#34;&gt;REST API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Making requests to the &lt;a href=&#34;https://shopify.dev/api/admin-graphql&#34;&gt;GraphQL API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Registering/processing webhooks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to the Admin API, this library also allows querying the &lt;a href=&#34;https://shopify.dev/docs/storefront-api&#34;&gt;Storefront API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use this library in any application that has a Ruby backend, since it doesn&#39;t rely on any specific framework — you can include it alongside your preferred stack and use the features that you need to build your app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These instructions apply to v10 or later of this package. If you&#39;re running v9 in your app, you can find the documentation &lt;a href=&#34;https://github.com/Shopify/shopify_api/tree/v9&#34;&gt;in this branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To follow these usage guides, you will need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;have a working knowledge of ruby and a web framework such as Rails or Sinatra&lt;/li&gt; &#xA; &lt;li&gt;have a Shopify Partner account and development store&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OR&lt;/em&gt; have a test store where you can create a private app&lt;/li&gt; &#xA; &lt;li&gt;have an app already set up in your test store or partner account&lt;/li&gt; &#xA; &lt;li&gt;use &lt;a href=&#34;https://ngrok.com/download&#34;&gt;ngrok&lt;/a&gt; to create a secure tunnel to your app running on your localhost&lt;/li&gt; &#xA; &lt;li&gt;add the &lt;code&gt;ngrok&lt;/code&gt; URL and the appropriate redirect for your OAuth callback route to your app settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem &#34;shopify_api&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;a href=&#34;https://bundler.io&#34;&gt;bundler&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle add shopify_api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Steps to use the Gem&lt;/h2&gt; &#xA;&lt;h3&gt;Setup Shopify Context&lt;/h3&gt; &#xA;&lt;p&gt;Start by initializing the &lt;code&gt;ShopifyAPI::Context&lt;/code&gt; with the parameters of your app by calling &lt;code&gt;ShopifyAPI::Context.setup&lt;/code&gt; (example below) when your app starts (e.g &lt;code&gt;application.rb&lt;/code&gt; in a Rails app).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ShopifyAPI::Context.setup(&#xA;  api_key: &#34;&amp;lt;api-key&amp;gt;&#34;,&#xA;  api_secret_key: &#34;&amp;lt;api-secret-key&amp;gt;&#34;,&#xA;  host_name: &#34;&amp;lt;application-host-name&amp;gt;&#34;,&#xA;  scope: &#34;read_orders,read_products,etc&#34;,&#xA;  session_storage: ShopifyAPI::Auth::FileSessionStorage.new, # See more details below&#xA;  is_embedded: true, # Set to true if you are building an embedded app&#xA;  is_private: false, # Set to true if you are building a private app&#xA;  api_version: &#34;2022-01&#34; # The version of the API you would like to use&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup a Session Store&lt;/h3&gt; &#xA;&lt;p&gt;In order for the Shopify API gem to properly store sessions it needs an implementation of &lt;code&gt;ShopifyAPI::Auth::SessionStorage&lt;/code&gt;. We provide one implementation in the gem, &lt;code&gt;ShopifyAPI::Auth::FileSessionStorage&lt;/code&gt;, which is suitable for testing/development, but isn&#39;t intended for production apps. See the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/session_storage.md&#34;&gt;Session Storage doc&lt;/a&gt; for instructions on how to create a custom session store for a production application.&lt;/p&gt; &#xA;&lt;p&gt;Session information would is typically stored in cookies on the browser. However, due to restrictions with modern browsers we highly discourage using cookies for embedded apps. For this reason, an app needs to define a storage implementation that the library can use to store and retrieve a session given its ID. In a non-embedded app this ID will come from a cookie, whereas in an embedded app this ID will come from &lt;a href=&#34;https://shopify.dev/apps/tools/app-bridge&#34;&gt;App Bridge&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Performing OAuth&lt;/h3&gt; &#xA;&lt;p&gt;Next, unless you are making a private app, you need to go through OAuth as described &lt;a href=&#34;https://shopify.dev/apps/auth/oauth&#34;&gt;here&lt;/a&gt; to create sessions for shops using your app. The Shopify API gem tries to make this easy by providing functions to begin and complete the OAuth process. See the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/oauth.md&#34;&gt;Oauth doc&lt;/a&gt; for instructions on how to use these.&lt;/p&gt; &#xA;&lt;h3&gt;Register Webhooks and a Webhook Handler&lt;/h3&gt; &#xA;&lt;p&gt;If you intend to use webhooks in your application follow the steps in the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/webhooks.md&#34;&gt;Webhooks doc&lt;/a&gt; for instructions on registering and handling webhooks.&lt;/p&gt; &#xA;&lt;h3&gt;Start Making Authenticated Shopify Requests&lt;/h3&gt; &#xA;&lt;p&gt;Once your app can perform OAuth, it can now make authenticated Shopify API calls using the Admin &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/rest.md&#34;&gt;REST&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/graphql.md&#34;&gt;GraphQL&lt;/a&gt; Clients, or the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/graphql_storefront.md&#34;&gt;Storefront API GraphQL Client&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Breaking Change Notices&lt;/h2&gt; &#xA;&lt;h3&gt;Breaking change notice for version 10.0.0&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve rewritten this library for v10, so that it provides all essential features for a Shopify app without requiring any other packages.&lt;/p&gt; &#xA;&lt;p&gt;Here are the main features it provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OAuth support, both with online and offline tokens.&lt;/li&gt; &#xA; &lt;li&gt;Full, transparent support for JWT sessions for embedded apps and cookies for non-embedded ones. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Removal of support for 3rd party cookies which are increasingly more difficult to use with modern browsers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Admin API support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto-generated, version-specific REST resources which are similar to &lt;code&gt;ActiveResource&lt;/code&gt; (though not identical), that provide methods for all endpoints defined in our &lt;a href=&#34;https://shopify.dev/api/admin-rest&#34;&gt;REST API reference&lt;/a&gt;, as well as direct definition of known attributes.&lt;/li&gt; &#xA;   &lt;li&gt;A GraphQL client that doesn&#39;t rely on the ActiveResource implementation for REST.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Webhook management, with features for adding handlers and registering them with Shopify.&lt;/li&gt; &#xA; &lt;li&gt;Storefront GraphQL API support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/Shopify/shopify_api/raw/main/docs/getting_started.md&#34;&gt;the documentation&lt;/a&gt; in this repository for instructions on how to use each of these components.&lt;/p&gt; &#xA;&lt;p&gt;With this, a lot changed in how apps access the library. Here are the updates you should make when migrating to v10:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;ShopifyAPI::Context.setup&lt;/code&gt; when setting up your app. This class holds global configurations for your app and defines how the library behaves.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If not using the &lt;code&gt;shopify_app&lt;/code&gt; gem, your app needs to provide an implementation of &lt;code&gt;ShopifyAPI::Auth::SessionStorage&lt;/code&gt; for production. Read more about this &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/session_storage.md&#34;&gt;in our documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To change the &lt;code&gt;User-Agent&lt;/code&gt; header, use &lt;code&gt;user_agent_prefix&lt;/code&gt; in &lt;code&gt;ShopifyAPI::Context.setup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Usages of the &lt;code&gt;ActiveResource&lt;/code&gt; classes for REST API requests need to be refactored into the new format. You can find detailed examples on how each of the endpoints work in our &lt;a href=&#34;https://shopify.dev/api/admin-rest&#34;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Please see below a (non-exhaustive) list of common replacements to guide you in your updates, using the &lt;code&gt;Order&lt;/code&gt; resource as an example.&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Before&lt;/th&gt; &#xA;     &lt;th&gt;After&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;Order.find(:all, params: {param1: value1})&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;Order.all(param1: value1, session:)&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;Order.find(&amp;lt;id&amp;gt;)&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;Order.find(id: &amp;lt;id&amp;gt;, session:)&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;order = Order.new(&amp;lt;id&amp;gt;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;order.post(:close)&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;order = Order.new(session:)&lt;/code&gt;&lt;br&gt;&lt;code&gt;order.close()&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;order = Order.new(&amp;lt;id&amp;gt;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;order.delete&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;Order.delete(id: &amp;lt;id&amp;gt;, session:)&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Breaking changes for older versions&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/BREAKING_CHANGES_FOR_OLDER_VERSIONS.md&#34;&gt;BREAKING_CHANGES_FOR_OLDER_VERSIONS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developing this gem&lt;/h2&gt; &#xA;&lt;p&gt;After cloning the repository, you can install the dependencies with bundler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the automated tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://rubocop.org&#34;&gt;rubocop&lt;/a&gt; to lint/format the code. You can run it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rubocop&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Homebrew/homebrew-cask-fonts</title>
    <updated>2022-07-06T01:32:53Z</updated>
    <id>tag:github.com,2022-07-06:/Homebrew/homebrew-cask-fonts</id>
    <link href="https://github.com/Homebrew/homebrew-cask-fonts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🖋 Casks of Ｆ🅾𝓝𝐓𝚂&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;homebrew-cask-fonts&lt;/h1&gt; &#xA;&lt;p&gt;Here is where you can find or submit font Casks for the &lt;a href=&#34;https://github.com/Homebrew/homebrew-cask&#34;&gt;Homebrew Cask&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;Let’s try it!&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew tap homebrew/cask-fonts         # You only need to do this once!&#xA;$ brew install font-inconsolata&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Submitting a Cask to this repository&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Homebrew/homebrew-cask-fonts/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Font Licenses&lt;/h2&gt; &#xA;&lt;p&gt;homebrew-cask-fonts will only accept fonts which are freely-distributable. However, even freely-distributable fonts may have limitations (for instance, if you use them in a commercial enterprise). It is the responsibility of the user to know and respect the license of each font.&lt;/p&gt; &#xA;&lt;h2&gt;Installation behind a proxy&lt;/h2&gt; &#xA;&lt;p&gt;Some font Casks use &lt;a href=&#34;https://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;, which requires &lt;a href=&#34;https://subversion.apache.org/faq.html#proxy&#34;&gt;configuration when behind a proxy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;homebrew-cask-fonts License&lt;/h2&gt; &#xA;&lt;p&gt;Code is under the &lt;a href=&#34;https://github.com/Homebrew/homebrew-cask-fonts/raw/master/LICENSE&#34;&gt;BSD 2 Clause (NetBSD) license&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>