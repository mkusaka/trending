<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-07T01:37:17Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Arachni/arachni</title>
    <updated>2022-09-07T01:37:17Z</updated>
    <id>tag:github.com,2022-09-07:/Arachni/arachni</id>
    <link href="https://github.com/Arachni/arachni" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web Application Security Scanner Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Notice&lt;/h1&gt; &#xA;&lt;p&gt;Arachni is heading towards obsolescence, try out its next-gen successor &lt;a href=&#34;https://www.ecsypno.com/&#34;&gt;Ecsypno&lt;/a&gt; &lt;a href=&#34;https://ecsypno.com/scnr-documentation/&#34;&gt;SCNR&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Arachni - Web Application Security Scanner Framework&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;td&gt;1.6.1.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Homepage&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.arachni-scanner.com&#34;&gt;http://arachni-scanner.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Blog&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.arachni-scanner.com/blog&#34;&gt;http://arachni-scanner.com/blog&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Github&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Arachni/arachni&#34;&gt;http://github.com/Arachni/arachni&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Documentation&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki&#34;&gt;https://github.com/Arachni/arachni/wiki&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Code Documentation&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://rubydoc.info/github/Arachni/arachni&#34;&gt;http://rubydoc.info/github/Arachni/arachni&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Support&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://support.arachni-scanner.com&#34;&gt;http://support.arachni-scanner.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Author&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:tasos.laskos@arachni-scanner.com&#34;&gt;Tasos Laskos&lt;/a&gt; (&lt;a href=&#34;http://twitter.com/Zap0tek&#34;&gt;@Zap0tek&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Twitter&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://twitter.com/ArachniScanner&#34;&gt;@ArachniScanner&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Copyright&lt;/th&gt; &#xA;   &lt;td&gt;2010-2022 &lt;a href=&#34;http://www.ecsypno.com&#34;&gt;Ecsypno&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;   &lt;td&gt;Arachni Public Source License v1.0 - (see LICENSE file)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.arachni-scanner.com/large-logo.png&#34; alt=&#34;Arachni logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Synopsis&lt;/h2&gt; &#xA;&lt;p&gt;Arachni is a feature-full, modular, high-performance Ruby framework aimed towards helping penetration testers and administrators evaluate the security of web applications.&lt;/p&gt; &#xA;&lt;p&gt;It is smart, it trains itself by monitoring and learning from the web application&#39;s behavior during the scan process and is able to perform meta-analysis using a number of factors in order to correctly assess the trustworthiness of results and intelligently identify (or avoid) false-positives.&lt;/p&gt; &#xA;&lt;p&gt;Unlike other scanners, it takes into account the dynamic nature of web applications, can detect changes caused while travelling through the paths of a web application’s cyclomatic complexity and is able to adjust itself accordingly. This way, attack/input vectors that would otherwise be undetectable by non-humans can be handled seamlessly.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, due to its integrated browser environment, it can also audit and inspect client-side code, as well as support highly complicated web applications which make heavy use of technologies such as JavaScript, HTML5, DOM manipulation and AJAX.&lt;/p&gt; &#xA;&lt;p&gt;Finally, it is versatile enough to cover a great deal of use cases, ranging from a simple command line scanner utility, to a global high performance grid of scanners, to a Ruby library allowing for scripted audits, to a multi-user multi-scan web collaboration platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Despite the fact that Arachni is mostly targeted towards web application security, it can easily be used for general purpose scraping, data-mining, etc. with the addition of custom components.&lt;/p&gt; &#xA;&lt;h3&gt;Arachni offers:&lt;/h3&gt; &#xA;&lt;h4&gt;A stable, efficient, high-performance framework&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Check&lt;/code&gt;, &lt;code&gt;report&lt;/code&gt; and &lt;code&gt;plugin&lt;/code&gt; developers are allowed to easily and quickly create and deploy their components with the minimum amount of restrictions imposed upon them, while provided with the necessary infrastructure to accomplish their goals.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, they are encouraged to take full advantage of the Ruby language under a unified framework that will increase their productivity without stifling them or complicating their tasks.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, that same framework can be utilized as any other Ruby library and lead to the development of brand new scanners or help you create highly customized scan/audit scenarios and/or scripted scans.&lt;/p&gt; &#xA;&lt;h4&gt;Simplicity&lt;/h4&gt; &#xA;&lt;p&gt;Although some parts of the Framework are fairly complex you will never have to deal them directly. From a user’s or a component developer’s point of view everything appears simple and straight-forward all the while providing power, performance and flexibility.&lt;/p&gt; &#xA;&lt;p&gt;From the simple command-line utility scanner to the intuitive and user-friendly Web interface and collaboration platform, Arachni follows the principle of least surprise and provides you with plenty of feedback and guidance.&lt;/p&gt; &#xA;&lt;h4&gt;In simple terms&lt;/h4&gt; &#xA;&lt;p&gt;Arachni is designed to automatically detect security issues in web applications. All it expects is the URL of the target website and after a while it will present you with its findings.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cookie-jar/cookie-string support.&lt;/li&gt; &#xA; &lt;li&gt;Custom header support.&lt;/li&gt; &#xA; &lt;li&gt;SSL support with fine-grained options.&lt;/li&gt; &#xA; &lt;li&gt;User Agent spoofing.&lt;/li&gt; &#xA; &lt;li&gt;Proxy support for SOCKS4, SOCKS4A, SOCKS5, HTTP/1.1 and HTTP/1.0.&lt;/li&gt; &#xA; &lt;li&gt;Proxy authentication.&lt;/li&gt; &#xA; &lt;li&gt;Site authentication (SSL-based, form-based, Cookie-Jar, Basic-Digest, NTLMv1, Kerberos and others).&lt;/li&gt; &#xA; &lt;li&gt;Automatic log-out detection and re-login during the scan (when the initial login was performed via the &lt;code&gt;autologin&lt;/code&gt;, &lt;code&gt;login_script&lt;/code&gt; or &lt;code&gt;proxy&lt;/code&gt; plugins).&lt;/li&gt; &#xA; &lt;li&gt;Custom 404 page detection.&lt;/li&gt; &#xA; &lt;li&gt;UI abstraction: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki/Executables&#34;&gt;Command-line Interface&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Arachni/arachni-ui-web&#34;&gt;Web User Interface&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pause/resume functionality.&lt;/li&gt; &#xA; &lt;li&gt;Hibernation support -- Suspend to and restore from disk.&lt;/li&gt; &#xA; &lt;li&gt;High performance asynchronous HTTP requests. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With adjustable concurrency.&lt;/li&gt; &#xA;   &lt;li&gt;With the ability to auto-detect server health and adjust its concurrency automatically.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support for custom default input values, using pairs of patterns (to be matched against input names) and values to be used to fill in matching inputs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integrated browser environment&lt;/h3&gt; &#xA;&lt;p&gt;Arachni includes an integrated, real browser environment in order to provide sufficient coverage to modern web applications which make use of technologies such as HTML5, JavaScript, DOM manipulation, AJAX, etc.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the monitoring of the vanilla DOM and JavaScript environments, Arachni&#39;s browsers also hook into popular frameworks to make the logged data easier to digest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://jquery.com/&#34;&gt;JQuery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;More to come...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In essence, this turns Arachni into a DOM and JavaScript debugger, allowing it to monitor DOM events and JavaScript data and execution flows. As a result, not only can the system trigger and identify DOM-based issues, but it will accompany them with a great deal of information regarding the state of the page at the time.&lt;/p&gt; &#xA;&lt;p&gt;Relevant information include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Page DOM, as HTML code. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With a list of DOM transitions required to restore the state of the page to the one at the time it was logged.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Original DOM (i.e. prior to the action that caused the page to be logged), as HTML code. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With a list of DOM transitions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data-flow sinks -- Each sink is a JS method which received a tainted argument. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parent object of the method (ex.: &lt;code&gt;DOMWindow&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Method signature (ex.: &lt;code&gt;decodeURIComponent()&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Arguments list. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;With the identified taint located recursively in the included objects.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Method source code.&lt;/li&gt; &#xA;   &lt;li&gt;JS stacktrace.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Execution flow sinks -- Each sink is a successfully executed JS payload, as injected by the security checks. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Includes a JS stacktrace.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JavaScript stack-traces include: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Method names.&lt;/li&gt; &#xA;   &lt;li&gt;Method locations.&lt;/li&gt; &#xA;   &lt;li&gt;Method source codes.&lt;/li&gt; &#xA;   &lt;li&gt;Argument lists.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In essence, you have access to roughly the same information that your favorite debugger (for example, FireBug) would provide, as if you had set a breakpoint to take place at the right time for identifying an issue.&lt;/p&gt; &#xA;&lt;h4&gt;Browser-cluster&lt;/h4&gt; &#xA;&lt;p&gt;The browser-cluster is what coordinates the browser analysis of resources and allows the system to perform operations which would normally be quite time consuming in a high-performance fashion.&lt;/p&gt; &#xA;&lt;p&gt;Configuration options include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adjustable pool-size, i.e. the amount of browser workers to utilize.&lt;/li&gt; &#xA; &lt;li&gt;Timeout for each job.&lt;/li&gt; &#xA; &lt;li&gt;Worker TTL counted in jobs -- Workers which exceed the TTL have their browser process respawned.&lt;/li&gt; &#xA; &lt;li&gt;Ability to disable loading images.&lt;/li&gt; &#xA; &lt;li&gt;Adjustable screen width and height. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can be used to analyze responsive and mobile applications.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ability to wait until certain elements appear in the page.&lt;/li&gt; &#xA; &lt;li&gt;Configurable local storage data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Coverage&lt;/h3&gt; &#xA;&lt;p&gt;The system can provide great coverage to modern web applications due to its integrated browser environment. This allows it to interact with complex applications that make heavy use of client-side code (like JavaScript) just like a human would.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that, it also knows about which browser state changes the application has been programmed to handle and is able to trigger them programatically in order to provide coverage for a full set of possible scenarios.&lt;/p&gt; &#xA;&lt;p&gt;By inspecting all possible pages and their states (when using client-side code) Arachni is able to extract and audit the following elements and their inputs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forms &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Along with ones that require interaction via a real browser due to DOM events.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;User-interface Forms &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Input and button groups which don&#39;t belong to an HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element but are instead associated via JS code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;User-interface Inputs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Orphan &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements with associated DOM events.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Links &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Along with ones that have client-side parameters in their fragment, i.e.: &lt;code&gt;http://example.com/#/?param=val&amp;amp;param2=val2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;With support for rewrite rules.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;LinkTemplates -- Allowing for extraction of arbitrary inputs from generic paths, based on user-supplied templates -- useful when rewrite rules are not available. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Along with ones that have client-side parameters in their URL fragments, i.e.: &lt;code&gt;http://example.com/#/param/val/param2/val2&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cookies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Also supports nested cookies, containing key-value pairs inside individual cookies.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Headers&lt;/li&gt; &#xA; &lt;li&gt;Generic client-side elements which have associated DOM events.&lt;/li&gt; &#xA; &lt;li&gt;AJAX-request parameters.&lt;/li&gt; &#xA; &lt;li&gt;JSON request data.&lt;/li&gt; &#xA; &lt;li&gt;XML request data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Open &lt;a href=&#34;https://github.com/Arachni/arachni/wiki/Distributed-components&#34;&gt;distributed architecture&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Arachni is designed to fit into your workflow and easily integrate with your existing infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the level of control you require over the process, you can either choose the REST service or the custom RPC protocol.&lt;/p&gt; &#xA;&lt;p&gt;Both approaches allow you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remotely monitor and manage scans.&lt;/li&gt; &#xA; &lt;li&gt;Perform multiple scans at the same time -- Each scan is compartmentalized to its own OS process to take advantage of: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multi-core/SMP architectures.&lt;/li&gt; &#xA;   &lt;li&gt;OS-level scheduling/restrictions.&lt;/li&gt; &#xA;   &lt;li&gt;Sandboxed failure propagation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Communicate over a secure channel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki/REST-API&#34;&gt;REST API&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very simple and straightforward API.&lt;/li&gt; &#xA; &lt;li&gt;Easy interoperability with non-Ruby systems. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Operates over HTTP.&lt;/li&gt; &#xA;   &lt;li&gt;Uses JSON to format messages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Stateful scan monitoring. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unique sessions automatically only receive updates when polling for progress, rather than full data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki/RPC-API&#34;&gt;RPC API&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;High-performance/low-bandwidth &lt;a href=&#34;https://github.com/Arachni/arachni-rpc&#34;&gt;communication protocol&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;MessagePack&lt;/code&gt; serialization for performance, efficiency and ease of integration with 3rd party systems.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Grid: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Self-healing.&lt;/li&gt; &#xA;   &lt;li&gt;Scale up/down by hot-plugging/hot-unplugging nodes. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can scale up infinitely by adding nodes to increase scan capacity.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;(Always-on)&lt;/em&gt; Load-balancing -- All Instances are automatically provided by the least burdened Grid member. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;With optional per-scan opt-out/override.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;(Optional)&lt;/em&gt; High-Performance mode -- Combines the resources of multiple nodes to perform multi-Instance scans. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Enabled on a per-scan basis.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Scope configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filters for redundant pages like galleries, catalogs, etc. based on regular expressions and counters. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can optionally detect and ignore redundant pages automatically.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;URL exclusion filters using regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;Page exclusion filters based on content, using regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;URL inclusion filters using regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;Can be forced to only follow HTTPS paths and not downgrade to HTTP.&lt;/li&gt; &#xA; &lt;li&gt;Can optionally follow subdomains.&lt;/li&gt; &#xA; &lt;li&gt;Adjustable page count limit.&lt;/li&gt; &#xA; &lt;li&gt;Adjustable redirect limit.&lt;/li&gt; &#xA; &lt;li&gt;Adjustable directory depth limit.&lt;/li&gt; &#xA; &lt;li&gt;Adjustable DOM depth limit.&lt;/li&gt; &#xA; &lt;li&gt;Adjustment using URL-rewrite rules.&lt;/li&gt; &#xA; &lt;li&gt;Can read paths from multiple user supplied files (to both restrict and extend the scope).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Audit&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can audit: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Forms &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can automatically refresh nonce tokens.&lt;/li&gt; &#xA;     &lt;li&gt;Can submit them via the integrated browser environment.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;User-interface Forms &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Input and button groups which don&#39;t belong to an HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element but are instead associated via JS code.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;User-interface Inputs &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Orphan &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements with associated DOM events.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Links &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can load them via the integrated browser environment.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;LinkTemplates &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can load them via the integrated browser environment.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Cookies &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can load them via the integrated browser environment.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Headers&lt;/li&gt; &#xA;   &lt;li&gt;Generic client-side DOM elements.&lt;/li&gt; &#xA;   &lt;li&gt;JSON request data.&lt;/li&gt; &#xA;   &lt;li&gt;XML request data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Can ignore binary/non-text pages.&lt;/li&gt; &#xA; &lt;li&gt;Can audit elements using both &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; HTTP methods.&lt;/li&gt; &#xA; &lt;li&gt;Can inject both raw and HTTP encoded payloads.&lt;/li&gt; &#xA; &lt;li&gt;Can submit all links and forms of the page along with the cookie permutations to provide extensive cookie-audit coverage.&lt;/li&gt; &#xA; &lt;li&gt;Can exclude specific input vectors by name.&lt;/li&gt; &#xA; &lt;li&gt;Can include specific input vectors by name.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;p&gt;Arachni is a highly modular system, employing several components of distinct types to perform its duties.&lt;/p&gt; &#xA;&lt;p&gt;In addition to enabling or disabling the bundled components so as to adjust the system&#39;s behavior and features as needed, functionality can be extended via the addition of user-created components to suit almost every need.&lt;/p&gt; &#xA;&lt;h4&gt;Platform fingerprinters&lt;/h4&gt; &#xA;&lt;p&gt;In order to make efficient use of the available bandwidth, Arachni performs rudimentary platform fingerprinting and tailors the audit process to the server-side deployed technologies by only using applicable payloads.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the following platforms can be identified:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operating systems &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;BSD&lt;/li&gt; &#xA;   &lt;li&gt;Linux&lt;/li&gt; &#xA;   &lt;li&gt;Unix&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;   &lt;li&gt;Solaris&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Web servers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Apache&lt;/li&gt; &#xA;   &lt;li&gt;IIS&lt;/li&gt; &#xA;   &lt;li&gt;Nginx&lt;/li&gt; &#xA;   &lt;li&gt;Tomcat&lt;/li&gt; &#xA;   &lt;li&gt;Jetty&lt;/li&gt; &#xA;   &lt;li&gt;Gunicorn&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Programming languages &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PHP&lt;/li&gt; &#xA;   &lt;li&gt;ASP&lt;/li&gt; &#xA;   &lt;li&gt;ASPX&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;   &lt;li&gt;Python&lt;/li&gt; &#xA;   &lt;li&gt;Ruby&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Frameworks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rack&lt;/li&gt; &#xA;   &lt;li&gt;CakePHP&lt;/li&gt; &#xA;   &lt;li&gt;Rails&lt;/li&gt; &#xA;   &lt;li&gt;Django&lt;/li&gt; &#xA;   &lt;li&gt;ASP.NET MVC&lt;/li&gt; &#xA;   &lt;li&gt;JSF&lt;/li&gt; &#xA;   &lt;li&gt;CherryPy&lt;/li&gt; &#xA;   &lt;li&gt;Nette&lt;/li&gt; &#xA;   &lt;li&gt;Symfony&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The user also has the option of specifying extra platforms (like a DB server) in order to help the system be as efficient as possible. Alternatively, fingerprinting can be disabled altogether.&lt;/p&gt; &#xA;&lt;p&gt;Finally, Arachni will always err on the side of caution and send all available payloads when it fails to identify specific platforms.&lt;/p&gt; &#xA;&lt;h4&gt;Checks&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Checks&lt;/em&gt; are system components which perform security checks and log issues.&lt;/p&gt; &#xA;&lt;h5&gt;Active&lt;/h5&gt; &#xA;&lt;p&gt;Active checks engage the web application via its inputs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SQL injection (&lt;code&gt;sql_injection&lt;/code&gt;) -- Error based detection. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Oracle&lt;/li&gt; &#xA;   &lt;li&gt;InterBase&lt;/li&gt; &#xA;   &lt;li&gt;PostgreSQL&lt;/li&gt; &#xA;   &lt;li&gt;MySQL&lt;/li&gt; &#xA;   &lt;li&gt;MSSQL&lt;/li&gt; &#xA;   &lt;li&gt;EMC&lt;/li&gt; &#xA;   &lt;li&gt;SQLite&lt;/li&gt; &#xA;   &lt;li&gt;DB2&lt;/li&gt; &#xA;   &lt;li&gt;Informix&lt;/li&gt; &#xA;   &lt;li&gt;Firebird&lt;/li&gt; &#xA;   &lt;li&gt;SaP Max DB&lt;/li&gt; &#xA;   &lt;li&gt;Sybase&lt;/li&gt; &#xA;   &lt;li&gt;Frontbase&lt;/li&gt; &#xA;   &lt;li&gt;Ingres&lt;/li&gt; &#xA;   &lt;li&gt;HSQLDB&lt;/li&gt; &#xA;   &lt;li&gt;MS Access&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blind SQL injection using differential analysis (&lt;code&gt;sql_injection_differential&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Blind SQL injection using timing attacks (&lt;code&gt;sql_injection_timing&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MySQL&lt;/li&gt; &#xA;   &lt;li&gt;PostgreSQL&lt;/li&gt; &#xA;   &lt;li&gt;MSSQL&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;NoSQL injection (&lt;code&gt;no_sql_injection&lt;/code&gt;) -- Error based vulnerability detection. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MongoDB&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blind NoSQL injection using differential analysis (&lt;code&gt;no_sql_injection_differential&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;CSRF detection (&lt;code&gt;csrf&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Code injection (&lt;code&gt;code_injection&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PHP&lt;/li&gt; &#xA;   &lt;li&gt;Ruby&lt;/li&gt; &#xA;   &lt;li&gt;Python&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;   &lt;li&gt;ASP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blind code injection using timing attacks (&lt;code&gt;code_injection_timing&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PHP&lt;/li&gt; &#xA;   &lt;li&gt;Ruby&lt;/li&gt; &#xA;   &lt;li&gt;Python&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;   &lt;li&gt;ASP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;LDAP injection (&lt;code&gt;ldap_injection&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Path traversal (&lt;code&gt;path_traversal&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;*nix&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;File inclusion (&lt;code&gt;file_inclusion&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;*nix&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;   &lt;li&gt;PHP&lt;/li&gt; &#xA;   &lt;li&gt;Perl&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Response splitting (&lt;code&gt;response_splitting&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;OS command injection (&lt;code&gt;os_cmd_injection&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;*nix&lt;/li&gt; &#xA;   &lt;li&gt;*BSD&lt;/li&gt; &#xA;   &lt;li&gt;IBM AIX&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blind OS command injection using timing attacks (&lt;code&gt;os_cmd_injection_timing&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux&lt;/li&gt; &#xA;   &lt;li&gt;*BSD&lt;/li&gt; &#xA;   &lt;li&gt;Solaris&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Remote file inclusion (&lt;code&gt;rfi&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Unvalidated redirects (&lt;code&gt;unvalidated_redirect&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Unvalidated DOM redirects (&lt;code&gt;unvalidated_redirect_dom&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;XPath injection (&lt;code&gt;xpath_injection&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generic&lt;/li&gt; &#xA;   &lt;li&gt;PHP&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;   &lt;li&gt;dotNET&lt;/li&gt; &#xA;   &lt;li&gt;libXML2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;XSS (&lt;code&gt;xss&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Path XSS (&lt;code&gt;xss_path&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;XSS in event attributes of HTML elements (&lt;code&gt;xss_event&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;XSS in HTML tags (&lt;code&gt;xss_tag&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;XSS in script context (&lt;code&gt;xss_script_context&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;DOM XSS (&lt;code&gt;xss_dom&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;DOM XSS script context (&lt;code&gt;xss_dom_script_context&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Source code disclosure (&lt;code&gt;source_code_disclosure&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;XML External Entity (&lt;code&gt;xxe&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux&lt;/li&gt; &#xA;   &lt;li&gt;*BSD&lt;/li&gt; &#xA;   &lt;li&gt;Solaris&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Passive&lt;/h5&gt; &#xA;&lt;p&gt;Passive checks look for the existence of files, folders and signatures.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allowed HTTP methods (&lt;code&gt;allowed_methods&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Back-up files (&lt;code&gt;backup_files&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Backup directories (&lt;code&gt;backup_directories&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Common administration interfaces (&lt;code&gt;common_admin_interfaces&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Common directories (&lt;code&gt;common_directories&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Common files (&lt;code&gt;common_files&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;HTTP PUT (&lt;code&gt;http_put&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Insufficient Transport Layer Protection for password forms (&lt;code&gt;unencrypted_password_form&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;WebDAV detection (&lt;code&gt;webdav&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;HTTP TRACE detection (&lt;code&gt;xst&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Credit Card number disclosure (&lt;code&gt;credit_card&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;CVS/SVN user disclosure (&lt;code&gt;cvs_svn_users&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Private IP address disclosure (&lt;code&gt;private_ip&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Common backdoors (&lt;code&gt;backdoors&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;.htaccess LIMIT misconfiguration (&lt;code&gt;htaccess_limit&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Interesting responses (&lt;code&gt;interesting_responses&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;HTML object grepper (&lt;code&gt;html_objects&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;E-mail address disclosure (&lt;code&gt;emails&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;US Social Security Number disclosure (&lt;code&gt;ssn&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Forceful directory listing (&lt;code&gt;directory_listing&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Mixed Resource/Scripting (&lt;code&gt;mixed_resource&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Insecure cookies (&lt;code&gt;insecure_cookies&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;HttpOnly cookies (&lt;code&gt;http_only_cookies&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Auto-complete for password form fields (&lt;code&gt;password_autocomplete&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Origin Spoof Access Restriction Bypass (&lt;code&gt;origin_spoof_access_restriction_bypass&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Form-based upload (&lt;code&gt;form_upload&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;localstart.asp (&lt;code&gt;localstart_asp&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cookie set for parent domain (&lt;code&gt;cookie_set_for_parent_domain&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Missing &lt;code&gt;Strict-Transport-Security&lt;/code&gt; headers for HTTPS sites (&lt;code&gt;hsts&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Missing &lt;code&gt;X-Frame-Options&lt;/code&gt; headers (&lt;code&gt;x_frame_options&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Insecure CORS policy (&lt;code&gt;insecure_cors_policy&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Insecure cross-domain policy (allow-access-from) (&lt;code&gt;insecure_cross_domain_policy_access&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Insecure cross-domain policy (allow-http-request-headers-from) (&lt;code&gt;insecure_cross_domain_policy_headers&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Insecure client-access policy (&lt;code&gt;insecure_client_access_policy&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reporters&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standard output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.html/&#34;&gt;HTML&lt;/a&gt; (&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.html.zip&#34;&gt;zip&lt;/a&gt;) (&lt;code&gt;html&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.xml&#34;&gt;XML&lt;/a&gt; (&lt;code&gt;xml&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.txt&#34;&gt;Text&lt;/a&gt; (&lt;code&gt;text&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.json&#34;&gt;JSON&lt;/a&gt; (&lt;code&gt;json&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.marshal&#34;&gt;Marshal&lt;/a&gt; (&lt;code&gt;marshal&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.yml&#34;&gt;YAML&lt;/a&gt; (&lt;code&gt;yaml&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.afr&#34;&gt;AFR&lt;/a&gt; (&lt;code&gt;afr&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The default Arachni Framework Report format.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Plugins&lt;/h4&gt; &#xA;&lt;p&gt;Plugins add extra functionality to the system in a modular fashion, this way the core remains lean and makes it easy for anyone to add arbitrary functionality.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Passive Proxy (&lt;code&gt;proxy&lt;/code&gt;) -- Analyzes requests and responses between the web app and the browser assisting in AJAX audits, logging-in and/or restricting the scope of the audit.&lt;/li&gt; &#xA; &lt;li&gt;Form based login (&lt;code&gt;autologin&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Script based login (&lt;code&gt;login_script&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Dictionary attacker for HTTP Auth (&lt;code&gt;http_dicattack&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Dictionary attacker for form based authentication (&lt;code&gt;form_dicattack&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Cookie collector (&lt;code&gt;cookie_collector&lt;/code&gt;) -- Keeps track of cookies while establishing a timeline of changes.&lt;/li&gt; &#xA; &lt;li&gt;WAF (Web Application Firewall) Detector (&lt;code&gt;waf_detector&lt;/code&gt;) -- Establishes a baseline of normal behavior and uses rDiff analysis to determine if malicious inputs cause any behavioral changes.&lt;/li&gt; &#xA; &lt;li&gt;BeepNotify (&lt;code&gt;beep_notify&lt;/code&gt;) -- Beeps when the scan finishes.&lt;/li&gt; &#xA; &lt;li&gt;EmailNotify (&lt;code&gt;email_notify&lt;/code&gt;) -- Sends a notification (and optionally a report) over SMTP at the end of the scan.&lt;/li&gt; &#xA; &lt;li&gt;VectorFeed (&lt;code&gt;vector_feed&lt;/code&gt;) -- Reads in vector data from which it creates elements to be audited. Can be used to perform extremely specialized/narrow audits on a per vector/element basis. Useful for unit-testing or a gazillion other things.&lt;/li&gt; &#xA; &lt;li&gt;Script (&lt;code&gt;script&lt;/code&gt;) -- Loads and runs an external Ruby script under the scope of a plugin, used for debugging and general hackery.&lt;/li&gt; &#xA; &lt;li&gt;Uncommon headers (&lt;code&gt;uncommon_headers&lt;/code&gt;) -- Logs uncommon headers.&lt;/li&gt; &#xA; &lt;li&gt;Content-types (&lt;code&gt;content_types&lt;/code&gt;) -- Logs content-types of server responses aiding in the identification of interesting (possibly leaked) files.&lt;/li&gt; &#xA; &lt;li&gt;Vector collector (&lt;code&gt;vector_collector&lt;/code&gt;) -- Collects information about all seen input vectors which are within the scan scope.&lt;/li&gt; &#xA; &lt;li&gt;Headers collector (&lt;code&gt;headers_collector&lt;/code&gt;) -- Collects response headers based on specified criteria.&lt;/li&gt; &#xA; &lt;li&gt;Exec (&lt;code&gt;exec&lt;/code&gt;) -- Calls external executables at different scan stages.&lt;/li&gt; &#xA; &lt;li&gt;Metrics (&lt;code&gt;metrics&lt;/code&gt;) -- Captures metrics about multiple aspects of the scan and the web application.&lt;/li&gt; &#xA; &lt;li&gt;Restrict to DOM state (&lt;code&gt;restrict_to_dom_state&lt;/code&gt;) -- Restricts the audit to a single page&#39;s DOM state, based on a URL fragment.&lt;/li&gt; &#xA; &lt;li&gt;Webhook notify (&lt;code&gt;webhook_notify&lt;/code&gt;) -- Sends a webhook payload over HTTP at the end of the scan.&lt;/li&gt; &#xA; &lt;li&gt;Rate limiter (&lt;code&gt;rate_limiter&lt;/code&gt;) -- Rate limits HTTP requests.&lt;/li&gt; &#xA; &lt;li&gt;Page dump (&lt;code&gt;page_dump&lt;/code&gt;) -- Dumps page data to disk as YAML.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Defaults&lt;/h5&gt; &#xA;&lt;p&gt;Default plugins will run for every scan and are placed under &lt;code&gt;/plugins/defaults/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AutoThrottle (&lt;code&gt;autothrottle&lt;/code&gt;) -- Dynamically adjusts HTTP throughput during the scan for maximum bandwidth utilization.&lt;/li&gt; &#xA; &lt;li&gt;Healthmap (&lt;code&gt;healthmap&lt;/code&gt;) -- Generates sitemap showing the health of each crawled/audited URL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Meta&lt;/h6&gt; &#xA;&lt;p&gt;Plugins under &lt;code&gt;/plugins/defaults/meta/&lt;/code&gt; perform analysis on the scan results to determine trustworthiness or just add context information or general insights.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TimingAttacks (&lt;code&gt;timing_attacks&lt;/code&gt;) -- Provides a notice for issues uncovered by timing attacks when the affected audited pages returned unusually high response times to begin with. It also points out the danger of DoS attacks against pages that perform heavy-duty processing.&lt;/li&gt; &#xA; &lt;li&gt;Discovery (&lt;code&gt;discovery&lt;/code&gt;) -- Performs anomaly detection on issues logged by discovery checks and warns of the possibility of false positives where applicable.&lt;/li&gt; &#xA; &lt;li&gt;Uniformity (&lt;code&gt;uniformity&lt;/code&gt;) -- Reports inputs that are uniformly vulnerable across a number of pages hinting to the lack of a central point of input sanitization.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Trainer subsystem&lt;/h3&gt; &#xA;&lt;p&gt;The Trainer is what enables Arachni to learn from the scan it performs and incorporate that knowledge, on the fly, for the duration of the audit.&lt;/p&gt; &#xA;&lt;p&gt;Checks have the ability to individually force the Framework to learn from the HTTP responses they are going to induce.&lt;/p&gt; &#xA;&lt;p&gt;However, this is usually not required since Arachni is aware of which requests are more likely to uncover new elements or attack vectors and will adapt itself accordingly.&lt;/p&gt; &#xA;&lt;p&gt;Still, this can be an invaluable asset to Fuzzer checks.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki/Installation&#34;&gt;Installation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki/User-guide&#34;&gt;Usage&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Running the specs&lt;/h2&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;rake spec&lt;/code&gt; to run &lt;strong&gt;all&lt;/strong&gt; specs or you can run them selectively using the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake spec:core            # for the core libraries&#xA;rake spec:checks          # for the checks&#xA;rake spec:plugins         # for the plugins&#xA;rake spec:reports         # for the reports&#xA;rake spec:path_extractors # for the path extractors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please be warned&lt;/strong&gt;, the core specs will require a beast of a machine due to the necessity to test the Grid/multi-Instance features of the system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;The check specs will take many hours to complete due to the timing-attack tests.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bug reports/Feature requests&lt;/h2&gt; &#xA;&lt;p&gt;Submit bugs using &lt;a href=&#34;http://github.com/Arachni/arachni/issues&#34;&gt;GitHub Issues&lt;/a&gt; and get support via the &lt;a href=&#34;http://support.arachni-scanner.com&#34;&gt;Support Portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;(Before starting any work, please read the &lt;a href=&#34;https://github.com/Arachni/arachni/tree/experimental#source&#34;&gt;instructions&lt;/a&gt; for working with the source code.)&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re happy to accept help from fellow code-monkeys and these are the steps you need to follow in order to contribute code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the project.&lt;/li&gt; &#xA; &lt;li&gt;Start a feature branch based on the &lt;a href=&#34;https://github.com/Arachni/arachni/tree/experimental&#34;&gt;experimental&lt;/a&gt; branch (&lt;code&gt;git checkout -b &amp;lt;feature-name&amp;gt; experimental&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Add specs for your code.&lt;/li&gt; &#xA; &lt;li&gt;Run the spec suite to make sure you didn&#39;t break anything (&lt;code&gt;rake spec:core&lt;/code&gt; for the core libs or &lt;code&gt;rake spec&lt;/code&gt; for everything).&lt;/li&gt; &#xA; &lt;li&gt;Commit and push your changes.&lt;/li&gt; &#xA; &lt;li&gt;Issue a pull request and wait for your code to be reviewed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Arachni Public Source License v1.0 -- please see the &lt;em&gt;LICENSE&lt;/em&gt; file for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mercadolibre/mobile-dependencies_whitelist</title>
    <updated>2022-09-07T01:37:17Z</updated>
    <id>tag:github.com,2022-09-07:/mercadolibre/mobile-dependencies_whitelist</id>
    <link href="https://github.com/mercadolibre/mobile-dependencies_whitelist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Whitelist dependencies files for mobile teams&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Allowlist dependencies&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;em&gt;This repo isnt versioned. &lt;code&gt;master&lt;/code&gt; branch is consumed by default, so every time &lt;code&gt;master&lt;/code&gt; branch changes, all repositories will immediatly start consuming the new changes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you need to add or update a library&lt;/strong&gt; ,visit &lt;a href=&#34;https://sites.google.com/mercadolibre.com/mobile/arquitectura/allowlist&#34;&gt;Wiki.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Android allowlist dependencies consist of a set of dependencies that are available for front-ends and high-level repositories to consume from the Mercadolibre-mobile group.&lt;/p&gt; &#xA;&lt;p&gt;This set of dependencies is parsed in the form of a JSON text. The root level property should be called &lt;code&gt;whitelist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each of the dependencies is a JSON Object that will be matched against each of the unresolved dependencies of the repository. The repository dependencies will be a string formed as &lt;code&gt;group:name:version&lt;/code&gt;. The allowlist fields SUPPORTS regex expressions, so you can form match cases for groups in single strings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE1:&lt;/strong&gt; Remember that this are regexes, so if you want to declare &lt;code&gt;com.example&lt;/code&gt; it should be &lt;code&gt;com\\.example&lt;/code&gt; &lt;strong&gt;NOTE2&lt;/strong&gt;: The repository will validate against unresolved dependencies. Thus, if declaring as version &lt;code&gt;4\\.\\+&lt;/code&gt; it ** will** match against a dependency &lt;code&gt;4.+&lt;/code&gt; (it wont be for example the string &lt;code&gt;4.2.3&lt;/code&gt;) &lt;strong&gt;NOTE3&lt;/strong&gt;: You can have expirable dependencies by adding the &lt;code&gt;expires&lt;/code&gt; field. If no field is added, the dependency is considered as non-expirable &lt;strong&gt;NOTE4&lt;/strong&gt;: If no group / name / version is provided, they will default to &lt;code&gt;.*&lt;/code&gt; (any string)&lt;/p&gt; &#xA;&lt;p&gt;JSON Schema:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;whitelist&#34;: [&#xA;    {&#xA;      &#34;description&#34;: &#34;(optional) description&#34;,&#xA;      &#34;expires&#34;: &#34;yyyy-MM-dd&#34;,&#xA;      &#34;group&#34;: &#34;group_regex&#34;,&#xA;      &#34;name&#34;: &#34;name_regex&#34;,&#xA;      &#34;version&#34;: &#34;version_regex&#34;&#xA;    },&#xA;    ...&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE5&lt;/strong&gt;: If you want to try if its working correctly from your fork, just add this line to the build.gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lintGradle {&#xA;    dependencyWhitelistUrl = &#34;https://raw.githubusercontent.com/YOUR_GITHUB_USER/mobile-dependencies_whitelist/master/android-whitelist.json&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;iOS allowlist dependencies consist of a set of dependencies that are available for front-ends and high-level repositories to consume from the Mercadolibre-mobile group.&lt;/p&gt; &#xA;&lt;p&gt;This set of dependencies is parsed in the form of a JSON text. The root level property should be called &lt;code&gt;whitelist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each of the dependencies is an object with the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Dependency Podname&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source&lt;/code&gt;: keyword that indicates the source where the dependency spec should be downloaded. (&lt;code&gt;public&lt;/code&gt; || &lt;code&gt;private&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;target&lt;/code&gt;: Indicates if it is a test or productive dependency. (&lt;code&gt;test&lt;/code&gt; || &lt;code&gt;productive&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: Which will be matched against each of the dependencies in the podspec. The &lt;code&gt;version&lt;/code&gt; string SUPPORTS regex expression.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Optional&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;expires&lt;/code&gt;: You can have expirable dependencies by adding the &lt;code&gt;expires&lt;/code&gt; field. If no field is added, the dependency is considered as non-expirable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: (optional) some relevant description&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;&#x9;&#34;whitelist&#34;: [&#xA;   # This will match with &#39;MeliSDK&#39; and version &#39;~&amp;gt;5.+&#39; (version must have ~&amp;gt;5.x)&#xA;    {&#xA;&#x9;&#x9;&#34;name&#34;: &#34;MeliSDK&#34;,&#xA;&#x9;&#x9;&#34;version&#34;: &#34;^~&amp;gt;5.[0-9]+$&#34;&#xA;&#x9;}, &#xA;   # This will match with &#39;MLRecommendations&#39; for any version&#xA;    {&#xA;&#x9;&#x9;&#34;name&#34;: &#34;MLRecommendations&#34;,&#xA;&#x9;&#x9;&#34;version&#34;: null&#xA;&#x9;}]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contexts Allowlist [DEPRECATED]&lt;/h1&gt; &#xA;&lt;p&gt;For more information consult the &lt;a href=&#34;https://furydocs.io/mobile-apps/v1.5.2/guide/#/lang-en/metrics/02_crash-rate?id=contexts&#34;&gt;new context allowlist&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>castwide/solargraph</title>
    <updated>2022-09-07T01:37:17Z</updated>
    <id>tag:github.com,2022-09-07:/castwide/solargraph</id>
    <link href="https://github.com/castwide/solargraph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby language server.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Solargraph&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/castwide/solargraph/actions/workflows/rspec.yml&#34;&gt;&lt;img src=&#34;https://github.com/castwide/solargraph/actions/workflows/rspec.yml/badge.svg?sanitize=true&#34; alt=&#34;RSpec&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;A Ruby Language Server&lt;/h2&gt; &#xA;&lt;p&gt;Solargraph provides a comprehensive suite of tools for Ruby programming: intellisense, diagnostics, inline documentation, and type checking.&lt;/p&gt; &#xA;&lt;h2&gt;Online Demo&lt;/h2&gt; &#xA;&lt;p&gt;A web-based demonstration of Solargraph&#39;s autocomplete is available at &lt;a href=&#34;https://solargraph.org/demo&#34;&gt;https://solargraph.org/demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the gem from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install solargraph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;solargraph&#39;, group: :development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Solargraph&lt;/h2&gt; &#xA;&lt;p&gt;Plug-ins and extensions are available for the following editors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Extension: &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=castwide.solargraph&#34;&gt;https://marketplace.visualstudio.com/items?itemName=castwide.solargraph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/castwide/vscode-solargraph&#34;&gt;https://github.com/castwide/vscode-solargraph&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Package: &lt;a href=&#34;https://atom.io/packages/ruby-solargraph&#34;&gt;https://atom.io/packages/ruby-solargraph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/castwide/atom-solargraph&#34;&gt;https://github.com/castwide/atom-solargraph&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vim&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GitHub: &lt;code&gt;LanguageClient-neovim&lt;/code&gt;, &lt;a href=&#34;https://github.com/autozimu/LanguageClient-neovim&#34;&gt;https://github.com/autozimu/LanguageClient-neovim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GitHub: &lt;code&gt;coc&lt;/code&gt;, &lt;a href=&#34;https://github.com/neoclide/coc-solargraph&#34;&gt;https://github.com/neoclide/coc-solargraph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GitHub: &lt;code&gt;Vim-EasyComplete&lt;/code&gt;, &lt;a href=&#34;https://github.com/jayli/vim-easycomplete&#34;&gt;https://github.com/jayli/vim-easycomplete&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Emacs&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GitHub: &lt;code&gt;eglot.el&lt;/code&gt;, &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;https://github.com/joaotavora/eglot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GitHub: &lt;code&gt;lsp-mode.el&lt;/code&gt;, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;https://github.com/emacs-lsp/lsp-mode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Eclipse&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Plugin: &lt;a href=&#34;https://marketplace.eclipse.org/content/ruby-solargraph&#34;&gt;https://marketplace.eclipse.org/content/ruby-solargraph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/PyvesB/eclipse-solargraph&#34;&gt;https://github.com/PyvesB/eclipse-solargraph&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Solargraph&#39;s behavior can be controlled via optional &lt;a href=&#34;https://solargraph.org/guides/configuration&#34;&gt;configuration&lt;/a&gt; files. The highest priority file is a &lt;code&gt;.solargraph.yml&lt;/code&gt; file at the root of the project. If not present, any global configuration at &lt;code&gt;~/.config/solargraph/config.yml&lt;/code&gt; will apply. The path to the global configuration can be overridden with the &lt;code&gt;SOLARGRAPH_GLOBAL_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;Gem Support&lt;/h3&gt; &#xA;&lt;p&gt;Solargraph is capable of providing code completion and documentation for gems that have YARD documentation. You can make sure your gems are documented by running &lt;code&gt;yard gems&lt;/code&gt; from the command line. (YARD is included as one of Solargraph&#39;s gem dependencies. The first time you run it might take a while if you have a lot of gems installed).&lt;/p&gt; &#xA;&lt;p&gt;When editing code, a &lt;code&gt;require&lt;/code&gt; call that references a gem will pull the documentation into the code maps and include the gem&#39;s API in code completion and intellisense.&lt;/p&gt; &#xA;&lt;p&gt;If your project automatically requires bundled gems (e.g., &lt;code&gt;require &#39;bundler/require&#39;&lt;/code&gt;), Solargraph will add all of the Gemfile&#39;s default dependencies to the map.&lt;/p&gt; &#xA;&lt;h3&gt;Type Checking&lt;/h3&gt; &#xA;&lt;p&gt;As of version 0.33.0, Solargraph includes a &lt;a href=&#34;https://github.com/castwide/solargraph/issues/192&#34;&gt;type checker&lt;/a&gt; that uses a combination of YARD tags and code analysis to report missing type definitions. In strict mode, it performs type inference to determine whether the tags match the types it detects from code.&lt;/p&gt; &#xA;&lt;h3&gt;Updating Core Documentation&lt;/h3&gt; &#xA;&lt;p&gt;The Solargraph gem ships with documentation for Ruby 2.2.2. You can download documentation for other Ruby versions from the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ solargraph list-cores      # List the installed documentation versions&#xA;$ solargraph available-cores # List the versions available for download&#xA;$ solargraph download-core   # Install the best match for your Ruby version&#xA;$ solargraph clear           # Reset the documentation cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The Documentation Cache&lt;/h3&gt; &#xA;&lt;p&gt;Solargraph uses a cache directory to store documentation for the Ruby core and customized documentation for certain gems. The default location is &lt;code&gt;~/.solargraph/cache&lt;/code&gt;, e.g., &lt;code&gt;/home/&amp;lt;username&amp;gt;/.solargraph/cache&lt;/code&gt; on Linux or &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\.solargraph&lt;/code&gt; on Windows.&lt;/p&gt; &#xA;&lt;p&gt;You can change the location of the cache directory with the &lt;code&gt;SOLARGRAPH_CACHE&lt;/code&gt; environment variable. This can be useful if you want the cache to comply with the XDG Base Directory Specification.&lt;/p&gt; &#xA;&lt;h3&gt;Solargraph and Bundler&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using the language server with a project that uses Bundler, the most comprehensive way to use your bundled gems is to bundle Solargraph.&lt;/p&gt; &#xA;&lt;p&gt;In the Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;solargraph&#39;, group: :development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;bundle install&lt;/code&gt; and use &lt;code&gt;bundle exec yard gems&lt;/code&gt; to generate the documentation. This process documents cached or vendored gems, or even gems that are installed from a local path.&lt;/p&gt; &#xA;&lt;p&gt;In order to make sure you&#39;re using the correct dependencies, you can start the language server with Bundler. In VS Code, there&#39;s a &lt;code&gt;solargraph.useBundler&lt;/code&gt; option. Other clients will vary, but the command you probably want to run is &lt;code&gt;bundle exec solargraph socket&lt;/code&gt; or &lt;code&gt;bundle exec solargraph stdio&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rubocop Version&lt;/h3&gt; &#xA;&lt;p&gt;If you have multiple versions of &lt;a href=&#34;https://rubygems.org/gems/rubocop&#34;&gt;&lt;code&gt;rubocop&lt;/code&gt;&lt;/a&gt; installed and you would like to choose a version other than the latest to use, this specific version can be configured.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;.solargraph.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;reporters:&#xA;- rubocop:version=0.61.0  # diagnostics&#xA;formatter:&#xA;  rubocop:&#xA;    version: 0.61.0       # formatting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integrating Other Editors&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specification&#34;&gt;language server protocol&lt;/a&gt; is the recommended way for integrating Solargraph into editors and IDEs. Clients can connect using either stdio or TCP. Language client developers should refer to &lt;a href=&#34;https://solargraph.org/guides/language-server&#34;&gt;https://solargraph.org/guides/language-server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;More Information&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://solargraph.org/guides&#34;&gt;https://solargraph.org/guides&lt;/a&gt; for more tips and tutorials about Solargraph.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Solargraph&lt;/h2&gt; &#xA;&lt;h3&gt;Bug Reports and Feature Requests&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/castwide/solargraph/issues&#34;&gt;GitHub Issues&lt;/a&gt; are the best place to ask questions, report problems, and suggest improvements.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;Code contributions are always appreciated. Feel free to fork the repo and submit pull requests. Check for open issues that could use help. Start new issues to discuss changes that have a major impact on the code or require large time commitments.&lt;/p&gt; &#xA;&lt;h3&gt;Sponsorship and Donation&lt;/h3&gt; &#xA;&lt;p&gt;Use Patreon to support ongoing development of Solargraph at &lt;a href=&#34;https://www.patreon.com/castwide&#34;&gt;https://www.patreon.com/castwide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also make one-time donations via PayPal at &lt;a href=&#34;https://www.paypal.me/castwide&#34;&gt;https://www.paypal.me/castwide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>