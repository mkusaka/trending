<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-04T01:34:19Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bo-oz/vimeo_me2</title>
    <updated>2024-06-04T01:34:19Z</updated>
    <id>tag:github.com,2024-06-04:/bo-oz/vimeo_me2</id>
    <link href="https://github.com/bo-oz/vimeo_me2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vimeo API v3 wrapper for Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VimeoMe2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/bo-oz/vimeo_me2&#34;&gt;&lt;img src=&#34;https://travis-ci.org/bo-oz/vimeo_me2.svg?branch=master&#34; alt=&#34;Travis badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A very basic wrapper for the Vimeo API. OAuth2 is not included in the code. You can easily write your own OAuth2 workflow with a gem like &lt;a href=&#34;https://github.com/intridea/oauth2&#34;&gt;OAuth2&lt;/a&gt;. All you need is a Vimeo access token in order to easily make calls to their API using this gem.&lt;/p&gt; &#xA;&lt;p&gt;A simple alternative method is to generate your own token, dedicated to your application, which can be clearly convenient in case of script use. The procedure is to go in your app created on vimeo &lt;a href=&#34;https://developer.vimeo.com/apps/xxxxxxx#authentication&#34;&gt;https://developer.vimeo.com/&lt;/a&gt; and find the &lt;code&gt;Authentication&lt;/code&gt; tab (it&#39;s next to the &lt;code&gt;Details&lt;/code&gt; tab), at the end, you&#39;ll find &lt;code&gt;Generate an Access Token&lt;/code&gt;, customize as you wish, then click &lt;code&gt;send&lt;/code&gt;. Your token is created and you are ready to use it.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;vimeo_me2&#39;, :git =&amp;gt; &#34;https://github.com/bo-oz/vimeo_me2.git&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This gem consists of two classes that can access a user or a video object from Vimeo. Using the gem&#39;s methods requires having a Vimeo access token: &lt;a href=&#34;https://developer.vimeo.com&#34;&gt;vimeo.com&lt;/a&gt;. When calling the classes, put in the access token and call the various methods.&lt;/p&gt; &#xA;&lt;h3&gt;Making any call to Vimeo&lt;/h3&gt; &#xA;&lt;p&gt;Use utility methods to make any call to Vimeo. You can see the full list of endpoints in the Vimeo documentation on &lt;a href=&#34;https://developer.vimeo.com&#34;&gt;vimeo.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Set up a client for making calls to Vimeo:&#xA;vimeo = VimeoMe2::VimeoObject.new(&#39;12345hjhsjdshasd&#39;)&#xA;# &#39;12345hjhsjdshasd&#39; must be replaced with a valid token.&#xA;&#xA;# Make any GET request, by providing only the API endpoint:&#xA;vimeo.get(&#39;/me&#39;)&#xA;&#xA;# Make any POST request, including a body.&#xA;# Don&#39;t forget to set the expected response code.&#xA;# You can also set additional headers.&#xA;body = &#34;whatever&#34;&#xA;vimeo.post(&#39;/videos/12344&#39;, body:body, headers:{&#39;Content-Type&#39;: &#39;video/mp4&#39;}, code:201)&#xA;&#xA;# Delete items:&#xA;vimeo.delete(&#39;/videos/12344&#39;, code:204)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing a User&lt;/h3&gt; &#xA;&lt;p&gt;Take a look at the files under /lib/vimeo_me2/user/ for available methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Access your own user object:&#xA;vimeo_user = VimeoMe2::User.new(&#39;12345hjhsjdshasd&#39;)&#xA;&#xA;# Access a different user&#39;s object:&#xA;vimeo_user = VimeoMe2::User.new(&#39;12345hjhsjdshasd&#39;,&#39;username&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Like&lt;/h4&gt; &#xA;&lt;p&gt;Get a list of likes. Like or unlike videos.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Fetch all likes for a user:&#xA;vimeo_user.view_all_likes&#xA;&#xA;# Like a specific video:&#xA;vimeo_user.like_video 1234455&#xA;&#xA;# Check if a video is liked:&#xA;vimeo_user.check_if_liked 1234455&#xA;# Returns true if liked, false if not liked.&#xA;&#xA;# Unlike a video:&#xA;vimeo_user.unlike_video 1234455&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Uploading a video&lt;/h3&gt; &#xA;&lt;h4&gt;Utilizing an upload form in Rails&lt;/h4&gt; &#xA;&lt;p&gt;At this moment there are two ways of uploading videos to Vimeo. The first one works in Rails and uploads an ActionDispatch::Http::UploadedFile object to Vimeo, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# RoR Example&#xA;# Set up a model like this:&#xA;&#xA;class Videofile &amp;lt; ActiveRecord::Base&#xA;  attr_accessor :video_file&#xA;&#xA;  before_create :upload_to_vimeo&#xA;&#xA;  def upload_to_vimeo&#xA;    # connect to Vimeo as your own user, this requires upload scope&#xA;    # in your OAuth2 token&#xA;    vimeo_client = VimeoMe2::User.new(&#39;12345hjhsjdshasd&#39;)&#xA;    # upload the video by passing the ActionDispatch::Http::UploadedFile&#xA;    # to the upload_video() method. The data_url in this model stores&#xA;    # the location of the uploaded video on Vimeo.&#xA;    video = vimeo_client.upload_video(video_file)&#xA;    self.data_url = video[&#39;uri&#39;]&#xA;    true&#xA;  rescue VimeoMe2::RequestFailed =&amp;gt; e&#xA;    errors.add(:video_file, e.message)&#xA;    false&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Uploading from plain Ruby&lt;/h4&gt; &#xA;&lt;p&gt;You can also upload a Video File through plain ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Example in Plain Ruby&#xA;video = File.open(&#39;video.mp4&#39;)&#xA;vimeo_client = VimeoMe2::User.new(&#39;12345hjhsjdshasd&#39;)&#xA;vimeo_client.upload_video(video)&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Utilizing the Vimeo Pull Request&lt;/h4&gt; &#xA;&lt;p&gt;The second method is using the Pull Upload method that&#39;s offered through the Vimeo Api. This method basically fetches video content from any accessible URL and uploads it to Vimeo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# connect to Vimeo as your own user, this requires upload scope&#xA;# in your OAuth2 token&#xA;vimeo_client = VimeoMe2::User.new(&#39;12345hjhsjdshasd&#39;)&#xA;vimeo_client.pull_upload &#39;new name of the video&#39;, &#39;http://www.somelocation.com/video_content.mp4&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing a video&lt;/h3&gt; &#xA;&lt;p&gt;Take a look at the files under /lib/vimeo_me2/video/ for available methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Get access to a video (both options are valid)&#xA;vimeo_video = VimeoMe2::Video.new(&#39;12345hjhsjdshasd&#39;,&#39;196277011&#39;)&#xA;vimeo_video = VimeoMe2::Video.new(&#39;12345hjhsjdshasd&#39;,&#39;/videos/196277011&#39;)&#xA;&#xA;# Or with an uploaded video like with the model&#xA;# in the above code fragment&#xA;videofile = Videofile.last&#xA;vimeo_video = VimeoMe2::Video.new(&#39;12345hjhsjdshasd&#39;,videofile.data_url)&#xA;&#xA;# Get comments on the video:&#xA;vimeo_video.comments&#xA;&#xA;# Get the name of the video:&#xA;vimeo_video.name&#xA;&#xA;# Set the name of the video:&#xA;vimeo_video.name = &#34;New name&#34;&#xA;&#xA;# Update the video:&#xA;vimeo_video.update&#xA;&#xA;# Delete the video (if you have access to do that):&#xA;vimeo_video.destroy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this moment the gem only returns the raw JSON response received from Vimeo. I do plan on extending this to also include a player embed method. But this is still a work in progress.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write tests&lt;/li&gt; &#xA; &lt;li&gt;Include all parameters in the various API calls&lt;/li&gt; &#xA; &lt;li&gt;Write methods for every Vimeo API endpoint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake spec&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and tags, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/bo-oz/vimeo_me2&#34;&gt;https://github.com/bo-oz/vimeo_me2&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;http://contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;1.2.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Updated the upload code to use the new 3.4 spec for uploading: &lt;a href=&#34;https://developer.vimeo.com/api/upload/videos#resumable-guide&#34;&gt;https://developer.vimeo.com/api/upload/videos#resumable-guide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The result of an upload is no longer the video URL, but the entire video JSON response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Did some refactoring to the HTTP Request class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>checkout/checkout-event-logger-ios-framework</title>
    <updated>2024-06-04T01:34:19Z</updated>
    <id>tag:github.com,2024-06-04:/checkout/checkout-event-logger-ios-framework</id>
    <link href="https://github.com/checkout/checkout-event-logger-ios-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;checkout-3ds-sdk-ios-framework&lt;/h1&gt; &#xA;&lt;p&gt;Releases for &lt;code&gt;CheckoutEventLoggerKit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CheckoutEventLoggerKit&lt;/code&gt; is an internal tool for securely logging impersonal usage data in SDKs.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 11.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 14.0+&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.7+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. You can install it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CocoaPods 1.9+ is required to use CheckoutEventLoggerKit&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To integrate CheckoutEventLoggerKit into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;10.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;    pod &#39;CheckoutEventLoggerKit&#39;, :git =&amp;gt; &#39;https://github.com/checkout/checkout-event-logger-ios-framework.git&#39;, :tag =&amp;gt; &#39;1.2.4&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Carthage users should download &lt;code&gt;CheckoutEventLoggerKit.xcframework&lt;/code&gt; and integrate with their project.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the swift compiler.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding CheckoutEventLoggerKit as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/checkout/checkout-event-logger-ios-framework.git&#34;, .upToNextMajor(from: &#34;1.0.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>inertiajs/inertia-rails</title>
    <updated>2024-06-04T01:34:19Z</updated>
    <id>tag:github.com,2024-06-04:/inertiajs/inertia-rails</id>
    <link href="https://github.com/inertiajs/inertia-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Rails adapter for Inertia.js.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6599653/114456558-032e2200-9bab-11eb-88bc-a19897f417ba.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Inertia.js Rails Adapter&lt;/h1&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Backend&lt;/h3&gt; &#xA;&lt;p&gt;Just add the inertia rails gem to your Gemfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;inertia_rails&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frontend&lt;/h3&gt; &#xA;&lt;p&gt;Rails 7 specific frontend docs coming soon. For now, check out the official Inertia docs at &lt;a href=&#34;https://inertiajs.com/&#34;&gt;https://inertiajs.com/&lt;/a&gt; or see an example using React/Vite &lt;a href=&#34;https://github.com/BrandonShar/inertia-rails-template&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Responses&lt;/h3&gt; &#xA;&lt;p&gt;Render Inertia responses is simple, just use the inertia renderer in your controller methods. The renderer accepts two arguments, the first is the name of the component you want to render from within your pages directory (without extension). The second argument is an options hash where you can provide &lt;code&gt;props&lt;/code&gt; to your components. This options hash also allows you to pass &lt;code&gt;view_data&lt;/code&gt; to your layout, but this is much less common.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def index&#xA;  render inertia: &#39;Event/Index&#39;, props: {&#xA;    events: Event.all,&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rails Component and Instance Props&lt;/h4&gt; &#xA;&lt;p&gt;Starting in version 3.0, Inertia Rails allows you to provide your component name and props via common rails conventions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class EventsController &amp;lt; ApplicationController&#xA;  use_inertia_instance_props&#xA;&#xA;  def index&#xA;    @events = Event.all&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is the same as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class EventsController &amp;lt; ApplicationController&#xA;  def index&#xA;    render inertia: &#39;events/index&#39;, props: {&#xA;      events: Event.all&#xA;    }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Instance Props and Default Render Notes&lt;/h4&gt; &#xA;&lt;p&gt;In order to use instance props, you must call &lt;code&gt;use_inertia_instance_props&lt;/code&gt; on the controller (or a base controller it inherits from). If any props are provided manually, instance props are automatically disabled for that response. Instance props are only included if they are defined after the before filter is set from &lt;code&gt;use_inertia_instance_props&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Automatic component name is also opt in, you must set the &lt;code&gt;default_render&lt;/code&gt; config value to &lt;code&gt;true&lt;/code&gt;. Otherwise, you can simply &lt;code&gt;render inertia: true&lt;/code&gt; for the same behavior explicitly.&lt;/p&gt; &#xA;&lt;h3&gt;Layout&lt;/h3&gt; &#xA;&lt;p&gt;Inertia layouts use the rails layout convention and can be set or changed in the same way. The original &lt;code&gt;layout&lt;/code&gt; config option is still functional, but will likely be deprecated in the future in favor of using rails layouts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class EventsController &amp;lt; ApplicationController&#xA;  layout &#39;inertia_application&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shared Data&lt;/h3&gt; &#xA;&lt;p&gt;If you have data that you want to be provided as a prop to every component (a common use-case is information about the authenticated user) you can use the &lt;code&gt;shared_data&lt;/code&gt; controller method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class EventsController &amp;lt; ApplicationController&#xA;  # share syncronously&#xA;  inertia_share app_name: env[&#39;app.name&#39;]&#xA;  &#xA;  # share lazily, evaluated at render time&#xA;  inertia_share do&#xA;    if logged_in?&#xA;      {&#xA;        user: logged_in_user,&#xA;      }&#xA;    end&#xA;  end&#xA;  &#xA;  # share lazily alternate syntax&#xA;  inertia_share user_count: lambda { User.count }&#xA;  &#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Deep Merging Shared Data&lt;/h4&gt; &#xA;&lt;p&gt;By default, Inertia will shallow merge data defined in an action with the shared data. You might want a deep merge. Imagine using shared data to represent defaults you&#39;ll override sometimes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController&#xA;  inertia_share do&#xA;    { basketball_data: { points: 50, rebounds: 100 } }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s say we want a particular action to change only part of that data structure. The renderer accepts a &lt;code&gt;deep_merge&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CrazyScorersController &amp;lt; ApplicationController&#xA;  def index&#xA;    render inertia: &#39;CrazyScorersComponent&#39;,&#xA;    props: { basketball_data: { points: 100 } },&#xA;    deep_merge: true&#xA;  end&#xA;end&#xA;&#xA;# The renderer will send this to the frontend:&#xA;{&#xA;  basketball_data: {&#xA;    points: 100,&#xA;    rebounds: 100,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deep merging can be set as the project wide default via the InertiaRails configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/some_initializer.rb&#xA;InertiaRails.configure do |config|&#xA;  config.deep_merge_shared_data = true&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If deep merging is enabled by default, it&#39;s possible to opt out within the action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CrazyScorersController &amp;lt; ApplicationController&#xA;  inertia_share do&#xA;    {&#xA;      basketball_data: {&#xA;        points: 50,&#xA;        rebounds: 10,&#xA;      }&#xA;    }&#xA;  end&#xA;&#xA;  def index&#xA;    render inertia: &#39;CrazyScorersComponent&#39;,&#xA;    props: { basketball_data: { points: 100 } },&#xA;    deep_merge: false&#xA;  end&#xA;end&#xA;&#xA;# Even if deep merging is set by default, since the renderer has `deep_merge: false`, it will send a shallow merge to the frontend:&#xA;{&#xA;  basketball_data: {&#xA;    points: 100,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lazy Props&lt;/h3&gt; &#xA;&lt;p&gt;On the front end, Inertia supports the concept of &#34;partial reloads&#34; where only the props requested are returned by the server. Sometimes, you may want to use this flow to avoid processing a particularly slow prop on the intial load. In this case, you can use Lazy props. Lazy props aren&#39;t evaluated unless they&#39;re specifically requested by name in a partial reload.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  inertia_share some_data: InertiaRails.lazy(lambda { some_very_slow_method })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Routing&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t need a controller to handle a static component, you can route directly to a component with the inertia route helper&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;inertia &#39;about&#39; =&amp;gt; &#39;AboutComponent&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSR&lt;/h3&gt; &#xA;&lt;p&gt;Enable SSR via the config settings for &lt;code&gt;ssr_enabled&lt;/code&gt; and &lt;code&gt;ssr_url&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using SSR, don&#39;t forget to add &lt;code&gt;&amp;lt;%= inertia_headers %&amp;gt;&lt;/code&gt; to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your &lt;code&gt;application.html.erb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Inertia Rails has a few different configuration options that can be set anywhere, but the most common location is from within an initializer.&lt;/p&gt; &#xA;&lt;p&gt;The default config is shown below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;InertiaRails.configure do |config|&#xA;  &#xA;  # set the current version for automatic asset refreshing. A string value should be used if any.&#xA;  config.version = nil&#xA;  # enable default inertia rendering (warning! this will override rails default rendering behavior)&#xA;  config.default_render = true&#xA;  &#xA;  # ssr specific options&#xA;  config.ssr_enabled = false&#xA;  config.ssr_url = &#39;http://localhost:13714&#39;&#xA;&#xA;  config.deep_merge_shared_data = false&#xA;  &#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using Rspec, Inertia Rails comes with some nice test helpers to make things simple.&lt;/p&gt; &#xA;&lt;p&gt;To use these helpers, just add the following require statement to your &lt;code&gt;spec/rails_helper.rb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;inertia_rails/rspec&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in any test you want to use the inertia helpers, add the inertia flag to the describe block&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe EventController, type: :request do&#xA;  describe &#39;#index&#39;, inertia: true do&#xA;    # ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Assertions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe EventController, type: :request do&#xA;  describe &#39;#index&#39;, inertia: true do&#xA;    &#xA;    # check the component&#xA;    expect_inertia.to render_component &#39;Event/Index&#39;&#xA;    &#xA;    # access the component name&#xA;    expect(inertia.component).to eq &#39;TestComponent&#39;&#xA;    &#xA;    # props (including shared props)&#xA;    expect_inertia.to have_exact_props({name: &#39;Brandon&#39;, sport: &#39;hockey&#39;})&#xA;    expect_inertia.to include_props({sport: &#39;hockey&#39;})&#xA;    &#xA;    # access props&#xA;    expect(inertia.props[:name]).to eq &#39;Brandon&#39;&#xA;    &#xA;    # view data&#xA;    expect_inertia.to have_exact_view_data({name: &#39;Brian&#39;, sport: &#39;basketball&#39;})&#xA;    expect_inertia.to include_view_data({sport: &#39;basketball&#39;})&#xA;    &#xA;    # access view data &#xA;    expect(inertia.view_data[:name]).to eq &#39;Brian&#39;&#xA;    &#xA;  end&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Maintained and sponsored by the team at &lt;a href=&#34;https://bellawatt.com/&#34;&gt;bellaWatt&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bellawatt.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6599653/114456832-5607d980-9bab-11eb-99c8-ab39867c384e.png&#34; alt=&#34;bellaWatt Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>