<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-09T01:33:00Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pay-rails/pay</title>
    <updated>2022-08-09T01:33:00Z</updated>
    <id>tag:github.com,2022-08-09:/pay-rails/pay</id>
    <link href="https://github.com/pay-rails/pay" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Payments for Ruby on Rails apps&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/images/logo.svg?sanitize=true&#34; height=&#34;50px&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üí≥ Pay - Payments engine for Ruby on Rails&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pay-rails/pay/actions&#34;&gt;&lt;img src=&#34;https://github.com/pay-rails/pay/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/pay&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/pay.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/images/stripe_partner_badge.svg?sanitize=true&#34; height=&#34;26px&#34;&gt; &#xA;&lt;p&gt;Pay is a payments engine for Ruby on Rails 6.0 and higher.&lt;/p&gt; &#xA;&lt;p&gt;‚ö†Ô∏è &lt;strong&gt;Upgrading?&lt;/strong&gt; Check the &lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/UPGRADE.md&#34;&gt;UPGRADE&lt;/a&gt; guide for required changes and/or migration when upgrading from a previous version of Pay.&lt;/p&gt; &#xA;&lt;h2&gt;üßë‚Äçüíª Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Want to see how Pay works? Check out our video getting started guide.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hYlOmqyJIgc&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; src=&#34;http://i3.ytimg.com/vi/hYlOmqyJIgc/maxresdefault.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üè¶ Payment Processors&lt;/h2&gt; &#xA;&lt;p&gt;Our supported payment processors are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stripe (&lt;a href=&#34;https://stripe.com/docs/strong-customer-authentication&#34;&gt;SCA Compatible&lt;/a&gt; using API version &lt;code&gt;2022-08-01&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Paddle (SCA Compatible &amp;amp; supports PayPal)&lt;/li&gt; &#xA; &lt;li&gt;Braintree (supports PayPal)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/fake_processor/1_overview.md&#34;&gt;Fake Processor&lt;/a&gt; (used for generic trials without cards, free subscriptions, testing, etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want to add a new payment provider? Contributions are welcome.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We make our best attempt to standardize the different payment providers. They function differently so keep that in mind if you plan on doing more complex payments. It would be best to stick with a single payment provider in that case so you don&#39;t run into discrepancies.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üìö Docs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/1_installation.md&#34;&gt;Installation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/2_configuration.md&#34;&gt;Configuration&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/3_customers.md&#34;&gt;Customers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/4_payment_methods.md&#34;&gt;Payment Methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/5_charges.md&#34;&gt;Charges&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/6_subscriptions.md&#34;&gt;Subscriptions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/7_webhooks.md&#34;&gt;Routes &amp;amp; Webhooks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/8_customizing_models.md&#34;&gt;Customizing Pay Models&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Payment Processors&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/stripe/1_overview.md&#34;&gt;Stripe&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/braintree/1_overview.md&#34;&gt;Braintree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/paddle/1_overview.md&#34;&gt;Paddle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/fake_processor/1_overview.md&#34;&gt;Fake Processor&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Marketplaces&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/marketplaces/stripe_connect.md&#34;&gt;Stripe Connect&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pay-rails/pay/master/docs/contributing/adding_a_payment_processor.md&#34;&gt;Adding A Payment Processor&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üôè Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have an issue you&#39;d like to submit, please do so using the issue tracker in GitHub. In order for us to help you in the best way possible, please be as detailed as you can.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to open a PR please make sure the following things pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails db:test:prepare&#xA;bin/rails test&#xA;bundle exec standardrb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìù License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-control-flow-conditional-statements</title>
    <updated>2022-08-09T01:33:00Z</updated>
    <id>tag:github.com,2022-08-09:/learn-co-curriculum/phase-3-control-flow-conditional-statements</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-control-flow-conditional-statements" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Control Flow: Conditional Statements&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Conditionally execute code with &lt;code&gt;if/else&lt;/code&gt; and &lt;code&gt;case/when&lt;/code&gt; statements&lt;/li&gt; &#xA; &lt;li&gt;Use statement modifiers to write cleaner Ruby code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In the last lesson, we saw how to use comparison methods and logical operators in Ruby. In this lesson, we&#39;ll see more examples of how to use those tools to perform control flow using &lt;strong&gt;conditional statements&lt;/strong&gt; with the &lt;code&gt;if/else&lt;/code&gt; and &lt;code&gt;case/when&lt;/code&gt; keywords.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to code along with the Ruby examples in IRB to help get a feel for the syntax.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;if/else&lt;/code&gt; Statements&lt;/h2&gt; &#xA;&lt;p&gt;Ruby has slightly different syntax for writing conditional statements using &lt;code&gt;if/else&lt;/code&gt; than JavaScript. Here&#39;s a relatively complex &lt;code&gt;if/else&lt;/code&gt; statement in JavaScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// JavaScript&#xA;let dog = &#34;cuddly&#34;;&#xA;let owner;&#xA;&#xA;if (dog === &#34;hungry&#34;) {&#xA;  owner = &#34;Refilling food bowl.&#34;;&#xA;} else if (dog === &#34;thirsty&#34;) {&#xA;  owner = &#34;Refilling water bowl.&#34;;&#xA;} else if (dog === &#34;playful&#34;) {&#xA;  owner = &#34;Playing tug-of-war.&#34;;&#xA;} else if (dog === &#34;cuddly&#34;) {&#xA;  owner = &#34;Snuggling.&#34;;&#xA;} else {&#xA;  owner = &#34;Reading newspaper.&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s how we can write the equivalent statement in Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# Ruby&#xA;dog = &#34;cuddly&#34;&#xA;&#xA;if dog == &#34;hungry&#34;&#xA;  owner = &#34;Refilling food bowl.&#34;&#xA;elsif dog == &#34;thirsty&#34;&#xA;  owner = &#34;Refilling water bowl.&#34;&#xA;elsif dog == &#34;playful&#34;&#xA;  owner = &#34;Playing tug-of-war.&#34;&#xA;elsif dog == &#34;cuddly&#34;&#xA;  owner = &#34;Snuggling.&#34;&#xA;else&#xA;  owner = &#34;Reading newspaper.&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Ruby, unlike JavaScript, &lt;code&gt;if/else&lt;/code&gt; statements &lt;a href=&#34;https://rubystyle.guide/#use-if-case-returns&#34;&gt;have a return value&lt;/a&gt;, which means we could refactor the code above as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;dog = &#34;cuddly&#34;&#xA;&#xA;owner = if dog == &#34;hungry&#34;&#xA;          &#34;Refilling food bowl.&#34;&#xA;        elsif dog == &#34;thirsty&#34;&#xA;          &#34;Refilling water bowl.&#34;&#xA;        elsif dog == &#34;playful&#34;&#xA;          &#34;Playing tug-of-war.&#34;&#xA;        elsif dog == &#34;cuddly&#34;&#xA;          &#34;Snuggling.&#34;&#xA;        else&#xA;          &#34;Reading newspaper.&#34;&#xA;        end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;unless&lt;/code&gt; Statements&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the &lt;code&gt;if&lt;/code&gt; keyword, Ruby also has the &lt;code&gt;unless&lt;/code&gt; keyword, which acts as the opposite of &lt;code&gt;if&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;timer = 15&#xA;&#xA;unless timer == 0&#xA;  puts &#34;Still cooking&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could write the equivalent with an &lt;code&gt;if&lt;/code&gt; statement and a negative condition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;timer = 15&#xA;&#xA;if timer != 0&#xA;  puts &#34;Still cooking&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But you&#39;ll find that the first example is a &lt;a href=&#34;https://rubystyle.guide/#unless-for-negatives&#34;&gt;bit nicer to read&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Truthy/Falsy Values&lt;/h2&gt; &#xA;&lt;p&gt;In order to use control flow effectively, it&#39;s important to know what values Ruby treats as &#34;truthy&#34; and &#34;falsy&#34;.&lt;/p&gt; &#xA;&lt;p&gt;As we saw in the lesson on data types, there are only two values Ruby considers falsy: &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;. Using those values in control flow means the condition will be false:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;def control_flow(value)&#xA;  if value&#xA;    # if the value is truthy&#xA;    puts &#34;yep!&#34;&#xA;  else&#xA;    # if the value is falsy&#xA;    puts &#34;nope!&#34;&#xA;  end&#xA;end&#xA;&#xA;control_flow(false)&#xA;# =&amp;gt; &#34;nope!&#34;&#xA;control_flow(nil)&#xA;# =&amp;gt; &#34;nope!&#34;&#xA;control_flow(true)&#xA;# =&amp;gt; &#34;yep!&#34;&#xA;control_flow(&#34;&#34;)&#xA;# =&amp;gt; &#34;yep!&#34;&#xA;control_flow(0)&#xA;# =&amp;gt; &#34;yep!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Statement Modifiers&lt;/h2&gt; &#xA;&lt;p&gt;One more nice feature of the Ruby language is the ability to use &lt;strong&gt;statement modifiers&lt;/strong&gt; and write conditions at the end of a line of code. For short, one-line conditions, it can improve the readability of your code. For example, you could rewrite this example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;this_year = Time.now.year&#xA;if this_year == 2046&#xA;  puts &#34;Hey, it&#39;s 2046!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using a statement modifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;this_year = Time.now.year&#xA;puts &#34;Hey, it&#39;s 2046!&#34; if this_year == 2046&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;unless&lt;/code&gt; can also be used as a statement modifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;fav_cookie = &#34;Chocolate Chip&#34;&#xA;puts &#34;Your opinion is invalid&#34; unless fav_cookie == &#34;Chocolate Chip&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;case&lt;/code&gt; Statements&lt;/h2&gt; &#xA;&lt;p&gt;Last but not least, Ruby also has &lt;code&gt;case&lt;/code&gt; statements, which are used to run multiple conditions against one value. As a reminder, &lt;code&gt;case&lt;/code&gt; statements can be useful as a replacement for &lt;code&gt;if/else&lt;/code&gt; statements, &lt;a href=&#34;https://rubystyle.guide/#case-vs-if-else&#34;&gt;when all the conditions use the same comparison&lt;/a&gt;. Here&#39;s a side-by-side example with Ruby and JavaScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// JavaScript&#xA;let dog = &#34;cuddly&#34;;&#xA;let owner;&#xA;&#xA;switch (dog) {&#xA;  case &#34;hungry&#34;:&#xA;    owner = &#34;Refilling food bowl.&#34;;&#xA;    break;&#xA;  case &#34;thirsty&#34;:&#xA;    owner = &#34;Refilling water bowl.&#34;;&#xA;    break;&#xA;  case &#34;playful&#34;:&#xA;    owner = &#34;Playing tug-of-war.&#34;;&#xA;    break;&#xA;  case &#34;cuddly&#34;:&#xA;    owner = &#34;Snuggling.&#34;;&#xA;    break;&#xA;  default:&#xA;    owner = &#34;Reading newspaper.&#34;;&#xA;    break;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# Ruby&#xA;dog = &#34;cuddly&#34;&#xA;&#xA;case dog&#xA;when &#34;hungry&#34;&#xA;  owner = &#34;Refilling food bowl.&#34;&#xA;when &#34;thirsty&#34;&#xA;  owner = &#34;Refilling water bowl.&#34;&#xA;when &#34;playful&#34;&#xA;  owner = &#34;Playing tug-of-war.&#34;&#xA;when &#34;cuddly&#34;&#xA;  owner = &#34;Snuggling.&#34;&#xA;else&#xA;  owner = &#34;Reading newspaper.&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;case&lt;/code&gt; statements, like &lt;code&gt;if&lt;/code&gt; statements, also produce a return value, so again, we could refactor this Ruby example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;dog = &#34;cuddly&#34;&#xA;&#xA;owner = case dog&#xA;        when &#34;hungry&#34;&#xA;          &#34;Refilling food bowl.&#34;&#xA;        when &#34;thirsty&#34;&#xA;          &#34;Refilling water bowl.&#34;&#xA;        when &#34;playful&#34;&#xA;          &#34;Playing tug-of-war.&#34;&#xA;        when &#34;cuddly&#34;&#xA;          &#34;Snuggling.&#34;&#xA;        else&#xA;          &#34;Reading newspaper.&#34;&#xA;        end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;then&lt;/code&gt; with &lt;code&gt;when&lt;/code&gt; to shorten up each condition to a single line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;dog = &#34;cuddly&#34;&#xA;&#xA;owner = case dog&#xA;        when &#34;hungry&#34; then &#34;Refilling food bowl.&#34;&#xA;        when &#34;thirsty&#34; then &#34;Refilling water bowl.&#34;&#xA;        when &#34;playful&#34; then &#34;Playing tug-of-war.&#34;&#xA;        when &#34;cuddly&#34; then &#34;Snuggling.&#34;&#xA;        else &#34;Reading newspaper.&#34;&#xA;        end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Time to get some practice! Write your code in the &lt;code&gt;control_flow.rb&lt;/code&gt; file. Run &lt;code&gt;learn test&lt;/code&gt; to check your work. Your goal is to practice using control flow in Ruby to familiarize yourself with the syntax. There is a JavaScript version of the solution for each of these deliverables in the &lt;code&gt;js/index.js&lt;/code&gt; file you can look at (but if you want an extra challenge, try solving them in Ruby without looking at the JavaScript solution).&lt;/p&gt; &#xA;&lt;p&gt;Write a method &lt;code&gt;#admin_login&lt;/code&gt; that takes two arguments, a username and a password. If the username is &#34;admin&#34; or &#34;ADMIN&#34; and the password is &#34;12345&#34;, return &#34;Access granted&#34;. Otherwise, return &#34;Access denied&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;admin_login(&#34;sudo&#34;, &#34;12345&#34;)&#xA;# =&amp;gt; &#34;Access denied&#34;&#xA;admin_login(&#34;admin&#34;, &#34;12345&#34;)&#xA;# =&amp;gt; &#34;Access granted&#34;&#xA;admin_login(&#34;ADMIN&#34;, &#34;12345&#34;)&#xA;# =&amp;gt; &#34;Access granted&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write a method &lt;code&gt;#hows_the_weather&lt;/code&gt; that takes in one argument, a temperature. If the temperature is below 40, return &#34;It&#39;s brisk out there!&#34;. If the temperature is between 40 and 65, return &#34;It&#39;s a little chilly out there!&#34;. If the temperature is above 85, return &#34;It&#39;s too dang hot out there!&#34;. Otherwise, return &#34;It&#39;s perfect out there!&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;hows_the_weather(33)&#xA;# =&amp;gt; &#34;Brisk!&#34;&#xA;hows_the_weather(99)&#xA;# =&amp;gt; &#34;Too dang hot&#34;&#xA;hows_the_weather(75)&#xA;# =&amp;gt; &#34;Perfect!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write a method &lt;code&gt;#fizzbuzz&lt;/code&gt; takes in a number. For multiples of three, return &#34;Fizz&#34; instead of the number. For the multiples of five, return &#34;Buzz&#34;. For numbers which are multiples of both three and five, return &#34;FizzBuzz&#34;. For all other numbers, just return the number itself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;fizzbuzz(1)&#xA;# 1&#xA;fizzbuzz(2)&#xA;# 2&#xA;fizzbuzz(3)&#xA;# Fizz&#xA;fizzbuzz(4)&#xA;# 4&#xA;fizzbuzz(5)&#xA;# Buzz&#xA;fizzbuzz(15)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write a method &lt;code&gt;#calculator&lt;/code&gt; that takes three arguments: an operation and two numbers. If the operation is one of the following: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;/&lt;/code&gt;, return the value of calling the operation on the two numbers. Otherwise, output a message saying &#34;Invalid operation!&#34; and return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;calculator(&#34;+&#34;, 1, 1)&#xA;# =&amp;gt; 2&#xA;calculator(&#34;-&#34;, 3, 1)&#xA;# =&amp;gt; 2&#xA;calculator(&#34;*&#34;, 3, 2)&#xA;# =&amp;gt; 6&#xA;calculator(&#34;/&#34;, 4, 2)&#xA;# =&amp;gt; 2&#xA;calculator(&#34;nope&#34;, 4, 2)&#xA;# &#34;Invalid operation!&#34;&#xA;# =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;Since you&#39;re already familiar with these control flow structures from JavaScript, you should have a good intuition of when it&#39;s appropriate to use these different tools. Try and develop familiarity with the differences in syntax between JavaScript and Ruby first, so that you&#39;ll be able to take advantage of some of Ruby&#39;s unique features like statement modifiers and the &lt;code&gt;unless&lt;/code&gt; keyword in your own code.&lt;/p&gt; &#xA;&lt;p&gt;One excellent resource for familiarizing yourself with the syntax and the preferred conventions of some Rubyists is the &lt;a href=&#34;https://rubystyle.guide&#34;&gt;Ruby style guide&lt;/a&gt;. Make sure to bookmark this resource and refer to it if you&#39;re ever unsure how to format a particular block of code.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubystyle.guide&#34;&gt;Ruby style guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-control-flow-loops</title>
    <updated>2022-08-09T01:33:00Z</updated>
    <id>tag:github.com,2022-08-09:/learn-co-curriculum/phase-3-control-flow-loops</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-control-flow-loops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Control Flow: Loops&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write basic loops with the &lt;code&gt;while&lt;/code&gt; construct&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;#times&lt;/code&gt; method to run a block of code a specified number of times&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this lesson, we&#39;ll show how to use control flow to run the same line(s) of code multiple times in a loop. Make sure to follow along by running IRB and experimenting with the example code.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Loops in Ruby&lt;/h2&gt; &#xA;&lt;p&gt;In JavaScript, there are a few common approaches to for control flow that will allow us to run the same lines of code over and over again. The most basic tool is the &lt;code&gt;while&lt;/code&gt; loop, which works like this in JavaScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let i = 0;&#xA;while (i &amp;lt; 5) {&#xA;  console.log(&#34;Looping!&#34;);&#xA;  i++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ruby has a &lt;code&gt;while&lt;/code&gt; construct too, which works much the same way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;i = 0&#xA;while i &amp;lt; 5&#xA;  puts &#34;Looping!&#34;&#xA;  i += 1&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ruby also has an &lt;code&gt;until&lt;/code&gt; loop, which acts like the opposite of a while loop, and will run a block of code &lt;strong&gt;until&lt;/strong&gt; some condition is true:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;counter = 0&#xA;until counter == 10&#xA;  puts &#34;Counting!&#34;&#xA;  counter += 1&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Looping with &lt;code&gt;#times&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;JavaScript has a &lt;code&gt;for&lt;/code&gt; loop, which is commonly used to run some condition a set number of times:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;for (let i = 0; i &amp;lt; 10; i++) {&#xA;  console.log(`Looping!`);&#xA;  console.log(`i is: ${i}`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While Ruby does also have a &lt;code&gt;for&lt;/code&gt; loop, you will see them used less often by Rubyists, since Ruby has a few other more expressive ways to run code in a loop. One such approach is to use the &lt;code&gt;#times&lt;/code&gt; loop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;10.times do |i|&#xA;  puts &#34;Looping!&#34;&#xA;  puts &#34;i is: #{i}&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The syntax here is quite different from JavaScript, so let&#39;s break it down.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#times&lt;/code&gt; is a &lt;a href=&#34;https://ruby-doc.org/core-2.7.3/Integer.html#method-i-times&#34;&gt;method in the Integer class&lt;/a&gt; that can be called on a number. It takes a block of code as an argument, starting with &lt;code&gt;do&lt;/code&gt; and ending with &lt;code&gt;end&lt;/code&gt;, and will run the code inside that block in a loop. You can optionally provide a &lt;strong&gt;block parameter&lt;/strong&gt;, which in the example above, is represented by the &lt;code&gt;i&lt;/code&gt; variable within the pipes: &lt;code&gt;|i|&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Between the &lt;code&gt;do&lt;/code&gt; and the &lt;code&gt;end&lt;/code&gt;, you write whatever code you want to run in the loop.&lt;/p&gt; &#xA;&lt;p&gt;Each time Ruby runs the loop, it will assign a new value for the block parameter &lt;code&gt;i&lt;/code&gt;, which will start at 0 and end at 9 (since we&#39;re running this loop 10 times):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;10.times do |i|&#xA;  puts &#34;i is: #{i}&#34;&#xA;end&#xA;# i is: 0&#xA;# i is: 1&#xA;# i is: 2&#xA;# i is: 3&#xA;# i is: 4&#xA;# i is: 5&#xA;# i is: 6&#xA;# i is: 7&#xA;# i is: 8&#xA;# i is: 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to the &lt;code&gt;do&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; syntax, Ruby also allows you to use curly parentheses to define blocks. This syntax is commonly used for one-line blocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;10.times { |i| puts &#34;i is: #{i}&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ruby blocks are just about as important a feature of the Ruby language as callbacks are in JavaScript (and they serve similar purposes). They&#39;re an incredibly powerful tool, and you&#39;ll see them used in many different scenarios, including writing loops, so make sure to familiarize yourself with this syntax!&lt;/p&gt; &#xA;&lt;h2&gt;Looping with &lt;code&gt;#each&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The last looping construct we&#39;ll discuss in Ruby is the &lt;code&gt;#each&lt;/code&gt; method. The &lt;code&gt;#each&lt;/code&gt; method can be used with a few different data types, including arrays and objects (as we&#39;ll see later), but one common use case for the &lt;code&gt;#each&lt;/code&gt; method is to use it with a &lt;a href=&#34;https://www.rubyguides.com/2016/06/ruby-ranges-how-do-they-work/&#34;&gt;Range&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;(1..20).each do |num|&#xA;  puts num&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be helpful for running a loop of a specified set of numbers, starting with any value you like! Compare this to equivalent code in JavaScript using a &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;for (let i = 1; i &amp;lt;= 20; i++) {&#xA;  console.log(i);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see how methods like &lt;code&gt;#each&lt;/code&gt; help us write cleaner code that more clearly expresses our intent.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Time to get some practice! Write your code in the &lt;code&gt;looping.rb&lt;/code&gt; file. Run &lt;code&gt;learn test&lt;/code&gt; to check your work. Your goal is to practice using control flow in Ruby to familiarize yourself with the syntax. There is a JavaScript version of the solution for each of these deliverables in the &lt;code&gt;js/index.js&lt;/code&gt; file you can look at (but if you want an extra challenge, try solving them in Ruby without looking at the JavaScript solution).&lt;/p&gt; &#xA;&lt;p&gt;Write a method &lt;code&gt;#happy_new_year&lt;/code&gt; using a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;until&lt;/code&gt; loop that outputs numbers starting at 10 and counting down to 1. After reaching 1, print out &#34;Happy New Year!&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;happy_new_year&#xA;# =&amp;gt; 10&#xA;# =&amp;gt; 9&#xA;# =&amp;gt; 8&#xA;# =&amp;gt; ...&#xA;# =&amp;gt; 1&#xA;# =&amp;gt; Happy New Year!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write a method &lt;code&gt;#reverse_string&lt;/code&gt; that takes one argument, a string, and reverses it. Don&#39;t use the built-in &lt;code&gt;.reverse&lt;/code&gt; method. Instead, loop through the characters in the input string and reverse it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;reverse_string(&#34;hello&#34;)&#xA;# =&amp;gt; &#34;olleh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write a method &lt;code&gt;#fizzbuzz&lt;/code&gt; that prints the numbers from 1 to 100. For multiples of three, print &#34;Fizz&#34; instead of the number and for the multiples of five print &#34;Buzz&#34;. For numbers which are multiples of both three and five, print &#34;FizzBuzz&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;fizzbuzz&#xA;# 1&#xA;# 2&#xA;# Fizz&#xA;# 4&#xA;# Buzz&#xA;# Fizz&#xA;# 7&#xA;# ...&#xA;# 14&#xA;# FizzBuzz&#xA;# 16&#xA;# ...&#xA;# 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rubyguides.com/ruby-tutorial/loops/&#34;&gt;Ruby Loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mixandgo.com/learn/ruby-blocks&#34;&gt;Mastering Ruby Blocks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>