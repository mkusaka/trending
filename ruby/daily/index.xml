<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:40:46Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cncf/gitdm</title>
    <updated>2022-11-13T01:40:46Z</updated>
    <id>tag:github.com,2022-11-13:/cncf/gitdm</id>
    <link href="https://github.com/cncf/gitdm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📜Fork for tracking CNCF projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CNCF gitdm&lt;/h1&gt; &#xA;&lt;p&gt;This is the Cloud Native Computing Foundation&#39;s fork of Jon Corbet and Greg KH&#39;s &lt;a href=&#34;https://lwn.net/Articles/290957/&#34;&gt;gitdm&lt;/a&gt; tool for calculating contributions based on developers and their companies. Companies and developers can check if they are correctly attributed at the following links:&lt;/p&gt; &#xA;&lt;p&gt;Company Developers list: &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers1.txt&#34;&gt;co1&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers2.txt&#34;&gt;co2&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers3.txt&#34;&gt;co3&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers4.txt&#34;&gt;co4&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers5.txt&#34;&gt;co5&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers6.txt&#34;&gt;co6&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers7.txt&#34;&gt;co7&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers8.txt&#34;&gt;co8&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Developers affiliations list: &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations1.txt&#34;&gt;dev1&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations2.txt&#34;&gt;dev2&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations3.txt&#34;&gt;dev3&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations4.txt&#34;&gt;dev4&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations5.txt&#34;&gt;dev5&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;New affiliations are imported into DevStats about 1-2 times/month.&lt;/p&gt; &#xA;&lt;h1&gt;DevStats&lt;/h1&gt; &#xA;&lt;p&gt;This repository is used as a source of affiliations for all &lt;a href=&#34;https://devstats.cncf.io&#34;&gt;DevStats projects&lt;/a&gt;. The final &lt;a href=&#34;https://github.com/cncf/devstats/raw/master/github_users.json&#34;&gt;affiliations JSON&lt;/a&gt; is periodically imported by the &lt;a href=&#34;https://github.com/cncf/devstats&#34;&gt;DevStats project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Adding/Updating affiliation&lt;/h1&gt; &#xA;&lt;p&gt;If you find any errors or missing affiliations in those lists, please submit a pull request with edits to developers affiliations files: &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations1.txt&#34;&gt;dev1&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations2.txt&#34;&gt;dev2&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations3.txt&#34;&gt;dev3&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations4.txt&#34;&gt;dev4&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations5.txt&#34;&gt;dev5&lt;/a&gt;, ... .&lt;/p&gt; &#xA;&lt;p&gt;Only the Developers affiliations list &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations1.txt&#34;&gt;dev1&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations2.txt&#34;&gt;dev2&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations3.txt&#34;&gt;dev3&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations4.txt&#34;&gt;dev4&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/developers_affiliations5.txt&#34;&gt;dev5&lt;/a&gt;, ... should be edited manually.&lt;/p&gt; &#xA;&lt;p&gt;Company Developers lists &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers1.txt&#34;&gt;co1&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers2.txt&#34;&gt;co2&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers3.txt&#34;&gt;co3&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers4.txt&#34;&gt;co4&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers5.txt&#34;&gt;co5&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers6.txt&#34;&gt;co6&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers7.txt&#34;&gt;co7&lt;/a&gt;, &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/company_developers8.txt&#34;&gt;co8&lt;/a&gt; are computed derivatives of the first list.&lt;/p&gt; &#xA;&lt;p&gt;Other files used for affiliations are the &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/src/cncf-config/email-map&#34;&gt;email map file&lt;/a&gt; and &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/src/github_users.json&#34;&gt;github users&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Please note that &lt;code&gt;cncf/gitdm&lt;/code&gt; affiliations are imported into DevStats (&lt;code&gt;cncf/devstats&lt;/code&gt;) once per 4 weeks.&lt;/p&gt; &#xA;&lt;h1&gt;Removing affiliations&lt;/h1&gt; &#xA;&lt;p&gt;If you &lt;strong&gt;do not want&lt;/strong&gt; to have your email listed here please read &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/FORBIDDEN_DATA.md&#34;&gt;how to remove your email&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Testing changes&lt;/h1&gt; &#xA;&lt;p&gt;You can test any changes locally by cloning this repository and regenerating all data by running &lt;code&gt;./rerun_data.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then generate config files by running: &lt;code&gt;./import_affs.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If those two files are out of sync, the tool will notify you about this.&lt;/p&gt; &#xA;&lt;p&gt;This tool will generate a new &lt;code&gt;email-map&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Check if your changes processed properly and move the file to &lt;code&gt;cncf-config/email-map&lt;/code&gt; (replace)&lt;/p&gt; &#xA;&lt;h1&gt;Sync workflow&lt;/h1&gt; &#xA;&lt;p&gt;Please follow the instructions from &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/SYNC.md&#34;&gt;SYNC.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Running&lt;/h1&gt; &#xA;&lt;p&gt;Use &lt;code&gt;*.sh&lt;/code&gt; scripts to run analytics (&lt;code&gt;all*.sh&lt;/code&gt; for full analysis and &lt;code&gt;rels*.sh&lt;/code&gt; for per release stats)&lt;/p&gt; &#xA;&lt;p&gt;This program assumes that gitdm resides in: &lt;code&gt;~/dev/cncf/gitdm/&lt;/code&gt; and that kubernetes is in &lt;code&gt;~/dev/go/src/k8s.io/kubernetes/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Output files are placed in the &lt;code&gt;kubernetes&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To regenerate all statistics just run: &lt;code&gt;./rerun_data.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an iterative process: Run any of the scripts. Review its output in the &lt;code&gt;kubernetes&lt;/code&gt; directory. Iteratively adjust mappings to handle more authors.&lt;/p&gt; &#xA;&lt;p&gt;You can also run via &lt;code&gt;./debug.sh&lt;/code&gt; to halt in debugger and review the hacker&#39;s structure and those who were not found. See &lt;code&gt;cncfdm.py&lt;/code&gt;:&lt;code&gt;DebugUnknowns&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Final report:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/15otmXVx8Gd6JzfiGP_OSjP8M9zyLeLof5-IGQKEb0UQ/edit?usp=sharing&#34;&gt;Data&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/1RKtRamlu4D_OpTDFTKNpMsmV51obdZlPWbXVj-LrDuw/edit?usp=sharing&#34;&gt;Report&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Pull requests are welcome.&lt;/p&gt; &#xA;&lt;p&gt;Our mapping is never complete, please see config files in &lt;a href=&#34;https://github.com/cncf/gitdm/tree/master/src/cncf-config&#34;&gt;Config files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;File &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/src/cncf-config/email-map&#34;&gt;email-map&lt;/a&gt; is a direct email to the employer mapping.&lt;/p&gt; &#xA;&lt;p&gt;There is also a long list of unknown emails. For that, scroll to the section called &lt;code&gt;Developers with unknown affiliation&lt;/code&gt;: in &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/src/all.txt&#34;&gt;all.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All of those were searched for in various sources but we were not able to find their affiliation.&lt;/p&gt; &#xA;&lt;h1&gt;Detailed Description&lt;/h1&gt; &#xA;&lt;p&gt;Regenerating all data with &lt;code&gt;./rerun_data.sh&lt;/code&gt; means:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data for &lt;code&gt;kubernetes/kubernetes&lt;/code&gt; repository (all time) with 3 mappings of Unknown developers: no mapping (list them with their email &amp;amp; name), map them to their email domain (&lt;code&gt;user@gmail.com&lt;/code&gt; --&amp;gt; &lt;code&gt;&#39;Gmail *&#39;&lt;/code&gt;), map all of them to &#39;(Unknown)&#39;. This is done via running: (&lt;code&gt;./all.sh&lt;/code&gt;, &lt;code&gt;./all_no_map.sh&lt;/code&gt;, &lt;code&gt;./all_with_map.sh&lt;/code&gt;). Output goes to &lt;code&gt;kubernetes/all_time/&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;Data for &lt;code&gt;kubernetes/kubernetes&lt;/code&gt; repository divided into releases v1.0.0, v1.1.0, ..., v1.7.0 (with 3 types of mappings described above). This is done via (&lt;code&gt;./rels.sh&lt;/code&gt;, &lt;code&gt;./rels_strict.sh&lt;/code&gt;, &lt;code&gt;./rels_no_map.sh&lt;/code&gt;). Output goes to &lt;code&gt;kubernetes/v1.X.0-v1.Y.0/&lt;/code&gt; directory: X=0,1,2,3,4,5,6 Y=1,2,3,4,5,6,7)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After performing those two steps, &lt;code&gt;cncfdm.py&lt;/code&gt; output needs to be analysed. It is done by calling: &lt;code&gt;./analysis_all.sh&lt;/code&gt; (analyses all-time results) and then &lt;code&gt;./analysis_rels.sh&lt;/code&gt; (for pre-release data)&lt;/p&gt; &#xA;&lt;p&gt;Data for all 68 repos (currently) which makes the entire Kubernetes project with &lt;code&gt;./kubernetes_repos.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;Final files generated by first 2 calls (for single repo kubernetes/kubernetes) are in &lt;code&gt;kubernetes/all_time/*.txt&lt;/code&gt; and &lt;code&gt;./kubernetes/v1.X.0-v1.Y.0/*.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;All scripts are configured to ignore commits related to files from &lt;code&gt;vendor&lt;/code&gt; and &lt;code&gt;Godeps&lt;/code&gt; directories. This is because external sources are placed here and many commits are just adding external libraries. Accounting for them would make the results less accurate&lt;/p&gt; &#xA;&lt;p&gt;All of them use a &lt;code&gt;git log&lt;/code&gt; call with specific args piped to &lt;code&gt;cncfdm.py&lt;/code&gt; call with specific parameters.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;./run.sh&lt;/code&gt; for an example. All other calls use the same commands &lt;code&gt;git log&lt;/code&gt; and &lt;code&gt;cncfdm.py&lt;/code&gt; with other parameters.&lt;/p&gt; &#xA;&lt;p&gt;To get a list of parameters for &lt;code&gt;cncfdm.py&lt;/code&gt;, see comments inside of the &lt;code&gt;cncfdm.py&lt;/code&gt; file describing all possible options.&lt;/p&gt; &#xA;&lt;p&gt;For more details about how &lt;code&gt;cncfdm.py&lt;/code&gt; tool works refer to its sources and other &lt;code&gt;*.py&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;Those files are analysed by &lt;code&gt;./analysis_all.sh&lt;/code&gt; and &lt;code&gt;./analysis_rels.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first one calls: &lt;code&gt;ruby analysis.rb all kubernetes/all_time/first_run_patch.txt kubernetes/all_time/run_no_map_patch.txt kubernetes/all_time/run_with_map_patch.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The second calls: &lt;code&gt;ruby analysis.rb v1.0_v1.1 kubernetes/*/output_strict_patch.txt kubernetes/*/output_patch.txt kubernetes/*/output_no_map_patch.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This ruby tool expects to get 3 files (one with no unknown developers mapping, 2nd with mapping to a domain name and 3rd with mapping to (Unknown).&lt;/p&gt; &#xA;&lt;p&gt;The output of this analysis.rb tool goes to &lt;code&gt;project/&amp;lt;prefix&amp;gt;_&amp;lt;key&amp;gt;_&amp;lt;type&amp;gt;&lt;/code&gt;.csv files. &#xA; &lt;prefix&gt;&#xA;  : can be &#xA;  &lt;code&gt;all&lt;/code&gt; or &#xA;  &lt;code&gt;v1.X.0-v1.Y.0&lt;/code&gt; - it means that the file is for all time data or for a specific release of &#xA;  &lt;code&gt;kubernetes/kubernetes&lt;/code&gt; &#xA;  &lt;key&gt;&#xA;   : can be changeset, employers, lines, signoffs - it means that the file contains data sorted by this &#xA;   &lt;key&gt;&#xA;     desc. &#xA;    &lt;type&gt;&#xA;     : can be &#xA;     &lt;code&gt;sum&lt;/code&gt;, &#xA;     &lt;code&gt;top&lt;/code&gt;, &#xA;     &lt;code&gt;all&lt;/code&gt;:&#xA;    &lt;/type&gt;&#xA;   &lt;/key&gt;&#xA;  &lt;/key&gt;&#xA; &lt;/prefix&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;all&lt;/code&gt; means that the file contains all data for given &#xA;  &lt;prefix&gt;&#xA;    sorted by &#xA;   &lt;key&gt;&#xA;     desc (header is: &#xA;    &lt;code&gt;idx,company,n,percent&lt;/code&gt; which means n-th, company name, n developers, % all developers) &#xA;    &lt;code&gt;All known&lt;/code&gt; is the sum of all detected developers&#xA;   &lt;/key&gt;&#xA;  &lt;/prefix&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;top&lt;/code&gt; means that there will be top 10 data from &lt;code&gt;all&lt;/code&gt; but also must contain data for: &#39;(Unknown)&#39;, &#39;Gmail *&#39;, &#39;Qq *&#39;, &#39;Outlook *&#39;, &#39;Yahoo *&#39;, &#39;Hotmail *&#39;, &#39;(Independent)&#39;, &#39;(Not Found)&#39;. The header is the same as in &lt;code&gt;all&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sum&lt;/code&gt; contains a summary value for all found developers. It has a different header: &lt;code&gt;N companies,sum,percent&lt;/code&gt; number of developer&#39;s companies found, the sum of &#xA;  &lt;key&gt;&#xA;    for all found developers, % of the sum &#xA;   &lt;key&gt;&#xA;     as a part of the sum &#xA;    &lt;key&gt;&#xA;      for all developers.&#xA;    &lt;/key&gt;&#xA;   &lt;/key&gt;&#xA;  &lt;/key&gt;&lt;/li&gt; &#xA; &lt;li&gt;Special names: &lt;code&gt;All known&lt;/code&gt; (sum all known developers), &lt;code&gt;(Independent)&lt;/code&gt; (developers working on their own), &lt;code&gt;(Not Found)&lt;/code&gt; (developers for whom an employer was not found even though the search was done in multiple sources), &lt;code&gt;(Unknown)&lt;/code&gt; (developers not mapped (yet?)), &lt;code&gt;Some name *&lt;/code&gt; (sum of developers having emails on &lt;code&gt;Some name&lt;/code&gt; domain).An asterisk &lt;code&gt;*&lt;/code&gt; is added to indicate this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This data is directly used for the &#34;Who writes Kubernetes&#34; report.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./kubernetes_repos.sh&lt;/code&gt; script is used to generate all-time data for all the kubernetes repos.&lt;/p&gt; &#xA;&lt;p&gt;To use it, you must have all of kubernetes repositories (68 from 3 different organizations) cloned in &lt;code&gt;~/dev/go/src/k8s/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Orgs are: kubernetes, kubernetes-incubator, kubernetes-client.&lt;/p&gt; &#xA;&lt;p&gt;It generates statistics for each single repo via: &lt;code&gt;./anyrepo.sh ~/dev/go/src/k8s.io/&amp;lt;repo-name&amp;gt; &amp;lt;repo-name&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See details in &lt;code&gt;./kubernetes_repos.sh&lt;/code&gt;. &#xA; &lt;repo-name&gt;&#xA;   is a directory where a given kubernetes repository is cloned.&#xA; &lt;/repo-name&gt;&lt;/p&gt; &#xA;&lt;p&gt;To clone a repository, do: &lt;code&gt;cd ~/dev/go/src/k8s/&lt;/code&gt; &lt;code&gt;git clone https://github.com/&amp;lt;one-of-3-kubernetes-orgs&amp;gt;/&amp;lt;kubernetes-repo-name&amp;gt;.git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;one-of-3-kubernetes-orgs: kubernetes, kubernetes-incubator and kubernetes-client&lt;/p&gt; &#xA;&lt;p&gt;kubernetes-repo-name: please look up all repo names in all kubernetes orgs on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./anyrepo.sh&lt;/code&gt; just calls &lt;code&gt;cncfdm.py&lt;/code&gt; with appropriate args (like exclude vendor dir numstat etc).&lt;/p&gt; &#xA;&lt;p&gt;There is also &lt;code&gt;./anyreporange.sh&lt;/code&gt; that allows querying a repo for a specific time range (&lt;code&gt;cncfdm.py&lt;/code&gt; supports that as well).&lt;/p&gt; &#xA;&lt;p&gt;Output of this goes to &lt;code&gt;repos/&amp;lt;repo-name&amp;gt;.&amp;lt;ext&amp;gt;&lt;/code&gt; &#xA; &lt;repo-name&gt;&#xA;  : repository name &#xA;  &lt;code&gt;./anyrepo.sh&lt;/code&gt; was called with. &#xA;  &lt;ext&gt;&#xA;   : txt, csv, html, out: txt: main data file, csv: dumps list of employers in given repo, html: the same as txt but in HTML format, out: &#xA;   &lt;code&gt;cncfdm.py&lt;/code&gt; verbose output messages (for debugging)&#xA;  &lt;/ext&gt;&#xA; &lt;/repo-name&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finally, &lt;code&gt;./kubernetes_repos.sh&lt;/code&gt; calls: &lt;code&gt;./multirepo.sh&lt;/code&gt; with all 68 repository directories listed.&lt;/p&gt; &#xA;&lt;p&gt;It gathers &lt;code&gt;git log&lt;/code&gt; on each of them and concatenates all those files and then run &lt;code&gt;cncfdm.py&lt;/code&gt; on the concatenated result (see &lt;code&gt;./multirepo.sh&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Results are saved to &lt;code&gt;repos/combined.&amp;lt;ext&amp;gt;&lt;/code&gt; &#xA; &lt;ext&gt;&#xA;   is the same as for &#xA;  &lt;code&gt;anyrepo.sh&lt;/code&gt;.&#xA; &lt;/ext&gt;&lt;/p&gt; &#xA;&lt;p&gt;The typical workflow is re-runing &lt;code&gt;./kubernetes_repos.sh&lt;/code&gt; and examining &lt;code&gt;repos/combined.txt&lt;/code&gt; for unknown developers.&lt;/p&gt; &#xA;&lt;p&gt;Research on google, Clearbit, FullContact, github, LinkedIn, Facebook, any other source -&amp;gt; update &lt;code&gt;cncf-config/&amp;lt;filename&amp;gt;&lt;/code&gt; and re-run &lt;code&gt;./kubernetes_repos.sh&lt;/code&gt; &#xA; &lt;filename&gt;&#xA;  : usually in this order: email-map, domain-map, a in very rare cases: aliases, gitdm.config-cncf or group mappings in groups/&#xA; &lt;/filename&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, when running data for a single &lt;code&gt;kubernetes/kubernetes&lt;/code&gt; for example with &lt;code&gt;./all.sh&lt;/code&gt; examining developers found in &lt;code&gt;./kubernetes/all_time/first_run_patch.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After all this data is generated, &lt;code&gt;./kubernetes_repos.sh&lt;/code&gt; concatenates all single repo data into a single output file: &lt;code&gt;repos/merged.out&lt;/code&gt; to allow browsing all the data in a single file.&lt;/p&gt; &#xA;&lt;p&gt;It also generates developers and companies statistics via a &lt;code&gt;./topdevs.sh&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;It calls a ruby tool on the combined output of all 68 kubernetes repos (saved as CSV) like so: &lt;code&gt;ruby topdevs.rb repos/combined.csv&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;That tool generates files as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;companies_by_name.csv&lt;/code&gt; - this is a list of companies found, sorted by their names (not case sensitive) to allow manual examination for duplicates that came about from different names such as &#34;Google&#34; vs &#34;Googe Corporation&#34; vs &#34;Google Corp.&#34; or &#34;google&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;companies_by_count.csv&lt;/code&gt; - list of companies found, sorted (desc) by the number of employers. This serves a similar purpose but from a different perspective.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unknown_devs.txt&lt;/code&gt;, &lt;code&gt;unknown_devs.csv&lt;/code&gt;, &lt;code&gt;unknown_emails.csv&lt;/code&gt; - list of developers for whom there isn&#39;t a mapping. Used to prioritize searching for devs, and &lt;code&gt;unknown_emails.csv&lt;/code&gt; is in the format fitting a clearbit batch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are clearbit tools in &lt;code&gt;clearbit_tools/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Look for any files with &lt;code&gt;.rb&lt;/code&gt; extension. 3 rounds of commercial Clearbit requests were performed. And they returned quite a lot of data.&lt;/p&gt; &#xA;&lt;p&gt;But those files are not checked in and are listed in &lt;code&gt;./.gitignore&lt;/code&gt; because we have to pay for that data.&lt;/p&gt; &#xA;&lt;p&gt;Those tools are used to enrich of &lt;code&gt;cncf-config/email-map&lt;/code&gt; mapping. &lt;code&gt;google_other.txt&lt;/code&gt; - contains a list of Google developers with email on a domain different than &lt;code&gt;@google.com&lt;/code&gt;. &lt;code&gt;./changesets.csv&lt;/code&gt;, &lt;code&gt;./added.csv&lt;/code&gt;, &lt;code&gt;./removed.csv&lt;/code&gt; files contain developers sorted by changesets, added lines, removed lines desc.&lt;/p&gt; &#xA;&lt;p&gt;A new set of tools to get Clearbit and FullContact data is located in &lt;code&gt;affiliation_finder/&lt;/code&gt; directory. The two tools are described inthe &#39;Tools to help find unknown affiliations&#39; section of this document.&lt;/p&gt; &#xA;&lt;p&gt;This is used to generate Top N developers in given criteria.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./new_devs.sh&lt;/code&gt; (also used by &lt;code&gt;./rerun_data.sh&lt;/code&gt;) is used to generate statistics about new developers between &lt;code&gt;kubernetes/kubernetes&lt;/code&gt; releases.&lt;/p&gt; &#xA;&lt;p&gt;It calls: &lt;code&gt;ruby new_devs.rb kubernetes/v1.X.0-v1.Y.0/output_strict_patch.csv&lt;/code&gt; for all X and Y. &lt;code&gt;new_devs.rb&lt;/code&gt; simply generates information about developers who were new between each release and file &lt;code&gt;new_devs.csv&lt;/code&gt;, which contains a list of companies who introduced most new developers overall (sorted by # of new developers desc).&lt;/p&gt; &#xA;&lt;p&gt;That covers a typical usage and data for &#34;Who writes Kubernetes report&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Other tools&lt;/h2&gt; &#xA;&lt;p&gt;Other tools include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;see_parser.sh&lt;/code&gt; - display data feed as used by &lt;code&gt;cncfdm.py&lt;/code&gt; tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;range.sh&lt;/code&gt; - generate stats for &lt;code&gt;Linux kernel&lt;/code&gt; for given data range (1st and 2nd command line argument like 2016-01-01 2017-01-01), assumes Linux repo (&lt;code&gt;torvalds/linux&lt;/code&gt;) is cloned in &lt;code&gt;~/dev/linux/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;range_&amp;lt;period&amp;gt;.sh&lt;/code&gt; - used to generate monthly, quarterly, yearly stats using above &lt;code&gt;./range.sh&lt;/code&gt;, for example &lt;code&gt;./range_monthly.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To work on Prometheus contributors before and after joining CNCF:&lt;/p&gt; &#xA;&lt;p&gt;Prometheus joined CNCF on 2016-05-09.&lt;/p&gt; &#xA;&lt;p&gt;You need to clone all Prometheus repos into &lt;code&gt;~/dev/prometheus&lt;/code&gt; using &lt;code&gt;./clone_prometheus.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then you need to get several distinct Prometheus contributors before joining CNCF: ./prometheus_repos.sh 2015-05-09 2016-05-08 ~/dev/prometheus/&lt;/p&gt; &#xA;&lt;p&gt;Result is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed 2721 csets from 230 developers&#xA;252 employers found&#xA;A total of 1558445 lines added, 353900 removed (delta 1204545)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now check the number of distinct contributors after 2016-05-09: &lt;code&gt;./prometheus_repos.sh 2016-05-09 2017-06-01 ~/dev/prometheus/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed 2817 csets from 346 developers&#xA;365 employers found&#xA;A total of 2696196 lines added, 771502 removed (delta 1924694)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We have a change from 230 to 365 which is a 59% increase.&lt;/p&gt; &#xA;&lt;h1&gt;Report&lt;/h1&gt; &#xA;&lt;p&gt;Links to data and generated report are here: &lt;code&gt;./res/links.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CNCF Projects join statistics&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;CNCF Projects join dates are: &lt;a href=&#34;https://github.com/cncf/toc#projects&#34;&gt;https://github.com/cncf/toc#projects&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate statistics for Prometheus 90 days before joining CNCF and 90 days after joining try this:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./clone_prometheus.sh&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./cncf_join_analysis.sh prometheus 2016-05-09 90 ~/dev/prometheus/&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Results go to &lt;code&gt;prometheus_repos/result.txt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a directory where you want to put links to kubernetes repos, like this: &lt;code&gt;mkdir ~/dev/kubernetes_repos_links&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy &lt;code&gt;kubernetes_repos.sh&lt;/code&gt; to &lt;code&gt;link_kubernetes_repos.sh&lt;/code&gt;: &lt;code&gt;cp kubernetes_repos.sh link_kubernetes_repos.sh&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the copy and add 1st line: &lt;code&gt;cd ~/dev/kubernetes_repos_links&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Replace lines like &lt;code&gt;./anyrepo.sh ~/dev/go/src/k8s.io/test-infra/ test-infra&lt;/code&gt; with &lt;code&gt;ln -s ~/dev/go/src/k8s.io/test-infra/ test-infra&lt;/code&gt;; run it; done. k8s repos links are now in &lt;code&gt;~/dev/kubernetes_repos_links&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The command that takes on Kubernetes repos should be: &lt;code&gt;./cncf_join_analysis.sh kubernetes 2016-03-10 90 ~/dev/kubernetes_repos_links&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Results go to &lt;code&gt;kubernetes_repos/result.txt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate statistics for OpenTracing 90 days before joining CNCF and 90 days after joining try this:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./clone_opentracing.sh&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./cncf_join_analysis.sh opentracing 2016-08-17 90 ~/dev/opentracing/&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Results go to &lt;code&gt;opentracing_repos/result.txt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is also an All-in-one script to regenerate all CNCF Projects joint statistics, run &lt;code&gt;./join_stats.sh&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Typical update of &#34;Who writes Kubernetes report&#34;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./pull_kubernetes.sh&lt;/code&gt; to get all Kubernetes repos updated.&lt;/li&gt; &#xA; &lt;li&gt;Change directory to &lt;code&gt;dev/go/src/k8s.io/kubernetes/&lt;/code&gt; and update this repository as well.&lt;/li&gt; &#xA; &lt;li&gt;New release since the last run (1.7) so many scripts needs to be updated. Also, all repos from 3 Kubernetes orgs are now in ~/dev/kubernetes/repos so &lt;code&gt;./kubernetes_repos.sh&lt;/code&gt; script needs an update as well&lt;/li&gt; &#xA; &lt;li&gt;Updated &lt;code&gt;kubernetes_repos.sh&lt;/code&gt; script to get repos from &lt;code&gt;~/dev/kubernetes_repos/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Script to regenerate all data is &lt;code&gt;./rerun_data.sh&lt;/code&gt;, it needs to be updated to support v1.7.0&lt;/li&gt; &#xA; &lt;li&gt;Now report is: &lt;a href=&#34;https://docs.google.com/document/d/1RKtRamlu4D_OpTDFTKNpMsmV51obdZlPWbXVj-LrDuw/edit?usp=sharing&#34;&gt;https://docs.google.com/document/d/1RKtRamlu4D_OpTDFTKNpMsmV51obdZlPWbXVj-LrDuw/edit?usp=sharing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Report data sheet/draft is: &lt;a href=&#34;https://docs.google.com/spreadsheets/d/15otmXVx8Gd6JzfiGP_OSjP8M9zyLeLof5-IGQKEb0UQ/edit#gid=0&#34;&gt;https://docs.google.com/spreadsheets/d/15otmXVx8Gd6JzfiGP_OSjP8M9zyLeLof5-IGQKEb0UQ/edit#gid=0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now report sections:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Since the Kubernetes project started in June 2014, 2623 Developers from 789 Companies worked on it (counting Kubernetes and all its projects 68 repos from 3 orgs).&#xA;A total of 28.4 million lines of code were added, 16.3 million lines removed.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Taken from: &lt;code&gt;./repos/combined.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed 59041 csets from 2623 developers&#xA;789 employers found&#xA;A total of 28440262 lines added, 16342872 removed (delta 12097390)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a single kubernetes/kubernetes repo, the data is in: &lt;code&gt;kubernetes/all_time/first_run_numstat.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed 28225 csets from 1338 developers&#xA;400 employers found&#xA;A total of 6667288 lines added, 4132224 removed (delta 2535064)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About how to fill data sheet/chart:&lt;/li&gt; &#xA; &lt;li&gt;Sheet &#34;all time data&#34;:&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;analysis_all_repos.sh&lt;/code&gt;, generates files starting with: &lt;code&gt;report/all_repos_rest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;report/prefix_key_type&lt;/code&gt; (prefix: all - for kubernetes/kubernetes, all_repos - for all repos, v1.x for releases), project/&#xA;  &lt;prefix&gt;&#xA;   &lt;em&gt;&#xA;    &lt;key&gt;&lt;/key&gt;&lt;/em&gt;&#xA;   &lt;type&gt;&lt;/type&gt;&#xA;  &lt;/prefix&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commits info is in &lt;code&gt;other_repos/all_kubernetes_dtfrom_dtto&lt;/code&gt; and &lt;code&gt;other_repos/kubernetes_dtfrom_dtto&lt;/code&gt; (for all k8s repos and kubernetes/kubernetes alone)&lt;/li&gt; &#xA; &lt;li&gt;To see commits for all kubernetes repos combined for last year &amp;amp; for last 12 months (each) separately: &lt;code&gt;grep -HIn &#34;csets from&#34; other_repos/all_kubernetes_range_unknown_201*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The same for &lt;code&gt;kubernetes/kubernetes&lt;/code&gt; repo: &lt;code&gt;grep -HIn &#34;csets from&#34; other_repos/kubernetes_range_unknown_201*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update report and report data sheet with those results&lt;/li&gt; &#xA; &lt;li&gt;Number of github events etc - from &lt;code&gt;cncf/velocity:projects/unlimited.csv&lt;/code&gt; (this is for 201606-201705)&lt;/li&gt; &#xA; &lt;li&gt;Values for May 2017 are in: &lt;code&gt;cncf/velocity:projects/cncf_projects_201705.csv&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;activity,comments,prs,commits,issues,authors&#xA;Last year: 308313,217684,46351,16000,28278,1728&#xA;Last month: 30227,21371,4645,1741,2470,451&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Analyses of kubernetes/kubernetes (main repo) are in this format: &lt;code&gt;report/all_{key}_top.csv&lt;/code&gt;, import them to the 2nd sheet&lt;/li&gt; &#xA; &lt;li&gt;Big summaries like all developers etc are in &lt;code&gt;./repos/combined.txt&lt;/code&gt;, for the main k8s repo: &lt;code&gt;kubernetes/all_time/first_run_numstat.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Top developer stats are here: &lt;code&gt;stats/all_key.csv&lt;/code&gt; (for all repos), &lt;code&gt;stats/kubernetes_key.csv&lt;/code&gt; (for the main repo) and &lt;code&gt;stats/v1.x_key.csv&lt;/code&gt; per versions.&lt;/li&gt; &#xA; &lt;li&gt;Import those to the last 3 sheets in the data set&lt;/li&gt; &#xA; &lt;li&gt;Per verion data: &lt;code&gt;report/v1.x_v1.y_key_top.csv&lt;/code&gt;, key: changesets, lines, developers, import to the datasheet for all versions: 7 x 3 = 21 imports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Affiliations of some developers are uncertain despite the best effort. These developers are listed in &lt;code&gt;uncertain.csv&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;GitHub users can be pulled using Octokit GitHub API.&lt;/h2&gt; &#xA;&lt;p&gt;To do this, call: &lt;code&gt;ruby ghusers.rb&lt;/code&gt; or &lt;code&gt;./ghusers.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Required are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standard GitHub OAuth token: &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;https://github.com/settings/tokens&lt;/a&gt; --&amp;gt; Personal access tokens, put it in &lt;code&gt;/etc/github/oauth&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;A GitHub Application to increase the rate limit from 60 to 5000 (60 is not enough to process kubernetes, 5000 is enough).&lt;/li&gt; &#xA; &lt;li&gt;See: &lt;a href=&#34;https://github.com/settings/&#34;&gt;https://github.com/settings/&lt;/a&gt; --&amp;gt; OAuth application, put your client_id and client_secret in &lt;code&gt;/ect/github/client_id&lt;/code&gt;, &lt;code&gt;/etc/github/client_secret&lt;/code&gt; files.&lt;/li&gt; &#xA; &lt;li&gt;This tool will cache all GitHub calls (save them as JSON files in &lt;code&gt;./ghusers/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Final JSON will be saved in &lt;code&gt;./github_users.json&lt;/code&gt; (subsequent calls will use data from this file, so to reset cache, just remove this file and all files from &lt;code&gt;ghusers/&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;To generate the actual mapping, manually process this JSON (and do some mapping of company names - GitHub users sometimes put strange values there)&lt;/li&gt; &#xA; &lt;li&gt;I&#39;ve done that by iteratively using a new tool: &lt;code&gt;import_from_github_users.sh&lt;/code&gt;, &lt;code&gt;import_from_github_users.rb&lt;/code&gt; with a mapping file (that tries to map a GitHub user company name into something more accurate): &lt;code&gt;company-names-mapping&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools to help find unknown affiliations&lt;/h2&gt; &#xA;&lt;p&gt;To enhance this json with pre-existing affiliations, call: &lt;code&gt;./enchance_json.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate JSON with some filtered data (like all unknown devs with location or LinkedIn profile link or just a blog entry) call: &lt;code&gt;./lookup_json.sh&lt;/code&gt; (see the script for details, also lookup_json.rb have a lot of comments on how to use it).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate a progress report (report about how many Not Found, Unknowns, and Independent devs are defined in our affiliation, call: &lt;code&gt;./progress_report.sh&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate aliases for emails that are already known (are using the same GitHub user name) try &lt;code&gt;./aliaser.sh&lt;/code&gt;, the output is &lt;code&gt;aliaser.txt&lt;/code&gt; that can be analyzed and manually added to &lt;code&gt;cncf-config/aliases&lt;/code&gt; if needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate a correlations map for company name (to avoid mapping typos etc) run &lt;code&gt;./correlations.sh&lt;/code&gt; script.The result is in &lt;code&gt;correlations.txt&lt;/code&gt; file that can be used to update &lt;code&gt;cncf-config/email-map&lt;/code&gt; with corrected employer names.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate per-files/directories statistics, use: &lt;code&gt;./per_dirs.sh&lt;/code&gt;, this is a part of a standard workflow, results are in csv files in the &lt;code&gt;per_dirs&lt;/code&gt; directory&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate affiliation files (&lt;code&gt;developers_affiliations.txt&lt;/code&gt;, &lt;code&gt;company_developers.txt&lt;/code&gt;), use &lt;code&gt;./gen_aff_files.sh&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate data for the stacked chart, run &lt;code&gt;./stacked_chart_&amp;lt;months|rels&amp;gt;_&amp;lt;csets|perc&amp;gt;.sh&lt;/code&gt;. It generates a csv file: &lt;code&gt;stacked_chart_&amp;lt;months|rels&amp;gt;_&amp;lt;csets|perc&amp;gt;.csv&lt;/code&gt;, to generate all stacked charts: &lt;code&gt;./stacked_charts.sh&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To import data from pretty-formatted files use &lt;code&gt;import_affs.sh&lt;/code&gt;, this is not a part of the standard workflow&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All those tools are automatically called when running the full data regeneration script: &lt;code&gt;./rerun_data.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To automatically find affiliations (email to the company) using Clearbit, run two scripts from the affiliation_finder folder in order: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;clearbit_affiliation_lookup.rb&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ruby clearbit_affiliation_merge.rb&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first one works with one argument and generates a file &lt;code&gt;clearbit_affiliation_lookup.csv&lt;/code&gt;. The argument can be skipped or have a value of &#39;true&#39; or &#39;false&#39; - default. Invocation would be &lt;code&gt;clearbit_affiliation_lookup.rb&lt;/code&gt; or &lt;code&gt;clearbit_affiliation_lookup.rb false&lt;/code&gt; or &lt;code&gt;clearbit_affiliation_lookup.rb true&lt;/code&gt;. The argument is used to whether the script&#39;s output data should be overwritten (normally data would be appended to the file) and at the same time it will allow previously looked-up email addresses to be checked again.&lt;br&gt;The execution environment needs to have a proper value for this: &lt;code&gt;Clearbit.key = ENV[&#39;CLEARBIT_KEY&#39;]&lt;/code&gt; It is a secret API key on a Clearbit account that has been set up for a subscription. When the file is generated, open it in a csv editor, sort by the &#39;chance&#39; field. Visually check and correct data in the &#39;affiliation_suggestion&#39; column. Replace values such as &#39;&lt;a href=&#34;http://www.ghostcloud.cn/&#34;&gt;http://www.ghostcloud.cn/&lt;/a&gt;&#39; with &#39;Ghostcloud&#39;. If you find affiliations for other developers manually, just change the &#39;none&#39; value in the &#39;chance&#39; column to &#39;high&#39; and provide a value in the &#39;affiliation_suggestion&#39; column. Columns to the right of &#39;affiliation_suggestion&#39; are not required.&lt;/p&gt; &#xA;&lt;p&gt;The second script reads the &#39;clearbit_affiliation_lookup.csv&#39; file. Data is processed against the &lt;code&gt;cncf-config/email-map&lt;/code&gt; file. When done, the &#39;email-map&#39; file will have new and updated affiliations. The file will be sorted as well. The lookup file will not be altered.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To automatically find affiliations (email to company) using FullContact, run two scripts from affiliation_finder folder in order: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ruby fullcontact_affiliation_lookup.rb&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ruby fullcontact_affiliation_merge.rb&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first one works with one argument and generates a file &lt;code&gt;fullcontact_affiliation_lookup.csv&lt;/code&gt;. The argument can be skipped or have a value of &#39;true&#39; or &#39;false&#39; - default. Invocation would be &lt;code&gt;fullcontact_affiliation_lookup.rb&lt;/code&gt; or &lt;code&gt;fullcontact_affiliation_lookup.rb false&lt;/code&gt; or &lt;code&gt;fullcontact_affiliation_lookup.rb true&lt;/code&gt;. The argument is used to whether the script&#39;s output data should be overwritten (normally data would be appended to the file) and at the same time it will allow previously looked-up email addresses to be checked again.&lt;br&gt;The execution environment needs to have a proper value for this: &lt;code&gt;config.api_key = ENV[&#39;FULLCONTACT_KEY&#39;]&lt;/code&gt; It is a secret API key on a FullContact account that has been set up for a subscription. The columns differ in this file compared to that of Clearbit. If you find affiliations for other developers manually, just change the value in the &#39;org_1&#39; column. The column by default should have 5 pipe-delimited values. If you do not have the values for the other 4, just type 4 pipes. Columns to the right of &#39;org_1&#39; are not required.&lt;/p&gt; &#xA;&lt;p&gt;The second script reads the &#39;clearbit_affiliation_lookup.csv&#39; file. Data is processed against the &lt;code&gt;cncf-config/email-map&lt;/code&gt; file. When done, the &#39;email-map&#39; file will have new and updated affiliations. The file will be sorted as well. The lookup file will not be altered. The merge scripts export developer work history to &lt;code&gt;fullcontact_developer_historical_irganizations.csv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Add a new project ( cncf or non-cncf) to get affiliation for it.&lt;/h1&gt; &#xA;&lt;p&gt;Please follow the instructions from &lt;a href=&#34;https://github.com/cncf/gitdm/raw/master/ADD_PROJECT.md&#34;&gt;ADD_PROJECT.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Authors&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Łukasz Gryglicki &lt;a href=&#34;mailto:lgryglicki@cncf.io&#34;&gt;lgryglicki@cncf.io&lt;/a&gt; - developement.&lt;/li&gt; &#xA; &lt;li&gt;Justyna Gryglicka &lt;a href=&#34;mailto:jgryglicka@cncf.io&#34;&gt;jgryglicka@cncf.io&lt;/a&gt; - researching affiliations data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Links --&gt;</summary>
  </entry>
</feed>