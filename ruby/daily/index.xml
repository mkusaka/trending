<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-15T01:42:07Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ruby/lrama</title>
    <updated>2023-05-15T01:42:07Z</updated>
    <id>tag:github.com,2023-05-15:/ruby/lrama</id>
    <link href="https://github.com/ruby/lrama" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lrama&lt;/h1&gt; &#xA;&lt;p&gt;Lrama is LALR (1) parser generator written by Ruby. The first goal of this project is providing error tolerant parser for CRuby with minimal changes on CRuby parse.y file.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bison style grammar file is supported with some assumptions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;b4_locations_if is always true&lt;/li&gt; &#xA;   &lt;li&gt;b4_pure_if is always true&lt;/li&gt; &#xA;   &lt;li&gt;b4_pull_if is always false&lt;/li&gt; &#xA;   &lt;li&gt;b4_lac_if is always false&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Error Tolerance parser &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Subset of &lt;a href=&#34;https://idus.us.es/bitstream/handle/11441/65631/Repairing%20syntax%20errors.pdf&#34;&gt;Repairing Syntax Errors in LR Parsers (Corchuelo et al.)&lt;/a&gt; algorithm is supported&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ gem install lrama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From source codes,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle exec rake install&#xA;$ lrama --version&#xA;0.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# &#34;y.tab.c&#34; and &#34;y.tab.h&#34; are generated&#xA;$ lrama -d sample/parse.y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Ruby&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Lrama&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make YACC=lrama&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See LEGAL.md file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sidneys/homebrew-homebrew</title>
    <updated>2023-05-15T01:42:07Z</updated>
    <id>tag:github.com,2023-05-15:/sidneys/homebrew-homebrew</id>
    <link href="https://github.com/sidneys/homebrew-homebrew" rel="alternate"></link>
    <summary type="html">&lt;p&gt;sidneys.github.io Homebrew Tap&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;sidneys.github.io Homebrew Tap&lt;/h2&gt; &#xA;&lt;p&gt;Install the tap with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew tap sidneys/homebrew&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-4-cookies-in-rails-api</title>
    <updated>2023-05-15T01:42:07Z</updated>
    <id>tag:github.com,2023-05-15:/learn-co-curriculum/phase-4-cookies-in-rails-api</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-cookies-in-rails-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cookies in APIs&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configure a Rails API to use cookies&lt;/li&gt; &#xA; &lt;li&gt;Use the developer tools to inspect cookies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuring Cookies in Rails APIs&lt;/h2&gt; &#xA;&lt;p&gt;Since cookies are such an important part of most web applications, Rails has excellent support for cookies and sessions baked in. Unfortunately for us, when you create a new application in API mode with &lt;code&gt;rails new appname --api&lt;/code&gt;, the code needed for working with sessions and cookies in the controller is excluded by default.&lt;/p&gt; &#xA;&lt;p&gt;To add session and cookie support back in, we need to update our application&#39;s configuration in the &lt;code&gt;config/application.rb&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# config/application.rb&#xA;module MyApp&#xA;  class Application &amp;lt; Rails::Application&#xA;    config.load_defaults 6.1&#xA;    # This is set in apps generated with the --api flag, and removes session/cookie middleware&#xA;    config.api_only = true&#xA;&#xA;    # Must add these lines!&#xA;    # Adding back cookies and session middleware&#xA;    config.middleware.use ActionDispatch::Cookies&#xA;    config.middleware.use ActionDispatch::Session::CookieStore&#xA;&#xA;    # Use SameSite=Strict for all cookies to help protect against CSRF&#xA;    config.action_dispatch.cookies_same_site_protection = :strict&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add in the necessary &lt;a href=&#34;https://guides.rubyonrails.org/rails_on_rack.html#action-dispatcher-middleware-stack&#34;&gt;middleware&lt;/a&gt; for working with sessions and cookies in our application.&lt;/p&gt; &#xA;&lt;p&gt;The last line adds some additional security to our cookies by also configuring the &lt;code&gt;SameSite&lt;/code&gt; policy for our cookies as &lt;code&gt;strict&lt;/code&gt;, which means that the browser will only send these cookies in requests to websites that are on the same domain. This is a relatively new feature, but an important one for security! You can read more about &lt;a href=&#34;https://web.dev/samesite-cookies-explained/&#34;&gt;&lt;code&gt;SameSite&lt;/code&gt; cookies here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To access the &lt;code&gt;cookies&lt;/code&gt; hash in our controllers, we also need to include the &lt;code&gt;ActionController::Cookies&lt;/code&gt; module in our &lt;code&gt;ApplicationController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app/controllers/application_controller.rb&#xA;class ApplicationController &amp;lt; ActionController::API&#xA;  include ActionController::Cookies&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since all of our controllers inherit from &lt;code&gt;ApplicationController&lt;/code&gt;, adding this module here means all of our controllers will be able to work with cookies.&lt;/p&gt; &#xA;&lt;h2&gt;Working With Sessions and Cookies&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve included some starter code for a Rails API application with this lesson so you can see a basic example of working with sessions and cookies. The configuration is already done, so we can work on inspecting sessions and cookies in the controller and see how we can interact with them in our code.&lt;/p&gt; &#xA;&lt;p&gt;To set up and run the Rails application, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle install&#xA;$ rails s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in the browser, make a request to &lt;code&gt;http://localhost:3000/sessions&lt;/code&gt;. This will run the code in our &lt;code&gt;SessionsController#index&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;def index&#xA;  session[:session_hello] ||= &#34;World&#34;&#xA;  cookies[:cookies_hello] ||= &#34;World&#34;&#xA;  render json: { session: session, cookies: cookies.to_hash }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this method, we&#39;re setting values on the &lt;code&gt;session&lt;/code&gt; hash and the &lt;code&gt;cookies&lt;/code&gt; hash, and serializing them in the response so we can view their values in the browser.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you haven&#39;t encountered &lt;a href=&#34;http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html&#34;&gt;&lt;code&gt;||=&lt;/code&gt;&lt;/a&gt; syntax in Ruby, it&#39;s a shorthand way to assign a value if the current value is &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. So if &lt;code&gt;session[:session_hello]&lt;/code&gt; has not already been assigned a value, it will be assigned a value of &#34;World&#34;. Otherwise, it won&#39;t get assigned a new value.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The first time a user makes a request to this controller, Rails will include the &lt;code&gt;Set-Cookie&lt;/code&gt; &lt;strong&gt;response header&lt;/strong&gt; with our sessions and cookies values, which will instruct the browser to store these values in memory and send them with any future requests on this domain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-4/cookies-in-rails-api/set-cookie-headers.png&#34; alt=&#34;set-cookie headers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After making the request, you should see something like this in the browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;session&#34;: {&#xA;    &#34;session_id&#34;: &#34;2ed452b4e28ca49ce32749fc67571ced&#34;,&#xA;    &#34;session_hello&#34;: &#34;World&#34;&#xA;  },&#xA;  &#34;cookies&#34;: {&#xA;    &#34;cookies_hello&#34;: &#34;World&#34;,&#xA;    &#34;_session_id&#34;: &#34;AT26hlXMDW5EroI89/piWHiTDRF4SQvtuvoeNZYBYNaApyLvl8a1MvhnTsLfTK57QeJCMM6YkyFqaSWguqVMWljwl+ZmELmT/wHXfFJiGL0kvadecPhyXup+p7kO66HAFVBSTOKefbkhDtQz8Ex5pHW+UBAhFfoDnDZ9/4QgST3LPyGHKf4Pgix+JwOFU9MqeFQqXZTITRW7DFi+aGDdrb1hUeIGZLuezO2QN3+TEu2xHMc=--HJwJL83oJZqcaIL1--snxu+v1esfT9YLOXUGxLYw==&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From this, we can see that the session and cookies hashes can both be used to store key-value pairs of data. The entire session hash is actually stored in that &lt;code&gt;_session_id&lt;/code&gt; cookie, in a signed and encrypted format, which makes it impossible for users to tamper with.&lt;/p&gt; &#xA;&lt;p&gt;You can view cookie information directly in the browser as well. In the developer tools, find the &lt;strong&gt;Application&lt;/strong&gt; tab, and go to the &lt;strong&gt;Cookies&lt;/strong&gt; section (under &#34;Storage&#34; in the pane on the left). There, you&#39;ll find all the cookies for our domain (&lt;code&gt;http://localhost:3000&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-4/cookies-in-rails-api/cookies-devtools.png&#34; alt=&#34;cookies in dev tools&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cookies can be edited directly in the dev tools. Try changing the value of the &lt;code&gt;cookies_hello&lt;/code&gt; key to something new. Then refresh the page in the browser to make another request. If you try to edit the &lt;code&gt;_session_id&lt;/code&gt; cookie, on the other hand, it will have no effect thanks to Rails security features like signing and encryption.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can also view cookies by looking at the &lt;strong&gt;request headers&lt;/strong&gt; (under the Network tab, click &#34;sessions&#34; then &#34;Headers&#34;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-4/cookies-in-rails-api/cookies-headers.png&#34; alt=&#34;cookies in headers&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Explore&lt;/h2&gt; &#xA;&lt;p&gt;Try adding a &lt;code&gt;byebug&lt;/code&gt; at the top of the &lt;code&gt;SessionsController#index&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;def index&#xA;  byebug&#xA;  session[:session_hello] ||= &#34;World&#34;&#xA;  cookies[:cookies_hello] ||= &#34;World&#34;&#xA;  render json: { session: session, cookies: cookies.to_hash }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Experiment in the browser by changing the cookie values and making more requests to the server. Use the &lt;code&gt;byebug&lt;/code&gt; to see how changing these values in the browser affects what is available in the session and cookies hashes.&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;Rails has a lot of great functionality built in to work with cookies and sessions. When working with Rails in API mode, we need to add some additional configuration to get them working again.&lt;/p&gt; &#xA;&lt;p&gt;Cookies are an integral part of modern web applications; they help keep track of &lt;strong&gt;stateful&lt;/strong&gt; information in an inherently &lt;strong&gt;stateless&lt;/strong&gt; protocol by automatically passing additional data with each request using the headers. We can get a better sense of how cookies are being used by websites using the browser dev tools.&lt;/p&gt; &#xA;&lt;h2&gt;Check For Understanding&lt;/h2&gt; &#xA;&lt;p&gt;Before you move on, make sure you can answer the following questions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;What configuration changes need to be made to enable session and cookie support in a Rails API application?&lt;/li&gt; &#xA; &lt;li&gt;What are the two ways you can inspect a website&#39;s cookies using the browser dev tools?&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/rails_on_rack.html#action-dispatcher-middleware-stack&#34;&gt;Rails Middleware Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/security.html#sessions&#34;&gt;Rails Session Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&#34;&gt;Rails Session Cookie Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.dev/samesite-cookies-explained/&#34;&gt;SameSite Cookies Explained&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/devtools/storage/cookies/&#34;&gt;Chrome DevTools: Working With Cookies&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>