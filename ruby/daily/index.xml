<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-29T01:35:56Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>learn-co-curriculum/phase-4-displaying-associated-data-lab</title>
    <updated>2022-11-29T01:35:56Z</updated>
    <id>tag:github.com,2022-11-29:/learn-co-curriculum/phase-4-displaying-associated-data-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-displaying-associated-data-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Displaying Associated Data Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use Active Model associations in the controller&lt;/li&gt; &#xA; &lt;li&gt;Render nested JSON data based on model associations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this lab, we&#39;ll be creating an API for a Craigslist-style marketplace where a user can sell items. We have two models, &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Item&lt;/code&gt;, in a relationship where a user has many items, and each item belongs to a user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;User -&amp;lt; Item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the lab set up by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle install&#xA;$ rails db:migrate db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is seed data in place so you can test your solution out in the browser or in Postman. You can also run &lt;code&gt;learn test&lt;/code&gt; to run the tests.&lt;/p&gt; &#xA;&lt;h2&gt;Deliverables&lt;/h2&gt; &#xA;&lt;p&gt;Handle the following requests and return the appropriate JSON data in the response:&lt;/p&gt; &#xA;&lt;h3&gt;Users Show Route&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;GET /users/:id&#xA;&#xA;Response Body&#xA;-------&#xA;{&#xA;  &#34;id&#34;: 1,&#xA;  &#34;username&#34;: &#34;Dwayne&#34;,&#xA;  &#34;city&#34;: &#34;Los Angeles&#34;,&#xA;  &#34;items&#34;: [&#xA;    {&#xA;      &#34;id&#34;: 1,&#xA;      &#34;name&#34;: &#34;Non-stick pan&#34;,&#xA;      &#34;description&#34;: &#34;Sticks a bit&#34;,&#xA;      &#34;price&#34;: 10&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Items Index Route&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;GET /items&#xA;&#xA;Response Body&#xA;-------&#xA;{&#xA;  &#34;id&#34;: 1,&#xA;  &#34;name&#34;: &#34;Non-stick pan&#34;,&#xA;  &#34;description&#34;: &#34;Sticks a bit&#34;,&#xA;  &#34;price&#34;: 10,&#xA;  &#34;user&#34;: {&#xA;    &#34;id&#34;: 1,&#xA;    &#34;username&#34;: &#34;Dwayne&#34;,&#xA;    &#34;city&#34;: &#34;Los Angeles&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveModel/Serializers/JSON.html#method-i-as_json&#34;&gt;Serialization: as_json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>DmitrySychev/docker-rails7-esbuild-tailwind-pgsql</title>
    <updated>2022-11-29T01:35:56Z</updated>
    <id>tag:github.com,2022-11-29:/DmitrySychev/docker-rails7-esbuild-tailwind-pgsql</id>
    <link href="https://github.com/DmitrySychev/docker-rails7-esbuild-tailwind-pgsql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README&lt;/h1&gt; &#xA;&lt;h2&gt;Template for a dockerized rails 7 config&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 3.1.2&lt;/li&gt; &#xA; &lt;li&gt;Rails 7.0.4&lt;/li&gt; &#xA; &lt;li&gt;esbuild&lt;/li&gt; &#xA; &lt;li&gt;tailwind&lt;/li&gt; &#xA; &lt;li&gt;postgres&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions for running&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To use your own name for the app, change all instances of &lt;code&gt;docker-rails7-esbuild-tailwind-pgsql &lt;/code&gt; in the app. Update the DB names in database.yml to your apps name.&lt;/li&gt; &#xA; &lt;li&gt;In &lt;code&gt;./docker-scripts/rails.sh&lt;/code&gt; uncomment the specified lines when running for the first time.&lt;/li&gt; &#xA; &lt;li&gt;Running for the second time, make sure to comment out the lines in the &lt;code&gt;rails.sh&lt;/code&gt;, otherwise the DB will be recreated.&lt;/li&gt; &#xA; &lt;li&gt;To run the app &lt;code&gt;docker compose start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes for debugging&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In order to be able to debug with pry or break, js/css watching and rails server have to be decoupled into seperate containers.&lt;/li&gt; &#xA; &lt;li&gt;The config is already in &lt;code&gt;docker-compose.yml&lt;/code&gt;. Lines 13, 20-30 will need to be uncommented.&lt;/li&gt; &#xA; &lt;li&gt;After that, containers will need to be rebuilt with &lt;code&gt;docker compose build&lt;/code&gt; and started again with &lt;code&gt;docker compose start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In order to access the debugger, run &lt;code&gt;docker attach rails&lt;/code&gt; and place a &lt;code&gt;binding.break&lt;/code&gt; in the desired method for debbugging. The attached terminal will allow you to access the debugger.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ditsing/rpc_middleware</title>
    <updated>2022-11-29T01:35:56Z</updated>
    <id>tag:github.com,2022-11-29:/ditsing/rpc_middleware</id>
    <link href="https://github.com/ditsing/rpc_middleware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RPC midware homework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Middleware Homework&lt;/h1&gt; &#xA;&lt;p&gt;RPC middleware. Support function calls start from a ruby program, and end at a ruby/python/php program.&lt;/p&gt; &#xA;&lt;h2&gt;How to deploy RPC server&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository.&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;rpc_configure.rb&lt;/code&gt; to meet your needs.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rake server&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to make RPC call&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;require &#39;rpc&#39;&lt;/code&gt; in your source code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Every RPC call is a singleton method of class RPC.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Errors will be caught and re-throwed at the client side.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Example&lt;/p&gt; &lt;pre&gt;&lt;code&gt; #!/usr/bin/env ruby&#xA; require_relative &#39;rpc&#39;&#xA;&#xA; list = [ &#39;a&#39;, &#39;x&#39;, &#39;z&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;b&#39;, &#39;t&#39;]&#xA; puts RPC.list_sort list&#xA;&#xA; puts RPC.reverse_our_list list&#xA;&#xA; puts RPC.no_such_method list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to add custom module&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ruby module&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add a module which extends &lt;code&gt;RPCModule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Put the source file in &lt;code&gt;RPCConfigure::ModuleDir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;All module method defined within this module will be exported as an RPC call.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Example&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  #!/usr/bin/env ruby&#xA;  require_relative &#39;rpc_module&#39;&#xA;  &#xA;  module ListSort&#xA;  &#x9;extend RPCModule&#xA;&#xA;  &#x9;def list_sort list&#xA;  &#x9;&#x9;list.sort&#xA;  &#x9;end&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python module&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Creat a new python source file in &lt;code&gt;RPCConfigure::ModuleDir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;All functions define with this file will be exported as an RPC call&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Example&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  #!/usr/bin/env python&#xA;&#xA;  def reverse_our_list(list):&#xA;  &#x9;list.reverse()&#xA;  &#x9;return list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Both&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Module/file names will &lt;strong&gt;NOT&lt;/strong&gt; be included into the name of RPC call, just for logical clarity.&lt;/li&gt; &#xA;   &lt;li&gt;Other code of the Ruby/Python source file will be run only once when the server starts.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;rake update&lt;/code&gt; after adding modules.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>