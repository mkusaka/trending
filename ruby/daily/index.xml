<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T01:33:45Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DatabaseCleaner/database_cleaner</title>
    <updated>2022-07-01T01:33:45Z</updated>
    <id>tag:github.com,2022-07-01:/DatabaseCleaner/database_cleaner</id>
    <link href="https://github.com/DatabaseCleaner/database_cleaner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Strategies for cleaning databases in Ruby. Can be used to ensure a clean state for testing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Database Cleaner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/DatabaseCleaner/database_cleaner&#34;&gt;&lt;img src=&#34;https://travis-ci.org/DatabaseCleaner/database_cleaner.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/DatabaseCleaner/database_cleaner&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/DatabaseCleaner/database_cleaner/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/DatabaseCleaner/database_cleaner&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/DatabaseCleaner/database_cleaner/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://badge.fury.io/rb/database_cleaner.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt; &lt;a href=&#34;https://dependabot.com/compatibility-score.html?dependency-name=database_cleaner&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34;&gt;&lt;img src=&#34;https://api.dependabot.com/badges/compatibility_score?dependency-name=database_cleaner&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34; alt=&#34;SemVer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Database Cleaner is a set of gems containing strategies for cleaning your database in Ruby.&lt;/p&gt; &#xA;&lt;p&gt;The original use case was to ensure a clean state during tests. Each strategy is a small amount of code but is code that is usually needed in any ruby app that is testing with a database.&lt;/p&gt; &#xA;&lt;h2&gt;Gem Setup&lt;/h2&gt; &#xA;&lt;p&gt;Instead of using the &lt;code&gt;database_cleaner&lt;/code&gt; gem directly, each ORM has its own gem. Most projects will only need the &lt;code&gt;database_cleaner-active_record&lt;/code&gt; gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile&#xA;group :test do&#xA;  gem &#39;database_cleaner-active_record&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using multiple ORMs, just load multiple gems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile&#xA;group :test do&#xA;  gem &#39;database_cleaner-active_record&#39;&#xA;  gem &#39;database_cleaner-redis&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List of adapters&lt;/h2&gt; &#xA;&lt;p&gt;Here is an overview of the databases and ORMs supported by each adapter:&lt;/p&gt; &#xA;&lt;p&gt;MySQL, PostgreSQL, SQLite, etc&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-active_record&#34;&gt;database_cleaner-active_record&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-sequel&#34;&gt;database_cleaner-sequel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MongoDB&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-mongo&#34;&gt;database_cleaner-mongo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-mongoid&#34;&gt;database_cleaner-mongoid&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Redis&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-redis&#34;&gt;database_cleaner-redis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details on available configuration options can be found in the README for the specific adapter gem that you&#39;re using.&lt;/p&gt; &#xA;&lt;p&gt;For support or to discuss development please use the &lt;a href=&#34;https://groups.google.com/group/database_cleaner&#34;&gt;Google Group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Discontinued adapters&lt;/h3&gt; &#xA;&lt;p&gt;The following adapters have been discontinued. Please let us know on the &lt;a href=&#34;https://groups.google.com/group/database_cleaner&#34;&gt;Google Group&lt;/a&gt; if you think one of these should be resurrected!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-data_mapper&#34;&gt;database_cleaner-data_mapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-couch_potato&#34;&gt;database_cleaner-couch_potato&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-mongo_mapper&#34;&gt;database_cleaner-mongo_mapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-moped&#34;&gt;database_cleaner-moped&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-neo4j&#34;&gt;database_cleaner-neo4j&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;database_cleaner/active_record&#39;&#xA;&#xA;DatabaseCleaner.strategy = :truncation&#xA;&#xA;# then, whenever you need to clean the DB&#xA;DatabaseCleaner.clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the &lt;code&gt;:truncation&lt;/code&gt; strategy you can also pass in options, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;DatabaseCleaner.strategy = [:truncation, only: %w[widgets dogs some_other_table]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;DatabaseCleaner.strategy = [:truncation, except: %w[widgets]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(I should point out the truncation strategy will never truncate your schema_migrations table.)&lt;/p&gt; &#xA;&lt;p&gt;Some strategies need to be started before tests are run (for example the &lt;code&gt;:transaction&lt;/code&gt; strategy needs to know to open up a transaction). This can be accomplished by calling &lt;code&gt;DatabaseCleaner.start&lt;/code&gt; at the beginning of the run, or by running the tests inside a block to &lt;code&gt;DatabaseCleaner.cleaning&lt;/code&gt;. So you would have:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;database_cleaner/active_record&#39;&#xA;&#xA;DatabaseCleaner.strategy = :transaction&#xA;&#xA;DatabaseCleaner.start # usually this is called in setup of a test&#xA;&#xA;dirty_the_db&#xA;&#xA;DatabaseCleaner.clean # cleanup of the test&#xA;&#xA;# OR&#xA;&#xA;DatabaseCleaner.cleaning do&#xA;  dirty_the_db&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At times you may want to do a single clean with one strategy.&lt;/p&gt; &#xA;&lt;p&gt;For example, you may want to start the process by truncating all the tables, but then use the faster transaction strategy the remaining time. To accomplish this you can say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;database_cleaner/active_record&#39;&#xA;&#xA;DatabaseCleaner.clean_with :truncation&#xA;&#xA;DatabaseCleaner.strategy = :transaction&#xA;&#xA;# then make the DatabaseCleaner.start and DatabaseCleaner.clean calls appropriately&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What strategy is fastest?&lt;/h2&gt; &#xA;&lt;p&gt;For the SQL libraries the fastest option will be to use &lt;code&gt;:transaction&lt;/code&gt; as transactions are simply rolled back. If you can use this strategy you should. However, if you wind up needing to use multiple database connections in your tests (i.e. your tests run in a different process than your application) then using this strategy becomes a bit more difficult. You can get around the problem a number of ways.&lt;/p&gt; &#xA;&lt;p&gt;One common approach is to force all processes to use the same database connection (&lt;a href=&#34;http://blog.plataformatec.com.br/2011/12/three-tips-to-improve-the-performance-of-your-test-suite/&#34;&gt;common ActiveRecord hack&lt;/a&gt;) however this approach has been reported to result in non-deterministic failures.&lt;/p&gt; &#xA;&lt;p&gt;Another approach is to have the transactions rolled back in the application&#39;s process and relax the isolation level of the database (so the tests can read the uncommitted transactions).&lt;/p&gt; &#xA;&lt;p&gt;An easier, but slower, solution is to use the &lt;code&gt;:truncation&lt;/code&gt; or &lt;code&gt;:deletion&lt;/code&gt; strategy.&lt;/p&gt; &#xA;&lt;p&gt;So what is fastest out of &lt;code&gt;:deletion&lt;/code&gt; and &lt;code&gt;:truncation&lt;/code&gt;? Well, it depends on your table structure and what percentage of tables you populate in an average test. The reasoning is out of the scope of this README but here is a &lt;a href=&#34;https://stackoverflow.com/questions/11419536/postgresql-truncation-speed/11423886#11423886&#34;&gt;good SO answer on this topic for Postgres&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some people report much faster speeds with &lt;code&gt;:deletion&lt;/code&gt; while others say &lt;code&gt;:truncation&lt;/code&gt; is faster for them. The best approach therefore is it try all options on your test suite and see what is faster.&lt;/p&gt; &#xA;&lt;p&gt;If you are using ActiveRecord then take a look at the &lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner-active_record#strategy-configuration-options&#34;&gt;additional options&lt;/a&gt; available for &lt;code&gt;:truncation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Database Cleaner also includes a &lt;code&gt;null&lt;/code&gt; strategy (that does no cleaning at all) which can be used with any ORM library. You can also explicitly use it by setting your strategy to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Test Framework Examples&lt;/h2&gt; &#xA;&lt;h3&gt;RSpec Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;&#xA;  config.before(:suite) do&#xA;    DatabaseCleaner.strategy = :transaction&#xA;    DatabaseCleaner.clean_with(:truncation)&#xA;  end&#xA;&#xA;  config.around(:each) do |example|&#xA;    DatabaseCleaner.cleaning do&#xA;      example.run&#xA;    end&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RSpec with Capybara Example&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll typically discover a feature spec is incorrectly using transaction instead of truncation strategy when the data created in the spec is not visible in the app-under-test.&lt;/p&gt; &#xA;&lt;p&gt;A frequently occurring example of this is when, after creating a user in a spec, the spec mysteriously fails to login with the user. This happens because the user is created inside of an uncommitted transaction on one database connection, while the login attempt is made using a separate database connection. This separate database connection cannot access the uncommitted user data created over the first database connection due to transaction isolation.&lt;/p&gt; &#xA;&lt;p&gt;For feature specs using a Capybara driver for an external JavaScript-capable browser (in practice this is all drivers except &lt;code&gt;:rack_test&lt;/code&gt;), the Rack app under test and the specs do not share a database connection.&lt;/p&gt; &#xA;&lt;p&gt;When a spec and app-under-test do not share a database connection, you&#39;ll likely need to use the truncation strategy instead of the transaction strategy.&lt;/p&gt; &#xA;&lt;p&gt;See the suggested config below to temporarily enable truncation strategy for affected feature specs only. This config continues to use transaction strategy for all other specs.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also recommended to use &lt;code&gt;append_after&lt;/code&gt; to ensure &lt;code&gt;DatabaseCleaner.clean&lt;/code&gt; runs &lt;em&gt;after&lt;/em&gt; the after-test cleanup &lt;code&gt;capybara/rspec&lt;/code&gt; installs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/rspec&#39;&#xA;&#xA;#...&#xA;&#xA;RSpec.configure do |config|&#xA;&#xA;  config.use_transactional_fixtures = false&#xA;&#xA;  config.before(:suite) do&#xA;    if config.use_transactional_fixtures?&#xA;      raise(&amp;lt;&amp;lt;-MSG)&#xA;        Delete line `config.use_transactional_fixtures = true` from rails_helper.rb&#xA;        (or set it to false) to prevent uncommitted transactions being used in&#xA;        JavaScript-dependent specs.&#xA;&#xA;        During testing, the app-under-test that the browser driver connects to&#xA;        uses a different database connection to the database connection used by&#xA;        the spec. The app&#39;s database connection would not be able to access&#xA;        uncommitted transaction data setup over the spec&#39;s database connection.&#xA;      MSG&#xA;    end&#xA;    DatabaseCleaner.clean_with(:truncation)&#xA;  end&#xA;&#xA;  config.before(:each) do&#xA;    DatabaseCleaner.strategy = :transaction&#xA;  end&#xA;&#xA;  config.before(:each, type: :feature) do&#xA;    # :rack_test driver&#39;s Rack app under test shares database connection&#xA;    # with the specs, so continue to use transaction strategy for speed.&#xA;    driver_shares_db_connection_with_specs = Capybara.current_driver == :rack_test&#xA;&#xA;    unless driver_shares_db_connection_with_specs&#xA;      # Driver is probably for an external browser with an app&#xA;      # under test that does *not* share a database connection with the&#xA;      # specs, so use truncation strategy.&#xA;      DatabaseCleaner.strategy = :truncation&#xA;    end&#xA;  end&#xA;&#xA;  config.before(:each) do&#xA;    DatabaseCleaner.start&#xA;  end&#xA;&#xA;  config.append_after(:each) do&#xA;    DatabaseCleaner.clean&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minitest Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;DatabaseCleaner.strategy = :transaction&#xA;&#xA;class Minitest::Spec&#xA;  before :each do&#xA;    DatabaseCleaner.start&#xA;  end&#xA;&#xA;  after :each do&#xA;    DatabaseCleaner.clean&#xA;  end&#xA;end&#xA;&#xA;# with the minitest-around gem, this may be used instead:&#xA;class Minitest::Spec&#xA;  around do |tests|&#xA;    DatabaseCleaner.cleaning(&amp;amp;tests)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cucumber Example&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Cucumber with Rails, just use the generator that ships with cucumber-rails, and that will create all the code you need to integrate DatabaseCleaner into your Rails project.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, to add DatabaseCleaner to your project by hand, create a file &lt;code&gt;features/support/database_cleaner.rb&lt;/code&gt; that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;database_cleaner/active_record&#39;&#xA;&#xA;DatabaseCleaner.strategy = :truncation&#xA;&#xA;Around do |scenario, block|&#xA;  DatabaseCleaner.cleaning(&amp;amp;block)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should cover the basics of tear down between scenarios and keeping your database clean.&lt;/p&gt; &#xA;&lt;p&gt;For more examples see the section &lt;a href=&#34;https://raw.githubusercontent.com/DatabaseCleaner/database_cleaner/main/#why&#34;&gt;&#34;Why?&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use with multiple ORMs&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you need to use multiple ORMs in your application.&lt;/p&gt; &#xA;&lt;p&gt;You can use DatabaseCleaner to clean multiple ORMs, and multiple databases for those ORMs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;database_cleaner/active_record&#39;&#xA;require &#39;database_cleaner/mongo_mapper&#39;&#xA;&#xA;# How to specify particular orms&#xA;DatabaseCleaner[:active_record].strategy = :transaction&#xA;DatabaseCleaner[:mongo_mapper].strategy = :truncation&#xA;&#xA;# How to specify particular databases&#xA;DatabaseCleaner[:active_record, db: :two]&#xA;&#xA;# You may also pass in the model directly:&#xA;DatabaseCleaner[:active_record, db: ModelWithDifferentConnection]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage beyond that remains the same with &lt;code&gt;DatabaseCleaner.start&lt;/code&gt; calling any setup on the different configured databases, and &lt;code&gt;DatabaseCleaner.clean&lt;/code&gt; executing afterwards.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;One of my motivations for writing this library was to have an easy way to turn on what Rails calls &#34;transactional_fixtures&#34; in my non-rails ActiveRecord projects.&lt;/p&gt; &#xA;&lt;p&gt;After copying and pasting code to do this several times I decided to package it up as a gem and save everyone a bit of time.&lt;/p&gt; &#xA;&lt;h2&gt;Safeguards&lt;/h2&gt; &#xA;&lt;p&gt;DatabaseCleaner comes with safeguards against:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running in production (checking for &lt;code&gt;ENV&lt;/code&gt;, &lt;code&gt;APP_ENV&lt;/code&gt;, &lt;code&gt;RACK_ENV&lt;/code&gt;, and &lt;code&gt;RAILS_ENV&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Running against a remote database (checking for a &lt;code&gt;DATABASE_URL&lt;/code&gt; that does not include &lt;code&gt;localhost&lt;/code&gt;, &lt;code&gt;.local&lt;/code&gt; or &lt;code&gt;127.0.0.1&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both safeguards can be disabled separately as follows.&lt;/p&gt; &#xA;&lt;p&gt;Using environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export DATABASE_CLEANER_ALLOW_PRODUCTION=true&#xA;export DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;DatabaseCleaner.allow_production = true&#xA;DatabaseCleaner.allow_remote_database_url = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Ruby, a URL allowlist can be specified. When specified, DatabaseCleaner will only allow &lt;code&gt;DATABASE_URL&lt;/code&gt; to be equal to one of the values specified in the url allowlist like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;DatabaseCleaner.url_allowlist = [&#39;postgres://postgres@localhost&#39;, &#39;postgres://foo@bar&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Allowlist elements are matched with case equality (&lt;code&gt;===&lt;/code&gt;), so regular expressions or procs may be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;DatabaseCleaner.url_allowlist = [&#xA;  %r{^postgres://postgres@localhost},         # match any db with this prefix&#xA;  proc {|uri| URI.parse(uri).user == &#34;test&#34; } # match any db authenticating with the &#39;test&#39; user&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CHANGELOG&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/DatabaseCleaner/database_cleaner/main/History.rdoc&#34;&gt;HISTORY&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;COPYRIGHT&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/DatabaseCleaner/database_cleaner/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rails/spring</title>
    <updated>2022-07-01T01:33:45Z</updated>
    <id>tag:github.com,2022-07-01:/rails/spring</id>
    <link href="https://github.com/rails/spring" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rails application preloader&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rails/spring/actions/workflows/ci.yml?branch=main&#34;&gt;&lt;img src=&#34;https://github.com/rails/spring/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/spring&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/spring.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spring is a Rails application preloader. It speeds up development by keeping your application running in the background, so you don&#39;t need to boot it every time you run a test, rake task or migration.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Totally automatic; no need to explicitly start and stop the background process&lt;/li&gt; &#xA; &lt;li&gt;Reloads your application code on each run&lt;/li&gt; &#xA; &lt;li&gt;Restarts your application when configs / initializers / gem dependencies are changed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby versions: MRI 2.7, MRI 3.0, MRI 3.1&lt;/li&gt; &#xA; &lt;li&gt;Rails versions: 6.0, 6.1, 7.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Spring makes extensive use of &lt;code&gt;Process.fork&lt;/code&gt;, so won&#39;t be able to provide a speed up on platforms which don&#39;t support forking (Windows, JRuby).&lt;/p&gt; &#xA;&lt;h2&gt;Walkthrough&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Add Spring to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;spring&#34;, group: :development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note: using &lt;code&gt;gem &#34;spring&#34;, git: &#34;...&#34;&lt;/code&gt; &lt;em&gt;won&#39;t&lt;/em&gt; work and is not a supported way of using Spring.)&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended to &#39;springify&#39; the executables in your &lt;code&gt;bin/&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle install&#xA;$ bundle exec spring binstub --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This generates a &lt;code&gt;bin/spring&lt;/code&gt; executable, and inserts a small snippet of code into relevant existing executables. The snippet looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;begin&#xA;  load File.expand_path(&#39;../spring&#39;, __FILE__)&#xA;rescue LoadError =&amp;gt; e&#xA;  raise unless e.message.include?(&#39;spring&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On platforms where Spring is installed and supported, this snippet hooks Spring into the execution of commands. In other cases, the snippet will just be silently ignored, and the lines after it will be executed as normal.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to prefix every command you type with &lt;code&gt;bin/&lt;/code&gt;, you can &lt;a href=&#34;https://github.com/direnv/direnv#the-stdlib&#34;&gt;use direnv&lt;/a&gt; to automatically add &lt;code&gt;./bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; when you &lt;code&gt;cd&lt;/code&gt; into your application. Simply create an &lt;code&gt;.envrc&lt;/code&gt; file with the command &lt;code&gt;PATH_add bin&lt;/code&gt; in your Rails directory.&lt;/p&gt; &#xA;&lt;h3&gt;Enable reloading&lt;/h3&gt; &#xA;&lt;p&gt;Spring reloads application code, and therefore needs the application to have reloading enabled.&lt;/p&gt; &#xA;&lt;p&gt;Please, make sure &lt;code&gt;config.cache_classes&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; in the environments that Spring manages. That setting is typically configured in &lt;code&gt;config/environments/*.rb&lt;/code&gt;. In particular, make sure it is &lt;code&gt;false&lt;/code&gt; for the &lt;code&gt;test&lt;/code&gt; environment.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;For this walkthrough I&#39;ve generated a new Rails application, and run &lt;code&gt;rails generate scaffold post name:string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s run a test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ time bin/rake test test/controllers/posts_controller_test.rb&#xA;Running via Spring preloader in process 2734&#xA;Run options:&#xA;&#xA;# Running tests:&#xA;&#xA;.......&#xA;&#xA;Finished tests in 0.127245s, 55.0121 tests/s, 78.5887 assertions/s.&#xA;&#xA;7 tests, 10 assertions, 0 failures, 0 errors, 0 skips&#xA;&#xA;real    0m2.165s&#xA;user    0m0.281s&#xA;sys     0m0.066s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That wasn&#39;t particularly fast because it was the first run, so Spring had to boot the application. It&#39;s now running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/spring status&#xA;Spring is running:&#xA;&#xA;26150 spring server | spring-demo-app | started 3 secs ago&#xA;26155 spring app    | spring-demo-app | started 3 secs ago | test mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The next run is faster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ time bin/rake test test/controllers/posts_controller_test.rb&#xA;Running via Spring preloader in process 8352&#xA;Run options:&#xA;&#xA;# Running tests:&#xA;&#xA;.......&#xA;&#xA;Finished tests in 0.176896s, 39.5714 tests/s, 56.5305 assertions/s.&#xA;&#xA;7 tests, 10 assertions, 0 failures, 0 errors, 0 skips&#xA;&#xA;real    0m0.610s&#xA;user    0m0.276s&#xA;sys     0m0.059s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we edit any of the application files, or test files, the changes will be picked up on the next run without the background process having to restart. This works in exactly the same way as the code reloading which allows you to refresh your browser and instantly see changes during development.&lt;/p&gt; &#xA;&lt;p&gt;But if we edit any of the files which were used to start the application (configs, initializers, your gemfile), the application needs to be fully restarted. This happens automatically.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s &#34;edit&#34; &lt;code&gt;config/application.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ touch config/application.rb&#xA;$ bin/spring status&#xA;Spring is running:&#xA;&#xA;26150 spring server | spring-demo-app | started 36 secs ago&#xA;26556 spring app    | spring-demo-app | started 1 sec ago | test mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The application detected that &lt;code&gt;config/application.rb&lt;/code&gt; changed and automatically restarted itself.&lt;/p&gt; &#xA;&lt;p&gt;If we run a command that uses a different environment, then that environment gets booted up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/rake routes&#xA;Running via Spring preloader in process 2363&#xA;    posts GET    /posts(.:format)          posts#index&#xA;          POST   /posts(.:format)          posts#create&#xA; new_post GET    /posts/new(.:format)      posts#new&#xA;edit_post GET    /posts/:id/edit(.:format) posts#edit&#xA;     post GET    /posts/:id(.:format)      posts#show&#xA;          PUT    /posts/:id(.:format)      posts#update&#xA;          DELETE /posts/:id(.:format)      posts#destroy&#xA;&#xA;$ bin/spring status&#xA;Spring is running:&#xA;&#xA;26150 spring server | spring-demo-app | started 1 min ago&#xA;26556 spring app    | spring-demo-app | started 42 secs ago | test mode&#xA;26707 spring app    | spring-demo-app | started 2 secs ago | development mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s no need to &#34;shut down&#34; Spring. This will happen automatically when you close your terminal. However, if you do want to do a manual shut down, use the &lt;code&gt;stop&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/spring stop&#xA;Spring stopped.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From within your code, you can check whether Spring is active with &lt;code&gt;if defined?(Spring)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Removal&lt;/h3&gt; &#xA;&lt;p&gt;To remove Spring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#39;Unspring&#39; your bin/ executables: &lt;code&gt;bin/spring binstub --remove --all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Remove spring from your Gemfile&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;You must not install Spring on your production environment. To prevent it from being installed, run the &lt;code&gt;bundle config set without &#39;development test&#39;&lt;/code&gt; before &lt;code&gt;bundle install&lt;/code&gt; command which is used to install gems on your production machines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle config set without &#39;development test&#39;&#xA;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;rake&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs a rake task. Rake tasks run in the &lt;code&gt;development&lt;/code&gt; environment by default. You can change this on the fly by using the &lt;code&gt;RAILS_ENV&lt;/code&gt; environment variable. The environment is also configurable with the &lt;code&gt;Spring::Commands::Rake.environment_matchers&lt;/code&gt; hash. This has sensible defaults, but if you need to match a specific task to a specific environment, you&#39;d do it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Spring::Commands::Rake.environment_matchers[&#34;perf_test&#34;] = &#34;test&#34;&#xA;Spring::Commands::Rake.environment_matchers[/^perf/]     = &#34;test&#34;&#xA;&#xA;# To change the environment when you run `rake` with no arguments&#xA;Spring::Commands::Rake.environment_matchers[:default] = &#34;development&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rails console&lt;/code&gt;, &lt;code&gt;rails generate&lt;/code&gt;, &lt;code&gt;rails runner&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;These execute the rails command you already know and love. If you run a different sub command (e.g. &lt;code&gt;rails server&lt;/code&gt;) then Spring will automatically pass it through to the underlying &lt;code&gt;rails&lt;/code&gt; executable (without the speed-up).&lt;/p&gt; &#xA;&lt;h3&gt;Additional commands&lt;/h3&gt; &#xA;&lt;p&gt;You can add these to your Gemfile for additional commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonleighton/spring-commands-rspec&#34;&gt;spring-commands-rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonleighton/spring-commands-cucumber&#34;&gt;spring-commands-cucumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jvanbaarsen/spring-commands-spinach&#34;&gt;spring-commands-spinach&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonleighton/spring-commands-testunit&#34;&gt;spring-commands-testunit&lt;/a&gt; - useful for running &lt;code&gt;Test::Unit&lt;/code&gt; tests on Rails 3, since only Rails 4 allows you to use &lt;code&gt;rake test path/to/test&lt;/code&gt; to run a particular test/directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DocSpring/spring-commands-parallel-tests&#34;&gt;spring-commands-parallel-tests&lt;/a&gt; - Adds the &lt;code&gt;parallel_*&lt;/code&gt; commands from &lt;a href=&#34;https://github.com/grosser/parallel_tests&#34;&gt;&lt;code&gt;parallel_tests&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alejandrobabio/spring-commands-teaspoon.git&#34;&gt;spring-commands-teaspoon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabrieljoelc/spring-commands-m.git&#34;&gt;spring-commands-m&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p0deje/spring-commands-rubocop&#34;&gt;spring-commands-rubocop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wintersolutions/spring-commands-rackup&#34;&gt;spring-commands-rackup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wintersolutions/spring-commands-rack-console&#34;&gt;spring-commands-rack-console&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lakim/spring-commands-standard&#34;&gt;spring-commands-standard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use without adding to bundle&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want Spring-related code checked into your source repository, it&#39;s possible to use Spring without adding to your Gemfile. However, using Spring binstubs without adding Spring to the Gemfile is not supported.&lt;/p&gt; &#xA;&lt;p&gt;To use Spring like this, do a &lt;code&gt;gem install spring&lt;/code&gt; and then prefix commands with &lt;code&gt;spring&lt;/code&gt;. For example, rather than running &lt;code&gt;bin/rake -T&lt;/code&gt;, you&#39;d run &lt;code&gt;spring rake -T&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Temporarily disabling Spring&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using Spring binstubs, but temporarily don&#39;t want commands to run through Spring, set the &lt;code&gt;DISABLE_SPRING&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h2&gt;Class reloading&lt;/h2&gt; &#xA;&lt;p&gt;Spring uses Rails&#39; class reloading mechanism to keep your code up to date between test runs. This is the same mechanism which allows you to see changes during development when you refresh the page. However, you may never have used this mechanism with your &lt;code&gt;test&lt;/code&gt; environment before, and this can cause problems.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s important to realise that code reloading means that the constants in your application are &lt;em&gt;different objects&lt;/em&gt; after files have changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/rails runner &#39;puts User.object_id&#39;&#xA;70127987886040&#xA;$ touch app/models/user.rb&#xA;$ bin/rails runner &#39;puts User.object_id&#39;&#xA;70127976764620&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suppose you have an initializer &lt;code&gt;config/initializers/save_user_class.rb&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;USER_CLASS = User&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This saves off the &lt;em&gt;first&lt;/em&gt; version of the &lt;code&gt;User&lt;/code&gt; class, which will not be the same object as &lt;code&gt;User&lt;/code&gt; after the code has been reloaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/rails runner &#39;puts User == USER_CLASS&#39;&#xA;true&#xA;$ touch app/models/user.rb&#xA;$ bin/rails runner &#39;puts User == USER_CLASS&#39;&#xA;false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So to avoid this problem, don&#39;t save off references to application constants in your initialization code.&lt;/p&gt; &#xA;&lt;h2&gt;Using Spring with a containerized development environment&lt;/h2&gt; &#xA;&lt;p&gt;As of Spring 1.7, there is some support for doing this. See &lt;a href=&#34;https://github.com/jonleighton/spring-docker-example&#34;&gt;this example repository&lt;/a&gt; for information about how to do it with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Spring will read &lt;code&gt;~/.spring.rb&lt;/code&gt; and &lt;code&gt;config/spring.rb&lt;/code&gt; for custom settings. Note that &lt;code&gt;~/.spring.rb&lt;/code&gt; is loaded &lt;em&gt;before&lt;/em&gt; bundler, but &lt;code&gt;config/spring.rb&lt;/code&gt; is loaded &lt;em&gt;after&lt;/em&gt; bundler. So if you have any &lt;code&gt;spring-commands-*&lt;/code&gt; gems installed that you want to be available in all projects without having to be added to the project&#39;s Gemfile, require them in your &lt;code&gt;~/.spring.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;config/spring_client.rb&lt;/code&gt; is also loaded before bundler and before a server process is started, it can be used to add new top-level commands.&lt;/p&gt; &#xA;&lt;h3&gt;Application root&lt;/h3&gt; &#xA;&lt;p&gt;Spring must know how to find your Rails application. If you have a normal app everything works out of the box. If you are working on a project with a special setup (an engine for example), you must tell Spring where your app is located:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Spring.application_root = &#39;./test/dummy&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running code before forking&lt;/h3&gt; &#xA;&lt;p&gt;There is no &lt;code&gt;Spring.before_fork&lt;/code&gt; callback. To run something before the fork, you can place it in &lt;code&gt;~/.spring.rb&lt;/code&gt; or &lt;code&gt;config/spring.rb&lt;/code&gt; or in any of the files which get run when your application initializes, such as &lt;code&gt;config/application.rb&lt;/code&gt;, &lt;code&gt;config/environments/*.rb&lt;/code&gt; or &lt;code&gt;config/initializers/*.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running code after forking&lt;/h3&gt; &#xA;&lt;p&gt;You might want to run code after Spring forked off the process but before the actual command is run. You might want to use an &lt;code&gt;after_fork&lt;/code&gt; callback if you have to connect to an external service, do some general cleanup or set up dynamic configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Spring.after_fork do&#xA;  # run arbitrary code&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to register multiple callbacks you can simply call &lt;code&gt;Spring.after_fork&lt;/code&gt; multiple times with different blocks.&lt;/p&gt; &#xA;&lt;h3&gt;Watching files and directories&lt;/h3&gt; &#xA;&lt;p&gt;Spring will automatically detect file changes to any file loaded when the server boots. Changes will cause the affected environments to be restarted.&lt;/p&gt; &#xA;&lt;p&gt;If there are additional files or directories which should trigger an application restart, you can specify them with &lt;code&gt;Spring.watch&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Spring.watch &#34;config/some_config_file.yml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Spring polls the filesystem for changes once every 0.2 seconds. This method requires zero configuration, but if you find that it&#39;s using too much CPU, then you can use event-based file system listening by installing the &lt;a href=&#34;https://github.com/jonleighton/spring-watcher-listen&#34;&gt;spring-watcher-listen&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;h3&gt;Quiet output&lt;/h3&gt; &#xA;&lt;p&gt;To disable the &#34;Running via Spring preloader&#34; message which is shown each time a command runs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Spring.quiet = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;The following environment variables are used by Spring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DISABLE_SPRING&lt;/code&gt; - If set, Spring will be bypassed, and your application will boot in a foreground process&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_LOG&lt;/code&gt; - The path to a file which Spring will write log messages to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_TMP_PATH&lt;/code&gt; - The directory where Spring should write its temporary files (a pidfile and a socket). By default, we use the &lt;code&gt;XDG_RUNTIME_DIR&lt;/code&gt; environment variable, or else &lt;code&gt;Dir.tmpdir&lt;/code&gt;, and then create a directory in that named &lt;code&gt;spring-$UID&lt;/code&gt;. We don&#39;t use your Rails application&#39;s &lt;code&gt;tmp/&lt;/code&gt; directory because that may be on a filesystem which doesn&#39;t support UNIX sockets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_APPLICATION_ID&lt;/code&gt; - Used to identify distinct Rails applications. By default, it is an MD5 hash of the current &lt;code&gt;RUBY_VERSION&lt;/code&gt;, and the path to your Rails project root.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_SOCKET&lt;/code&gt; - The path which should be used for the UNIX socket which Spring uses to communicate with the long-running Spring server process. By default, this is &lt;code&gt;SPRING_TMP_PATH/SPRING_APPLICATION_ID&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_PIDFILE&lt;/code&gt; - The path which should be used to store the pid of the long-running Spring server process. By default, this is related to the socket path; if the socket path is &lt;code&gt;/foo/bar/spring.sock&lt;/code&gt; the pidfile will be &lt;code&gt;/foo/bar/spring.pid&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_SERVER_COMMAND&lt;/code&gt; - The command to run to start up the Spring server when it is not already running. Defaults to &lt;code&gt;spring _[version]_ server --background&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you want to get more information about what Spring is doing, you can run Spring explicitly in a separate terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ spring server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Logging output will be printed to stdout. You can also send log output to a file with the &lt;code&gt;SPRING_LOG&lt;/code&gt; environment variable.&lt;/p&gt;</summary>
  </entry>
</feed>