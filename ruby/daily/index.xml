<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-08T01:46:45Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chalkers/blog-enginified</title>
    <updated>2023-05-08T01:46:45Z</updated>
    <id>tag:github.com,2023-05-08:/chalkers/blog-enginified</id>
    <link href="https://github.com/chalkers/blog-enginified" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enginified Blog&lt;/p&gt;&lt;hr&gt;&lt;p&gt;== Welcome to Rails&lt;/p&gt; &#xA;&lt;p&gt;Rails is a web-application framework that includes everything needed to create database-backed web applications according to the Model-View-Control pattern.&lt;/p&gt; &#xA;&lt;p&gt;This pattern splits the view (also called the presentation) into &#34;dumb&#34; templates that are primarily responsible for inserting pre-built data in between HTML tags. The model contains the &#34;smart&#34; domain objects (such as Account, Product, Person, Post) that holds all the business logic and knows how to persist themselves to a database. The controller handles the incoming requests (such as Save New Account, Update Product, Show Post) by manipulating the model and directing data to the view.&lt;/p&gt; &#xA;&lt;p&gt;In Rails, the model is handled by what&#39;s called an object-relational mapping layer entitled Active Record. This layer allows you to present the data from database rows as objects and embellish these data objects with business logic methods. You can read more about Active Record in link:files/vendor/rails/activerecord/README.html.&lt;/p&gt; &#xA;&lt;p&gt;The controller and view are handled by the Action Pack, which handles both layers by its two parts: Action View and Action Controller. These two layers are bundled in a single package due to their heavy interdependence. This is unlike the relationship between the Active Record and Action Pack that is much more separate. Each of these packages can be used independently outside of Rails. You can read more about Action Pack in link:files/vendor/rails/actionpack/README.html.&lt;/p&gt; &#xA;&lt;p&gt;== Getting Started&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;At the command prompt, start a new Rails application using the &lt;tt&gt;rails&lt;/tt&gt; command and your application name. Ex: rails myapp&lt;/li&gt; &#xA; &lt;li&gt;Change directory into myapp and start the web server: &lt;tt&gt;script/server&lt;/tt&gt; (run with --help for options)&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; and get &#34;Welcome aboard: You&#39;re riding the Rails!&#34;&lt;/li&gt; &#xA; &lt;li&gt;Follow the guidelines to start developing your application&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;== Web Servers&lt;/p&gt; &#xA;&lt;p&gt;By default, Rails will try to use Mongrel if it&#39;s are installed when started with script/server, otherwise Rails will use WEBrick, the webserver that ships with Ruby. But you can also use Rails with a variety of other web servers.&lt;/p&gt; &#xA;&lt;p&gt;Mongrel is a Ruby-based webserver with a C component (which requires compilation) that is suitable for development and deployment of Rails applications. If you have Ruby Gems installed, getting up and running with mongrel is as easy as: &lt;tt&gt;gem install mongrel&lt;/tt&gt;. More info at: &lt;a href=&#34;http://mongrel.rubyforge.org&#34;&gt;http://mongrel.rubyforge.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Say other Ruby web servers like Thin and Ebb or regular web servers like Apache or LiteSpeed or Lighttpd or IIS. The Ruby web servers are run through Rack and the latter can either be setup to use FCGI or proxy to a pack of Mongrels/Thin/Ebb servers.&lt;/p&gt; &#xA;&lt;p&gt;== Apache .htaccess example for FCGI/CGI&lt;/p&gt; &#xA;&lt;h1&gt;General Apache options&lt;/h1&gt; &#xA;&lt;p&gt;AddHandler fastcgi-script .fcgi AddHandler cgi-script .cgi Options +FollowSymLinks +ExecCGI&lt;/p&gt; &#xA;&lt;h1&gt;If you don&#39;t want Rails to look in certain directories,&lt;/h1&gt; &#xA;&lt;h1&gt;use the following rewrite rules so that Apache won&#39;t rewrite certain requests&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Example:&lt;/h1&gt; &#xA;&lt;h1&gt;RewriteCond %{REQUEST_URI} ^/notrails.*&lt;/h1&gt; &#xA;&lt;h1&gt;RewriteRule .* - [L]&lt;/h1&gt; &#xA;&lt;h1&gt;Redirect all requests not available on the filesystem to Rails&lt;/h1&gt; &#xA;&lt;h1&gt;By default the cgi dispatcher is used which is very slow&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;For better performance replace the dispatcher with the fastcgi one&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Example:&lt;/h1&gt; &#xA;&lt;h1&gt;RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]&lt;/h1&gt; &#xA;&lt;p&gt;RewriteEngine On&lt;/p&gt; &#xA;&lt;h1&gt;If your Rails application is accessed via an Alias directive,&lt;/h1&gt; &#xA;&lt;h1&gt;then you MUST also set the RewriteBase in this htaccess file.&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Example:&lt;/h1&gt; &#xA;&lt;h1&gt;Alias /myrailsapp /path/to/myrailsapp/public&lt;/h1&gt; &#xA;&lt;h1&gt;RewriteBase /myrailsapp&lt;/h1&gt; &#xA;&lt;p&gt;RewriteRule ^$ index.html [QSA] RewriteRule ^([^.]+)$ $1.html [QSA] RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ dispatch.cgi [QSA,L]&lt;/p&gt; &#xA;&lt;h1&gt;In case Rails experiences terminal errors&lt;/h1&gt; &#xA;&lt;h1&gt;Instead of displaying this message you can supply a file here which will be rendered instead&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Example:&lt;/h1&gt; &#xA;&lt;h1&gt;ErrorDocument 500 /500.html&lt;/h1&gt; &#xA;&lt;p&gt;ErrorDocument 500 &#34;&lt;/p&gt;&#xA;&lt;h2&gt;Application error&lt;/h2&gt;Rails application failed to start properly&#34;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;== Debugging Rails&lt;/p&gt; &#xA;&lt;p&gt;Sometimes your application goes wrong. Fortunately there are a lot of tools that will help you debug it and get it back on the rails.&lt;/p&gt; &#xA;&lt;p&gt;First area to check is the application log files. Have &#34;tail -f&#34; commands running on the server.log and development.log. Rails will automatically display debugging and runtime information to these files. Debugging info will also be shown in the browser on requests from 127.0.0.1.&lt;/p&gt; &#xA;&lt;p&gt;You can also log your own messages directly into the log file from your code using the Ruby logger class from inside your controllers. Example:&lt;/p&gt; &#xA;&lt;p&gt;class WeblogController &amp;lt; ActionController::Base def destroy @weblog = Weblog.find(params[:id]) @weblog.destroy logger.info(&#34;#{Time.now} Destroyed Weblog ID ##{@weblog.id}!&#34;) end end&lt;/p&gt; &#xA;&lt;p&gt;The result will be a message in your log file along the lines of:&lt;/p&gt; &#xA;&lt;p&gt;Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1&lt;/p&gt; &#xA;&lt;p&gt;More information on how to use the logger is at &lt;a href=&#34;http://www.ruby-doc.org/core/&#34;&gt;http://www.ruby-doc.org/core/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, Ruby documentation can be found at &lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;http://www.ruby-lang.org/&lt;/a&gt; including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Learning Ruby (Pickaxe) Book: &lt;a href=&#34;http://www.ruby-doc.org/docs/ProgrammingRuby/&#34;&gt;http://www.ruby-doc.org/docs/ProgrammingRuby/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Learn to Program: &lt;a href=&#34;http://pine.fm/LearnToProgram/&#34;&gt;http://pine.fm/LearnToProgram/&lt;/a&gt; (a beginners guide)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These two online (and free) books will bring you up to speed on the Ruby language and also on programming in general.&lt;/p&gt; &#xA;&lt;p&gt;== Debugger&lt;/p&gt; &#xA;&lt;p&gt;Debugger support is available through the debugger command when you start your Mongrel or Webrick server with --debugger. This means that you can break out of execution at any point in the code, investigate and change the model, AND then resume execution! You need to install ruby-debug to run the server in debugging mode. With gems, use &#39;gem install ruby-debug&#39; Example:&lt;/p&gt; &#xA;&lt;p&gt;class WeblogController &amp;lt; ActionController::Base def index @posts = Post.find(:all) debugger end end&lt;/p&gt; &#xA;&lt;p&gt;So the controller will accept the action, run the first line, then present you with a IRB prompt in the server window. Here you can do things like:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;@posts.inspect =&amp;gt; &#34;[#&amp;lt;Post:0x14a6be8 @attributes={&#34;title&#34;=&amp;gt;nil, &#34;body&#34;=&amp;gt;nil, &#34;id&#34;=&amp;gt;&#34;1&#34;}&amp;gt;, #&amp;lt;Post:0x14a6620 @attributes={&#34;title&#34;=&amp;gt;&#34;Rails you know!&#34;, &#34;body&#34;=&amp;gt;&#34;Only ten..&#34;, &#34;id&#34;=&amp;gt;&#34;2&#34;}&amp;gt;]&#34; @posts.first.title = &#34;hello from a debugger&#34; =&amp;gt; &#34;hello from a debugger&#34;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;...and even better is that you can examine how your runtime objects actually work:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;f = @posts.first =&amp;gt; #&amp;lt;Post:0x13630c4 @attributes={&#34;title&#34;=&amp;gt;nil, &#34;body&#34;=&amp;gt;nil, &#34;id&#34;=&amp;gt;&#34;1&#34;}&amp;gt; f. Display all 152 possibilities? (y or n)&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Finally, when you&#39;re ready to resume execution, you enter &#34;cont&#34;&lt;/p&gt; &#xA;&lt;p&gt;== Console&lt;/p&gt; &#xA;&lt;p&gt;You can interact with the domain model by starting the console through &lt;tt&gt;script/console&lt;/tt&gt;. Here you&#39;ll have all parts of the application configured, just like it is when the application is running. You can inspect domain models, change values, and save to the database. Starting the script without arguments will launch it in the development environment. Passing an argument will specify a different environment, like &lt;tt&gt;script/console production&lt;/tt&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To reload your controllers and models after launching the console run &lt;tt&gt;reload!&lt;/tt&gt;&lt;/p&gt; &#xA;&lt;p&gt;== dbconsole&lt;/p&gt; &#xA;&lt;p&gt;You can go to the command line of your database directly through &lt;tt&gt;script/dbconsole&lt;/tt&gt;. You would be connected to the database with the credentials defined in database.yml. Starting the script without arguments will connect you to the development database. Passing an argument will connect you to a different database, like &lt;tt&gt;script/dbconsole production&lt;/tt&gt;. Currently works for mysql, postgresql and sqlite.&lt;/p&gt; &#xA;&lt;p&gt;== Description of Contents&lt;/p&gt; &#xA;&lt;p&gt;app Holds all the code that&#39;s specific to this particular application.&lt;/p&gt; &#xA;&lt;p&gt;app/controllers Holds controllers that should be named like weblogs_controller.rb for automated URL mapping. All controllers should descend from ApplicationController which itself descends from ActionController::Base.&lt;/p&gt; &#xA;&lt;p&gt;app/models Holds models that should be named like post.rb. Most models will descend from ActiveRecord::Base.&lt;/p&gt; &#xA;&lt;p&gt;app/views Holds the template files for the view that should be named like weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby syntax.&lt;/p&gt; &#xA;&lt;p&gt;app/views/layouts Holds the template files for layouts to be used with views. This models the common header/footer method of wrapping views. In your views, define a layout using the &lt;tt&gt;layout :default&lt;/tt&gt; and create a file named default.html.erb. Inside default.html.erb, call &amp;lt;% yield %&amp;gt; to render the view using this layout.&lt;/p&gt; &#xA;&lt;p&gt;app/helpers Holds view helpers that should be named like weblogs_helper.rb. These are generated for you automatically when using script/generate for controllers. Helpers can be used to wrap functionality for your views into methods.&lt;/p&gt; &#xA;&lt;p&gt;config Configuration files for the Rails environment, the routing map, the database, and other dependencies.&lt;/p&gt; &#xA;&lt;p&gt;db Contains the database schema in schema.rb. db/migrate contains all the sequence of Migrations for your schema.&lt;/p&gt; &#xA;&lt;p&gt;doc This directory is where your application documentation will be stored when generated using &lt;tt&gt;rake doc:app&lt;/tt&gt;&lt;/p&gt; &#xA;&lt;p&gt;lib Application specific libraries. Basically, any kind of custom code that doesn&#39;t belong under controllers, models, or helpers. This directory is in the load path.&lt;/p&gt; &#xA;&lt;p&gt;public The directory available for the web server. Contains subdirectories for images, stylesheets, and javascripts. Also contains the dispatchers and the default HTML files. This should be set as the DOCUMENT_ROOT of your web server.&lt;/p&gt; &#xA;&lt;p&gt;script Helper scripts for automation and generation.&lt;/p&gt; &#xA;&lt;p&gt;test Unit and functional tests along with fixtures. When using the script/generate scripts, template test files will be generated for you and placed in this directory.&lt;/p&gt; &#xA;&lt;p&gt;vendor External libraries that the application depends on. Also includes the plugins subdirectory. If the app has frozen rails, those gems also go here, under vendor/rails/. This directory is in the load path.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elastic/apm-agent-ruby</title>
    <updated>2023-05-08T01:46:45Z</updated>
    <id>tag:github.com,2023-05-08:/elastic/apm-agent-ruby</id>
    <link href="https://github.com/elastic/apm-agent-ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elastic APM agent for Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;elastic-apm&lt;/h1&gt; &#xA;&lt;h2&gt;Elastic APM agent for Ruby&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/apm-agent-ruby/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/elastic/apm-agent-ruby/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/elastic-apm&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/elastic-apm.svg?sanitize=true&#34; alt=&#34;Gem&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The official Rubygem for &lt;a href=&#34;https://elastic.co&#34;&gt;Elastic&lt;/a&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/server/index.html&#34;&gt;APM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;💡 We&#39;d love to get feedback and information about your setup – please answer this &lt;a href=&#34;https://goo.gl/forms/LQktvn4rkLWBNSWy1&#34;&gt;☑ short survey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/index.html&#34;&gt;Full documentation at elastic.co&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/set-up.html&#34;&gt;Set up the Agent&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/getting-started-rails.html&#34;&gt;Getting started with Rails&lt;/a&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/getting-started-rack.html&#34;&gt;Getting started with Rack&lt;/a&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/supported-technologies.html&#34;&gt;Supported technologies&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/configuration.html&#34;&gt;Configuration&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/advanced.html&#34;&gt;Advanced Topics&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/context.html&#34;&gt;Adding additional context&lt;/a&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/custom-instrumentation.html&#34;&gt;Custom instrumentation&lt;/a&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/api.html&#34;&gt;API reference&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/metrics.html&#34;&gt;Metrics&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/opentracing.html&#34;&gt;OpenTracing API&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/graphql.html&#34;&gt;GraphQL&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/log-correlation.html&#34;&gt;Log correlation&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/tuning-and-overhead.html&#34;&gt;Performance tuning&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/debugging.html&#34;&gt;Troubleshooting&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/upgrading.html&#34;&gt;Upgrading&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li class=&#34;collapsible&#34;&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/release-notes.html&#34;&gt;Release notes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/release-notes-4.x.html&#34;&gt;Ruby Agent version 4.x&lt;/a&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/release-notes-3.x.html&#34;&gt;Ruby Agent version 3.x&lt;/a&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/release-notes-2.x.html&#34;&gt;Ruby Agent version 2.x&lt;/a&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/release-notes-1.x.html&#34;&gt;Ruby Agent version 1.x&lt;/a&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/current/release-notes-0.x.html&#34;&gt;Ruby Agent version 0.x&lt;/a&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;If you find a bug, please &lt;a href=&#34;https://github.com/elastic/apm-agent-ruby/issues&#34;&gt;report an issue&lt;/a&gt;. For any other assistance, please open or add to a topic on the &lt;a href=&#34;https://discuss.elastic.co/c/apm&#34;&gt;APM discuss forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;A Docker based setup is provided for development.&lt;/p&gt; &#xA;&lt;p&gt;To run all specs in the official &lt;code&gt;ruby:latest&lt;/code&gt; image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bin/dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pick a specific Ruby version, specify it with the &lt;code&gt;-i&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bin/dev -i jruby:9.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the first argument is a path starting with &lt;code&gt;spec/&lt;/code&gt;, the passed specs will be run. Otherwise any arguments passed will be run as a command inside the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bin/dev -i jruby:9.2 spec/integration/rails_spec.rb   # ✅&#xA;$ bin/dev -i some_custom_image bash                     # ✅&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see all options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bin/dev -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0&lt;/p&gt;</summary>
  </entry>
</feed>