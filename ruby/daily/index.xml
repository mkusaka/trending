<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-01T01:34:45Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>timdorr/tesla-api</title>
    <updated>2023-08-01T01:34:45Z</updated>
    <id>tag:github.com,2023-08-01:/timdorr/tesla-api</id>
    <link href="https://github.com/timdorr/tesla-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸš˜ A Ruby gem and unofficial documentation of Tesla&#39;s JSON API for the Model S, 3, X, and Y.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Referrals are back! Need a vehicle to test with? &lt;a href=&#34;http://ts.la/timothy8449&#34;&gt;Get a Tesla with free supercharging&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Do you work at Tesla? Get in contact! I&#39;d love to help with making this API official.&lt;/p&gt; &#xA;&lt;h1&gt;Tesla JSON API&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tesla-api.timdorr.com/&#34;&gt;View Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is unofficial documentation of the Tesla JSON API used by the iOS and Android apps. The API provides functionality to monitor and control the Model S (and future Tesla vehicles) remotely. The project provides both a documentation of the API and a Ruby library for accessing it.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If any folks at Tesla are reading this, I&#39;d love to help coordinate a developer program for your APIs. If there&#39;s any way I can be helpful, please feel free to get in contact. Also, I&#39;d love to be in the beta firmware program &lt;span&gt;ðŸ˜‰&lt;/span&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Ruby Gem &lt;a href=&#34;http://rubygems.org/gems/tesla_api&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/tesla_api.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/timdorr/tesla-api&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/timdorr/tesla-api/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This gem provides a basic wrapper around the API to easily query and command the car remotely. It also provides access to the streaming API and a means to process data coming from it.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;tesla_api&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install tesla_api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a quick example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;tesla_api&#39;&#xA;&#xA;tesla_api = TeslaApi::Client.new(email: email, client_id: client_id, client_secret: client_secret)&#xA;tesla_api.login!(password)&#xA;# Or if you have an access token:&#xA;tesla_api = TeslaApi::Client.new(access_token: access_token)&#xA;&#xA;model_s = tesla_api.vehicles.first # =&amp;gt; &amp;lt;TeslaApi::Vehicle&amp;gt;&#xA;&#xA;model_s.wake_up&#xA;model_s.auto_conditioning_start unless model_s.climate_state[&#34;is_auto_conditioning_on&#34;]&#xA;&#xA;model_s.set_charge_limit(90)&#xA;model_s.charge_start&#xA;&#xA;charge_state = model_s.charge_state&#xA;puts &#34;Your Model S is #{charge_state[&#34;charging_state&#34;]} &#34; +&#xA;     &#34;with a SOC of #{charge_state[&#34;battery_level&#34;]}% &#34; +&#xA;     &#34;and an estimate range of #{charge_state[&#34;est_battery_range&#34;]} miles&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Ruby portions are Copyright (c) 2014-Present Tim Dorr. Released under the terms of the MIT license. See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rubyforgood/stocks-in-the-future</title>
    <updated>2023-08-01T01:34:45Z</updated>
    <id>tag:github.com,2023-08-01:/rubyforgood/stocks-in-the-future</id>
    <link href="https://github.com/rubyforgood/stocks-in-the-future" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README&lt;/h1&gt; &#xA;&lt;p&gt;This README would normally document whatever steps are necessary to get the application up and running.&lt;/p&gt; &#xA;&lt;p&gt;Things you may want to cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ruby version&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;System dependencies&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configuration&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running in docker&lt;/h2&gt; &#xA;&lt;p&gt;We have a docker-compose file set up to allow smoother local development. The compose structure includes services needed for running the stocks app locally, with preconfigured connections.&lt;/p&gt; &#xA;&lt;p&gt;At present, these services are: postgres, redis, and the rails application.&lt;/p&gt; &#xA;&lt;p&gt;To start the application, run &lt;code&gt;docker compose up&lt;/code&gt;. Adding &lt;code&gt;-d&lt;/code&gt; will free your terminal after the service boots. After the application starts, the site can be accessed at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To set up the database the first time run, &lt;code&gt;docker compose run --rm stocks bin/rails db:setup&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The docker entrypoint takes care of installing updated gems, and running any pending database migrations before starting the rails application. Any gem or configuration changes can be applied by restarting the application server: &lt;code&gt;docker compose restart stocks&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running rails commands&lt;/h3&gt; &#xA;&lt;p&gt;To run rails commands, such as &lt;code&gt;rails generate ...&lt;/code&gt;, it is easiest to step into a console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker compose run --rm stocks bin/rails generate ....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a console is needed for multiple commands, you can launch a shell in a running the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker compose run --rm stocks bash&#xA;[+] Running 2/0&#xA; â ¿ Container stocks-in-the-future-db-1     Running                                                  0.0s&#xA; â ¿ Container stocks-in-the-future-redis-1  Running                                                  0.0s&#xA;The Gemfile&#39;s dependencies are satisfied&#xA;root@cea35fe15a85:/rails#&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;To run RSpec tests in the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker compose run --rm stocks rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a specific file/directory may be specified to narrow the scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker compose run --rm stocks rspec spec/features&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>