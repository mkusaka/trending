<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-21T01:34:35Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>github/choosealicense.com</title>
    <updated>2022-06-21T01:34:35Z</updated>
    <id>tag:github.com,2022-06-21:/github/choosealicense.com</id>
    <link href="https://github.com/github/choosealicense.com" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A site to provide non-judgmental guidance on choosing a license for your open source project&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://choosealicense.com&#34;&gt;ChooseALicense.com&lt;/a&gt;&lt;/strong&gt; aims to provide &lt;strong&gt;accurate&lt;/strong&gt;, &lt;strong&gt;non-judgmental&lt;/strong&gt;, and &lt;strong&gt;understandable&lt;/strong&gt; information about popular &lt;strong&gt;open source licenses&lt;/strong&gt; in order to &lt;strong&gt;help people make informed decisions&lt;/strong&gt; about the projects they start, maintain, contribute to, and use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/github/choosealicense.com/actions?query=workflow%3ABuild%20and%20Test&#34;&gt;&lt;img src=&#34;https://github.com/github/choosealicense.com/workflows/Build%20and%20Test/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We catalog &lt;a href=&#34;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/CONTRIBUTING.md#adding-a-license&#34;&gt;select&lt;/a&gt; open source licenses with a &lt;a href=&#34;https://jekyllrb.com/docs/collections/&#34;&gt;Jekyll collection&lt;/a&gt; (in &lt;code&gt;_licenses&lt;/code&gt;). The catalog is used to render &lt;a href=&#34;https://choosealicense.com&#34;&gt;ChooseALicense.com&lt;/a&gt; and is regularly vendored into &lt;a href=&#34;https://github.com/licensee/licensee&#34;&gt;Licensee&lt;/a&gt;, which GitHub uses to provide a &lt;a href=&#34;https://help.github.com/articles/adding-a-license-to-a-repository/&#34;&gt;license chooser and license detection&lt;/a&gt;, a &lt;a href=&#34;https://developer.github.com/v3/licenses/&#34;&gt;licenses API&lt;/a&gt;, and to &lt;a href=&#34;https://github.com/blog/2335-open-source-license-descriptions-and-metadata&#34;&gt;display license descriptions and metadata&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be accurate, non-judgmental, and understandable. Our goal is to help you find a license that meets &lt;em&gt;your&lt;/em&gt; goals.&lt;/li&gt; &#xA; &lt;li&gt;The homepage should have just enough to help most folks make a decision about what license to use for a project they contribute to.&lt;/li&gt; &#xA; &lt;li&gt;For the rest, the site will contain additional information about licenses common to specific communities and situations.&lt;/li&gt; &#xA; &lt;li&gt;Collaborate with and reinforce other licensing best practices and standards projects.&lt;/li&gt; &#xA; &lt;li&gt;Not comprehensive. Seems like an odd goal, but there are a bajillion licenses out there. We&#39;re going to have to filter that down to a small list of those that matter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Run it on your machine&lt;/h2&gt; &#xA;&lt;h3&gt;Managing Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;It may be the case that your system doesn&#39;t have the required dependencies. You will need &lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; installed on your computer.&lt;/p&gt; &#xA;&lt;p&gt;For MacOS, use Homebrew to update your dependencies (install Homebrew from &lt;a href=&#34;https://brew.sh/&#34;&gt;https://brew.sh/&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install make cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Linux/Ubuntu, use the &lt;code&gt;apt-get&lt;/code&gt; tool to install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install make cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing and Running the tool&lt;/h3&gt; &#xA;&lt;p&gt;Note that the third command (&lt;code&gt;./script/bootstrap&lt;/code&gt;) may require you to use &lt;code&gt;sudo&lt;/code&gt; access for installation. Add &lt;code&gt;sudo&lt;/code&gt; right before the third command, if need be, but don&#39;t use root access.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/github/choosealicense.com.git&#xA;cd choosealicense.com&#xA;./script/bootstrap&#xA;./script/server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;code&gt;http://localhost:4000&lt;/code&gt; in your favorite browser.&lt;/p&gt; &#xA;&lt;h2&gt;Adding a license&lt;/h2&gt; &#xA;&lt;p&gt;For information on adding a license, see &lt;a href=&#34;https://github.com/github/choosealicense.com/raw/gh-pages/CONTRIBUTING.md#adding-a-license&#34;&gt;the CONTRIBUTING file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License metadata&lt;/h2&gt; &#xA;&lt;p&gt;Licenses sit in the &lt;code&gt;/_licenses&lt;/code&gt; folder. Each license has YAML front matter describing the license&#39;s properties. The body of the file contains the text of the license in plain text. The available metadata fields are:&lt;/p&gt; &#xA;&lt;h4&gt;Required fields&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;title&lt;/code&gt; - The license full name specified by &lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;https://spdx.org/licenses/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spdx-id&lt;/code&gt; - Short identifier specified by &lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;https://spdx.org/licenses/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt; - A human-readable description of the license&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;how&lt;/code&gt; - Instructions on how to implement the license&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;using&lt;/code&gt; - A map of 3 notable projects using the license with straightforward LICENSE files which serve as examples newcomers can follow and that can be detected by &lt;a href=&#34;https://github.com/licensee/licensee&#34;&gt;licensee&lt;/a&gt; in the form of &lt;code&gt;project_name: license_file_url&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;permissions&lt;/code&gt; - Bulleted list of permission rules&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;conditions&lt;/code&gt; - Bulleted list of condition rules&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;limitations&lt;/code&gt; - Bulleted list of limitation rules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Optional fields&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;featured&lt;/code&gt; - Whether the license should be featured on the main page (defaults to false)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hidden&lt;/code&gt; - Whether the license is neither &lt;a href=&#34;https://opensource.org/licenses&#34;&gt;popular&lt;/a&gt; nor fills out the &lt;a href=&#34;https://choosealicense.com/licenses/&#34;&gt;spectrum of licenses&lt;/a&gt; from strongly conditional to unconditional (defaults to true)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nickname&lt;/code&gt; - Customary short name if applicable (e.g, GPLv3)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;note&lt;/code&gt; - Additional information about the licenses&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;redirect_from&lt;/code&gt; - Relative path(s) to redirect to the license from, to prevent breaking old URLs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Auto-populated fields&lt;/h3&gt; &#xA;&lt;p&gt;The licenses on choosealicense.com are regularly imported to GitHub.com to be used as the list of licenses available when creating a repository. When we create a repository, we will replace certain strings in the license with variables from the repository. These can be used to create accurate copyright notices. The available variables are:&lt;/p&gt; &#xA;&lt;h4&gt;Fields&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fullname&lt;/code&gt; - The full name or username of the repository owner&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;login&lt;/code&gt; - The repository owner&#39;s username&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;email&lt;/code&gt; - The repository owner&#39;s primary email address&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;project&lt;/code&gt; - The repository name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt; - The description of the repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;year&lt;/code&gt; - The current year&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projecturl&lt;/code&gt; - The repository URL or other project website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License properties&lt;/h2&gt; &#xA;&lt;p&gt;The license properties (rules) are stored as a bulleted list within the licenses YAML front matter. Each rule has a name e.g., &lt;code&gt;include-copyright&lt;/code&gt;, a human-readable label, e.g., &lt;code&gt;Copyright inclusion&lt;/code&gt;, and a description &lt;code&gt;Include the original copyright with the code&lt;/code&gt;. To add a new rule, simply add it to &lt;code&gt;_data/rules.yml&lt;/code&gt; and reference it in the appropriate license.&lt;/p&gt; &#xA;&lt;h3&gt;Rules&lt;/h3&gt; &#xA;&lt;h4&gt;Permissions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;commercial-use&lt;/code&gt; - This software and derivatives may be used for commercial purposes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;modifications&lt;/code&gt; - This software may be modified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;distribution&lt;/code&gt; - This software may be distributed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;private-use&lt;/code&gt; - This software may be used and modified in private.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;patent-use&lt;/code&gt; - This license provides an express grant of patent rights from contributors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Conditions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;include-copyright&lt;/code&gt; - A copy of the license and copyright notice must be included with the software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;include-copyright--source&lt;/code&gt; - A copy of the license and copyright notice must be included with the software in source form, but is not required for binaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;document-changes&lt;/code&gt; - Changes made to the code must be documented.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disclose-source&lt;/code&gt; - Source code must be made available when the software is distributed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;network-use-disclose&lt;/code&gt; - Users who interact with the software via network are given the right to receive a copy of the source code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;same-license&lt;/code&gt; - Modifications must be released under the same license when distributing the software. In some cases a similar or related license may be used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;same-license--file&lt;/code&gt; - Modifications of existing files must be released under the same license when distributing the software. In some cases a similar or related license may be used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;same-license--library&lt;/code&gt; - Modifications must be released under the same license when distributing the software. In some cases a similar or related license may be used, or this condition may not apply to works that use the software as a library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Limitations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;trademark-use&lt;/code&gt; - This license explicitly states that it does NOT grant trademark rights, even though licenses without such a statement probably do not grant any implicit trademark rights.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;liability&lt;/code&gt; - This license includes a limitation of liability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;patent-use&lt;/code&gt; - This license explicitly states that it does NOT grant any rights in the patents of contributors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;warranty&lt;/code&gt; - The license explicitly states that it does NOT provide any warranty.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The content of this project itself is licensed under the &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons Attribution 3.0 Unported license&lt;/a&gt;, and the underlying source code used to format and display that content is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/linguist</title>
    <updated>2022-06-21T01:34:35Z</updated>
    <id>tag:github.com,2022-06-21:/github/linguist</id>
    <link href="https://github.com/github/linguist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Language Savant. If your repository&#39;s language is being reported incorrectly, send us a pull request!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linguist&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/github/linguist/actions&#34;&gt;&lt;img src=&#34;https://github.com/github/linguist/workflows/Run%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library is used on GitHub.com to detect blob languages, ignore binary or vendored files, suppress generated files in diffs, and generate language breakdown graphs.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/docs/how-linguist-works.md&#34;&gt;How Linguist works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/docs/overrides.md&#34;&gt;Change Linguist&#39;s behaviour with overrides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/docs/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/CONTRIBUTING.md&#34;&gt;Contributing guidelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install github-linguist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Linguist is a Ruby library so you will need a recent version of Ruby installed. There are known problems with the macOS/XCode supplied version of Ruby that causes problems installing some of the dependencies. Accordingly, we highly recommend you install a version of Ruby using Homebrew, &lt;code&gt;rbenv&lt;/code&gt;, &lt;code&gt;rvm&lt;/code&gt;, &lt;code&gt;ruby-build&lt;/code&gt;, &lt;code&gt;asdf&lt;/code&gt; or other packaging system, before attempting to install Linguist and the dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Linguist uses &lt;a href=&#34;https://github.com/brianmario/charlock_holmes&#34;&gt;&lt;code&gt;charlock_holmes&lt;/code&gt;&lt;/a&gt; for character encoding and &lt;a href=&#34;https://github.com/libgit2/rugged&#34;&gt;&lt;code&gt;rugged&lt;/code&gt;&lt;/a&gt; for libgit2 bindings for Ruby. These components have their own dependencies.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;charlock_holmes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;cmake&lt;/li&gt; &#xA;   &lt;li&gt;pkg-config&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://site.icu-project.org/&#34;&gt;ICU&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://zlib.net/&#34;&gt;zlib&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;rugged &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://curl.haxx.se/libcurl/&#34;&gt;libcurl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.openssl.org&#34;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You may need to install missing dependencies before you can install Linguist. For example, on macOS with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install cmake pkg-config icu4c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install cmake pkg-config libicu-dev zlib1g-dev libcurl4-openssl-dev libssl-dev ruby-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Application usage&lt;/h3&gt; &#xA;&lt;p&gt;Linguist can be used in your application as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rugged&#39;&#xA;require &#39;linguist&#39;&#xA;&#xA;repo = Rugged::Repository.new(&#39;.&#39;)&#xA;project = Linguist::Repository.new(repo, repo.head.target_id)&#xA;project.language       #=&amp;gt; &#34;Ruby&#34;&#xA;project.languages      #=&amp;gt; { &#34;Ruby&#34; =&amp;gt; 119387 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command line usage&lt;/h3&gt; &#xA;&lt;h4&gt;Git Repository&lt;/h4&gt; &#xA;&lt;p&gt;A repository&#39;s languages stats can also be assessed from the command line using the &lt;code&gt;github-linguist&lt;/code&gt; executable. Without any options, &lt;code&gt;github-linguist&lt;/code&gt; will output the language breakdown by percentage and file size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /path-to-repository&#xA;github-linguist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can try running &lt;code&gt;github-linguist&lt;/code&gt; on the root directory in this repository itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-linguist&#xA;66.84%  264519     Ruby&#xA;24.68%  97685      C&#xA;6.57%   25999      Go&#xA;1.29%   5098       Lex&#xA;0.32%   1257       Shell&#xA;0.31%   1212       Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Additional options&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;--breakdown&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;--breakdown&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; flag will additionally show the breakdown of files by language.&lt;/p&gt; &#xA;&lt;p&gt;You can try running &lt;code&gt;github-linguist&lt;/code&gt; on the root directory in this repository itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-linguist --breakdown&#xA;66.84%  264519     Ruby&#xA;24.68%  97685      C&#xA;6.57%   25999      Go&#xA;1.29%   5098       Lex&#xA;0.32%   1257       Shell&#xA;0.31%   1212       Dockerfile&#xA;&#xA;Ruby:&#xA;Gemfile&#xA;Rakefile&#xA;bin/git-linguist&#xA;bin/github-linguist&#xA;ext/linguist/extconf.rb&#xA;github-linguist.gemspec&#xA;lib/linguist.rb&#xA;…&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;--json&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;--json&lt;/code&gt; or &lt;code&gt;-j&lt;/code&gt; flag output the data into JSON format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-linguist --json&#xA;{&#34;Dockerfile&#34;:{&#34;size&#34;:1212,&#34;percentage&#34;:&#34;0.31&#34;},&#34;Ruby&#34;:{&#34;size&#34;:264519,&#34;percentage&#34;:&#34;66.84&#34;},&#34;C&#34;:{&#34;size&#34;:97685,&#34;percentage&#34;:&#34;24.68&#34;},&#34;Lex&#34;:{&#34;size&#34;:5098,&#34;percentage&#34;:&#34;1.29&#34;},&#34;Shell&#34;:{&#34;size&#34;:1257,&#34;percentage&#34;:&#34;0.32&#34;},&#34;Go&#34;:{&#34;size&#34;:25999,&#34;percentage&#34;:&#34;6.57&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option can be used in conjunction with &lt;code&gt;--breakdown&lt;/code&gt; to get a full list of files along with the size and percentage data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-linguist --breakdown --json&#xA;{&#34;Dockerfile&#34;:{&#34;size&#34;:1212,&#34;percentage&#34;:&#34;0.31&#34;,&#34;files&#34;:[&#34;Dockerfile&#34;,&#34;tools/grammars/Dockerfile&#34;]},&#34;Ruby&#34;:{&#34;size&#34;:264519,&#34;percentage&#34;:&#34;66.84&#34;,&#34;files&#34;:[&#34;Gemfile&#34;,&#34;Rakefile&#34;,&#34;bin/git-linguist&#34;,&#34;bin/github-linguist&#34;,&#34;ext/linguist/extconf.rb&#34;,&#34;github-linguist.gemspec&#34;,&#34;lib/linguist.rb&#34;,...]}}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Single file&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively you can find stats for a single file using the &lt;code&gt;github-linguist&lt;/code&gt; executable.&lt;/p&gt; &#xA;&lt;p&gt;You can try running &lt;code&gt;github-linguist&lt;/code&gt; on files in this repository itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-linguist grammars.yml&#xA;grammars.yml: 884 lines (884 sloc)&#xA;  type:      Text&#xA;  mime type: text/x-yaml&#xA;  language:  YAML&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;If you have Docker installed you can build an image and run Linguist within a container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker build -t linguist .&#xA;$ docker run --rm -v $(pwd):$(pwd) -w $(pwd) -t linguist&#xA;66.84%  264519     Ruby&#xA;24.68%  97685      C&#xA;6.57%   25999      Go&#xA;1.29%   5098       Lex&#xA;0.32%   1257       Shell&#xA;0.31%   1212       Dockerfile&#xA;$ docker run --rm -v $(pwd):$(pwd) -w $(pwd) -t linguist github-linguist --breakdown&#xA;66.84%  264519     Ruby&#xA;24.68%  97685      C&#xA;6.57%   25999      Go&#xA;1.29%   5098       Lex&#xA;0.32%   1257       Shell&#xA;0.31%   1212       Dockerfile&#xA;&#xA;Ruby:&#xA;Gemfile&#xA;Rakefile&#xA;bin/git-linguist&#xA;bin/github-linguist&#xA;ext/linguist/extconf.rb&#xA;github-linguist.gemspec&#xA;lib/linguist.rb&#xA;…&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please check out our &lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The language grammars included in this gem are covered by their repositories&#39; respective licenses. &lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/vendor/README.md&#34;&gt;&lt;code&gt;vendor/README.md&lt;/code&gt;&lt;/a&gt; lists the repository for each grammar.&lt;/p&gt; &#xA;&lt;p&gt;All other files are covered by the MIT license, see &lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rails/tailwindcss-rails</title>
    <updated>2022-06-21T01:34:35Z</updated>
    <id>tag:github.com,2022-06-21:/rails/tailwindcss-rails</id>
    <link href="https://github.com/rails/tailwindcss-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tailwind CSS for Rails&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tailwindcss.com&#34;&gt;Tailwind CSS&lt;/a&gt; is a utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.&lt;/p&gt; &#xA;&lt;p&gt;This gem wraps &lt;a href=&#34;https://tailwindcss.com/blog/standalone-cli&#34;&gt;the standalone executable version&lt;/a&gt; of the Tailwind CSS v3 framework. These executables are platform specific, so there are actually separate underlying gems per platform, but the correct gem will automatically be picked for your platform. Supported platforms are Linux x64, macOS arm64, macOS x64, and Windows x64. (Note that due to this setup, you must install the actual gems – you can&#39;t pin your gem to the github repo.)&lt;/p&gt; &#xA;&lt;p&gt;You can customize the Tailwind build through the &lt;code&gt;config/tailwind.config.js&lt;/code&gt; file, just like you would if Tailwind was running in a traditional node installation. All the first-party plugins are supported.&lt;/p&gt; &#xA;&lt;p&gt;The installer will create your Tailwind input file in &lt;code&gt;app/assets/stylesheets/application.tailwind.css&lt;/code&gt;. This is where you import the plugins you want to use, and where you can setup your custom &lt;code&gt;@apply&lt;/code&gt; rules. When you run &lt;code&gt;rails tailwindcss:build&lt;/code&gt;, this input file will be used to generate the output in &lt;code&gt;app/assets/builds/tailwind.css&lt;/code&gt;. That&#39;s the output CSS that you&#39;ll include in your app (the installer automatically configures this, alongside the Inter font as well).&lt;/p&gt; &#xA;&lt;p&gt;If you need to use a custom input or output file, you can run &lt;code&gt;bundle exec tailwindcss&lt;/code&gt; to access the platform-specific executable, and give it your own build options.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;re developing your application, you want to run Tailwind in watch mode, so changes are automatically reflected in the generated CSS output. You can do this either by running &lt;code&gt;rails tailwindcss:watch&lt;/code&gt; as a separate process, or by running &lt;code&gt;./bin/dev&lt;/code&gt; which uses &lt;a href=&#34;https://github.com/ddollar/foreman&#34;&gt;foreman&lt;/a&gt; to starts both the Tailwind watch process and the rails server in development mode. If you are running &lt;code&gt;rails tailwindcss:watch&lt;/code&gt; as a process in a Docker container, set &lt;code&gt;tty: true&lt;/code&gt; in &lt;code&gt;docker-compose.yml&lt;/code&gt; for the appropriate container to keep the watch process running.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;With Rails 7 you can generate a new application preconfigured with Tailwind by using &lt;code&gt;--css tailwind&lt;/code&gt;. If you&#39;re adding Tailwind later, you need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./bin/bundle add tailwindcss-rails&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./bin/rails tailwindcss:install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building in production&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;tailwindcss:build&lt;/code&gt; is automatically attached to &lt;code&gt;assets:precompile&lt;/code&gt;, so before the asset pipeline digests the files, the Tailwind output will be generated.&lt;/p&gt; &#xA;&lt;h2&gt;Building for testing&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;tailwindcss:build&lt;/code&gt; is automatically attached to &lt;code&gt;test:prepare&lt;/code&gt;, which runs before Rails tests. (Note that this currently only applies to rails &lt;code&gt;test:*&lt;/code&gt; tasks (like &lt;code&gt;test:all&lt;/code&gt; or &lt;code&gt;test:controllers&lt;/code&gt;), not &#34;rails test&#34;, as that doesn&#39;t load &lt;code&gt;test:prepare&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Conflict with sassc-rails&lt;/h2&gt; &#xA;&lt;p&gt;Tailwind uses modern CSS features that are not recognized by the &lt;code&gt;sassc-rails&lt;/code&gt; extension that was included by default in the Gemfile for Rails 6. In order to avoid any errors like &lt;code&gt;SassC::SyntaxError&lt;/code&gt;, you must remove that gem from your Gemfile.&lt;/p&gt; &#xA;&lt;h2&gt;Class names must be spelled out&lt;/h2&gt; &#xA;&lt;p&gt;For Tailwind to work, your class names need to be spelled out. They can&#39;t be programmatically composed. So no &#34;text-gray-#{grade}&#34;, only &#34;text-gray-500&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Some common problems experienced by users ...&lt;/p&gt; &#xA;&lt;h3&gt;ERROR: Cannot find the tailwindcss executable for &amp;lt;supported platform&amp;gt;&lt;/h3&gt; &#xA;&lt;p&gt;Some users are reporting this error even when running on one of the supported native platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;arm64-darwin&lt;/li&gt; &#xA; &lt;li&gt;x64-mingw32&lt;/li&gt; &#xA; &lt;li&gt;x64-mingw-ucrt&lt;/li&gt; &#xA; &lt;li&gt;x86_64-darwin&lt;/li&gt; &#xA; &lt;li&gt;x86_64-linux&lt;/li&gt; &#xA; &lt;li&gt;aarch64-linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Check Bundler PLATFORMS&lt;/h4&gt; &#xA;&lt;p&gt;A possible cause of this is that Bundler has not been told to include native gems for your current platform. Please check your &lt;code&gt;Gemfile.lock&lt;/code&gt; file to see whether your native platform is included in the &lt;code&gt;PLATFORMS&lt;/code&gt; section. If necessary, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle lock --add-platform &amp;lt;platform-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and re-bundle.&lt;/p&gt; &#xA;&lt;h4&gt;Check BUNDLE_FORCE_RUBY_PLATFORM&lt;/h4&gt; &#xA;&lt;p&gt;Another common cause of this is that bundler is configured to always use the &#34;ruby&#34; platform via the &lt;code&gt;BUNDLE_FORCE_RUBY_PLATFORM&lt;/code&gt; config parameter being set to &lt;code&gt;true&lt;/code&gt;. Please remove this configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle config unset force_ruby_platform&#xA;# or&#xA;bundle config set --local force_ruby_platform false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and re-bundle.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://bundler.io/man/bundle-config.1.html&#34;&gt;https://bundler.io/man/bundle-config.1.html&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;&#34;No such file or directory&#34; running on Alpine (musl)&lt;/h3&gt; &#xA;&lt;p&gt;When running &lt;code&gt;tailwindcss&lt;/code&gt; on an Alpine system, some users report a &#34;No such file or directory&#34; error message.&lt;/p&gt; &#xA;&lt;h4&gt;Install gnu libc compatibility&lt;/h4&gt; &#xA;&lt;p&gt;The cause of this is the upstream &lt;code&gt;tailwindcss&lt;/code&gt; binary executables being built on a gnu libc system, making them incompatible with standard musl libc systems.&lt;/p&gt; &#xA;&lt;p&gt;A fix for this has been proposed upstream at &lt;a href=&#34;https://github.com/tailwindlabs/tailwindcss/discussions/6785&#34;&gt;https://github.com/tailwindlabs/tailwindcss/discussions/6785&lt;/a&gt;, but in the meantime a workaround is to install compatibility libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apk add build-base gcompat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using asset-pipeline assets&lt;/h3&gt; &#xA;&lt;p&gt;In Rails, you want to use &lt;a href=&#34;https://guides.rubyonrails.org/asset_pipeline.html#what-is-fingerprinting-and-why-should-i-care-questionmark&#34;&gt;assets from the asset pipeline to get fingerprinting&lt;/a&gt;. However, Tailwind isn&#39;t aware of those assets. To use assets from the pipeline, use &lt;code&gt;url(image.svg)&lt;/code&gt;. &lt;a href=&#34;https://github.com/rails/sprockets-rails/pull/476&#34;&gt;Since Sprockets v3.3.0&lt;/a&gt; &lt;code&gt;url(image.svg)&lt;/code&gt; will then automatically be rewritten to &lt;code&gt;/path/to/assets/image-7801e7538c6f1cc57aa75a5876ab0cac.svg&lt;/code&gt;. So the output CSS will have the correct path to those assets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {&#xA;    theme: {&#xA;        extend: {&#xA;            backgroundImage: {&#xA;                &#39;image&#39;: &#34;url(&#39;image.svg&#39;)&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The inline version also works:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;section class=&#34;bg-[url(&#39;image.svg&#39;)]&#34;&amp;gt;Has the image as it&#39;s background&amp;lt;/section&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Tailwind for Rails is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;. Tailwind CSS is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;. The Inter font is released under the &lt;a href=&#34;https://github.com/rsms/inter/raw/master/LICENSE.txt&#34;&gt;SIL Open Font License, Version 1.1&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>