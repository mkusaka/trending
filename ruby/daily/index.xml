<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-31T01:46:30Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>urbanadventurer/username-anarchy</title>
    <updated>2023-05-31T01:46:30Z</updated>
    <id>tag:github.com,2023-05-31:/urbanadventurer/username-anarchy</id>
    <link href="https://github.com/urbanadventurer/username-anarchy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Username tools for penetration testing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Username Anarchy&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version: 0.5 (October 2016)&lt;/li&gt; &#xA; &lt;li&gt;Author: urbanadventurer (Andrew Horton)&lt;/li&gt; &#xA; &lt;li&gt;Homepage: &lt;a href=&#34;http://www.morningstarsecurity.com/research/username-anarchy&#34;&gt;http://www.morningstarsecurity.com/research/username-anarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Source: &lt;a href=&#34;https://github.com/urbanadventurer/username-anarchy/&#34;&gt;https://github.com/urbanadventurer/username-anarchy/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Tools for generating usernames when penetration testing. &lt;em&gt;Usernames are half the password brute force problem.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is useful for user account/password brute force guessing and username enumeration when usernames are based on the users&#39; names. By attempting a few weak passwords across a large set of user accounts, user account lockout thresholds can be avoided.&lt;/p&gt; &#xA;&lt;p&gt;Users&#39; names can be identified through a variety of methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web scraping employee names from LinkedIn, Facebook, and other social networks.&lt;/li&gt; &#xA; &lt;li&gt;Extracting metadata from document types such as PDF, Word, Excel, etc. This can be performed with FOCA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Common aliases, or self chosen usernames, from forums are also included.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plugin architecture for username formats&lt;/li&gt; &#xA; &lt;li&gt;Format string style username format definitions&lt;/li&gt; &#xA; &lt;li&gt;Substitutions. e.g. when only a first initial and lastname is known (LinkedIn lists users like this), it will attempt all possible first names&lt;/li&gt; &#xA; &lt;li&gt;Country databases of common first and last names from Familypedia and PublicProfiler&lt;/li&gt; &#xA; &lt;li&gt;Has the Facebook common first and lastnames lists&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Common forum usernames, ordered by popularity&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Username Anarchy is a command line tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9; ___ ____                                                        &#xA;&#x9;|   |    \ ______  ____ _______   ____  _____     __ __    ____  &#xA;&#x9;|   :    //  ___/_/    \\_  __ \ /    \ \__  \   /  :  \ _/    \&#xA;&#x9;&#39;   .   / \___ \ \   o_/ |  | \/|   :  \ /  o \ |  . .  \\   o_/ &#xA;&#x9; \_____/ /______) \_____)|__|   |___:  /(______)|__: :  / \_____)&#xA;&#x9;       _____                         \/       .__     \/      &#xA;&#x9;      /     \    ____  _____  _______   ____  |  |__  ___.__.   &#xA;&#x9;     /   o   \  /    \ \__  \ \_  __ \_/ ___\ |  |  \(   :  |   &#xA;&#x9;    /    .    \|   .  \ /  o \ |  | \/\  \___ |   .  \\___  |   &#xA;&#x9;    \____:__  /|___:__/(______)|__|    \_____)|___:__//_____|   &#xA;&#x9;            \/                                                  &#xA;&#x9;Usage: ./username-anarchy [OPTIONS]... [firstname|first last|first middle last]&#xA;&#x9;Author: Andrew Horton (urbanadventurer). Version: 0.5&#xA;&#xA;&#x9;Names:&#xA;&#x9; -i, --input-file FILE     Input list of names. Can be SPACE, CSV or TAB delimited.&#xA;&#x9;                           Defaults to firstname, lastname. Valid column headings are:&#xA;&#x9;                           firstinitial, firstname, lastinitial, lastname,&#xA;&#x9;                           middleinitial, middlename.&#xA;&#x9; -a, --auto                Automatically generate names from a country/list&#xA;&#x9; -c, --country COUNTRY     COUNTRY can be one of the following datasets:&#xA;&#x9;                           PublicProfiler:&#xA;&#x9;                           argentina, austria, belgium, canada, china,&#xA;&#x9;                           denmark, france, germany, hungary, india, ireland,&#xA;&#x9;                           italy, luxembourg, netherlands, newzealand, norway,&#xA;&#x9;                           poland, serbia, slovenia, spain, sweden,&#xA;&#x9;                           switzerland, uk, us&#xA;&#x9;                           Other:&#xA;&#x9;                           Facebook - uses the Facebook top 10,000 names&#xA;&#x9;     --given-names FILE    Dictionary of given names&#xA;&#x9;     --family-names FILE   Dictionary of family names&#xA;&#x9; -s, --substitute STATE    Control name substitutions&#xA;&#x9;                           Valid values are &#39;on&#39; and &#39;off&#39;. Default: off&#xA;&#x9;                           Can substitute any part of a name not available&#xA;&#x9; -m, --max-sub NUM         Limit quantity of substitutions per plugin.&#xA;&#x9;                           Default: -1 (Unlimited)&#xA;&#xA;&#x9;Username format:&#xA;&#x9; -l, --list-formats        List format plugins&#xA;&#x9; -f, --select-format LIST  Select format plugins by name. Comma delimited list&#xA;&#x9; -r, --recognise USERNAME  Recognise which format is in use for a username.&#xA;&#x9;                           This uses the Facebook dataset. Use verbose mode to&#xA;&#x9;                           show progress.&#xA;&#x9; -F, --format FORMAT       Define the user format using either format string or&#xA;&#x9;                           ABK format. See README.md for format details.&#xA;&#xA;&#x9;Output:&#xA;&#x9; -@, --suffix BOOL         Suffix. e.g. @example.com&#xA;&#x9;                           Default: None&#xA;&#x9; -C BOOL,                  Case insensitive usernames.&#xA;&#x9;     --case-insensitive    Default: True (All lower case)&#xA;&#xA;&#x9;Miscellaneous:&#xA;&#x9; -v, --verbose             Display plugin format comments in output and displays&#xA;&#x9;                           last name searches in plugin format recogniser&#xA;&#x9; -h, --help&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;h3&gt;You know the name of a user but not the username format&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./username-anarchy anna key&#xA;anna&#xA;annakey&#xA;anna.key&#xA;annakey&#xA;annak&#xA;a.key&#xA;akey&#xA;kanna&#xA;k.anna&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;You know the username format and names of users&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./username-anarchy --input-file ./test-names.txt  --select-format first.last&#xA;andrew.horton&#xA;jim.vongrippenvud&#xA;peter.otoole&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;You know the server is in France&lt;/h3&gt; &#xA;&lt;p&gt;Note that -a or --auto is required when you do not specify any input names.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./username-anarchy --country france --auto&#xA;martin&#xA;bernard&#xA;thomas&#xA;durand&#xA;richard&#xA;robert&#xA;petit&#xA;moreau&#xA;dubois&#xA;simon&#xA;martinsmith&#xA;martinjohnson&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List username format plugins&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./username-anarchy --list-formats&#xA;Plugin name         &#x9;Example&#xA;--------------------------------------------------------------------------------&#xA;first               &#x9;anna&#xA;firstlast           &#x9;annakey&#xA;first.last          &#x9;anna.key&#xA;firstlast[8]        &#x9;annakey&#xA;firstl              &#x9;annak&#xA;f.last              &#x9;a.key&#xA;flast               &#x9;akey&#xA;lfirst              &#x9;kanna&#xA;l.first             &#x9;k.anna&#xA;lastf               &#x9;keya&#xA;last                &#x9;key&#xA;last.f              &#x9;key.a&#xA;last.first          &#x9;key.anna&#xA;FLast               &#x9;AKey&#xA;first1              &#x9;anna0,anna1,anna2&#xA;fl                  &#x9;ak&#xA;fmlast              &#x9;abkey&#xA;firstmiddlelast     &#x9;annaboomkey&#xA;fml                 &#x9;abk&#xA;FL                  &#x9;AK&#xA;FirstLast           &#x9;AnnaKey&#xA;First.Last          &#x9;Anna.Key&#xA;Last                &#x9;Key&#xA;FML                 &#x9;ABK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatically recognise the username format in use&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./username-anarchy --recognise j.smith&#xA;Recognising j.smith. This can take a while.&#xA;Username format j.smith recognised. Plugin name: f.last&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Input Files&lt;/h2&gt; &#xA;&lt;p&gt;To generate usernames for more than one user account you must provide the names in a text file. This can be either TAB or CSV delimited.&lt;/p&gt; &#xA;&lt;h3&gt;Example 1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Firstname,Lastname&#xA;Andrew,Horton&#xA;Jim, von Grippenvud&#xA;Peter,O&#39;Toole&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 2&lt;/h3&gt; &#xA;&lt;p&gt;LinkedIn often shows the firstname and last initial&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;firstname,lastinitial&#xA;andrew,h&#xA;foo,b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 3&lt;/h3&gt; &#xA;&lt;p&gt;Mixed set of names&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;firstname,firstinitial,middleinitial,lastname,lastinitial&#xA;andrew,,,horton,&#xA;jim,,,,v&#xA;,p,,o&#39;toole,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Plugins&lt;/h2&gt; &#xA;&lt;h3&gt;Command line Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Define a custom plugin format using either the ABK or format string format. Specify the username format with -F or --format&lt;/p&gt; &#xA;&lt;h4&gt;Example 1&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./username-anarchy -F &#34;v-annakey&#34; andrew horton&#xA;v-andrewhorton&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example 2&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./username-anarchy -F &#34;v-%f%l&#34; -a -C poland&#xA;v-nowaksmith&#xA;v-nowakjohnson&#xA;v-nowakjones&#xA;v-nowakwilliams&#xA;v-nowakbrown&#xA;v-nowaklee&#xA;v-nowakkhan&#xA;v-nowaksingh&#xA;v-nowakkumar&#xA;v-nowakmiller&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Writing Plugins&lt;/h3&gt; &#xA;&lt;p&gt;You can add plugins to username anarchy by defining them in format-plugins.rb&lt;/p&gt; &#xA;&lt;p&gt;This example uses the ABK format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plugin.define &#34;last.first&#34; do&#xA;&#x9;def generate(n)&#xA;&#x9;&#x9;n.format_anna(&#34;key.anna&#34;)&#xA;&#x9;end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example uses the format string format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plugin.define &#34;first&#34; do&#xA;&#x9;def generate(n)&#xA;&#x9;&#x9;n.format(&#34;%f&#34;)&#xA;&#x9;end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Format Strings&lt;/h3&gt; &#xA;&lt;p&gt;Username Anarchy provides a method of defining a username format with format strings.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;%F - Firstname&lt;/li&gt; &#xA; &lt;li&gt;%M - Middlename&lt;/li&gt; &#xA; &lt;li&gt;%L - Lastname&lt;/li&gt; &#xA; &lt;li&gt;%f - firstname&lt;/li&gt; &#xA; &lt;li&gt;%m - middlename&lt;/li&gt; &#xA; &lt;li&gt;%l - lastname&lt;/li&gt; &#xA; &lt;li&gt;%i.f - first initial&lt;/li&gt; &#xA; &lt;li&gt;%i.m - middle initial&lt;/li&gt; &#xA; &lt;li&gt;%i.l - last initial&lt;/li&gt; &#xA; &lt;li&gt;%i.F - First initial&lt;/li&gt; &#xA; &lt;li&gt;%i.M - Middle initial&lt;/li&gt; &#xA; &lt;li&gt;%i.L - Last initial&lt;/li&gt; &#xA; &lt;li&gt;%D - Digit range 0..9&lt;/li&gt; &#xA; &lt;li&gt;%DD - Digit range 00..99&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ABK Format&lt;/h3&gt; &#xA;&lt;p&gt;Username Anarchy provides a method of defining a username format with ABK format which translates to format strings.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Anna - %F&lt;/li&gt; &#xA; &lt;li&gt;Boom - %M&lt;/li&gt; &#xA; &lt;li&gt;Key - %L&lt;/li&gt; &#xA; &lt;li&gt;anna - %f&lt;/li&gt; &#xA; &lt;li&gt;boom - %m&lt;/li&gt; &#xA; &lt;li&gt;key - %l&lt;/li&gt; &#xA; &lt;li&gt;A - %i.F&lt;/li&gt; &#xA; &lt;li&gt;B - %i.M&lt;/li&gt; &#xA; &lt;li&gt;K - %i.L&lt;/li&gt; &#xA; &lt;li&gt;a - %i.f&lt;/li&gt; &#xA; &lt;li&gt;b - %i.m&lt;/li&gt; &#xA; &lt;li&gt;k - %i.l&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Forum Usernames&lt;/h2&gt; &#xA;&lt;p&gt;The forum-names folder contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;common-forum-names.csv - A CSV file with forum names and the frequency they appeared with&lt;/li&gt; &#xA; &lt;li&gt;common-forum-names-top10k.txt - The top 10,000 forum names&lt;/li&gt; &#xA; &lt;li&gt;common-forum-names.txt - 1,774,313 forum names&lt;/li&gt; &#xA; &lt;li&gt;phpbb-scraper.rb - a web scraper for usernames on PHPbb forums&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Name Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Names&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://worldnames.publicprofiler.org/SearchArea.aspx&#34;&gt;http://worldnames.publicprofiler.org/SearchArea.aspx&lt;/a&gt; Some common countries. Top 10 surnames and forenames&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/List_of_most_popular_given_names&#34;&gt;https://secure.wikimedia.org/wikipedia/en/wiki/List_of_most_popular_given_names&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.babynamefacts.com/popularnames/countries.php?country=NZD&#34;&gt;http://www.babynamefacts.com/popularnames/countries.php?country=NZD&lt;/a&gt; top 100 baby names per country&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/List_of_most_common_surnames_in_Oceania&#34;&gt;https://secure.wikimedia.org/wikipedia/en/wiki/List_of_most_common_surnames_in_Oceania&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Name Parsing:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://secure.wikimedia.org/wikipedia/en/wiki/Capitalization&#34;&gt;https://secure.wikimedia.org/wikipedia/en/wiki/Capitalization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cpansearch.perl.org/src/KIMRYAN/Lingua-EN-NameParse-1.28/lib/Lingua/EN/NameParse.pm&#34;&gt;http://cpansearch.perl.org/src/KIMRYAN/Lingua-EN-NameParse-1.28/lib/Lingua/EN/NameParse.pm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://search.cpan.org/~summer/Lingua-EN-NameCase/NameCase.pm&#34;&gt;http://search.cpan.org/~summer/Lingua-EN-NameCase/NameCase.pm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-active-record-writing-migrations-lab</title>
    <updated>2023-05-31T01:46:30Z</updated>
    <id>tag:github.com,2023-05-31:/learn-co-curriculum/phase-3-active-record-writing-migrations-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-active-record-writing-migrations-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Writing Migrations&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write your own migrations&lt;/li&gt; &#xA; &lt;li&gt;Run a migration to create a table&lt;/li&gt; &#xA; &lt;li&gt;Run a migration to add a column to a table&lt;/li&gt; &#xA; &lt;li&gt;Run a migration to change something in the table&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;In this lesson, you&#39;ll get practice writing migration code and creating new migrations. Note that in order for the tests to work, the migrations must be created with the file names as described below, using numbers instead of timestamps.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to also follow proper naming conventions and use snake_case for the file names, and PascalCase for the class names. The names must match &lt;strong&gt;exactly&lt;/strong&gt; in order for the migrations to work.&lt;/p&gt; &#xA;&lt;h2&gt;Creating a Table&lt;/h2&gt; &#xA;&lt;p&gt;The first thing we will do is create a table. In &lt;code&gt;db/migrate/01_create_students.rb&lt;/code&gt;, write the code to create a table with Active Record. We&#39;ve created a class for you called &lt;code&gt;CreateStudents&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Define a method called &lt;code&gt;change&lt;/code&gt; and use the Active Record &lt;code&gt;create_table&lt;/code&gt; method within that method to create the table. The table should have a &lt;code&gt;:name&lt;/code&gt; column with a type &lt;code&gt;string&lt;/code&gt;. Check the &lt;a href=&#34;https://guides.rubyonrails.org/active_record_migrations.html&#34;&gt;Active Record Migration docs&lt;/a&gt; for more help with the syntax.&lt;/p&gt; &#xA;&lt;p&gt;After you finish defining the &lt;code&gt;change&lt;/code&gt; method, run the migrations by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle exec rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the status of your migration and verify the schema was updated correctly to include a &lt;code&gt;students&lt;/code&gt; table with a &lt;code&gt;name&lt;/code&gt; column before proceeding.&lt;/p&gt; &#xA;&lt;h2&gt;Adding a Column&lt;/h2&gt; &#xA;&lt;p&gt;The next thing we will do is add a couple of columns to the &lt;code&gt;students&lt;/code&gt; table we just created. To do this, we will create a second migration file. &lt;em&gt;We cannot add these columns to the existing file.&lt;/em&gt; Let&#39;s call our new file &lt;code&gt;02_add_grade_and_birthdate_to_students.rb&lt;/code&gt;. It should live in &lt;code&gt;db/migrate&lt;/code&gt; just like the first migration.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: While we generally recommend using &lt;code&gt;rake db:create_migration&lt;/code&gt; to create the migration files, for this lab you&#39;ll need to create the file name manually to ensure that the tests are able to find a file with the correct name.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This new migration will look similar to the previous one. We will need a class that inherits from &lt;code&gt;ActiveRecord::Migration&lt;/code&gt;, and we will need to define a change method. Sticking to conventions, name the class &lt;code&gt;AddGradeAndBirthdateToStudents&lt;/code&gt;, since that is what we&#39;re doing (and that is the camel case version of the &lt;em&gt;filename&lt;/em&gt;, minus the numbers in front).&lt;/p&gt; &#xA;&lt;p&gt;Inside &lt;code&gt;#change&lt;/code&gt;, instead of &lt;code&gt;#create_table&lt;/code&gt;, we will use the &lt;code&gt;#add_column&lt;/code&gt; Active Record method. It takes three necessary arguments: &lt;code&gt;add_column(table_name, column_name, type)&lt;/code&gt;. Check the &lt;a href=&#34;https://guides.rubyonrails.org/active_record_migrations.html&#34;&gt;Active Record Migration docs&lt;/a&gt; for more help with the syntax.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s add two columns. You&#39;ll need to call &lt;code&gt;#add_column&lt;/code&gt; twice: once for each column you&#39;re adding. Add a &lt;code&gt;grade&lt;/code&gt; column that is an &lt;code&gt;integer&lt;/code&gt;, and a &lt;code&gt;birthdate&lt;/code&gt; column that is a &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After you finish defining the &lt;code&gt;change&lt;/code&gt; method, run the migrations by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle exec rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the status of your migration and verify the schema was updated correctly before proceeding. The &lt;code&gt;students&lt;/code&gt; table should now have &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;grade&lt;/code&gt;, and &lt;code&gt;birthdate&lt;/code&gt; columns.&lt;/p&gt; &#xA;&lt;h2&gt;Changing a Column&lt;/h2&gt; &#xA;&lt;p&gt;Imagine you&#39;re creating an incredible web app to send out a birthday greeting on each student&#39;s birthday. While building this, you realize you accidentally stored your &lt;code&gt;birthdate&lt;/code&gt; data as a &lt;code&gt;string&lt;/code&gt;. It would be much easier to work with if the column type was &lt;code&gt;datetime&lt;/code&gt; instead. Let&#39;s fix that.&lt;/p&gt; &#xA;&lt;p&gt;Finally, we will &lt;strong&gt;change&lt;/strong&gt; a column type, &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;datetime&lt;/code&gt;. Same as before, you&#39;ll have to &lt;em&gt;create another migration file&lt;/em&gt;. This time call it &lt;code&gt;03_change_datatype_for_birthdate.rb&lt;/code&gt;. Once again, name the class the same name as the file but with capital letters instead of underscores: &lt;code&gt;ChangeDatatypeForBirthdate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This migration will have the same setup as the last. Write a &lt;code&gt;#change&lt;/code&gt; method, as usual. This time, in the &lt;code&gt;#change&lt;/code&gt; method, be sure to use the &lt;code&gt;#change_column&lt;/code&gt; method. It takes three necessary arguments: &lt;code&gt;change_column(table_name, column_name, type)&lt;/code&gt;. Check the &lt;a href=&#34;https://guides.rubyonrails.org/active_record_migrations.html&#34;&gt;Active Record Migration docs&lt;/a&gt; for more help with the syntax.&lt;/p&gt; &#xA;&lt;p&gt;After you finish defining the &lt;code&gt;#change&lt;/code&gt; method, run the migrations by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle exec rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the status of your migration and verify the schema was updated correctly before proceeding. The data type for the &lt;code&gt;birthdate&lt;/code&gt; should now be &lt;code&gt;datetime&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/active_record_migrations.html&#34;&gt;Active Record Migrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://guides.rubyonrails.org/active_record_basics.html&#34;&gt;Active Record Basics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-active-record-translating-from-orm-to-ar</title>
    <updated>2023-05-31T01:46:30Z</updated>
    <id>tag:github.com,2023-05-31:/learn-co-curriculum/phase-3-active-record-translating-from-orm-to-ar</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-active-record-translating-from-orm-to-ar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Translating From ORMs to Active Record&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understand how Active Record abstracts powerful methods for you&lt;/li&gt; &#xA; &lt;li&gt;Identify how to inherit your models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;This lab is meant to show you the power of Active Record. Take a look at your test suite in &lt;code&gt;spec/dog_spec.rb&lt;/code&gt;, and run &lt;code&gt;learn test&lt;/code&gt;. Right now there are eight tests that are all failing.&lt;/p&gt; &#xA;&lt;p&gt;In the past, you had to write out each method individually to pass each test. Now with Active Record, the hard work is done for you! Run your tests and watch them fail. Then make sure your &lt;code&gt;Dog&lt;/code&gt; class inherits from &lt;code&gt;ActiveRecord::Base&lt;/code&gt; and watch them pass!&lt;/p&gt;</summary>
  </entry>
</feed>