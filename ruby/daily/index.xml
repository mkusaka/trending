<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-01T01:39:22Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shaywei/first_app</title>
    <updated>2024-04-01T01:39:22Z</updated>
    <id>tag:github.com,2024-04-01:/Shaywei/first_app</id>
    <link href="https://github.com/Shaywei/first_app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The first app for the Ruby on Rails Tutorial&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>MrKai77/homebrew-cask</title>
    <updated>2024-04-01T01:39:22Z</updated>
    <id>tag:github.com,2024-04-01:/MrKai77/homebrew-cask</id>
    <link href="https://github.com/MrKai77/homebrew-cask" rel="alternate"></link>
    <summary type="html">&lt;p&gt;@MrKai77&#39;s Homebrew Casks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;homebrew-tap&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>trailofbits/ruzzy</title>
    <updated>2024-04-01T01:39:22Z</updated>
    <id>tag:github.com,2024-04-01:/trailofbits/ruzzy</id>
    <link href="https://github.com/trailofbits/ruzzy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A coverage-guided fuzzer for pure Ruby code and Ruby C extensions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruzzy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trailofbits/ruzzy/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/trailofbits/ruzzy/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/ruzzy&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/ruzzy&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A coverage-guided fuzzer for pure Ruby code and Ruby &lt;a href=&#34;https://ruby-doc.org/3.3.0/extension_rdoc.html&#34;&gt;C extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruzzy is heavily inspired by Google&#39;s &lt;a href=&#34;https://github.com/google/atheris&#34;&gt;Atheris&lt;/a&gt;, a Python fuzzer. Like Atheris, Ruzzy uses &lt;a href=&#34;https://llvm.org/docs/LibFuzzer.html&#34;&gt;libFuzzer&lt;/a&gt; for its coverage instrumentation and fuzzing engine. Ruzzy also supports &lt;a href=&#34;https://clang.llvm.org/docs/AddressSanitizer.html&#34;&gt;AddressSanitizer&lt;/a&gt; and &lt;a href=&#34;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&#34;&gt;UndefinedBehaviorSanitizer&lt;/a&gt; when fuzzing C extensions.&lt;/p&gt; &#xA;&lt;p&gt;Table of contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#using&#34;&gt;Using&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#fuzzing-pure-ruby-code&#34;&gt;Fuzzing pure Ruby code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#fuzzing-ruby-c-extensions&#34;&gt;Fuzzing Ruby C extensions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#trophy-case&#34;&gt;Trophy case&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#developing&#34;&gt;Developing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#compiling&#34;&gt;Compiling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#linting&#34;&gt;Linting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#releasing&#34;&gt;Releasing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#further-reading&#34;&gt;Further reading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;p&gt;Currently, Ruzzy only supports Linux x86-64 and AArch64/ARM64. If you&#39;d like to run Ruzzy on a Mac or Windows, you can build the &lt;a href=&#34;https://github.com/trailofbits/ruzzy/raw/main/Dockerfile&#34;&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt; and/or use the &lt;a href=&#34;https://raw.githubusercontent.com/trailofbits/ruzzy/main/#developing&#34;&gt;development environment&lt;/a&gt;. Ruzzy requires a recent version of &lt;code&gt;clang&lt;/code&gt; (tested back to &lt;code&gt;14.0.0&lt;/code&gt;), preferably the &lt;a href=&#34;https://github.com/llvm/llvm-project/releases&#34;&gt;latest release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install Ruzzy with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;MAKE=&#34;make --environment-overrides V=1&#34; \&#xA;CC=&#34;/path/to/clang&#34; \&#xA;CXX=&#34;/path/to/clang++&#34; \&#xA;LDSHARED=&#34;/path/to/clang -shared&#34; \&#xA;LDSHAREDXX=&#34;/path/to/clang++ -shared&#34; \&#xA;    gem install ruzzy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s a lot going on here, so let&#39;s break it down:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;MAKE&lt;/code&gt; environment variable overrides the &lt;code&gt;make&lt;/code&gt; command when compiling the Ruzzy C extension. This tells &lt;code&gt;make&lt;/code&gt; to respect subsequent environment variables when compiling the extension.&lt;/li&gt; &#xA; &lt;li&gt;The rest of the environment variables are used during compilation to ensure we&#39;re using the proper &lt;code&gt;clang&lt;/code&gt; binaries. This ensures we have the latest &lt;code&gt;clang&lt;/code&gt; features, which are necessary for proper fuzzing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you run into issues installing, then you can run the following command to get debugging output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RUZZY_DEBUG=1 gem install --verbose ruzzy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Using&lt;/h1&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Ruzzy includes a &lt;a href=&#34;https://llvm.org/docs/LibFuzzer.html#toy-example&#34;&gt;toy example&lt;/a&gt; to demonstrate how it works. First, set the following environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ASAN_OPTIONS=&#34;allocator_may_return_null=1:detect_leaks=0:use_sigaltstack=0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Understanding these options isn&#39;t necessary, but if you&#39;re curious click here.&lt;/summary&gt; &#xA; &lt;h3&gt;&lt;code&gt;ASAN_OPTIONS&lt;/code&gt;&lt;/h3&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Memory allocation failures are common and low impact (DoS), so skip them for now.&lt;/li&gt; &#xA;  &lt;li&gt;Like Python, the Ruby interpreter &lt;a href=&#34;https://github.com/google/atheris/raw/master/native_extension_fuzzing.md#leak-detection&#34;&gt;leaks data&lt;/a&gt;, so ignore these for now.&lt;/li&gt; &#xA;  &lt;li&gt;Ruby recommends &lt;a href=&#34;https://github.com/ruby/ruby/raw/master/doc/contributing/building_ruby.md#building-with-address-sanitizer&#34;&gt;disabling sigaltstack&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You can then run the example with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LD_PRELOAD=$(ruby -e &#39;require &#34;ruzzy&#34;; print Ruzzy::ASAN_PATH&#39;) \&#xA;    ruby -e &#39;require &#34;ruzzy&#34;; Ruzzy.dummy&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;code&gt;LD_PRELOAD&lt;/code&gt; is required for the same reasons &lt;a href=&#34;https://github.com/google/atheris/raw/master/native_extension_fuzzing.md#option-a-sanitizerlibfuzzer-preloads&#34;&gt;as Atheris&lt;/a&gt;. However, unlike &lt;code&gt;ASAN_OPTIONS&lt;/code&gt;, you probably do not want to &lt;code&gt;export&lt;/code&gt; it as it may interfere with other programs.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;It should quickly produce a crash like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;INFO: Running with entropic power schedule (0xFF, 100).&#xA;INFO: Seed: 2527961537&#xA;...&#xA;==45==ERROR: AddressSanitizer: heap-use-after-free on address 0x50c0009bab80 at pc 0xffff99ea1b44 bp 0xffffce8a67d0 sp 0xffffce8a67c8&#xA;...&#xA;SUMMARY: AddressSanitizer: heap-use-after-free /var/lib/gems/3.1.0/gems/ruzzy-0.7.0/ext/dummy/dummy.c:18:24 in _c_dummy_test_one_input&#xA;...&#xA;==45==ABORTING&#xA;MS: 4 EraseBytes-CopyPart-CopyPart-ChangeBit-; base unit: 410e5346bca8ee150ffd507311dd85789f2e171e&#xA;0x48,0x49,&#xA;HI&#xA;artifact_prefix=&#39;./&#39;; Test unit written to ./crash-253420c1158bc6382093d409ce2e9cff5806e980&#xA;Base64: SEk=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can see that it correctly found the input (&lt;code&gt;&#34;HI&#34;&lt;/code&gt;) that produced a memory violation. For more information, see &lt;a href=&#34;https://github.com/trailofbits/ruzzy/raw/main/ext/dummy/dummy.c&#34;&gt;&lt;code&gt;dummy.c&lt;/code&gt;&lt;/a&gt; to see why this violation occurred.&lt;/p&gt; &#xA;&lt;p&gt;You can re-run the crash case with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LD_PRELOAD=$(ruby -e &#39;require &#34;ruzzy&#34;; print Ruzzy::ASAN_PATH&#39;) \&#xA;    ruby -e &#39;require &#34;ruzzy&#34;; Ruzzy.dummy&#39; \&#xA;    ./crash-253420c1158bc6382093d409ce2e9cff5806e980&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following sanitizers are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Ruzzy::ASAN_PATH&lt;/code&gt; for &lt;a href=&#34;https://clang.llvm.org/docs/AddressSanitizer.html&#34;&gt;AddressSanitizer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ruzzy::UBSAN_PATH&lt;/code&gt; for &lt;a href=&#34;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&#34;&gt;UndefinedBehaviorSanitizer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fuzzing pure Ruby code&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s fuzz a small Ruby script as an example. Fuzzing pure Ruby code requires two Ruby scripts: a tracer script and a fuzzing harness. The tracer script is required due to an implementation detail of the Ruby interpreter. Understanding the details of this interaction, other than the fact that it&#39;s necessary, is not required.&lt;/p&gt; &#xA;&lt;p&gt;First, the tracer script, let&#39;s call it &lt;code&gt;test_tracer.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# frozen_string_literal: true&#xA;&#xA;require &#39;ruzzy&#39;&#xA;&#xA;Ruzzy.trace(&#39;test_harness.rb&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, the fuzzing harness, let&#39;s call it &lt;code&gt;test_harness.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# frozen_string_literal: true&#xA;&#xA;require &#39;ruzzy&#39;&#xA;&#xA;def fuzzing_target(input)&#xA;  if input.length == 4&#xA;    if input[0] == &#39;F&#39;&#xA;      if input[1] == &#39;U&#39;&#xA;        if input[2] == &#39;Z&#39;&#xA;          if input[3] == &#39;Z&#39;&#xA;            raise&#xA;          end&#xA;        end&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;test_one_input = lambda do |data|&#xA;  fuzzing_target(data) # Your fuzzing target would go here&#xA;  return 0&#xA;end&#xA;&#xA;Ruzzy.fuzz(test_one_input)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run this file and start fuzzing with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LD_PRELOAD=$(ruby -e &#39;require &#34;ruzzy&#34;; print Ruzzy::ASAN_PATH&#39;) \&#xA;    ruby test_tracer.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should quickly produce a crash like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;INFO: Running with entropic power schedule (0xFF, 100).&#xA;INFO: Seed: 2311041000&#xA;...&#xA;/app/ruzzy/bin/test_harness.rb:12:in `block in &amp;lt;top (required)&amp;gt;&#39;: unhandled exception&#xA;&#x9;from /var/lib/gems/3.1.0/gems/ruzzy-0.7.0/lib/ruzzy.rb:15:in `c_fuzz&#39;&#xA;&#x9;from /var/lib/gems/3.1.0/gems/ruzzy-0.7.0/lib/ruzzy.rb:15:in `fuzz&#39;&#xA;&#x9;from /app/ruzzy/bin/test_harness.rb:35:in `&amp;lt;top (required)&amp;gt;&#39;&#xA;&#x9;from bin/test_tracer.rb:7:in `require_relative&#39;&#xA;&#x9;from bin/test_tracer.rb:7:in `&amp;lt;main&amp;gt;&#39;&#xA;...&#xA;SUMMARY: libFuzzer: fuzz target exited&#xA;MS: 1 CopyPart-; base unit: 24b4b428cf94c21616893d6f94b30398a49d27cc&#xA;0x46,0x55,0x5a,0x5a,&#xA;FUZZ&#xA;artifact_prefix=&#39;./&#39;; Test unit written to ./crash-aea2e3923af219a8956f626558ef32f30a914ebc&#xA;Base64: RlVaWg==&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can see that it correctly found the input (&lt;code&gt;&#34;FUZZ&#34;&lt;/code&gt;) that produced an exception.&lt;/p&gt; &#xA;&lt;p&gt;To fuzz your own target, modify the &lt;code&gt;test_one_input&lt;/code&gt; &lt;code&gt;lambda&lt;/code&gt; to call your target function.&lt;/p&gt; &#xA;&lt;h2&gt;Fuzzing Ruby C extensions&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s fuzz the &lt;a href=&#34;https://github.com/msgpack/msgpack-ruby&#34;&gt;&lt;code&gt;msgpack-ruby&lt;/code&gt;&lt;/a&gt; library as an example. First, install the gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;MAKE=&#34;make --environment-overrides V=1&#34; \&#xA;CC=&#34;/path/to/clang&#34; \&#xA;CXX=&#34;/path/to/clang++&#34; \&#xA;LDSHARED=&#34;/path/to/clang -shared&#34; \&#xA;LDSHAREDXX=&#34;/path/to/clang++ -shared&#34; \&#xA;CFLAGS=&#34;-fsanitize=address,fuzzer-no-link -fno-omit-frame-pointer -fno-common -fPIC -g&#34; \&#xA;CXXFLAGS=&#34;-fsanitize=address,fuzzer-no-link -fno-omit-frame-pointer -fno-common -fPIC -g&#34; \&#xA;    gem install msgpack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to the environment variables used when compiling Ruzzy, we&#39;re specifying &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;CXXFLAGS&lt;/code&gt;. These flags aid in the fuzzing process. They enable helpful functionality like an address sanitizer, and improved stack trace information. For more information see &lt;a href=&#34;https://github.com/google/sanitizers/wiki/AddressSanitizerFlags&#34;&gt;AddressSanitizerFlags&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Next, we need a fuzzing harness for &lt;code&gt;msgpack&lt;/code&gt;. The following may be familiar to those with &lt;a href=&#34;https://llvm.org/docs/LibFuzzer.html#fuzz-target&#34;&gt;libFuzzer experience&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# frozen_string_literal: true&#xA;&#xA;require &#39;msgpack&#39;&#xA;require &#39;ruzzy&#39;&#xA;&#xA;test_one_input = lambda do |data|&#xA;  begin&#xA;    MessagePack.unpack(data)&#xA;  rescue Exception&#xA;    # We&#39;re looking for memory corruption, not Ruby exceptions&#xA;  end&#xA;  return 0&#xA;end&#xA;&#xA;Ruzzy.fuzz(test_one_input)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s call this file &lt;code&gt;fuzz_msgpack.rb&lt;/code&gt;. You can run this file and start fuzzing with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LD_PRELOAD=$(ruby -e &#39;require &#34;ruzzy&#34;; print Ruzzy::ASAN_PATH&#39;) \&#xA;    ruby fuzz_msgpack.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;libFuzzer options can be passed to the Ruby script like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LD_PRELOAD=$(ruby -e &#39;require &#34;ruzzy&#34;; print Ruzzy::ASAN_PATH&#39;) \&#xA;    ruby fuzz_msgpack.rb /path/to/corpus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://llvm.org/docs/LibFuzzer.html#options&#34;&gt;libFuzzer options&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;To fuzz your own target, modify the &lt;code&gt;test_one_input&lt;/code&gt; &lt;code&gt;lambda&lt;/code&gt; to call your target function.&lt;/p&gt; &#xA;&lt;h1&gt;Trophy case&lt;/h1&gt; &#xA;&lt;p&gt;Bugs found using Ruzzy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;toml&lt;/code&gt; gem: &lt;a href=&#34;https://github.com/jm/toml/issues/76&#34;&gt;#76&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toml-rb&lt;/code&gt; gem: &lt;a href=&#34;https://github.com/emancu/toml-rb/issues/150&#34;&gt;#150&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ox&lt;/code&gt; gem: &lt;a href=&#34;https://github.com/ohler55/ox/issues/351&#34;&gt;#351&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Developing&lt;/h1&gt; &#xA;&lt;p&gt;Development can be done locally, or using the &lt;code&gt;Dockerfile&lt;/code&gt; provided in this repository.&lt;/p&gt; &#xA;&lt;p&gt;You can build the Ruzzy Docker image with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build --tag ruzzy .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can shell into the container using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -v $(pwd):/app/ruzzy --entrypoint /bin/bash ruzzy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/rake-compiler/rake-compiler&#34;&gt;&lt;code&gt;rake-compiler&lt;/code&gt;&lt;/a&gt; to compile Ruzzy&#39;s C extensions.&lt;/p&gt; &#xA;&lt;p&gt;You can compile the C extensions within the container with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;code&gt;rake&lt;/code&gt; unit tests to test Ruby code.&lt;/p&gt; &#xA;&lt;p&gt;You can run the tests within the container with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LD_PRELOAD=$(ruby -e &#39;require &#34;ruzzy&#34;; print Ruzzy::ASAN_PATH&#39;) \&#xA;    rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linting&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;code&gt;rubocop&lt;/code&gt; to lint Ruby code.&lt;/p&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;rubocop&lt;/code&gt; within the container with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rubocop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Releasing&lt;/h2&gt; &#xA;&lt;p&gt;Ruzzy is automatically &lt;a href=&#34;https://github.com/trailofbits/ruzzy/actions/workflows/release.yml&#34;&gt;released&lt;/a&gt; to &lt;a href=&#34;https://rubygems.org/gems/ruzzy&#34;&gt;RubyGems&lt;/a&gt; when a new git tag is pushed.&lt;/p&gt; &#xA;&lt;p&gt;To release a new version run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git tag vX.X.X&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push --tags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Further reading&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby C extensions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://guides.rubygems.org/gems-with-extensions/&#34;&gt;https://guides.rubygems.org/gems-with-extensions/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.rubyguides.com/2018/03/write-ruby-c-extension/&#34;&gt;https://www.rubyguides.com/2018/03/write-ruby-c-extension/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyreferences.github.io/rubyref/advanced/extensions.html&#34;&gt;https://rubyreferences.github.io/rubyref/advanced/extensions.html&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://silverhammermba.github.io/emberb/c/&#34;&gt;https://silverhammermba.github.io/emberb/c/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ruby-doc.org/3.3.0/extension_rdoc.html&#34;&gt;https://ruby-doc.org/3.3.0/extension_rdoc.html&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ruby-doc.org/3.3.0/stdlibs/mkmf/MakeMakefile.html&#34;&gt;https://ruby-doc.org/3.3.0/stdlibs/mkmf/MakeMakefile.html&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/flavorjones/ruby-c-extensions-explained&#34;&gt;https://github.com/flavorjones/ruby-c-extensions-explained&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ruby/ruby/raw/v3_3_0/lib/mkmf.rb&#34;&gt;https://github.com/ruby/ruby/blob/v3_3_0/lib/mkmf.rb&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ruby fuzzing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/twistlock/kisaten&#34;&gt;https://github.com/twistlock/kisaten&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/richo/afl-ruby&#34;&gt;https://github.com/richo/afl-ruby&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/krypt/FuzzBert&#34;&gt;https://github.com/krypt/FuzzBert&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://z2-2z.github.io/2024/jan/16/fuzzing-ruby-c-extensions-with-coverage-and-asan.html&#34;&gt;https://z2-2z.github.io/2024/jan/16/fuzzing-ruby-c-extensions-with-coverage-and-asan.html&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bsidessf2018.sched.com/event/E6jC/fuzzing-ruby-and-c-extensions&#34;&gt;https://bsidessf2018.sched.com/event/E6jC/fuzzing-ruby-and-c-extensions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Atheris &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/google/atheris/raw/master/native_extension_fuzzing.md&#34;&gt;https://github.com/google/atheris/blob/master/native_extension_fuzzing.md&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://security.googleblog.com/2020/12/how-atheris-python-fuzzer-works.html&#34;&gt;https://security.googleblog.com/2020/12/how-atheris-python-fuzzer-works.html&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/google/atheris/raw/2.3.0/setup.py&#34;&gt;https://github.com/google/atheris/blob/2.3.0/setup.py&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/google/atheris/raw/2.3.0/src/native/core.cc&#34;&gt;https://github.com/google/atheris/blob/2.3.0/src/native/core.cc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/google/atheris/raw/2.3.0/src/native/tracer.cc&#34;&gt;https://github.com/google/atheris/blob/2.3.0/src/native/tracer.cc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/google/atheris/raw/2.3.0/src/native/counters.cc&#34;&gt;https://github.com/google/atheris/blob/2.3.0/src/native/counters.cc&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>