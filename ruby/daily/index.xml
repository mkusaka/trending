<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-13T01:33:45Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shopify/app_profiler</title>
    <updated>2022-08-13T01:33:45Z</updated>
    <id>tag:github.com,2022-08-13:/Shopify/app_profiler</id>
    <link href="https://github.com/Shopify/app_profiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collect performance profiles for your Rails application.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AppProfiler&lt;/h1&gt; &#xA;&lt;p&gt;Profiling is critical to providing an understanding of an application&#39;s performance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;AppProfiler&lt;/code&gt; aims to provide a common framework for performance profiling for Rails applications.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install &lt;code&gt;app_profiler&lt;/code&gt; you need to include it in your &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Profiling middleware&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;This gem automatically injects the &lt;code&gt;AppProfiler::Middleware&lt;/code&gt; middleware into your Rails application.&lt;/p&gt; &#xA;&lt;p&gt;This middleware can be disabled by using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;AppProfiler.middleware.disabled = true&#xA;# OR&#xA;Rails.application.config.app_profiler.middleware_disabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Trigger profiling&lt;/h3&gt; &#xA;&lt;p&gt;Profiling can be triggered in one of two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;profile&lt;/code&gt; key in the query string of the URL. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Query string format: &lt;code&gt;/?[key=value]&amp;amp;...&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;X-Profile&lt;/code&gt; key in the request headers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;X-Profile&lt;/code&gt; header format: &lt;code&gt;[&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;];...&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can configure the profile header using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;AppProfiler.profile_header = &#34;X-Profile&#34;&#xA;# OR&#xA;Rails.application.config.app_profiler.profile_header = &#34;X-Profile&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Here are some examples:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;/?profile=cpu&amp;amp;interval=2000&amp;amp;autoredirect=1&amp;amp;ignore_gc=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;X-Profile&lt;/code&gt; to &lt;code&gt;mode=wall;interval=1000;context=test-directory;autoredirect=1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Possible keys:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;profile/mode&lt;/td&gt; &#xA;   &lt;td&gt;Supported profiling modes: &lt;code&gt;cpu&lt;/code&gt;, &lt;code&gt;wall&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;Use &lt;code&gt;profile&lt;/code&gt; in (1), and &lt;code&gt;mode&lt;/code&gt; in (2).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;interval&lt;/td&gt; &#xA;   &lt;td&gt;Sampling interval in microseconds.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ignore_gc&lt;/td&gt; &#xA;   &lt;td&gt;Ignore garbage collection frames&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autoredirect&lt;/td&gt; &#xA;   &lt;td&gt;Redirect request automatically to Speedscope&#39;s page after profiling.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;context&lt;/td&gt; &#xA;   &lt;td&gt;Directory within the specified bucket in the selected storage where raw profile data should be written.&lt;/td&gt; &#xA;   &lt;td&gt;Only supported in (2). Defaults to &lt;code&gt;Rails.env&lt;/code&gt; if not specified.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;autoredirect&lt;/code&gt; feature can be turned on for all requests by doing the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;AppProfiler.autoredirect = true&#xA;# OR&#xA;Rails.application.config.app_profiler.autoredirect = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To customize the redirect location you can provide a proc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;AppProfiler.profile_url_formatter = -&amp;gt;(upload) { &#34;https://host.com/custom/#{upload.name}&#34; }&#xA;# OR&#xA;Rails.application.config.app_profiler.profile_url_formatter = -&amp;gt;(upload) { &#34;https://host.com/custom/#{upload.name}&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When profiling is triggered, the middleware will generate the profile through StackProf and upload the profiles to your specified storage. For example, the default configuration would upload profiles to file storage.&lt;/p&gt; &#xA;&lt;p&gt;When using a cloud storage provider, you can configure the target bucket name using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;AppProfiler.storage.bucket_name = &#34;new-bucket-name&#34;&#xA;# OR&#xA;Rails.application.config.app_profiler.storage_bucket_name = &#34;new-bucket-name&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Access control&lt;/h3&gt; &#xA;&lt;p&gt;You may restrict the storing of profiling results by defining your own Middleware based on &lt;code&gt;AppProfiler::Middleware&lt;/code&gt; and changing the &lt;code&gt;after_profile&lt;/code&gt; hook method to return &lt;code&gt;false&lt;/code&gt; for such cases.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following middleware only stores the profiling results if a &lt;code&gt;disallow_profiling&lt;/code&gt; key was not added to the &lt;code&gt;request.env&lt;/code&gt; while processing the request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AppProfilerAuthorizedMiddleware &amp;lt; AppProfiler::Middleware&#xA;  def after_profile(env, params)&#xA;    !env.key?(&#34;disallow_profiling&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also restrict running profiling at all by using &lt;code&gt;before_profile&lt;/code&gt;. For example you may wish to prevent anonymous users triggering the profiler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AppProfilerAuthorizedMiddleware &amp;lt; AppProfiler::Middleware&#xA;  def before_profile(env, params)&#xA;    current_user.present?&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The custom middleware can then be configured like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.app_profiler.middleware = AppProfilerAuthorizedMiddleware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profile Server&lt;/h2&gt; &#xA;&lt;p&gt;This option allows for profiles to be passively collected via an HTTP endpoint, inspired by &lt;a href=&#34;https://pkg.go.dev/net/http/pprof&#34;&gt;golang&#39;s built-in pprof server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A minimal Rack app runs a minimal (non-compliant) HTTP server, which exposes an endpoint that allows for profiling. For security purposes, the server is bound to localhost only. The HTTP server is built using standard library modules only, in order to keep dependencies minimal. Because it is an entirely separate server, listening on an entirely separate socket, this should not interfere with any existing application routes, and should even be usable in non-web apps.&lt;/p&gt; &#xA;&lt;p&gt;This allows for two main use cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Passive profile collection in production &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Periodically profiling production apps to analyze them responding to real workloads&lt;/li&gt; &#xA;   &lt;li&gt;Providing a statistical, long-term view of the &#34;hot paths&#34; of the workload&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Local development profiling &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can be used to get a profile &#34;on demand&#34; against a development server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;If using as a railtie, only a single option needs to be set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;config.app_profiler.server_enabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, the server can be directly started with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AppProfiler::Server.start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default duration (in seconds), for requests without a duration parameter, can also be set via the railtie config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AppProfiler.server.duration = 30&#xA;# OR&#xA;Rails.application.config.app_profiler.server_duration = 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server supports both TCP and Unix sockets for its transport. It is recommended to use TCP for local development, and Unix sockets for production:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AppProfiler.server.transport = AppProfiler::Server::TRANSPORT_UNIX&#xA;# OR&#xA;Rails.application.config.app_profiler.server_transport = AppProfiler::Server::TRANSPORT_UNIX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible, but not recommended, to hardcode the listen port to be used in TCP server mode with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AppProfiler.server.port = 8080&#xA;# OR&#xA;Rails.application.config.app_profiler.server_port = 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this is done in production and it can cause port conflicts with multiple instances of the app, which is another reason why the Unix transport is preferred for production.&lt;/p&gt; &#xA;&lt;h4&gt;Discovering the port or socket path&lt;/h4&gt; &#xA;&lt;p&gt;In general, the server should be run without setting the port, in which case any free TCP port may be used. To determine what the port is, check the application logs, or resolve it from the special &#34;Magic file&#34; which contains a mapping of pid to port:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ PID=49825&#xA;$ port_file=$(ls -1 /tmp/app_profiler/profileserver-$PID-port-*)&#xA;$ PORT=$(echo $port_file | sed &#39;s/.*port-\([[:digit:]]*\)-.*/\1/g&#39;)&#xA;$ echo $PORT&#xA;60160&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This approach is intended to be &#34;machine friendly&#34; so that an external profiling agent can easily detect what port to profile on.&lt;/p&gt; &#xA;&lt;p&gt;For the Unix mode, this is even easier as the file simply includes the PID in it, and this will be the file handle to use for the Unix socket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ PID=41016&#xA;$ SOCK=$(ls -1d /tmp/app_profiler/* | grep $PID.sock)&#xA;$ echo $SOCK&#xA;/tmp/app_profiler/app-profiler-41016.sock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collecting a profile&lt;/h3&gt; &#xA;&lt;p&gt;The API is very simple, and passes supported parameters directly to stackprof.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/app_profiler/main/#possible-keys&#34;&gt;possible keys&lt;/a&gt; for additional documentation on the supported parameters.&lt;/p&gt; &#xA;&lt;p&gt;For example, to collect a heap profile for 60 seconds, counting every 10th allocation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl &#34;http://127.0.0.1:$PORT/profile?duration=60&amp;amp;mode=object&amp;amp;interval=10&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage with speedscope directly&lt;/h4&gt; &#xA;&lt;p&gt;By default the server will allow CORS. This can be disabled if it presents a problem, but it should be generally safe given that the server listens for requests on localhost only, which is already a private network address.&lt;/p&gt; &#xA;&lt;p&gt;This can be used with a local instance of speedscope to directly initiate profiling from the browser. Assuming speedscope is running locally on port &lt;code&gt;9292&lt;/code&gt;, and the profile server is running on port &lt;code&gt;57510&lt;/code&gt;, the server address can be URL encoded, and passed to speedscope via &lt;code&gt;#profileURL&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:9292/#profileURL=http%3A%2F%2F127.0.0.1%3A57510%2Fprofile%3Fduration%3D1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profiling manually&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;AppProfiler&lt;/code&gt; can be used more simply to profile blocks of code. Here&#39;s how:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;report = AppProfiler.run(mode: :cpu) do&#xA;  # ...&#xA;end&#xA;&#xA;report.view # opens the profile locally in speedscope.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Profile files can be found locally in your rails app at &lt;code&gt;tmp/app_profiler/*.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Storage backends&lt;/h2&gt; &#xA;&lt;p&gt;Profiles are stored based on the defined storage class. At the moment, the gem only supports file-based and remote storage via Google Cloud Storage. the default backend is file storage.&lt;/p&gt; &#xA;&lt;p&gt;You can use a different backend with the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;AppProfiler.storage = AppProfiler::Storage::GoogleCloudStorage&#xA;# OR&#xA;Rails.application.config.app_profiler.storage = AppProfiler::Storage::GoogleCloudStorage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Credentials for the selected storage can be set using the following configuration (Google Cloud Storage expects the path to a JSON file, or the JSON contents):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;AppProfiler.storage.credentials = { &#34;key&#34; =&amp;gt; &#34;value&#34; }&#xA;# OR&#xA;Rails.application.config.app_profiler.storage_credentials = { &#34;key&#34; =&amp;gt; &#34;value&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in &lt;code&gt;development&lt;/code&gt; mode the file isn&#39;t uploaded. Instead, it is viewed via the &lt;code&gt;Middleware::ViewAction&lt;/code&gt;. If you want to change that, use the &lt;code&gt;middleware_action&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.app_profiler.middleware_action = AppProfiler::Middleware::UploadAction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/setup &amp;amp;&amp;amp; bundle exec rake&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/money</title>
    <updated>2022-08-13T01:33:45Z</updated>
    <id>tag:github.com,2022-08-13:/Shopify/money</id>
    <link href="https://github.com/Shopify/money" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Manage money in Shopify with a class that won&#39;t lose pennies during division&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;money&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shopify/money/actions?query=workflow%3Atests+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/Shopify/money/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;money_column expects a DECIMAL(21,3) database field.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keeps value in decimal&lt;/li&gt; &#xA; &lt;li&gt;Provides a &lt;code&gt;Money&lt;/code&gt; class which encapsulates all information about an certain amount of money, such as its value and its currency.&lt;/li&gt; &#xA; &lt;li&gt;Provides a &lt;code&gt;Money::Currency&lt;/code&gt; class which encapsulates all information about a monetary unit.&lt;/li&gt; &#xA; &lt;li&gt;Does NOT provides APIs for exchanging money from one currency to another.&lt;/li&gt; &#xA; &lt;li&gt;wont lose pennies during division!&lt;/li&gt; &#xA; &lt;li&gt;Money::NullCurrency for no currency support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;shopify-money&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading to v1.0&lt;/h2&gt; &#xA;&lt;p&gt;see instructions and breaking changes: &lt;a href=&#34;https://github.com/Shopify/money/raw/master/UPGRADING.md&#34;&gt;https://github.com/Shopify/money/blob/master/UPGRADING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;money&#39;&#xA;&#xA;# 10.00 USD&#xA;money = Money.new(10.00, &#34;USD&#34;)&#xA;money.subunits     #=&amp;gt; 1000&#xA;money.currency  #=&amp;gt; Currency.new(&#34;USD&#34;)&#xA;&#xA;# Comparisons&#xA;Money.new(1000, &#34;USD&#34;) == Money.new(1000, &#34;USD&#34;)   #=&amp;gt; true&#xA;Money.new(1000, &#34;USD&#34;) == Money.new(100, &#34;USD&#34;)    #=&amp;gt; false&#xA;Money.new(1000, &#34;USD&#34;) == Money.new(1000, &#34;EUR&#34;)   #=&amp;gt; false&#xA;Money.new(1000, &#34;USD&#34;) != Money.new(1000, &#34;EUR&#34;)   #=&amp;gt; true&#xA;&#xA;# Arithmetic&#xA;Money.new(1000, &#34;USD&#34;) + Money.new(500, &#34;USD&#34;) == Money.new(1500, &#34;USD&#34;)&#xA;Money.new(1000, &#34;USD&#34;) - Money.new(200, &#34;USD&#34;) == Money.new(800, &#34;USD&#34;)&#xA;Money.new(1000, &#34;USD&#34;) / 5                     == Money.new(200, &#34;USD&#34;)&#xA;Money.new(1000, &#34;USD&#34;) * 5                     == Money.new(5000, &#34;USD&#34;)&#xA;&#xA;# Unit to subunit conversions&#xA;Money.from_subunits(500, &#34;USD&#34;) == Money.new(5, &#34;USD&#34;)  # 5 USD&#xA;Money.from_subunits(5, &#34;JPY&#34;) == Money.new(5, &#34;JPY&#34;)    # 5 JPY&#xA;Money.from_subunits(5000, &#34;TND&#34;) == Money.new(5, &#34;TND&#34;) # 5 TND&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Currency&lt;/h2&gt; &#xA;&lt;p&gt;Currencies are consistently represented as instances of &lt;code&gt;Money::Currency&lt;/code&gt;. The most part of &lt;code&gt;Money&lt;/code&gt; APIs allows you to supply either a &lt;code&gt;String&lt;/code&gt; or a &lt;code&gt;Money::Currency&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.new(1000, &#34;USD&#34;) == Money.new(1000, Money::Currency.new(&#34;USD&#34;))&#xA;Money.new(1000, &#34;EUR&#34;).currency == Money::Currency.new(&#34;EUR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;Money::Currency&lt;/code&gt; instance holds all the information about the currency, including the currency symbol, name and much more.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;currency = Money.new(1000, &#34;USD&#34;).currency&#xA;currency.iso_code #=&amp;gt; &#34;USD&#34;&#xA;currency.name     #=&amp;gt; &#34;United States Dollar&#34;&#xA;currency.to_s     #=&amp;gt; &#39;USD&#39;&#xA;currency.symbol   #=&amp;gt; &#39;$&#39;&#xA;currency.disambiguate_symbol #=&amp;gt; &#39;US$&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Currency&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;Money&lt;/code&gt; defaults to Money::NullCurrency as its currency. This is a global variable that can be changed using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money.configure do |config|&#xA;  config.default_currency = Money::Currency.new(&#34;USD&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In web apps you might want to set the default currency on a per request basis. In Rails you can do this with an around action, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  around_action :set_currency&#xA;&#xA;  private&#xA;&#xA;  def set_currency&#xA;    Money.with_currency(current_shop.currency) { yield }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Currency Minor Units&lt;/h3&gt; &#xA;&lt;p&gt;The exponent of a money value is the number of digits after the decimal separator (which separates the major unit from the minor unit).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Money::Currency.new(&#34;USD&#34;).minor_units  # =&amp;gt; 2&#xA;Money::Currency.new(&#34;JPY&#34;).minor_units  # =&amp;gt; 0&#xA;Money::Currency.new(&#34;MGA&#34;).minor_units  # =&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Money column&lt;/h2&gt; &#xA;&lt;p&gt;Since money internally uses BigDecimal it&#39;s logical to use a &lt;code&gt;decimal&lt;/code&gt; column (or &lt;code&gt;money&lt;/code&gt; for PostgreSQL) for your database. The &lt;code&gt;money_column&lt;/code&gt; method can generate methods for use with ActiveRecord:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;create_table :orders do |t|&#xA;  t.decimal :sub_total, precision: 21, scale: 3&#xA;  t.decimal :tax, precision: 21, scale: 3&#xA;  t.string :currency, limit: 3&#xA;end&#xA;&#xA;class Order &amp;lt; ApplicationRecord&#xA;  money_column :sub_total, :tax&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;option&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;currency_column&lt;/td&gt; &#xA;   &lt;td&gt;method&lt;/td&gt; &#xA;   &lt;td&gt;column from which to read/write the currency&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;currency&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;hardcoded currency value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;currency_read_only&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;when true, &lt;code&gt;currency_column&lt;/code&gt; won&#39;t write the currency back into the db. Must be set to true if &lt;code&gt;currency_column&lt;/code&gt; is an attr_reader or delegate. Default: false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coerce_null&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;when true, a nil value will be returned as Money.zero. Default: false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can use multiple &lt;code&gt;money_column&lt;/code&gt; calls to achieve the desired effects with currency on the model or attribute level.&lt;/p&gt; &#xA;&lt;p&gt;There are no validations generated. You can add these for the specified money and currency attributes as you normally would for any other.&lt;/p&gt; &#xA;&lt;h2&gt;Rubocop&lt;/h2&gt; &#xA;&lt;p&gt;A RuboCop rule to enforce the presence of a currency using static analysis is available.&lt;/p&gt; &#xA;&lt;p&gt;Add to your &lt;code&gt;.rubocop.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;require:&#xA;  - money&#xA;&#xA;Money/MissingCurrency:&#xA;  Enabled: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your application is currently handling only one currency, it can autocorrect this by specifying a currency under the &lt;code&gt;Enabled&lt;/code&gt; line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ReplacementCurrency: &#39;CAD&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing to money&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out the latest master to make sure the feature hasn&#39;t been implemented or the bug hasn&#39;t been fixed yet&lt;/li&gt; &#xA; &lt;li&gt;Check out the issue tracker to make sure someone already hasn&#39;t requested it and/or contributed it&lt;/li&gt; &#xA; &lt;li&gt;Fork the project&lt;/li&gt; &#xA; &lt;li&gt;Start a feature/bugfix branch&lt;/li&gt; &#xA; &lt;li&gt;Commit and push until you are happy with your contribution&lt;/li&gt; &#xA; &lt;li&gt;Make sure to add tests for it. This is important so I don&#39;t break it in a future version unintentionally.&lt;/li&gt; &#xA; &lt;li&gt;Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2011 Shopify. See LICENSE.txt for further details.&lt;/p&gt;</summary>
  </entry>
</feed>