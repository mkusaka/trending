<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-06T01:37:58Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>felixonmars/dnsmasq-china-list</title>
    <updated>2022-12-06T01:37:58Z</updated>
    <id>tag:github.com,2022-12-06:/felixonmars/dnsmasq-china-list</id>
    <link href="https://github.com/felixonmars/dnsmasq-china-list" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chinese-specific configuration to improve your favorite DNS server. Best partner for chnroutes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dnsmasq-china-list&lt;/h1&gt; &#xA;&lt;p&gt;Chinese-specific configuration to improve your favorite DNS server. Best partner for chnroutes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Improve resolve speed for Chinese domains.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get the best CDN node near you whenever possible, but don&#39;t compromise foreign CDN results so you also get best CDN node for your VPN at the same time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Block ISP ads on NXDOMAIN result (like 114so).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Details&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;accelerated-domains.china.conf&lt;/code&gt;: General domains to be accelerated.&lt;/p&gt; &lt;p&gt;These domains have a better resolving speed and/or result when using a Chinese DNS server.&lt;/p&gt; &lt;p&gt;To determine if a domain is eligible, one of the criteria below must be met:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The domain&#39;s NS server is located in China mainland.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The domain will resolve to an IP located in China mainland when using a Chinese DNS server, but &lt;em&gt;not&lt;/em&gt; always do when using a foreign DNS server (For example, CDN accelerated sites that have node in China). This however does &lt;em&gt;not&lt;/em&gt; include those having node &lt;em&gt;near&lt;/em&gt; China mainland, like in Japan, Hong Kong, Taiwan, etc.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please don&#39;t add subdomains if the top domain is already in the list. This includes all .cn domains which are already matched by the &lt;code&gt;/cn/&lt;/code&gt; rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;google.china.conf&lt;/code&gt;: Google domains to be accelerated.&lt;/p&gt; &lt;p&gt;These domains are resolved to Google China servers when using a Chinese DNS. In most conditions this will yield better page load time for sites using Google&#39;s web services, e.g. Google Web Fonts and AdSense.&lt;/p&gt; &lt;p&gt;Bear in mind that they are &lt;em&gt;not&lt;/em&gt; considered stable. &lt;strong&gt;Use at your own risk&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;apple.china.conf&lt;/code&gt;: Apple domains to be accelerated.&lt;/p&gt; &lt;p&gt;Some ISPs (often smaller ones) have problem accessing Apple&#39;s assets using their China mainland CDN servers. Please consider remove this file if that happens to you. See #156 for some more info.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;bogus-nxdomain.china.conf&lt;/code&gt;: Known addresses that are hijacking NXDOMAIN results returned by DNS servers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Automatic Installation (recommended)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fetch the installer from github (or a mirror): &lt;code&gt;wget https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/install.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Edit it to use your favorite DNS server and/or another mirror to download the list.&lt;/li&gt; &#xA; &lt;li&gt;Run it as root: &lt;code&gt;sudo ./install.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can save the installer and run it again to update the list regularly.&lt;/p&gt; &#xA;&lt;h2&gt;Manual Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Place accelerated-domains.china.conf, bogus-nxdomain.china.conf (and optionally google.china.conf, apple.china.conf) under /etc/dnsmasq.d/ (Create the folder if it does not exist).&lt;/li&gt; &#xA; &lt;li&gt;Uncomment &#34;conf-dir=/etc/dnsmasq.d&#34; in /etc/dnsmasq.conf&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Place dnsmasq-update-china-list into /usr/bin/&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Make custom DNS server configuration and/or other services&#39; configuration.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# change the default DNS server to 202.96.128.86&#xA;make SERVER=202.96.128.86 dnsmasq&#xA;# generate unbound&#39;s configuration&#xA;make unbound&#xA;# generate bind&#39;s configuration&#xA;make bind&#xA;# full example of generating dnscrypt-proxy forwarding rules for Windows&#xA;make SERVER=101.6.6.6 NEWLINE=DOS dnscrypt-proxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright Â© 2015 Felix Yan &amp;lt;felixonmars@archlinux.org&amp;gt;&#xA;This work is free. You can redistribute it and/or modify it under the&#xA;terms of the Do What The Fuck You Want To Public License, Version 2,&#xA;as published by Sam Hocevar. See the LICENSE file for more details.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-4-rails-putting-it-all-together-auth</title>
    <updated>2022-12-06T01:37:58Z</updated>
    <id>tag:github.com,2022-12-06:/learn-co-curriculum/phase-4-rails-putting-it-all-together-auth</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-rails-putting-it-all-together-auth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Putting it All Together: Auth&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authenticate a user with a username and password&lt;/li&gt; &#xA; &lt;li&gt;Authorize logged in users for specific actions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This is the biggest lab yet for this phase, so make sure to set aside some time for this one. It&#39;s set up with a few different checkpoints so that you can build out the features incrementally. By the end of this lab, you&#39;ll have built out full authentication and authorization flow using sessions and cookies in Rails, so getting this lab under your belt will give you some good code to reference when you&#39;re building your next project with auth. Let&#39;s get started!&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;As with other labs in this section, there is some starter code in place for a Rails API backend and a React frontend. To get set up, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle install&#xA;$ npm install --prefix client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can work on this lab by running the tests with &lt;code&gt;learn test&lt;/code&gt;. It will also be helpful to see what&#39;s happening during the request/response cycle by running the app in the browser. You can run the Rails server with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can run React in another terminal with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ npm start --prefix client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;For all the deliverables below, if you use any Rails generators to create models or controllers, make sure to use the &lt;code&gt;--no-test-framework&lt;/code&gt; flag to avoid overwriting the existing tests.&lt;/p&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;User&lt;/code&gt; model with the following attributes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;username&lt;/code&gt; that is a &lt;code&gt;string&lt;/code&gt; type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;password_digest&lt;/code&gt; that is a &lt;code&gt;string&lt;/code&gt; type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image_url&lt;/code&gt; that is a &lt;code&gt;string&lt;/code&gt; type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bio&lt;/code&gt; that is a &lt;code&gt;string&lt;/code&gt; type&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your &lt;code&gt;User&lt;/code&gt; model should also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;incorporate the &lt;code&gt;has_secure_password&lt;/code&gt; macro to enable password encryption with &lt;code&gt;bcrypt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;validate the user&#39;s username to ensure that it is &lt;strong&gt;present&lt;/strong&gt; and &lt;strong&gt;unique&lt;/strong&gt; (no two users can have the same username)&lt;/li&gt; &#xA; &lt;li&gt;a user &lt;strong&gt;has many&lt;/strong&gt; recipes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next, create a &lt;code&gt;Recipe&lt;/code&gt; model with the following attributes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a recipe &lt;strong&gt;belongs to&lt;/strong&gt; a user&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;title&lt;/code&gt; that is a &lt;code&gt;string&lt;/code&gt; type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;instructions&lt;/code&gt; that is a &lt;code&gt;text&lt;/code&gt; type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;minutes_to_complete&lt;/code&gt; that is an &lt;code&gt;integer&lt;/code&gt; type&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add validations for the &lt;code&gt;Recipe&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;title&lt;/code&gt; must be present&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;instructions&lt;/code&gt; must be present and at least 50 characters long&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run the migrations after creating your models.&lt;/p&gt; &#xA;&lt;p&gt;Ensure that the tests for the models are passing before moving forward. To run the tests for &lt;em&gt;only&lt;/em&gt; the model files, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rspec spec/models&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sign Up Feature&lt;/h3&gt; &#xA;&lt;p&gt;After creating the models, the next step is building out a sign up feature.&lt;/p&gt; &#xA;&lt;p&gt;Handle sign up by implementing a &lt;code&gt;POST /signup&lt;/code&gt; route. It should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be handled in the &lt;code&gt;UsersController&lt;/code&gt; with a &lt;code&gt;create&lt;/code&gt; action&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;create&lt;/code&gt; action, if the user is valid: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Save a new user to the database with their username, encrypted password, image URL, and bio&lt;/li&gt; &#xA;   &lt;li&gt;Save the user&#39;s ID in the session hash&lt;/li&gt; &#xA;   &lt;li&gt;Return a JSON response with the user&#39;s ID, username, image URL, and bio; and an HTTP status code of 201 (Created)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the user is not valid: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Return a JSON response with the error message, and an HTTP status code of 422 (Unprocessable Entity)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Recall that we need to format our error messages in a way that makes it easy to display the information in our frontend. For this lab, because we are setting up multiple validations on our &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Recipe&lt;/code&gt; models, our error responses need to be formatted in a way that accommodates multiple errors.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Auto-Login Feature&lt;/h3&gt; &#xA;&lt;p&gt;Users can log into our app! ð But we want them to &lt;strong&gt;stay&lt;/strong&gt; logged in when they refresh the page, or navigate back to our site from somewhere else.&lt;/p&gt; &#xA;&lt;p&gt;Handle auto-login by implementing a &lt;code&gt;GET /me&lt;/code&gt; route. It should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be handled in the &lt;code&gt;UsersController&lt;/code&gt; with a &lt;code&gt;show&lt;/code&gt; action&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;show&lt;/code&gt; action, if the user is logged in (if their &lt;code&gt;user_id&lt;/code&gt; is in the session hash): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Return a JSON response with the user&#39;s ID, username, image URL, and bio; and an HTTP status code of 201 (Created)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the user is &lt;strong&gt;not&lt;/strong&gt; logged in when they make the request: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Return a JSON response with an error message, and a status of 401 (Unauthorized)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure the signup and auto-login features work as intended before moving forward. You can test the &lt;code&gt;UsersController&lt;/code&gt; requests with RSpec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rspec spec/requests/users_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should also be able to test this in the React application by signing up via the sign up form to check the &lt;code&gt;POST /signup&lt;/code&gt; route; and refreshing the page after logging in, and seeing that you are still logged in to test the &lt;code&gt;GET /me&lt;/code&gt; route.&lt;/p&gt; &#xA;&lt;h3&gt;Login Feature&lt;/h3&gt; &#xA;&lt;p&gt;Now that users can create accounts via the API, let&#39;s give them a way to log back into an existing account.&lt;/p&gt; &#xA;&lt;p&gt;Handle login by implementing a &lt;code&gt;POST /login&lt;/code&gt; route. It should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be handled in the &lt;code&gt;SessionsController&lt;/code&gt; with a &lt;code&gt;create&lt;/code&gt; action&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;create&lt;/code&gt; action, if the user&#39;s username and password are authenticated: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Save the user&#39;s ID in the session hash&lt;/li&gt; &#xA;   &lt;li&gt;Return a JSON response with the user&#39;s ID, username, image URL, and bio&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the user&#39;s username and password are not authenticated: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Return a JSON response with an error message, and a status of 401 (Unauthorized)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure this route works as intended by running &lt;code&gt;learn test&lt;/code&gt; before moving forward. You should also be able to test this in the React application by logging in via the login form.&lt;/p&gt; &#xA;&lt;h3&gt;Logout Feature&lt;/h3&gt; &#xA;&lt;p&gt;Users can log into our app! ð Now, let&#39;s give them a way to log out.&lt;/p&gt; &#xA;&lt;p&gt;Handle logout by implementing a &lt;code&gt;DELETE /logout&lt;/code&gt; route. It should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be handled in the &lt;code&gt;SessionsController&lt;/code&gt; with a &lt;code&gt;destroy&lt;/code&gt; action&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;destroy&lt;/code&gt; action, if the user is logged in (if their &lt;code&gt;user_id&lt;/code&gt; is in the session hash): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Remove the user&#39;s ID from the session hash&lt;/li&gt; &#xA;   &lt;li&gt;Return an empty response with an HTTP status code of 204 (No Content)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the user is &lt;strong&gt;not&lt;/strong&gt; logged in when they make the request: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Return a JSON response with an error message, and a status of 401 (Unauthorized)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure the login and logout features work as intended before moving forward. You can test the &lt;code&gt;SessionsController&lt;/code&gt; requests with RSpec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rspec spec/requests/sessions_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should also be able to test this in the React application by logging in to check the &lt;code&gt;POST /login&lt;/code&gt; route; and logging out with the logout button to test the &lt;code&gt;DELETE /logout&lt;/code&gt; route.&lt;/p&gt; &#xA;&lt;h3&gt;Recipe List Feature&lt;/h3&gt; &#xA;&lt;p&gt;Users should only be able to view recipes on our site after logging in.&lt;/p&gt; &#xA;&lt;p&gt;Handle recipe viewing by implementing a &lt;code&gt;GET /recipes&lt;/code&gt; route. It should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be handled in the &lt;code&gt;RecipesController&lt;/code&gt; with a &lt;code&gt;index&lt;/code&gt; action&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;index&lt;/code&gt; action, if the user is logged in (if their &lt;code&gt;user_id&lt;/code&gt; is in the session hash): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Return a JSON response with an array of all recipes with their title, instructions, and minutes to complete data along with a nested user object; and an HTTP status code of 201 (Created)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the user is &lt;strong&gt;not&lt;/strong&gt; logged in when they make the request: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Return a JSON response with an error message, and a status of 401 (Unauthorized)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recipe Creation Feature&lt;/h3&gt; &#xA;&lt;p&gt;Now that users can log in, let&#39;s allow them to create new recipes!&lt;/p&gt; &#xA;&lt;p&gt;Handle recipe creation by implementing a &lt;code&gt;POST /recipes&lt;/code&gt; route. It should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be handled in the &lt;code&gt;RecipesController&lt;/code&gt; with a &lt;code&gt;create&lt;/code&gt; action&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;create&lt;/code&gt; action, if the user is logged in (if their &lt;code&gt;user_id&lt;/code&gt; is in the session hash): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Save a new recipe to the database if it is valid. The recipe should &lt;strong&gt;belong to&lt;/strong&gt; the logged in user, and should have title, instructions, and minutes to complete data provided from the params hash&lt;/li&gt; &#xA;   &lt;li&gt;Return a JSON response with the title, instructions, and minutes to complete data along with a nested user object; and an HTTP status code of 201 (Created)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the user is &lt;strong&gt;not&lt;/strong&gt; logged in when they make the request: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Return a JSON response with an error message, and a status of 401 (Unauthorized)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the recipe is &lt;strong&gt;not valid&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Return a JSON response with the error messages, and an HTTP status code of 422 (Unprocessable Entity)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After finishing the &lt;code&gt;RecipeController&lt;/code&gt; features, you&#39;re done! Make sure to check your work. You should be able to run the full test suite now with &lt;code&gt;learn test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should also be able to test this in the React application by creating a new recipe with the recipe form, and viewing a list of recipes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-intro-to-sinatra</title>
    <updated>2022-12-06T01:37:58Z</updated>
    <id>tag:github.com,2022-12-06:/learn-co-curriculum/phase-3-intro-to-sinatra</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-intro-to-sinatra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Creating a Sinatra Application&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understand how Sinatra simplifies developing web applications&lt;/li&gt; &#xA; &lt;li&gt;Receive a request in Sinatra and send different kinds of responses&lt;/li&gt; &#xA; &lt;li&gt;Create dynamic routes in Sinatra&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A web application framework (WAF) is a software framework that is designed to support the development of dynamic websites, web applications, web services and web resources. The framework aims to alleviate the overhead associated with common activities performed in web development. â &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_application_framework&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Building dynamic web applications in any language is a complex job requiring intimate knowledge of hundreds of technologies and specifications. The good news, however, is that many of these requirements are universal and every web application must conform to these standards.&lt;/p&gt; &#xA;&lt;p&gt;For example, any robust web application will need to handle &lt;strong&gt;request routing&lt;/strong&gt; and provide a mechanism for the application to respond to different URLs with the appropriate &lt;strong&gt;response&lt;/strong&gt;. For example, a blog application may handle a request to &lt;code&gt;GET /posts&lt;/code&gt; to show all the recent blog posts, and a request to &lt;code&gt;GET /authors&lt;/code&gt; to list all the authors.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, web applications require the ability to render templates to produce consistently structured dynamic content. A request to &lt;code&gt;GET /posts/1&lt;/code&gt; must render the HTML for the first post, just as a request to &lt;code&gt;GET /posts/2&lt;/code&gt; will render identically structured HTML (but with different content) for the second post. This is possible because of &lt;em&gt;templates&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Web frameworks should also provide a way to send data back in a variety of different formats. For example, we should be able to produce full HTML pages, but we should also be able to produce simple JSON strings to represent the data in our applications.&lt;/p&gt; &#xA;&lt;p&gt;Web frameworks take all these routine and common requirements of any web application and abstract them into code and patterns that provide these functionalities to your application without requiring you to build them yourself.&lt;/p&gt; &#xA;&lt;p&gt;Frameworks provide structure and libraries that allow you to focus on &lt;strong&gt;your&lt;/strong&gt; application and not &lt;strong&gt;applications in general&lt;/strong&gt;. The bigger the framework, the more you can rely on it to provide you with common needs. The smaller the framework, the more you&#39;ll have to build things yourself.&lt;/p&gt; &#xA;&lt;h2&gt;What is Sinatra?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt; is a small web framework that provides a Domain Specific Language (or DSL) implemented in Ruby. It was created by &lt;a href=&#34;https://github.com/bmizerany&#34;&gt;Blake Mizerany&lt;/a&gt; and provides a lightweight option for developing simple web applications. Sinatra is Rack-based, which means it uses Rack under the hood and can use many tools designed to work with Rack. It&#39;s been used by companies such as Apple, BBC, GitHub, LinkedIn, and more.&lt;/p&gt; &#xA;&lt;p&gt;Essentially, Sinatra is nothing more than some pre-written methods that we can include in our applications to turn them into Ruby web applications.&lt;/p&gt; &#xA;&lt;p&gt;Unlike Ruby on Rails, which is a full-stack web development framework that provides everything needed from front to back, Sinatra is designed to be lightweight and flexible. It provides you with the bare minimum requirements and abstractions for building simple and dynamic Ruby web applications.&lt;/p&gt; &#xA;&lt;p&gt;In addition to being a great tool for certain projects, Sinatra is a great way to get started in web application development with Ruby and will prepare you for learning other larger frameworks, including Rails.&lt;/p&gt; &#xA;&lt;h2&gt;Using Sinatra&lt;/h2&gt; &#xA;&lt;p&gt;To see what Sinatra is all about, let&#39;s build out a quick demo application. First, run &lt;code&gt;bundle install&lt;/code&gt; to install the Sinatra gem from the Gemfile. Then, take a look at the code in the &lt;code&gt;config.ru&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;require &#39;sinatra&#39;&#xA;&#xA;class App &amp;lt; Sinatra::Base&#xA;&#xA;  get &#39;/hello&#39; do&#xA;    &#39;&amp;lt;h2&amp;gt;Hello &amp;lt;em&amp;gt;World&amp;lt;/em&amp;gt;!&amp;lt;/h2&amp;gt;&#39;&#xA;  end&#xA;&#xA;end&#xA;&#xA;run App&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the app with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rackup config.ru&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like with our Rack example, this will run a server locally. Visit &lt;a href=&#34;http://localhost:9292/hello&#34;&gt;http://localhost:9292/hello&lt;/a&gt; in the browser to make a request to our Sinatra server and see the response. It even takes care of sending back the 200 status code, and setting the &lt;code&gt;Content-Type&lt;/code&gt; header to &lt;code&gt;text/html&lt;/code&gt;, which we had to do manually with Rack. Nice!&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s break down what&#39;s happening in this simple example, and then add a few more features to our Sinatra server.&lt;/p&gt; &#xA;&lt;h2&gt;Sinatra Routing&lt;/h2&gt; &#xA;&lt;p&gt;One of the biggest benefits of using Sinatra is that it has a very easy-to-read Domain-Specific Language, or DSL, for writing multiple routes in an application.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;App&lt;/code&gt; class above, we&#39;re inheriting this routing DSL from the &lt;code&gt;Sinatra::Base&lt;/code&gt; class, which allows us to define routes like this inside the class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;get &#39;/hello&#39; do&#xA;  &#39;&amp;lt;h2&amp;gt;Hello &amp;lt;em&amp;gt;World&amp;lt;/em&amp;gt;!&amp;lt;/h2&amp;gt;&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can quickly see what this code is doing: it&#39;s setting up a &lt;strong&gt;block of code&lt;/strong&gt; that will run whenever a &lt;code&gt;GET&lt;/code&gt; request comes in to the &lt;code&gt;/hello&lt;/code&gt; path of our application. Whatever is &lt;strong&gt;returned&lt;/strong&gt; by the block will be sent back as the response: in this case, it&#39;s a string representing some HTML.&lt;/p&gt; &#xA;&lt;p&gt;We can also easily define more than one route:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class App &amp;lt; Sinatra::Base&#xA;&#xA;  get &#39;/hello&#39; do&#xA;    &#39;&amp;lt;h2&amp;gt;Hello &amp;lt;em&amp;gt;World&amp;lt;/em&amp;gt;!&amp;lt;/h2&amp;gt;&#39;&#xA;  end&#xA;&#xA;  get &#39;/potato&#39; do&#xA;    &#34;&amp;lt;p&amp;gt;Boil &#39;em, mash &#39;em, stick &#39;em in a stew&amp;lt;/p&amp;gt;&#34;&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: After making these changes, you&#39;ll need to restart the server before you can try them out in the browser. You can stop the server with &lt;code&gt;control + c&lt;/code&gt;. If you encounter an error when running your server about the port being in use, refer to &lt;a href=&#34;https://stackoverflow.com/a/32592965&#34;&gt;this StackOverflow post&lt;/a&gt; to find and stop a process running on a specific port.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Compared to the conditional logic we needed to write by hand in Rack, we think you&#39;ll agree that this DSL provides a much nicer developer experience!&lt;/p&gt; &#xA;&lt;p&gt;Sinatra also provides friendlier error messages when your application doesn&#39;t work as expected. For example, try visiting a route that doesn&#39;t exist, like &lt;a href=&#34;http://localhost:9292/nope&#34;&gt;http://localhost:9292/nope&lt;/a&gt;. You should see an error screen, along with a suggestion on how to fix this particular error by updating your code. Nice!&lt;/p&gt; &#xA;&lt;h2&gt;Sending HTML and JSON Responses&lt;/h2&gt; &#xA;&lt;p&gt;Another feature of Sinatra that helps simplify our server-side code is the ability to easily send back a response in different formats. For example, we can have it send back some HTML dynamically by generating a string with Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class App &amp;lt; Sinatra::Base&#xA;&#xA;  get &#39;/dice&#39; do&#xA;    dice_roll = rand(1..6)&#xA;    &#34;&amp;lt;h2&amp;gt;You rolled a #{dice_roll}&amp;lt;/h2&amp;gt;&#34;&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every time we make a request, we send back a different number in the HTML string.&lt;/p&gt; &#xA;&lt;p&gt;But what if instead of HTML, we wanted to have our application generate some JSON data, which we could use with a separate frontend application like React?&lt;/p&gt; &#xA;&lt;p&gt;Well, that&#39;s as easy as using the &lt;code&gt;.to_json&lt;/code&gt; method to convert a Ruby hash or array to a valid JSON string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class App &amp;lt; Sinatra::Base&#xA;&#xA;  get &#39;/dice&#39; do&#xA;    dice_roll = rand(1..6)&#xA;    { roll: dice_roll }.to_json&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also update the default response header for all responses to indicate that our server is returning a JSON-formatted string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class App &amp;lt; Sinatra::Base&#xA;  # Add this line to set the Content-Type header for all responses&#xA;  set :default_content_type, &#39;application/json&#39;&#xA;&#xA;  get &#39;/dice&#39; do&#xA;    dice_roll = rand(1..6)&#xA;    { roll: dice_roll }.to_json&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, restart the server and visit our new endpoint at &lt;a href=&#34;http://localhost:9292/dice&#34;&gt;http://localhost:9292/dice&lt;/a&gt;. Refresh the page to your heart&#39;s content! You&#39;ll get some new JSON data each time.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic Routing in Sinatra&lt;/h2&gt; &#xA;&lt;p&gt;One other powerful feature of Sinatra is the ability to define &lt;strong&gt;dynamic routes&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To give a contrived example, let&#39;s say, for instance, that we were building an API for performing math operations. When a request comes in to our server to the path &lt;code&gt;/add/1/2&lt;/code&gt;, we&#39;d want to add 1 + 2 and send back a response of 3.&lt;/p&gt; &#xA;&lt;p&gt;We could try setting this up like our other routes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class App &amp;lt; Sinatra::Base&#xA;&#xA;  get &#39;/add/1/2&#39; do&#xA;    sum = 1 + 2&#xA;    { result: sum }.to_json&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This works just fine for 1 and 2, but what if we want to add other numbers, like &lt;code&gt;/add/2/5&lt;/code&gt;? Well, we could try to define routes for those other numbers manually, but... nope, that won&#39;t work. There are way too many numbers for that to be practical!&lt;/p&gt; &#xA;&lt;p&gt;What we can do instead is write out a route using a special syntax with &lt;strong&gt;named parameters&lt;/strong&gt;, which looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class App &amp;lt; Sinatra::Base&#xA;&#xA;  # :num1 and :num2 are named parameters&#xA;  get &#39;/add/:num1/:num2&#39; do&#xA;    num1 = params[:num1].to_i&#xA;    num2 = params[:num2].to_i&#xA;&#xA;    sum = num1 + num2&#xA;    { result: sum }.to_json&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By defining our route with this special syntax, any requests that match the pattern &lt;code&gt;/add/:num1/:num2&lt;/code&gt; will result in this route being used. So making a request to &lt;code&gt;/add/1/2&lt;/code&gt; will use this route, and so will &lt;code&gt;/add/2/5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The other benefit of using this syntax is that we get access to additional data from the url in a special variable known as the &lt;strong&gt;params hash&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll explore the params hash in more detail in future lessons, but you can think of it as a way for us to pass in some additional arguments to a route handler.&lt;/p&gt; &#xA;&lt;p&gt;For example, a &lt;code&gt;GET /add/1/2&lt;/code&gt; request would result in a params hash that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;{&#34;num1&#34;=&amp;gt;&#34;1&#34;, &#34;num2&#34;=&amp;gt;&#34;2&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a &lt;code&gt;GET /add/2/5&lt;/code&gt; request would result in a params hash that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;{&#34;num1&#34;=&amp;gt;&#34;2&#34;, &#34;num2&#34;=&amp;gt;&#34;5&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While this example of setting up an API just to do math is certainly not the most practical, being able to set up dynamic routes and access data via the params hash will become incredibly useful once we start working with Active Record models. For instance, we could set up a route that returns a specific &lt;code&gt;Game&lt;/code&gt; from the &lt;code&gt;games&lt;/code&gt; table, formatted as JSON, using very similar code to what we used above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;get &#39;/games/:id&#39; do&#xA;  game = Game.find(params[:id])&#xA;  game.to_json&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example won&#39;t work yet, since we don&#39;t have a &lt;code&gt;Game&lt;/code&gt; class set up, but we&#39;ll soon see how to get this code working!&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;In this lesson, we covered a lot of the core functionality of Sinatra. We saw how to use Sinatra&#39;s routing DSL to easily set up a server to handle requests using different HTTP verbs and paths. We also saw how to generate both HTML and JSON responses. Finally, we used &lt;strong&gt;dynamic routes&lt;/strong&gt; to handle requests and access data about a request via the &lt;strong&gt;params hash&lt;/strong&gt;. You&#39;re well on your way to creating your own web servers with Sinatra!&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sinatrarb.com/&#34;&gt;Sinatra Homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sinatrarb.com/intro.html&#34;&gt;Getting Started with Sinatra&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>