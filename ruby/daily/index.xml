<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-10T01:32:40Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>test-prof/railsconf2024-workshop</title>
    <updated>2024-05-10T01:32:40Z</updated>
    <id>tag:github.com,2024-05-10:/test-prof/railsconf2024-workshop</id>
    <link href="https://github.com/test-prof/railsconf2024-workshop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RailsConf 2024 workshop starter application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./lib/assets/wordmark.dark.png?raw=true&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./lib/assets/wordmark.light.png?raw=true&#34;&gt; &#xA;  &lt;img alt=&#34;Mastodon&#34; src=&#34;https://raw.githubusercontent.com/test-prof/railsconf2024-workshop/master/lib/assets/wordmark.light.png?raw=true&#34; height=&#34;34&#34;&gt; &#xA; &lt;/picture&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] This is a specific version of the original Mastodon codebase for &lt;a href=&#34;https://evilmartians.com/events/from-slow-to-go-rails-test-profiling-hands-on-railsconf-2024&#34;&gt;RailsConf 2024 workshop on tests profiling with TestProf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Mastodon is a &lt;strong&gt;free, open-source social network server&lt;/strong&gt; based on ActivityPub where users can follow friends and discover new ones...&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;See the full project&#39;s description &lt;a href=&#34;https://github.com/mastodon/mastodon&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setting up for test profiling&lt;/h2&gt; &#xA;&lt;p&gt;First, install the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bibendi/dip&#34;&gt;Dip&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now, run Dip to provision Docker development enviroment enough to run &lt;strong&gt;unit&lt;/strong&gt; tests (we don&#39;t need browser tests for this workshop):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dip provision&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command may take some time and should complete with success (you will see the message telling you about it).&lt;/p&gt; &#xA;&lt;p&gt;Now, verify your setup by running all tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dip rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure all is green. If not, don&#39;t hesitate to reach out (via issues).&lt;/p&gt; &#xA;&lt;p&gt;Now, when everything is ready, you can open a terminal within a Docker container to start playing with TestProf:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dip runner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;h3&gt;Additional profiling tools&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re going to analyze some flamegraphs and profiler reports during the workshop, so it&#39;s worth having them installed locally (to not depend on the Internet):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;gem install profile-viewer&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;npm install -g speedscope&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Benchmarking&lt;/h3&gt; &#xA;&lt;p&gt;If you want to measure the effect of every optimization change made (and see the progress), you can use &lt;a href=&#34;https://github.com/sharkdp/hyperfine&#34;&gt;hyperfine&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine -L commit &#34;readme&#34;,&#34;debug require false&#34;,&#34;opt-in coverage&#34;,&#34;logging&#34; --runs 2 --show-output --cleanup &#39;git checkout railsconf2024&#39; --export-markdown &#39;tmp/results.md&#39; &#34;git -c advice.detachedHead=false checkout &#39;:/{commit}&#39; &amp;amp;&amp;amp; dip rspec:notty&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command above runs tests 2 times for specified commits (matching commit messages) and produces a markdown table. Feel free to adjust it to your needs!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>baweaver/refactor</title>
    <updated>2024-05-10T01:32:40Z</updated>
    <id>tag:github.com,2024-05-10:/baweaver/refactor</id>
    <link href="https://github.com/baweaver/refactor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Utilities for refactoring and upgrading Ruby code based on ASTs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Refactor&lt;/h1&gt; &#xA;&lt;p&gt;Utilities for refactoring and upgrading Ruby code based on ASTs.&lt;/p&gt; &#xA;&lt;p&gt;Consider reading &lt;a href=&#34;https://dev.to/baweaver/asts-in-ruby-pattern-matching-mjd&#34;&gt;ASTs in Ruby - Pattern Matching&lt;/a&gt; as a primer for using this gem, as it will introduce concepts of pattern matching and ASTs in more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Original Attribution&lt;/h2&gt; &#xA;&lt;p&gt;This gem is a continuation of the work by @afeld and their Refactor gem here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/afeld/refactor&#34;&gt;https://github.com/afeld/refactor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Refactor works via rules, similar to RuboCop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Inherits from base rule, which provides a lot of utilities&#xA;# to match and replace with.&#xA;class ShorthandRule &amp;lt; Refactor::Rule&#xA;  # The code we&#39;re trying to work with here is:&#xA;  #&#xA;  #    [1, 2, 3].select { |v| v.even? }&#xA;  #&#xA;  # ...and we want to make it into:&#xA;  #&#xA;  #    [1, 2, 3].select(&amp;amp;:even?)&#xA;  #&#xA;  def on_block(node)&#xA;    return unless node in [:block, receiver,&#xA;      [[:arg, arg_name]], [:send, [:lvar, ^arg_name], method_name]&#xA;    ]&#xA;&#xA;    replace(node, &#34;#{receiver.source}(&amp;amp;:#{method_name})&#34;)&#xA;  end&#xA;end&#xA;&#xA;ShorthandRule.process(&#34;[1, 2, 3].select { |v| v.even? }&#34;)&#xA;# =&amp;gt; [1, 2, 3].select(&amp;amp;:even?)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we add multiple rules we&#39;ll want to use a &lt;code&gt;Rewriter&lt;/code&gt; instead to apply all of them without the potential for collision:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class BigDecimalRule &amp;lt; Refactor::Rule&#xA;  def on_send(node)&#xA;    return unless node in [:send, _, :BigDecimal,&#xA;      [:float | :int, value]&#xA;    ]&#xA;&#xA;    replace(node, &#34;BigDecimal(&#39;#{value}&#39;)&#34;)&#xA;  end&#xA;end&#xA;&#xA;class HashRefDefaultRule &amp;lt; Refactor::Rule&#xA;  def on_send(node)&#xA;    return unless node in [:send, [:const, nil, :Hash], :new,&#xA;      [:array | :hash] =&amp;gt; reference_value&#xA;    ]&#xA;&#xA;    replace(node, &#34;Hash.new { |h, k| h[k] = #{reference_value.source} }&#34;)&#xA;  end&#xA;end&#xA;&#xA;rewriter = Refactor::Rewriter.new(rules: [ShorthandRule, BigDecimalRule, HashRefDefaultRule])&#xA;rewriter.process &amp;lt;&amp;lt;~RUBY&#xA;  [1, 2, 3].select { |v| v.even? }&#xA;&#xA;  value = BigDecimal(5.3)&#xA;  groups = Hash.new({})&#xA;RUBY&#xA;# =&amp;gt; &amp;lt;&amp;lt;~RUBY&#xA;#   [1, 2, 3].select(&amp;amp;:even?)&#xA;#&#xA;#   value = BigDecimal(&#39;5.3&#39;)&#xA;#   groups = Hash.new { |h, k| h[k] = {} }&#xA;# RUBY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why Not RuboCop?&lt;/h2&gt; &#xA;&lt;p&gt;In most cases you likely want to use RuboCop as it has more robust support and testing. This gem is currently more experimental and focused exclusively on refactoring and AST manipulations in a more minimal sense.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the gem and add to the application&#39;s Gemfile by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle add refactor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If bundler is not being used to manage dependencies, install the gem by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install refactor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake spec&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and the created tag, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/baweaver/refactor&#34;&gt;https://github.com/baweaver/refactor&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://github.com/baweaver/refactor/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the Refactor project&#39;s codebases, issue trackers, chat rooms and mailing lists is expected to follow the &lt;a href=&#34;https://github.com/baweaver/refactor/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>andyatkinson/rideshare</title>
    <updated>2024-05-10T01:32:40Z</updated>
    <id>tag:github.com,2024-05-10:/andyatkinson/rideshare</id>
    <link href="https://github.com/andyatkinson/rideshare" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rails app for book 📚 &#34;High Performance PostgreSQL for Rails&#34; http://pragprog.com/titles/aapsql&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/andyatkinson/rideshare&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/andyatkinson/rideshare.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;📚 High Performance PostgreSQL for Rails&lt;/h1&gt; &#xA;&lt;p&gt;Rideshare is the Rails application supporting the book &#34;High Performance PostgreSQL for Rails&#34; &lt;a href=&#34;http://pragprog.com/titles/aapsql&#34;&gt;http://pragprog.com/titles/aapsql&lt;/a&gt;, published by Pragmatic Programmers in 2024.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Prepare your development machine.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🎥 Installation - Rideshare on a Mac, Ruby, PostgreSQL, Gems&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://www.loom.com/share/8bfc4e79758a42d39cead8f6637aa314&#34;&gt; &lt;img style=&#34;max-width:300px;&#34; src=&#34;https://cdn.loom.com/sessions/thumbnails/8bfc4e79758a42d39cead8f6637aa314-1714771702452-with-play.gif&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Homebrew Packages&lt;/h2&gt; &#xA;&lt;p&gt;First, install &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Graphviz&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install graphviz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ruby Version Manager&lt;/h2&gt; &#xA;&lt;p&gt;Before installing Ruby, install a &lt;em&gt;Ruby version manager&lt;/em&gt;. The recommended one is &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;Rbenv&lt;/a&gt;. Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install rbenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PostgreSQL&lt;/h2&gt; &#xA;&lt;p&gt;PostgreSQL 16 or greater is required. Installation may be via Homebrew, although the recommended method is &lt;a href=&#34;https://postgresapp.com&#34;&gt;Postgres.app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PostgresApp&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Once installed, from the Menu Bar app, choose &#34;Open Postgres&#34; then click the &#34;+&#34; icon to create a new PostgreSQL 16 server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ruby&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;cat .ruby-version&lt;/code&gt; from the Rideshare directory to find the needed version of Ruby.&lt;/p&gt; &#xA;&lt;p&gt;For example, if &lt;code&gt;3.2.2&lt;/code&gt; is listed, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rbenv install 3.2.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;rbenv versions&lt;/code&gt; to confirm the correct version is active. The current version has an asterisk.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  system&#xA;* 3.2.2 (set by /Users/andy/Projects/rideshare/.ruby-version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running into rbenv trouble? Review &lt;em&gt;Learn how to load rbenv in your shell&lt;/em&gt; using &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;&lt;code&gt;rbenv init&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bundler and Gems&lt;/h2&gt; &#xA;&lt;p&gt;Bundler is included when you install Ruby using Rbenv. You&#39;re ready to install the Ruby gems for Rideshare.&lt;/p&gt; &#xA;&lt;p&gt;Run the following command from the Rideshare directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rideshare Development Database&lt;/h2&gt; &#xA;&lt;p&gt;⚠️ This scripts expects PostgreSQL version 16. If you see syntax errors with underscore numbers like &lt;code&gt;10_000&lt;/code&gt;, it&#39;s probably from using an older version that doesn&#39;t support that number style.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ Normally in Ruby on Rails applications, you&#39;d run &lt;code&gt;bin/rails db:create&lt;/code&gt; to create the development and test databases. Don&#39;t do that here. Rideshare uses a custom script.&lt;/p&gt; &#xA;&lt;p&gt;The script is called &lt;a href=&#34;https://raw.githubusercontent.com/andyatkinson/rideshare/main/db/setup.sh&#34;&gt;&lt;code&gt;db/setup.sh&lt;/code&gt;&lt;/a&gt;. Don&#39;t run it yet. The video below shows common issues for this section.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🎥 Rideshare DB setup. Common issues running db/setup.sh&lt;/summary&gt; &#xA; &lt;a href=&#34;https://www.loom.com/share/fc919520089c4e0abb2c0a02b68bbd91&#34;&gt; &lt;img style=&#34;max-width:300px;&#34; src=&#34;https://cdn.loom.com/sessions/thumbnails/fc919520089c4e0abb2c0a02b68bbd91-with-play.gif&#34;&gt; &lt;/a&gt;  &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Before you run it, let&#39;s set some environment variables. Open the file &lt;code&gt;db/setup.sh&lt;/code&gt; and read the comments at the top for more info about these env vars:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RIDESHARE_DB_PASSWORD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DB_URL&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;⚠️ The script generates a password value using &lt;code&gt;openssl&lt;/code&gt;, assuming it&#39;s installed and available.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve set values, before running the script, run &lt;code&gt;echo $RIDESHARE_DB_PASSWORD&lt;/code&gt; (and &lt;code&gt;echo $DB_URL&lt;/code&gt;) to make sure they&#39;re set.&lt;/p&gt; &#xA;&lt;p&gt;Once both are set, you&#39;re ready to run the script.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s capture the output of the script. Use the command below to do that. The script output goes into &lt;code&gt;output.log&lt;/code&gt; file so we can more easily review it for errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh db/setup.sh 2&amp;gt;&amp;amp;1 | tee -a output.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you set &lt;code&gt;RIDESHARE_DB_PASSWORD&lt;/code&gt; earlier, create or update the special &lt;code&gt;~/.pgpass&lt;/code&gt; file with the password you generated. This allows us to put the PostgreSQL user in the connection string, without needing to also supply the password.&lt;/p&gt; &#xA;&lt;p&gt;Refer to &lt;code&gt;postgresql/.pgpass.sample&lt;/code&gt; for an example, and copy the example into your own &lt;code&gt;~/.pgpass&lt;/code&gt; file, replacing the password with your generated one.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;ve updated &lt;code&gt;~/.pgpass&lt;/code&gt;, it should look like the line below. The last segment (&lt;code&gt;2C6uw3LprgUMwSLQ&lt;/code&gt; below) is the password you generated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;localhost:5432:rideshare_development:owner:2C6uw3LprgUMwSLQ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;chmod 0600 ~/.pgpass&lt;/code&gt; to change the file mode (permissions).&lt;/p&gt; &#xA;&lt;p&gt;Finally, run &lt;code&gt;export DATABASE_URL=&amp;lt;value from .env&amp;gt;&lt;/code&gt;, getting the value from the &lt;code&gt;.env&lt;/code&gt; file in this project, set as the value of the &lt;code&gt;DATABASE_URL&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;Confirm that&#39;s a non-empty value by running &lt;code&gt;echo $DATABASE_URL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once &lt;code&gt;DATABASE_URL&lt;/code&gt; is set, we&#39;ll use it as an argument to &lt;code&gt;psql&lt;/code&gt; to connect to the database. Run &lt;code&gt;psql $DATABASE_URL&lt;/code&gt; to do that.&lt;/p&gt; &#xA;&lt;p&gt;Once connected, you&#39;re good to go. If you&#39;d like to do more checks, expand the checks and run through them below.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Installation Checks&lt;/summary&gt; &#xA; &lt;p&gt;From within psql, run this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT current_user;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Confirm user &lt;code&gt;owner&lt;/code&gt; is displayed.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;owner@localhost:5432 rideshare_development# select current_user;&#xA; current_user&#xA; --------------&#xA;  owner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;From psql, run the &lt;em&gt;describe namespace&lt;/em&gt; meta-command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;\dn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Verify the &lt;code&gt;rideshare&lt;/code&gt; schema is displayed.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;owner@localhost:5432 rideshare_development# \dn&#xA;  List of schemas&#xA;   Name    | Owner&#xA;-----------+-------&#xA; rideshare | owner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Run the &lt;em&gt;describe table&lt;/em&gt; meta command next: &lt;code&gt;\dt&lt;/code&gt;. Rideshare tables like &lt;code&gt;users&lt;/code&gt;, &lt;code&gt;trips&lt;/code&gt; are listed.&lt;/p&gt; &#xA; &lt;p&gt;If no tables are listed, make sure you&#39;ve run migrations, see below!&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Run Migrations&lt;/h2&gt; &#xA;&lt;p&gt;Run migrations the standard way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin/rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that migrations are preceded by the command &lt;code&gt;SET role = owner&lt;/code&gt;, so they&#39;re run with &lt;code&gt;owner&lt;/code&gt; as the owner of database objects.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;lib/tasks/migration_hooks.rake&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;If migrations ran successfully, you&#39;re good to go!&lt;/p&gt; &#xA;&lt;h2&gt;Data Loads&lt;/h2&gt; &#xA;&lt;p&gt;To load some sample data, check out: &lt;a href=&#34;https://raw.githubusercontent.com/andyatkinson/rideshare/main/db/README.md&#34;&gt;db/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Development Guides and Documentation&lt;/h1&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The Rideshare repository has many &lt;code&gt;README.md&lt;/code&gt; files within subdirectories. Run &lt;code&gt;find . -name &#39;README.md&#39;&lt;/code&gt; to see them all.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For expanded installation and troubleshooting, visit: &lt;a href=&#34;https://github.com/andyatkinson/development_guides&#34;&gt;Development Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For DB things: &lt;a href=&#34;https://raw.githubusercontent.com/andyatkinson/rideshare/main/db/README.md&#34;&gt;db/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For database scripts: &lt;a href=&#34;https://raw.githubusercontent.com/andyatkinson/rideshare/main/db/scripts/README.md&#34;&gt;db/scripts/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For PostgreSQL things: &lt;a href=&#34;https://raw.githubusercontent.com/andyatkinson/rideshare/main/postgresql/README.md&#34;&gt;postgresql/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Docker things: &lt;a href=&#34;https://raw.githubusercontent.com/andyatkinson/rideshare/main/docker/README.md&#34;&gt;docker/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For DB scrubbing: &lt;a href=&#34;https://raw.githubusercontent.com/andyatkinson/rideshare/main/db/scrubbing/README.md&#34;&gt;db/scrubbing/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For test environment details in Rideshare, check out: &lt;a href=&#34;https://raw.githubusercontent.com/andyatkinson/rideshare/main/TESTING.md&#34;&gt;TESTING.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Guides and Tasks in this repo, check out: &lt;a href=&#34;https://raw.githubusercontent.com/andyatkinson/rideshare/main/GUIDES.md&#34;&gt;Guides&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;User Interfaces&lt;/h1&gt; &#xA;&lt;p&gt;Although Rideshare is an &lt;em&gt;API-only&lt;/em&gt; app, there are some UI elements.&lt;/p&gt; &#xA;&lt;p&gt;Rideshare runs &lt;a href=&#34;https://github.com/ankane/pghero&#34;&gt;PgHero&lt;/a&gt; which has a UI.&lt;/p&gt; &#xA;&lt;p&gt;Connect to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin/rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once that&#39;s running, visit &lt;a href=&#34;http://localhost:3000/pghero&#34;&gt;http://localhost:3000/pghero&lt;/a&gt; in your browser to see it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/VduvxSK.png&#34; alt=&#34;Screenshot of PgHero for Rideshare&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>