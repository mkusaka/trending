<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-08T01:41:02Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>community/community</title>
    <updated>2023-10-08T01:41:02Z</updated>
    <id>tag:github.com,2023-10-08:/community/community</id>
    <link href="https://github.com/community/community" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Public feedback discussions for: GitHub Mobile, GitHub Discussions, GitHub Codespaces, GitHub Sponsors, GitHub Issues and more!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub Community Discussions&lt;/h1&gt; &#xA;&lt;p&gt;In this repository, you will find categories for various product areas. Feel free to share feedback, discuss topics with other community members, or ask questions.&lt;/p&gt; &#xA;&lt;h2&gt;Product Feedback&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Feedback Category&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;About the Product&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;👍 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/accessibility&#34;&gt;Accessibility&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-personal-account-settings/managing-accessibility-settings#about-accessibility-settings&#34;&gt;About Accessibility&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🚢 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/actions&#34;&gt;Actions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔁 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/api-and-webhooks&#34;&gt;API and Webhooks&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.github.com/en/rest&#34;&gt;GitHub API&lt;/a&gt; and &lt;a href=&#34;https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhook&#34;&gt;GitHub Webhooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔎 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/code-search-and-navigation&#34;&gt;Code Search &amp;amp; Navigation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cs.github.com/about&#34;&gt;Code Search &amp;amp; Navigation&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;💻 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/codespaces&#34;&gt;Codespaces&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;👩‍✈️ &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/copilot&#34;&gt;Copilot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copilot.github.com/&#34;&gt;GitHub Copilot&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🤖 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/code-security&#34;&gt;Code Security&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/features/security&#34;&gt;GitHub Code Security&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🗣️ &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.github.com/en/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🌐 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/feed&#34;&gt;Feed&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.blog/2022-03-22-improving-your-github-feed/&#34;&gt;GitHub Feed&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🎒 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/github-education&#34;&gt;GitHub Education&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://education.github.com/&#34;&gt;GitHub Education&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⭐ &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/lists&#34;&gt;Lists&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.github.com/en/get-started/exploring-projects-on-github/saving-repositories-with-stars#organizing-starred-repositories-with-lists&#34;&gt;GitHub Lists&lt;/a&gt; (Public Beta)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📱 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/mobile&#34;&gt;Mobile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mobile&#34;&gt;GitHub Mobile&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📦 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/packages&#34;&gt;Packages&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/features/packages&#34;&gt;GitHub Packages&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🗒️ &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/pages&#34;&gt;Pages&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.github.com/en/pages&#34;&gt;GitHub Pages&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🖼️ &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/profile&#34;&gt;Profile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/about-your-profile&#34;&gt;GitHub Profile&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🐙 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/projects-and-issues&#34;&gt;Projects and Issues&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.github.com/en/issues/planning-and-tracking-with-projects&#34;&gt;GitHub Projects&lt;/a&gt; / &lt;a href=&#34;https://github.com/features/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✔️ &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/pull-requests&#34;&gt;Pull Requests&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests&#34;&gt;GitHub Pull Requests&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🗳️ &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/repositories&#34;&gt;Repositories&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.github.com/en/repositories&#34;&gt;GitHub Repositories&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;💖 &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sponsors&#34;&gt;GitHub Sponsors&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;) &lt;a href=&#34;https://github.com/orgs/community/discussions/categories/general&#34;&gt;General Feedback&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.github.com/en&#34;&gt;GitHub Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These discussions are where you can share suggestions for how the products should be improved and discuss those improvements with the community, including members of the GitHub product team. Check out &lt;a href=&#34;https://raw.githubusercontent.com/community/community/main/#making-suggestions&#34;&gt;Making suggestions&lt;/a&gt; to learn how to provide feedback.&lt;/p&gt; &#xA;&lt;h2&gt;Discussions Categories&lt;/h2&gt; &#xA;&lt;p&gt;You will also find previous Discourse Community Forum categories that have since been updated in GitHub Discussions categories below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Discourse Category&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;New Discussions Category&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GitHub Help&lt;/td&gt; &#xA;   &lt;td&gt;New to GitHub&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Code to Cloud&lt;/td&gt; &#xA;   &lt;td&gt;Actions and Packages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GitHub Ecosystem&lt;/td&gt; &#xA;   &lt;td&gt;APIs and Integrations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Uncategorized&lt;/td&gt; &#xA;   &lt;td&gt;General&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Software Development&lt;/td&gt; &#xA;   &lt;td&gt;Programming Help&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Machine Learning and ML Ops&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;When creating a new post, make sure to choose the predetermined category that best fits your topic. This will ensure that conversations are indexed by their corresponding product or feature, to help community members quickly find answers to their questions.&lt;/p&gt; &#xA;&lt;p&gt;This repository works in conjunction with the &lt;a href=&#34;https://github.com/github/roadmap&#34;&gt;GitHub public product roadmap&lt;/a&gt;, which is where you can learn about what features we&#39;re working on, and when they&#39;ll be available. Accordingly, the Issues feature of this repository has been disabled. Discussion categories have been established for specific features listed above, as well as a general category for other topics. Additional categories may be added in the future. In the meantime, topics outside of the listed categories above, will be transferred into the General category. Please review the &lt;a href=&#34;https://docs.github.com/en/site-policy/github-terms/github-community-forum-code-of-conduct&#34;&gt;CODE OF CONDUCT&lt;/a&gt; before participating in discussions.&lt;/p&gt; &#xA;&lt;h2&gt;Making suggestions&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to &lt;a href=&#34;https://github.com/orgs/community/discussions&#34;&gt;open a discussion&lt;/a&gt; if you have suggestions for how we can improve our products. You don&#39;t need to have a solution to the problem you are facing to kick off a discussion.&lt;/p&gt; &#xA;&lt;p&gt;Prior to creating a new discussion, please take a look at previous discussions to see if someone else has already shared your suggestion(s). If you find a similar discussion, reply with additional details or upvote the discussion to signal your support rather than creating a new one.&lt;/p&gt; &#xA;&lt;h3&gt;From a suggestion to a shipped feature&lt;/h3&gt; &#xA;&lt;p&gt;Once you kick off a discussion, the GitHub product team will evaluate the feedback but will not be able to respond to every submission. From there, we will work with you, and the entire community, to ensure we understand the current capabilities GitHub doesn’t have and explore the space for potential solutions to your problem statement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the product team determines that we are going to prioritize a feature to solve the problem you&#39;ve identified, we may open an issue and track its development in the &lt;a href=&#34;https://github.com/github/roadmap&#34;&gt;public roadmap&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If the product team determines that we will not be working to solve the problem you have identified, we may comment on the discussion describing our reasoning so our decisions can remain transparent.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Any statement in this repository that is not purely historical is considered a forward-looking statement. Forward-looking statements included in this repository are based on information available to GitHub as of the date they are made, and GitHub assumes no obligation to update any forward-looking statements. The forward-looking comments in the public feedback discussions do not represent a commitment, guarantee, obligation or promise to deliver any product or feature, or to deliver any product and feature by any particular date, and are intended to outline the general development plans. Customers should not rely on these public feedback discussions to make any purchasing decision.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>collectiveidea/audited</title>
    <updated>2023-10-08T01:41:02Z</updated>
    <id>tag:github.com,2023-10-08:/collectiveidea/audited</id>
    <link href="https://github.com/collectiveidea/audited" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Audited (formerly acts_as_audited) is an ORM extension that logs all changes to your Rails models.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Audited &lt;a href=&#34;http://rubygems.org/gems/audited&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/audited.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/collectiveidea/audited/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://codeclimate.com/github/collectiveidea/audited&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/collectiveidea/audited.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Audited&lt;/strong&gt; (previously acts_as_audited) is an ORM extension that logs all changes to your models. Audited can also record who made those changes, save comments and associate models related to the changes.&lt;/p&gt; &#xA;&lt;p&gt;Audited currently (5.x) works with Rails 7.1, 7.0, 6.1, 6.0, 5.2, 5.1, and 5.0.&lt;/p&gt; &#xA;&lt;p&gt;For Rails 4, use gem version 4.x For Rails 3, use gem version 3.0 or see the &lt;a href=&#34;https://github.com/collectiveidea/audited/tree/3.0-stable&#34;&gt;3.0-stable branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Rubies&lt;/h2&gt; &#xA;&lt;p&gt;Audited supports and is &lt;a href=&#34;https://github.com/collectiveidea/audited/actions/workflows/ci.yml&#34;&gt;tested against&lt;/a&gt; the following Ruby versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2.3 (only tested on Sqlite due to testing issues with other DBs)&lt;/li&gt; &#xA; &lt;li&gt;2.4&lt;/li&gt; &#xA; &lt;li&gt;2.5&lt;/li&gt; &#xA; &lt;li&gt;2.6&lt;/li&gt; &#xA; &lt;li&gt;2.7&lt;/li&gt; &#xA; &lt;li&gt;3.0&lt;/li&gt; &#xA; &lt;li&gt;3.1&lt;/li&gt; &#xA; &lt;li&gt;3.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Audited may work just fine with a Ruby version not listed above, but we can&#39;t guarantee that it will. If you&#39;d like to maintain a Ruby that isn&#39;t listed, please let us know with a &lt;a href=&#34;https://github.com/collectiveidea/audited/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported ORMs&lt;/h2&gt; &#xA;&lt;p&gt;Audited is currently ActiveRecord-only. In a previous life, Audited worked with MongoMapper. Use the &lt;a href=&#34;https://github.com/collectiveidea/audited/tree/4.2-stable&#34;&gt;4.2-stable branch&lt;/a&gt; if you need MongoMapper.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the gem to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;audited&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you&#39;re using &lt;code&gt;require: false&lt;/code&gt; you must add initializers like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#./config/initializers/audited.rb&#xA;require &#34;audited&#34;&#xA;&#xA;Audited::Railtie.initializers.each(&amp;amp;:run)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, from your Rails app directory, create the &lt;code&gt;audits&lt;/code&gt; table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails generate audited:install&#xA;$ rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default changes are stored in YAML format. If you&#39;re using PostgreSQL, then you can use &lt;code&gt;rails generate audited:install --audited-changes-column-type jsonb&lt;/code&gt; (or &lt;code&gt;json&lt;/code&gt; for MySQL 5.7+ and Rails 5+) to store audit changes natively with database JSON column types.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using something other than integer primary keys (e.g. UUID) for your User model, then you can use &lt;code&gt;rails generate audited:install --audited-user-id-column-type uuid&lt;/code&gt; to customize the &lt;code&gt;audits&lt;/code&gt; table &lt;code&gt;user_id&lt;/code&gt; column type.&lt;/p&gt; &#xA;&lt;h4&gt;Upgrading&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re already using Audited (or acts_as_audited), your &lt;code&gt;audits&lt;/code&gt; table may require additional columns. After every upgrade, please run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails generate audited:upgrade&#xA;$ rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upgrading will only make changes if changes are needed.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply call &lt;code&gt;audited&lt;/code&gt; on your models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  audited&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, whenever a user is created, updated or destroyed, a new audit is created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user = User.create!(name: &#34;Steve&#34;)&#xA;user.audits.count # =&amp;gt; 1&#xA;user.update!(name: &#34;Ryan&#34;)&#xA;user.audits.count # =&amp;gt; 2&#xA;user.destroy&#xA;user.audits.count # =&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Audits contain information regarding what action was taken on the model and what changes were made.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user.update!(name: &#34;Ryan&#34;)&#xA;audit = user.audits.last&#xA;audit.action # =&amp;gt; &#34;update&#34;&#xA;audit.audited_changes # =&amp;gt; {&#34;name&#34;=&amp;gt;[&#34;Steve&#34;, &#34;Ryan&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get previous versions of a record by index or date, or list all revisions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user.revisions&#xA;user.revision(1)&#xA;user.revision_at(Date.parse(&#34;2016-01-01&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying columns&lt;/h3&gt; &#xA;&lt;p&gt;By default, a new audit is created for any attribute changes. You can, however, limit the columns to be considered.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  # All fields&#xA;  # audited&#xA;&#xA;  # Single field&#xA;  # audited only: :name&#xA;&#xA;  # Multiple fields&#xA;  # audited only: [:name, :address]&#xA;&#xA;  # All except certain fields&#xA;  # audited except: :password&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying callbacks&lt;/h3&gt; &#xA;&lt;p&gt;By default, a new audit is created for any Create, Update or Destroy action. You can, however, limit the actions audited.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  # All fields and actions&#xA;  # audited&#xA;&#xA;  # Single field, only audit Update and Destroy (not Create)&#xA;  # audited only: :name, on: [:update, :destroy]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comments&lt;/h3&gt; &#xA;&lt;p&gt;You can attach comments to each audit using an &lt;code&gt;audit_comment&lt;/code&gt; attribute on your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user.update!(name: &#34;Ryan&#34;, audit_comment: &#34;Changing name, just because&#34;)&#xA;user.audits.last.comment # =&amp;gt; &#34;Changing name, just because&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally add the &lt;code&gt;:comment_required&lt;/code&gt; option to your &lt;code&gt;audited&lt;/code&gt; call to require comments for all audits.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  audited :comment_required =&amp;gt; true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can update an audit only if audit_comment is present. You can optionally add the &lt;code&gt;:update_with_comment_only&lt;/code&gt; option set to &lt;code&gt;false&lt;/code&gt; to your &lt;code&gt;audited&lt;/code&gt; call to turn this behavior off for all audits.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  audited :update_with_comment_only =&amp;gt; false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Limiting stored audits&lt;/h3&gt; &#xA;&lt;p&gt;You can limit the number of audits stored for your model. To configure limiting for all audited models, put the following in an initializer file (&lt;code&gt;config/initializers/audited.rb&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Audited.max_audits = 10 # keep only 10 latest audits&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or customize per model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  audited max_audits: 2&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whenever an object is updated or destroyed, extra audits are combined with newer ones and the old ones are destroyed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user = User.create!(name: &#34;Steve&#34;)&#xA;user.audits.count # =&amp;gt; 1&#xA;user.update!(name: &#34;Ryan&#34;)&#xA;user.audits.count # =&amp;gt; 2&#xA;user.destroy&#xA;user.audits.count # =&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Current User Tracking&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Audited in a Rails application, all audited changes made within a request will automatically be attributed to the current user. By default, Audited uses the &lt;code&gt;current_user&lt;/code&gt; method in your controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsController &amp;lt; ApplicationController&#xA;  def create&#xA;    current_user # =&amp;gt; #&amp;lt;User name: &#34;Steve&#34;&amp;gt;&#xA;    @post = Post.create(params[:post])&#xA;    @post.audits.last.user # =&amp;gt; #&amp;lt;User name: &#34;Steve&#34;&amp;gt;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a method other than &lt;code&gt;current_user&lt;/code&gt;, put the following in an initializer file (&lt;code&gt;config/initializers/audited.rb&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Audited.current_user_method = :authenticated_user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outside of a request, Audited can still record the user with the &lt;code&gt;as_user&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Audited.audit_class.as_user(User.find(1)) do&#xA;  post.update!(title: &#34;Hello, world!&#34;)&#xA;end&#xA;post.audits.last.user # =&amp;gt; #&amp;lt;User id: 1&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The standard Audited install assumes your User model has an integer primary key type. If this isn&#39;t true (e.g. you&#39;re using UUID primary keys), you&#39;ll need to create a migration to update the &lt;code&gt;audits&lt;/code&gt; table &lt;code&gt;user_id&lt;/code&gt; column type. (See Installation above for generator flags if you&#39;d like to regenerate the install migration.)&lt;/p&gt; &#xA;&lt;h4&gt;Custom Audit User&lt;/h4&gt; &#xA;&lt;p&gt;You might need to use a custom auditor from time to time. This can be done by simply passing in a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  def authenticated_user&#xA;    if current_user&#xA;      current_user&#xA;    else&#xA;      &#39;Alexander Fleming&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;as_user&lt;/code&gt; also accepts a string, which can be useful for auditing updates made in a CLI environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;Audited.audit_class.as_user(&#34;console-user-#{ENV[&#39;SSH_USER&#39;]}&#34;) do&#xA;  post.update_attributes!(title: &#34;Hello, world!&#34;)&#xA;end&#xA;post.audits.last.user # =&amp;gt; &#39;console-user-username&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to set a specific user as the auditor of the commands in a CLI environment, whether that is a string or an ActiveRecord object, you can use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;Audited.store[:audited_user] = &#34;username&#34;&#xA;&#xA;# or&#xA;&#xA;Audited.store[:audited_user] = User.find(1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Associated Audits&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it&#39;s useful to associate an audit with a model other than the one being changed. For instance, given the following models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  belongs_to :company&#xA;  audited&#xA;end&#xA;&#xA;class Company &amp;lt; ActiveRecord::Base&#xA;  has_many :users&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every change to a user is audited, but what if you want to grab all of the audits of users belonging to a particular company? You can add the &lt;code&gt;:associated_with&lt;/code&gt; option to your &lt;code&gt;audited&lt;/code&gt; call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  belongs_to :company&#xA;  audited associated_with: :company&#xA;end&#xA;&#xA;class Company &amp;lt; ActiveRecord::Base&#xA;  audited&#xA;  has_many :users&#xA;  has_associated_audits&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, when an audit is created for a user, that user&#39;s company is also saved alongside the audit. This makes it much easier (and faster) to access audits indirectly related to a company.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;company = Company.create!(name: &#34;Collective Idea&#34;)&#xA;user = company.users.create!(name: &#34;Steve&#34;)&#xA;user.update!(name: &#34;Steve Richert&#34;)&#xA;user.audits.last.associated # =&amp;gt; #&amp;lt;Company name: &#34;Collective Idea&#34;&amp;gt;&#xA;company.associated_audits.last.auditable # =&amp;gt; #&amp;lt;User name: &#34;Steve Richert&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access records&#39; own audits and associated audits in one go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;company.own_and_associated_audits&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional auditing&lt;/h3&gt; &#xA;&lt;p&gt;If you want to audit only under specific conditions, you can provide conditional options (similar to ActiveModel callbacks) that will ensure your model is only audited for these conditions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  audited if: :active?&#xA;&#xA;  def active?&#xA;    last_login &amp;gt; 6.months.ago&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like in ActiveModel, you can use an inline Proc in your conditions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  audited unless: Proc.new { |u| u.ninja? }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above case, the user will only be audited when &lt;code&gt;User#ninja&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling auditing&lt;/h3&gt; &#xA;&lt;p&gt;If you want to disable auditing temporarily doing certain tasks, there are a few methods available.&lt;/p&gt; &#xA;&lt;p&gt;To disable auditing on a save:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@user.save_without_auditing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@user.without_auditing do&#xA;  @user.save&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable auditing on a column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.non_audited_columns = [:first_name, :last_name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable auditing on an entire model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.auditing_enabled = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable auditing on all models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Audited.auditing_enabled = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have auditing disabled by default on your model you can enable auditing temporarily.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.auditing_enabled = false&#xA;@user.save_with_auditing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.auditing_enabled = false&#xA;@user.with_auditing do&#xA;  @user.save&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encrypted attributes&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using ActiveRecord&#39;s encryption (available from Rails 7) to encrypt some attributes, Audited will automatically filter values of these attributes. No additional configuration is required. Changes to encrypted attributes will be logged as &lt;code&gt;[FILTERED]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  audited&#xA;  encrypts :password&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom &lt;code&gt;Audit&lt;/code&gt; model&lt;/h3&gt; &#xA;&lt;p&gt;If you want to extend or modify the audit model, create a new class that inherits from &lt;code&gt;Audited::Audit&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CustomAudit &amp;lt; Audited::Audit&#xA;  def some_custom_behavior&#xA;    &#34;Hiya!&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then set it in an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/audited.rb&#xA;&#xA;Audited.config do |config|&#xA;  config.audit_class = &#34;CustomAudit&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enum Storage&lt;/h3&gt; &#xA;&lt;p&gt;In 4.10, the default behavior for enums changed from storing the value synthesized by Rails to the value stored in the DB. You can restore the previous behavior by setting the store_synthesized_enums configuration value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/audited.rb&#xA;&#xA;Audited.store_synthesized_enums = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;You can find documentation at: &lt;a href=&#34;https://www.rubydoc.info/gems/audited&#34;&gt;https://www.rubydoc.info/gems/audited&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or join the &lt;a href=&#34;http://groups.google.com/group/audited&#34;&gt;mailing list&lt;/a&gt; to get help or offer suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;In the spirit of &lt;a href=&#34;http://www.fsf.org/licensing/essays/free-sw.html&#34;&gt;free software&lt;/a&gt;, &lt;strong&gt;everyone&lt;/strong&gt; is encouraged to help improve this project. Here are a few ways &lt;em&gt;you&lt;/em&gt; can pitch in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use prerelease versions of Audited.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/collectiveidea/audited/issues&#34;&gt;Report bugs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Fix bugs and submit &lt;a href=&#34;http://github.com/collectiveidea/audited/pulls&#34;&gt;pull requests&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Write, clarify or fix documentation.&lt;/li&gt; &#xA; &lt;li&gt;Refactor code.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>