<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:35:39Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stripe-ruby-mock/stripe-ruby-mock</title>
    <updated>2022-08-17T01:35:39Z</updated>
    <id>tag:github.com,2022-08-17:/stripe-ruby-mock/stripe-ruby-mock</id>
    <link href="https://github.com/stripe-ruby-mock/stripe-ruby-mock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A mocking library for testing stripe ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stripe-ruby-mock &lt;a href=&#34;https://travis-ci.org/stripe-ruby-mock/stripe-ruby-mock&#34;&gt;&lt;img src=&#34;https://travis-ci.org/stripe-ruby-mock/stripe-ruby-mock.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/rebelidealist/stripe-ruby-mock&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/rebelidealist/stripe-ruby-mock.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Homepage: &lt;a href=&#34;https://github.com/stripe-ruby-mock/stripe-ruby-mock&#34;&gt;https://github.com/stripe-ruby-mock/stripe-ruby-mock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issues: &lt;a href=&#34;https://github.com/stripe-ruby-mock/stripe-ruby-mock/issues&#34;&gt;https://github.com/stripe-ruby-mock/stripe-ruby-mock/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CHAT&lt;/strong&gt;: &lt;a href=&#34;https://gitter.im/rebelidealist/stripe-ruby-mock&#34;&gt;https://gitter.im/rebelidealist/stripe-ruby-mock&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;REQUEST: Looking for More Core Contributors&lt;/h1&gt; &#xA;&lt;p&gt;This gem has unexpectedly grown in popularity and I&#39;ve gotten pretty busy, so I&#39;m currently looking for more core contributors to help me out. If you&#39;re interested, there is only one requirement: submit a significant enough pull request and have it merged into master (many of you have already done this). Afterwards, ping &lt;a href=&#34;https://gitter.im/gilbert&#34;&gt;@gilbert&lt;/a&gt; in &lt;a href=&#34;https://gitter.im/rebelidealist/stripe-ruby-mock&#34;&gt;chat&lt;/a&gt; and I will add you as a collaborator.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;In your gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;stripe-ruby-mock&#39;, &#39;~&amp;gt; 3.0.1&#39;, :require =&amp;gt; &#39;stripe_mock&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;!!! Important&lt;/h2&gt; &#xA;&lt;p&gt;We have &lt;a href=&#34;https://github.com/stripe-ruby-mock/stripe-ruby-mock/raw/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;. It&#39;s first attempt. Feel free to update it and suggest to a new format of it.&lt;/p&gt; &#xA;&lt;p&gt;version &lt;code&gt;3.0.0&lt;/code&gt; has &lt;a href=&#34;https://github.com/stripe-ruby-mock/stripe-ruby-mock/pull/658&#34;&gt;breaking changes&lt;/a&gt; - we support stripe &amp;gt; 5 and &amp;lt; 6 for now and try to follow the newest API version. But if you still use older versions please &lt;a href=&#34;https://github.com/stripe-ruby-mock/stripe-ruby-mock#specifications&#34;&gt;read&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No stripe server access required&lt;/li&gt; &#xA; &lt;li&gt;Easily test against stripe errors&lt;/li&gt; &#xA; &lt;li&gt;Mock and customize stripe webhooks&lt;/li&gt; &#xA; &lt;li&gt;Flip a switch to run your tests against Stripe&#39;s &lt;strong&gt;live test servers&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ruby &amp;gt;= 2.4.0&lt;/li&gt; &#xA; &lt;li&gt;stripe &amp;gt;= 5.0.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Specifications&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;STRIPE API TARGET VERSION:&lt;/strong&gt; 2019-08-20 (master) - we try, but some features are not implemented yet.&lt;/p&gt; &#xA;&lt;p&gt;Older API version branches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;api-2015-09-08 - use gem version 2.4.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rebelidealist/stripe-ruby-mock/tree/api-2014-06-17&#34;&gt;api-2014-06-17&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Versioning System&lt;/h3&gt; &#xA;&lt;p&gt;Since StripeMock tries to keep up with Stripe&#39;s API version, its version system is a little different:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;strong&gt;major&lt;/strong&gt; number (1.x.x) is for breaking changes involving how you use StripeMock itself&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;minor&lt;/strong&gt; number (x.1.x) is for breaking changes involving Stripe&#39;s API&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;patch&lt;/strong&gt; number (x.x.0) is for non-breaking changes/fixes involving Stripe&#39;s API, or for non-breaking changes/fixes/features for StripeMock itself.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;** &lt;em&gt;WARNING: This library does not cover all Stripe API endpoints. If you need one that&#39;s missing, please create an issue for it, or &lt;a href=&#34;https://github.com/rebelidealist/stripe-ruby-mock/wiki/Implementing-a-New-Behavior&#34;&gt;see this wiki page&lt;/a&gt; if you&#39;re interested in contributing&lt;/em&gt; **&lt;/p&gt; &#xA;&lt;p&gt;At its core, this library overrides &lt;a href=&#34;https://github.com/stripe/stripe-ruby&#34;&gt;stripe-ruby&#39;s&lt;/a&gt; request method to skip all http calls and instead directly return test data. This allows you to write and run tests without the need to actually hit stripe&#39;s servers.&lt;/p&gt; &#xA;&lt;p&gt;You can use stripe-ruby-mock with any ruby testing library. Here&#39;s a quick dummy example with RSpec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;stripe_mock&#39;&#xA;&#xA;describe MyApp do&#xA;  let(:stripe_helper) { StripeMock.create_test_helper }&#xA;  before { StripeMock.start }&#xA;  after { StripeMock.stop }&#xA;&#xA;  it &#34;creates a stripe customer&#34; do&#xA;&#xA;    # This doesn&#39;t touch stripe&#39;s servers nor the internet!&#xA;    # Specify :source in place of :card (with same value) to return customer with source data&#xA;    customer = Stripe::Customer.create({&#xA;      email: &#39;johnny@appleseed.com&#39;,&#xA;      source: stripe_helper.generate_card_token&#xA;    })&#xA;    expect(customer.email).to eq(&#39;johnny@appleseed.com&#39;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test Helpers&lt;/h2&gt; &#xA;&lt;p&gt;Some Stripe API calls require several parameters. StripeMock helps you keep your test brief with some helpers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe MyApp do&#xA;  let(:stripe_helper) { StripeMock.create_test_helper }&#xA;&#xA;  it &#34;creates a stripe plan&#34; do&#xA;    plan = stripe_helper.create_plan(:id =&amp;gt; &#39;my_plan&#39;, :amount =&amp;gt; 1500)&#xA;&#xA;    # The above line replaces the following:&#xA;    # plan = Stripe::Plan.create(&#xA;    #   :id =&amp;gt; &#39;my_plan&#39;,&#xA;    #   :name =&amp;gt; &#39;StripeMock Default Plan ID&#39;,&#xA;    #   :amount =&amp;gt; 1500,&#xA;    #   :currency =&amp;gt; &#39;usd&#39;,&#xA;    #   :interval =&amp;gt; &#39;month&#39;&#xA;    # )&#xA;    expect(plan.id).to eq(&#39;my_plan&#39;)&#xA;    expect(plan.amount).to eq(1500)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/stripe-ruby-mock/stripe-ruby-mock/master/lib/stripe_mock/test_strategies/&#34;&gt;available helpers&lt;/a&gt; are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stripe_helper.create_plan(my_plan_params)&#xA;stripe_helper.delete_plan(my_plan_params)&#xA;stripe_helper.generate_card_token(my_card_params)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For everything else, use Stripe as you normally would (i.e. use Stripe as if you were not using StripeMock).&lt;/p&gt; &#xA;&lt;h2&gt;Live Testing&lt;/h2&gt; &#xA;&lt;p&gt;Every once in a while you want to make sure your tests are actually valid. StripeMock has a switch that allows you to run your test suite (or a subset thereof) against Stripe&#39;s live test servers.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of setting up your RSpec (2.x) test suite to run live with a command line switch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# RSpec 2.x&#xA;RSpec.configure do |c|&#xA;  if c.filter_manager.inclusions.keys.include?(:live)&#xA;    StripeMock.toggle_live(true)&#xA;    puts &#34;Running **live** tests against Stripe...&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this you can run live tests by running &lt;code&gt;rspec -t live&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of setting up your RSpec (3.x) test suite to run live with the same command line switch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# RSpec 3.x&#xA;RSpec.configure do |c|&#xA;  if c.filter_manager.inclusions.rules.include?(:live)&#xA;    StripeMock.toggle_live(true)&#xA;    puts &#34;Running **live** tests against Stripe...&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mocking Card Errors&lt;/h2&gt; &#xA;&lt;p&gt;** Ensure you start StripeMock in a before filter &lt;code&gt;StripeMock.start&lt;/code&gt; Tired of manually inputting fake credit card numbers to test against errors? Tire no more!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;it &#34;mocks a declined card error&#34; do&#xA;  # Prepares an error for the next create charge request&#xA;  StripeMock.prepare_card_error(:card_declined)&#xA;&#xA;  expect { Stripe::Charge.create(amount: 1, currency: &#39;usd&#39;) }.to raise_error {|e|&#xA;    expect(e).to be_a Stripe::CardError&#xA;    expect(e.http_status).to eq(402)&#xA;    expect(e.code).to eq(&#39;card_declined&#39;)&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Built-In Card Errors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StripeMock.prepare_card_error(:incorrect_number)&#xA;StripeMock.prepare_card_error(:invalid_number)&#xA;StripeMock.prepare_card_error(:invalid_expiry_month)&#xA;StripeMock.prepare_card_error(:invalid_expiry_year)&#xA;StripeMock.prepare_card_error(:invalid_cvc)&#xA;StripeMock.prepare_card_error(:expired_card)&#xA;StripeMock.prepare_card_error(:incorrect_cvc)&#xA;StripeMock.prepare_card_error(:card_declined)&#xA;StripeMock.prepare_card_error(:missing)&#xA;StripeMock.prepare_card_error(:processing_error)&#xA;StripeMock.prepare_card_error(:incorrect_zip)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see the details of each error in &lt;a href=&#34;https://raw.githubusercontent.com/stripe-ruby-mock/stripe-ruby-mock/master/lib/stripe_mock/api/errors.rb&#34;&gt;lib/stripe_mock/api/errors.rb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Specifying Card Errors&lt;/h3&gt; &#xA;&lt;p&gt;** Ensure you start StripeMock in a before filter &lt;code&gt;StripeMock.start&lt;/code&gt; By default, &lt;code&gt;prepare_card_error&lt;/code&gt; only triggers for &lt;code&gt;:new_charge&lt;/code&gt;, the event that happens when you run &lt;code&gt;Charge.create&lt;/code&gt;. More explicitly, this is what happens by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StripeMock.prepare_card_error(:card_declined, :new_charge)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the error to trigger on a different event, you need to replace &lt;code&gt;:new_charge&lt;/code&gt; with a different event. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StripeMock.prepare_card_error(:card_declined, :create_card)&#xA;customer = Stripe::Customer.create&#xA;# This line throws the card error&#xA;customer.cards.create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;:new_charge&lt;/code&gt; and &lt;code&gt;:create_card&lt;/code&gt; are names of methods in the &lt;a href=&#34;https://raw.githubusercontent.com/stripe-ruby-mock/stripe-ruby-mock/master/lib/stripe_mock/request_handlers&#34;&gt;StripeMock request handlers&lt;/a&gt;. You can also set &lt;code&gt;StripeMock.toggle_debug(true)&lt;/code&gt; to see the event name for each Stripe request made in your tests.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Errors&lt;/h3&gt; &#xA;&lt;p&gt;** Ensure you start StripeMock in a before filter &lt;code&gt;StripeMock.start&lt;/code&gt; To raise an error on a specific type of request, take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/stripe-ruby-mock/stripe-ruby-mock/master/lib/stripe_mock/request_handlers/&#34;&gt;request handlers folder&lt;/a&gt; and pass a method name to &lt;code&gt;StripeMock.prepare_error&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you wanted to raise an error for creating a new customer, for instance, you would do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;it &#34;raises a custom error for specific actions&#34; do&#xA;  custom_error = StandardError.new(&#34;Please knock first.&#34;)&#xA;&#xA;  StripeMock.prepare_error(custom_error, :new_customer)&#xA;&#xA;  expect { Stripe::Charge.create(amount: 1, currency: &#39;usd&#39;) }.to_not raise_error&#xA;  expect { Stripe::Customer.create }.to raise_error {|e|&#xA;    expect(e).to be_a StandardError&#xA;    expect(e.message).to eq(&#34;Please knock first.&#34;)&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example, &lt;code&gt;:new_customer&lt;/code&gt; is the name of a method from &lt;a href=&#34;https://raw.githubusercontent.com/stripe-ruby-mock/stripe-ruby-mock/master/lib/stripe_mock/request_handlers/customers.rb&#34;&gt;customers.rb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running the Mock Server&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you want your test stripe data to persist for a bit, such as during integration tests running on different processes. In such cases you&#39;ll want to start the stripe mock server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# spec_helper.rb&#xA;#&#xA;# The mock server will automatically be killed when your tests are done running.&#xA;#&#xA;require &#39;thin&#39;&#xA;StripeMock.spawn_server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, instead of &lt;code&gt;StripeMock.start&lt;/code&gt;, you&#39;ll want to use &lt;code&gt;StripeMock.start_client&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe MyApp do&#xA;  before do&#xA;    @client = StripeMock.start_client&#xA;  end&#xA;&#xA;  after do&#xA;    StripeMock.stop_client&#xA;    # Alternatively:&#xA;    #   @client.close!&#xA;    # -- Or --&#xA;    #   StripeMock.stop_client(:clear_server_data =&amp;gt; true)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is all essentially the same as using &lt;code&gt;StripeMock.start&lt;/code&gt;, except that the stripe test data is held in its own server process.&lt;/p&gt; &#xA;&lt;p&gt;Here are some other neat things you can do with the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@client.state #=&amp;gt; &#39;ready&#39;&#xA;&#xA;@client.get_server_data(:customers) # Also works for :charges, :plans, etc.&#xA;@client.clear_server_data&#xA;&#xA;@client.close!&#xA;@client.state #=&amp;gt; &#39;closed&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mock Server Options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# NOTE: Shown below are the default options&#xA;StripeMock.default_server_pid_path = &#39;./stripe-mock-server.pid&#39;&#xA;&#xA;StripeMock.spawn_server(&#xA;  :pid_path =&amp;gt; StripeMock.default_server_pid_path,&#xA;  :host =&amp;gt; &#39;0.0.0.0&#39;,&#xA;  :port =&amp;gt; 4999,&#xA;  :server =&amp;gt; :thin&#xA;)&#xA;&#xA;StripeMock.kill_server(StripeMock.default_server_pid_path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mock Server Command&lt;/h3&gt; &#xA;&lt;p&gt;If you need the mock server to continue running even after your tests are done, you&#39;ll want to use the executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ stripe-mock-server -p 4000&#xA;$ stripe-mock-server --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mocking Webhooks&lt;/h2&gt; &#xA;&lt;p&gt;If your application handles stripe webhooks, you are most likely retrieving the event from stripe and passing the result to a handler. StripeMock helps you by easily mocking that event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;it &#34;mocks a stripe webhook&#34; do&#xA;  event = StripeMock.mock_webhook_event(&#39;customer.created&#39;)&#xA;&#xA;  customer_object = event.data.object&#xA;  expect(customer_object.id).to_not be_nil&#xA;  expect(customer_object.default_card).to_not be_nil&#xA;  # etc.&#xA;end&#xA;&#xA;it &#34;mocks stripe connect webhooks&#34; do&#xA;  event = StripeMock.mock_webhook_event(&#39;customer.created&#39;, account: &#39;acc_123123&#39;)&#xA;&#xA;  expect(event.account).to eq(&#39;acc_123123&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing Webhooks&lt;/h3&gt; &#xA;&lt;p&gt;By default, StripeMock searches in your &lt;code&gt;spec/fixtures/stripe_webhooks/&lt;/code&gt; folder for your own, custom webhooks. If it finds nothing, it falls back to &lt;a href=&#34;https://raw.githubusercontent.com/stripe-ruby-mock/stripe-ruby-mock/master/lib/stripe_mock/webhook_fixtures/&#34;&gt;test events generated through stripe&#39;s webhooktester&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, you could create a file in &lt;code&gt;spec/fixtures/stripe_webhooks/invoice.created.with-sub.json&lt;/code&gt;, copy/paste the default from &lt;a href=&#34;https://raw.githubusercontent.com/stripe-ruby-mock/stripe-ruby-mock/master/lib/stripe_mock/webhook_fixtures/invoice.created.json&#34;&gt;the default invoice.created.json&lt;/a&gt;, and customize it to your needs.&lt;/p&gt; &#xA;&lt;p&gt;Then you can use that webook directly in your specs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;it &#34;can use a custom webhook fixture&#34; do&#xA;  event = StripeMock.mock_webhook_event(&#39;invoice.created.with-sub&#39;)&#xA;  # etc.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can alse override values on the fly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;it &#34;can override webhook values&#34; do&#xA;  # NOTE: given hash values get merged directly into event.data.object&#xA;  event = StripeMock.mock_webhook_event(&#39;customer.created&#39;, {&#xA;    :id =&amp;gt; &#39;cus_my_custom_value&#39;,&#xA;    :email =&amp;gt; &#39;joe@example.com&#39;&#xA;  })&#xA;  # Alternatively:&#xA;  # event.data.object.id = &#39;cus_my_custom_value&#39;&#xA;  # event.data.object.email = &#39;joe@example.com&#39;&#xA;  expect(event.data.object.id).to eq(&#39;cus_my_custom_value&#39;)&#xA;  expect(event.data.object.email).to eq(&#39;joe@example.com&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can name events whatever you like in your &lt;code&gt;spec/fixtures/stripe_webhooks/&lt;/code&gt; folder. However, if you try to call a non-standard event that&#39;s doesn&#39;t exist in that folder, StripeMock will throw an error.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to use a different fixture path, you can set it yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StripeMock.webhook_fixture_path = &#39;./spec/other/folder/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generating Card Tokens&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you need to check if your code reads a stripe card correctly. If so, you can specifically assign card data to a generated card token:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;it &#34;generates a stripe card token&#34; do&#xA;  card_token = StripeMock.generate_card_token(last4: &#34;9191&#34;, exp_year: 1984)&#xA;&#xA;  cus = Stripe::Customer.create(source: card_token)&#xA;  card = cus.sources.data.first&#xA;  expect(card.last4).to eq(&#34;9191&#34;)&#xA;  expect(card.exp_year).to eq(1984)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;To enable debug messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StripeMock.toggle_debug(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will &lt;strong&gt;only last for the session&lt;/strong&gt;; Once you call &lt;code&gt;StripeMock.stop&lt;/code&gt; or &lt;code&gt;StripeMock.stop_client&lt;/code&gt;, debug will be toggled off.&lt;/p&gt; &#xA;&lt;p&gt;If you always want debug to be on (it&#39;s quite verbose), you should put this in a &lt;code&gt;before&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;h2&gt;Miscellaneous Features&lt;/h2&gt; &#xA;&lt;p&gt;You may have noticed that all generated Stripe ids start with &lt;code&gt;test_&lt;/code&gt;. If you want to remove this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Turns off test_ prefix&#xA;StripeMock.global_id_prefix = false&#xA;&#xA;# Or you can set your own&#xA;StripeMock.global_id_prefix = &#39;my_app_&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cover all stripe urls/methods&lt;/li&gt; &#xA; &lt;li&gt;Throw useful errors that emulate Stripe&#39;s requirements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example: &#34;You must supply either a card or a customer id&#34; for &lt;code&gt;Stripe::Charge&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fingerprinting for other resources besides Cards&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing stripe-ruby-mock&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rebelidealist/stripe-ruby-mock/wiki/Implementing-a-New-Behavior&#34;&gt;Please see this wiki page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Patches are welcome and greatly appreciated! If you&#39;re contributing to fix a problem, be sure to write tests that illustrate the problem being fixed. This will help ensure that the problem remains fixed in future updates.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2013 Gilbert&lt;/p&gt; &#xA;&lt;p&gt;See LICENSE.txt for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>turingschool/ruby-exercises</title>
    <updated>2022-08-17T01:35:39Z</updated>
    <id>tag:github.com,2022-08-17:/turingschool/ruby-exercises</id>
    <link href="https://github.com/turingschool/ruby-exercises" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of exercises to practice various aspects of Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby Exercises&lt;/h1&gt; &#xA;&lt;p&gt;This is a collection of exercises to practice various aspects of Ruby.&lt;/p&gt; &#xA;&lt;p&gt;Practicing in this manner (small, bite-sized problems that you can do repeatedly) is a &lt;em&gt;fantastic&lt;/em&gt; way to solidify programming concepts.&lt;/p&gt; &#xA;&lt;p&gt;Each folder in this repository is a set of related exercises. Open up the folder and read the README to learn more about them.&lt;/p&gt; &#xA;&lt;h2&gt;Structure of this repository&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each folder contains a &lt;code&gt;README.md&lt;/code&gt; file that provides a summary of what skills you will develop with these exercises&lt;/li&gt; &#xA; &lt;li&gt;Each exercise file within the folder will begin with comments providing more detail on: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;How you need to manipulate or work with this file to complete the exercise.&lt;/li&gt; &#xA;   &lt;li&gt;Some exercises will require you to manipulate the &#34;current&#34; file and run it. Other exercises will require you to create &lt;em&gt;new&lt;/em&gt; files and then reference those files for the &#34;current&#34; file to work.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;1. Clone this repository&lt;/h3&gt; &#xA;&lt;p&gt;You don&#39;t need to fork this repository; clone it to your laptop&lt;/p&gt; &#xA;&lt;p&gt;in your &lt;code&gt;/turing&lt;/code&gt; directory on your laptop (or whatever directory you want this repository to live inside of), run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// using ssh keys&#xA;git clone git@github.com:turingschool/ruby-exercises.git&#xA;// using https, if the above doesn&#39;t work:&#xA;git clone https://github.com/turingschool/ruby-exercises.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once this command runs, you&#39;ll now have a &#34;local&#34; copy of this entire repository, living right on your laptop.&lt;/p&gt; &#xA;&lt;h3&gt;2. From the command line, &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;ruby-exercises&lt;/code&gt; directory.&lt;/h3&gt; &#xA;&lt;h3&gt;2. Install &lt;code&gt;bundler&lt;/code&gt; gem&lt;/h3&gt; &#xA;&lt;p&gt;run &lt;code&gt;gem install bundler&lt;/code&gt; in your terminal&lt;/p&gt; &#xA;&lt;h3&gt;3. From the command line, run &lt;code&gt;bundle install&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You &lt;em&gt;should&lt;/em&gt; see something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle install&#xA;Fetching gem metadata from https://rubygems.org/........&#xA;Resolving dependencies...&#xA;Using bundler 2.1.4&#xA;Using byebug 11.1.3&#xA;Fetching coderay 1.1.2&#xA;Installing coderay 1.1.2&#xA;Using diff-lcs 1.4.4&#xA;Using method_source 1.0.0&#xA;Using pry 0.13.1&#xA;Fetching pry-byebug 3.9.0&#xA;Installing pry-byebug 3.9.0&#xA;Fetching rspec-support 3.10.1&#xA;Installing rspec-support 3.10.1&#xA;Fetching rspec-core 3.10.1&#xA;Installing rspec-core 3.10.1&#xA;Fetching rspec-expectations 3.10.1&#xA;Installing rspec-expectations 3.10.1&#xA;Fetching rspec-mocks 3.10.1&#xA;Installing rspec-mocks 3.10.1&#xA;Fetching rspec 3.10.0&#xA;Installing rspec 3.10.0&#xA;Bundle complete! 3 Gemfile dependencies, 12 gems now installed.&#xA;Use `bundle info [gemname]` to see where a bundled gem is installed.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you see that, great!&lt;/p&gt; &#xA;&lt;p&gt;If you get an error like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zsh: command not found: bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you need to install the &lt;code&gt;bundler&lt;/code&gt; gem. Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this command throws an error, you either:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Don&#39;t have &lt;code&gt;rbenv&lt;/code&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ve not yet installed a version of Ruby.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please check that you&#39;ve followed &lt;a href=&#34;http://mod0.turing.io/setup-instructions&#34;&gt;mod0 setup instructions&lt;/a&gt; and this guide to &lt;a href=&#34;https://github.com/turingschool-examples/backend_module_0_capstone#environment&#34;&gt;install rbenv and a version of ruby&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Hey, hold up. What is this &lt;code&gt;bundle&lt;/code&gt; thing, and what does it do? what does &lt;code&gt;gem install bundler&lt;/code&gt; do?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Great question!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bundler&lt;/code&gt; is Ruby&#39;s &lt;a href=&#34;https://bundler.io/&#34;&gt;package manager&lt;/a&gt;. If you want to install extra code that works with Ruby, you&#39;ll use &lt;code&gt;bundler&lt;/code&gt; to do it. Once you &lt;em&gt;have&lt;/em&gt; the &lt;code&gt;bundler&lt;/code&gt; installed, it is &#34;used&#34; by typing &lt;code&gt;bundle&lt;/code&gt; into your terminal.&lt;/p&gt; &#xA;&lt;p&gt;It is used in conjunction with the &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;Gemfile.lock&lt;/code&gt; files you see in this repository, to manage Ruby gems.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an exhaustive amount of information about gems, if you&#39;re so inclined: &lt;a href=&#34;https://guides.rubygems.org/what-is-a-gem/&#34;&gt;guides.rubygems.org/what-is-a-gem&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Once &lt;code&gt;bundle&lt;/code&gt; has run successfully, open up the first test!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd data-types/strings&#xA;$ atom .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And read through the &lt;code&gt;README.md&lt;/code&gt; for further instructions!&lt;/p&gt; &#xA;&lt;p&gt;If you want to view the instructions in your web browser, you can view them here: &lt;a href=&#34;https://github.com/turingschool/ruby-exercises/tree/main/data-types/strings&#34;&gt;data-types/strings/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>