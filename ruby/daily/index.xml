<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-07T01:32:33Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Studiosity/grover</title>
    <updated>2022-08-07T01:32:33Z</updated>
    <id>tag:github.com,2022-08-07:/Studiosity/grover</id>
    <link href="https://github.com/Studiosity/grover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby gem to transform HTML into PDFs, PNGs or JPEGs using Google Puppeteer/Chromium&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Studiosity/grover/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/Studiosity/grover/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/Studiosity/grover/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/37609653789bcf2c8d94/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/Studiosity/grover/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/37609653789bcf2c8d94/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/grover&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/grover.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Grover&lt;/h1&gt; &#xA;&lt;p&gt;A Ruby gem to transform HTML into PDFs, PNGs or JPEGs using &lt;a href=&#34;https://github.com/puppeteer/puppeteer&#34;&gt;Google Puppeteer&lt;/a&gt; and &lt;a href=&#34;https://www.chromium.org/Home&#34;&gt;Chromium&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Studiosity/grover/main/Grover.jpg&#34; alt=&#34;Grover&#34; title=&#34;Grover&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;grover&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Google Puppeteer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install puppeteer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Grover.new accepts a URL or inline HTML and optional parameters for Puppeteer&#xA;grover = Grover.new(&#39;https://google.com&#39;, format: &#39;A4&#39;)&#xA;&#xA;# Get an inline PDF&#xA;pdf = grover.to_pdf&#xA;&#xA;# Get a screenshot&#xA;png = grover.to_png&#xA;jpeg = grover.to_jpeg&#xA;&#xA;# Get the HTML content (including DOCTYPE)&#xA;html = grover.to_html&#xA;&#xA;# Options can be provided through meta tags&#xA;Grover.new(&#39;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta name=&#34;grover-page_ranges&#34; content=&#34;1-3&#34;&#39;)&#xA;Grover.new(&#39;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta name=&#34;grover-margin-top&#34; content=&#34;10px&#34;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;N.B.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options are underscore case, and sub-options separated with a dash&lt;/li&gt; &#xA; &lt;li&gt;all options can be overwritten, including &lt;code&gt;emulate_media&lt;/code&gt; and &lt;code&gt;display_url&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From a view template&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s easy to render a normal Rails view template as a PDF, using Rails&#39; &lt;a href=&#34;https://api.rubyonrails.org/classes/AbstractController/Rendering.html#method-i-render_to_string&#34;&gt;&lt;code&gt;render_to_string&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;html = MyController.new.render_to_string({&#xA;  template: &#39;controller/view&#39;,&#xA;  layout: &#39;my_layout&#39;,&#xA;  locals: { :@instance_var =&amp;gt; ... }&#xA;})&#xA;pdf = Grover.new(html, **grover_options).to_pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Relative paths&lt;/h3&gt; &#xA;&lt;p&gt;If calling Grover directly (not through middleware) you will need to either specify a &lt;code&gt;display_url&lt;/code&gt; or modify your HTML by converting any relative paths to absolute paths before passing to Grover.&lt;/p&gt; &#xA;&lt;p&gt;This can be achieved using the HTML pre-processor helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;absolute_html = Grover::HTMLPreprocessor.process relative_html, &#39;http://my.server/&#39;, &#39;http&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is important because Chromium will try and resolve any relative paths via the display url host. If not provided, the display URL defaults to &lt;code&gt;http://example.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Why would you pre-process the HTML rather than just use the &lt;code&gt;display_url&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;There are many scenarios where specifying a different host of relative paths would be preferred. For example, your server might be behind a NAT gateway and the display URL in front of it. The display URL might be shown in the header/footer, and as such shouldn&#39;t expose details of your private network.&lt;/p&gt; &#xA;&lt;p&gt;If you run into trouble, take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/Studiosity/grover/main/#debugging&#34;&gt;debugging&lt;/a&gt; section below which would allow you to inspect the page content and devtools.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Grover can be configured to adjust the layout of the resulting PDF/image.&lt;/p&gt; &#xA;&lt;p&gt;For available PDF options, see &lt;a href=&#34;https://github.com/puppeteer/puppeteer/raw/main/docs/api.md#pagepdfoptions&#34;&gt;https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagepdfoptions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also available are the &lt;code&gt;emulate_media&lt;/code&gt;, &lt;code&gt;cache&lt;/code&gt;, &lt;code&gt;viewport&lt;/code&gt;, &lt;code&gt;timeout&lt;/code&gt;, &lt;code&gt;requestTimeout&lt;/code&gt;, &lt;code&gt;convertTimeout&lt;/code&gt; and &lt;code&gt;launch_args&lt;/code&gt; options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/grover.rb&#xA;Grover.configure do |config|&#xA;  config.options = {&#xA;    format: &#39;A4&#39;,&#xA;    margin: {&#xA;      top: &#39;5px&#39;,&#xA;      bottom: &#39;10cm&#39;&#xA;    },&#xA;    user_agent: &#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0&#39;,&#xA;    viewport: {&#xA;      width: 640,&#xA;      height: 480&#xA;    },&#xA;    prefer_css_page_size: true,&#xA;    emulate_media: &#39;screen&#39;,&#xA;    bypass_csp: true,&#xA;    media_features: [{ name: &#39;prefers-color-scheme&#39;, value: &#39;dark&#39; }],&#xA;    timezone: &#39;Australia/Sydney&#39;,&#xA;    vision_deficiency: &#39;deuteranopia&#39;,&#xA;    extra_http_headers: { &#39;Accept-Language&#39;: &#39;en-US&#39; },&#xA;    geolocation: { latitude: 59.95, longitude: 30.31667 },&#xA;    focus: &#39;#some-element&#39;,&#xA;    hover: &#39;#another-element&#39;,&#xA;    cache: false,&#xA;    timeout: 0, # Timeout in ms. A value of `0` means &#39;no timeout&#39;&#xA;    request_timeout: 1000, # Timeout when fetching the content (overloads the `timeout` option)&#xA;    convert_timeout: 2000, # Timeout when converting the content (overloads the `timeout` option, only applies to PDF conversion)&#xA;    launch_args: [&#39;--font-render-hinting=medium&#39;],&#xA;    wait_until: &#39;domcontentloaded&#39;&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For available PNG/JPEG options, see &lt;a href=&#34;https://github.com/puppeteer/puppeteer/raw/main/docs/api.md#pagescreenshotoptions&#34;&gt;https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagescreenshotoptions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that by default the &lt;code&gt;full_page&lt;/code&gt; option is set to false and you will get a 800x600 image. You can either specify the image size using the &lt;code&gt;clip&lt;/code&gt; options, or capture the entire page with &lt;code&gt;full_page&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;viewport&lt;/code&gt; options, see &lt;a href=&#34;https://github.com/puppeteer/puppeteer/raw/main/docs/api.md#pagesetviewportviewport&#34;&gt;https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagesetviewportviewport&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;launch_args&lt;/code&gt; options, see &lt;a href=&#34;http://peter.sh/experiments/chromium-command-line-switches/&#34;&gt;http://peter.sh/experiments/chromium-command-line-switches/&lt;/a&gt; Launch parameter args can also be provided using a meta tag:&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;timezone&lt;/code&gt; IDs see &lt;a href=&#34;https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1&#34;&gt;ICUs metaZones.txt&lt;/a&gt;. Passing &lt;code&gt;nil&lt;/code&gt; disables timezone emulation.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;vision_deficiency&lt;/code&gt; option can be passed one of &lt;code&gt;achromatopsia&lt;/code&gt;, &lt;code&gt;deuteranopia&lt;/code&gt;, &lt;code&gt;protanopia&lt;/code&gt;, &lt;code&gt;tritanopia&lt;/code&gt;, &lt;code&gt;blurredVision&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;focus&lt;/code&gt; option takes a CSS selector and will focus on the first matching element after rendering is complete (including waiting for the specified &lt;code&gt;wait_for_selector&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;hover&lt;/code&gt; option takes a CSS selector and will hover on the first matching element after rendering is complete (including waiting for the specified &lt;code&gt;wait_for_selector&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta name=&#34;grover-launch_args&#34; content=&#34;[&#39;--disable-speech-api&#39;]&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;wait_until&lt;/code&gt; option, default for URLs is &lt;code&gt;networkidle2&lt;/code&gt; and for HTML content &lt;code&gt;networkidle0&lt;/code&gt;. For available options see &lt;a href=&#34;https://github.com/puppeteer/puppeteer/raw/main/docs/api.md#pagegotourl-options&#34;&gt;https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagegotourl-options&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;wait_for_selector&lt;/code&gt; option can also be used to wait until an element appears on the page. Additional waiting parameters can be set with the &lt;code&gt;wait_for_selector_options&lt;/code&gt; options hash. For available options, see: &lt;a href=&#34;https://github.com/puppeteer/puppeteer/raw/main/docs/api.md#pagewaitforselectorselector-options&#34;&gt;https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitforselectorselector-options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;wait_for_function&lt;/code&gt; option can be used to wait until a specific function returns a truthy value. Additional parameters can be set with the &lt;code&gt;wait_for_function_options&lt;/code&gt; options hash. For available options, see: &lt;a href=&#34;https://github.com/puppeteer/puppeteer/raw/main/docs/api.md#pagewaitforfunctionpagefunction-options-args&#34;&gt;https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitforfunctionpagefunction-options-args&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;wait_for_timeout&lt;/code&gt; option can also be used to wait the specified number of milliseconds have elapsed.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;raise_on_request_failure&lt;/code&gt; option, when enabled, will raise a &lt;code&gt;Grover::JavaScript::RequestFailedError&lt;/code&gt; if the initial content request or any subsequent asset request returns a bad response or times out.&lt;/p&gt; &#xA;&lt;p&gt;The Chrome/Chromium executable path can be overridden with the &lt;code&gt;executable_path&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;Javascript can be executed on the page (after render and before conversion to PDF/image) with the &lt;code&gt;execute_script&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;Basic authentication&lt;/h4&gt; &#xA;&lt;p&gt;For requesting a page with basic authentication, &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; options can be provided. Note that this only really makes sense if you&#39;re calling Grover directly (and not via middleware).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Grover.new(&#39;&amp;lt;some URI with basic authentication&#39;, username: &#39;the username&#39;, password: &#39;super secret&#39;).to_pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adding cookies&lt;/h4&gt; &#xA;&lt;p&gt;To set request cookies when requesting a URL, pass an array of hashes as such &lt;em&gt;N.B.&lt;/em&gt; Only the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; properties are required. See &lt;a href=&#34;https://github.com/puppeteer/puppeteer/raw/main/docs/api.md#pagesetcookiecookies&#34;&gt;page.setCookies&lt;/a&gt; documentation for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;myCookies = [&#xA;  { name: &#39;sign_username&#39;, value: &#39;any@any.com&#39;, domain: &#39;mydomain&#39; },&#xA;  { name: &#39;_session_id&#39;, value: &#39;9c014df0b699d8dc08d1c472f8cc594c&#39;, domain: &#39;mydomain&#39; }&#xA;]&#xA;Grover.new(&#39;&amp;lt;some URI with cookies&#39;, cookies: myCookies).to_pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to forward the cookies from the original request, you could extract them as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def header_cookies&#xA;  request.headers[&#39;Cookie&#39;].split(&#39;; &#39;).map do |cookie|&#xA;    key, value = cookie.split &#39;=&#39;&#xA;    { name: key, value: value, domain: request.headers[&#39;Host&#39;] }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And give that array to Grover:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Grover.new(&#39;&amp;lt;some URI with cookies&#39;, cookies: header_cookies).to_pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adding style tags&lt;/h4&gt; &#xA;&lt;p&gt;To add style tags, pass an array of style tag options as such See &lt;a href=&#34;https://github.com/puppeteer/puppeteer/raw/main/docs/api.md#pageaddstyletagoptions&#34;&gt;page.addStyleTag&lt;/a&gt; documentation for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;style_tag_options = [&#xA;  { url: &#39;http://example.com/style.css&#39; },&#xA;  { path: &#39;style.css&#39; },&#xA;  { content: &#39;.body{background: red}&#39; }&#xA;]&#xA;Grover.new(&#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Heading&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;, style_tag_options: style_tag_options).to_pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adding script tags&lt;/h4&gt; &#xA;&lt;p&gt;To add script tags, pass an array of script tag options as such See &lt;a href=&#34;https://github.com/puppeteer/puppeteer/raw/main/docs/api.md#pageaddscripttagoptions&#34;&gt;page.addScriptTag&lt;/a&gt; documentation for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;script_tag_options = [&#xA;  { url: &#39;http://example.com/script.js&#39; },&#xA;  { path: &#39;script.js&#39; },&#xA;  { content: &#39;document.querySelector(&#34;h1&#34;).style.display = &#34;none&#34;&#39; }&#xA;]&#xA;Grover.new(&#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Heading&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;, script_tag_options: script_tag_options).to_pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Page URL for middleware requests (or passing through raw HTML)&lt;/h4&gt; &#xA;&lt;p&gt;If you want to have the header or footer display the page URL, Grover requires that this is passed through via the &lt;code&gt;display_url&lt;/code&gt; option. This is because the page URL is not available in the raw HTML!&lt;/p&gt; &#xA;&lt;p&gt;For Rack middleware conversions, the original request URL (without the .pdf extension) will be passed through and assigned to &lt;code&gt;display_url&lt;/code&gt; for you. You can of course override this by using a meta tag in the downstream HTML response.&lt;/p&gt; &#xA;&lt;p&gt;For raw HTML conversions, if the &lt;code&gt;display_url&lt;/code&gt; is not provided &lt;code&gt;http://example.com&lt;/code&gt; will be used as the default.&lt;/p&gt; &#xA;&lt;h4&gt;Header and footer templates&lt;/h4&gt; &#xA;&lt;p&gt;Should be valid HTML markup with following classes used to inject printing values into them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;date&lt;/code&gt; formatted print date&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;title&lt;/code&gt; document title&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt; document location&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pageNumber&lt;/code&gt; current page number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;totalPages&lt;/code&gt; total pages in the document&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Middleware&lt;/h2&gt; &#xA;&lt;p&gt;Grover comes with a middleware that allows users to get a PDF, PNG or JPEG view of any page on your site by appending .pdf, .png or .jpeg/.jpg to the URL.&lt;/p&gt; &#xA;&lt;h3&gt;Middleware Setup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Non-Rails Rack apps&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in config.ru&#xA;require &#39;grover&#39;&#xA;use Grover::Middleware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rails apps&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in application.rb&#xA;require &#39;grover&#39;&#xA;config.middleware.use Grover::Middleware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;N.B. by default PNG and JPEG are not modified in the middleware to prevent breaking standard behaviours. To enable them, there are configuration options for each image type as well as an option to disable the PDF middleware (on by default).&lt;/p&gt; &#xA;&lt;p&gt;If either of the image handling middleware options are enabled, the &lt;a href=&#34;https://raw.githubusercontent.com/Studiosity/grover/main/#ignore_path&#34;&gt;ignore_path&lt;/a&gt; and/or &lt;a href=&#34;https://raw.githubusercontent.com/Studiosity/grover/main/#ignore_request&#34;&gt;ignore_request&lt;/a&gt; should also be configured, otherwise assets are likely to be handled which would likely result in 404 responses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/grover.rb&#xA;Grover.configure do |config|&#xA;  config.use_png_middleware = true&#xA;  config.use_jpeg_middleware = true&#xA;  config.use_pdf_middleware = false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;root_url&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;root_url&lt;/code&gt; option can be specified either when configuring the middleware or as a global option. This is needed when running the Grover middleware behind a URL rewriting proxy or within a containerised system.&lt;/p&gt; &#xA;&lt;p&gt;As a middleware option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in application.rb&#xA;require &#39;grover&#39;&#xA;config.middleware.use Grover::Middleware, root_url: &#39;https://my.external.domain&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or as a global option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/grover.rb&#xA;Grover.configure do |config|&#xA;  config.root_url = &#39;https://my.external.domain&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ignore_path&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;ignore_path&lt;/code&gt; configuration option can be used to tell Grover&#39;s middleware whether it should handle/modify the response. There are three ways to set up the &lt;code&gt;ignore_path&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;code&gt;String&lt;/code&gt; which matches the start of the request path.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;code&gt;Regexp&lt;/code&gt; which could match any part of the request path.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;code&gt;Proc&lt;/code&gt; which accepts the request path as a parameter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/grover.rb&#xA;Grover.configure do |config|&#xA;  # assigning a String&#xA;  config.ignore_path = &#39;/assets/&#39;&#xA;  # matches `www.example.com/assets/foo.png` and not `www.example.com/bar/assets/foo.png`&#xA;&#xA;  # assigning a Regexp&#xA;  config.ignore_path = /my\/path/&#xA;  # matches `www.example.com/foo/my/path/bar.png`&#xA;&#xA;  # assigning a Proc&#xA;  config.ignore_path = -&amp;gt;(path) do&#xA;    /\A\/foo\/.+\/[0-9]+\.png\z/.match path&#xA;  end&#xA;  # matches `www.example.com/foo/bar/123.png`&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ignore_request&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;ignore_request&lt;/code&gt; configuration option can be used to tell Grover&#39;s middleware whether it should handle/modify the response. It should be set with a &lt;code&gt;Proc&lt;/code&gt; which accepts the request (Rack::Request) as a parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/grover.rb&#xA;Grover.configure do |config|&#xA;  # assigning a Proc&#xA;  config.ignore_request = -&amp;gt;(req) do&#xA;    req.host == &#39;www.example.com&#39;&#xA;  end&#xA;  # matches `www.example.com/foo/bar/123.png`&#xA;&#xA;  config.ignore_request = -&amp;gt;(req) do&#xA;    req.has_header?(&#39;X-BLOCK&#39;)&#xA;  end&#xA;  # matches `HTTP Header X-BLOCK`&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cover pages&lt;/h2&gt; &#xA;&lt;p&gt;Since the header/footer for Puppeteer is configured globally, displaying of front/back cover pages (with potentially different headers/footers etc) is not possible.&lt;/p&gt; &#xA;&lt;p&gt;To get around this, Grover&#39;s middleware allows you to specify relative paths for the cover page contents. For direct execution, you can make multiple calls and combine the resulting PDFs together.&lt;/p&gt; &#xA;&lt;h3&gt;Using middleware&lt;/h3&gt; &#xA;&lt;p&gt;You can specify relative paths to the cover page contents using the &lt;code&gt;front_cover_path&lt;/code&gt; and &lt;code&gt;back_cover_path&lt;/code&gt; options either via the global configuration, or via meta tags. These paths (with query parameters) are then requested from the downstream app.&lt;/p&gt; &#xA;&lt;p&gt;The cover pages are converted to PDF in isolation, and then combined together with the original PDF response, before being returned back up through the Rack stack.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;N.B&lt;/em&gt; To simplify things, the same request method and body are used for the cover page requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/grover.rb&#xA;Grover.configure do |config|&#xA;  config.options = {&#xA;    front_cover_path: &#39;/some/global/cover/page?foo=bar&#39;&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via the meta tags in the original response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;meta name=&#34;grover-back_cover_path&#34; content=&#34;/back/cover/page?bar=baz&#34; /&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  ...&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Direct execution&lt;/h3&gt; &#xA;&lt;p&gt;To add a cover page using direct execution, you can make multiple calls and combine the results using the &lt;code&gt;combine_pdf&lt;/code&gt; gem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;require &#39;combine_pdf&#39;&#xA;&#xA;  # ...&#xA;&#xA;  def invoke(file_path)&#xA;    pdf = CombinePDF.parse(Grover.new(pdf_report_url).to_pdf)&#xA;    pdf &amp;gt;&amp;gt; CombinePDF.parse(Grover.new(pdf_front_cover_url).to_pdf)&#xA;    pdf &amp;lt;&amp;lt; CombinePDF.parse(Grover.new(pdf_back_cover_url).to_pdf)&#xA;    pdf.save file_path&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running on Heroku&lt;/h2&gt; &#xA;&lt;p&gt;To run Grover (Puppeteer) on Heroku follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;node&lt;/code&gt; buildpack. Puppeteer requires a node environment to run.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;heroku buildpacks:add heroku/nodejs --index=1 [--remote yourappname]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;a href=&#34;https://elements.heroku.com/buildpacks/jontewks/puppeteer-heroku-buildpack&#34;&gt;&lt;code&gt;puppeteer&lt;/code&gt; buildpack&lt;/a&gt;. Make sure the &lt;code&gt;puppeteer&lt;/code&gt; buildpack runs after the &lt;code&gt;node&lt;/code&gt; buildpack and before the main &lt;code&gt;ruby&lt;/code&gt; buildpack.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;heroku buildpacks:add jontewks/puppeteer --index=2 [--remote yourappname]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Next, tell Grover to run Puppeteer in the &#34;no-sandbox&#34; mode by setting an ENV variable &lt;code&gt;GROVER_NO_SANDBOX=true&lt;/code&gt; on your app dyno. Make sure that you trust all the HTML/JS you provide to Grover.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;heroku config:set GROVER_NO_SANDBOX=true [--remote yourappname]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re having trouble with converting the HTML content, you can enable some debugging options to help. These can be enabled as global options via &lt;code&gt;Grover.configure&lt;/code&gt;, by passing through to the Grover initializer, or using meta tag options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;debug: {&#xA;  headless: false,  # Default true. When set to false, the Chromium browser will be displayed&#xA;  devtools: true    # Default false. When set to true, the browser devtools will be displayed.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;N.B.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The headless option disabled is not compatible with exporting of the PDF.&lt;/li&gt; &#xA; &lt;li&gt;If showing the devtools, the browser will halt resulting in a navigation timeout&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/Studiosity/grover&#34;&gt;https://github.com/Studiosity/grover&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that spec tests are appreciated to minimise regressions. Before submitting a PR, please ensure that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rubocop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;both succeed&lt;/p&gt; &#xA;&lt;h2&gt;Special mention&lt;/h2&gt; &#xA;&lt;p&gt;Thanks are given to the great work done in the &lt;a href=&#34;https://github.com/pdfkit/pdfkit&#34;&gt;PDFKit project&lt;/a&gt;. The middleware and HTML preprocessing components were used heavily in the implementation of Grover.&lt;/p&gt; &#xA;&lt;p&gt;Thanks are also given to the excellent &lt;a href=&#34;https://github.com/Shopify/schmooze&#34;&gt;Schmooze project&lt;/a&gt;. The Ruby to NodeJS interface in Grover is heavily based off that work. Grover previously used that gem, however migrated away due to differing requirements over persistence/cleanup of the NodeJS worker process.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>minitest/minitest</title>
    <updated>2022-08-07T01:32:33Z</updated>
    <id>tag:github.com,2022-08-07:/minitest/minitest</id>
    <link href="https://github.com/minitest/minitest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;minitest provides a complete suite of testing facilities supporting TDD, BDD, mocking, and benchmarking.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;= minitest/{test,spec,mock,benchmark}&lt;/p&gt; &#xA;&lt;p&gt;home :: &lt;a href=&#34;https://github.com/seattlerb/minitest&#34;&gt;https://github.com/seattlerb/minitest&lt;/a&gt; bugs :: &lt;a href=&#34;https://github.com/seattlerb/minitest/issues&#34;&gt;https://github.com/seattlerb/minitest/issues&lt;/a&gt; rdoc :: &lt;a href=&#34;https://docs.seattlerb.org/minitest&#34;&gt;https://docs.seattlerb.org/minitest&lt;/a&gt; vim :: &lt;a href=&#34;https://github.com/sunaku/vim-ruby-minitest&#34;&gt;https://github.com/sunaku/vim-ruby-minitest&lt;/a&gt; emacs:: &lt;a href=&#34;https://github.com/arthurnn/minitest-emacs&#34;&gt;https://github.com/arthurnn/minitest-emacs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;== DESCRIPTION:&lt;/p&gt; &#xA;&lt;p&gt;minitest provides a complete suite of testing facilities supporting TDD, BDD, mocking, and benchmarking.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;I had a class with Jim Weirich on testing last week and we were&#xA; allowed to choose our testing frameworks. Kirk Haines and I were&#xA; paired up and we cracked open the code for a few test&#xA; frameworks...&#xA;&#xA; I MUST say that minitest is *very* readable / understandable&#xA; compared to the &#39;other two&#39; options we looked at. Nicely done and&#xA; thank you for helping us keep our mental sanity.&#34;&#xA;&#xA;-- Wayne E. Seguin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;minitest/test is a small and incredibly fast unit testing framework. It provides a rich set of assertions to make your tests clean and readable.&lt;/p&gt; &#xA;&lt;p&gt;minitest/spec is a functionally complete spec engine. It hooks onto minitest/test and seamlessly bridges test assertions over to spec expectations.&lt;/p&gt; &#xA;&lt;p&gt;minitest/benchmark is an awesome way to assert the performance of your algorithms in a repeatable manner. Now you can assert that your newb co-worker doesn&#39;t replace your linear algorithm with an exponential one!&lt;/p&gt; &#xA;&lt;p&gt;minitest/mock by Steven Baker, is a beautifully tiny mock (and stub) object framework.&lt;/p&gt; &#xA;&lt;p&gt;minitest/pride shows pride in testing and adds coloring to your test output. I guess it is an example of how to write IO pipes too. :P&lt;/p&gt; &#xA;&lt;p&gt;minitest/test is meant to have a clean implementation for language implementors that need a minimal set of methods to bootstrap a working test suite. For example, there is no magic involved for test-case discovery.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;Again, I can&#39;t praise enough the idea of a testing/specing&#xA; framework that I can actually read in full in one sitting!&#34;&#xA;&#xA;-- Piotr Szotkowski&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Comparing to rspec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rspec is a testing DSL. minitest is ruby.&#xA;&#xA;-- Adam Hawkins, &#34;Bow Before MiniTest&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;minitest doesn&#39;t reinvent anything that ruby already provides, like: classes, modules, inheritance, methods. This means you only have to learn ruby to use minitest and all of your regular OO practices like extract-method refactorings still apply.&lt;/p&gt; &#xA;&lt;p&gt;== FEATURES/PROBLEMS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;minitest/autorun - the easy and explicit way to run all your tests.&lt;/li&gt; &#xA; &lt;li&gt;minitest/test - a very fast, simple, and clean test system.&lt;/li&gt; &#xA; &lt;li&gt;minitest/spec - a very fast, simple, and clean spec system.&lt;/li&gt; &#xA; &lt;li&gt;minitest/mock - a simple and clean mock/stub system.&lt;/li&gt; &#xA; &lt;li&gt;minitest/benchmark - an awesome way to assert your algorithm&#39;s performance.&lt;/li&gt; &#xA; &lt;li&gt;minitest/pride - show your pride in testing!&lt;/li&gt; &#xA; &lt;li&gt;minitest/test_task - a full-featured and clean rake task generator.&lt;/li&gt; &#xA; &lt;li&gt;Incredibly small and fast runner, but no bells and whistles.&lt;/li&gt; &#xA; &lt;li&gt;Written by squishy human beings. Software can never be perfect. We will all eventually die.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== RATIONALE:&lt;/p&gt; &#xA;&lt;p&gt;See design_rationale.rb to see how specs and tests work in minitest.&lt;/p&gt; &#xA;&lt;p&gt;== SYNOPSIS:&lt;/p&gt; &#xA;&lt;p&gt;Given that you&#39;d like to test the following class:&lt;/p&gt; &#xA;&lt;p&gt;class Meme def i_can_has_cheezburger? &#34;OHAI!&#34; end&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;def will_it_blend?&#xA;  &#34;YES!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;end&lt;/p&gt; &#xA;&lt;p&gt;=== Unit tests&lt;/p&gt; &#xA;&lt;p&gt;Define your tests as methods beginning with +test_+.&lt;/p&gt; &#xA;&lt;p&gt;require &#34;minitest/autorun&#34;&lt;/p&gt; &#xA;&lt;p&gt;class TestMeme &amp;lt; Minitest::Test def setup @meme = Meme.new end&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;def test_that_kitty_can_eat&#xA;  assert_equal &#34;OHAI!&#34;, @meme.i_can_has_cheezburger?&#xA;end&#xA;&#xA;def test_that_it_will_not_blend&#xA;  refute_match /^no/i, @meme.will_it_blend?&#xA;end&#xA;&#xA;def test_that_will_be_skipped&#xA;  skip &#34;test this later&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;end&lt;/p&gt; &#xA;&lt;p&gt;=== Specs&lt;/p&gt; &#xA;&lt;p&gt;require &#34;minitest/autorun&#34;&lt;/p&gt; &#xA;&lt;p&gt;describe Meme do before do @meme = Meme.new end&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;describe &#34;when asked about cheeseburgers&#34; do&#xA;  it &#34;must respond positively&#34; do&#xA;    _(@meme.i_can_has_cheezburger?).must_equal &#34;OHAI!&#34;&#xA;  end&#xA;end&#xA;&#xA;describe &#34;when asked about blending possibilities&#34; do&#xA;  it &#34;won&#39;t say no&#34; do&#xA;    _(@meme.will_it_blend?).wont_match /^no/i&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;end&lt;/p&gt; &#xA;&lt;p&gt;For matchers support check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wojtekmach/minitest-matchers&#34;&gt;https://github.com/wojtekmach/minitest-matchers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rmm5t/minitest-matchers_vaccine&#34;&gt;https://github.com/rmm5t/minitest-matchers_vaccine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=== Benchmarks&lt;/p&gt; &#xA;&lt;p&gt;Add benchmarks to your tests.&lt;/p&gt; &#xA;&lt;h1&gt;optionally run benchmarks, good for CI-only work!&lt;/h1&gt; &#xA;&lt;p&gt;require &#34;minitest/benchmark&#34; if ENV[&#34;BENCH&#34;]&lt;/p&gt; &#xA;&lt;p&gt;class TestMeme &amp;lt; Minitest::Benchmark # Override self.bench_range or default range is [1, 10, 100, 1_000, 10_000] def bench_my_algorithm assert_performance_linear 0.9999 do |n| # n is a range value @obj.my_algorithm(n) end end end&lt;/p&gt; &#xA;&lt;p&gt;Or add them to your specs. If you make benchmarks optional, you&#39;ll need to wrap your benchmarks in a conditional since the methods won&#39;t be defined. In minitest 5, the describe name needs to match &lt;tt&gt;/Bench(mark)?$/&lt;/tt&gt;.&lt;/p&gt; &#xA;&lt;p&gt;describe &#34;Meme Benchmark&#34; do if ENV[&#34;BENCH&#34;] then bench_performance_linear &#34;my_algorithm&#34;, 0.9999 do |n| 100.times do @obj.my_algorithm(n) end end end end&lt;/p&gt; &#xA;&lt;p&gt;outputs something like:&lt;/p&gt; &#xA;&lt;h1&gt;Running benchmarks:&lt;/h1&gt; &#xA;&lt;p&gt;TestBlah 100 1000 10000 bench_my_algorithm 0.006167 0.079279 0.786993 bench_other_algorithm 0.061679 0.792797 7.869932&lt;/p&gt; &#xA;&lt;p&gt;Output is tab-delimited to make it easy to paste into a spreadsheet.&lt;/p&gt; &#xA;&lt;p&gt;=== Mocks&lt;/p&gt; &#xA;&lt;p&gt;Mocks and stubs defined using terminology by Fowler &amp;amp; Meszaros at &lt;a href=&#34;https://www.martinfowler.com/bliki/TestDouble.html&#34;&gt;https://www.martinfowler.com/bliki/TestDouble.html&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&#34;Mocks are pre-programmed with expectations which form a specification of the calls they are expected to receive. They can throw an exception if they receive a call they don&#39;t expect and are checked during verification to ensure they got all the calls they were expecting.&#34;&lt;/p&gt; &#xA;&lt;p&gt;class MemeAsker def initialize(meme) @meme = meme end&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;def ask(question)&#xA;  method = question.tr(&#34; &#34;, &#34;_&#34;) + &#34;?&#34;&#xA;  @meme.__send__(method)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;end&lt;/p&gt; &#xA;&lt;p&gt;require &#34;minitest/autorun&#34;&lt;/p&gt; &#xA;&lt;p&gt;describe MemeAsker, :ask do describe &#34;when passed an unpunctuated question&#34; do it &#34;should invoke the appropriate predicate method on the meme&#34; do @meme = Minitest::Mock.new @meme_asker = MemeAsker.new @meme @meme.expect :will_it_blend?, :return_value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    @meme_asker.ask &#34;will it blend&#34;&#xA;&#xA;    @meme.verify&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;end&lt;/p&gt; &#xA;&lt;p&gt;==== Multi-threading and Mocks&lt;/p&gt; &#xA;&lt;p&gt;Minitest mocks do not support multi-threading. If it works, fine, if it doesn&#39;t you can use regular ruby patterns and facilities like local variables. Here&#39;s an example of asserting that code inside a thread is run:&lt;/p&gt; &#xA;&lt;p&gt;def test_called_inside_thread called = false pr = Proc.new { called = true } thread = Thread.new(&amp;amp;pr) thread.join assert called, &#34;proc not called&#34; end&lt;/p&gt; &#xA;&lt;p&gt;=== Stubs&lt;/p&gt; &#xA;&lt;p&gt;Mocks and stubs are defined using terminology by Fowler &amp;amp; Meszaros at &lt;a href=&#34;https://www.martinfowler.com/bliki/TestDouble.html&#34;&gt;https://www.martinfowler.com/bliki/TestDouble.html&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&#34;Stubs provide canned answers to calls made during the test&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Minitest&#39;s stub method overrides a single method for the duration of the block.&lt;/p&gt; &#xA;&lt;p&gt;def test_stale_eh obj_under_test = Something.new&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;refute obj_under_test.stale?&#xA;&#xA;Time.stub :now, Time.at(0) do   # stub goes away once the block is done&#xA;  assert obj_under_test.stale?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;end&lt;/p&gt; &#xA;&lt;p&gt;A note on stubbing: In order to stub a method, the method must actually exist prior to stubbing. Use a singleton method to create a new non-existing method:&lt;/p&gt; &#xA;&lt;p&gt;def obj_under_test.fake_method ... end&lt;/p&gt; &#xA;&lt;p&gt;=== Running Your Tests&lt;/p&gt; &#xA;&lt;p&gt;Ideally, you&#39;ll use a rake task to run your tests (see below), either piecemeal or all at once. BUT! You don&#39;t have to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ruby -Ilib:test test/minitest/test_minitest_test.rb&#xA;Run options: --seed 37685&#xA;&#xA;# Running:&#xA;&#xA;...................................................................... (etc)&#xA;&#xA;Finished in 0.107130s, 1446.8403 runs/s, 2959.0217 assertions/s.&#xA;&#xA;155 runs, 317 assertions, 0 failures, 0 errors, 0 skips&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are runtime options available, both from minitest itself, and also provided via plugins. To see them, simply run with +--help+:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ruby -Ilib:test test/minitest/test_minitest_test.rb --help&#xA;minitest options:&#xA;    -h, --help                       Display this help.&#xA;    -s, --seed SEED                  Sets random seed. Also via env. Eg: SEED=n rake&#xA;    -v, --verbose                    Verbose. Show progress processing files.&#xA;    -n, --name PATTERN               Filter run on /regexp/ or string.&#xA;    -e, --exclude PATTERN            Exclude /regexp/ or string from run.&#xA;&#xA;Known extensions: pride, autotest&#xA;    -p, --pride                      Pride. Show your testing pride!&#xA;    -a, --autotest                   Connect to autotest server.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=== Rake Tasks&lt;/p&gt; &#xA;&lt;p&gt;You can set up a rake task to run all your tests by adding this to your Rakefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require &#34;minitest/test_task&#34;&#xA;&#xA;Minitest::TestTask.create # named test, sensible defaults&#xA;&#xA;# or more explicitly:&#xA;&#xA;Minitest::TestTask.create(:test) do |t|&#xA;  t.libs &amp;lt;&amp;lt; &#34;test&#34;&#xA;  t.libs &amp;lt;&amp;lt; &#34;lib&#34;&#xA;  t.warning = false&#xA;  t.test_globs = [&#34;test/**/*_test.rb&#34;]&#xA;end&#xA;&#xA;task :default =&amp;gt; :test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each of these will generate 4 tasks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake test          :: Run the test suite.&#xA;rake test:cmd      :: Print out the test command.&#xA;rake test:isolated :: Show which test files fail when run separately.&#xA;rake test:slow     :: Show bottom 25 tests sorted by time.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=== Rake Task Variables&lt;/p&gt; &#xA;&lt;p&gt;There are a bunch of variables you can supply to rake to modify the run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MT_LIB_EXTRAS :: Extra libs to dynamically override/inject for custom runs.&#xA;N             :: -n: Tests to run (string or /regexp/).&#xA;X             :: -x: Tests to exclude (string or /regexp/).&#xA;A             :: Any extra arguments. Honors shell quoting.&#xA;MT_CPU        :: How many threads to use for parallel test runs&#xA;SEED          :: -s --seed Sets random seed.&#xA;TESTOPTS      :: Deprecated, same as A&#xA;FILTER        :: Deprecated, same as A&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;== Writing Extensions&lt;/p&gt; &#xA;&lt;p&gt;To define a plugin, add a file named minitest/XXX_plugin.rb to your project/gem. That file must be discoverable via ruby&#39;s LOAD_PATH (via rubygems or otherwise). Minitest will find and require that file using Gem.find_files. It will then try to call +plugin_XXX_init+ during startup. The option processor will also try to call +plugin_XXX_options+ passing the OptionParser instance and the current options hash. This lets you register your own command-line options. Here&#39;s a totally bogus example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# minitest/bogus_plugin.rb:&#xA;&#xA;module Minitest&#xA;  def self.plugin_bogus_options(opts, options)&#xA;    opts.on &#34;--myci&#34;, &#34;Report results to my CI&#34; do&#xA;      options[:myci] = true&#xA;      options[:myci_addr] = get_myci_addr&#xA;      options[:myci_port] = get_myci_port&#xA;    end&#xA;  end&#xA;&#xA;  def self.plugin_bogus_init(options)&#xA;    self.reporter &amp;lt;&amp;lt; MyCI.new(options) if options[:myci]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=== Adding custom reporters&lt;/p&gt; &#xA;&lt;p&gt;Minitest uses composite reporter to output test results using multiple reporter instances. You can add new reporters to the composite during the init_plugins phase. As we saw in +plugin_bogus_init+ above, you simply add your reporter instance to the composite via &lt;tt&gt;&amp;lt;&amp;lt;&lt;/tt&gt;.&lt;/p&gt; &#xA;&lt;p&gt;+AbstractReporter+ defines the API for reporters. You may subclass it and override any method you want to achieve your desired behavior.&lt;/p&gt; &#xA;&lt;p&gt;start :: Called when the run has started. record :: Called for each result, passed or otherwise. report :: Called at the end of the run. passed? :: Called to see if you detected any problems.&lt;/p&gt; &#xA;&lt;p&gt;Using our example above, here is how we might implement MyCI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# minitest/bogus_plugin.rb&#xA;&#xA;module Minitest&#xA;  class MyCI &amp;lt; AbstractReporter&#xA;    attr_accessor :results, :addr, :port&#xA;&#xA;    def initialize options&#xA;      self.results = []&#xA;      self.addr = options[:myci_addr]&#xA;      self.port = options[:myci_port]&#xA;    end&#xA;&#xA;    def record result&#xA;      self.results &amp;lt;&amp;lt; result&#xA;    end&#xA;&#xA;    def report&#xA;      CI.connect(addr, port).send_results self.results&#xA;    end&#xA;  end&#xA;&#xA;  # code from above...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;== FAQ&lt;/p&gt; &#xA;&lt;p&gt;=== What versions are compatible with what? Or what versions are supported?&lt;/p&gt; &#xA;&lt;p&gt;Minitest is a dependency of rails, which until fairly recently had an overzealous backwards compatibility policy. As such, I&#39;m stuck supporting versions of ruby that are long past EOL. Once rails 5.2 is dropped (hopefully April 2021), I get to drop a bunch of versions of ruby that I have to currently test against.&lt;/p&gt; &#xA;&lt;p&gt;(As of 2021-01-31)&lt;/p&gt; &#xA;&lt;p&gt;Current versions of rails: (&lt;a href=&#34;https://endoflife.date/rails&#34;&gt;https://endoflife.date/rails&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| rails | min ruby | rec ruby | minitest | status | |-------+----------+----------+----------+----------| | 7.0 | &amp;gt;= 2.7 | 3.0 | &amp;gt;= 5.1 | Future | | 6.1 | &amp;gt;= 2.5 | 3.0 | &amp;gt;= 5.1 | Current | | 6.0 | &amp;gt;= 2.5 | 2.6 | &amp;gt;= 5.1 | Security | | 5.2 | &amp;gt;= 2.2.2 | 2.5 | ~&amp;gt; 5.1 | Security | EOL @railsconf 2021?&lt;/p&gt; &#xA;&lt;p&gt;Current versions of ruby: (&lt;a href=&#34;https://endoflife.date/ruby&#34;&gt;https://endoflife.date/ruby&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| ruby | Status | EOL Date | |------+---------+------------| | 3.0 | Current | 2024-03-31 | | 2.7 | Maint | 2023-03-31 | | 2.6 | Maint* | 2022-03-31 | | 2.5 | EOL | 2021-03-31 | | 2.4 | EOL | 2020-03-31 | | 2.3 | EOL | 2019-03-31 | | 2.2 | EOL | 2018-03-31 |&lt;/p&gt; &#xA;&lt;p&gt;See also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fastruby.io/blog/ruby/rails/versions/compatibility-table.html&#34;&gt;https://www.fastruby.io/blog/ruby/rails/versions/compatibility-table.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jamesjeffersconsulting.com/ruby-rails-version-matrix/&#34;&gt;https://jamesjeffersconsulting.com/ruby-rails-version-matrix/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=== How to test SimpleDelegates?&lt;/p&gt; &#xA;&lt;p&gt;The following implementation and test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class Worker &amp;lt; SimpleDelegator&#xA;  def work&#xA;  end&#xA;end&#xA;&#xA;describe Worker do&#xA;  before do&#xA;    @worker = Worker.new(Object.new)&#xA;  end&#xA;&#xA;  it &#34;must respond to work&#34; do&#xA;    _(@worker).must_respond_to :work&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;outputs a failure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  1) Failure:&#xA;Worker#test_0001_must respond to work [bug11.rb:16]:&#xA;Expected #&amp;lt;Object:0x007f9e7184f0a0&amp;gt; (Object) to respond to #work.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Worker is a SimpleDelegate which in 1.9+ is a subclass of BasicObject. Expectations are put on Object (one level down) so the Worker (SimpleDelegate) hits +method_missing+ and delegates down to the +Object.new+ instance. That object doesn&#39;t respond to work so the test fails.&lt;/p&gt; &#xA;&lt;p&gt;You can bypass &lt;tt&gt;SimpleDelegate#method_missing&lt;/tt&gt; by extending the worker with &lt;tt&gt;Minitest::Expectations&lt;/tt&gt;. You can either do that in your setup at the instance level, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;before do&#xA;  @worker = Worker.new(Object.new)&#xA;  @worker.extend Minitest::Expectations&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can extend the Worker class (within the test file!), like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class Worker&#xA;  include ::Minitest::Expectations&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=== How to share code across test classes?&lt;/p&gt; &#xA;&lt;p&gt;Use a module. That&#39;s exactly what they&#39;re for:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;module UsefulStuff&#xA;  def useful_method&#xA;    # ...&#xA;  end&#xA;end&#xA;&#xA;describe Blah do&#xA;  include UsefulStuff&#xA;&#xA;  def test_whatever&#xA;    # useful_method available here&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember, +describe+ simply creates test classes. It&#39;s just ruby at the end of the day and all your normal Good Ruby Rules (tm) apply. If you want to extend your test using setup/teardown via a module, just make sure you ALWAYS call super. before/after automatically call super for you, so make sure you don&#39;t do it twice.&lt;/p&gt; &#xA;&lt;p&gt;=== How to run code before a group of tests?&lt;/p&gt; &#xA;&lt;p&gt;Use a constant with begin...end like this:&lt;/p&gt; &#xA;&lt;p&gt;describe Blah do SETUP = begin # ... this runs once when describe Blah starts end # ... end&lt;/p&gt; &#xA;&lt;p&gt;This can be useful for expensive initializations or sharing state. Remember, this is just ruby code, so you need to make sure this technique and sharing state doesn&#39;t interfere with your tests.&lt;/p&gt; &#xA;&lt;p&gt;=== Why am I seeing &lt;tt&gt;uninitialized constant MiniTest::Test (NameError)&lt;/tt&gt;?&lt;/p&gt; &#xA;&lt;p&gt;Are you running the test with Bundler (e.g. via &lt;tt&gt;bundle exec&lt;/tt&gt; )? If so, in order to require minitest, you must first add the &lt;tt&gt;gem &#39;minitest&#39;&lt;/tt&gt; to your Gemfile and run +bundle+. Once it&#39;s installed, you should be able to require minitest and run your tests.&lt;/p&gt; &#xA;&lt;p&gt;== Prominent Projects using Minitest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;arel&lt;/li&gt; &#xA; &lt;li&gt;journey&lt;/li&gt; &#xA; &lt;li&gt;mime-types&lt;/li&gt; &#xA; &lt;li&gt;nokogiri&lt;/li&gt; &#xA; &lt;li&gt;rails (active_support et al)&lt;/li&gt; &#xA; &lt;li&gt;rake&lt;/li&gt; &#xA; &lt;li&gt;rdoc&lt;/li&gt; &#xA; &lt;li&gt;...and of course, everything from seattle.rb...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Developing Minitest:&lt;/p&gt; &#xA;&lt;p&gt;Minitest requires {Hoe}[https://rubygems.org/gems/hoe].&lt;/p&gt; &#xA;&lt;p&gt;=== Minitest&#39;s own tests require UTF-8 external encoding.&lt;/p&gt; &#xA;&lt;p&gt;This is a common problem in Windows, where the default external Encoding is often CP850, but can affect any platform. Minitest can run test suites using any Encoding, but to run Minitest&#39;s own tests you must have a default external Encoding of UTF-8.&lt;/p&gt; &#xA;&lt;p&gt;If your encoding is wrong, you&#39;ll see errors like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--- expected&#xA;+++ actual&#xA;@@ -1,2 +1,3 @@&#xA; # encoding: UTF-8&#xA; -&#34;Expected /\\w+/ to not match \&#34;blah blah blah\&#34;.&#34;&#xA; +&#34;Expected /\\w+/ to not match # encoding: UTF-8&#xA; +\&#34;blah blah blah\&#34;.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check your current encoding, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ruby -e &#39;puts Encoding.default_external&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your output is something other than UTF-8, you can set the RUBYOPTS env variable to a value of &#39;-Eutf-8&#39;. Something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RUBYOPT=&#39;-Eutf-8&#39; ruby -e &#39;puts Encoding.default_external&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check your OS/shell documentation for the precise syntax (the above will not work on a basic Windows CMD prompt, look for the SET command). Once you&#39;ve got it successfully outputing UTF-8, use the same setting when running rake in Minitest.&lt;/p&gt; &#xA;&lt;p&gt;=== Minitest&#39;s own tests require GNU (or similar) diff.&lt;/p&gt; &#xA;&lt;p&gt;This is also a problem primarily affecting Windows developers. PowerShell has a command called diff, but it is not suitable for use with Minitest.&lt;/p&gt; &#xA;&lt;p&gt;If you see failures like either of these, you are probably missing diff tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  4) Failure:&#xA;TestMinitestUnitTestCase#test_assert_equal_different_long [D:/ruby/seattlerb/minitest/test/minitest/test_minitest_test.rb:936]:&#xA;Expected: &#34;--- expected\n+++ actual\n@@ -1 +1 @@\n-\&#34;hahahahahahahahahahahahahahahahahahahaha\&#34;\n+\&#34;blahblahblahblahblahblahblahblahblahblah\&#34;\n&#34;&#xA;  Actual: &#34;Expected: \&#34;hahahahahahahahahahahahahahahahahahahaha\&#34;\n  Actual: \&#34;blahblahblahblahblahblahblahblahblahblah\&#34;&#34;&#xA;&#xA;&#xA;  5) Failure:&#xA;TestMinitestUnitTestCase#test_assert_equal_different_collection_hash_hex_invisible [D:/ruby/seattlerb/minitest/test/minitest/test_minitest_test.rb:845]:&#xA;Expected: &#34;No visible difference in the Hash#inspect output.\nYou should look at the implementation of #== on Hash or its members.\n&#xA;{1=&amp;gt;#&amp;lt;Object:0xXXXXXX&amp;gt;}&#34;&#xA;  Actual: &#34;Expected: {1=&amp;gt;#&amp;lt;Object:0x00000003ba0470&amp;gt;}\n  Actual: {1=&amp;gt;#&amp;lt;Object:0x00000003ba0448&amp;gt;}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use Cygwin or MSYS2 or similar there are packages that include a GNU diff for Windows. If you don&#39;t, you can download GNU diffutils from &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/diffutils.htm&#34;&gt;http://gnuwin32.sourceforge.net/packages/diffutils.htm&lt;/a&gt; (make sure to add it to your PATH).&lt;/p&gt; &#xA;&lt;p&gt;You can make sure it&#39;s installed and path is configured properly with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;diff.exe -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are multiple lines of output, the first should be something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;diff (GNU diffutils) 2.8.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using PowerShell make sure you run diff.exe, not just diff, which will invoke the PowerShell built in function.&lt;/p&gt; &#xA;&lt;p&gt;== Known Extensions:&lt;/p&gt; &#xA;&lt;p&gt;capybara_minitest_spec :: Bridge between Capybara RSpec matchers and Minitest::Spec expectations (e.g. &lt;tt&gt;page.must_have_content(&#34;Title&#34;)&lt;/tt&gt;). color_pound_spec_reporter :: Test names print Ruby Object types in color with your Minitest Spec style tests. minispec-metadata :: Metadata for describe/it blocks &amp;amp; CLI tag filter. E.g. &lt;tt&gt;it &#34;requires JS driver&#34;, js: true do&lt;/tt&gt; &amp;amp; &lt;tt&gt;ruby test.rb --tag js&lt;/tt&gt; runs tests tagged :js. minispec-rails :: Minimal support to use Spec style in Rails 5+. mini-apivore :: for swagger based automated API testing. minitest-around :: Around block for minitest. An alternative to setup/teardown dance. minitest-assert_errors :: Adds Minitest assertions to test for errors raised or not raised by Minitest itself. minitest-autotest :: autotest is a continuous testing facility meant to be used during development. minitest-bacon :: minitest-bacon extends minitest with bacon-like functionality. minitest-bang :: Adds support for RSpec-style let! to immediately invoke let statements before each test. minitest-bisect :: Helps you isolate and debug random test failures. minitest-blink1_reporter :: Display test results with a Blink1. minitest-capistrano :: Assertions and expectations for testing Capistrano recipes. minitest-capybara :: Capybara matchers support for minitest unit and spec. minitest-chef-handler :: Run Minitest suites as Chef report handlers minitest-ci :: CI reporter plugin for Minitest. minitest-context :: Defines contexts for code reuse in Minitest specs that share common expectations. minitest-debugger :: Wraps assert so failed assertions drop into the ruby debugger. minitest-display :: Patches Minitest to allow for an easily configurable output. minitest-documentation :: Minimal documentation format inspired by rspec&#39;s. minitest-doc_reporter :: Detailed output inspired by rspec&#39;s documentation format. minitest-emoji :: Print out emoji for your test passes, fails, and skips. minitest-english :: Semantically symmetric aliases for assertions and expectations. minitest-excludes :: Clean API for excluding certain tests you don&#39;t want to run under certain conditions. minitest-fail-fast :: Reimplements RSpec&#39;s &#34;fail fast&#34; feature minitest-filecontent :: Support unit tests with expectation results in files. Differing results will be stored again in files. minitest-filesystem :: Adds assertion and expectation to help testing filesystem contents. minitest-firemock :: Makes your Minitest mocks more resilient. minitest-focus :: Focus on one test at a time. minitest-gcstats :: A minitest plugin that adds a report of the top tests by number of objects allocated. minitest-global_expectations:: Support minitest expectation methods for all objects minitest-great_expectations :: Generally useful additions to minitest&#39;s assertions and expectations. minitest-growl :: Test notifier for minitest via growl. minitest-happy :: GLOBALLY ACTIVATE MINITEST PRIDE! RAWR! minitest-have_tag :: Adds Minitest assertions to test for the existence of HTML tags, including contents, within a provided string. minitest-heat :: Reporting that builds a heat map of failure locations minitest-hooks :: Around and before_all/after_all/around_all hooks minitest-hyper :: Pretty, single-page HTML reports for your Minitest runs minitest-implicit-subject :: Implicit declaration of the test subject. minitest-instrument :: Instrument ActiveSupport::Notifications when test method is executed. minitest-instrument-db :: Store information about speed of test execution provided by minitest-instrument in database. minitest-junit :: JUnit-style XML reporter for minitest. minitest-keyword :: Use Minitest assertions with keyword arguments. minitest-libnotify :: Test notifier for minitest via libnotify. minitest-line :: Run test at line number. minitest-logger :: Define assert_log and enable minitest to test log messages. Supports Logger and Log4r::Logger. minitest-macruby :: Provides extensions to minitest for macruby UI testing. minitest-matchers :: Adds support for RSpec-style matchers to minitest. minitest-matchers_vaccine :: Adds assertions that adhere to the matcher spec, but without any expectation infections. minitest-metadata :: Annotate tests with metadata (key-value). minitest-mock_expectations :: Provides method call assertions for minitest. minitest-mongoid :: Mongoid assertion matchers for Minitest. minitest-must_not :: Provides must_not as an alias for wont in Minitest. minitest-optional_retry :: Automatically retry failed test to help with flakiness. minitest-osx :: Reporter for the Mac OS X notification center. minitest-parallel_fork :: Fork-based parallelization minitest-parallel-db :: Run tests in parallel with a single database. minitest-power_assert :: PowerAssert for Minitest. minitest-predicates :: Adds support for .predicate? methods. minitest-profile :: List the 10 slowest tests in your suite. minitest-rails :: Minitest integration for Rails 3.x. minitest-rails-capybara :: Capybara integration for Minitest::Rails. minitest-reporters :: Create customizable Minitest output formats. minitest-rg :: Colored red/green output for Minitest. minitest-rspec_mocks :: Use RSpec Mocks with Minitest. minitest-server :: minitest-server provides a client/server setup with your minitest process, allowing your test run to send its results directly to a handler. minitest-sequel :: Minitest assertions to speed-up development and testing of Ruby Sequel database setups. minitest-shared_description :: Support for shared specs and shared spec subclasses minitest-should_syntax :: RSpec-style &lt;tt&gt;x.should == y&lt;/tt&gt; assertions for Minitest. minitest-shouldify :: Adding all manner of shoulds to Minitest (bad idea) minitest-snail :: Print a list of tests that take too long minitest-spec-context :: Provides rspec-ish context method to Minitest::Spec. minitest-spec-expect :: Expect syntax for Minitest::Spec (e.g. expect(sequences).to_include :celery_man). minitest-spec-magic :: Minitest::Spec extensions for Rails and beyond. minitest-spec-rails :: Drop in Minitest::Spec superclass for ActiveSupport::TestCase. minitest-sprint :: Runs (Get it? It&#39;s fast!) your tests and makes it easier to rerun individual failures. minitest-stately :: Find leaking state between tests minitest-stub_any_instance :: Stub any instance of a method on the given class for the duration of a block. minitest-stub-const :: Stub constants for the duration of a block. minitest-tags :: Add tags for minitest. minitest-unordered :: Adds a new assertion to minitest for checking the contents of a collection, ignoring element order. minitest-vcr :: Automatic cassette managment with Minitest::Spec and VCR. minitest_log :: Adds structured logging, data explication, and verdicts. minitest_owrapper :: Get tests results as a TestResult object. minitest_should :: Shoulda style syntax for minitest test::unit. minitest_tu_shim :: Bridges between test/unit and minitest. mongoid-minitest :: Minitest matchers for Mongoid. mutant-minitest :: Minitest integration for mutant. pry-rescue :: A pry plugin w/ minitest support. See pry-rescue/minitest.rb. rematch :: Declutter your test files from large hardcoded data and update them automatically when your code changes. rspec2minitest :: Easily translate any RSpec matchers to Minitest assertions and expectations. stubberry :: Multiple stubbing &#39;berries&#39;, sweet and useful stub helpers and assertions. ( stub_must, assert_method_called, stubbing ORM objects by id )&lt;/p&gt; &#xA;&lt;p&gt;== Unknown Extensions:&lt;/p&gt; &#xA;&lt;p&gt;Authors... Please send me a pull request with a description of your minitest extension.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;assay-minitest&lt;/li&gt; &#xA; &lt;li&gt;detroit-minitest&lt;/li&gt; &#xA; &lt;li&gt;em-minitest-spec&lt;/li&gt; &#xA; &lt;li&gt;flexmock-minitest&lt;/li&gt; &#xA; &lt;li&gt;guard-minitest&lt;/li&gt; &#xA; &lt;li&gt;guard-minitest-decisiv&lt;/li&gt; &#xA; &lt;li&gt;minitest-activemodel&lt;/li&gt; &#xA; &lt;li&gt;minitest-ar-assertions&lt;/li&gt; &#xA; &lt;li&gt;minitest-capybara-unit&lt;/li&gt; &#xA; &lt;li&gt;minitest-colorer&lt;/li&gt; &#xA; &lt;li&gt;minitest-deluxe&lt;/li&gt; &#xA; &lt;li&gt;minitest-extra-assertions&lt;/li&gt; &#xA; &lt;li&gt;minitest-rails-shoulda&lt;/li&gt; &#xA; &lt;li&gt;minitest-spec&lt;/li&gt; &#xA; &lt;li&gt;minitest-spec-should&lt;/li&gt; &#xA; &lt;li&gt;minitest-sugar&lt;/li&gt; &#xA; &lt;li&gt;spork-minitest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Minitest related goods&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;minitest/pride fabric: &lt;a href=&#34;https://www.spoonflower.com/fabric/3928730-again-by-katie_allen&#34;&gt;https://www.spoonflower.com/fabric/3928730-again-by-katie_allen&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== REQUIREMENTS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 2.3+. No magic is involved. I hope.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== INSTALL:&lt;/p&gt; &#xA;&lt;p&gt;sudo gem install minitest&lt;/p&gt; &#xA;&lt;p&gt;On 1.9, you already have it. To get newer candy you can still install the gem, and then requiring &#34;minitest/autorun&#34; should automatically pull it in. If not, you&#39;ll need to do it yourself:&lt;/p&gt; &#xA;&lt;p&gt;gem &#34;minitest&#34; # ensures you&#34;re using the gem, and not the built-in MT require &#34;minitest/autorun&#34;&lt;/p&gt; &#xA;&lt;h1&gt;... usual testing stuffs ...&lt;/h1&gt; &#xA;&lt;p&gt;DO NOTE: There is a serious problem with the way that ruby 1.9/2.0 packages their own gems. They install a gem specification file, but don&#39;t install the gem contents in the gem path. This messes up Gem.find_files and many other things (gem which, gem contents, etc).&lt;/p&gt; &#xA;&lt;p&gt;Just install minitest as a gem for real and you&#39;ll be happier.&lt;/p&gt; &#xA;&lt;p&gt;== LICENSE:&lt;/p&gt; &#xA;&lt;p&gt;(The MIT License)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) Ryan Davis, seattle.rb&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#39;Software&#39;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#39;AS IS&#39;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>