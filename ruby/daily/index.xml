<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-05T01:36:49Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>memphis-cs/practice-apps-2023-08fall</title>
    <updated>2023-09-05T01:36:49Z</updated>
    <id>tag:github.com,2023-09-05:/memphis-cs/practice-apps-2023-08fall</id>
    <link href="https://github.com/memphis-cs/practice-apps-2023-08fall" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README&lt;/h1&gt; &#xA;&lt;p&gt;This README would normally document whatever steps are necessary to get the application up and running.&lt;/p&gt; &#xA;&lt;p&gt;Things you may want to cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ruby version&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;System dependencies&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configuration&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Database creation&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Database initialization&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to run the test suite&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Services (job queues, cache servers, search engines, etc.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deployment instructions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;...&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>PacktPublishing/Layered-Design-for-Ruby-on-Rails-Applications</title>
    <updated>2023-09-05T01:36:49Z</updated>
    <id>tag:github.com,2023-09-05:/PacktPublishing/Layered-Design-for-Ruby-on-Rails-Applications</id>
    <link href="https://github.com/PacktPublishing/Layered-Design-for-Ruby-on-Rails-Applications" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Layered Design for Ruby on Rails Applications, published by Packt&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Layered Design for Ruby on Rails Applications&lt;/h1&gt; &#xA;&lt;p&gt;Layered Design for Ruby on Rails Applications, published by Packt&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/product/layered-design-for-ruby-on-rails-applications/9781801813785&#34;&gt;&lt;img src=&#34;https://static.packt-cdn.com/products/9781801813785/cover/smaller&#34; alt=&#34;Layered Design for Ruby on Rails Applications&#34; height=&#34;256px&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the code repository for &lt;a href=&#34;https://www.packtpub.com/product/layered-design-for-ruby-on-rails-applications/9781801813785&#34;&gt;Layered Design for Ruby on Rails Applications&lt;/a&gt;, published by Packt.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discover practical design patterns for maintainable web applications.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is this book about?&lt;/h2&gt; &#xA;&lt;p&gt;Ruby on Rails is an open-source framework for building web applications from scratch and develop a full-featured product. This book helps you keep the code maintainable while working on a Rails application by demonstrating the useful design patterns and exploring the common code abstractions.&lt;/p&gt; &#xA;&lt;p&gt;This book covers the following exciting features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discover Rails&#39; core components and its request/response cycle&lt;/li&gt; &#xA; &lt;li&gt;Understand Rails&#39; convention-over-configuration principle and its impact on development&lt;/li&gt; &#xA; &lt;li&gt;Explore patterns for flexibility, extensibility, and testability in Rails&lt;/li&gt; &#xA; &lt;li&gt;Identify and address Rails’ anti-patterns for cleaner code&lt;/li&gt; &#xA; &lt;li&gt;Implement design patterns for handling bloated models and messy views&lt;/li&gt; &#xA; &lt;li&gt;Expand from mailers to multi-channel notification deliveries&lt;/li&gt; &#xA; &lt;li&gt;Explore different authorization models and layers&lt;/li&gt; &#xA; &lt;li&gt;Use a class-based approach to configuration in Rails&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you feel this book is for you, get your &lt;a href=&#34;https://www.amazon.com/Layered-Design-Ruby-Rails-Applications/dp/1801813787&#34;&gt;copy&lt;/a&gt; today!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=GitHubBanner&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PacktPublishing/GitHub/master/GitHub.png&#34; alt=&#34;https://www.packtpub.com/&#34; border=&#34;5&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Instructions and navigations&lt;/h2&gt; &#xA;&lt;p&gt;All of the code is organized into folders. For example, Chapter02.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;lib/&lt;/code&gt; folder contains utilities to run code snippets. Most chapter folders also contain the &lt;code&gt;prelude.rb&lt;/code&gt; file with the environment configuration for the examples (dependecies, Rails application configuration, database schema extensions, etc).&lt;/p&gt; &#xA;&lt;p&gt;You can run any example using the &lt;code&gt;ruby&lt;/code&gt; command, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ruby Chapter01/01-request-gc-stats.rb&#xA;&#xA;Total allocations: 18573&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using examples runner&lt;/h3&gt; &#xA;&lt;p&gt;You can also run examples using a specific runner scripts, which prints the source code along with intermediate return values in addition to executing the code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ruby run.rb Chapter01/01-request-gc-stats.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example output of the runner:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/PacktPublishing/Layered-Design-for-Ruby-on-Rails-Applications/main/assets/demo.gif&#34; alt=&#34;Runner demo&#34; width=&#34;720px&#34;&gt; &#xA;&lt;h3&gt;Running Rails tasks&lt;/h3&gt; &#xA;&lt;p&gt;You can run Rails (Rake) tasks using the &lt;code&gt;bin/rails&lt;/code&gt; executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bin/rails middleware&#xA;&#xA;use ActionDispatch::HostAuthorization&#xA;use Rack::Sendfile&#xA;...&#xA;use Rack::TempfileReaper&#xA;run App.routes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also load the application modification for a particular chapter by specifying the &lt;code&gt;CHAPTER&lt;/code&gt; env var:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ CHAPTER=2 bin/rails routes&#xA;&#xA;...&#xA;         books GET    /books(.:format)&#xA;    books#index&#xA;    categories GET    /categories(:format)&#xA;    categories#index&#xA;      category GET    /categories:id(.:format)&#xA;    categories#show&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you can run a Rails server for a particular chapter (some chapters contain controllers and views examples). For example, for Chapter 7:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ CHAPTER=7 bin/rails rails s&#xA;&#xA;[2023-01-30 22:45:37] INFO  WEBrick 1.8.1&#xA;[2023-01-30 22:45:37] INFO  ruby 3.2.0 (2022-12-25) [aarch64-linux]&#xA;[2023-01-30 22:45:37] INFO  WEBrick::HTTPServer#start: pid=1266 port=3000&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can open a web server at &lt;a href=&#34;http://localhost:3000/users&#34;&gt;localhost:3000/users&lt;/a&gt; and play with the auto-generated Rails CRUD interface for users.&lt;/p&gt; &#xA;&lt;h3&gt;Software and Hardware List&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Chapter&lt;/th&gt; &#xA;   &lt;th&gt;Software required&lt;/th&gt; &#xA;   &lt;th&gt;OS required&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1-15&lt;/td&gt; &#xA;   &lt;td&gt;Ruby 3.2&lt;/td&gt; &#xA;   &lt;td&gt;Any OS that runs Ruby&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Related products &#xA; &lt;other books you may enjoy&gt;&lt;/other&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Web Development with Julia and Genie &lt;a href=&#34;https://www.packtpub.com/product/web-development-with-julia-and-genie/9781801811132&#34;&gt;[Packt]&lt;/a&gt; &lt;a href=&#34;https://www.amazon.in/Development-Julia-Genie-hands-high-performance/dp/180181113X&#34;&gt;[Amazon]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Practical Module development for Prestashop 8 &lt;a href=&#34;https://www.packtpub.com/product/practical-module-development-for-prestashop-8/9781837635962&#34;&gt;[Packt]&lt;/a&gt; &lt;a href=&#34;https://www.amazon.in/Practical-Module-Development-Prestashop-customizable/dp/183763596X/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;amp;qid=&amp;amp;sr=&#34;&gt;[Amazon]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get to Know the Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vladimir Dementyev&lt;/strong&gt; is a principal backend engineer at Evil Martians, a product development consultancy from Earth, focusing on building maintainable web applications and developers’ productivity. He is the creator of popular open source tools, such as AnyCable and TestProf, and a contributor to many other open source projects, including Ruby on Rails and Ruby itself. Vladimir plays an active role in the Ruby community through his code contributions and by speaking at conferences and sharing his passion for coding via articles and blog posts. For his contributions to the Ruby ecosystem, Vladimir was awarded the Fukuoka Ruby Award in 2021 and the Ruby Hero Russia Award in 2017.&lt;/p&gt;</summary>
  </entry>
</feed>