<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-26T01:34:05Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fractaledmind/litestream-ruby</title>
    <updated>2024-10-26T01:34:05Z</updated>
    <id>tag:github.com,2024-10-26:/fractaledmind/litestream-ruby</id>
    <link href="https://github.com/fractaledmind/litestream-ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;litestream-ruby&lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://rubygems.org/gems/litestream&#34;&gt; &lt;img alt=&#34;GEM Version&#34; src=&#34;https://img.shields.io/gem/v/litestream?color=168AFE&amp;amp;include_prereleases&amp;amp;logo=ruby&amp;amp;logoColor=FE1616&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/litestream&#34;&gt; &lt;img alt=&#34;GEM Downloads&#34; src=&#34;https://img.shields.io/gem/dt/litestream?color=168AFE&amp;amp;logo=ruby&amp;amp;logoColor=FE1616&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt; &lt;img alt=&#34;Ruby Style&#34; src=&#34;https://img.shields.io/badge/style-standard-168AFE?logo=ruby&amp;amp;logoColor=FE1616&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/fractaledmind/litestream-ruby/actions/workflows/main.yml&#34;&gt; &lt;img alt=&#34;Tests&#34; src=&#34;https://github.com/fractaledmind/litestream-ruby/actions/workflows/main.yml/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/fractaledmind&#34;&gt; &lt;img alt=&#34;Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/fractaledmind?color=eb4aaa&amp;amp;logo=GitHub%20Sponsors&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://ruby.social/@fractaledmind&#34;&gt; &lt;img alt=&#34;Ruby.Social Follow&#34; src=&#34;https://img.shields.io/mastodon/follow/109291299520066427?domain=https%3A%2F%2Fruby.social&amp;amp;label=%40fractaledmind&amp;amp;style=social&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/fractaledmind&#34;&gt; &lt;img alt=&#34;Twitter Follow&#34; src=&#34;https://img.shields.io/twitter/url?label=%40fractaledmind&amp;amp;style=social&amp;amp;url=https%3A%2F%2Ftwitter.com%2Ffractaledmind&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://litestream.io/&#34;&gt;Litestream&lt;/a&gt; is a standalone streaming replication tool for SQLite. This gem provides a Ruby interface to Litestream.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the gem and add to the application&#39;s Gemfile by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle add litestream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If bundler is not being used to manage dependencies, install the gem by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install litestream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing the gem, run the installer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rails generate litestream:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The installer will create a configuration file at &lt;code&gt;config/litestream.yml&lt;/code&gt; and an initializer file for configuring the gem at &lt;code&gt;config/initializers/litestream.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This gem wraps the standalone executable version of the &lt;a href=&#34;https://litestream.io/install/source/&#34;&gt;Litestream&lt;/a&gt; utility. These executables are platform specific, so there are actually separate underlying gems per platform, but the correct gem will automatically be picked for your platform. Litestream itself doesn&#39;t support Windows, so this gem doesn&#39;t either.&lt;/p&gt; &#xA;&lt;p&gt;Supported platforms are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;arm64-darwin (macos-arm64)&lt;/li&gt; &#xA; &lt;li&gt;x86_64-darwin (macos-x64)&lt;/li&gt; &#xA; &lt;li&gt;arm64-linux (linux-arm64)&lt;/li&gt; &#xA; &lt;li&gt;x86_64-linux (linux-x64)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a local installation of &lt;code&gt;litestream&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you are not able to use the vendored standalone executables (for example, if you&#39;re on an unsupported platform), you can use a local installation of the &lt;code&gt;litestream&lt;/code&gt; executable by setting an environment variable named &lt;code&gt;LITESTREAM_INSTALL_DIR&lt;/code&gt; to the directory containing the executable.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you&#39;ve installed &lt;code&gt;litestream&lt;/code&gt; so that the executable is found at &lt;code&gt;/usr/local/bin/litestream&lt;/code&gt;, then you should set your environment variable like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;LITESTREAM_INSTALL_DIR=/usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also works with relative paths. If you&#39;ve installed into your app&#39;s directory at &lt;code&gt;./.bin/litestream&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;LITESTREAM_INSTALL_DIR=.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You configure the Litestream executable through the &lt;a href=&#34;https://litestream.io/reference/config/&#34;&gt;&lt;code&gt;config/litestream.yml&lt;/code&gt; file&lt;/a&gt;, which is a standard Litestream configuration file as if Litestream was running in a traditional installation.&lt;/p&gt; &#xA;&lt;p&gt;The gem streamlines the configuration process by providing a default configuration file for you. This configuration file will backup all SQLite databases defined in your &lt;code&gt;config/database.yml&lt;/code&gt; file to one replication bucket. In order to ensure that no secrets are stored in plain-text in your repository, this configuration file leverages Litestream&#39;s support for environment variables. The default configuration file looks like this if you only have one SQLite database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dbs:&#xA;  - path: storage/production.sqlite3&#xA;    replicas:&#xA;      - type: s3&#xA;        bucket: $LITESTREAM_REPLICA_BUCKET&#xA;        path: storage/production.sqlite3&#xA;        access-key-id: $LITESTREAM_ACCESS_KEY_ID&#xA;        secret-access-key: $LITESTREAM_SECRET_ACCESS_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the default for Amazon S3. The full range of possible replica types (e.g. other S3-compatible object storage servers) are covered in Litestream&#39;s &lt;a href=&#34;https://litestream.io/guides/#replica-guides&#34;&gt;replica guides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The gem also provides a default initializer file at &lt;code&gt;config/initializers/litestream.rb&lt;/code&gt; that allows you to configure these four environment variables referenced in the configuration file in Ruby. By providing a Ruby interface to these environment variables, you can use any method of storing secrets that you prefer. For example, the default generated file uses Rails&#39; encrypted credentials to store your secrets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.configure do&#xA;  litestream_credentials = Rails.application.credentials.litestream&#xA;&#xA;  config.litestream.replica_bucket = litestream_credentials&amp;amp;.replica_bucket&#xA;  config.litestream.replica_key_id = litestream_credentials&amp;amp;.replica_key_id&#xA;  config.litestream.replica_access_key = litestream_credentials&amp;amp;.replica_access_key&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, if you need manual control over the Litestream configuration, you can manually edit the &lt;code&gt;config/litestream.yml&lt;/code&gt; file. The full range of possible configurations are covered in Litestream&#39;s &lt;a href=&#34;https://litestream.io/reference/config/&#34;&gt;configuration reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Replication&lt;/h3&gt; &#xA;&lt;p&gt;In order to stream changes to your configured replicas, you need to start the Litestream replication process.&lt;/p&gt; &#xA;&lt;p&gt;The simplest way to run the Litestream replication process is use the Puma plugin provided by the gem. This allows you to run the Litestream replication process together with Puma and have Puma monitor and manage it. You just need to add the following to your &lt;code&gt;puma.rb&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Run litestream only in production.&#xA;plugin :litestream if ENV.fetch(&#34;RAILS_ENV&#34;, &#34;production&#34;) == &#34;production&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would prefer to run the Litestream replication process separately from Puma, you can use the provided &lt;code&gt;litestream:replicate&lt;/code&gt; rake task. This rake task will automatically load the configuration file and set the environment variables before starting the Litestream process.&lt;/p&gt; &#xA;&lt;p&gt;The simplest way to spin up a Litestream process separately from your Rails application is to use a &lt;code&gt;Procfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Procfile&#xA;rails: bundle exec rails server --port $PORT&#xA;litestream: bin/rails litestream:replicate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you could setup a &lt;code&gt;systemd&lt;/code&gt; service to manage the Litestream replication process, but setting this up is outside the scope of this README.&lt;/p&gt; &#xA;&lt;p&gt;If you need to pass arguments through the rake task to the underlying &lt;code&gt;litestream&lt;/code&gt; command, that can be done with argument forwarding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails litestream:replicate -- -exec &#34;foreman start&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example utilizes the &lt;code&gt;-exec&lt;/code&gt; option available on &lt;a href=&#34;https://litestream.io/reference/replicate/&#34;&gt;the &lt;code&gt;replicate&lt;/code&gt; command&lt;/a&gt; which provides basic process management, since Litestream will exit when the child process exits. In this example, we only launch our collection of Rails application processes (like Rails and SolidQueue, for example) after the Litestream replication process is ready.&lt;/p&gt; &#xA;&lt;p&gt;The Litestream &lt;code&gt;replicate&lt;/code&gt; command supports the following options, which can be passed through the rake task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-config PATH&#xA;    Specifies the configuration file.&#xA;    Defaults to /etc/litestream.yml&#xA;&#xA;-exec CMD&#xA;    Executes a subcommand. Litestream will exit when the child&#xA;    process exits. Useful for simple process management.&#xA;&#xA;-no-expand-env&#xA;    Disables environment variable expansion in configuration file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Restoration&lt;/h3&gt; &#xA;&lt;p&gt;You can restore any replicated database at any point using the gem&#39;s provided &lt;code&gt;litestream:restore&lt;/code&gt; rake task. This rake task requires that you specify which specific database you want to restore. As with the &lt;code&gt;litestream:replicate&lt;/code&gt; task, you pass arguments to the rake task via argument forwarding. For example, to restore the production database, you would run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails litestream:restore -- --database=storage/production.sqlite3&#xA;# or&#xA;bundle exec rake litestream:restore -- --database=storage/production.sqlite3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can restore any of the databases specified in your &lt;code&gt;config/litestream.yml&lt;/code&gt; file. The &lt;code&gt;--database&lt;/code&gt; argument should be the path to the database file you want to restore and must match the value for the &lt;code&gt;path&lt;/code&gt; key of one of your configured databases. The &lt;code&gt;litestream:restore&lt;/code&gt; rake task will automatically load the configuration file and set the environment variables before calling the Litestream executable.&lt;/p&gt; &#xA;&lt;p&gt;If you need to pass arguments through the rake task to the underlying &lt;code&gt;litestream&lt;/code&gt; command, that can be done with additional forwarded arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails litestream:replicate -- --database=storage/production.sqlite3 --if-db-not-exists&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can forward arguments in whatever order you like, you simply need to ensure that the &lt;code&gt;--database&lt;/code&gt; argument is present. You can also use either a single-dash &lt;code&gt;-database&lt;/code&gt; or double-dash &lt;code&gt;--database&lt;/code&gt; argument format. The Litestream &lt;code&gt;restore&lt;/code&gt; command supports the following options, which can be passed through the rake task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-o PATH&#xA;    Output path of the restored database.&#xA;    Defaults to original DB path.&#xA;&#xA;-if-db-not-exists&#xA;    Returns exit code of 0 if the database already exists.&#xA;&#xA;-if-replica-exists&#xA;    Returns exit code of 0 if no backups found.&#xA;&#xA;-parallelism NUM&#xA;    Determines the number of WAL files downloaded in parallel.&#xA;    Defaults to 8&#xA;&#xA;-replica NAME&#xA;    Restore from a specific replica.&#xA;    Defaults to replica with latest data.&#xA;&#xA;-generation NAME&#xA;    Restore from a specific generation.&#xA;    Defaults to generation with latest data.&#xA;&#xA;-index NUM&#xA;    Restore up to a specific WAL index (inclusive).&#xA;    Defaults to use the highest available index.&#xA;&#xA;-timestamp TIMESTAMP&#xA;    Restore to a specific point-in-time.&#xA;    Defaults to use the latest available backup.&#xA;&#xA;-config PATH&#xA;    Specifies the configuration file.&#xA;    Defaults to /etc/litestream.yml&#xA;&#xA;-no-expand-env&#xA;    Disables environment variable expansion in configuration file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verification&lt;/h3&gt; &#xA;&lt;p&gt;You can verify the integrity of your backed-up databases using the gem&#39;s provided &lt;code&gt;Litestream.verify!&lt;/code&gt; method. The method takes the path to a database file that you have configured Litestream to backup; that is, it takes one of the &lt;code&gt;path&lt;/code&gt; values under the &lt;code&gt;dbs&lt;/code&gt; key in your &lt;code&gt;litestream.yml&lt;/code&gt; configuration file. For example, to verify the production database, you would run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Litestream.verify! &#34;storage/production.sqlite3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to verify that the backup for that database is both restorable and fresh, the method will add a new row to that database under the &lt;code&gt;_litestream_verification&lt;/code&gt; table, which it will create if needed. It will then wait 10 seconds to give the Litestream utility time to replicate that change to whatever storage providers you have configured. After that, it will download the latest backup from that storage provider and ensure that this verification row is present in the backup. If the verification row is &lt;em&gt;not&lt;/em&gt; present, the method will raise a &lt;code&gt;Litestream::VerificationFailure&lt;/code&gt; exception. This check ensures that the restored database file:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;exists,&lt;/li&gt; &#xA; &lt;li&gt;can be opened by SQLite, and&lt;/li&gt; &#xA; &lt;li&gt;has up-to-date data.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After restoring the backup, the &lt;code&gt;Litestream.verify!&lt;/code&gt; method will delete the restored database file. If you need the restored database file, use the &lt;code&gt;litestream:restore&lt;/code&gt; rake task or &lt;code&gt;Litestream::Commands.restore&lt;/code&gt; method instead.&lt;/p&gt; &#xA;&lt;h3&gt;Dashboard&lt;/h3&gt; &#xA;&lt;p&gt;The gem provides a web dashboard for monitoring the status of your Litestream replication. To mount the dashboard in your Rails application, add the following to your &lt;code&gt;config/routes.rb&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;authenticate :user, -&amp;gt; (user) { user.admin? } do&#xA;  mount Litestream::Engine, at: &#34;/litestream&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Be sure to &lt;a href=&#34;https://raw.githubusercontent.com/fractaledmind/litestream-ruby/main/#authentication&#34;&gt;secure the dashboard&lt;/a&gt; in production.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Authentication&lt;/h4&gt; &#xA;&lt;p&gt;Litestream Rails does not restrict access out of the box. You must secure the dashboard yourself. However, it does provide basic HTTP authentication that can be used with basic authentication or Devise. All you need to do is setup a username and password.&lt;/p&gt; &#xA;&lt;p&gt;There are two ways to setup a username and password. First, you can use the &lt;code&gt;LITESTREAM_USERNAME&lt;/code&gt; and &lt;code&gt;LITESTREAM_PASSWORD&lt;/code&gt; environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ENV[&#34;LITESTREAM_USERNAME&#34;] = &#34;frodo&#34;&#xA;ENV[&#34;LITESTREAM_PASSWORD&#34;] = &#34;ikeptmysecrets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Second, you can configure the access credentials via the Rails configuration object, under the &lt;code&gt;litestream&lt;/code&gt; key, in an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Set authentication credentials for Litestream&#xA;config.litestream.username = Rails.application.credentials.dig(:litestream, :username)&#xA;config.litestream.password = Rails.application.credentials.dig(:litestream, :password)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Either way, if you have set a username and password, Litestream will use basic HTTP authentication.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] If you have not set a username and password, Litestream will not require any authentication to view the dashboard.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you use Devise for authentication in your app, you can also restrict access to the dashboard by using their &lt;code&gt;authenticate&lt;/code&gt; constraint in your routes file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;authenticate :user, -&amp;gt; (user) { user.admin? } do&#xA;  mount Litestream::Engine, at: &#34;/litestream&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;There is only one screen in the dashboard.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the show view of the Litestream replication process:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fractaledmind/litestream-ruby/main/images/show-screenshot.png&#34; alt=&#34;screenshot of the single page in the web dashboard, showing details of the Litestream replication process&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage with API-only Applications&lt;/h3&gt; &#xA;&lt;p&gt;If your Rails application is an API-only application (generated with the &lt;code&gt;rails new --api&lt;/code&gt; command), you will need to add the following middleware to your &lt;code&gt;config/application.rb&lt;/code&gt; file in order to use the dashboard UI provided by Litestream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# /config/application.rb&#xA;config.middleware.use ActionDispatch::Cookies&#xA;config.middleware.use ActionDispatch::Session::CookieStore&#xA;config.middleware.use ActionDispatch::Flash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Overwriting the views&lt;/h3&gt; &#xA;&lt;p&gt;You can find the views in &lt;a href=&#34;https://github.com/fractaledmind/litestream-ruby/tree/main/app/views&#34;&gt;&lt;code&gt;app/views&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;app/views/&#xA;├── layouts&#xA;│&amp;nbsp;&amp;nbsp; └── litestream&#xA;│&amp;nbsp;&amp;nbsp;     ├── _style.html&#xA;│&amp;nbsp;&amp;nbsp;     └── application.html.erb&#xA;└── litestream&#xA;    └── processes&#xA;     &amp;nbsp;&amp;nbsp; └── show.html.erb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can always take control of the views by creating your own views and/or partials at these paths in your application. For example, if you wanted to overwrite the application layout, you could create a file at &lt;code&gt;app/views/layouts/litestream/application.html.erb&lt;/code&gt;. If you wanted to remove the footer and the automatically disappearing flash messages, as one concrete example, you could define that file as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;title&amp;gt;Litestream&amp;lt;/title&amp;gt;&#xA;    &amp;lt;%= csrf_meta_tags %&amp;gt;&#xA;    &amp;lt;%= csp_meta_tag %&amp;gt;&#xA;&#xA;    &amp;lt;%= render &#34;layouts/litestream/style&#34; %&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body class=&#34;h-full flex flex-col&#34;&amp;gt;&#xA;    &amp;lt;main class=&#34;container mx-auto max-w-4xl mt-4 px-2 grow&#34;&amp;gt;&#xA;      &amp;lt;%= content_for?(:content) ? yield(:content) : yield %&amp;gt;&#xA;    &amp;lt;/main&amp;gt;&#xA;&#xA;    &amp;lt;div class=&#34;fixed top-0 left-0 right-0 text-center py-2&#34;&amp;gt;&#xA;      &amp;lt;% if notice.present? %&amp;gt;&#xA;        &amp;lt;p class=&#34;py-2 px-3 bg-green-50 text-green-500 font-medium rounded-lg inline-block&#34;&amp;gt;&#xA;          &amp;lt;%= notice %&amp;gt;&#xA;        &amp;lt;/p&amp;gt;&#xA;      &amp;lt;% end %&amp;gt;&#xA;&#xA;      &amp;lt;% if alert.present? %&amp;gt;&#xA;        &amp;lt;p class=&#34;py-2 px-3 bg-red-50 text-red-500 font-medium rounded-lg inline-block&#34;&amp;gt;&#xA;          &amp;lt;%= alert %&amp;gt;&#xA;        &amp;lt;/p&amp;gt;&#xA;      &amp;lt;% end %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Introspection&lt;/h3&gt; &#xA;&lt;p&gt;Litestream offers a handful of commands that allow you to introspect the state of your replication. The gem provides a few rake tasks that wrap these commands for you. For example, you can list the databases that Litestream is configured to replicate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails litestream:databases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return a list of databases and their configured replicas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path                                                 replicas&#xA;/Users/you/Code/your-app/storage/production.sqlite3  s3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also list the generations of a specific database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails litestream:generations -- --database=storage/production.sqlite3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will list all generations for the specified database, including stats about their lag behind the primary database and the time range they cover:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;name  generation        lag     start                 end&#xA;s3    a295b16a796689f3  -156ms  2024-04-17T00:01:19Z  2024-04-17T00:01:19Z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can list the snapshots available for a database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails litestream:snapshots -- --database=storage/production.sqlite3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command lists snapshots available for that specified database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;replica  generation        index  size     created&#xA;s3       a295b16a796689f3  1      4645465  2024-04-17T00:01:19Z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you can list the wal files available for a database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails litestream:wal -- --database=storage/production.sqlite3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command lists wal files available for that specified database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;replica  generation        index  offset    size     created&#xA;s3       a295b16a796689f3  1      0         2036     2024-04-17T00:01:19Z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running commands from Ruby&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the provided rake tasks, you can also run Litestream commands directly from Ruby. The gem provides a &lt;code&gt;Litestream::Commands&lt;/code&gt; module that wraps the Litestream CLI commands. This is particularly useful for the introspection commands, as you can use the output in your Ruby code.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Litestream::Commands.databases&lt;/code&gt; method returns an array of hashes with the &#34;path&#34; and &#34;replicas&#34; keys for each database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Litestream::Commands.databases&#xA;# =&amp;gt; [{&#34;path&#34;=&amp;gt;&#34;/Users/you/Code/your-app/storage/production.sqlite3&#34;, &#34;replicas&#34;=&amp;gt;&#34;s3&#34;}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Litestream::Commands.generations&lt;/code&gt; method returns an array of hashes with the &#34;name&#34;, &#34;generation&#34;, &#34;lag&#34;, &#34;start&#34;, and &#34;end&#34; keys for each generation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Litestream::Commands.generations(&#39;storage/production.sqlite3&#39;)&#xA;# =&amp;gt; [{&#34;name&#34;=&amp;gt;&#34;s3&#34;, &#34;generation&#34;=&amp;gt;&#34;5f4341bc3d22d615&#34;, &#34;lag&#34;=&amp;gt;&#34;3s&#34;, &#34;start&#34;=&amp;gt;&#34;2024-04-17T19:48:09Z&#34;, &#34;end&#34;=&amp;gt;&#34;2024-04-17T19:48:09Z&#34;}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Litestream::Commands.snapshots&lt;/code&gt; method returns an array of hashes with the &#34;replica&#34;, &#34;generation&#34;, &#34;index&#34;, &#34;size&#34;, and &#34;created&#34; keys for each snapshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Litestream::Commands.snapshots(&#39;storage/production.sqlite3&#39;)&#xA;# =&amp;gt; [{&#34;replica&#34;=&amp;gt;&#34;s3&#34;, &#34;generation&#34;=&amp;gt;&#34;5f4341bc3d22d615&#34;, &#34;index&#34;=&amp;gt;&#34;0&#34;, &#34;size&#34;=&amp;gt;&#34;4645465&#34;, &#34;created&#34;=&amp;gt;&#34;2024-04-17T19:48:09Z&#34;}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Litestream::Commands.wal&lt;/code&gt; method returns an array of hashes with the &#34;replica&#34;, &#34;generation&#34;, &#34;index&#34;, &#34;offset&#34;,&#34;size&#34;, and &#34;created&#34; keys for each wal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Litestream::Commands.wal(&#39;storage/production.sqlite3&#39;)&#xA;# =&amp;gt; [{&#34;replica&#34;=&amp;gt;&#34;s3&#34;, &#34;generation&#34;=&amp;gt;&#34;5f4341bc3d22d615&#34;, &#34;index&#34;=&amp;gt;&#34;0&#34;,  &#34;offset&#34;=&amp;gt;&#34;0&#34;, &#34;size&#34;=&amp;gt;&#34;2036&#34;, &#34;created&#34;=&amp;gt;&#34;2024-04-17T19:48:09Z&#34;}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also restore a database programmatically using the &lt;code&gt;Litestream::Commands.restore&lt;/code&gt; method, which returns the path to the restored database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Litestream::Commands.restore(&#39;storage/production.sqlite3&#39;)&#xA;# =&amp;gt; &#34;storage/production-20240418090048.sqlite3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; start the replication process using the &lt;code&gt;Litestream::Commands.replicate&lt;/code&gt; method, but this is not recommended. The replication process should be managed by Litestream itself, and you should not need to manually start it.&lt;/p&gt; &#xA;&lt;h3&gt;Running commands from CLI&lt;/h3&gt; &#xA;&lt;p&gt;The rake tasks are the recommended way to interact with the Litestream utility in your Rails application or Ruby project. But, you &lt;em&gt;can&lt;/em&gt; work directly with the Litestream CLI. Since the gem installs the native executable via Bundler, the &lt;code&gt;litestream&lt;/code&gt; command will be available in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The full set of commands available to the &lt;code&gt;litestream&lt;/code&gt; executable are covered in Litestream&#39;s &lt;a href=&#34;https://litestream.io/reference/&#34;&gt;command reference&lt;/a&gt;, but can be summarized as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;litestream databases [arguments]&#xA;litestream generations [arguments] DB_PATH|REPLICA_URL&#xA;litestream replicate [arguments]&#xA;litestream restore [arguments] DB_PATH|REPLICA_URL&#xA;litestream snapshots [arguments] DB_PATH|REPLICA_URL&#xA;litestream version&#xA;litestream wal [arguments] DB_PATH|REPLICA_URL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using in development&lt;/h3&gt; &#xA;&lt;p&gt;By default, if you install the gem and configure via &lt;code&gt;puma.rb&lt;/code&gt; or &lt;code&gt;Procfile&lt;/code&gt;, Litestream will not start in development.&lt;/p&gt; &#xA;&lt;p&gt;If you setup via &lt;code&gt;puma.rb&lt;/code&gt;, then remove the conditional statement.&lt;/p&gt; &#xA;&lt;p&gt;If you setup via &lt;code&gt;Procfile&lt;/code&gt;, you will need to update your &lt;code&gt;Procfile.dev&lt;/code&gt; file. If you would like to test that your configuration is properly setup, you can manually add the &lt;code&gt;litestream:replicate&lt;/code&gt; rake task to your &lt;code&gt;Procfile.dev&lt;/code&gt; file. Just copy the &lt;code&gt;litestream&lt;/code&gt; definition from the production &lt;code&gt;Procfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to have a replication bucket for Litestream to point to, you can use a Docker instance of &lt;a href=&#34;https://min.io/&#34;&gt;MinIO&lt;/a&gt;. MinIO is an S3-compatible object storage server that can be run locally. You can run a MinIO server with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -p 9000:9000 -p 9001:9001 minio/minio server /data --console-address &#34;:9001&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gets us up and running quickly but it will only persist the data for as long as the Docker container is running, which is fine for local development testing.&lt;/p&gt; &#xA;&lt;p&gt;To simplify local development, you can add this command to your &lt;code&gt;Procfile.dev&lt;/code&gt; file as well. This would allow you to start a MinIO server and a Litestream replication process in your local development environment with the single &lt;code&gt;bin/dev&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Once you have a MinIO server running, you can create a bucket for Litestream to use. You can do this by visiting the MinIO console at &lt;a href=&#34;http://localhost:9001&#34;&gt;http://localhost:9001&lt;/a&gt; and logging in with the default credentials of &lt;code&gt;minioadmin&lt;/code&gt; and &lt;code&gt;minioadmin&lt;/code&gt;. Once logged in, you can create a bucket named &lt;code&gt;mybkt&lt;/code&gt; by clicking the &lt;code&gt;+&lt;/code&gt; button in the bottom right corner of the screen. You can then use the following configuration in your &lt;code&gt;config/initializers/litestream.rb&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Litestream.configure do |config|&#xA;  config.replica_bucket = &#34;s3://mybkt.localhost:9000/&#34;&#xA;  config.replica_key_id = &#34;minioadmin&#34;&#xA;  config.replica_access_key = &#34;minioadmin&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With Litestream properly configured and the MinIO server and Litestream replication process running, you should see something like the following in your terminal logs when you start the &lt;code&gt;bin/dev&lt;/code&gt; process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;time=YYYY-MM-DDTHH:MM:SS level=INFO msg=litestream version=v0.3.xx&#xA;time=YYYY-MM-DDTHH:MM:SS level=INFO msg=&#34;initialized db&#34; path=/path/to/your/app/storage/development.sqlite3&#xA;time=YYYY-MM-DDTHH:MM:SS level=INFO msg=&#34;replicating to&#34; name=s3 type=s3 sync-interval=1s bucket=mybkt path=&#34;&#34; region=us-east-1 endpoint=http://localhost:9000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake test&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For maintainers, to release a new version, run &lt;code&gt;bin/release $VERSION&lt;/code&gt;, which will create a git tag for the version, push git commits and tags, and push all of the platform-specific &lt;code&gt;.gem&lt;/code&gt; files to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/fractaledmind/litestream-ruby&#34;&gt;https://github.com/fractaledmind/litestream-ruby&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://github.com/fractaledmind/litestream-ruby/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the Litestream project&#39;s codebases, issue trackers, chat rooms and mailing lists is expected to follow the &lt;a href=&#34;https://github.com/fractaledmind/litestream-ruby/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>18F/identity-idp</title>
    <updated>2024-10-26T01:34:05Z</updated>
    <id>tag:github.com,2024-10-26:/18F/identity-idp</id>
    <link href="https://github.com/18F/identity-idp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Login.gov Core App: Identity Provider (IdP)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Login.gov Identity Provider (IdP)&lt;/h1&gt; &#xA;&lt;p&gt;Login.gov is the public&#39;s one account for government. Use one account and password for secure, private access to participating government agencies.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the core code base and documentation for the identity management system powering secure.login.gov.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This file is auto-generated&lt;/strong&gt;. Run &lt;code&gt;make README.md&lt;/code&gt; to regenerate its contents.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/18F/identity-idp/main/docs/local-development.md&#34;&gt;&lt;em&gt;Local Development&lt;/em&gt; documentation&lt;/a&gt; to learn how to set up your environment for local development.&lt;/p&gt; &#xA;&lt;h2&gt;Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/18F/identity-idp/main/CONTRIBUTING.md&#34;&gt;The Contributing Guide&lt;/a&gt; includes basic guidelines around pull requests, commit messages, and the code review process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://handbook.login.gov/&#34;&gt;The Login.gov Handbook&lt;/a&gt; describes organizational practices, including process runbooks and team structures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/18F/identity-idp/main/docs/backend.md&#34;&gt;Back-end Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/18F/identity-idp/main/docs/frontend.md&#34;&gt;Front-end Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/18F/identity-idp/main/docs/local-development.md&#34;&gt;Local Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/18F/identity-idp/main/docs/mobile.md&#34;&gt;Mobile local development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/18F/identity-idp/main/docs/SECURITY.md&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/18F/identity-idp/main/docs/troubleshooting.md&#34;&gt;Troubleshooting Local Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/18F/identity-idp/main/docs/sdk-upgrade.md&#34;&gt;Upgrade and A/B test Acuant SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>