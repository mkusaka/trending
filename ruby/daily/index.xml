<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:34:16Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>excid3/noticed</title>
    <updated>2022-08-02T01:34:16Z</updated>
    <id>tag:github.com,2022-08-02:/excid3/noticed</id>
    <link href="https://github.com/excid3/noticed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Notifications for Ruby on Rails applications&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1&gt;Noticed&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üéâ Notifications for your Ruby on Rails app.&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/excid3/noticed/actions&#34;&gt;&lt;img src=&#34;https://github.com/excid3/noticed/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/noticed&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/noticed.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently, we support these notification delivery methods out of the box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Database&lt;/li&gt; &#xA; &lt;li&gt;Email&lt;/li&gt; &#xA; &lt;li&gt;ActionCable channels&lt;/li&gt; &#xA; &lt;li&gt;Slack&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Teams&lt;/li&gt; &#xA; &lt;li&gt;Twilio (SMS)&lt;/li&gt; &#xA; &lt;li&gt;Vonage / Nexmo (SMS)&lt;/li&gt; &#xA; &lt;li&gt;iOS Apple Push Notifications&lt;/li&gt; &#xA; &lt;li&gt;Firebase Cloud Messaging (Android and more)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And you can easily add new notification types for any other delivery methods.&lt;/p&gt; &#xA;&lt;h2&gt;üé¨ Screencast&lt;/h2&gt; &#xA;&lt;div style=&#34;width:50%&#34;&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/watch?v=Scffi4otlFc&#34;&gt;&lt;img src=&#34;https://i.imgur.com/UvVKWwD.png&#34; title=&#34;How to add Notifications to Rails with Noticed&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Scffi4otlFc&#34;&gt;Watch Screencast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command to add Noticed to your Gemfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bundle add &#34;noticed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To save notifications to your database, use the following command to generate a Notification model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rails generate noticed:model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a Notification model and instructions for associating User models with the notifications table.&lt;/p&gt; &#xA;&lt;h2&gt;üìù Usage&lt;/h2&gt; &#xA;&lt;p&gt;To generate a notification object, simply run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rails generate noticed:notification CommentNotification&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Sending Notifications&lt;/h4&gt; &#xA;&lt;p&gt;To send a notification to a user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Instantiate a new notification&#xA;notification = CommentNotification.with(comment: @comment)&#xA;&#xA;# Deliver notification in background job&#xA;notification.deliver_later(@comment.post.author)&#xA;&#xA;# Deliver notification immediately&#xA;notification.deliver(@comment.post.author)&#xA;&#xA;# Deliver notification to multiple recipients&#xA;notification.deliver_later(User.all)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will instantiate a new notification with the &lt;code&gt;comment&lt;/code&gt; stored in the notification&#39;s params.&lt;/p&gt; &#xA;&lt;p&gt;Each delivery method is able to transform this metadata that&#39;s best for the format. For example, the database may simply store the comment so it can be linked when rendering in the navbar. The websocket mechanism may transform this into a browser notification or insert it into the navbar.&lt;/p&gt; &#xA;&lt;h4&gt;Notification Objects&lt;/h4&gt; &#xA;&lt;p&gt;Notifications inherit from &lt;code&gt;Noticed::Base&lt;/code&gt;. This provides all their functionality and allows them to be delivered.&lt;/p&gt; &#xA;&lt;p&gt;To add delivery methods, simply &lt;code&gt;include&lt;/code&gt; the module for the delivery methods you would like to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CommentNotification &amp;lt; Noticed::Base&#xA;  deliver_by :database&#xA;  deliver_by :action_cable&#xA;  deliver_by :email, mailer: &#39;CommentMailer&#39;, if: :email_notifications?&#xA;&#xA;  # I18n helpers&#xA;  def message&#xA;    t(&#34;.message&#34;)&#xA;  end&#xA;&#xA;  # URL helpers are accessible in notifications&#xA;  # Don&#39;t forget to set your default_url_options so Rails knows how to generate urls&#xA;  def url&#xA;    post_path(params[:post])&#xA;  end&#xA;&#xA;  def email_notifications?&#xA;    !!recipient.preferences[:email]&#xA;  end&#xA;&#xA;  after_deliver do&#xA;    # Anything you want&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shared Options&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;if: :method_name&lt;/code&gt; - Calls &lt;code&gt;method_name&lt;/code&gt; and cancels delivery method if &lt;code&gt;false&lt;/code&gt; is returned&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unless: :method_name&lt;/code&gt; - Calls &lt;code&gt;method_name&lt;/code&gt; and cancels delivery method if &lt;code&gt;true&lt;/code&gt; is returned&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delay: ActiveSupport::Duration&lt;/code&gt; - Delays the delivery for the given duration of time&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delay: :method_name&lt;/code&gt; - Calls &lt;code&gt;method_name which should return an &lt;/code&gt;ActiveSupport::Duration` and delays the delivery for the given duration of time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Helper Methods&lt;/h5&gt; &#xA;&lt;p&gt;You can define helper methods inside your Notification object to make it easier to render.&lt;/p&gt; &#xA;&lt;h5&gt;URL Helpers&lt;/h5&gt; &#xA;&lt;p&gt;Rails url helpers are included in notification classes by default so you have full access to them just like you would in your controllers and views.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget, you&#39;ll need to configure &lt;code&gt;default_url_options&lt;/code&gt; in order for Rails to know what host and port to use when generating URLs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.routes.default_url_options[:host] = &#39;localhost:3000&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Callbacks&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like ActiveRecord, notifications have several different types of callbacks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CommentNotification &amp;lt; Noticed::Base&#xA;  deliver_by :database&#xA;  deliver_by :email, mailer: &#39;CommentMailer&#39;&#xA;&#xA;  # Callbacks for the entire delivery&#xA;  before_deliver :whatever&#xA;  around_deliver :whatever&#xA;  after_deliver :whatever&#xA;&#xA;  # Callbacks for each delivery method&#xA;  before_database :whatever&#xA;  around_database :whatever&#xA;  after_database :whatever&#xA;&#xA;  before_email :whatever&#xA;  around_email :whatever&#xA;  after_email :whatever&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;deliver_later&lt;/code&gt; callbacks will be run around queuing the delivery method jobs (not inside the jobs as they actually execute).&lt;/p&gt; &#xA;&lt;p&gt;Defining custom delivery methods allows you to add callbacks that run inside the background job as each individual delivery is executed. See the Custom Delivery Methods section for more information.&lt;/p&gt; &#xA;&lt;h5&gt;Translations&lt;/h5&gt; &#xA;&lt;p&gt;We&#39;ve added &lt;code&gt;translate&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; helpers like Rails has to provide an easy way of scoping translations. If the key starts with a period, it will automatically scope the key under &lt;code&gt;notifications&lt;/code&gt; and the underscored name of the notification class it is used in.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;t(&#34;.message&#34;)&lt;/code&gt; looks up &lt;code&gt;en.notifications.new_comment.message&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or when notification class is in module:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;t(&#34;.message&#34;) # in Admin::NewComment&lt;/code&gt; looks up &lt;code&gt;en.notifications.admin.new_comment.message&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;User Preferences&lt;/h5&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;if:&lt;/code&gt; and &lt;code&gt;unless: &lt;/code&gt; options on your delivery methods to check the user&#39;s preferences and skip processing if they have disabled that type of notification.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CommentNotification &amp;lt; Noticed::Base&#xA;  deliver_by :email, mailer: &#39;CommentMailer&#39;, if: :email_notifications?&#xA;&#xA;  def email_notifications?&#xA;    recipient.email_notifications?&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üêû Debugging&lt;/h2&gt; &#xA;&lt;p&gt;In order to figure out what&#39;s up when you run in to errors, you can set the &lt;code&gt;debug&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; in your notification, which will give you a more detailed error message about what went wrong.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;deliver_by :slack, debug: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚úÖ Best Practices&lt;/h2&gt; &#xA;&lt;h3&gt;Creating a notification from an Active Record callback&lt;/h3&gt; &#xA;&lt;p&gt;A common use case is to trigger a notification when a record is created. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Message &amp;lt; ApplicationRecord&#xA;  belongs_to :recipient, class_name: &#34;User&#34;&#xA;&#xA;  after_create_commit :notify_recipient&#xA;&#xA;  private&#xA;&#xA;  def notify_recipient&#xA;    NewMessageNotification.with(message: self).deliver_later(recipient)&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are creating the notification on a background job (i.e. via &lt;code&gt;#deliver_later&lt;/code&gt;), make sure you use a &lt;code&gt;commit&lt;/code&gt; hook such as &lt;code&gt;after_create_commit&lt;/code&gt; or &lt;code&gt;after_commit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;after_create&lt;/code&gt; might cause the notification delivery methods to fail. This is because the job was enqueued while inside a database transaction, and the &lt;code&gt;Message&lt;/code&gt; record might not yet be saved to the database.&lt;/p&gt; &#xA;&lt;p&gt;A common symptom of this problem is undelivered notifications and the following error in your logs.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;Discarded Noticed::DeliveryMethods::Email due to a ActiveJob::DeserializationError.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Renaming notifications&lt;/h3&gt; &#xA;&lt;p&gt;If you rename the class of a notifcation object your existing queries can break. This is because Noticed serializes the class name and sets it to the &lt;code&gt;type&lt;/code&gt; column on the &lt;code&gt;Notification&lt;/code&gt; record.&lt;/p&gt; &#xA;&lt;p&gt;You can catch these errors at runtime by using &lt;code&gt;YourNotificationClassName.name&lt;/code&gt; instead of hardcoding the string when performing a query.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Notification.where(type: YourNotificationClassName.name) # good&#xA;Notification.where(type: &#34;YourNotificationClassName&#34;) # bad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When renaming a notification class you will need to backfill existing notifications to reference the new name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Notification.where(type: &#34;OldNotificationClassName&#34;).update_all(type: NewNotificationClassName.name)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöõ Delivery Methods&lt;/h2&gt; &#xA;&lt;p&gt;The delivery methods are designed to be modular so you can customize the way each type gets delivered.&lt;/p&gt; &#xA;&lt;p&gt;For example, emails will require a subject, body, and email address while an SMS requires a phone number and simple message. You can define the formats for each of these in your Notification and the delivery method will handle the processing of it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/excid3/noticed/master/docs/delivery_methods/database.md&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/excid3/noticed/master/docs/delivery_methods/email.md&#34;&gt;Email&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/excid3/noticed/master/docs/delivery_methods/action_cable.md&#34;&gt;ActionCable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/excid3/noticed/master/docs/delivery_methods/ios.md&#34;&gt;iOS Apple Push Notifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/excid3/noticed/master/docs/delivery_methods/microsoft_teams.md&#34;&gt;Microsoft Teams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/excid3/noticed/master/docs/delivery_methods/slack.md&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/excid3/noticed/master/docs/delivery_methods/test.md&#34;&gt;Test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/excid3/noticed/master/docs/delivery_methods/twilio.md&#34;&gt;Twilio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/excid3/noticed/master/docs/delivery_methods/vonage.md&#34;&gt;Vonage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/excid3/noticed/master/docs/delivery_methods/fcm.md&#34;&gt;Firebase Cloud Messaging&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fallback Notifications&lt;/h3&gt; &#xA;&lt;p&gt;A common pattern is to deliver a notification via the database and then, after some time has passed, email the user if they have not yet read the notification. You can implement this functionality by combining multiple delivery methods, the &lt;code&gt;delay&lt;/code&gt; option, and the conditional &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;unless&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CommentNotification &amp;lt; Noticed::Base&#xA;  deliver_by :database&#xA;  deliver_by :email, mailer: &#39;CommentMailer&#39;, delay: 15.minutes, unless: :read?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here a notification will be created immediately in the database (for display directly in your app). If the notification has not been read after 15 minutes, the email notification will be sent. If the notification has already been read in the app, the email will be skipped.&lt;/p&gt; &#xA;&lt;p&gt;You can also configure multiple fallback options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CriticalSystemNotification &amp;lt; Noticed::Base&#xA;  deliver_by :database&#xA;  deliver_by :slack&#xA;  deliver_by :email, mailer: &#39;CriticalSystemMailer&#39;, delay: 10.minutes, if: :unread?&#xA;  deliver_by :twilio, delay: 20.minutes, if: :unread?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this scenario, you have created an escalating notification system that&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Immediately creates a record in the database (for display directly in the app)&lt;/li&gt; &#xA; &lt;li&gt;Immediately issues a ping in Slack.&lt;/li&gt; &#xA; &lt;li&gt;If the notification remains unread after 10 minutes, it emails the team.&lt;/li&gt; &#xA; &lt;li&gt;If the notification remains unread after 20 minutes, it sends an SMS to the on-call phone.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can mix and match the options and delivery methods to suit your application specific needs.&lt;/p&gt; &#xA;&lt;p&gt;Please note that to implement this pattern, it is essential &lt;code&gt;deliver_by :database&lt;/code&gt; is one among the different delivery methods specified. Without this, a database record of the notification will not be created.&lt;/p&gt; &#xA;&lt;h3&gt;üöö Custom Delivery Methods&lt;/h3&gt; &#xA;&lt;p&gt;To generate a custom delivery method, simply run&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rails generate noticed:delivery_method Discord&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will generate a new &lt;code&gt;DeliveryMethods::Discord&lt;/code&gt; class inside the &lt;code&gt;app/notifications/delivery_methods&lt;/code&gt; folder, which can be used to deliver notifications to Discord.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class DeliveryMethods::Discord &amp;lt; Noticed::DeliveryMethods::Base&#xA;  def deliver&#xA;    # Logic for sending a Discord notification&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the custom delivery method thus created by adding a &lt;code&gt;deliver_by&lt;/code&gt; line with a unique name and &lt;code&gt;class&lt;/code&gt; option in your notification class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyNotification &amp;lt; Noticed::Base&#xA;  deliver_by :discord, class: &#34;DeliveryMethods::Discord&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delivery methods have access to the following methods and attributes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;notification&lt;/code&gt; - The instance of the Notification. You can call methods on the notification to let the user easily override formatting and other functionality of the delivery method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt; - Any configuration options on the &lt;code&gt;deliver_by&lt;/code&gt; line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;recipient&lt;/code&gt; - The object who should receive the notification. This is typically a User, Account, or other ActiveRecord model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;params&lt;/code&gt; - The params passed into the notification. This is details about the event that happened. For example, a user commenting on a post would have params of &lt;code&gt;{ user: User.first }&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Validating options passed to Custom Delivery methods&lt;/h4&gt; &#xA;&lt;p&gt;The presence of the delivery method options is automatically validated if using the &lt;code&gt;option(s)&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;If you want to validate that the passed options contain valid values, or to add any custom validations, override the &lt;code&gt;self.validate!(delivery_method_options)&lt;/code&gt; method from the &lt;code&gt;Noticed::DeliveryMethods::Base&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class DeliveryMethods::Discord &amp;lt; Noticed::DeliveryMethods::Base&#xA;  option :username # Requires the username option to be passed&#xA;&#xA;  def deliver&#xA;    # Logic for sending a Discord notification&#xA;  end&#xA;&#xA;  def self.validate!(delivery_method_options)&#xA;    super # Don&#39;t forget to call super, otherwise option presence won&#39;t be validated&#xA;&#xA;&amp;nbsp;   # Custom validations&#xA;    if delivery_method_options[:username].blank?&#xA;      raise Noticed::ValidationError, &#39;the `username` option must be present&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class CommentNotification &amp;lt; Noticed::Base&#xA;  deliver_by :discord, class: &#39;DeliveryMethods::Discord&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now it will raise an error because a required argument is missing.&lt;/p&gt; &#xA;&lt;p&gt;To fix the error, the argument has to be passed correctly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CommentNotification &amp;lt; Noticed::Base&#xA;  deliver_by :discord, class: &#39;DeliveryMethods::Discord&#39;, username: User.admin.username&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Callbacks&lt;/h4&gt; &#xA;&lt;p&gt;Callbacks for delivery methods wrap the &lt;em&gt;actual&lt;/em&gt; delivery of the notification. You can use &lt;code&gt;before_deliver&lt;/code&gt;, &lt;code&gt;around_deliver&lt;/code&gt; and &lt;code&gt;after_deliver&lt;/code&gt; in your custom delivery methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class DeliveryMethods::Discord &amp;lt; Noticed::DeliveryMethods::Base&#xA;  after_deliver do&#xA;    # Do whatever you want&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üì¶ Database Model&lt;/h3&gt; &#xA;&lt;p&gt;The Notification database model includes several helpful features to make working with database notifications easier.&lt;/p&gt; &#xA;&lt;h4&gt;Class methods&lt;/h4&gt; &#xA;&lt;p&gt;Sorting notifications by newest first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user.notifications.newest_first&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Query for read or unread notifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user.notifications.read&#xA;user.notifications.unread&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Marking all notifications as read or unread:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user.notifications.mark_as_read!&#xA;user.notifications.mark_as_unread!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Instance methods&lt;/h4&gt; &#xA;&lt;p&gt;Convert back into a Noticed notification object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@notification.to_notification&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mark notification as read / unread:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@notification.mark_as_read!&#xA;@notification.mark_as_unread!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check if read / unread:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@notification.read?&#xA;@notification.unread?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Associating Notifications&lt;/h4&gt; &#xA;&lt;p&gt;Adding notification associations to your models makes querying and deleting notifications easy and is a pretty critical feature of most applications.&lt;/p&gt; &#xA;&lt;p&gt;For example, in most cases, you&#39;ll want to delete notifications for records that are destroyed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll need two associations for this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Notifications where the record is the recipient&lt;/li&gt; &#xA; &lt;li&gt;Notifications where the record is in the notification params&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example, we can query the notifications and delete them on destroy like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ApplicationRecord&#xA;  # Standard association for deleting notifications when you&#39;re the recipient&#xA;  has_many :notifications, as: :recipient, dependent: :destroy&#xA;&#xA;  # Helper for associating and destroying Notification records where(params: {post: self})&#xA;  has_noticed_notifications&#xA;&#xA;  # You can override the param_name, the notification model name, or disable the before_destroy callback&#xA;  has_noticed_notifications param_name: :parent, destroy: false, model_name: &#34;Notification&#34;&#xA;end&#xA;&#xA;# Create a CommentNotification with a post param&#xA;CommentNotification.with(post: @post).deliver(user)&#xA;# Lookup Notifications where params: {post: @post}&#xA;@post.notifications_as_post&#xA;&#xA;CommentNotification.with(parent: @post).deliver(user)&#xA;@post.notifications_as_parent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Handling Deleted Records&lt;/h4&gt; &#xA;&lt;p&gt;If you create a notification but delete the associated record and forgot &lt;code&gt;has_noticed_notifications&lt;/code&gt; on the model, the jobs for sending the notification will not be able to find the record when ActiveJob deserializes. You can discard the job on these errors by adding the following to &lt;code&gt;ApplicationJob&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationJob &amp;lt; ActiveJob::Base&#xA;  discard_on ActiveJob::DeserializationError&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üôè Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;Standard&lt;/a&gt; for formatting Ruby code. Please make sure to run &lt;code&gt;standardrb&lt;/code&gt; before submitting pull requests.&lt;/p&gt; &#xA;&lt;p&gt;Running tests against multiple databases locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DATABASE_URL=sqlite3:noticed_test rails test&#xA;DATABASE_URL=mysql2://root:@127.0.0.1/noticed_test rails test&#xA;DATABASE_URL=postgres://127.0.0.1/noticed_test rails test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìù License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/markup</title>
    <updated>2022-08-02T01:34:16Z</updated>
    <id>tag:github.com,2022-08-02:/github/markup</id>
    <link href="https://github.com/github/markup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Determines which markup library to use to render a content file (e.g. README) on GitHub&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub Markup&lt;/h1&gt; &#xA;&lt;p&gt;This library is the &lt;strong&gt;first step&lt;/strong&gt; of a journey that every markup file in a repository goes on before it is rendered on GitHub.com:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;github-markup&lt;/code&gt; selects an &lt;em&gt;underlying library&lt;/em&gt; to convert the raw markup to HTML. See the list of &lt;a href=&#34;https://raw.githubusercontent.com/github/markup/master/#markups&#34;&gt;supported markup formats&lt;/a&gt; below.&lt;/li&gt; &#xA; &lt;li&gt;The HTML is sanitized, aggressively removing things that could harm you and your kin‚Äîsuch as &lt;code&gt;script&lt;/code&gt; tags, inline-styles, and &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; attributes.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting is performed on code blocks. See &lt;a href=&#34;https://github.com/github/linguist#syntax-highlighting&#34;&gt;github/linguist&lt;/a&gt; for more information about syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;The HTML is passed through other filters that add special sauce, such as emoji, task lists, named anchors, CDN caching for images, and autolinking.&lt;/li&gt; &#xA; &lt;li&gt;The resulting HTML is rendered on GitHub.com.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please note that &lt;strong&gt;only the first step&lt;/strong&gt; is covered by this gem ‚Äî the rest happens on GitHub.com. In particular, &lt;code&gt;markup&lt;/code&gt; itself does no sanitization of the resulting HTML, as it expects that to be covered by whatever pipeline is consuming the HTML.&lt;/p&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/github/markup/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; before reporting an issue.&lt;/p&gt; &#xA;&lt;h2&gt;Markups&lt;/h2&gt; &#xA;&lt;p&gt;The following markups are supported. The dependencies listed are required if you wish to run the library. You can also run &lt;code&gt;script/bootstrap&lt;/code&gt; to fetch them all.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;.markdown, .mdown, .mkdn, .md&lt;/a&gt; -- &lt;code&gt;gem install commonmarker&lt;/code&gt; (&lt;a href=&#34;https://github.com/gjtorikian/commonmarker&#34;&gt;https://github.com/gjtorikian/commonmarker&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.promptworks.com/textile&#34;&gt;.textile&lt;/a&gt; -- &lt;code&gt;gem install RedCloth&lt;/code&gt; (&lt;a href=&#34;https://github.com/jgarber/redcloth&#34;&gt;https://github.com/jgarber/redcloth&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruby.github.io/rdoc/&#34;&gt;.rdoc&lt;/a&gt; -- &lt;code&gt;gem install rdoc -v 3.6.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://orgmode.org/&#34;&gt;.org&lt;/a&gt; -- &lt;code&gt;gem install org-ruby&lt;/code&gt; (&lt;a href=&#34;https://github.com/wallyqs/org-ruby&#34;&gt;https://github.com/wallyqs/org-ruby&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wikicreole.org/&#34;&gt;.creole&lt;/a&gt; -- &lt;code&gt;gem install creole&lt;/code&gt; (&lt;a href=&#34;https://github.com/larsch/creole&#34;&gt;https://github.com/larsch/creole&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;.mediawiki, .wiki&lt;/a&gt; -- &lt;code&gt;gem install wikicloth&lt;/code&gt; (&lt;a href=&#34;https://github.com/nricciar/wikicloth&#34;&gt;https://github.com/nricciar/wikicloth&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docutils.sourceforge.net/rst.html&#34;&gt;.rst&lt;/a&gt; -- &lt;code&gt;pip install docutils&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://asciidoc.org/&#34;&gt;.asciidoc, .adoc, .asc&lt;/a&gt; -- &lt;code&gt;gem install asciidoctor&lt;/code&gt; (&lt;a href=&#34;http://asciidoctor.org&#34;&gt;http://asciidoctor.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://search.cpan.org/dist/perl/pod/perlpod.pod&#34;&gt;.pod&lt;/a&gt; -- &lt;code&gt;Pod::Simple::XHTML&lt;/code&gt; comes with Perl &amp;gt;= 5.10. Lower versions should install Pod::Simple from CPAN.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install github-markup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from this directory.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Basic form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;github/markup&#39;&#xA;&#xA;GitHub::Markup.render(&#39;README.markdown&#39;, &#34;* One\n* Two&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More realistic form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;github/markup&#39;&#xA;&#xA;GitHub::Markup.render(file, File.read(file))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a convenience form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;github/markup&#39;&#xA;&#xA;GitHub::Markup.render_s(GitHub::Markups::MARKUP_MARKDOWN, &#34;* One\n* Two&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/github/markup/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-sql-organizing-bears-lab</title>
    <updated>2022-08-02T01:34:16Z</updated>
    <id>tag:github.com,2022-08-02:/learn-co-curriculum/phase-3-sql-organizing-bears-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-sql-organizing-bears-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Organizing Bears Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;CREATE TABLE&lt;/code&gt; command to create a new table with various data types&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;INSERT INTO&lt;/code&gt; command to insert data (i.e. rows) into a database table&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;SELECT&lt;/code&gt; command with various functions and modifiers to write queries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lab Structure&lt;/h2&gt; &#xA;&lt;p&gt;This lab might seem a bit different than what you&#39;ve seen before. Take a look at the file structure and read the comments to understand what each file is used for:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;‚îú‚îÄ‚îÄ Gemfile&#xA;‚îú‚îÄ‚îÄ README.md&#xA;‚îú‚îÄ‚îÄ config&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ environment.rb # requires bundler and files&#xA;‚îú‚îÄ‚îÄ lib&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ create.sql     # where you CREATE your schema&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ insert.sql     # where you INSERT your data&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ seed.sql       # data for in-memory test database&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ sql_queries.rb # where you write your SELECT queries&#xA;‚îî‚îÄ‚îÄ spec               # all the specs&#xA;    ‚îú‚îÄ‚îÄ create_spec.rb # this tests your create.sql file&#xA;    ‚îú‚îÄ‚îÄ insert_spec.rb # this tests your insert.sql file&#xA;    ‚îú‚îÄ‚îÄ select_spec.rb # this tests the queries you write in sql_queries.rb&#xA;    ‚îî‚îÄ‚îÄ spec_helper.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This lab uses the &lt;code&gt;sqlite3&lt;/code&gt; gem to allow us to connect to a SQL database from Ruby. How cool is that!? We&#39;ll use this gem more in the lessons to come.&lt;/p&gt; &#xA;&lt;p&gt;To install the &lt;code&gt;sqlite3&lt;/code&gt; gem, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;bundle install&lt;/code&gt; is a good habit to get into when setting up new Ruby applications with a &lt;code&gt;Gemfile&lt;/code&gt;. As a reminder, the &lt;code&gt;Gemfile&lt;/code&gt; is where we specify the dependencies for a Ruby application. Running &lt;code&gt;bundle install&lt;/code&gt; will download the gems listed in this file to your system.&lt;/p&gt; &#xA;&lt;p&gt;In case you forget though, running &lt;code&gt;learn test&lt;/code&gt; will &lt;strong&gt;also&lt;/strong&gt; run &lt;code&gt;bundle install&lt;/code&gt; if you haven&#39;t already installed the necessary gems.&lt;/p&gt; &#xA;&lt;h3&gt;A Note on Testing&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s briefly go over what is happening in setup blocks that our tests will be using.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;let(:db) do&#xA;  SQLite3::Database.new(&#39;:memory:&#39;)&#xA;end&#xA;&#xA;before do&#xA;  sql = File.read(&#34;lib/create.sql&#34;)&#xA;  db.execute_batch(sql)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before each test, two important things happen.&lt;/p&gt; &#xA;&lt;p&gt;First, a new &lt;em&gt;in-memory&lt;/em&gt; database is created. Why do we do this instead of creating a database file? Let&#39;s say we run our tests and they add ten items to our database. If we did not use an in-memory store, those would be in there forever. This way, our database gets thrown out after every running of the tests. You can learn more about in-memory databases &lt;a href=&#34;https://www.sqlite.org/inmemorydb.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Next, the test opens the &lt;code&gt;.sql&lt;/code&gt; file, and runs the SQL code in that file in that in-memory database.&lt;/p&gt; &#xA;&lt;h2&gt;Part 1: &lt;code&gt;CREATE TABLE&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Get the tests in &lt;code&gt;spec/create_spec.rb&lt;/code&gt; to pass by writing code in the &lt;code&gt;lib/create.sql&lt;/code&gt; file. Your &lt;code&gt;CREATE&lt;/code&gt; statement should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE bears (&#xA;  //columns here&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your columns should be the following types:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;column&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;age&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sex&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;temperament&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alive&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Read about &lt;a href=&#34;https://www.sqlite.org/datatype3.html&#34;&gt;SQLite3 Datatypes&lt;/a&gt; to determine what your insert values are going to be. Be sure to pay attention to how booleans are expressed in SQLite3.&lt;/p&gt; &#xA;&lt;h2&gt;Part 2: &lt;code&gt;INSERT&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Get the tests in &lt;code&gt;spec/insert_spec.rb&lt;/code&gt; to pass by writing code in the &lt;code&gt;lib/insert.sql&lt;/code&gt; file. Input the following 8 bears (you can make up details about them, but make sex either &#39;M&#39; or &#39;F&#39;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mr. Chocolate&lt;/li&gt; &#xA; &lt;li&gt;Rowdy&lt;/li&gt; &#xA; &lt;li&gt;Tabitha&lt;/li&gt; &#xA; &lt;li&gt;Sergeant Brown&lt;/li&gt; &#xA; &lt;li&gt;Melissa&lt;/li&gt; &#xA; &lt;li&gt;Grinch&lt;/li&gt; &#xA; &lt;li&gt;Wendy&lt;/li&gt; &#xA; &lt;li&gt;unnamed (refer back to how to create a record that doesn&#39;t have one value)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Part 3: &lt;code&gt;SELECT&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Get the tests in &lt;code&gt;spec/select_spec.rb&lt;/code&gt; to pass. Note that for this section, the database will be seeded with external data from the &lt;code&gt;lib/seed.sql&lt;/code&gt; file so don&#39;t expect it to reflect the data you added above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Since it&#39;s a Ruby file, write your queries as strings within methods in the &lt;code&gt;lib/sql_queries.rb&lt;/code&gt; file. For example, to pass the first test, your Ruby method should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;def selects_all_female_bears_return_name_and_age&#xA;  &#34;SELECT bears.name, bears.age FROM bears WHERE sex=&#39;F&#39;;&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also write the SQL strings in a Ruby &lt;a href=&#34;https://www.rubyguides.com/2018/11/ruby-heredoc/&#34;&gt;heredoc&lt;/a&gt; to help with formatting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;def selects_all_female_bears_return_name_and_age&#xA;  &amp;lt;&amp;lt;-SQL&#xA;    SELECT&#xA;      bears.name,&#xA;      bears.age&#xA;    FROM&#xA;      bears&#xA;    WHERE&#xA;      sex=&#39;F&#39;;&#xA;  SQL&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may be expected to use SQL statements that you&#39;re not particularly familiar with. Make sure you use the resources and Google to find the right statements.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/datatype3.html&#34;&gt;SQL Datatypes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/lang_select.html#resultset&#34;&gt;SQL GROUP BY&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>