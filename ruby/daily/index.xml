<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-26T01:35:08Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>geekq/workflow</title>
    <updated>2025-03-26T01:35:08Z</updated>
    <id>tag:github.com,2025-03-26:/geekq/workflow</id>
    <link href="https://github.com/geekq/workflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby finite-state-machine-inspired API for modeling workflow&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Workflow&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://rubygems.org/gems/workflow&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/workflow.svg?sanitize=true&#34; alt=&#34;workflow&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/geekq/workflow/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/geekq/workflow/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;badge&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://codeclimate.com/github/geekq/workflow&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/geekq/workflow/badges/gpa.svg?sanitize=true&#34; alt=&#34;gpa&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://codeclimate.com/github/geekq/workflow/coverage&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/geekq/workflow/badges/coverage.svg?sanitize=true&#34; alt=&#34;coverage&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Note: you can find documentation for specific workflow rubygem versions at &lt;a href=&#34;http://rubygems.org/gems/workflow&#34; class=&#34;bare&#34;&gt;http://rubygems.org/gems/workflow&lt;/a&gt; : select a version (optional, default is latest release), click &#34;Documentation&#34; link. When reading on github.com, the README refers to the upcoming release.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA;   &lt;div id=&#34;toctitle&#34; class=&#34;title&#34;&gt;&#xA;    Table of Contents&#xA;   &lt;/div&gt; &#xA;   &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#what_is_workflow&#34;&gt;What is workflow?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#getting_started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#state_persistence&#34;&gt;State persistence&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#advanced_usage&#34;&gt;Advanced usage&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#documenting_with_diagrams&#34;&gt;Documenting with diagrams&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#support_participation&#34;&gt;Support, Participation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;what_is_workflow&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#what_is_workflow&#34;&gt;What is workflow?&lt;/a&gt;&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Workflow is a finite-state-machine-inspired API for modeling and interacting with what we tend to refer to as &#39;workflow&#39;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;A lot of business modeling tends to involve workflow-like concepts, and the aim of this library is to make the expression of these concepts as clear as possible, using similar terminology as found in state machine theory.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;So, a workflow has a state. It can only be in one state at a time. When a workflow changes state, we call that a transition. Transitions occur on an event, so events cause transitions to occur. Additionally, when an event fires, other arbitrary code can be executed, we call those actions. So any given state has a bunch of events, any event in a state causes a transition to another state and potentially causes code to be executed (an action). We can hook into states when they are entered, and exited from, and we can cause transitions to fail (guards), and we can hook in to every transition that occurs ever for whatever reason we can come up with.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Now, all that’s a mouthful, but we’ll demonstrate the API bit by bit with a real-ish world example.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Let’s say we’re modeling article submission from journalists. An article is written, then submitted. When it’s submitted, it’s awaiting review. Someone reviews the article, and then either accepts or rejects it. Here is the expression of this workflow using the API:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;class Article&#xA;  include Workflow&#xA;  workflow do&#xA;    state :new do&#xA;      event :submit, :transitions_to =&amp;gt; :awaiting_review&#xA;    end&#xA;    state :awaiting_review do&#xA;      event :review, :transitions_to =&amp;gt; :being_reviewed&#xA;    end&#xA;    state :being_reviewed do&#xA;      event :accept, :transitions_to =&amp;gt; :accepted&#xA;      event :reject, :transitions_to =&amp;gt; :rejected&#xA;    end&#xA;    state :accepted&#xA;    state :rejected&#xA;  end&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Nice, isn’t it!&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Note: the first state in the definition (&lt;code&gt;:new&lt;/code&gt; in the example, but you can name it as you wish) is used as the initial state - newly created objects start their life cycle in that state.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Let’s create an article instance and check in which state it is:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;article = Article.new&#xA;article.accepted? # =&amp;gt; false&#xA;article.new? # =&amp;gt; true&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can also access the whole &lt;code&gt;current_state&lt;/code&gt; object including the list of possible events and other meta information:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;literalblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;article.current_state&#xA;=&amp;gt; #&amp;lt;Workflow::State:0x7f1e3d6731f0 @events={&#xA;  :submit=&amp;gt;#&amp;lt;Workflow::Event:0x7f1e3d6730d8 @action=nil,&#xA;    @transitions_to=:awaiting_review, @name=:submit, @meta={}&amp;gt;},&#xA;  name:new, meta{}&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can also check, whether a state comes before or after another state (by the order they were defined):&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;article.current_state # =&amp;gt; being_reviewed&#xA;article.current_state &amp;lt; :accepted # =&amp;gt; true&#xA;article.current_state &amp;gt;= :accepted # =&amp;gt; false&#xA;article.current_state.between? :awaiting_review, :rejected # =&amp;gt; true&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Now we can call the submit event, which transitions to the &lt;code&gt;:awaiting_review&lt;/code&gt; state:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;article.submit!&#xA;article.awaiting_review? # =&amp;gt; true&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Events are actually instance methods on a workflow, and depending on the state you’re in, you’ll have a different set of events used to transition to other states.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;It is also easy to check, if a certain transition is possible from the current state . &lt;code&gt;article.can_submit?&lt;/code&gt; checks if there is a &lt;code&gt;:submit&lt;/code&gt; event (transition) defined for the current state.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;getting_started&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#getting_started&#34;&gt;Getting started&lt;/a&gt;&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;installation&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gem install workflow&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: If you’re interested in graphing your workflow state machine, you will also need to install the &lt;code&gt;activesupport&lt;/code&gt; and &lt;code&gt;ruby-graphviz&lt;/code&gt; gems.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Versions up to and including 1.0.0 are also available as a single file download - &lt;a href=&#34;https://github.com/geekq/workflow/raw/v1.0.0/lib/workflow.rb&#34;&gt;lib/workflow.rb file&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;examples&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;After installation or downloading the library you can easily try out all the example code from this README in irb.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ irb&#xA;require &#39;rubygems&#39;&#xA;require &#39;workflow&#39;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Now just copy and paste the source code from the beginning of this README file snippet by snippet and observe the output.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;transition_event_handler&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#transition_event_handler&#34;&gt;Transition event handler&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The best way is to use convention over configuration and to define a method with the same name as the event. Then it is automatically invoked when event is raised. For the Article workflow defined earlier it would be:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;class Article&#xA;  def reject&#xA;    puts &#39;sending email to the author explaining the reason...&#39;&#xA;  end&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;article.review!; article.reject!&lt;/code&gt; will cause state transition to &lt;code&gt;being_reviewed&lt;/code&gt; state, persist the new state (if integrated with ActiveRecord), invoke this user defined &lt;code&gt;reject&lt;/code&gt; method and finally persist the &lt;code&gt;rejected&lt;/code&gt; state.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Note: on successful transition from one state to another the workflow gem immediately persists the new workflow state with &lt;code&gt;update_column()&lt;/code&gt;, bypassing any ActiveRecord callbacks including &lt;code&gt;updated_at&lt;/code&gt; update. This way it is possible to deal with the validation and to save the pending changes to a record at some later point instead of the moment when transition occurs.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can also define event handler accepting/requiring additional arguments:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;class Article&#xA;  def review(reviewer = &#39;&#39;)&#xA;    puts &#34;[#{reviewer}] is now reviewing the article&#34;&#xA;  end&#xA;end&#xA;&#xA;article2 = Article.new&#xA;article2.submit!&#xA;article2.review!(&#39;Homer Simpson&#39;) # =&amp;gt; [Homer Simpson] is now reviewing the article&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Alternative way is to use a block (only recommended for short event implementation without further code nesting):&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;event :review, :transitions_to =&amp;gt; :being_reviewed do |reviewer|&#xA;  # store the reviewer&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;We’ve noticed, that mixing the list of events and states with the blocks invoked for particular transitions leads to a bumpy and poorly readable code due to a deep nesting. We tried (and dismissed) lambdas for this. Eventually we decided to invoke an optional user defined callback method with the same name as the event (convention over configuration) as explained before.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;state_persistence&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#state_persistence&#34;&gt;State persistence&lt;/a&gt;&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;activerecord&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#activerecord&#34;&gt;ActiveRecord&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Note: Workflow 2.0 is a major refactoring for the &lt;code&gt;worklow&lt;/code&gt; library. If your application suddenly breaks after the workflow 2.0 release, you’ve probably got your Gemfile wrong ;-). workflow uses &lt;a href=&#34;https://guides.rubygems.org/patterns/#semantic-versioning&#34;&gt;semantic versioning&lt;/a&gt;. For highest compatibility please reference the desired major+minor version.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Note on ActiveRecord/Rails 4.&lt;strong&gt;, 5.&lt;/strong&gt; Support:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Since integration with ActiveRecord makes over 90% of the issues and maintenance effort, and also to allow for an independent (faster) release cycle for Rails support, starting with workflow &lt;strong&gt;version 2.0&lt;/strong&gt; in January 2019 the support for ActiveRecord (4.&lt;strong&gt;, 5.&lt;/strong&gt; and newer) has been extracted into a separate gem. Read at &lt;a href=&#34;https://github.com/geekq/workflow-activerecord&#34;&gt;workflow-activerecord&lt;/a&gt;, how to include the right gem.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To use legacy built-in ActiveRecord 2.3 - 4.* support, reference Workflow 1.2 in your Gemfile:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;gem &#39;workflow&#39;, &#39;~&amp;gt; 1.2&#39;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;custom_workflow_state_persistence&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#custom_workflow_state_persistence&#34;&gt;Custom workflow state persistence&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you do not use a relational database and ActiveRecord, you can still integrate the workflow very easily. To implement persistence you just need to override &lt;code&gt;load_workflow_state&lt;/code&gt; and &lt;code&gt;persist_workflow_state(new_value)&lt;/code&gt; methods. Next section contains an example for using CouchDB, a document oriented database.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;http://tim.lossen.de/&#34;&gt;Tim Lossen&lt;/a&gt; implemented support for &lt;a href=&#34;http://github.com/tlossen/remodel&#34;&gt;remodel&lt;/a&gt; / &lt;a href=&#34;http://github.com/antirez/redis&#34;&gt;redis&lt;/a&gt; key-value store.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;integration_with_couchdb&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#integration_with_couchdb&#34;&gt;Integration with CouchDB&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;We are using the compact &lt;a href=&#34;http://github.com/geekq/couchtiny&#34;&gt;couchtiny library&lt;/a&gt; here. But the implementation would look similar for the popular couchrest library.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;require &#39;couchtiny&#39;&#xA;require &#39;couchtiny/document&#39;&#xA;require &#39;workflow&#39;&#xA;&#xA;class User &amp;lt; CouchTiny::Document&#xA;  include Workflow&#xA;  workflow do&#xA;    state :submitted do&#xA;      event :activate_via_link, :transitions_to =&amp;gt; :proved_email&#xA;    end&#xA;    state :proved_email&#xA;  end&#xA;&#xA;  def load_workflow_state&#xA;    self[:workflow_state]&#xA;  end&#xA;&#xA;  def persist_workflow_state(new_value)&#xA;    self[:workflow_state] = new_value&#xA;    save!&#xA;  end&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Please also have a look at &lt;a href=&#34;http://github.com/geekq/workflow/blob/develop/test/couchtiny_example.rb&#34;&gt;the full source code&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;adapters_to_support_other_databases&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#adapters_to_support_other_databases&#34;&gt;Adapters to support other databases&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;I get a lot of requests to integrate persistence support for different databases, object-relational adapters, column stores, document databases.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To enable highest possible quality, avoid too many dependencies and to avoid unneeded maintenance burden on the &lt;code&gt;workflow&lt;/code&gt; core it is best to implement such support as a separate gem.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Only support for the ActiveRecord will remain for the foreseeable future. So Rails beginners can expect &lt;code&gt;workflow&lt;/code&gt; to work with Rails out of the box. Other already included adapters stay for a while but should be extracted to separate gems.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you want to implement support for your favorite ORM mapper or your favorite NoSQL database, you just need to implement a module which overrides the persistence methods &lt;code&gt;load_workflow_state&lt;/code&gt; and &lt;code&gt;persist_workflow_state&lt;/code&gt;. Example:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;module Workflow&#xA;  module SuperCoolDb&#xA;    module InstanceMethods&#xA;      def load_workflow_state&#xA;        # Load and return the workflow_state from some storage.&#xA;        # You can use self.class.workflow_column configuration.&#xA;      end&#xA;&#xA;      def persist_workflow_state(new_value)&#xA;        # save the new_value workflow state&#xA;      end&#xA;    end&#xA;&#xA;    module ClassMethods&#xA;      # class methods of your adapter go here&#xA;    end&#xA;&#xA;    def self.included(klass)&#xA;      klass.send :include, InstanceMethods&#xA;      klass.extend ClassMethods&#xA;    end&#xA;  end&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The user of the adapter can use it then as:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;class Article&#xA;  include Workflow&#xA;  include Workflow:SuperCoolDb&#xA;  workflow do&#xA;    state :submitted&#xA;    # ...&#xA;  end&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;I can then link to your implementation from this README. Please let me also know, if you need any interface beyond &lt;code&gt;load_workflow_state&lt;/code&gt; and &lt;code&gt;persist_workflow_state&lt;/code&gt; methods to implement an adapter for your favorite database.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;advanced_usage&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#advanced_usage&#34;&gt;Advanced usage&lt;/a&gt;&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;conditional_event_transitions&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#conditional_event_transitions&#34;&gt;Conditional event transitions&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Conditions can be a &#34;method name symbol&#34; with a corresponding instance method, a &lt;code&gt;proc&lt;/code&gt; or &lt;code&gt;lambda&lt;/code&gt; which are added to events, like so:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;state :off&#xA;  event :turn_on, :transition_to =&amp;gt; :on,&#xA;                  :if =&amp;gt; :sufficient_battery_level?&#xA;&#xA;  event :turn_on, :transition_to =&amp;gt; :low_battery,&#xA;                  :if =&amp;gt; proc { |device| device.battery_level &amp;gt; 0 }&#xA;end&#xA;&#xA;# corresponding instance method&#xA;def sufficient_battery_level?&#xA;  battery_level &amp;gt; 10&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;When calling a &lt;code&gt;device.can_&amp;lt;fire_event&amp;gt;?&lt;/code&gt; check, or attempting a &lt;code&gt;device.&amp;lt;event&amp;gt;!&lt;/code&gt;, each event is checked in turn:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;With no &lt;code&gt;:if&lt;/code&gt; check, proceed as usual.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;If an &lt;code&gt;:if&lt;/code&gt; check is present, proceed if it evaluates to true, or drop to the next event.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;If you’ve run out of events to check (eg. &lt;code&gt;battery_level == 0&lt;/code&gt;), then the transition isn’t possible.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can also pass additional arguments, which can be evaluated by :if methods or procs. See examples in &lt;a href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/test/conditionals_test.rb#L45&#34;&gt;conditionals_test.rb&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;advanced_transition_hooks&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#advanced_transition_hooks&#34;&gt;Advanced transition hooks&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;on_entryon_exit&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#on_entryon_exit&#34;&gt;on_entry/on_exit&lt;/a&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;We already had a look at the declaring callbacks for particular workflow events. If you would like to react to all transitions to/from the same state in the same way you can use the on_entry/on_exit hooks. You can either define it with a block inside the workflow definition or through naming convention, e.g. for the state :pending just define the method &lt;code&gt;on_pending_exit(new_state, event, *args)&lt;/code&gt; somewhere in your class.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;on_transition&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#on_transition&#34;&gt;on_transition&lt;/a&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;If you want to be informed about everything happening everywhere, e.g. for logging then you can use the universal &lt;code&gt;on_transition&lt;/code&gt; hook:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;workflow do&#xA;  state :one do&#xA;    event :increment, :transitions_to =&amp;gt; :two&#xA;  end&#xA;  state :two&#xA;  on_transition do |from, to, triggering_event, *event_args|&#xA;    Log.info &#34;#{from} -&amp;gt; #{to}&#34;&#xA;  end&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;on_error&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#on_error&#34;&gt;on_error&lt;/a&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;If you want to do custom exception handling internal to workflow, you can define an &lt;code&gt;on_error&lt;/code&gt; hook in your workflow. For example:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;workflow do&#xA;  state :first do&#xA;    event :forward, :transitions_to =&amp;gt; :second&#xA;  end&#xA;  state :second&#xA;&#xA;  on_error do |error, from, to, event, *args|&#xA;    Log.info &#34;Exception(#{error.class}) on #{from} -&amp;gt; #{to}&#34;&#xA;  end&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;If forward! results in an exception, &lt;code&gt;on_error&lt;/code&gt; is invoked and the workflow stays in a &#39;first&#39; state. This capability is particularly useful if your errors are transient and you want to queue up a job to retry in the future without affecting the existing workflow state.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;guards&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#guards&#34;&gt;Guards&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you want to halt the transition conditionally, you can just raise an exception in your [transition event handler](#transition_event_handler). There is a helper called &lt;code&gt;halt!&lt;/code&gt;, which raises the Workflow::TransitionHalted exception. You can provide an additional &lt;code&gt;halted_because&lt;/code&gt; parameter.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;def reject(reason)&#xA;  halt! &#39;We do not reject articles unless the reason is important&#39;     unless reason =~ /important/i&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The traditional &lt;code&gt;halt&lt;/code&gt; (without the exclamation mark) is still supported too. This just prevents the state change without raising an exception.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can check &lt;code&gt;halted?&lt;/code&gt; and &lt;code&gt;halted_because&lt;/code&gt; values later.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;hook_order&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#hook_order&#34;&gt;Hook order&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The whole event sequence is as follows:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;before_transition&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;event specific action&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;on_transition (if action did not halt)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;on_exit&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;PERSIST WORKFLOW STATE (i.e. transition) or on_error&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;on_entry&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;after_transition&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;accessing_your_workflow_specification&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#accessing_your_workflow_specification&#34;&gt;Accessing your workflow specification&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can easily reflect on workflow specification programmatically - for the whole class or for the current object. Examples:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;article2.current_state.events # lists possible events from here&#xA;article2.current_state.events[:reject].transitions_to # =&amp;gt; :rejected&#xA;&#xA;Article.workflow_spec.states.keys&#xA;#=&amp;gt; [:rejected, :awaiting_review, :being_reviewed, :accepted, :new]&#xA;&#xA;Article.workflow_spec.state_names&#xA;#=&amp;gt; [:rejected, :awaiting_review, :being_reviewed, :accepted, :new]&#xA;&#xA;# list all events for all states&#xA;Article.workflow_spec.states.values.collect &amp;amp;:events&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can also store and later retrieve additional meta data for every state and every event:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;class MyProcess&#xA;  include Workflow&#xA;  workflow do&#xA;    state :main, :meta =&amp;gt; {:importance =&amp;gt; 8}&#xA;    state :supplemental, :meta =&amp;gt; {:importance =&amp;gt; 1}&#xA;  end&#xA;end&#xA;puts MyProcess.workflow_spec.states[:supplemental].meta[:importance] # =&amp;gt; 1&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The workflow library itself uses this feature to tweak the graphical representation of the workflow. See below.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;defining_workflow_dynamically_from_json&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#defining_workflow_dynamically_from_json&#34;&gt;Defining workflow dynamically from JSON&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;For an advance example please see &lt;a href=&#34;https://github.com/geekq/workflow/raw/develop/test/workflow_from_json_test.rb&#34;&gt;workflow_from_json_test.rb&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;compose_workflow_definition_with_include&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#compose_workflow_definition_with_include&#34;&gt;Compose workflow definition with &lt;code&gt;include&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In case you have very extensive workflow definition or would like to reuse workflow definition for different classes, you can include parts like in the &lt;a href=&#34;https://github.com/geekq/workflow/raw/develop/test/main_test.rb#L95-L110&#34;&gt;&lt;code&gt;including a child workflow definition&lt;/code&gt; example&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;documenting_with_diagrams&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#documenting_with_diagrams&#34;&gt;Documenting with diagrams&lt;/a&gt;&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can generate a graphical representation of the workflow for a particular class for documentation purposes. Use &lt;code&gt;Workflow::create_workflow_diagram(class)&lt;/code&gt; in your rake task like:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-rb&#34; data-lang=&#34;rb&#34;&gt;namespace :doc do&#xA;  desc &#34;Generate a workflow graph for a model passed e.g. as &#39;MODEL=Order&#39;.&#34;&#xA;  task :workflow =&amp;gt; :environment do&#xA;    require &#39;workflow/draw&#39;&#xA;    Workflow::Draw::workflow_diagram(ENV[&#39;MODEL&#39;].constantize)&#xA;  end&#xA;end&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;support_participation&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#support_participation&#34;&gt;Support, Participation&lt;/a&gt;&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;reporting_bugs&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#reporting_bugs&#34;&gt;Reporting bugs&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;http://github.com/geekq/workflow/issues&#34; class=&#34;bare&#34;&gt;http://github.com/geekq/workflow/issues&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;development_setup&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#development_setup&#34;&gt;Development Setup&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt-get install graphviz # Linux&#xA;brew install graphviz # Mac OS&#xA;cd workflow&#xA;gem install bundler&#xA;bundle install&#xA;# run all the tests&#xA;bundle exec rake test&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;check_list_for_you_pull_request&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#check_list_for_you_pull_request&#34;&gt;Check list for you pull request&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist checklist&#34;&gt; &#xA;    &lt;ul class=&#34;checklist&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;❏ unit tests for the new behavior provided: new tests fail without you change, all tests succeed with your change&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;❏ documentation update included&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;other_3rd_party_libraries&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#other_3rd_party_libraries&#34;&gt;Other 3rd party libraries&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://github.com/kwent/active_admin-workflow&#34;&gt;ActiveAdmin-Workflow&lt;/a&gt; - is an integration with &lt;a href=&#34;https://github.com/activeadmin/activeadmin&#34;&gt;ActiveAdmin&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;about&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/geekq/workflow/develop/#about&#34;&gt;About&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Author: Vladimir Dobriakov, &lt;a href=&#34;https://infrastructure-as-code.de&#34; class=&#34;bare&#34;&gt;https://infrastructure-as-code.de&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Copyright (c) 2010-2024 Vladimir Dobriakov and Contributors&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Copyright (c) 2008-2009 Vodafone&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Copyright (c) 2007-2008 Ryan Allen, FlashDen Pty Ltd&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Based on the work of Ryan Allen and Scott Barron&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Licensed under MIT license, see the MIT-LICENSE file.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>