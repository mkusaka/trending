<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-22T01:34:02Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rspec/rspec-core</title>
    <updated>2022-07-22T01:34:02Z</updated>
    <id>tag:github.com,2022-07-22:/rspec/rspec-core</id>
    <link href="https://github.com/rspec/rspec-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RSpec runner and formatters&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rspec-core &lt;a href=&#34;https://github.com/rspec/rspec-core/actions&#34;&gt;&lt;img src=&#34;https://github.com/rspec/rspec-core/workflows/RSpec%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rspec/rspec-core&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rspec/rspec-core.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;rspec-core provides the structure for writing executable examples of how your code should behave, and an &lt;code&gt;rspec&lt;/code&gt; command with tools to constrain which examples get run and tailor the output.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install rspec      # for rspec-core, rspec-expectations, rspec-mocks&#xA;gem install rspec-core # for rspec-core only&#xA;rspec --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want to run against the &lt;code&gt;main&lt;/code&gt; branch? You&#39;ll need to include the dependent RSpec repos as well. Add the following to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%w[rspec rspec-core rspec-expectations rspec-mocks rspec-support].each do |lib|&#xA;  gem lib, :git =&amp;gt; &#34;https://github.com/rspec/#{lib}.git&#34;, :branch =&amp;gt; &#39;main&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Structure&lt;/h2&gt; &#xA;&lt;p&gt;RSpec uses the words &#34;describe&#34; and &#34;it&#34; so we can express concepts like a conversation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;Describe an order.&#34;&#xA;&#34;It sums the prices of its line items.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe Order do&#xA;  it &#34;sums the prices of its line items&#34; do&#xA;    order = Order.new&#xA;&#xA;    order.add_entry(LineItem.new(:item =&amp;gt; Item.new(&#xA;      :price =&amp;gt; Money.new(1.11, :USD)&#xA;    )))&#xA;    order.add_entry(LineItem.new(:item =&amp;gt; Item.new(&#xA;      :price =&amp;gt; Money.new(2.22, :USD),&#xA;      :quantity =&amp;gt; 2&#xA;    )))&#xA;&#xA;    expect(order.total).to eq(Money.new(5.55, :USD))&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;describe&lt;/code&gt; method creates an &lt;a href=&#34;http://rubydoc.info/gems/rspec-core/RSpec/Core/ExampleGroup&#34;&gt;ExampleGroup&lt;/a&gt;. Within the block passed to &lt;code&gt;describe&lt;/code&gt; you can declare examples using the &lt;code&gt;it&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, an example group is a class in which the block passed to &lt;code&gt;describe&lt;/code&gt; is evaluated. The blocks passed to &lt;code&gt;it&lt;/code&gt; are evaluated in the context of an &lt;em&gt;instance&lt;/em&gt; of that class.&lt;/p&gt; &#xA;&lt;h2&gt;Nested Groups&lt;/h2&gt; &#xA;&lt;p&gt;You can also declare nested groups using the &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe Order do&#xA;  context &#34;with no items&#34; do&#xA;    it &#34;behaves one way&#34; do&#xA;      # ...&#xA;    end&#xA;  end&#xA;&#xA;  context &#34;with one item&#34; do&#xA;    it &#34;behaves another way&#34; do&#xA;      # ...&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nested groups are subclasses of the outer example group class, providing the inheritance semantics you&#39;d want for free.&lt;/p&gt; &#xA;&lt;h2&gt;Aliases&lt;/h2&gt; &#xA;&lt;p&gt;You can declare example groups using either &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt;. For a top level example group, &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; are available off of &lt;code&gt;RSpec&lt;/code&gt;. For backwards compatibility, they are also available off of the &lt;code&gt;main&lt;/code&gt; object and &lt;code&gt;Module&lt;/code&gt; unless you disable monkey patching.&lt;/p&gt; &#xA;&lt;p&gt;You can declare examples within a group using any of &lt;code&gt;it&lt;/code&gt;, &lt;code&gt;specify&lt;/code&gt;, or &lt;code&gt;example&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shared Examples and Contexts&lt;/h2&gt; &#xA;&lt;p&gt;Declare a shared example group using &lt;code&gt;shared_examples&lt;/code&gt;, and then include it in any group using &lt;code&gt;include_examples&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.shared_examples &#34;collections&#34; do |collection_class|&#xA;  it &#34;is empty when first created&#34; do&#xA;    expect(collection_class.new).to be_empty&#xA;  end&#xA;end&#xA;&#xA;RSpec.describe Array do&#xA;  include_examples &#34;collections&#34;, Array&#xA;end&#xA;&#xA;RSpec.describe Hash do&#xA;  include_examples &#34;collections&#34;, Hash&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nearly anything that can be declared within an example group can be declared within a shared example group. This includes &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, and &lt;code&gt;around&lt;/code&gt; hooks, &lt;code&gt;let&lt;/code&gt; declarations, and nested groups/contexts.&lt;/p&gt; &#xA;&lt;p&gt;You can also use the names &lt;code&gt;shared_context&lt;/code&gt; and &lt;code&gt;include_context&lt;/code&gt;. These are pretty much the same as &lt;code&gt;shared_examples&lt;/code&gt; and &lt;code&gt;include_examples&lt;/code&gt;, providing more accurate naming when you share hooks, &lt;code&gt;let&lt;/code&gt; declarations, helper methods, etc, but no examples.&lt;/p&gt; &#xA;&lt;h2&gt;Metadata&lt;/h2&gt; &#xA;&lt;p&gt;rspec-core stores a metadata hash with every example and group, which contains their descriptions, the locations at which they were declared, etc, etc. This hash powers many of rspec-core&#39;s features, including output formatters (which access descriptions and locations), and filtering before and after hooks.&lt;/p&gt; &#xA;&lt;p&gt;Although you probably won&#39;t ever need this unless you are writing an extension, you can access it from an example like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;it &#34;does something&#34; do |example|&#xA;  expect(example.metadata[:description]).to eq(&#34;does something&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;described_class&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When a class is passed to &lt;code&gt;describe&lt;/code&gt;, you can access it from an example using the &lt;code&gt;described_class&lt;/code&gt; method, which is a wrapper for &lt;code&gt;example.metadata[:described_class]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe Widget do&#xA;  example do&#xA;    expect(described_class).to equal(Widget)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful in extensions or shared example groups in which the specific class is unknown. Taking the collections shared example group from above, we can clean it up a bit using &lt;code&gt;described_class&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.shared_examples &#34;collections&#34; do&#xA;  it &#34;is empty when first created&#34; do&#xA;    expect(described_class.new).to be_empty&#xA;  end&#xA;end&#xA;&#xA;RSpec.describe Array do&#xA;  include_examples &#34;collections&#34;&#xA;end&#xA;&#xA;RSpec.describe Hash do&#xA;  include_examples &#34;collections&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;A Word on Scope&lt;/h2&gt; &#xA;&lt;p&gt;RSpec has two scopes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Example Group&lt;/strong&gt;: Example groups are defined by a &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt; block, which is eagerly evaluated when the spec file is loaded. The block is evaluated in the context of a subclass of &lt;code&gt;RSpec::Core::ExampleGroup&lt;/code&gt;, or a subclass of the parent example group when you&#39;re nesting them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;: Examples -- typically defined by an &lt;code&gt;it&lt;/code&gt; block -- and any other blocks with per-example semantics -- such as a &lt;code&gt;before(:example)&lt;/code&gt; hook -- are evaluated in the context of an &lt;em&gt;instance&lt;/em&gt; of the example group class to which the example belongs. Examples are &lt;em&gt;not&lt;/em&gt; executed when the spec file is loaded; instead, RSpec waits to run any examples until all spec files have been loaded, at which point it can apply filtering, randomization, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To make this more concrete, consider this code snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe &#34;Using an array as a stack&#34; do&#xA;  def build_stack&#xA;    []&#xA;  end&#xA;&#xA;  before(:example) do&#xA;    @stack = build_stack&#xA;  end&#xA;&#xA;  it &#39;is initially empty&#39; do&#xA;    expect(@stack).to be_empty&#xA;  end&#xA;&#xA;  context &#34;after an item has been pushed&#34; do&#xA;    before(:example) do&#xA;      @stack.push :item&#xA;    end&#xA;&#xA;    it &#39;allows the pushed item to be popped&#39; do&#xA;      expect(@stack.pop).to eq(:item)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Under the covers, this is (roughly) equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class UsingAnArrayAsAStack &amp;lt; RSpec::Core::ExampleGroup&#xA;  def build_stack&#xA;    []&#xA;  end&#xA;&#xA;  def before_example_1&#xA;    @stack = build_stack&#xA;  end&#xA;&#xA;  def it_is_initially_empty&#xA;    expect(@stack).to be_empty&#xA;  end&#xA;&#xA;  class AfterAnItemHasBeenPushed &amp;lt; self&#xA;    def before_example_2&#xA;      @stack.push :item&#xA;    end&#xA;&#xA;    def it_allows_the_pushed_item_to_be_popped&#xA;      expect(@stack.pop).to eq(:item)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run these examples, RSpec would (roughly) do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;example_1 = UsingAnArrayAsAStack.new&#xA;example_1.before_example_1&#xA;example_1.it_is_initially_empty&#xA;&#xA;example_2 = UsingAnArrayAsAStack::AfterAnItemHasBeenPushed.new&#xA;example_2.before_example_1&#xA;example_2.before_example_2&#xA;example_2.it_allows_the_pushed_item_to_be_popped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The &lt;code&gt;rspec&lt;/code&gt; Command&lt;/h2&gt; &#xA;&lt;p&gt;When you install the rspec-core gem, it installs the &lt;code&gt;rspec&lt;/code&gt; executable, which you&#39;ll use to run rspec. The &lt;code&gt;rspec&lt;/code&gt; command comes with many useful options. Run &lt;code&gt;rspec --help&lt;/code&gt; to see the complete list.&lt;/p&gt; &#xA;&lt;h2&gt;Store Command Line Options &lt;code&gt;.rspec&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can store command line options in a &lt;code&gt;.rspec&lt;/code&gt; file in the project&#39;s root directory, and the &lt;code&gt;rspec&lt;/code&gt; command will read them as though you typed them on the command line.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Start with a simple example of behavior you expect from your system. Do this before you write any implementation code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in spec/calculator_spec.rb&#xA;RSpec.describe Calculator do&#xA;  describe &#39;#add&#39; do&#xA;    it &#39;returns the sum of its arguments&#39; do&#xA;      expect(Calculator.new.add(1, 2)).to eq(3)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run this with the rspec command, and watch it fail:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec spec/calculator_spec.rb&#xA;./spec/calculator_spec.rb:1: uninitialized constant Calculator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Address the failure by defining a skeleton of the &lt;code&gt;Calculator&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in lib/calculator.rb&#xA;class Calculator&#xA;  def add(a, b)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to require the implementation file in the spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in spec/calculator_spec.rb&#xA;# - RSpec adds ./lib to the $LOAD_PATH&#xA;require &#34;calculator&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run the spec again, and watch the expectation fail:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec spec/calculator_spec.rb&#xA;F&#xA;&#xA;Failures:&#xA;&#xA;  1) Calculator#add returns the sum of its arguments&#xA;     Failure/Error: expect(Calculator.new.add(1, 2)).to eq(3)&#xA;&#xA;       expected: 3&#xA;            got: nil&#xA;&#xA;       (compared using ==)&#xA;     # ./spec/calcalator_spec.rb:6:in `block (3 levels) in &amp;lt;top (required)&amp;gt;&#39;&#xA;&#xA;Finished in 0.00131 seconds (files took 0.10968 seconds to load)&#xA;1 example, 1 failure&#xA;&#xA;Failed examples:&#xA;&#xA;rspec ./spec/calcalator_spec.rb:5 # Calculator#add returns the sum of its arguments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Implement the simplest solution, by changing the definition of &lt;code&gt;Calculator#add&lt;/code&gt; to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def add(a, b)&#xA;  a + b&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run the spec again, and watch it pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec spec/calculator_spec.rb&#xA;.&#xA;&#xA;Finished in 0.000315 seconds&#xA;1 example, 0 failures&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;documentation&lt;/code&gt; formatter to see the resulting spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec spec/calculator_spec.rb --format doc&#xA;Calculator&#xA;  #add&#xA;    returns the sum of its arguments&#xA;&#xA;Finished in 0.000379 seconds&#xA;1 example, 0 failures&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve set up the environment, you&#39;ll need to cd into the working directory of whichever repo you want to work in. From there you can run the specs and cucumber features, and make patches.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You do not need to use rspec-dev to work on a specific RSpec repo. You can treat each RSpec repo as an independent project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-core/main/BUILD_DETAIL.md&#34;&gt;Build details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-core/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-core/main/CONTRIBUTING.md&#34;&gt;Detailed contributing guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-core/main/DEVELOPMENT.md&#34;&gt;Development setup guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Also see&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;https://github.com/rspec/rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-expectations&#34;&gt;https://github.com/rspec/rspec-expectations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-mocks&#34;&gt;https://github.com/rspec/rspec-mocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails&#34;&gt;https://github.com/rspec/rspec-rails&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/tapioca</title>
    <updated>2022-07-22T01:34:02Z</updated>
    <id>tag:github.com,2022-07-22:/Shopify/tapioca</id>
    <link href="https://github.com/Shopify/tapioca" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The swiss army knife of RBI generation&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: This software is currently under active development. The API and interface should be considered unstable until a v1.0.0 release.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Tapioca logo&#34; width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/misc/tapioca-logo.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Tapioca - The swiss army knife of RBI generation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Shopify/tapioca/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tapioca makes it easy to work with &lt;a href=&#34;https://sorbet.org&#34;&gt;Sorbet&lt;/a&gt; in your codebase. It surfaces types and methods from many sources that Sorbet cannot otherwise see – such as gems, Rails and other DSLs – compiles them into &lt;a href=&#34;https://sorbet.org/docs/rbi&#34;&gt;RBI files&lt;/a&gt; and makes it easy for you to add gradual typing to your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy installation and configuration&lt;/li&gt; &#xA; &lt;li&gt;Generation of RBI files for the gems used in your application &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatic generation from your application&#39;s Gemfile&lt;/li&gt; &#xA;   &lt;li&gt;Importing of signatures from the source code of gems&lt;/li&gt; &#xA;   &lt;li&gt;Importing of documentation from the source code of gems&lt;/li&gt; &#xA;   &lt;li&gt;Synchronization validation for your CI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generation of RBI files for various DSL patterns that relies on meta-programming &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatic generation from your application&#39;s content&lt;/li&gt; &#xA;   &lt;li&gt;Support many DSL patterns such as Rails, Google Protobuf, SmartProperties and more out of the box&lt;/li&gt; &#xA;   &lt;li&gt;Extensible interface that allows you to write your own DSL compilers for other DSL patterns&lt;/li&gt; &#xA;   &lt;li&gt;Automatic generation of signatures for methods from known DSLs&lt;/li&gt; &#xA;   &lt;li&gt;Synchronization validation for your CI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Management of shim RBI files &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Find useless definitions in shim RBI files from gems generated RBI files&lt;/li&gt; &#xA;   &lt;li&gt;Find useless definitions in shim RBI files from DSL generated RBI files&lt;/li&gt; &#xA;   &lt;li&gt;Find useless definitions in shim RBI files from Sorbet&#39;s embedded RBI for core and stdlib&lt;/li&gt; &#xA;   &lt;li&gt;Synchronization validation for your CI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents &#xA; &lt;!-- no_toc --&gt;&lt;/h2&gt; &#xA;&lt;!-- START_TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#generating-rbi-files-for-gems&#34;&gt;Generating RBI files for gems&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#manually-requiring-parts-of-a-gem&#34;&gt;Manually requiring parts of a gem&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#excluding-a-gem-from-rbi-generation&#34;&gt;Excluding a gem from RBI generation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#changing-the-strictness-level-of-the-rbi-for-a-gem&#34;&gt;Changing the strictness level of the RBI for a gem&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#keeping-rbi-files-for-gems-up-to-date&#34;&gt;Keeping RBI files for gems up-to-date&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#pulling-rbi-annotations-from-remote-sources&#34;&gt;Pulling RBI annotations from remote sources&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#basic-authentication&#34;&gt;Basic authentication&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#using-a-netrc-file&#34;&gt;Using a .netrc file&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#changing-the-typed-strictness-of-annotations-files&#34;&gt;Changing the typed strictness of annotations files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#generating-rbi-files-for-rails-and-other-dsls&#34;&gt;Generating RBI files for Rails and other DSLs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#keeping-rbi-files-for-dsls-up-to-date&#34;&gt;Keeping RBI files for DSLs up-to-date&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#writing-custom-dsl-compilers&#34;&gt;Writing custom DSL compilers&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#rbi-files-for-missing-constants-and-methods&#34;&gt;RBI files for missing constants and methods&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#generating-the-rbi-file-for-missing-constants&#34;&gt;Generating the RBI file for missing constants&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#manually-writing-rbi-definitions-shims&#34;&gt;Manually writing RBI definitions (shims)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END_TOC --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;group :development do&#xA;  gem &#39;tapioca&#39;, require: false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;bundle install&lt;/code&gt; and make sure Tapioca is properly installed:&lt;/p&gt; &#xA;&lt;!-- START_HELP --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help&#xA;&#xA;Commands:&#xA;  tapioca --version, -v      # show version&#xA;  tapioca annotations        # Pull gem RBI annotations from remote sources&#xA;  tapioca check-shims        # check duplicated definitions in shim RBIs&#xA;  tapioca configure          # initialize folder structure and type checking configuration&#xA;  tapioca dsl [constant...]  # generate RBIs for dynamic methods&#xA;  tapioca gem [gem...]       # generate RBIs from gems&#xA;  tapioca help [COMMAND]     # Describe available commands or one specific command&#xA;  tapioca init               # get project ready for type checking&#xA;  tapioca require            # generate the list of files to be required by tapioca&#xA;  tapioca todo               # generate the list of unresolved constants&#xA;&#xA;Options:&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]  # Path to the Tapioca configuration file&#xA;                                     # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]    # Verbose output for debugging purposes&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP --&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Execute this command to get started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle exec tapioca init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create the &lt;a href=&#34;https://sorbet.org/docs/cli#config-file&#34;&gt;configuration file for Sorbet&lt;/a&gt;, the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#Configuration&#34;&gt;configuration file for Tapioca&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/#manually-requiring-parts-of-a-gem&#34;&gt;require.rb file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;install the &lt;a href=&#34;https://bundler.io/man/bundle-binstubs.1.html#DESCRIPTION&#34;&gt;binstub&lt;/a&gt; for Tapioca in your app&#39;s &lt;code&gt;bin/&lt;/code&gt; folder, so that you can use &lt;code&gt;bin/tapioca&lt;/code&gt; to run commands in your app&lt;/li&gt; &#xA; &lt;li&gt;pull the community RBI annotations from the &lt;a href=&#34;https://github.com/Shopify/rbi-central&#34;&gt;central repository&lt;/a&gt; matching your app&#39;s gems&lt;/li&gt; &#xA; &lt;li&gt;generate the RBIs for your app&#39;s gems&lt;/li&gt; &#xA; &lt;li&gt;generate the RBI file for missing constants&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See the following sections for more details about each step.&lt;/p&gt; &#xA;&lt;!-- START_HELP_COMMAND_INIT --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help init&#xA;&#xA;Usage:&#xA;  tapioca init&#xA;&#xA;Options:&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]  # Path to the Tapioca configuration file&#xA;                                     # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]    # Verbose output for debugging purposes&#xA;&#xA;get project ready for type checking&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_INIT --&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Generating RBI files for gems&lt;/h3&gt; &#xA;&lt;p&gt;Sorbet does not read the code in your gem dependencies, so it does not know the constants and methods declared inside gems. Tapioca is able to load your gem dependencies from your application&#39;s &lt;code&gt;Gemfile&lt;/code&gt; and compile RBI files to represent their content.&lt;/p&gt; &#xA;&lt;p&gt;In order to generate the RBI files for the gems used in your application, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca gems [gems...]&#xA;&#xA;Removing RBI files of gems that have been removed:&#xA;&#xA;  Nothing to do.&#xA;&#xA;Generating RBI files of gems that are added or updated:&#xA;&#xA;  Requiring all gems to prepare for compiling...    Done&#xA;&#xA;  Compiled ansi&#xA;      create  sorbet/rbi/gems/ansi@1.5.0.rbi&#xA;&#xA;  ...&#xA;&#xA;All operations performed in working directory.&#xA;Please review changes and commit them.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will load your application, find all the gems required by it and generate an RBI file for each gem under the &lt;code&gt;sorbet/rbi/gems&lt;/code&gt; directory for each of those gems. This process will also import signatures that can be found inside each gem sources, and, optionally, any YARD documentation inside the gem.&lt;/p&gt; &#xA;&lt;!-- START_HELP_COMMAND_GEM --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help gem&#xA;&#xA;Usage:&#xA;  tapioca gem [gem...]&#xA;&#xA;Options:&#xA;  --out, -o, [--outdir=directory]                             # The output directory for generated gem RBI files&#xA;                                                              # Default: sorbet/rbi/gems&#xA;          [--file-header], [--no-file-header]                 # Add a &#34;This file is generated&#34; header on top of each generated RBI file&#xA;                                                              # Default: true&#xA;          [--all], [--no-all]                                 # Regenerate RBI files for all gems&#xA;  --pre, -b, [--prerequire=file]                              # A file to be required before Bundler.require is called&#xA;  --post, -a, [--postrequire=file]                            # A file to be required after Bundler.require is called&#xA;                                                              # Default: sorbet/tapioca/require.rb&#xA;  -x, [--exclude=gem [gem ...]]                               # Exclude the given gem(s) from RBI generation&#xA;  --typed, -t, [--typed-overrides=gem:level [gem:level ...]]  # Override for typed sigils for generated gem RBIs&#xA;                                                              # Default: {&#34;activesupport&#34;=&amp;gt;&#34;false&#34;}&#xA;          [--verify], [--no-verify]                           # Verify RBIs are up-to-date&#xA;          [--doc], [--no-doc]                                 # Include YARD documentation from sources when generating RBIs. Warning: this might be slow&#xA;                                                              # Default: true&#xA;          [--loc], [--no-loc]                                 # Include comments with source location when generating RBIs&#xA;                                                              # Default: true&#xA;          [--exported-gem-rbis], [--no-exported-gem-rbis]     # Include RBIs found in the `rbi/` directory of the gem&#xA;                                                              # Default: true&#xA;  -w, [--workers=N]                                           # Number of parallel workers to use when generating RBIs (default: auto)&#xA;          [--auto-strictness], [--no-auto-strictness]         # Autocorrect strictness in gem RBIs in case of conflict with the DSL RBIs&#xA;                                                              # Default: true&#xA;  --dsl-dir, [--dsl-dir=directory]                            # The DSL directory used to correct gems strictnesses&#xA;                                                              # Default: sorbet/rbi/dsl&#xA;          [--rbi-max-line-length=N]                           # Set the max line length of generated RBIs. Signatures longer than the max line length will be wrapped&#xA;                                                              # Default: 120&#xA;  -e, [--environment=ENVIRONMENT]                             # The Rack/Rails environment to use when generating RBIs&#xA;                                                              # Default: development&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]                           # Path to the Tapioca configuration file&#xA;                                                              # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]                             # Verbose output for debugging purposes&#xA;&#xA;generate RBIs from gems&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_GEM --&gt; &#xA;&lt;p&gt;By default, running &lt;code&gt;tapioca gem&lt;/code&gt; will only generate the RBI files for gems that have been added to or removed from the project&#39;s &lt;code&gt;Gemfile&lt;/code&gt; this means that Tapioca will not regenerate the RBI files for untouched gems. However, when changing Tapioca configuration or bumping its version, it may be useful to force the regeneration of the RBI files previsouly generated. This can be done with the &lt;code&gt;--all&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/tapioca gems --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Are you coming from &lt;code&gt;srb rbi&lt;/code&gt;? &lt;a href=&#34;https://github.com/Shopify/tapioca/wiki/How-does-tapioca-compare-to-%22srb-rbi-gems%22-%3F&#34;&gt;See how &lt;code&gt;tapioca gem&lt;/code&gt; compares to &lt;code&gt;srb rbi&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Manually requiring parts of a gem&lt;/h4&gt; &#xA;&lt;p&gt;It may happen that the RBI file generated for a gem listed inside your &lt;code&gt;Gemfile.lock&lt;/code&gt; is missing some definitions that you would expect it to be exporting.&lt;/p&gt; &#xA;&lt;p&gt;For gems that have a normal default &lt;code&gt;require&lt;/code&gt; and that load all of their constants through that, everything should work seamlessly. However, for gems that are marked as &lt;code&gt;require: false&lt;/code&gt; in the &lt;code&gt;Gemfile&lt;/code&gt;, or for gems that export constants optionally via different requires, where a single require does not load the whole gem code into memory, Tapioca will not be able to load some of the types into memory and, thus, won&#39;t be able to generate complete RBIs for them. For this reason, we need to keep a small external file named &lt;code&gt;sorbet/tapioca/require.rb&lt;/code&gt; that is executed after all the gems in the &lt;code&gt;Gemfile&lt;/code&gt; have been required and before generation of gem RBIs have started. This file is responsible for adding the requires for additional files from gems, which are not covered by the default require.&lt;/p&gt; &#xA;&lt;p&gt;For example, suppose you are using the class &lt;code&gt;BetterHtml::Parser&lt;/code&gt; exported from the &lt;code&gt;better_html&lt;/code&gt; gem. Just doing a &lt;code&gt;require &#34;better_html&#34;&lt;/code&gt; (which is the default require) does not load that type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle exec pry&#xA;&#xA;[1] pry(main)&amp;gt; require &#39;better_html&#39;&#xA;=&amp;gt; true&#xA;[2] pry(main)&amp;gt; BetterHtml&#xA;=&amp;gt; BetterHtml&#xA;[3] pry(main)&amp;gt; BetterHtml::Parser&#xA;NameError: uninitialized constant BetterHtml::Parser&#xA;from (pry):3:in `__pry__`&#xA;[4] pry(main)&amp;gt; require &#39;better_html/parser&#39;&#xA;=&amp;gt; true&#xA;[5] pry(main)&amp;gt; BetterHtml::Parser&#xA;=&amp;gt; BetterHtml::Parser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to make sure that &lt;code&gt;tapioca&lt;/code&gt; can reflect on that type, we need to add the line &lt;code&gt;require &#34;better_html/parser&#34;&lt;/code&gt; to the &lt;code&gt;sorbet/tapioca/require.rb&lt;/code&gt; file. This will make sure &lt;code&gt;BetterHtml::Parser&lt;/code&gt; is loaded into memory and a type annotation is generated for it in the &lt;code&gt;better_html.rbi&lt;/code&gt; file. If this extra &lt;code&gt;require&lt;/code&gt; line is not added to &lt;code&gt;sorbet/tapioca/require.rb&lt;/code&gt; file, then Tapioca will be able to generate definitions for &lt;code&gt;BetterHtml&lt;/code&gt; and other constants, but not for &lt;code&gt;BetterHtml::Parser&lt;/code&gt;, which will be missing from the RBI file.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can take a look at Tapioca&#39;s own &lt;a href=&#34;https://github.com/Shopify/tapioca/raw/main/sorbet/tapioca/require.rb&#34;&gt;&lt;code&gt;require.rb&lt;/code&gt; file&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# typed: strict&#xA;# frozen_string_literal: true&#xA;&#xA;require &#34;ansi/code&#34;&#xA;require &#34;google/protobuf&#34;&#xA;require &#34;rails/all&#34;&#xA;require &#34;rails/generators&#34;&#xA;require &#34;rails/generators/app_base&#34;&#xA;require &#34;rake/testtask&#34;&#xA;require &#34;rubocop/rake_task&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you ever run into a case, where you add a gem or update the version of a gem and run &lt;code&gt;tapioca gem&lt;/code&gt; but don&#39;t have some types you expect in the generated gem RBI files, you will need to make sure you have added the necessary requires to the &lt;code&gt;sorbet/tapioca/require.rb&lt;/code&gt; file and regenerate the RBI file for that gem explicitly using &lt;code&gt;bin/tapioca gem &amp;lt;gem-name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To help you get started, you can use the command &lt;code&gt;tapioca require&lt;/code&gt; to auto-populate the contents of the &lt;code&gt;sorbet/tapioca/require.rb&lt;/code&gt; file with all the requires found in your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca require&#xA;&#xA;Compiling sorbet/tapioca/require.rb, this may take a few seconds... Done&#xA;&#xA;All requires from this application have been written to sorbet/tapioca/require.rb.&#xA;Please review changes and commit them, then run `bin/tapioca gem`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the file is generated, you should review it, remove all unnecessary requires and commit it.&lt;/p&gt; &#xA;&lt;h4&gt;Excluding a gem from RBI generation&lt;/h4&gt; &#xA;&lt;p&gt;It may be useful to exclude some gems from the generation process. For example for gems that are in Bundle&#39;s debug group or gems of which the contents are dependent on the architecture they are loaded on.&lt;/p&gt; &#xA;&lt;p&gt;To do so you can pass the list of gems you want to exclude in the command line with the &lt;code&gt;--exclude&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca gems --exclude gemA gemB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or through the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gem:&#xA;  exclude:&#xA;    - gemA&#xA;    - gemB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a few development/test environment gems that can cause RBI generation issues, so Tapioca skips them by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fakefs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Changing the strictness level of the RBI for a gem&lt;/h4&gt; &#xA;&lt;p&gt;By default, all RBI files for gems are generated with the &lt;a href=&#34;https://sorbet.org/docs/static#file-level-granularity-strictness-levels&#34;&gt;strictness level&lt;/a&gt; &lt;code&gt;typed: true&lt;/code&gt;. Sometimes, this strictness level can create type-checking errors when a gem contains definitions that conflict with &lt;a href=&#34;https://sorbet.org/docs/faq#it-looks-like-sorbets-types-for-the-stdlib-are-wrong&#34;&gt;Sorbet internal definitions for Ruby core and standard library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Tapioca comes with an automatic detection (option &lt;code&gt;--auto-strictness&lt;/code&gt;, enabled by default) of such cases and will switch the strictness level to &lt;code&gt;typed: false&lt;/code&gt; in RBI files containing conflicts with the core and standard library definitions. It is nonetheless possible to manually switch the strictness level for a gem using the &lt;code&gt;--typed-overrides&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca gems --typed-overrides gemA:false gemB:false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or through the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gem:&#xA;  typed_overrides:&#xA;    gemA: &#34;false&#34;&#xA;    gemB: &#34;false&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Keeping RBI files for gems up-to-date&lt;/h4&gt; &#xA;&lt;p&gt;To ensure all RBI files for gems are up-to-date with the latest changes in your &lt;code&gt;Gemfile.lock&lt;/code&gt;, Tapioca provides a &lt;code&gt;--verify&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca gems --verify&#xA;&#xA;Checking for out-of-date RBIs...&#xA;&#xA;Nothing to do, all RBIs are up-to-date.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option can be used on CI to make sure the RBI files are always up-to-date and ensure accurate type checking. &lt;strong&gt;Warning&lt;/strong&gt;: doing so will break your normal Dependabot workflow as every pull-request opened to bump a gem version will fail CI since the RBI will be out-of-date and will require you to manually run &lt;code&gt;bin/tapioca gems&lt;/code&gt; to update them.&lt;/p&gt; &#xA;&lt;h3&gt;Pulling RBI annotations from remote sources&lt;/h3&gt; &#xA;&lt;p&gt;Since Tapioca does not perform any type inference, the RBI files generated for the gems do not contain any type signatures. Instead, Tapioca relies on the community to provide high-quality, manually written RBI annotations for public gems.&lt;/p&gt; &#xA;&lt;p&gt;To pull the annotations relevant to your project from the central repository, run the &lt;code&gt;annotations&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations&#xA;&#xA;Retrieving index from central repository... Done&#xA;Listing gems from Gemfile.lock... Done&#xA;Removing annotations for gems that have been removed...  Nothing to do&#xA;Fetching gem annotations from central repository...&#xA;&#xA;  Fetched activesupport&#xA;   created  sorbet/rbi/annotations/activesupport.rbi&#xA;&#xA;Done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- START_HELP_COMMAND_ANNOTATIONS --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help annotations&#xA;&#xA;Usage:&#xA;  tapioca annotations&#xA;&#xA;Options:&#xA;          [--sources=one two three]                           # URIs of the sources to pull gem RBI annotations from&#xA;                                                              # Default: [&#34;https://raw.githubusercontent.com/Shopify/rbi-central/main&#34;]&#xA;          [--netrc], [--no-netrc]                             # Use .netrc to authenticate to private sources&#xA;                                                              # Default: true&#xA;          [--netrc-file=NETRC_FILE]                           # Path to .netrc file&#xA;          [--auth=AUTH]                                       # HTTP authorization header for private sources&#xA;  --typed, -t, [--typed-overrides=gem:level [gem:level ...]]  # Override for typed sigils for pulled annotations&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]                           # Path to the Tapioca configuration file&#xA;                                                              # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]                             # Verbose output for debugging purposes&#xA;&#xA;Pull gem RBI annotations from remote sources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_ANNOTATIONS --&gt; &#xA;&lt;p&gt;By default, Tapioca will pull the annotations stored in the central repository located at &lt;a href=&#34;https://github.com/Shopify/rbi-central&#34;&gt;https://github.com/Shopify/rbi-central&lt;/a&gt;. It is possible to use a custom repository by changing the value of the &lt;code&gt;--sources&lt;/code&gt; options. For example if your repository is stored on Github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations --sources https://raw.githubusercontent.com/$USER/$REPO/$BRANCH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tapioca also supports pulling annotations from multiple sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations --sources https://raw.githubusercontent.com/$USER/$REPO1/$BRANCH https://raw.githubusercontent.com/$USER/$REPO2/$BRANCH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Basic authentication&lt;/h4&gt; &#xA;&lt;p&gt;Private repositories can be used as sources by passing the option &lt;code&gt;--auth&lt;/code&gt; with an authentication string. For Github, this string is &lt;code&gt;token $TOKEN&lt;/code&gt; where &lt;code&gt;$TOKEN&lt;/code&gt; is a &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;personal access token&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations --sources https://raw.githubusercontent.com/$USER/$PRIVATE_REPO/$BRANCH --auth &#34;token $TOKEN&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using a .netrc file&lt;/h4&gt; &#xA;&lt;p&gt;Tapioca supports reading credentials from a &lt;a href=&#34;https://www.gnu.org/software/inetutils/manual/html_node/The-_002enetrc-file.html&#34;&gt;netrc&lt;/a&gt; file (defaulting to &lt;code&gt;~/.netrc&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Given these lines in your netrc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-netrc&#34;&gt;machine raw.githubusercontent.com&#xA;  login $USERNAME&#xA;  password $TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;$USERNAME&lt;/code&gt; is your Github username and &lt;code&gt;$TOKEN&lt;/code&gt; is a &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;personal access token&lt;/a&gt;, then, if you run Tapioca with the &lt;code&gt;--netrc&lt;/code&gt; option (enabled by default), your annotation requests should be authenticated properly.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--netrc-file&lt;/code&gt; option can be specified to read from a file other than &lt;code&gt;~/.netrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations --netrc-file /path/to/my/netrc/file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;--netrc-file&lt;/code&gt;, you can also specify an alternative netrc file by using the &lt;code&gt;TAPIOCA_NETRC_FILE&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ TAPIOCA_NETRC_FILE=/path/to/my/netrc/file bin/tapioca annotations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tapioca will first try to find the netrc file as specified by the &lt;code&gt;--netrc-file&lt;/code&gt; option. If that option is not supplied, it will try the &lt;code&gt;TAPIOCA_NETRC_FILE&lt;/code&gt; environment variable value. If that value is not supplied either, it will fallback to &lt;code&gt;~/.netrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Changing the typed strictness of annotations files&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes the annotations files pulled by Tapioca will create type errors in your project because of incompatibilities. It is possible to ignore such files by switching their strictness level &lt;code&gt;--typed-overrides&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca annotations --typed-overrides gemA:ignore gemB:false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or through the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;annotations:&#xA;  typed_overrides:&#xA;    gemA: &#34;ignore&#34;&#xA;    gemB: &#34;false&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating RBI files for Rails and other DSLs&lt;/h3&gt; &#xA;&lt;p&gt;Sorbet by itself does not understand DSLs involving meta-programming, such as Rails. This means that Sorbet won&#39;t know about constants and methods generated by &lt;code&gt;ActiveRecord&lt;/code&gt; or &lt;code&gt;ActiveSupport&lt;/code&gt;. To solve this, Tapioca can load your application and introspect it to find the constants and methods that would exist at runtime and compile them into RBI files.&lt;/p&gt; &#xA;&lt;p&gt;To generate the RBI files for the DSLs used in your application, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca dsl&#xA;&#xA;Loading Rails application... Done&#xA;Loading DSL compiler classes... Done&#xA;Compiling DSL RBI files...&#xA;&#xA;      create  sorbet/rbi/dsl/my_model.rbi&#xA;      ...&#xA;&#xA;Done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate DSL RBIs for specified constants (or for all handled constants, if a constant name is not supplied). You can read about DSL RBI compilers supplied by &lt;code&gt;tapioca&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/tapioca/main/manual/compilers.md&#34;&gt;the manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- START_HELP_COMMAND_DSL --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help dsl&#xA;&#xA;Usage:&#xA;  tapioca dsl [constant...]&#xA;&#xA;Options:&#xA;  --out, -o, [--outdir=directory]              # The output directory for generated DSL RBI files&#xA;                                               # Default: sorbet/rbi/dsl&#xA;          [--file-header], [--no-file-header]  # Add a &#34;This file is generated&#34; header on top of each generated RBI file&#xA;                                               # Default: true&#xA;          [--only=compiler [compiler ...]]     # Only run supplied DSL compiler(s)&#xA;          [--exclude=compiler [compiler ...]]  # Exclude supplied DSL compiler(s)&#xA;          [--verify], [--no-verify]            # Verifies RBIs are up-to-date&#xA;  -q, [--quiet], [--no-quiet]                  # Suppresses file creation output&#xA;  -w, [--workers=N]                            # Number of parallel workers to use when generating RBIs (default: auto)&#xA;          [--rbi-max-line-length=N]            # Set the max line length of generated RBIs. Signatures longer than the max line length will be wrapped&#xA;                                               # Default: 120&#xA;  -e, [--environment=ENVIRONMENT]              # The Rack/Rails environment to use when generating RBIs&#xA;                                               # Default: development&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]            # Path to the Tapioca configuration file&#xA;                                               # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]              # Verbose output for debugging purposes&#xA;&#xA;generate RBIs for dynamic methods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_DSL --&gt; &#xA;&lt;h4&gt;Keeping RBI files for DSLs up-to-date&lt;/h4&gt; &#xA;&lt;p&gt;To ensure all RBI files for DSLs are up-to-date with the latest changes in your application or database, Tapioca provide a &lt;code&gt;--verify&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca dsl --verify&#xA;&#xA;Loading Rails application... Done&#xA;Loading DSL compiler classes... Done&#xA;Checking for out-of-date RBIs...&#xA;&#xA;&#xA;RBI files are out-of-date. In your development environment, please run:&#xA;  `bin/tapioca dsl`&#xA;Once it is complete, be sure to commit and push any changes&#xA;&#xA;Reason:&#xA;  File(s) changed:&#xA;  - sorbet/rbi/dsl/my_model.rbi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option can be used on CI to make sure the RBI files are always up-to-date and ensure accurate type checking.&lt;/p&gt; &#xA;&lt;h4&gt;Writing custom DSL compilers&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to create your own compilers for DSLs not supported by Tapioca out of the box.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s take for example this &lt;code&gt;Encryptable&lt;/code&gt; module that uses the &lt;a href=&#34;https://ruby-doc.org/core-3.1.1/Module.html#method-i-included&#34;&gt;&lt;code&gt;included&lt;/code&gt; hook&lt;/a&gt; to dynamically add a few methods to the classes that include it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;module Encryptable&#xA;  def self.included(base)&#xA;    base.extend(ClassMethods)&#xA;  end&#xA;&#xA;  module ClassMethods&#xA;    def attr_encrypted(attr_name)&#xA;      encrypted_attributes &amp;lt;&amp;lt; attr_name&#xA;&#xA;      attr_accessor(attr_name)&#xA;&#xA;      encrypted_attr_name = :&#34;#{attr_name}_encrypted&#34;&#xA;&#xA;      define_method(encrypted_attr_name) do&#xA;        value = send(attr_name)&#xA;        encrypt(value)&#xA;      end&#xA;&#xA;      define_method(&#34;#{encrypted_attr_name}=&#34;) do |value|&#xA;        send(&#34;#{attr_name}=&#34;, decrypt(value))&#xA;      end&#xA;    end&#xA;&#xA;    def encrypted_attributes&#xA;      @encrypted_attributes ||= []&#xA;    end&#xA;  end&#xA;&#xA;  private&#xA;&#xA;  def encrypt(value)&#xA;    value.unpack(&#34;H*&#34;).first&#xA;  end&#xA;&#xA;  def decrypt(value)&#xA;    [value].pack(&#34;H*&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;Encryptable&lt;/code&gt; is included in a class like this one, it makes it possible to call &lt;code&gt;attr_encrypted&lt;/code&gt; to define an attribute, its accessors and its encrypted accessors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class CreditCard&#xA;  include Encryptable&#xA;&#xA;  attr_encrypted :number&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These accessors can then be used on the &lt;code&gt;CreditCard&lt;/code&gt; instance without having to define them in the class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# typed: true&#xA;# file: example.rb&#xA;&#xA;card = CreditCard.new&#xA;card.number = &#34;1234 5678 9012 3456&#34;&#xA;&#xA;p card.number             # =&amp;gt; &#34;1234 5678 9012 3456&#34;&#xA;p card.number_encrypted   # =&amp;gt; &#34;31323334203536373820393031322033343536&#34;&#xA;&#xA;card.number_encrypted = &#34;31323334203536373820393031322033343536&#34;&#xA;p card.number             # =&amp;gt; &#34;1234 5678 9012 3456&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sadly, since these methods have been created dynamically at runtime, when our &lt;code&gt;attr_encryptable&lt;/code&gt; method was run, there are no static traces of the &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;number=&lt;/code&gt;, &lt;code&gt;number_encrypted&lt;/code&gt; and &lt;code&gt;number_encrypted=&lt;/code&gt; methods. Since Sorbet does not run the Ruby code but analyses it statically, it can&#39;t see these methods and running type-checking will show a bunch of errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle exec srb tc&#xA;&#xA;lib/example.rb:5: Method number= does not exist on CreditCard https://srb.help/7003&#xA;lib/example.rb:7: Method number does not exist on CreditCard https://srb.help/7003&#xA;lib/example.rb:8: Method number_encrypted does not exist on CreditCard https://srb.help/7003&#xA;lib/example.rb:10: Method number_encrypted= does not exist on CreditCard https://srb.help/7003&#xA;lib/example.rb:11: Method number does not exist on CreditCard https://srb.help/7003&#xA;&#xA;Errors: 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To solve this you will have to create your own DSL compiler able that understands the &lt;code&gt;Encryptable&lt;/code&gt; DSL and can generate the RBI definitions representing the actual shape of &lt;code&gt;CreditCard&lt;/code&gt; at runtime.&lt;/p&gt; &#xA;&lt;p&gt;To do so, create the new DSL compiler inside the &lt;code&gt;sorbet/tapioca/compilers&lt;/code&gt; directory of your application with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;module Tapioca&#xA;  module Compilers&#xA;    class Encryptable &amp;lt; Tapioca::Dsl::Compiler&#xA;      extend T::Sig&#xA;&#xA;      ConstantType = type_member {{ fixed: T.class_of(Encryptable) }}&#xA;&#xA;      sig { override.returns(T::Enumerable[Module]) }&#xA;      def self.gather_constants&#xA;        # Collect all the classes that include Encryptable&#xA;        all_classes.select { |c| c &amp;lt; ::Encryptable }&#xA;      end&#xA;&#xA;      sig { override.void }&#xA;      def decorate&#xA;        # Create a RBI definition for each class that includes Encryptable&#xA;        root.create_path(constant) do |klass|&#xA;          # For each encrypted attribute we find in the class&#xA;          constant.encrypted_attributes.each do |attr_name|&#xA;            # Create the RBI definitions for all the missing methods&#xA;            klass.create_method(attr_name, return_type: &#34;String&#34;)&#xA;            klass.create_method(&#34;#{attr_name}=&#34;, parameters: [ create_param(&#34;value&#34;, type: &#34;String&#34;) ], return_type: &#34;void&#34;)&#xA;            klass.create_method(&#34;#{attr_name}_encrypted&#34;, return_type: &#34;String&#34;)&#xA;            klass.create_method(&#34;#{attr_name}_encrypted=&#34;, parameters: [ create_param(&#34;value&#34;, type: &#34;String&#34;) ], return_type: &#34;void&#34;)&#xA;          end&#xA;        end&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are two main parts to the DSL compiler API: &lt;code&gt;gather_constants&lt;/code&gt; and &lt;code&gt;decorate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;gather_constants&lt;/code&gt; class method collects all classes (or modules) that should be processed by this specific DSL compiler.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;decorate&lt;/code&gt; method defines how to generate the necessary RBI definitions for the gathered constants.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can now run the new RBI compiler through the normal DSL generation process (your custom compiler will be loaded automatically by Tapioca):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca dsl&#xA;&#xA;Loading Rails application... Done&#xA;Loading DSL compiler classes... Done&#xA;Compiling DSL RBI files...&#xA;&#xA;      create  sorbet/rbi/dsl/credit_card.rbi&#xA;&#xA;Done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run Sorbet without error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle exec srb tc&#xA;&#xA;No errors! Great job.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more concrete and advanced examples, take a look at &lt;a href=&#34;https://github.com/Shopify/tapioca/tree/main/lib/tapioca/dsl/compilers&#34;&gt;Tapioca&#39;s default DSL compilers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;RBI files for missing constants and methods&lt;/h3&gt; &#xA;&lt;p&gt;Even after generating the RBIs, it is possible that some constants or methods are still undefined for Sorbet.&lt;/p&gt; &#xA;&lt;p&gt;This might be for multiple reasons, with the most frequents ones being:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The constant or method comes from a part of the gem that Tapioca cannot load (optional dependency, wrong architecture, etc.)&lt;/li&gt; &#xA; &lt;li&gt;The constant or method comes from a DSL or meta-programming that Tapioca doesn&#39;t support yet&lt;/li&gt; &#xA; &lt;li&gt;The constant or method only exists when a specific code path is executed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The best way to deal with such occurrences is to manually create RBI files (shims) for them so you can also add types but depending on the amount of meta-programming used in your project this can mean an overwhelming amount of manual work.&lt;/p&gt; &#xA;&lt;h4&gt;Generating the RBI file for missing constants&lt;/h4&gt; &#xA;&lt;p&gt;To get you started quickly, Tapioca can create a RBI file containing a stub of all the missing constants so you can typecheck your project without missing constants and shim them later as you need them.&lt;/p&gt; &#xA;&lt;p&gt;To generate the RBI file for the missing constants used in your application run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca todo&#xA;&#xA;Compiling sorbet/rbi/todo.rbi, this may take a few seconds... Done&#xA;All unresolved constants have been written to sorbet/rbi/todo.rbi.&#xA;Please review changes and commit them.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate the file &lt;code&gt;sorbet/rbi/todo.rbi&lt;/code&gt; defining all unresolved constants as empty modules. Since the constants are &#34;missing&#34;, Tapioca does not know if they should be marked as modules or classes and will use modules as a safer default. This file should be reviewed, corrected, if necessary, and then committed in your repository.&lt;/p&gt; &#xA;&lt;!-- START_HELP_COMMAND_TODO --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help todo&#xA;&#xA;Usage:&#xA;  tapioca todo&#xA;&#xA;Options:&#xA;      [--todo-file=TODO_FILE]              # Path to the generated todo RBI file&#xA;                                           # Default: sorbet/rbi/todo.rbi&#xA;      [--file-header], [--no-file-header]  # Add a &#34;This file is generated&#34; header on top of each generated RBI file&#xA;                                           # Default: true&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]        # Path to the Tapioca configuration file&#xA;                                           # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]          # Verbose output for debugging purposes&#xA;&#xA;generate the list of unresolved constants&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_TODO --&gt; &#xA;&lt;h4&gt;Manually writing RBI definitions (shims)&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;em&gt;shim&lt;/em&gt; is a hand-crafted RBI file that tells Sorbet about constants, ancestors, methods, etc. that it can&#39;t understand statically and aren&#39;t already generated by Tapioca.&lt;/p&gt; &#xA;&lt;p&gt;These shims are usually placed in the &lt;code&gt;sorbet/rbi/shims&lt;/code&gt; directory. From there, conventionally, you should follow the directory structure of the project to the file you&#39;d like to shim. For example, say you had a &lt;code&gt;person.rb&lt;/code&gt; file found at &lt;code&gt;app/models/person.rb&lt;/code&gt;. If you were to add a shim for it, you&#39;d want to create your RBI file at &lt;code&gt;sorbet/rbi/shims/app/models/person.rbi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A shim might be as simple as the class definition with an empty method body as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# typed: true&#xA;&#xA;class Person&#xA;  sig { void }&#xA;  def some_method_sorbet_cannot_find; end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you migrate to newer versions of Sorbet or Tapioca, some shims may become useless as Sorbet&#39;s internal definitions for Ruby&#39;s core and standard library is enhanced or Tapioca is able to generate definitions for new DSLs. To avoid keeping outdated or useless definitions inside your application shims, Tapioca provides the &lt;code&gt;check-shims&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/tapioca check-shims&#xA;&#xA;Loading Sorbet payload...  Done&#xA;Loading shim RBIs from sorbet/rbi/shims...  Done&#xA;Loading gem RBIs from sorbet/rbi/gems...  Done&#xA;Loading gem RBIs from sorbet/rbi/dsl...  Done&#xA;Loading annotation RBIs from sorbet/rbi/annotations...  Done&#xA;Looking for duplicates...  Done&#xA;&#xA;Duplicated RBI for ::MyModel#title:&#xA;  * sorbet/rbi/shims/my_model.rbi:2:2-2:14&#xA;  * sorbet/rbi/dsl/my_model.rbi:2:2-2:14&#xA;&#xA;Duplicated RBI for ::String#capitalize:&#xA;  * https://github.com/sorbet/sorbet/tree/master/rbi/core/string.rbi#L406&#xA;  * sorbet/rbi/shims/core/string.rbi:3:2-3:23&#xA;&#xA;Please remove the duplicated definitions from the sorbet/rbi/shims directory.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command can be used on CI to make sure the RBI shims are always up-to-date and non-redundant with generated files.&lt;/p&gt; &#xA;&lt;!-- START_HELP_COMMAND_CHECK_SHIMS --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tapioca help check_shims&#xA;&#xA;Usage:&#xA;  tapioca check-shims&#xA;&#xA;Options:&#xA;      [--gem-rbi-dir=GEM_RBI_DIR]                  # Path to gem RBIs&#xA;                                                   # Default: sorbet/rbi/gems&#xA;      [--dsl-rbi-dir=DSL_RBI_DIR]                  # Path to DSL RBIs&#xA;                                                   # Default: sorbet/rbi/dsl&#xA;      [--shim-rbi-dir=SHIM_RBI_DIR]                # Path to shim RBIs&#xA;                                                   # Default: sorbet/rbi/shims&#xA;      [--annotations-rbi-dir=ANNOTATIONS_RBI_DIR]  # Path to annotations RBIs&#xA;                                                   # Default: sorbet/rbi/annotations&#xA;      [--todo-rbi-file=TODO_RBI_FILE]              # Path to the generated todo RBI file&#xA;                                                   # Default: sorbet/rbi/todo.rbi&#xA;      [--payload], [--no-payload]                  # Check shims against Sorbet&#39;s payload&#xA;                                                   # Default: true&#xA;  -w, [--workers=N]                                # Number of parallel workers (default: auto)&#xA;  -c, [--config=&amp;lt;config file path&amp;gt;]                # Path to the Tapioca configuration file&#xA;                                                   # Default: sorbet/tapioca/config.yml&#xA;  -V, [--verbose], [--no-verbose]                  # Verbose output for debugging purposes&#xA;&#xA;check duplicated definitions in shim RBIs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_HELP_COMMAND_CHECK_SHIMS --&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Tapioca supports loading command defaults from a configuration file. The default configuration file location is &lt;code&gt;sorbet/tapioca/config.yml&lt;/code&gt; but this default can be changed using the &lt;code&gt;--config&lt;/code&gt; flag and supplying an alternative configuration file path.&lt;/p&gt; &#xA;&lt;p&gt;Tapioca&#39;s configuration file must be a well-formed YAML file with top-level keys for the various Tapioca commands. Keys under each such top-level command should be the underscore version of a long option name for that command and the value for that key should be the value of the option.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you always want to generate gem RBIs with inline documentation, then you would create the file &lt;code&gt;sorbet/tapioca/config.yml&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gem:&#xA;  doc: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, if you always want to exclude the &lt;code&gt;AASM&lt;/code&gt; and &lt;code&gt;ActiveRecordFixtures&lt;/code&gt; DSL compilers in your DSL RBI generation runs, your config file would then look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gem:&#xA;  doc: true&#xA;dsl:&#xA;  exclude:&#xA;  - UrlHelpers&#xA;  - ActiveRecordFixtures&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full configuration file, with each option and its default value, would look something like this:&lt;/p&gt; &#xA;&lt;!-- START_CONFIG_TEMPLATE --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;require:&#xA;  postrequire: sorbet/tapioca/require.rb&#xA;todo:&#xA;  todo_file: sorbet/rbi/todo.rbi&#xA;  file_header: true&#xA;dsl:&#xA;  outdir: sorbet/rbi/dsl&#xA;  file_header: true&#xA;  only: []&#xA;  exclude: []&#xA;  verify: false&#xA;  quiet: false&#xA;  workers: 1&#xA;  rbi_max_line_length: 120&#xA;  environment: development&#xA;gem:&#xA;  outdir: sorbet/rbi/gems&#xA;  file_header: true&#xA;  all: false&#xA;  prerequire: &#39;&#39;&#xA;  postrequire: sorbet/tapioca/require.rb&#xA;  exclude: []&#xA;  typed_overrides:&#xA;    activesupport: &#39;false&#39;&#xA;  verify: false&#xA;  doc: true&#xA;  loc: true&#xA;  exported_gem_rbis: true&#xA;  workers: 1&#xA;  auto_strictness: true&#xA;  dsl_dir: sorbet/rbi/dsl&#xA;  rbi_max_line_length: 120&#xA;  environment: development&#xA;check_shims:&#xA;  gem_rbi_dir: sorbet/rbi/gems&#xA;  dsl_rbi_dir: sorbet/rbi/dsl&#xA;  shim_rbi_dir: sorbet/rbi/shims&#xA;  annotations_rbi_dir: sorbet/rbi/annotations&#xA;  todo_rbi_file: sorbet/rbi/todo.rbi&#xA;  payload: true&#xA;  workers: 1&#xA;annotations:&#xA;  sources:&#xA;  - https://raw.githubusercontent.com/Shopify/rbi-central/main&#xA;  netrc: true&#xA;  netrc_file: &#39;&#39;&#xA;  typed_overrides: {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END_CONFIG_TEMPLATE --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/Shopify/tapioca&#34;&gt;https://github.com/Shopify/tapioca&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://github.com/Shopify/tapioca/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://github.com/Shopify/tapioca/raw/main/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>