<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-23T01:32:28Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thoughtbot/administrate</title>
    <updated>2022-06-23T01:32:28Z</updated>
    <id>tag:github.com,2022-06-23:/thoughtbot/administrate</id>
    <link href="https://github.com/thoughtbot/administrate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rails engine that helps you put together a super-flexible admin dashboard.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Administrate&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/thoughtbot/administrate/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/thoughtbot/administrate.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/administrate&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/administrate.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/thoughtbot/administrate&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/thoughtbot/administrate/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A framework for creating flexible, powerful admin dashboards in Rails. &lt;a href=&#34;https://administrate-demo.herokuapp.com/admin&#34;&gt;Try the demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Warning:&lt;/h3&gt; &#xA;&lt;p&gt;Administrate is still pre-1.0, and there may be occasional breaking changes to the API. Check the &lt;a href=&#34;https://github.com/thoughtbot/administrate/releases&#34;&gt;release notes&lt;/a&gt; for important updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11917/72203824-ec10f980-3468-11ea-9ac1-51cd28ff88b7.png&#34; alt=&#34;administrate&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What Is Administrate?&lt;/h2&gt; &#xA;&lt;p&gt;Administrate is a library for Rails apps that automatically generates admin dashboards. Administrate&#39;s admin dashboards give non-technical users clean interfaces that allow them to create, edit, search, and delete records for any model in the application.&lt;/p&gt; &#xA;&lt;p&gt;Administrate solves the same problem as &lt;a href=&#34;https://github.com/sferik/rails_admin&#34;&gt;Rails Admin&lt;/a&gt; and &lt;a href=&#34;http://activeadmin.info/&#34;&gt;ActiveAdmin&lt;/a&gt;, but aims to provide a better user experience for site admins, and to be easier for developers to customize.&lt;/p&gt; &#xA;&lt;p&gt;To accomplish these goals, Administrate follows a few guiding principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No DSLs (domain-specific languages)&lt;/li&gt; &#xA; &lt;li&gt;Support the simplest use cases, and let the user override defaults with standard tools such as plain Rails controllers and views.&lt;/li&gt; &#xA; &lt;li&gt;Break up the library into core components and plugins, so each component stays small and easy to maintain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To customize the appearance, behavior, and contents of the dashboard, we publish a set &lt;a href=&#34;https://administrate-demo.herokuapp.com&#34;&gt;of guides for the current release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These guides are available as markdown files in the &lt;code&gt;docs&lt;/code&gt; subdirectory of the git repository, too.&lt;/p&gt; &#xA;&lt;p&gt;We publish &lt;a href=&#34;https://administrate-demo-prerelease.herokuapp.com&#34;&gt;docs for the upcoming release, which you can find at our prerelease app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/administrate/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Administrate was originally written by Grace Youngblood and is now maintained by Nick Charlton. Many improvements and bugfixes were contributed by the &lt;a href=&#34;https://github.com/thoughtbot/administrate/graphs/contributors&#34;&gt;open source community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;administrate is Copyright Â© 2015-2019 thoughtbot. It is free software, and may be redistributed under the terms specified in the &lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/administrate/main/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;About thoughtbot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://thoughtbot.com/brand_assets/93:44.svg?sanitize=true&#34; alt=&#34;thoughtbot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;administrate is maintained and funded by thoughtbot, inc. The names and logos for thoughtbot are trademarks of thoughtbot, inc.&lt;/p&gt; &#xA;&lt;p&gt;We love open source software! See &lt;a href=&#34;https://thoughtbot.com/community?utm_source=github&#34;&gt;our other projects&lt;/a&gt; or &lt;a href=&#34;https://thoughtbot.com?utm_source=github&#34;&gt;hire us&lt;/a&gt; to design, develop, and grow your product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rspec/rspec-mocks</title>
    <updated>2022-06-23T01:32:28Z</updated>
    <id>tag:github.com,2022-06-23:/rspec/rspec-mocks</id>
    <link href="https://github.com/rspec/rspec-mocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RSpec&#39;s &#39;test double&#39; framework, with support for stubbing and mocking&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RSpec Mocks &lt;a href=&#34;https://github.com/rspec/rspec-mocks/actions&#34;&gt;&lt;img src=&#34;https://github.com/rspec/rspec-mocks/workflows/RSpec%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rspec/rspec-mocks&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rspec/rspec-mocks.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;rspec-mocks is a test-double framework for rspec with support for method stubs, fakes, and message expectations on generated test-doubles and real objects alike.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install rspec       # for rspec-core, rspec-expectations, rspec-mocks&#xA;gem install rspec-mocks # for rspec-mocks only&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want to run against the &lt;code&gt;main&lt;/code&gt; branch? You&#39;ll need to include the dependent RSpec repos as well. Add the following to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%w[rspec-core rspec-expectations rspec-mocks rspec-support].each do |lib|&#xA;  gem lib, :git =&amp;gt; &#34;https://github.com/rspec/#{lib}.git&#34;, :branch =&amp;gt; &#39;main&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve set up the environment, you&#39;ll need to cd into the working directory of whichever repo you want to work in. From there you can run the specs and cucumber features, and make patches.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You do not need to use rspec-dev to work on a specific RSpec repo. You can treat each RSpec repo as an independent project.&lt;/p&gt; &#xA;&lt;p&gt;For information about contributing to RSpec, please refer to the following markdown files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-mocks/main/BUILD_DETAIL.md&#34;&gt;Build details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-mocks/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-mocks/main/CONTRIBUTING.md&#34;&gt;Detailed contributing guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-mocks/main/DEVELOPMENT.md&#34;&gt;Development setup guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Test Doubles&lt;/h2&gt; &#xA;&lt;p&gt;A test double is an object that stands in for another object in your system during a code example. Use the &lt;code&gt;double&lt;/code&gt; method, passing in an optional identifier, to create one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;book = double(&#34;book&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the time you will want some confidence that your doubles resemble an existing object in your system. Verifying doubles are provided for this purpose. If the existing object is available, they will prevent you from adding stubs and expectations for methods that do not exist or that have an invalid number of parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;book = instance_double(&#34;Book&#34;, :pages =&amp;gt; 250)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verifying doubles have some clever tricks to enable you to both test in isolation without your dependencies loaded while still being able to validate them against real objects. More detail is available in &lt;a href=&#34;https://github.com/rspec/rspec-mocks/raw/main/features/verifying_doubles&#34;&gt;their documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Verifying doubles can also accept custom identifiers, just like double(), e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;books = []&#xA;books &amp;lt;&amp;lt; instance_double(&#34;Book&#34;, :rspec_book, :pages =&amp;gt; 250)&#xA;books &amp;lt;&amp;lt; instance_double(&#34;Book&#34;, &#34;(Untitled)&#34;, :pages =&amp;gt; 5000)&#xA;&#xA;puts books.inspect # with names, it&#39;s clearer which were actually added&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Method Stubs&lt;/h2&gt; &#xA;&lt;p&gt;A method stub is an implementation that returns a pre-determined value. Method stubs can be declared on test doubles or real objects using the same syntax. rspec-mocks supports 3 forms for declaring method stubs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow(book).to receive(:title) { &#34;The RSpec Book&#34; }&#xA;allow(book).to receive(:title).and_return(&#34;The RSpec Book&#34;)&#xA;allow(book).to receive_messages(&#xA;    :title =&amp;gt; &#34;The RSpec Book&#34;,&#xA;    :subtitle =&amp;gt; &#34;Behaviour-Driven Development with RSpec, Cucumber, and Friends&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use this shortcut, which creates a test double and declares a method stub in one statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;book = double(&#34;book&#34;, :title =&amp;gt; &#34;The RSpec Book&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first argument is a name, which is used for documentation and appears in failure messages. If you don&#39;t care about the name, you can leave it out, making the combined instantiation/stub declaration very terse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;double(:foo =&amp;gt; &#39;bar&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is particularly nice when providing a list of test doubles to a method that iterates through them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;order.calculate_total_price(double(:price =&amp;gt; 1.99), double(:price =&amp;gt; 2.99))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stubbing a chain of methods&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;receive_message_chain&lt;/code&gt; in place of &lt;code&gt;receive&lt;/code&gt; to stub a chain of messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow(double).to receive_message_chain(&#34;foo.bar&#34;) { :baz }&#xA;allow(double).to receive_message_chain(:foo, :bar =&amp;gt; :baz)&#xA;allow(double).to receive_message_chain(:foo, :bar) { :baz }&#xA;&#xA;# Given any of the above forms:&#xA;double.foo.bar # =&amp;gt; :baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Chains can be arbitrarily long, which makes it quite painless to violate the Law of Demeter in violent ways, so you should consider any use of &lt;code&gt;receive_message_chain&lt;/code&gt; a code smell. Even though not all code smells indicate real problems (think fluent interfaces), &lt;code&gt;receive_message_chain&lt;/code&gt; still results in brittle examples. For example, if you write &lt;code&gt;allow(foo).to receive_message_chain(:bar, :baz =&amp;gt; 37)&lt;/code&gt; in a spec and then the implementation calls &lt;code&gt;foo.baz.bar&lt;/code&gt;, the stub will not work.&lt;/p&gt; &#xA;&lt;h2&gt;Consecutive return values&lt;/h2&gt; &#xA;&lt;p&gt;When a stub might be invoked more than once, you can provide additional arguments to &lt;code&gt;and_return&lt;/code&gt;. The invocations cycle through the list. The last value is returned for any subsequent invocations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow(die).to receive(:roll).and_return(1, 2, 3)&#xA;die.roll # =&amp;gt; 1&#xA;die.roll # =&amp;gt; 2&#xA;die.roll # =&amp;gt; 3&#xA;die.roll # =&amp;gt; 3&#xA;die.roll # =&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To return an array in a single invocation, declare an array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow(team).to receive(:players).and_return([double(:name =&amp;gt; &#34;David&#34;)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Message Expectations&lt;/h2&gt; &#xA;&lt;p&gt;A message expectation is an expectation that the test double will receive a message some time before the example ends. If the message is received, the expectation is satisfied. If not, the example fails.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;validator = double(&#34;validator&#34;)&#xA;expect(validator).to receive(:validate) { &#34;02134&#34; }&#xA;zipcode = Zipcode.new(&#34;02134&#34;, validator)&#xA;zipcode.valid?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test Spies&lt;/h2&gt; &#xA;&lt;p&gt;Verifies the given object received the expected message during the course of the test. For a message to be verified, the given object must be setup to spy on it, either by having it explicitly stubbed or by being a null object double (e.g. &lt;code&gt;double(...).as_null_object&lt;/code&gt;). Convenience methods are provided to easily create null object doubles for this purpose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;spy(&#34;invitation&#34;) # =&amp;gt; same as `double(&#34;invitation&#34;).as_null_object`&#xA;instance_spy(&#34;Invitation&#34;) # =&amp;gt; same as `instance_double(&#34;Invitation&#34;).as_null_object`&#xA;class_spy(&#34;Invitation&#34;) # =&amp;gt; same as `class_double(&#34;Invitation&#34;).as_null_object`&#xA;object_spy(&#34;Invitation&#34;) # =&amp;gt; same as `object_double(&#34;Invitation&#34;).as_null_object`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verifying messages received in this way implements the Test Spy pattern.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;invitation = spy(&#39;invitation&#39;)&#xA;&#xA;user.accept_invitation(invitation)&#xA;&#xA;expect(invitation).to have_received(:accept)&#xA;&#xA;# You can also use other common message expectations. For example:&#xA;expect(invitation).to have_received(:accept).with(mailer)&#xA;expect(invitation).to have_received(:accept).twice&#xA;expect(invitation).to_not have_received(:accept).with(mailer)&#xA;&#xA;# One can specify a return value on the spy the same way one would a double.&#xA;invitation = spy(&#39;invitation&#39;, :accept =&amp;gt; true)&#xA;expect(invitation).to have_received(:accept).with(mailer)&#xA;expect(invitation.accept).to eq(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;have_received(...).with(...)&lt;/code&gt; is unable to work properly when passed arguments are mutated after the spy records the received message. For example, this does not work properly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;greeter = spy(&#34;greeter&#34;)&#xA;&#xA;message = &#34;Hello&#34;&#xA;greeter.greet_with(message)&#xA;message &amp;lt;&amp;lt; &#34;, World&#34;&#xA;&#xA;expect(greeter).to have_received(:greet_with).with(&#34;Hello&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nomenclature&lt;/h2&gt; &#xA;&lt;h3&gt;Mock Objects and Test Stubs&lt;/h3&gt; &#xA;&lt;p&gt;The names Mock Object and Test Stub suggest specialized Test Doubles. i.e. a Test Stub is a Test Double that only supports method stubs, and a Mock Object is a Test Double that supports message expectations and method stubs.&lt;/p&gt; &#xA;&lt;p&gt;There is a lot of overlapping nomenclature here, and there are many variations of these patterns (fakes, spies, etc). Keep in mind that most of the time we&#39;re talking about method-level concepts that are variations of method stubs and message expectations, and we&#39;re applying to them to &lt;em&gt;one&lt;/em&gt; generic kind of object: a Test Double.&lt;/p&gt; &#xA;&lt;h3&gt;Test-Specific Extension&lt;/h3&gt; &#xA;&lt;p&gt;a.k.a. Partial Double, a Test-Specific Extension is an extension of a real object in a system that is instrumented with test-double like behaviour in the context of a test. This technique is very common in Ruby because we often see class objects acting as global namespaces for methods. For example, in Rails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person = double(&#34;person&#34;)&#xA;allow(Person).to receive(:find) { person }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case we&#39;re instrumenting Person to return the person object we&#39;ve defined whenever it receives the &lt;code&gt;find&lt;/code&gt; message. We can also set a message expectation so that the example fails if &lt;code&gt;find&lt;/code&gt; is not called:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person = double(&#34;person&#34;)&#xA;expect(Person).to receive(:find) { person }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSpec replaces the method we&#39;re stubbing or mocking with its own test-double-like method. At the end of the example, RSpec verifies any message expectations, and then restores the original methods.&lt;/p&gt; &#xA;&lt;h2&gt;Expecting Arguments&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).with(*args)&#xA;expect(double).to_not receive(:msg).with(*args)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set multiple expectations for the same message if you need to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).with(&#34;A&#34;, 1, 3)&#xA;expect(double).to receive(:msg).with(&#34;B&#34;, 2, 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Argument Matchers&lt;/h2&gt; &#xA;&lt;p&gt;Arguments that are passed to &lt;code&gt;with&lt;/code&gt; are compared with actual arguments received using ===. In cases in which you want to specify things about the arguments rather than the arguments themselves, you can use any of the matchers that ship with rspec-expectations. They don&#39;t all make syntactic sense (they were primarily designed for use with RSpec::Expectations), but you are free to create your own custom RSpec::Matchers.&lt;/p&gt; &#xA;&lt;p&gt;rspec-mocks also adds some keyword Symbols that you can use to specify certain kinds of arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).with(no_args)&#xA;expect(double).to receive(:msg).with(any_args)&#xA;expect(double).to receive(:msg).with(1, any_args) # any args acts like an arg splat and can go anywhere&#xA;expect(double).to receive(:msg).with(1, kind_of(Numeric), &#34;b&#34;) #2nd argument can be any kind of Numeric&#xA;expect(double).to receive(:msg).with(1, boolean(), &#34;b&#34;) #2nd argument can be true or false&#xA;expect(double).to receive(:msg).with(1, /abc/, &#34;b&#34;) #2nd argument can be any String matching the submitted Regexp&#xA;expect(double).to receive(:msg).with(1, anything(), &#34;b&#34;) #2nd argument can be anything at all&#xA;expect(double).to receive(:msg).with(1, duck_type(:abs, :div), &#34;b&#34;) #2nd argument can be object that responds to #abs and #div&#xA;expect(double).to receive(:msg).with(hash_including(:a =&amp;gt; 5)) # first arg is a hash with a: 5 as one of the key-values&#xA;expect(double).to receive(:msg).with(array_including(5)) # first arg is an array with 5 as one of the key-values&#xA;expect(double).to receive(:msg).with(hash_excluding(:a =&amp;gt; 5)) # first arg is a hash without a: 5 as one of the key-values&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Receive Counts&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).once&#xA;expect(double).to receive(:msg).twice&#xA;expect(double).to receive(:msg).exactly(n).time&#xA;expect(double).to receive(:msg).exactly(n).times&#xA;expect(double).to receive(:msg).at_least(:once)&#xA;expect(double).to receive(:msg).at_least(:twice)&#xA;expect(double).to receive(:msg).at_least(n).time&#xA;expect(double).to receive(:msg).at_least(n).times&#xA;expect(double).to receive(:msg).at_most(:once)&#xA;expect(double).to receive(:msg).at_most(:twice)&#xA;expect(double).to receive(:msg).at_most(n).time&#xA;expect(double).to receive(:msg).at_most(n).times&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ordering&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).ordered&#xA;expect(double).to receive(:other_msg).ordered&#xA;  # This will fail if the messages are received out of order&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can include the same message with different arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).with(&#34;A&#34;, 1, 3).ordered&#xA;expect(double).to receive(:msg).with(&#34;B&#34;, 2, 4).ordered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setting Responses&lt;/h2&gt; &#xA;&lt;p&gt;Whether you are setting a message expectation or a method stub, you can tell the object precisely how to respond. The most generic way is to pass a block to &lt;code&gt;receive&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg) { value }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the double receives the &lt;code&gt;msg&lt;/code&gt; message, it evaluates the block and returns the result.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).and_return(value)&#xA;expect(double).to receive(:msg).exactly(3).times.and_return(value1, value2, value3)&#xA;  # returns value1 the first time, value2 the second, etc&#xA;expect(double).to receive(:msg).and_raise(error)&#xA;  # `error` can be an instantiated object (e.g. `StandardError.new(some_arg)`) or a class (e.g. `StandardError`)&#xA;  # if it is a class, it must be instantiable with no args&#xA;expect(double).to receive(:msg).and_throw(:msg)&#xA;expect(double).to receive(:msg).and_yield(values, to, yield)&#xA;expect(double).to receive(:msg).and_yield(values, to, yield).and_yield(some, other, values, this, time)&#xA;  # for methods that yield to a block multiple times&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any of these responses can be applied to a stub as well&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow(double).to receive(:msg).and_return(value)&#xA;allow(double).to receive(:msg).and_return(value1, value2, value3)&#xA;allow(double).to receive(:msg).and_raise(error)&#xA;allow(double).to receive(:msg).and_throw(:msg)&#xA;allow(double).to receive(:msg).and_yield(values, to, yield)&#xA;allow(double).to receive(:msg).and_yield(values, to, yield).and_yield(some, other, values, this, time)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Arbitrary Handling&lt;/h2&gt; &#xA;&lt;p&gt;Once in a while you&#39;ll find that the available expectations don&#39;t solve the particular problem you are trying to solve. Imagine that you expect the message to come with an Array argument that has a specific length, but you don&#39;t care what is in it. You could do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg) do |arg|&#xA;  expect(arg.size).to eq 7&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the method being stubbed itself takes a block, and you need to yield to it in some special way, you can use this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg) do |&amp;amp;arg|&#xA;  begin&#xA;    arg.call&#xA;  ensure&#xA;    # cleanup&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delegating to the Original Implementation&lt;/h2&gt; &#xA;&lt;p&gt;When working with a partial mock object, you may occasionally want to set a message expectation without interfering with how the object responds to the message. You can use &lt;code&gt;and_call_original&lt;/code&gt; to achieve this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(Person).to receive(:find).and_call_original&#xA;Person.find # =&amp;gt; executes the original find method and returns the result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Combining Expectation Details&lt;/h2&gt; &#xA;&lt;p&gt;Combining the message name with specific arguments, receive counts and responses you can get quite a bit of detail in your expectations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:&amp;lt;&amp;lt;).with(&#34;illegal value&#34;).once.and_raise(ArgumentError)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While this is a good thing when you really need it, you probably don&#39;t really need it! Take care to specify only the things that matter to the behavior of your code.&lt;/p&gt; &#xA;&lt;h2&gt;Stubbing and Hiding Constants&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/rspec/rspec-mocks/raw/main/features/mutating_constants/README.md&#34;&gt;mutating constants README&lt;/a&gt; for info on this feature.&lt;/p&gt; &#xA;&lt;h2&gt;Use &lt;code&gt;before(:example)&lt;/code&gt;, not &lt;code&gt;before(:context)&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Stubs in &lt;code&gt;before(:context)&lt;/code&gt; are not supported. The reason is that all stubs and mocks get cleared out after each example, so any stub that is set in &lt;code&gt;before(:context)&lt;/code&gt; would work in the first example that happens to run in that group, but not for any others.&lt;/p&gt; &#xA;&lt;p&gt;Instead of &lt;code&gt;before(:context)&lt;/code&gt;, use &lt;code&gt;before(:example)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Settings mocks or stubs on any instance of a class&lt;/h2&gt; &#xA;&lt;p&gt;rspec-mocks provides two methods, &lt;code&gt;allow_any_instance_of&lt;/code&gt; and &lt;code&gt;expect_any_instance_of&lt;/code&gt;, that will allow you to stub or mock any instance of a class. They are used in place of &lt;code&gt;allow&lt;/code&gt; or &lt;code&gt;expect&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow_any_instance_of(Widget).to receive(:name).and_return(&#34;Wibble&#34;)&#xA;expect_any_instance_of(Widget).to receive(:name).and_return(&#34;Wobble&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These methods add the appropriate stub or expectation to all instances of &lt;code&gt;Widget&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature is sometimes useful when working with legacy code, though in general we discourage its use for a number of reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;rspec-mocks&lt;/code&gt; API is designed for individual object instances, but this feature operates on entire classes of objects. As a result there are some semantically confusing edge cases. For example in &lt;code&gt;expect_any_instance_of(Widget).to receive(:name).twice&lt;/code&gt; it isn&#39;t clear whether each specific instance is expected to receive &lt;code&gt;name&lt;/code&gt; twice, or if two receives total are expected. (It&#39;s the former.)&lt;/li&gt; &#xA; &lt;li&gt;Using this feature is often a design smell. It may be that your test is trying to do too much or that the object under test is too complex.&lt;/li&gt; &#xA; &lt;li&gt;It is the most complicated feature of &lt;code&gt;rspec-mocks&lt;/code&gt;, and has historically received the most bug reports. (None of the core team actively use it, which doesn&#39;t help.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;p&gt;There are many different viewpoints about the meaning of mocks and stubs. If you are interested in learning more, here is some recommended reading:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mock Objects: &lt;a href=&#34;http://www.mockobjects.com/&#34;&gt;http://www.mockobjects.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Endo-Testing: &lt;a href=&#34;http://www.ccs.neu.edu/research/demeter/related-work/extreme-programming/MockObjectsFinal.PDF&#34;&gt;http://www.ccs.neu.edu/research/demeter/related-work/extreme-programming/MockObjectsFinal.PDF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mock Roles, Not Objects: &lt;a href=&#34;http://www.jmock.org/oopsla2004.pdf&#34;&gt;http://www.jmock.org/oopsla2004.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Test Double: &lt;a href=&#34;http://www.martinfowler.com/bliki/TestDouble.html&#34;&gt;http://www.martinfowler.com/bliki/TestDouble.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Test Double Patterns: &lt;a href=&#34;http://xunitpatterns.com/Test%20Double%20Patterns.html&#34;&gt;http://xunitpatterns.com/Test%20Double%20Patterns.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mocks aren&#39;t stubs: &lt;a href=&#34;http://www.martinfowler.com/articles/mocksArentStubs.html&#34;&gt;http://www.martinfowler.com/articles/mocksArentStubs.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Also see&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;https://github.com/rspec/rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-core&#34;&gt;https://github.com/rspec/rspec-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-expectations&#34;&gt;https://github.com/rspec/rspec-expectations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails&#34;&gt;https://github.com/rspec/rspec-rails&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rspec/rspec-rails</title>
    <updated>2022-06-23T01:32:28Z</updated>
    <id>tag:github.com,2022-06-23:/rspec/rspec-rails</id>
    <link href="https://github.com/rspec/rspec-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RSpec for Rails 5+&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rspec-rails &lt;a href=&#34;https://codeclimate.com/github/rspec/rspec-rails&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rspec/rspec-rails.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/rspec-rails&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rspec-rails.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;rspec-rails&lt;/code&gt; brings the &lt;a href=&#34;https://rspec.info/&#34;&gt;RSpec&lt;/a&gt; testing framework to &lt;a href=&#34;https://rubyonrails.org/&#34;&gt;Ruby on Rails&lt;/a&gt; as a drop-in alternative to its default testing framework, Minitest.&lt;/p&gt; &#xA;&lt;p&gt;In RSpec, tests are not just scripts that verify your application code. Theyâre also specifications (or &lt;em&gt;specs,&lt;/em&gt; for short): detailed explanations of how the application is supposed to behave, expressed in plain English.&lt;/p&gt; &#xA;&lt;p&gt;According to &lt;a href=&#34;https://github.com/rspec/rspec-rails/raw/main/rfcs/versioning-strategy.md&#34;&gt;RSpec Rails new versioning strategy&lt;/a&gt; use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/6-0-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 6.x&lt;/a&gt;&lt;/strong&gt; for Rails 6.1 or 7.x.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/5-1-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 5.x&lt;/a&gt;&lt;/strong&gt; for Rails 5.2 or 6.x.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/4-1-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 4.x&lt;/a&gt;&lt;/strong&gt; for Rails from 5.x or 6.x.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/3-9-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 3.x&lt;/a&gt;&lt;/strong&gt; for Rails earlier than 5.0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/dchelimsky/rspec-rails&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 1.x&lt;/a&gt;&lt;/strong&gt; for Rails 2.x.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; This README / branch refers to the current development build. See the &lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/6-0-maintenance&#34;&gt;&lt;code&gt;6-0-maintenance&lt;/code&gt; branch on Github&lt;/a&gt; if you want or require the latest stable release.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;rspec-rails&lt;/code&gt; to &lt;strong&gt;both&lt;/strong&gt; the &lt;code&gt;:development&lt;/code&gt; and &lt;code&gt;:test&lt;/code&gt; groups of your appâs &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Run against this stable release&#xA;group :development, :test do&#xA;  gem &#39;rspec-rails&#39;, &#39;~&amp;gt; 6.0.0&#39;&#xA;end&#xA;&#xA;# Or, run against the main branch&#xA;# (requires main-branch versions of all related RSpec libraries)&#xA;group :development, :test do&#xA;  %w[rspec-core rspec-expectations rspec-mocks rspec-rails rspec-support].each do |lib|&#xA;    gem lib, git: &#34;https://github.com/rspec/#{lib}.git&#34;, branch: &#39;main&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Adding it to the &lt;code&gt;:development&lt;/code&gt; group is not strictly necessary, but without it, generators and rake tasks must be preceded by &lt;code&gt;RAILS_ENV=test&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then, in your project directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Download and install&#xA;$ bundle install&#xA;&#xA;# Generate boilerplate configuration files&#xA;# (check the comments in each generated file for more information)&#xA;$ rails generate rspec:install&#xA;      create  .rspec&#xA;      create  spec&#xA;      create  spec/spec_helper.rb&#xA;      create  spec/rails_helper.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;If your project is already using an older version of &lt;code&gt;rspec-rails&lt;/code&gt;, upgrade to the latest version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle update rspec-rails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSpec follows &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;, which means that âmajor versionâ upgrades (&lt;em&gt;e.g.,&lt;/em&gt; 2.x â 3.x) come with &lt;strong&gt;breaking changes&lt;/strong&gt;. If youâre upgrading from version 2.x or below, read the &lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/upgrade&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; upgrade notes&lt;/a&gt; to find out what to watch out for.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to check the general &lt;a href=&#34;https://relishapp.com/rspec/docs/upgrade&#34;&gt;RSpec upgrade notes&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Creating boilerplate specs with &lt;code&gt;rails generate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# RSpec hooks into built-in generators&#xA;$ rails generate model user&#xA;      invoke  active_record&#xA;      create    db/migrate/20181017040312_create_users.rb&#xA;      create    app/models/user.rb&#xA;      invoke    rspec&#xA;      create      spec/models/user_spec.rb&#xA;&#xA;# RSpec also provides its own spec file generators&#xA;$ rails generate rspec:model user&#xA;      create  spec/models/user_spec.rb&#xA;&#xA;# List all RSpec generators&#xA;$ rails generate --help | grep rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running specs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Default: Run all spec files (i.e., those matching spec/**/*_spec.rb)&#xA;$ bundle exec rspec&#xA;&#xA;# Run all spec files in a single directory (recursively)&#xA;$ bundle exec rspec spec/models&#xA;&#xA;# Run a single spec file&#xA;$ bundle exec rspec spec/controllers/accounts_controller_spec.rb&#xA;&#xA;# Run a single example from a spec file (by line number)&#xA;$ bundle exec rspec spec/controllers/accounts_controller_spec.rb:8&#xA;&#xA;# See all options for running specs&#xA;$ bundle exec rspec --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt; If &lt;code&gt;bundle exec rspec&lt;/code&gt; is too verbose for you, you can generate a binstub at &lt;code&gt;bin/rspec&lt;/code&gt; and use that instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle binstubs rspec-core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RSpec DSL Basics (or, how do I write a spec?)&lt;/h2&gt; &#xA;&lt;p&gt;In RSpec, application behavior is described &lt;strong&gt;first in (almost) plain English, then again in test code&lt;/strong&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe &#39;Post&#39; do           #&#xA;  context &#39;before publication&#39; do  # (almost) plain English&#xA;    it &#39;cannot have comments&#39; do   #&#xA;      expect { Post.create.comments.create! }.to raise_error(ActiveRecord::RecordInvalid)  # test code&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;rspec&lt;/code&gt; will execute this test code, and then use the plain-English descriptions to generate a report of where the application conforms to (or fails to meet) the spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec --format documentation spec/models/post_spec.rb&#xA;&#xA;Post&#xA;  before publication&#xA;    cannot have comments&#xA;&#xA;Failures:&#xA;&#xA;  1) Post before publication cannot have comments&#xA;     Failure/Error: expect { Post.create.comments.create! }.to raise_error(ActiveRecord::RecordInvalid)&#xA;       expected ActiveRecord::RecordInvalid but nothing was raised&#xA;     # ./spec/models/post.rb:4:in `block (3 levels) in &amp;lt;top (required)&amp;gt;&#39;&#xA;&#xA;Finished in 0.00527 seconds (files took 0.29657 seconds to load)&#xA;1 example, 1 failure&#xA;&#xA;Failed examples:&#xA;&#xA;rspec ./spec/models/post_spec.rb:3 # Post before publication cannot have comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an in-depth look at the RSpec DSL, including lots of examples, read the official Cucumber documentation for &lt;a href=&#34;https://relishapp.com/rspec/rspec-core/docs&#34;&gt;RSpec Core&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Helpful Rails Matchers&lt;/h3&gt; &#xA;&lt;p&gt;In RSpec, assertions are called &lt;em&gt;expectations,&lt;/em&gt; and every expectation is built around a &lt;em&gt;matcher.&lt;/em&gt; When you &lt;code&gt;expect(a).to eq(b)&lt;/code&gt;, youâre using the &lt;code&gt;eq&lt;/code&gt; matcher.&lt;/p&gt; &#xA;&lt;p&gt;In addition to &lt;a href=&#34;https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers&#34;&gt;the matchers that come standard in RSpec&lt;/a&gt;, here are some extras that make it easier to test the various parts of a Rails system:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;RSpec matcher&lt;/th&gt; &#xA;   &lt;th&gt;Delegates to&lt;/th&gt; &#xA;   &lt;th&gt;Available in&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/be-a-new-matcher&#34;&gt;&lt;code&gt;be_a_new&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;primarily intended for controller specs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/render-template-matcher&#34;&gt;&lt;code&gt;render_template&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assert_template&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;request / controller / view&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(response).to&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/redirect-to-matcher&#34;&gt;&lt;code&gt;redirect_to&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assert_redirect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;request / controller&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(response).to&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/routing-specs/route-to-matcher&#34;&gt;&lt;code&gt;route_to&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assert_recognizes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;routing / controller&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(...).to route_to&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/routing-specs/be-routable-matcher&#34;&gt;&lt;code&gt;be_routable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;routing / controller&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(...).not_to be_routable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/have-http-status-matcher&#34;&gt;&lt;code&gt;have_http_status&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;request / controller / feature&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/activerecord-relation-match-array&#34;&gt;&lt;code&gt;match_array&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;for comparing arrays of ActiveRecord objects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/have-been-enqueued-matcher&#34;&gt;&lt;code&gt;have_been_enqueued&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;requires config: &lt;code&gt;ActiveJob::Base.queue_adapter = :test&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/have-enqueued-job-matcher&#34;&gt;&lt;code&gt;have_enqueued_job&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;requires config: &lt;code&gt;ActiveJob::Base.queue_adapter = :test&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Follow the links above for examples of how each matcher is used.&lt;/p&gt; &#xA;&lt;h3&gt;What else does RSpec Rails add?&lt;/h3&gt; &#xA;&lt;p&gt;For a comprehensive look at RSpec Railsâ features, read the &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs&#34;&gt;official Cucumber documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What tests should I write?&lt;/h2&gt; &#xA;&lt;p&gt;RSpec Rails defines ten different &lt;em&gt;types&lt;/em&gt; of specs for testing different parts of a typical Rails application. Each one inherits from one of Railsâ built-in &lt;code&gt;TestCase&lt;/code&gt; classes, meaning the helper methods provided by default in Rails tests are available in RSpec, as well.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Spec type&lt;/th&gt; &#xA;   &lt;th&gt;Corresponding Rails test class&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/model-specs&#34;&gt;model&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/controller-specs&#34;&gt;controller&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionController/TestCase.html&#34;&gt;&lt;code&gt;ActionController::TestCase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/mailer-specs&#34;&gt;mailer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ActionMailer::TestCase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/job-specs/job-spec&#34;&gt;job&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/view-specs/view-spec&#34;&gt;view&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ActionView::TestCase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/routing-specs&#34;&gt;routing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/helper-specs/helper-spec&#34;&gt;helper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ActionView::TestCase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/request-specs/request-spec&#34;&gt;request&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/IntegrationTest.html&#34;&gt;&lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec&#34;&gt;feature&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/system-specs/system-spec&#34;&gt;system&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/SystemTestCase.html&#34;&gt;&lt;code&gt;ActionDispatch::SystemTestCase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Follow the links above to see examples of each spec type, or for official Rails API documentation on the given &lt;code&gt;TestCase&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note: This is not a checklist.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Ask a hundred developers how to test an application, and youâll get a hundred different answers.&lt;/p&gt; &#xA; &lt;p&gt;RSpec Rails provides thoughtfully selected features to encourage good testing practices, but thereâs no ârightâ way to do it. Ultimately, itâs up to you to decide how your test suite will be composed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When creating a spec file, assign it a type in the top-level &lt;code&gt;describe&lt;/code&gt; block, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/models/user_spec.rb&#xA;&#xA;RSpec.describe User, type: :model do&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;System specs, feature specs, request specsâwhatâs the difference?&lt;/h3&gt; &#xA;&lt;p&gt;RSpec Rails provides some end-to-end (entire application) testing capability to specify the interaction with the client.&lt;/p&gt; &#xA;&lt;h4&gt;System specs&lt;/h4&gt; &#xA;&lt;p&gt;Also called &lt;strong&gt;acceptance tests&lt;/strong&gt;, &lt;strong&gt;browser tests&lt;/strong&gt;, or &lt;strong&gt;end-to-end tests&lt;/strong&gt;, system specs test the application from the perspective of a &lt;em&gt;human client.&lt;/em&gt; The test code walks through a userâs browser interactions,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;visit &#39;/login&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fill_in &#39;Name&#39;, with: &#39;jdoe&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and the expectations revolve around page content.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;expect(page).to have_text(&#39;Welcome&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Because system specs are a wrapper around Railsâ built-in &lt;code&gt;SystemTestCase&lt;/code&gt;, theyâre only available on Rails 5.1+. (Feature specs serve the same purpose, but without this dependency.)&lt;/p&gt; &#xA;&lt;h4&gt;Feature specs&lt;/h4&gt; &#xA;&lt;p&gt;Before Rails introduced system testing facilities, feature specs were the only spec type for end-to-end testing. While the RSpec team now &lt;a href=&#34;https://rspec.info/blog/2017/10/rspec-3-7-has-been-released/#rails-actiondispatchsystemtest-integration-system-specs&#34;&gt;officially recommends system specs&lt;/a&gt; instead, feature specs are still fully supported, look basically identical, and work on older versions of Rails.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, feature specs require non-trivial configuration to get some important features working, like JavaScript testing or making sure each test runs with a fresh DB state. With system specs, this configuration is provided out-of-the-box.&lt;/p&gt; &#xA;&lt;p&gt;Like system specs, feature specs require the &lt;a href=&#34;https://github.com/teamcapybara/capybara&#34;&gt;Capybara&lt;/a&gt; gem. Rails 5.1+ includes it by default as part of system tests, but if you donât have the luxury of upgrading, be sure to add it to the &lt;code&gt;:test&lt;/code&gt; group of your &lt;code&gt;Gemfile&lt;/code&gt; first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :test do&#xA;  gem &#34;capybara&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Request specs&lt;/h4&gt; &#xA;&lt;p&gt;Request specs are for testing the application from the perspective of a &lt;em&gt;machine client.&lt;/em&gt; They begin with an HTTP request and end with the HTTP response, so theyâre faster than feature specs, but do not examine your appâs UI or JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;Request specs provide a high-level alternative to controller specs. In fact, as of RSpec 3.5, both the Rails and RSpec teams &lt;a href=&#34;https://rspec.info/blog/2016/07/rspec-3-5-has-been-released/#rails-support-for-rails-5&#34;&gt;discourage directly testing controllers&lt;/a&gt; in favor of functional tests like request specs.&lt;/p&gt; &#xA;&lt;p&gt;When writing them, try to answer the question, âFor a given HTTP request (verb + path + parameters), what HTTP response should the application return?â&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/BUILD_DETAIL.md&#34;&gt;Build details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/CONTRIBUTING.md&#34;&gt;Detailed contributing guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once youâve cloned the repo and &lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/DEVELOPMENT.md&#34;&gt;set up the environment&lt;/a&gt;, you can run the specs and Cucumber features, or submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;h3&gt;RSpec base libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;https://github.com/rspec/rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-core&#34;&gt;https://github.com/rspec/rspec-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-expectations&#34;&gt;https://github.com/rspec/rspec-expectations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-mocks&#34;&gt;https://github.com/rspec/rspec-mocks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recommended third-party extensions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thoughtbot/factory_bot&#34;&gt;FactoryBot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teamcapybara/capybara&#34;&gt;Capybara&lt;/a&gt; (Included by default in Rails 5.1+. Note that &lt;a href=&#34;https://rubydoc.info/gems/rspec-rails/file/Capybara.md&#34;&gt;additional configuration is required&lt;/a&gt; to use the Capybara DSL anywhere other than system specs and feature specs.)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>