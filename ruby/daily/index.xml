<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-20T01:34:57Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>peripheryapp/homebrew-periphery</title>
    <updated>2024-02-20T01:34:57Z</updated>
    <id>tag:github.com,2024-02-20:/peripheryapp/homebrew-periphery</id>
    <link href="https://github.com/peripheryapp/homebrew-periphery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Homebrew forumlae for Periphery&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Periphery Homebrew&lt;/h1&gt; &#xA;&lt;p&gt;This is the official homebrew repository for &lt;a href=&#34;https://github.com/peripheryapp/periphery&#34;&gt;https://github.com/peripheryapp/periphery&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap peripheryapp/periphery&#xA;brew cask install periphery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew update&#xA;brew upgrade periphery&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>HammerInTheNews/HTN</title>
    <updated>2024-02-20T01:34:57Z</updated>
    <id>tag:github.com,2024-02-20:/HammerInTheNews/HTN</id>
    <link href="https://github.com/HammerInTheNews/HTN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;== Welcome to Rails&lt;/p&gt; &#xA;&lt;p&gt;Rails is a web-application framework that includes everything needed to create database-backed web applications according to the Model-View-Control pattern.&lt;/p&gt; &#xA;&lt;p&gt;This pattern splits the view (also called the presentation) into &#34;dumb&#34; templates that are primarily responsible for inserting pre-built data in between HTML tags. The model contains the &#34;smart&#34; domain objects (such as Account, Product, Person, Post) that holds all the business logic and knows how to persist themselves to a database. The controller handles the incoming requests (such as Save New Account, Update Product, Show Post) by manipulating the model and directing data to the view.&lt;/p&gt; &#xA;&lt;p&gt;In Rails, the model is handled by what&#39;s called an object-relational mapping layer entitled Active Record. This layer allows you to present the data from database rows as objects and embellish these data objects with business logic methods. You can read more about Active Record in link:files/vendor/rails/activerecord/README.html.&lt;/p&gt; &#xA;&lt;p&gt;The controller and view are handled by the Action Pack, which handles both layers by its two parts: Action View and Action Controller. These two layers are bundled in a single package due to their heavy interdependence. This is unlike the relationship between the Active Record and Action Pack that is much more separate. Each of these packages can be used independently outside of Rails. You can read more about Action Pack in link:files/vendor/rails/actionpack/README.html.&lt;/p&gt; &#xA;&lt;p&gt;== Getting Started&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;At the command prompt, create a new Rails application: &lt;tt&gt;rails new myapp&lt;/tt&gt; (where &lt;tt&gt;myapp&lt;/tt&gt; is the application name)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directory to &lt;tt&gt;myapp&lt;/tt&gt; and start the web server: &lt;tt&gt;cd myapp; rails server&lt;/tt&gt; (run with --help for options)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; and you&#39;ll see: &#34;Welcome aboard: You&#39;re riding Ruby on Rails!&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the guidelines to start developing your application. You can find the following resources handy:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Getting Started Guide: &lt;a href=&#34;http://guides.rubyonrails.org/getting_started.html&#34;&gt;http://guides.rubyonrails.org/getting_started.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby on Rails Tutorial Book: &lt;a href=&#34;http://www.railstutorial.org/&#34;&gt;http://www.railstutorial.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Debugging Rails&lt;/p&gt; &#xA;&lt;p&gt;Sometimes your application goes wrong. Fortunately there are a lot of tools that will help you debug it and get it back on the rails.&lt;/p&gt; &#xA;&lt;p&gt;First area to check is the application log files. Have &#34;tail -f&#34; commands running on the server.log and development.log. Rails will automatically display debugging and runtime information to these files. Debugging info will also be shown in the browser on requests from 127.0.0.1.&lt;/p&gt; &#xA;&lt;p&gt;You can also log your own messages directly into the log file from your code using the Ruby logger class from inside your controllers. Example:&lt;/p&gt; &#xA;&lt;p&gt;class WeblogController &amp;lt; ActionController::Base def destroy @weblog = Weblog.find(params[:id]) @weblog.destroy logger.info(&#34;#{Time.now} Destroyed Weblog ID ##{@weblog.id}!&#34;) end end&lt;/p&gt; &#xA;&lt;p&gt;The result will be a message in your log file along the lines of:&lt;/p&gt; &#xA;&lt;p&gt;Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!&lt;/p&gt; &#xA;&lt;p&gt;More information on how to use the logger is at &lt;a href=&#34;http://www.ruby-doc.org/core/&#34;&gt;http://www.ruby-doc.org/core/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, Ruby documentation can be found at &lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;http://www.ruby-lang.org/&lt;/a&gt;. There are several books available online as well:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Programming Ruby: &lt;a href=&#34;http://www.ruby-doc.org/docs/ProgrammingRuby/&#34;&gt;http://www.ruby-doc.org/docs/ProgrammingRuby/&lt;/a&gt; (Pickaxe)&lt;/li&gt; &#xA; &lt;li&gt;Learn to Program: &lt;a href=&#34;http://pine.fm/LearnToProgram/&#34;&gt;http://pine.fm/LearnToProgram/&lt;/a&gt; (a beginners guide)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These two books will bring you up to speed on the Ruby language and also on programming in general.&lt;/p&gt; &#xA;&lt;p&gt;== Debugger&lt;/p&gt; &#xA;&lt;p&gt;Debugger support is available through the debugger command when you start your Mongrel or WEBrick server with --debugger. This means that you can break out of execution at any point in the code, investigate and change the model, and then, resume execution! You need to install ruby-debug to run the server in debugging mode. With gems, use &lt;tt&gt;sudo gem install ruby-debug&lt;/tt&gt;. Example:&lt;/p&gt; &#xA;&lt;p&gt;class WeblogController &amp;lt; ActionController::Base def index @posts = Post.all debugger end end&lt;/p&gt; &#xA;&lt;p&gt;So the controller will accept the action, run the first line, then present you with a IRB prompt in the server window. Here you can do things like:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;@posts.inspect =&amp;gt; &#34;[#&amp;lt;Post:0x14a6be8 @attributes={&#34;title&#34;=&amp;gt;nil, &#34;body&#34;=&amp;gt;nil, &#34;id&#34;=&amp;gt;&#34;1&#34;}&amp;gt;, #&amp;lt;Post:0x14a6620 @attributes={&#34;title&#34;=&amp;gt;&#34;Rails&#34;, &#34;body&#34;=&amp;gt;&#34;Only ten..&#34;, &#34;id&#34;=&amp;gt;&#34;2&#34;}&amp;gt;]&#34; @posts.first.title = &#34;hello from a debugger&#34; =&amp;gt; &#34;hello from a debugger&#34;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;...and even better, you can examine how your runtime objects actually work:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;f = @posts.first =&amp;gt; #&amp;lt;Post:0x13630c4 @attributes={&#34;title&#34;=&amp;gt;nil, &#34;body&#34;=&amp;gt;nil, &#34;id&#34;=&amp;gt;&#34;1&#34;}&amp;gt; f. Display all 152 possibilities? (y or n)&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Finally, when you&#39;re ready to resume execution, you can enter &#34;cont&#34;.&lt;/p&gt; &#xA;&lt;p&gt;== Console&lt;/p&gt; &#xA;&lt;p&gt;The console is a Ruby shell, which allows you to interact with your application&#39;s domain model. Here you&#39;ll have all parts of the application configured, just like it is when the application is running. You can inspect domain models, change values, and save to the database. Starting the script without arguments will launch it in the development environment.&lt;/p&gt; &#xA;&lt;p&gt;To start the console, run &lt;tt&gt;rails console&lt;/tt&gt; from the application directory.&lt;/p&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Passing the &lt;tt&gt;-s, --sandbox&lt;/tt&gt; argument will rollback any modifications made to the database.&lt;/li&gt; &#xA; &lt;li&gt;Passing an environment name as an argument will load the corresponding environment. Example: &lt;tt&gt;rails console production&lt;/tt&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To reload your controllers and models after launching the console run &lt;tt&gt;reload!&lt;/tt&gt;&lt;/p&gt; &#xA;&lt;p&gt;More information about irb can be found at: link:&lt;a href=&#34;http://www.rubycentral.org/pickaxe/irb.html&#34;&gt;http://www.rubycentral.org/pickaxe/irb.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;== dbconsole&lt;/p&gt; &#xA;&lt;p&gt;You can go to the command line of your database directly through &lt;tt&gt;rails dbconsole&lt;/tt&gt;. You would be connected to the database with the credentials defined in database.yml. Starting the script without arguments will connect you to the development database. Passing an argument will connect you to a different database, like &lt;tt&gt;rails dbconsole production&lt;/tt&gt;. Currently works for MySQL, PostgreSQL and SQLite 3.&lt;/p&gt; &#xA;&lt;p&gt;== Description of Contents&lt;/p&gt; &#xA;&lt;p&gt;The default directory structure of a generated Ruby on Rails application:&lt;/p&gt; &#xA;&lt;p&gt;|-- app | |-- assets | |-- images | |-- javascripts | &lt;code&gt;-- stylesheets | |-- controllers | |-- helpers | |-- mailers | |-- models | &lt;/code&gt;-- views | &lt;code&gt;-- layouts |-- config | |-- environments | |-- initializers | &lt;/code&gt;-- locales |-- db |-- doc |-- lib | &lt;code&gt;-- tasks |-- log |-- public |-- script |-- test | |-- fixtures | |-- functional | |-- integration | |-- performance | &lt;/code&gt;-- unit |-- tmp | |-- cache | |-- pids | |-- sessions | &lt;code&gt;-- sockets &lt;/code&gt;-- vendor |-- assets &lt;code&gt;-- stylesheets &lt;/code&gt;-- plugins&lt;/p&gt; &#xA;&lt;p&gt;app Holds all the code that&#39;s specific to this particular application.&lt;/p&gt; &#xA;&lt;p&gt;app/assets Contains subdirectories for images, stylesheets, and JavaScript files.&lt;/p&gt; &#xA;&lt;p&gt;app/controllers Holds controllers that should be named like weblogs_controller.rb for automated URL mapping. All controllers should descend from ApplicationController which itself descends from ActionController::Base.&lt;/p&gt; &#xA;&lt;p&gt;app/models Holds models that should be named like post.rb. Models descend from ActiveRecord::Base by default.&lt;/p&gt; &#xA;&lt;p&gt;app/views Holds the template files for the view that should be named like weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby syntax by default.&lt;/p&gt; &#xA;&lt;p&gt;app/views/layouts Holds the template files for layouts to be used with views. This models the common header/footer method of wrapping views. In your views, define a layout using the &lt;tt&gt;layout :default&lt;/tt&gt; and create a file named default.html.erb. Inside default.html.erb, call &amp;lt;% yield %&amp;gt; to render the view using this layout.&lt;/p&gt; &#xA;&lt;p&gt;app/helpers Holds view helpers that should be named like weblogs_helper.rb. These are generated for you automatically when using generators for controllers. Helpers can be used to wrap functionality for your views into methods.&lt;/p&gt; &#xA;&lt;p&gt;config Configuration files for the Rails environment, the routing map, the database, and other dependencies.&lt;/p&gt; &#xA;&lt;p&gt;db Contains the database schema in schema.rb. db/migrate contains all the sequence of Migrations for your schema.&lt;/p&gt; &#xA;&lt;p&gt;doc This directory is where your application documentation will be stored when generated using &lt;tt&gt;rake doc:app&lt;/tt&gt;&lt;/p&gt; &#xA;&lt;p&gt;lib Application specific libraries. Basically, any kind of custom code that doesn&#39;t belong under controllers, models, or helpers. This directory is in the load path.&lt;/p&gt; &#xA;&lt;p&gt;public The directory available for the web server. Also contains the dispatchers and the default HTML files. This should be set as the DOCUMENT_ROOT of your web server.&lt;/p&gt; &#xA;&lt;p&gt;script Helper scripts for automation and generation.&lt;/p&gt; &#xA;&lt;p&gt;test Unit and functional tests along with fixtures. When using the rails generate command, template test files will be generated for you and placed in this directory.&lt;/p&gt; &#xA;&lt;p&gt;vendor External libraries that the application depends on. Also includes the plugins subdirectory. If the app has frozen rails, those gems also go here, under vendor/rails/. This directory is in the load path.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cloudfoundry/bosh-linux-stemcell-builder</title>
    <updated>2024-02-20T01:34:57Z</updated>
    <id>tag:github.com,2024-02-20:/cloudfoundry/bosh-linux-stemcell-builder</id>
    <link href="https://github.com/cloudfoundry/bosh-linux-stemcell-builder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BOSH Ubuntu Linux stemcells&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BOSH Linux Stemcell Builder&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains tools for creating BOSH stemcells. A stemcell is a bootable disk image that is used as a template by a BOSH Director to create VMs.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start: Building a Stemcell Locally&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:cloudfoundry/bosh-linux-stemcell-builder.git&#xA;cd bosh-linux-stemcell-builder&#xA;git checkout ubuntu-jammy/master&#xA;mkdir -p tmp&#xA;docker run \&#xA;   --privileged \&#xA;   -v &#34;$(pwd):/opt/bosh&#34; \&#xA;   --workdir /opt/bosh \&#xA;   --user=1000:1000 \&#xA;   -it \&#xA;   bosh/os-image-stemcell-builder:jammy&#xA;# You&#39;re now in the the Docker container&#xA;gem install bundler&#xA;bundle&#xA; # build OS image&#xA;bundle exec rake stemcell:build_os_image[ubuntu,jammy,$PWD/tmp/ubuntu_base_image.tgz] # build OS image&#xA; # build vSphere stemcell&#xA;bundle exec rake stemcell:build_with_local_os_image[vsphere,esxi,ubuntu,jammy,$PWD/tmp/ubuntu_base_image.tgz]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When building a vSphere stemcell, you must download &lt;code&gt;VMware-ovftool-*.bundle&lt;/code&gt; and place it in the &lt;code&gt;ci/docker/os-image-stemcell-builder-jammy/&lt;/code&gt; directory. See &lt;a href=&#34;https://raw.githubusercontent.com/cloudfoundry/bosh-linux-stemcell-builder/ubuntu-jammy/master/#external-assets&#34;&gt;External Assets&lt;/a&gt; for download instructions.&lt;/p&gt; &#xA;&lt;h3&gt;OS image&lt;/h3&gt; &#xA;&lt;p&gt;An OS image is a tarball that contains a snapshot of an OS filesystem, including the libraries and system utilities needed by the BOSH agent; however, it does not contain the BOSH agent nor the virtualization tools: &lt;a href=&#34;https://raw.githubusercontent.com/cloudfoundry/bosh-linux-stemcell-builder/ubuntu-jammy/master/#with-local-os-image&#34;&gt;a subsequent Rake task&lt;/a&gt; adds the BOSH agent and a set of virtualization tools to the base OS image to produce a stemcell.&lt;/p&gt; &#xA;&lt;p&gt;The OS Image should be rebuilt when you are making changes to the packages installed in the operating system or when making changes to the configuration of those packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rake stemcell:build_os_image[ubuntu,jammy,$PWD/tmp/ubuntu_base_image.tgz]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The arguments to the &lt;code&gt;stemcell:build_os_image&lt;/code&gt; rake task follow:&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;code&gt;operating_system_name&lt;/code&gt;&lt;/em&gt; (&lt;code&gt;ubuntu&lt;/code&gt;): identifies which type of OS to fetch. Determines which package repository and packaging tool will be used to download and assemble the files. Currently, only &lt;code&gt;ubuntu&lt;/code&gt; is recognized.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;code&gt;operating_system_version&lt;/code&gt;&lt;/em&gt; (&lt;code&gt;jammy&lt;/code&gt;): an identifier that the system may use to decide which release of the OS to download. Acceptable values depend on the operating system. For &lt;code&gt;ubuntu&lt;/code&gt;, use &lt;code&gt;jammy&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;code&gt;os_image_path&lt;/code&gt;&lt;/em&gt; (&lt;code&gt;$PWD/tmp/ubuntu_base_image.tgz&lt;/code&gt;): the path to write the finished OS image tarball to. If a file exists at this path already, it will be overwritten without warning.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building a Stemcell&lt;/h3&gt; &#xA;&lt;p&gt;Rebuild the stemcell when you are making and testing BOSH-specific changes such as a new BOSH agent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rake stemcell:build_with_local_os_image[vsphere,esxi,ubuntu,jammy,$PWD/tmp/ubuntu_base_image.tgz,&#34;0.0.8&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The arguments to &lt;code&gt;stemcell:build_with_local_os_image&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;infrastructure_name&lt;/code&gt;: Which IaaS you are producing the stemcell for. Determines which virtualization tools to package on top of the stemcell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hypervisor_name&lt;/code&gt;: Depending on what the IAAS supports, which hypervisor to target: &lt;code&gt;aws&lt;/code&gt; → &lt;code&gt;xen-hvm&lt;/code&gt;, &lt;code&gt;azure&lt;/code&gt; → &lt;code&gt;hyperv&lt;/code&gt;, &lt;code&gt;google&lt;/code&gt; → &lt;code&gt;kvm&lt;/code&gt;, &lt;code&gt;openstack&lt;/code&gt; → &lt;code&gt;kvm&lt;/code&gt;, &lt;code&gt;vsphere&lt;/code&gt; → &lt;code&gt;esxi&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;operating_system_name&lt;/code&gt; (&lt;code&gt;ubuntu&lt;/code&gt;): Type of OS. Same as&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stemcell:build_os_image&lt;/code&gt;. Can optionally include a variant suffix (&lt;code&gt;jammy-fips&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;operating_system_version&lt;/code&gt; (&lt;code&gt;jammy&lt;/code&gt;): OS release. Same as&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;os_image_path&lt;/code&gt; (&lt;code&gt;$PWD/tmp/ubuntu_base_image.tgz&lt;/code&gt;): Path to base OS image produced in &lt;code&gt;stemcell:build_os_image&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build_number&lt;/code&gt; (&lt;code&gt;0.0.8&lt;/code&gt;): Stemcell version. Pro-tip: take the version number of the most recent release and add one, e.g.: &#34;0.0.7&#34; → &#34;0.0.8&#34;. If not specified, it will default to &#34;0000&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;The Resulting Stemcell&lt;/h3&gt; &#xA;&lt;p&gt;You can find the resulting stemcell in the &lt;code&gt;tmp/&lt;/code&gt; directory of the host, or in the &lt;code&gt;/opt/bosh/tmp&lt;/code&gt; directory in the Docker container. Using the above example, the stemcell would be at &lt;code&gt;tmp/bosh-stemcell-0.0.8-vsphere-esxi-ubuntu-jammy-go_agent.tgz&lt;/code&gt;. You can upload the stemcell to a vSphere BOSH Director:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bosh upload-stemcell tmp/bosh-stemcell-0.0.8-vsphere-esxi-ubuntu-jammy-go_agent.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;[Fixme: update Testing section to Jammy]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to run tests for OS Images&lt;/h3&gt; &#xA;&lt;p&gt;The OS tests are meant to be run against the OS environment to which they belong. When you run the &lt;code&gt;stemcell:build_os_image&lt;/code&gt; rake task, it will create a .raw OS image that it runs the OS specific tests against. You will need to run the rake task the first time you create your docker container, but everytime after, as long as you do not destroy the container, you should be able to run the specific tests.&lt;/p&gt; &#xA;&lt;p&gt;To run the &lt;code&gt;ubuntu_jammy_spec.rb&lt;/code&gt; tests (&lt;strong&gt;assuming you&#39;ve already built the OS image&lt;/strong&gt; at the &lt;code&gt;tmp/ubuntu_base_image.tgz&lt;/code&gt; and you&#39;re within the Docker container):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /opt/bosh/bosh-stemcell&#xA;OS_IMAGE=/opt/bosh/tmp/ubuntu_base_image.tgz bundle exec rspec -fd spec/os_image/ubuntu_jammy_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to Run Tests for Stemcell&lt;/h3&gt; &#xA;&lt;p&gt;When you run the &lt;code&gt;stemcell:build_with_local_os_image&lt;/code&gt; or &lt;code&gt;stemcell:build&lt;/code&gt; rake task, it will create a stemcell that it runs the stemcell specific tests against. You will need to run the &lt;strong&gt;rake task the first time you create your docker container&lt;/strong&gt;, but everytime after, as long as you do not destroy the container, you should be able to run the specific tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /opt/bosh/bosh-stemcell; \&#xA;STEMCELL_IMAGE=/mnt/stemcells/vsphere/esxi/ubuntu/work/work/vsphere-esxi-ubuntu.raw \&#xA;STEMCELL_WORKDIR=/mnt/stemcells/vsphere/esxi/ubuntu/work/work/chroot \&#xA;OS_NAME=ubuntu \&#xA;bundle exec rspec -fd --tag ~exclude_on_vsphere \&#xA;spec/os_image/ubuntu_jammy_spec.rb \&#xA;spec/stemcells/ubuntu_jammy_spec.rb \&#xA;spec/stemcells/go_agent_spec.rb \&#xA;spec/stemcells/vsphere_spec.rb \&#xA;spec/stemcells/stig_spec.rb \&#xA;spec/stemcells/cis_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to run tests for ShelloutTypes&lt;/h3&gt; &#xA;&lt;p&gt;In pursuit of more robustly testing, we wrote our testing library for stemcell contents, called ShelloutTypes.&lt;/p&gt; &#xA;&lt;p&gt;The ShelloutTypes code has its own unit tests, but require root privileges and an ubuntu chroot environment to run. For this reason, we use the &lt;code&gt;bosh/main-ubuntu-chroot&lt;/code&gt; docker image for unit tests. To run these unit tests locally, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle install --local&#xA;cd /opt/bosh/bosh-stemcell&#xA;OS_IMAGE=/opt/bosh/tmp/ubuntu_base_image.tgz bundle exec rspec spec/ --tag shellout_types&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If on macOS, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;OSX=true OS_IMAGE=/opt/bosh/tmp/ubuntu_base_image.tgz bundle exec rspec spec/ --tag shellout_types&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to run tests for BOSH Linux Stemcell Builder&lt;/h3&gt; &#xA;&lt;p&gt;The BOSH Linux Stemcell Builder code itself can be tested with the following command&#39;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle install --local&#xA;cd /opt/bosh/bosh-stemcell&#xA;bundle exec rspec spec/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you find yourself debugging any of the above processes, here is what you need to know:&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Most of the action happens in Bash scripts, which are referred to as &lt;em&gt;stages&lt;/em&gt;, and can be found in &lt;code&gt;stemcell_builder/stages/&amp;lt;stage_name&amp;gt;/apply.sh&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;While debugging a particular stage that is failing, you can resume the process from that stage by adding &lt;code&gt;resume_from=&amp;lt;stage_name&amp;gt;&lt;/code&gt; to the end of your &lt;code&gt;bundle exec rake&lt;/code&gt; command. When a stage&#39;s &lt;code&gt;apply.sh&lt;/code&gt; fails, you should see a message of the form &lt;code&gt;Can&#39;t find stage &#39;&amp;lt;stage&amp;gt;&#39; to resume from. Aborting.&lt;/code&gt; so you know which stage failed and where you can resume from after fixing the problem. Please use caution as stages are not guaranteed to be idempotent.&lt;/p&gt; &lt;p&gt;Example usage:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle exec rake stemcell:build_os_image[ubuntu,jammy,$PWD/tmp/ubuntu_base_image.tgz] resume_from=rsyslog_config&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Pro Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the OS image has been built and so long as you only make test case modifications you can rerun the tests (without rebuilding OS image). Details in section &lt;code&gt;How to run tests for OS Images&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If the Stemcell has been built and you are only updating tests, you do not need to re-build the stemcell. You can simply rerun the tests (without rebuilding Stemcell. Details in section &lt;code&gt;How to run tests for Stemcell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s possible to verify OS/Stemcell changes without making a deployment using the stemcell. For a vSphere-specific Ubuntu stemcell, the filesytem is available at &lt;code&gt;/mnt/stemcells/vsphere/esxi/ubuntu/work/work/chroot&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External Assets&lt;/h2&gt; &#xA;&lt;p&gt;The ovftool installer from VMWare can be found at &lt;a href=&#34;https://my.vmware.com/group/vmware/details?downloadGroup=OVFTOOL410&amp;amp;productId=489&#34;&gt;my.vmware.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The ovftool installer must be copied into the &lt;a href=&#34;https://github.com/cloudfoundry/bosh-linux-stemcell-builder/tree/master/ci/docker/os-image-stemcell-builder&#34;&gt;ci/docker/os-image-stemcell-builder-jammy&lt;/a&gt; next to the Dockerfile or you will receive the error&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Step 24/30 : ADD ${OVF_TOOL_INSTALLER} /tmp/ovftool_installer.bundle&#xA;ADD failed: stat /var/lib/docker/tmp/docker-builder389354746/VMware-ovftool-4.1.0-2459827-lin.x86_64.bundle: no such file or directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rebuilding the Docker Image&lt;/h2&gt; &#xA;&lt;p&gt;The Docker image is published to &lt;a href=&#34;https://hub.docker.com/r/bosh/os-image-stemcell-builder/&#34;&gt;&lt;code&gt;bosh/os-image-stemcell-builder&lt;/code&gt;&lt;/a&gt;. You will need the ovftool installer present on your filesystem.&lt;/p&gt; &#xA;&lt;p&gt;Rebuild the container with the &lt;code&gt;build&lt;/code&gt; script...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build os-image-stemcell-builder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When ready, &lt;code&gt;push&lt;/code&gt; to DockerHub and use the credentials from LastPass...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd os-image-stemcell-builder&#xA;./push&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>