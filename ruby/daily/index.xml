<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-29T01:44:45Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hopsoft/turbo_ready</title>
    <updated>2022-08-29T01:44:45Z</updated>
    <id>tag:github.com,2022-08-29:/hopsoft/turbo_ready</id>
    <link href="https://github.com/hopsoft/turbo_ready" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Take full control of the DOM with Turbo Streams&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://ik.imagekit.io/hopsoft/turbo-ready-logo-light_df4jcvbDL.webp?ik-sdk-version=javascript-1.4.3&amp;amp;updatedAt=1661615678275&#34;&gt; &#xA;  &lt;img height=&#34;200&#34; src=&#34;https://ik.imagekit.io/hopsoft/turbo-ready-logo-dark_VN4hA2ctc.webp?ik-sdk-version=javascript-1.4.3&amp;amp;updatedAt=1661615678278&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt; Turbo Stream&#39;s Swiss Army Knife &lt;/h3&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Welcome to TurboReady üëã &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://blog.codinghorror.com/the-best-code-is-no-code-at-all/&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Lines of Code&#34; src=&#34;https://img.shields.io/badge/Lines_of_Code-278-brightgreen.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/testdouble/standard&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Ruby Code Style&#34; src=&#34;https://img.shields.io/badge/Ruby_Code_Style-standard-brightgreen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/sheerun/prettier-standard&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;JavaScript Code Style&#34; src=&#34;https://img.shields.io/badge/JavaScript_Code_Style-prettier_standard-ff69b4.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/package/turbo_ready@&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;npm bundle size&#34; src=&#34;https://img.shields.io/bundlephobia/minzip/turbo_ready?label=JavaScript%20Pkg%20Size&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;TurboReady extends &lt;a href=&#34;https://turbo.hotwired.dev/reference/streams&#34;&gt;Turbo Streams&lt;/a&gt; to give you full control of the browser&#39;s &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model&#34;&gt;Document Object Model (DOM).&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thats right!&lt;/strong&gt; You can &lt;code&gt;invoke&lt;/code&gt; any DOM method on any DOM object &lt;em&gt;(including 3rd party libs)&lt;/em&gt; using Turbo Streams.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;turbo_stream.invoke &#34;console.log&#34;, &#34;Hello World!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- Tocer[start]: Auto-generated, don&#39;t remove. --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#why-turboready&#34;&gt;Why TurboReady?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#advanced-usage&#34;&gt;Advanced Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#what-else-can-i-do&#34;&gt;What Else Can I Do?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#extending-behavior&#34;&gt;Extending Behavior&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#public-api&#34;&gt;Public API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#a-word-of-caution&#34;&gt;A Word of Caution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#releasing&#34;&gt;Releasing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hopsoft/turbo_ready/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Tocer[finish]: Auto-generated, don&#39;t remove. --&gt; &#xA;&lt;h2&gt;Why TurboReady?&lt;/h2&gt; &#xA;&lt;p&gt;Turbo Streams &lt;a href=&#34;https://turbo.hotwired.dev/handbook/streams#but-what-about-running-javascript&#34;&gt;intentionally restricts&lt;/a&gt; official actions to CRUD related activity. The &lt;a href=&#34;https://turbo.hotwired.dev/reference/streams#the-seven-actions&#34;&gt;official actions&lt;/a&gt; work well for a considerable number of use cases and you should push Streams as far as possible before reaching for TurboReady.&lt;/p&gt; &#xA;&lt;p&gt;If you discover that CRUD isn&#39;t enough, TurboReady covers pretty much everything else.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Please join nearly 2000 of us on &lt;a href=&#34;https://discord.gg/stimulus-reflex&#34;&gt;Discord&lt;/a&gt; for support getting started, as well as active discussions around Rails, Hotwire, Stimulus, Turbo (Drive, Frames, Streams), TurboReady, CableReady, StimulusReflex, ViewComponent, Phlex, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/discord/629472241427415060&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stop by #newcomers and introduce yourselves!&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;Proudly sponsored by&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.clickfunnels.com?utm_source=hopsoft&amp;amp;utm_medium=open-source&amp;amp;utm_campaign=turbo_ready&#34;&gt; &lt;img src=&#34;https://images.clickfunnel.com/uploads/digital_asset/file/176632/clickfunnels-dark-logo.svg?sanitize=true&#34; width=&#34;575&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubygems.org/gems/rails&#34;&gt;rails&lt;/a&gt; &lt;code&gt;&amp;gt;=6.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubygems.org/gems/turbo-rails&#34;&gt;turbo-rails&lt;/a&gt; &lt;code&gt;&amp;gt;=1.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yarnpkg.com/package/@hotwired/turbo-rails&#34;&gt;@hotwired/turbo-rails&lt;/a&gt; &lt;code&gt;&amp;gt;=7.2.0-beta.2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle add &#34;turbo_ready --version VERSION&#34;&#xA;yarn add &#34;turbo_ready@VERSION --exact&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Be sure to use the same version for each libary.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Import and intialize TurboReady in your application.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;# Gemfile&#xA;+gem &#34;turbo_ready&#34;, &#34;~&amp;gt; 0.0.5&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;# package.json&#xA;&#34;dependencies&#34;: {&#xA;+  &#34;@hotwired/turbo-rails&#34;: &#34;&amp;gt;=7.2.0-beta.2&#34;,&#xA;+  &#34;turbo_ready&#34;: &#34;^0.0.5&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;# app/javascript/application.js&#xA;import &#39;@hotwired/turbo-rails&#39;&#xA;+import TurboReady from &#39;turbo_ready&#39;&#xA;&#xA;+TurboReady.initialize(Turbo.StreamActions) // Adds TurboReady stream actions to Turbo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Manipulate the DOM from anywhere you use &lt;a href=&#34;https://turbo.hotwired.dev/handbook/streams#integration-with-server-side-frameworks&#34;&gt;official Turbo Streams&lt;/a&gt;. Namely, &lt;a href=&#34;https://guides.rubyonrails.org/active_model_basics.html&#34;&gt;&lt;strong&gt;M&lt;/strong&gt;odels&lt;/a&gt;, &lt;a href=&#34;https://guides.rubyonrails.org/action_view_overview.html&#34;&gt;&lt;strong&gt;V&lt;/strong&gt;iews&lt;/a&gt;, &lt;a href=&#34;https://guides.rubyonrails.org/action_controller_overview.html&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;ontrollers&lt;/a&gt; and &lt;a href=&#34;https://guides.rubyonrails.org/active_job_basics.html&#34;&gt;Jobs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can &lt;strong&gt;chain invocations.&lt;/strong&gt; ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;turbo_stream&#xA;  .invoke(&#34;document.body.insertAdjacentHTML&#34;, &#34;afterbegin&#34;, &#34;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&#34;) # dot notation&#xA;  .invoke(&#34;setAttribute&#34;, &#34;data-turbo-ready&#34;, true, selector: &#34;.button&#34;) # selector&#xA;  .invoke(&#34;classList.add&#34;, &#34;turbo-ready&#34;, selector: &#34;a&#34;) # dot notation + selector&#xA;  .flush # flush must be called when chaining invocations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#dot_notation&#34;&gt;dot notation&lt;/a&gt; or &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll&#34;&gt;selectors&lt;/a&gt;... &lt;strong&gt;and can even combine them!&lt;/strong&gt; ü§Ø&lt;/p&gt; &#xA;&lt;p&gt;Can I dispatch events? &lt;strong&gt;You bet!&lt;/strong&gt; ‚ö°Ô∏è&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;turbo_stream&#xA;  .invoke(&#34;dispatchEvent&#34;, &#34;turbo-ready:demo&#34;) # fires on window&#xA;  .invoke(&#34;document.dispatchEvent&#34;, &#34;turbo-ready:demo&#34;) # fires on document&#xA;  .invoke(&#34;dispatchEvent&#34;, &#34;turbo-ready:demo&#34;, selector: &#34;#my-element&#34;) # fires on matching element(s)&#xA;  .invoke(&#34;dispatchEvent&#34;, {bubbles: true, detail: {...}}) # set event options&#xA;  .flush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can use symbols and &lt;a href=&#34;https://en.wikipedia.org/wiki/Snake_case&#34;&gt;snake case&lt;/a&gt; when invoking DOM functionality. It&#39;ll implicitly convert to &lt;a href=&#34;https://en.wikipedia.org/wiki/Camel_case&#34;&gt;camel case&lt;/a&gt;. üíé&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;turbo_stream&#xA;  .invoke(:animate, [{opacity: 0}, {opacity: 1}], 2000, selector: &#34;#example&#34;)&#xA;  .invoke(:dispatch_event, {detail: {converts_to_camel_case: true}}, selector: &#34;#example&#34;)&#xA;  .flush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Need to opt out of camelize? No problem... just disable it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;turbo_stream.invoke :contrived_demo, camelize: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What Else Can I Do?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The possibilities are endless&lt;/strong&gt; and MDN has your back... &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API.&#34;&gt;learn about the DOM and web APIs here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Extending Behavior&lt;/h3&gt; &#xA;&lt;p&gt;Want to extend things with custom functionality? &lt;strong&gt;Let&#39;s do it.&lt;/strong&gt; üîå&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// JavaScript&#xA;import morphdom from &#39;morphdom&#39;&#xA;&#xA;window.MyNamespace = {&#xA;  morph: (from, to, options = {}) =&amp;gt; {&#xA;    morphdom(document.querySelector(from), to, options)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Ruby&#xA;turbo_stream&#xA;  .invoke &#34;MyNamespace.morph&#34;, &#34;#demo&#34;, &#34;&amp;lt;div id=&#39;demo&#39;&amp;gt;&amp;lt;p&amp;gt;You&#39;ve changed...&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&#34;, {childrenOnly: true}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Public API&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s only one method to consider, &lt;code&gt;invoke&lt;/code&gt; defined in the &lt;a href=&#34;https://github.com/hopsoft/turbo_ready/raw/main/lib/turbo_ready/tag_builder.rb&#34;&gt;tag builder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Ruby&#xA;turbo_stream&#xA;  .invoke(method, *args, selector: nil, camelize: true, id: nil)&#xA;#         |        |     |              |               |&#xA;#         |        |     |              |               |- Identifies this invocation (optional)&#xA;#         |        |     |              |&#xA;#         |        |     |              |- Should we camelize the JavaScript stuff? (optional)&#xA;#         |        |     |                 (allows us to write snake_case Ruby)&#xA;#         |        |     |&#xA;#         |        |     |- An CSS selector for the element(s) to target (optional)&#xA;#         |        |&#xA;#         |        |- The arguments to pass to the JavaScript method being invoked (optional)&#xA;#         |&#xA;#         |- The JavaScript method to invoke (can use dot notation)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The JavaScript method will be invoked on all matching elements when a &lt;code&gt;selector&lt;/code&gt; is passed.&lt;/p&gt; &#xA;&lt;h2&gt;A Word of Caution&lt;/h2&gt; &#xA;&lt;p&gt;Manually orchestrating DOM activity gets tedious fast. &lt;strong&gt;‚ö†Ô∏è Don&#39;t abuse this superpower!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;With great power comes great responsibility. &lt;em&gt;-Uncle Ben&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library is an extremely sharp tool. üî™ Consider it a low-level building block that can be used to craft additional libraries with great &lt;a href=&#34;https://en.wikipedia.org/wiki/User_experience#Developer_experience&#34;&gt;DX&lt;/a&gt; like &lt;a href=&#34;https://github.com/stimulusreflex/cable_ready&#34;&gt;CableReady&lt;/a&gt; and &lt;a href=&#34;https://github.com/stimulusreflex/stimulus_reflex&#34;&gt;StimulusReflex&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Restrict your direct application usage to DOM manipulation that falls outside the purview of &lt;a href=&#34;https://turbo.hotwired.dev/reference/streams#the-seven-actions&#34;&gt;Turbo&#39;s official actions&lt;/a&gt;... &lt;em&gt;don&#39;t overdo it and find yourself maintaining spaghetti code reminiscent of the jQuery days.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Releasing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn&lt;/code&gt; and &lt;code&gt;bundle&lt;/code&gt; to pick up the latest&lt;/li&gt; &#xA; &lt;li&gt;Bump version number at &lt;code&gt;lib/turbo_ready/version.rb&lt;/code&gt;. Pre-release versions use &lt;code&gt;.preN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rake build&lt;/code&gt; and &lt;code&gt;yarn build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/standardize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commit and push changes to GitHub&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rake release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn publish --no-git-tag-version&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Yarn will prompt you for the new version. Pre-release versions use &lt;code&gt;-preN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commit and push changes to GitHub&lt;/li&gt; &#xA; &lt;li&gt;Create a new release on GitHub (&lt;a href=&#34;https://github.com/hopsoft/turbo_ready/releases&#34;&gt;here&lt;/a&gt;) and generate the changelog for the stable release for it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-active-record-associations-many-to-many</title>
    <updated>2022-08-29T01:44:45Z</updated>
    <id>tag:github.com,2022-08-29:/learn-co-curriculum/phase-3-active-record-associations-many-to-many</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-active-record-associations-many-to-many" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Many To Many Associations&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Establish the many-to-many (or &lt;strong&gt;has many through&lt;/strong&gt;) association in Active Record&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In the previous lesson, we saw how to create a &lt;strong&gt;one-to-many&lt;/strong&gt; association between two models using Active Record by following certain naming conventions and using the right foreign key on our tables when generating the migrations.&lt;/p&gt; &#xA;&lt;p&gt;In the SQL section, we learned about one other kind of relationship: the &lt;strong&gt;many-to-many&lt;/strong&gt;, also known as the &lt;strong&gt;has many through&lt;/strong&gt;, relationship. For instance, in a domain where a &lt;strong&gt;cat&lt;/strong&gt; has many &lt;strong&gt;owners&lt;/strong&gt; and an &lt;strong&gt;owner&lt;/strong&gt; can also have many &lt;strong&gt;cats&lt;/strong&gt;, we needed to create another table to join between those two tables:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-3/sql-table-relations-creating-join-tables/cats-cat_owners-owners.png&#34; alt=&#34;Pets Database ERD&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this lesson, we&#39;ll learn how to create a &lt;strong&gt;many-to-many&lt;/strong&gt; relationship in Active Record. We&#39;ll continue working on our games and reviews domain, but this time we&#39;ll add a third model into the mix: a users model. We&#39;ll be setting up these relationships:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A game &lt;strong&gt;has many&lt;/strong&gt; reviews&lt;/li&gt; &#xA; &lt;li&gt;A game &lt;strong&gt;has many&lt;/strong&gt; users, &lt;strong&gt;through&lt;/strong&gt; reviews&lt;/li&gt; &#xA; &lt;li&gt;A review &lt;strong&gt;belongs to&lt;/strong&gt; a game&lt;/li&gt; &#xA; &lt;li&gt;A review &lt;strong&gt;belongs to&lt;/strong&gt; a user&lt;/li&gt; &#xA; &lt;li&gt;A user &lt;strong&gt;has many&lt;/strong&gt; reviews&lt;/li&gt; &#xA; &lt;li&gt;A user &lt;strong&gt;has many&lt;/strong&gt; games, &lt;strong&gt;through&lt;/strong&gt; reviews&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once we&#39;re done setting up the database tables, here&#39;s what the ERD will look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-3/active-record-associations-many-to-many/games-reviews-users-erd.png&#34; alt=&#34;Game Reviews ERD&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To get started, run &lt;code&gt;bundle install&lt;/code&gt;, then follow along with the code.&lt;/p&gt; &#xA;&lt;h2&gt;Creating a Join Table&lt;/h2&gt; &#xA;&lt;p&gt;Right now, we&#39;ve got code for the &lt;code&gt;Game&lt;/code&gt; model (and the &lt;code&gt;games&lt;/code&gt; table), along with the code for the &lt;code&gt;Review&lt;/code&gt; model (and the &lt;code&gt;reviews&lt;/code&gt; table) from the previous lesson.&lt;/p&gt; &#xA;&lt;p&gt;To start, let&#39;s add the code we&#39;ll need for the &lt;code&gt;User&lt;/code&gt; model as well. We&#39;ll start by generating the migration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle exec rake db:create_migration NAME=create_users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s create the &lt;code&gt;users&lt;/code&gt; table with a &lt;code&gt;name&lt;/code&gt; column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class CreateUsers &amp;lt; ActiveRecord::Migration[6.1]&#xA;  def change&#xA;    create_table :users do |t|&#xA;      t.string :name&#xA;      t.timestamps&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;ll also need to modify the &lt;code&gt;reviews&lt;/code&gt; table and add a foreign key to refer to our &lt;code&gt;users&lt;/code&gt; table. Remember, each review now &lt;strong&gt;belongs to&lt;/strong&gt; a specific user. Any time we create a &lt;strong&gt;belongs to&lt;/strong&gt; relationship, we need a foreign key to establish this relationship. Let&#39;s go ahead and write a migration to update the &lt;code&gt;reviews&lt;/code&gt; table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle exec rake db:create_migration NAME=add_user_id_to_reviews&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;ll use the &lt;code&gt;add_column&lt;/code&gt; method to update the &lt;code&gt;reviews&lt;/code&gt; table and add a &lt;code&gt;user_id&lt;/code&gt; foreign key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class AddUserIdToReviews &amp;lt; ActiveRecord::Migration[6.1]&#xA;  def change&#xA;    add_column :reviews, :user_id, :integer&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With that, our migrations are good to go! Run the new migrations to update the database and schema:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle exec rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the seed file as well to populate the &lt;code&gt;games&lt;/code&gt; and &lt;code&gt;reviews&lt;/code&gt; tables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle exec rake db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setting Up the Join Class&lt;/h2&gt; &#xA;&lt;p&gt;Now that we&#39;ve updated the database, we can start working on updating our Active Record models. The first one we&#39;ll work on is the &lt;code&gt;Review&lt;/code&gt; model. We want our model&#39;s code to reflect the change we made in the database, so that we can easily access data about which user left a review. Our &lt;code&gt;Review&lt;/code&gt; model currently looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class Review &amp;lt; ActiveRecord::Base&#xA;  belongs_to :game&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We now also want our review to know which user it belongs to, so let&#39;s add that code as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class Review &amp;lt; ActiveRecord::Base&#xA;  belongs_to :game&#xA;  belongs_to :user&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, we can create a new &lt;code&gt;Review&lt;/code&gt; instance and associate it with a &lt;code&gt;User&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; a &lt;code&gt;Game&lt;/code&gt;. Run &lt;code&gt;rake console&lt;/code&gt; and try it out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# Get a game instance&#xA;game = Game.first&#xA;# Create a User instance&#xA;user = User.create(name: &#34;Liza&#34;)&#xA;# Create a review that belongs to a game and a user&#xA;review = Review.create(score: 8, game_id: game.id, user_id: user.id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like in the previous lesson, we can access data from the review instance about the associated game; but now, we can also access data about the associated user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;review.game&#xA;# =&amp;gt; #&amp;lt;Game:0x00007ff71a25f5d0 id: 1, title: &#34;Diablo&#34;, genre: &#34;Visual novel&#34;, ...&amp;gt;&#xA;review.user&#xA;# =&amp;gt; #&amp;lt;User:0x00007ff71a26fe58 id: 1, name: &#34;Liza&#34;, ...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Active Record parlance, we refer to this &lt;code&gt;Review&lt;/code&gt; class as a &#34;join&#34; class, because we use it to join between two other classes in our application: the &lt;code&gt;Game&lt;/code&gt; class and the &lt;code&gt;User&lt;/code&gt; class. We need this association set up first before we&#39;ll be able to access data about the users directly from their games, and access data about the games directly from their users.&lt;/p&gt; &#xA;&lt;h2&gt;Creating a Many-to-Many Association with &lt;code&gt;has_many through&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s start with the &lt;code&gt;Game&lt;/code&gt; class. Here&#39;s what it looks like right now:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class Game &amp;lt; ActiveRecord::Base&#xA;  has_many :reviews&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a reminder, when we use the &lt;code&gt;has_many&lt;/code&gt; macro, Active Record generates an instance method &lt;code&gt;#reviews&lt;/code&gt; that we can call on a &lt;code&gt;Game&lt;/code&gt; instance to access all the associated reviews:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;game = Game.first&#xA;game.reviews&#xA;# =&amp;gt; [#&amp;lt;Review:0x00007ff71926dac8 id: 1, ...&amp;gt;, #&amp;lt;Review:0x00007ff71926d960 id: 2, ...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, if you&#39;ll recall, we updated our tables to support another relationship:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A game &lt;strong&gt;has many&lt;/strong&gt; users, &lt;strong&gt;through&lt;/strong&gt; reviews&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;What this means for us in code is that it might be convenient to access a list of all the users who left reviews for a specific game from the game instance itself. In other words, it would be nice to be able to use a method like this to see all the users associated with a specific game:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;game.users&#xA;# =&amp;gt; [#&amp;lt;User&amp;gt;, #&amp;lt;User&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Writing the SQL out to access this relationship would be a bit of a pain; we&#39;d need to join the &lt;code&gt;reviews&lt;/code&gt; table in order to access the correct users for a specific game:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT &#34;users&#34;.*&#xA;FROM &#34;users&#34;&#xA;INNER JOIN &#34;reviews&#34;&#xA;  ON &#34;users&#34;.&#34;id&#34; = &#34;reviews&#34;.&#34;user_id&#34;&#xA;WHERE &#34;reviews&#34;.&#34;game_id&#34; = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Luckily for us, Active Record&#39;s &lt;code&gt;has_many&lt;/code&gt; macro also can be used to establish this relationship and write that SQL for us! Here&#39;s how we can use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class Game &amp;lt; ActiveRecord::Base&#xA;  has_many :reviews&#xA;  has_many :users, through: :reviews&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By adding this second &lt;code&gt;has_many&lt;/code&gt; macro, and using the &lt;code&gt;through:&lt;/code&gt; option, we&#39;re now able to use that &lt;code&gt;#users&lt;/code&gt; instance method with our games. Try it out (remember to exit your console and re-start it after updating your &lt;code&gt;Game&lt;/code&gt; class):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;game = Game.first&#xA;game.users&#xA;# =&amp;gt; [#&amp;lt;User:0x00007f96813a5d58 id: 1, name: &#34;Liza&#34;, ...&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now use Active Record to go &lt;strong&gt;through&lt;/strong&gt; the join model, &lt;code&gt;Review&lt;/code&gt;, from the &lt;code&gt;Game&lt;/code&gt; model, to return the associated users, all without writing any SQL ourselves. Pretty cool!&lt;/p&gt; &#xA;&lt;p&gt;There are a couple important things to note when using the &lt;code&gt;has_many&lt;/code&gt; macro with the &lt;code&gt;through:&lt;/code&gt; option. Order matters ‚Äî you must place the first &lt;code&gt;has_many&lt;/code&gt; that references the join table &lt;strong&gt;above&lt;/strong&gt; the second &lt;code&gt;has_many&lt;/code&gt; that goes through that join table. This code won&#39;t work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class Game &amp;lt; ActiveRecord::Base&#xA;  has_many :users, through: :reviews&#xA;  has_many :reviews&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Active Record won&#39;t know how to go &lt;code&gt;through&lt;/code&gt; the &lt;code&gt;reviews&lt;/code&gt; table until you create the &lt;code&gt;has_many :reviews&lt;/code&gt; association.&lt;/p&gt; &#xA;&lt;p&gt;Also, these are still just Ruby methods, so it might help to see them written out with parentheses to understand the syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class Game &amp;lt; ActiveRecord::Base&#xA;  has_many(:reviews)&#xA;  has_many(:users, through: :reviews)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When calling &lt;code&gt;has_many&lt;/code&gt;, we&#39;re passing in a first argument of a symbol that refers to the &lt;strong&gt;table name&lt;/strong&gt; in our database (&lt;code&gt;:users&lt;/code&gt;). In the second argument, we&#39;re passing a key-value pair, where the key is the &lt;code&gt;through&lt;/code&gt; option, and the value is the &lt;code&gt;:reviews&lt;/code&gt; symbol, which refers to the &lt;code&gt;#reviews&lt;/code&gt; method from the first &lt;code&gt;has_many&lt;/code&gt;. Phew!&lt;/p&gt; &#xA;&lt;p&gt;While we&#39;re at it, we can also set up the inverse relationship:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A user &lt;strong&gt;has many&lt;/strong&gt; reviews&lt;/li&gt; &#xA; &lt;li&gt;A user &lt;strong&gt;has many&lt;/strong&gt; games, &lt;strong&gt;through&lt;/strong&gt; reviews&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will give us the ability to access all reviews for a particular user, as well as all the games a particular user has reviewed. The code will look similar to what we added to the &lt;code&gt;Game&lt;/code&gt; model. Update the &lt;code&gt;User&lt;/code&gt; class in &lt;code&gt;app/models/user.rb&lt;/code&gt; with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  has_many :reviews&#xA;  has_many :games, through: :reviews&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, in the console, you can access a review for a user, as well as a list of the games they have reviewed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;user = User.first&#xA;user.reviews&#xA;# =&amp;gt; [#&amp;lt;Review:0x00007fc2a2ac01b8 id: 147, score: 8, ...&amp;gt;]&#xA;user.games&#xA;# =&amp;gt; [#&amp;lt;Game:0x00007fc2a2b53710 id: 1, title: &#34;Diablo&#34;, genre: &#34;Visual novel&#34;, ...&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Success! All of our models are now associated correctly, and have methods available that make it convenient for us to access data across multiple database tables using the primary key/foreign key relationship. Our Ruby code now reflects the associations we established:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-3/active-record-associations-many-to-many/games-reviews-users-erd.png&#34; alt=&#34;Game Reviews ERD&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;The power of Active Record all boils down to understanding database relationships and following certain naming conventions. By leveraging &#34;convention over configuration&#34;, we&#39;re able to quickly set up complex associations between multiple models with just a few lines of code.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;one-to-many&lt;/strong&gt; and &lt;strong&gt;many-to-many&lt;/strong&gt; relationships are the most common when working with relational databases. You can apply the same concepts and code we used in this lesson to any number of different domains, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Driver -&amp;lt; Ride &amp;gt;- Passenger&#xA;Doctor -&amp;lt; Appointment &amp;gt;- Patient&#xA;Actor -&amp;lt; Character &amp;gt;- Movie&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code required to set up these relationships would look very similar to the code we wrote in this lesson.&lt;/p&gt; &#xA;&lt;p&gt;By understanding the conventions Active Record expects you to follow, and how the underlying database relationships work, you have the ability to model all kinds of complex, real-world concepts in your code!&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/association_basics.html&#34;&gt;Active Record Associations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/association_basics.html#methods-added-by-belongs-to&#34;&gt;belongs_to methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/association_basics.html#methods-added-by-has-many&#34;&gt;has_many methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-active-record-associations-tvland-lab</title>
    <updated>2022-08-29T01:44:45Z</updated>
    <id>tag:github.com,2022-08-29:/learn-co-curriculum/phase-3-active-record-associations-tvland-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-active-record-associations-tvland-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Active Record TV Land Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and modify tables using Active Record migrations&lt;/li&gt; &#xA; &lt;li&gt;Build associations between models using Active Record macros&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this lab, we&#39;ll be working with a TV show domain model. We will have a show, network, and character model. They will be associated in the following way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An actor has many characters and has many shows through characters.&lt;/li&gt; &#xA; &lt;li&gt;A character belongs to an actor and belongs to a show.&lt;/li&gt; &#xA; &lt;li&gt;A show has many characters and has many actors through characters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s what the completed ERD will look like after you&#39;ve created the additional migrations:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-3/active-record-associations-tvland-lab/tvland-erd.png&#34; alt=&#34;TVLand ERD&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve given you a few migrations in the &lt;code&gt;db/migrate&lt;/code&gt; directory to create the networks and shows table, but you&#39;ll have to add additional tables and modify these existing tables as per the guidelines below.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This lab is test-driven, but in order for the tests to run correctly, you need to complete &lt;strong&gt;all&lt;/strong&gt; of the migration files before running &lt;code&gt;learn test&lt;/code&gt;. The first three migration files have been done already. You only need to work on the &lt;code&gt;004&lt;/code&gt;, &lt;code&gt;005&lt;/code&gt; and &lt;code&gt;006&lt;/code&gt; migrations.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve completed the migrations and have the first set of tests passing, work on building out methods in the classes. Make sure to use the Active Record association macros like &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt;. Remember, using these macros creates &lt;strong&gt;instance methods&lt;/strong&gt; on your classes, so to pass some of the tests, the macros will be enough! You&#39;ll also have to write out some custom methods as well.&lt;/p&gt; &#xA;&lt;h3&gt;Migrations&lt;/h3&gt; &#xA;&lt;h4&gt;004_create_actors&lt;/h4&gt; &#xA;&lt;p&gt;Write a migration to create the &lt;code&gt;actors&lt;/code&gt; table. An actor should have a &lt;code&gt;first_name&lt;/code&gt; and a &lt;code&gt;last_name&lt;/code&gt; as strings.&lt;/p&gt; &#xA;&lt;h4&gt;005_create_characters&lt;/h4&gt; &#xA;&lt;p&gt;Write a migration to create the &lt;code&gt;characters&lt;/code&gt; table. A character should have a &lt;code&gt;name&lt;/code&gt; (string), &lt;code&gt;actor_id&lt;/code&gt; (integer), and a &lt;code&gt;show_id&lt;/code&gt; (integer).&lt;/p&gt; &#xA;&lt;p&gt;A character will belong to a show (the show migration is already provided) and an actor, and we&#39;ll keep track of this relationship with these database table columns.&lt;/p&gt; &#xA;&lt;h4&gt;006_add_catchphrase_to_characters&lt;/h4&gt; &#xA;&lt;p&gt;Write a migration that adds the column &lt;code&gt;catchphrase&lt;/code&gt; as a string to your &lt;code&gt;characters&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Once you&#39;ve completed all three migrations, go ahead and run &lt;code&gt;learn test&lt;/code&gt; to see what you need to do for the models.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Model Methods&lt;/h3&gt; &#xA;&lt;h4&gt;Character&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;#actor&lt;/code&gt;: should return the actor instance this character belongs to. &lt;strong&gt;Hint&lt;/strong&gt;: is there an association macro you can use to create this method?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;#show&lt;/code&gt;: should return the show instance this character belongs to. &lt;strong&gt;Hint&lt;/strong&gt;: is there an association macro you can use to create this method?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;#say_that_thing_you_say&lt;/code&gt;: Define a method in the &lt;code&gt;Character&lt;/code&gt; class, &lt;code&gt;#say_that_thing_you_say&lt;/code&gt;, using a given character&#39;s catchphrase. Using Tyrion as an example again, the returned string should look like the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;tyrion.catchphrase = &#39;A Lannister always pays his debts&#39;&#xA;tyrion.say_that_thing_you_say&#xA;#=&amp;gt; &#39;Tyrion Lannister always says: A Lannister always pays his debts&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Actor&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;#characters&lt;/code&gt;: an actor has many characters, so write code that creates an instance method that will return all the characters that the actor has played. &lt;strong&gt;Hint&lt;/strong&gt;: is there an association macro you can use to create this method?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;#shows&lt;/code&gt;: an actor should have many characters and many shows through characters. Write code that creates an instance method that returns all the shows for the actor. &lt;strong&gt;Hint&lt;/strong&gt;: is there an association macro you can use to create this method?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;#full_name&lt;/code&gt;: Write a method in the &lt;code&gt;Actor&lt;/code&gt; class, &lt;code&gt;#full_name&lt;/code&gt;, that returns the first and last name of an actor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;#list_roles&lt;/code&gt;: Write a method in the &lt;code&gt;Actor&lt;/code&gt; class, &lt;code&gt;#list_roles&lt;/code&gt;, that lists all of the characters that actor has alongside the show that the character is in.&lt;/p&gt; &lt;p&gt;So, for instance:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;peter = Actor.create(first_name: &#34;Peter&#34;, last_name: &#34;Dinklage&#34;)&#xA;thrones = Show.create(name: &#34;Game of Thrones&#34;)&#xA;tyrion = Character.create(name: &#34;Tyrion Lannister&#34;, actor_id: peter.id, show_id: thrones.id)&#xA;&#xA;peter.list_roles&#xA;# [&#39;Tyrion Lannister - Game of Thrones&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Notice that when we run &lt;code&gt;peter.list_roles&lt;/code&gt;, we get an Array containing a string with both the character and the show.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Show&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;#characters&lt;/code&gt;: should return a list of all the character instances associated with the show.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#network&lt;/code&gt;: should return the network instance this show belongs to&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#actors_list&lt;/code&gt;: Define a method in the &lt;code&gt;Show&lt;/code&gt; class called &lt;code&gt;#actors_list&lt;/code&gt; that returns an Array of the full names of each actor associated with a show. Remember, a show should have many actors through characters. &lt;strong&gt;Hint&lt;/strong&gt;: it may help to use another association macro to access the actors for the show.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Network&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;#shows&lt;/code&gt;: should return a list of all the show instances associated with the network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#sorry&lt;/code&gt;: returns a string &#34;We&#39;re sorry about passing on John Mulaney&#39;s pilot&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://guides.rubyonrails.org/association_basics.html&#34;&gt;Active Record Associations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apidock.com/rails/ActiveRecord/Associations/ClassMethods&#34;&gt;API dock - Active Record Associations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/active_record_migrations.html&#34;&gt;Active Record Migrations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>