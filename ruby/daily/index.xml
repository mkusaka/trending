<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-19T01:35:47Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jcsalterego/jqq</title>
    <updated>2022-07-19T01:35:47Z</updated>
    <id>tag:github.com,2022-07-19:/jcsalterego/jqq</id>
    <link href="https://github.com/jcsalterego/jqq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;jq Querier: an interactive wrapper around jq&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jqq&lt;/h1&gt; &#xA;&lt;p&gt;jq Querier: an interactive wrapper around &lt;code&gt;jq&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stedolan/jq&#34;&gt;jq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modern-ish Ruby and &lt;a href=&#34;https://bundler.io&#34;&gt;Bundler&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optionally: add a nice alias to your &lt;code&gt;~/.profile&lt;/code&gt; or equivalent:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias jqq=&#34;/path/to/jqq.rb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: jqq &amp;lt;expr&amp;gt; &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jcsalterego/jqq/master/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;jqq uses readline-like keybindings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Enter&lt;/td&gt; &#xA;   &lt;td&gt;re-evaluate expression&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;goto beginning of line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-e&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;goto end of line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;kill line (delete to end of line)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;delete next character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Future Work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;smart window resize support (re-run only if needed)&lt;/li&gt; &#xA; &lt;li&gt;stdin support&lt;/li&gt; &#xA; &lt;li&gt;rewrite in another language&lt;/li&gt; &#xA; &lt;li&gt;colors!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcsalterego/jqq/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheOdinProject/ruby-exercises</title>
    <updated>2022-07-19T01:35:47Z</updated>
    <id>tag:github.com,2022-07-19:/TheOdinProject/ruby-exercises</id>
    <link href="https://github.com/TheOdinProject/ruby-exercises" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Odin Project Ruby Exercises&lt;/h1&gt; &#xA;&lt;h2&gt;About this repository&lt;/h2&gt; &#xA;&lt;p&gt;This repository is a complement to the Ruby course for The Odin Project. It contains a series of Ruby exercises alongside pre-written tests that will help guide the student towards a solution, providing a Test Driven Development experience.&lt;/p&gt; &#xA;&lt;p&gt;Each set of exercises should only be done &lt;strong&gt;after&lt;/strong&gt; being directed to do so in the assignment of the corresponding Ruby lesson. I.e. if you just finished the Basic Data Types lesson you should &lt;strong&gt;only&lt;/strong&gt; do the exercises in the &lt;code&gt;1_data_types&lt;/code&gt; folder for now.&lt;/p&gt; &#xA;&lt;h2&gt;Cloning and installation&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repository to your local machine. To do this, click on the green &#34;Code&#34; button at the top right of list of files and copy the link in the prompt. Then, run the following command in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone &amp;lt;link&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a folder called &#39;ruby-exercises&#39; inside the directory you ran the command in.&lt;/p&gt; &#xA;&lt;p&gt;CD into that folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ruby-exercises&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This folder contains a Gemfile, which tells bundle which gems to install locally and makes them available for use in that directory. In this case, we are installing RSpec, which is a popular Ruby testing framework.&lt;/p&gt; &#xA;&lt;p&gt;Verify that the installation was successful by simply running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which should print a few lines about not finding any examples. This is ok and means it&#39;s working!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Each directory contains a read me with instructions for the exercises within them.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>capistrano/capistrano</title>
    <updated>2022-07-19T01:35:47Z</updated>
    <id>tag:github.com,2022-07-19:/capistrano/capistrano</id>
    <link href="https://github.com/capistrano/capistrano" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Remote multi-server automation tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Capistrano: A deployment automation tool built on Ruby, Rake, and SSH.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/capistrano&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/capistrano.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.circleci.com/pipelines/github/capistrano/capistrano?branch=master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/capistrano/capistrano/tree/master.svg?style=shield&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/capistrano/capistrano&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/capistrano/capistrano/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://codersclan.net/?repo_id=325&amp;amp;source=small&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/get-support-blue.svg?sanitize=true&#34; alt=&#34;CodersClan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Capistrano is a framework for building automated deployment scripts. Although Capistrano itself is written in Ruby, it can easily be used to deploy projects of any language or framework, be it Rails, Java, or PHP.&lt;/p&gt; &#xA;&lt;p&gt;Once installed, Capistrano gives you a &lt;code&gt;cap&lt;/code&gt; tool to perform your deployments from the comfort of your command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd my-capistrano-enabled-project&#xA;$ cap production deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you run &lt;code&gt;cap&lt;/code&gt;, Capistrano dutifully connects to your server(s) via SSH and executes the steps necessary to deploy your project. You can define those steps yourself by writing &lt;a href=&#34;https://github.com/ruby/rake&#34;&gt;Rake&lt;/a&gt; tasks, or by using pre-built task libraries provided by the Capistrano community.&lt;/p&gt; &#xA;&lt;p&gt;Tasks are simple to make. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;task :restart_sidekiq do&#xA;  on roles(:worker) do&#xA;    execute :service, &#34;sidekiq restart&#34;&#xA;  end&#xA;end&#xA;after &#34;deploy:published&#34;, &#34;restart_sidekiq&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: This documentation is for the current version of Capistrano (3.x). If you are looking for Capistrano 2.x documentation, you can find it in &lt;a href=&#34;https://github.com/capistrano/capistrano-2.x-docs&#34;&gt;this archive&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/capistrano/capistrano/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/capistrano/capistrano/master/#gotchas&#34;&gt;Gotchas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/capistrano/capistrano/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/capistrano/capistrano/master/#finding-help-and-documentation&#34;&gt;Finding help and documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/capistrano/capistrano/master/#how-to-contribute&#34;&gt;How to contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/capistrano/capistrano/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways to automate deployments, from simple rsync bash scripts to complex containerized toolchains. Capistrano sits somewhere in the middle: it automates what you already know how to do manually with SSH, but in a repeatable, scalable fashion. There is no magic here!&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what makes Capistrano great:&lt;/p&gt; &#xA;&lt;h4&gt;Strong conventions&lt;/h4&gt; &#xA;&lt;p&gt;Capistrano defines a standard deployment process that all Capistrano-enabled projects follow by default. You don&#39;t have to decide how to structure your scripts, where deployed files should be placed on the server, or how to perform common tasks: Capistrano has done this work for you.&lt;/p&gt; &#xA;&lt;h4&gt;Multiple stages&lt;/h4&gt; &#xA;&lt;p&gt;Define your deployment once, and then easily parameterize it for multiple &lt;em&gt;stages&lt;/em&gt; (environments), e.g. &lt;code&gt;qa&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;, and &lt;code&gt;production&lt;/code&gt;. No copy-and-paste necessary: you only need to specify what is different for each stage, like IP addresses.&lt;/p&gt; &#xA;&lt;h4&gt;Parallel execution&lt;/h4&gt; &#xA;&lt;p&gt;Deploying to a fleet of app servers? Capistrano can run each deployment task concurrently across those servers and uses connection pooling for speed.&lt;/p&gt; &#xA;&lt;h4&gt;Server roles&lt;/h4&gt; &#xA;&lt;p&gt;Your application may need many different types of servers: a database server, an app server, two web servers, and a job queue work server, for example. Capistrano lets you tag each server with one or more roles, so you can control what tasks are executed where.&lt;/p&gt; &#xA;&lt;h4&gt;Community driven&lt;/h4&gt; &#xA;&lt;p&gt;Capistrano is easily extensible using the rubygems package manager. Deploying a Rails app? Wordpress? Laravel? Chances are, someone has already written Capistrano tasks for your framework of choice and has distributed it as a gem. Many Ruby projects also come with Capistrano tasks built-in.&lt;/p&gt; &#xA;&lt;h4&gt;It&#39;s just SSH&lt;/h4&gt; &#xA;&lt;p&gt;Everything in Capistrano comes down to running SSH commands on remote servers. On the one hand, that makes Capistrano simple. On the other hand, if you aren&#39;t comfortable SSH-ing into a Linux box and doing stuff on the command-line, then Capistrano is probably not for you.&lt;/p&gt; &#xA;&lt;h2&gt;Gotchas&lt;/h2&gt; &#xA;&lt;p&gt;While Capistrano ships with a strong set of conventions that are common for all types of deployments, it needs help understanding the specifics of your project, and there are some things Capistrano is not suited to do.&lt;/p&gt; &#xA;&lt;h4&gt;Project specifics&lt;/h4&gt; &#xA;&lt;p&gt;Out of the box, Capistrano can deploy your code to server(s), but it does not know how to &lt;em&gt;execute&lt;/em&gt; your code. Does &lt;code&gt;foreman&lt;/code&gt; need to be run? Does Apache need to be restarted? You&#39;ll need to tell Capistrano how to do this part by writing these deployment steps yourself, or by finding a gem in the Capistrano community that does it for you.&lt;/p&gt; &#xA;&lt;h4&gt;Key-based SSH&lt;/h4&gt; &#xA;&lt;p&gt;Capistrano depends on connecting to your server(s) with SSH using key-based (i.e. password-less) authentication. You&#39;ll need this working before you can use Capistrano.&lt;/p&gt; &#xA;&lt;h4&gt;Provisioning&lt;/h4&gt; &#xA;&lt;p&gt;Likewise, your server(s) will likely need supporting software installed before you can perform a deployment. Capistrano itself has no requirements other than SSH, but your application probably needs database software, a web server like Apache or Nginx, and a language runtime like Java, Ruby, or PHP. These &lt;em&gt;server provisioning&lt;/em&gt; steps are not done by Capistrano.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;sudo&lt;/code&gt;, etc.&lt;/h4&gt; &#xA;&lt;p&gt;Capistrano is designed to deploy using a single, non-privileged SSH user, using a &lt;em&gt;non-interactive&lt;/em&gt; SSH session. If your deployment requires &lt;code&gt;sudo&lt;/code&gt;, interactive prompts, authenticating as one user but running commands as another, you can probably accomplish this with Capistrano, but it may be difficult. Your automated deployments will be much smoother if you can avoid such requirements.&lt;/p&gt; &#xA;&lt;h4&gt;Shells&lt;/h4&gt; &#xA;&lt;p&gt;Capistrano 3 expects a POSIX shell like Bash or Sh. Shells like tcsh, csh, and such may work, but probably will not.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby version 2.0 or higher on your local machine (MRI or Rubinius)&lt;/li&gt; &#xA; &lt;li&gt;A project that uses source control (Git, Mercurial, and Subversion support is built-in)&lt;/li&gt; &#xA; &lt;li&gt;The SCM binaries (e.g. &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;hg&lt;/code&gt;) needed to check out your project must be installed on the server(s) you are deploying to&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bundler.io&#34;&gt;Bundler&lt;/a&gt;, along with a Gemfile for your project, are recommended&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install the Capistrano gem&lt;/h3&gt; &#xA;&lt;p&gt;Add Capistrano to your project&#39;s Gemfile using &lt;code&gt;require: false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development do&#xA;  gem &#34;capistrano&#34;, &#34;~&amp;gt; 3.17&#34;, require: false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run Bundler to ensure Capistrano is downloaded and installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&#34;Capify&#34; your project&lt;/h3&gt; &#xA;&lt;p&gt;Make sure your project doesn&#39;t already have a &#34;Capfile&#34; or &#34;capfile&#34; present. Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle exec cap install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates all the necessary configuration files and directory structure for a Capistrano-enabled project with two stages, &lt;code&gt;staging&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── Capfile&#xA;├── config&#xA;│   ├── deploy&#xA;│   │   ├── production.rb&#xA;│   │   └── staging.rb&#xA;│   └── deploy.rb&#xA;└── lib&#xA;    └── capistrano&#xA;            └── tasks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To customize the stages that are created, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle exec cap install STAGES=local,sandbox,qa,production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the files that Capistrano creates are simply templates to get you started. Make sure to edit the &lt;code&gt;deploy.rb&lt;/code&gt; and stage files so that they contain values appropriate for your project and your target servers.&lt;/p&gt; &#xA;&lt;h3&gt;Command-line usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# list all available tasks&#xA;$ bundle exec cap -T&#xA;&#xA;# deploy to the staging environment&#xA;$ bundle exec cap staging deploy&#xA;&#xA;# deploy to the production environment&#xA;$ bundle exec cap production deploy&#xA;&#xA;# simulate deploying to the production environment&#xA;# does not actually do anything&#xA;$ bundle exec cap production deploy --dry-run&#xA;&#xA;# list task dependencies&#xA;$ bundle exec cap production deploy --prereqs&#xA;&#xA;# trace through task invocations&#xA;$ bundle exec cap production deploy --trace&#xA;&#xA;# lists all config variable before deployment tasks&#xA;$ bundle exec cap production deploy --print-config-variables&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Finding help and documentation&lt;/h2&gt; &#xA;&lt;p&gt;Capistrano is a large project encompassing multiple GitHub repositories and a community of plugins, and it can be overwhelming when you are just getting started. Here are resources that can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/capistrano/capistrano/master/docs&#34;&gt;docs&lt;/a&gt; directory contains the official documentation&lt;/strong&gt;, and is used to generate the &lt;a href=&#34;http://capistranorb.com&#34;&gt;Capistrano website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/capistrano&#34;&gt;Stack Overflow&lt;/a&gt; has a Capistrano tag with lots of activity&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/capistrano&#34;&gt;The Capistrano mailing list&lt;/a&gt; is low-traffic but is monitored by Capistrano contributors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://codersclan.net/?repo_id=325&amp;amp;source=link&#34;&gt;CodersClan&lt;/a&gt; has Capistrano experts available to solve problems for bounties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Related GitHub repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/capistrano/sshkit&#34;&gt;capistrano/sshkit&lt;/a&gt; provides the SSH behavior that underlies Capistrano (when you use &lt;code&gt;execute&lt;/code&gt; in a Capistrano task, you are using SSHKit)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/capistrano/rails&#34;&gt;capistrano/rails&lt;/a&gt; is a very popular gem that adds Ruby on Rails deployment tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattbrictson/airbrussh&#34;&gt;mattbrictson/airbrussh&lt;/a&gt; provides Capistrano&#39;s default log formatting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GitHub issues are for bug reports and feature requests. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/capistrano/capistrano/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for guidelines on submitting GitHub issues.&lt;/p&gt; &#xA;&lt;p&gt;If you think you may have discovered a security vulnerability in Capistrano, do not open a GitHub issue. Instead, please send a report to &lt;a href=&#34;mailto:security@capistranorb.com&#34;&gt;security@capistranorb.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Capistrano, in the form of code, documentation or idea, are gladly accepted. Read the &lt;a href=&#34;https://raw.githubusercontent.com/capistrano/capistrano/master/DEVELOPMENT.md&#34;&gt;DEVELOPMENT&lt;/a&gt; document to learn how to hack on Capistrano&#39;s code, run the tests, and contribute your first pull request.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2020 Tom Clements, Lee Hambley&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>