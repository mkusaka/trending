<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-30T01:38:51Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bugcrowd/test-summary-buildkite-plugin</title>
    <updated>2024-07-30T01:38:51Z</updated>
    <id>tag:github.com,2024-07-30:/bugcrowd/test-summary-buildkite-plugin</id>
    <link href="https://github.com/bugcrowd/test-summary-buildkite-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Buildkite plugin to summarise all test failures as an annotation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Test Summary Buildkite Plugin&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://buildkite.com/docs/agent/v3/plugins&#34;&gt;Buildkite plugin&lt;/a&gt; that adds a single annotation for all your test failures using &lt;a href=&#34;https://buildkite.com/docs/agent/v3/cli-annotate&#34;&gt;buildkite-agent annotate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Supported formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JUnit&lt;/li&gt; &#xA; &lt;li&gt;Checkstyle&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testanything.org&#34;&gt;TAP&lt;/a&gt;^&lt;/li&gt; &#xA; &lt;li&gt;Plain text files with one failure per line&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;^ Current TAP support is fairly limited. If you have an example TAP file that is not being interpreted correctly, feel free to open an issue or pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Upload test results as artifacts using any supported format. If you include the &lt;code&gt;$BUILDKITE_JOB_ID&lt;/code&gt; in the path, a link to the build will be included in the annotation. Some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - label: rspec&#xA;    command: rspec&#xA;    parallelism: 10&#xA;    # With spec_helper.rb:&#xA;    # RSpec.configure do |config|&#xA;    #   config.add_formatter(&#39;RspecJunitFormatter&#39;, &#34;artifacts/rspec-#{ENV[&#39;BUILDKITE_JOB_ID&#39;]}.xml&#34;)&#xA;    # end&#xA;    artifact_paths: &#34;artifacts/*&#34;&#xA;&#xA;  - label: eslint&#xA;    command: yarn run eslint -f checkstyle -o artifacts/eslint.xml&#xA;    artifact_paths: &#34;artifacts/*&#34;&#xA;&#xA;  - label: ava&#xA;    command: bash -c &#34;yarn --silent test --tap &amp;gt; artifacts/ava.tap&#34;&#xA;    artifact_paths: &#34;artifacts/*&#34;&#xA;&#xA;  - label: rubocop&#xA;    # The emacs format is plain text with one failure per line&#xA;    command: rubocop -f emacs -o artifacts/rubocop.txt&#xA;    artifact_paths: &#34;artifacts/*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait for all the tests to finish:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  - wait: ~&#xA;    continue_on_failure: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a build step using the test-summary plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  - label: annotate&#xA;    plugins:&#xA;      - bugcrowd/test-summary#v1.11.0:&#xA;          inputs:&#xA;            - label: rspec&#xA;              artifact_path: artifacts/rspec*&#xA;              type: junit&#xA;            - label: eslint&#xA;              artifact_path: artifacts/eslint.xml&#xA;              type: checkstyle&#xA;            - label: ava&#xA;              artifact_path: artifacts/ava.tap&#xA;              type: tap&#xA;            - label: rubocop&#xA;              artifact_path: artifacts/rubocop.txt&#xA;              type: oneline&#xA;          formatter:&#xA;            type: details&#xA;          context: test-summary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See buildkite annotation of all the failures. There are some example annotations included below.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Inputs&lt;/h3&gt; &#xA;&lt;p&gt;The plugin takes a list of input sources. Each input source has:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;label:&lt;/code&gt; the name used in the heading to identify the test group.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;artifact_path:&lt;/code&gt; a glob used to download one or more artifacts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type:&lt;/code&gt; one of &lt;code&gt;junit&lt;/code&gt;, &lt;code&gt;checkstyle&lt;/code&gt;, &lt;code&gt;tap&lt;/code&gt; or &lt;code&gt;oneline&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;encoding:&lt;/code&gt; The file encoding to use. Defaults to &lt;code&gt;UTF-8&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strip_colors:&lt;/code&gt; Remove ANSI color escape sequences. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;crop:&lt;/code&gt; (&lt;code&gt;oneline&lt;/code&gt; type only) Number of lines to crop from the start and end of the file, to get around default headers and footers. Eg:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;crop:&#xA;  start: 3&#xA;  end: 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;job_id_regex:&lt;/code&gt; Ruby regular expression to extract the &lt;code&gt;job_id&lt;/code&gt; from the artifact path. It must contain a named capture with the name &lt;code&gt;job_id&lt;/code&gt;. Defaults to &lt;code&gt;(?&amp;lt;job_id&amp;gt;[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Junit specific options:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;summary:&lt;/code&gt; Customise how the summary is generated. Includes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;format:&lt;/code&gt; A ruby format string for converting the junit xml attributes into a summary. All attributes are available in &lt;code&gt;&amp;lt;element&amp;gt;.&amp;lt;attr-name&amp;gt;&lt;/code&gt; format.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;details_regex:&lt;/code&gt; A ruby regular expression, run over the body text of each failure. Any named captures generated by this regex will be available to the format string. This is useful if some information is only available in the contents of the failure. Eg:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;summary:&#xA;  format: &#39;%{testsuites.name}: %{testsuite.name}: %{testcase.classname}: %{failure.message}%{error.message}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;summary:&#xA;  format: &#39;%{location}: %{testcase.name}&#39;&#xA;  details_regex: &#39;(?&amp;lt;location&amp;gt;\S+:\d+)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;message:&lt;/code&gt; Set this to false if the failure &lt;code&gt;message&lt;/code&gt; attribute is not worth showing in the annotation. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;details:&lt;/code&gt; Set this to false if the body of the failure is not worth showing in the annotation. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Formatter&lt;/h3&gt; &#xA;&lt;p&gt;There are two formatter types, &lt;code&gt;summary&lt;/code&gt; and &lt;code&gt;details&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;summary&lt;/code&gt; formatter includes a single line for each failure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bugcrowd/test-summary-buildkite-plugin/master/doc/summary.png&#34; alt=&#34;example summary annotation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;details&lt;/code&gt; formatter includes extra information about the failure in an accordion (if available). This is the default option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bugcrowd/test-summary-buildkite-plugin/master/doc/details.png&#34; alt=&#34;example details annotation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other formatter options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;show_first:&lt;/code&gt; The number of failures to show before hiding the rest inside an accordion. If set to zero, all failures will be hidden by default. If set to a negative number, all failures will be shown. Defaults to 20.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;context:&lt;/code&gt; The Buildkite annotation context. Defaults to &lt;code&gt;test-summary&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;style:&lt;/code&gt; Set the annotation style. Defaults to &lt;code&gt;error&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fail_on_error:&lt;/code&gt; Whether the command should return non-zero exit status on failure. Defaults to &lt;code&gt;false&lt;/code&gt; so failing to annotate a build does not cause the entire pipeline to fail.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run_without_docker:&lt;/code&gt; Set the enviroment to run without docker. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Truncation&lt;/h2&gt; &#xA;&lt;p&gt;Buildkite has a maximum annotation size of 100 kilobytes. If there are too many failures to fit within this limit, the plugin will truncate the failures for each input.&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;To run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose run --rm test rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have ruby set up, you can just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate sample markdown and HTML based on the files in &lt;code&gt;spec/sample_artifacts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/run-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The sample HTML files use hardcoded references to buildkite assets. If the page is not displaying correctly, try updating the css files in &lt;a href=&#34;https://raw.githubusercontent.com/bugcrowd/test-summary-buildkite-plugin/master/templates/test_layout.html.haml&#34;&gt;templates/test_layout.html.haml&lt;/a&gt; based on what buildkite is currently serving.&lt;/p&gt;</summary>
  </entry>
</feed>