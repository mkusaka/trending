<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-26T01:37:09Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>igorkasyanchuk/rails_performance</title>
    <updated>2024-11-26T01:37:09Z</updated>
    <id>tag:github.com,2024-11-26:/igorkasyanchuk/rails_performance</id>
    <link href="https://github.com/igorkasyanchuk/rails_performance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Monitor performance of you Rails applications (self-hosted and free)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rails Performance&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/igorkasyanchuk/rails_performance/actions/workflows/ruby.yml&#34;&gt;&lt;img src=&#34;https://github.com/igorkasyanchuk/rails_performance/actions/workflows/ruby.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.railsjazz.com&#34;&gt;&lt;img src=&#34;https://github.com/igorkasyanchuk/rails_time_travel/raw/main/docs/my_other.svg?raw=true&#34; alt=&#34;RailsJazz&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource-heroes.com/r/igorkasyanchuk/rails_performance&#34;&gt;&lt;img src=&#34;https://opensource-heroes.com/badge-v1.svg?sanitize=true&#34; alt=&#34;Listed on OpenSource-Heroes.com&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A self-hosted tool to monitor the performance of your Ruby on Rails application.&lt;/p&gt; &#xA;&lt;p&gt;This is a &lt;strong&gt;simple and free alternative&lt;/strong&gt; to the New Relic APM, Datadog or other similar services.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/igorkasyanchuk/rails_performance/master/docs/rails_performance.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A new version with P50, P90, P99, throughput, and more is available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/igorkasyanchuk/rails_performance/master/docs/rails_performance_updated_home.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Detailed p50, p90, p99 response time information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/igorkasyanchuk/rails_performance/master/docs/rails_performance_recent_requests.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(more screenshots below)&lt;/p&gt; &#xA;&lt;p&gt;It allows you to track:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;real-time monitoring on the Recent tab&lt;/li&gt; &#xA; &lt;li&gt;see your p50, p90, p99 response time&lt;/li&gt; &#xA; &lt;li&gt;monitor system resources (CPU, memory, disk)&lt;/li&gt; &#xA; &lt;li&gt;monitor slow requests&lt;/li&gt; &#xA; &lt;li&gt;throughput report (see amount of RPM (requests per minute))&lt;/li&gt; &#xA; &lt;li&gt;an average response time&lt;/li&gt; &#xA; &lt;li&gt;the slowest controllers &amp;amp; actions&lt;/li&gt; &#xA; &lt;li&gt;total duration of time spent per request, views rendering, DB&lt;/li&gt; &#xA; &lt;li&gt;SQL queries, rendering logs in &#34;Recent Requests&#34; section&lt;/li&gt; &#xA; &lt;li&gt;simple 500-crashes reports&lt;/li&gt; &#xA; &lt;li&gt;Sidekiq jobs&lt;/li&gt; &#xA; &lt;li&gt;Delayed Job jobs&lt;/li&gt; &#xA; &lt;li&gt;Grape API inside Rails app&lt;/li&gt; &#xA; &lt;li&gt;Rake tasks performance&lt;/li&gt; &#xA; &lt;li&gt;Custom events wrapped with &lt;code&gt;RailsPerformance.measure do .. end&lt;/code&gt; block&lt;/li&gt; &#xA; &lt;li&gt;works with Rails 4.2+ (and probably 4.1, 4.0 too) and Ruby 2.2+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All data are stored in &lt;code&gt;local&lt;/code&gt; Redis and not sent to any 3rd party servers.&lt;/p&gt; &#xA;&lt;h2&gt;Production&lt;/h2&gt; &#xA;&lt;p&gt;Gem is production-ready. At least on my 2 applications with ~800 unique users per day it works perfectly.&lt;/p&gt; &#xA;&lt;p&gt;Just don&#39;t forget to protect performance dashboard with http basic auth or check of current_user.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Add gem to the Gemfile (in appropriate group if needed)&#xA;2. Start rails server&#xA;3. Make a few requests to your app&#xA;4. open localhost:3000/rails/performance&#xA;5. Tune the configuration and deploy to production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default configuration is listed below. But you can override it.&lt;/p&gt; &#xA;&lt;p&gt;Create &lt;code&gt;config/initializers/rails_performance.rb&lt;/code&gt; in your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RailsPerformance.setup do |config|&#xA;  config.redis    = Redis.new(url: ENV[&#34;REDIS_URL&#34;].presence || &#34;redis://127.0.0.1:6379/0&#34;) # or Redis::Namespace.new(&#34;rails-performance&#34;, redis: Redis.new), see below in README&#xA;  config.duration = 4.hours&#xA;&#xA;  config.debug    = false # currently not used&amp;gt;&#xA;  config.enabled  = true&#xA;&#xA;  # configure Recent tab (time window and limit of requests)&#xA;  # config.recent_requests_time_window = 60.minutes&#xA;  # config.recent_requests_limit = nil # or 1000&#xA;&#xA;  # configure Slow Requests tab (time window, limit of requests and threshold)&#xA;  # config.slow_requests_time_window = 4.hours # time window for slow requests&#xA;  # config.slow_requests_limit = 500 # number of max rows&#xA;  # config.slow_requests_threshold = 500 # number of ms&#xA;&#xA;  # default path where to mount gem,&#xA;  # alternatively you can mount the RailsPerformance::Engine in your routes.rb&#xA;  config.mount_at = &#39;/rails/performance&#39;&#xA;&#xA;  # protect your Performance Dashboard with HTTP BASIC password&#xA;  config.http_basic_authentication_enabled   = false&#xA;  config.http_basic_authentication_user_name = &#39;rails_performance&#39;&#xA;  config.http_basic_authentication_password  = &#39;password12&#39;&#xA;&#xA;  # if you need an additional rules to check user permissions&#xA;  config.verify_access_proc = proc { |controller| true }&#xA;  # for example when you have `current_user`&#xA;  # config.verify_access_proc = proc { |controller| controller.current_user &amp;amp;&amp;amp; controller.current_user.admin? }&#xA;&#xA;  # You can ignore endpoints with Rails standard notation controller#action&#xA;  # config.ignored_endpoints = [&#39;HomeController#contact&#39;]&#xA;&#xA;  # You can ignore request paths by specifying the beginning of the path.&#xA;  # For example, all routes starting with &#39;/admin&#39; can be ignored:&#xA;  config.ignored_paths = [&#39;/rails/performance&#39;, &#39;/admin&#39;]&#xA;&#xA;  # store custom data for the request&#xA;  # config.custom_data_proc = proc do |env|&#xA;  #   request = Rack::Request.new(env)&#xA;  #   {&#xA;  #     email: request.env[&#39;warden&#39;].user&amp;amp;.email, # if you are using Devise for example&#xA;  #     user_agent: request.env[&#39;HTTP_USER_AGENT&#39;]&#xA;  #   }&#xA;  # end&#xA;&#xA;  # config home button link&#xA;  config.home_link = &#39;/&#39;&#xA;&#xA;  # To skip some Rake tasks from monitoring&#xA;  config.skipable_rake_tasks = [&#39;webpacker:compile&#39;]&#xA;&#xA;  # To monitor rake tasks performance, you need to include rake tasks&#xA;  # config.include_rake_tasks = false&#xA;&#xA;  # To monitor custom events with `RailsPerformance.measure` block&#xA;  # config.include_custom_events = true&#xA;&#xA;  # To monitor system resources (CPU, memory, disk)&#xA;  # to enabled add required gems (see README)&#xA;  # config.system_monitor_duration = 24.hours&#xA;end if defined?(RailsPerformance)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally you might need to configure app time zone. You can do it in &lt;code&gt;config/application.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.time_zone = &#39;Eastern Time (US &amp;amp; Canada)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Gem will present charts/tables in the app timezone. If it&#39;s not set, it will use UTC.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rails_performance&#39;&#xA;&#xA;# or&#xA;&#xA;group :development, :production do&#xA;  gem &#39;rails_performance&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create default configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails generate rails_performance:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Have a look at &lt;code&gt;config/initializers/rails_performance.rb&lt;/code&gt; and adjust the configuration to your needs.&lt;/p&gt; &#xA;&lt;p&gt;You must also have installed Redis server, because this gem is storing data into it.&lt;/p&gt; &#xA;&lt;p&gt;After installation and configuration, start your Rails application, make a few requests, and open &lt;code&gt;https://localhost:3000/rails/performance&lt;/code&gt; URL.&lt;/p&gt; &#xA;&lt;h3&gt;Alternative: Mounting the engine yourself&lt;/h3&gt; &#xA;&lt;p&gt;If you, for whatever reason (company policy, devise, ...) need to mount RailsPerformance yourself, feel free to do so by using the following snippet as inspiration. You can skip the &lt;code&gt;mount_at&lt;/code&gt; and &lt;code&gt;http_basic_authentication_*&lt;/code&gt; configurations then, if you like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb&#xA;Rails.application.routes.draw do&#xA;  ...&#xA;  # example for usage with Devise&#xA;  authenticate :user, -&amp;gt; (user) { user.admin? } do&#xA;    mount RailsPerformance::Engine, at: &#39;rails/performance&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom data&lt;/h3&gt; &#xA;&lt;p&gt;You need to configure &lt;code&gt;config.custom_data_proc&lt;/code&gt;. And you can capture current_user, HTTP User Agent, etc. This proc is executed inside middleware, and you have access to Rack &#34;env&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/igorkasyanchuk/rails_performance/master/docs/custom_data.png&#34; alt=&#34;Custom Data&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Server Monitoring&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/igorkasyanchuk/rails_performance/master/docs/rails_performance_cpu_memory_storage.png&#34; alt=&#34;Server Monitoring&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can monitor system resources (CPU, memory, disk) by adding a gem to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;sys-filesystem&#34;&#xA;gem &#34;sys-cpu&#34;&#xA;gem &#34;get_process_mem&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you add these gems, it will track and show you the system resources on the dashboard.&lt;/p&gt; &#xA;&lt;p&gt;If you have multiple servers running the same app, it will use store metrics per server. You can configure the the env variable ENV[&#34;RAILS_PERFORMANCE_SERVER_ID&#34;] or using &lt;code&gt;hostname&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Basically using this code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;      def server_id&#xA;        @server_id ||= ENV[&#34;RAILS_PERFORMANCE_SERVER_ID&#34;] || `hostname`.strip&#xA;      end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Kamal for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  clear:&#xA;    RAILS_PERFORMANCE_SERVER_ID: &#34;server&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specifify custom &#34;context&#34; and &#34;role&#34; for monitoring, by changing the env variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RailsPerformance::Extensions::ResourceMonitor.new(&#xA;  ENV[&#34;RAILS_PERFORMANCE_SERVER_CONTEXT&#34;].presence || &#34;rails&#34;,&#xA;  ENV[&#34;RAILS_PERFORMANCE_SERVER_ROLE&#34;].presence || &#34;web&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information here: &lt;code&gt;lib/rails_performance/engine.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PS: right now it can only distinguish between web app servers and the sidekiq servers.&lt;/p&gt; &#xA;&lt;h3&gt;Custom events&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RailsPerformance.measure(&#34;some label&#34;, &#34;some namespace&#34;) do&#xA;   # your code&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using with Rails Namespace&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use Redis namespace (for example when you have multiple apps running on the same server), you can configure it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  config.redis = Redis::Namespace.new(&#34;#{Rails.env}-rails-performance&#34;, redis: Redis.new(url: ENV[&#34;REDIS_URL&#34;].presence || &#34;redis://127.0.0.1:6379/0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and add a gem dependency to the Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;redis-namespace&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/igorkasyanchuk/rails_performance/master/docs/rails_performance.png&#34; alt=&#34;Schema&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In addition it&#39;s wrapping gems internal methods and collecting performance information. See &lt;code&gt;./lib/rails_performance/gems/*&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;it doesn&#39;t track params of POST/PUT requests&lt;/li&gt; &#xA; &lt;li&gt;it doesn&#39;t track Redis/ElasticSearch or other apps&lt;/li&gt; &#xA; &lt;li&gt;it can&#39;t compare historical data&lt;/li&gt; &#xA; &lt;li&gt;depending on your load you may need to reduce time of for how long you store data, because all calculations are done in memory and it could take some time for high-load apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;p&gt;Gem is using Redis. This is the only one dependency.&lt;/p&gt; &#xA;&lt;p&gt;All information is stored into Redis. The default expiration time is set to &lt;code&gt;config.duration&lt;/code&gt; from the configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Development &amp;amp; Testing&lt;/h2&gt; &#xA;&lt;p&gt;Just clone the repo, setup dummy app (&lt;code&gt;rails db:migrate&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;After this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rails s&lt;/li&gt; &#xA; &lt;li&gt;rake test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need quickly clear Redis data, you can use &lt;code&gt;rails runner &#39;RailsPerformance.redis.flushdb&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Like a regular web development.&lt;/p&gt; &#xA;&lt;p&gt;Please note that to simplify integration with other apps all CSS/JS are bundled inside, and delivered in body of the request. This is to avoid integration with assets pipeline or webpacker.&lt;/p&gt; &#xA;&lt;p&gt;For UI changes you need to use Bulma CSS (&lt;a href=&#34;https://bulma.io/documentation&#34;&gt;https://bulma.io/documentation&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;The idea of this gem grew from curiosity how many RPM my app receiving per day. Later it evolved to something more powerful.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;documentation in Readme?&lt;/li&gt; &#xA; &lt;li&gt;capture stacktrace of 500 errors and show in side panel&lt;/li&gt; &#xA; &lt;li&gt;time/zone config?&lt;/li&gt; &#xA; &lt;li&gt;connected charts on dashboard, when zoom, when hover?&lt;/li&gt; &#xA; &lt;li&gt;ability to zoom to see requests withing specific datetime range&lt;/li&gt; &#xA; &lt;li&gt;better hints?&lt;/li&gt; &#xA; &lt;li&gt;export to csv&lt;/li&gt; &#xA; &lt;li&gt;better stats tooltip, do not show if nothing to show&lt;/li&gt; &#xA; &lt;li&gt;dark mode toggle? save to the cookies?&lt;/li&gt; &#xA; &lt;li&gt;integration with elastic search? or other?&lt;/li&gt; &#xA; &lt;li&gt;monitor active job?&lt;/li&gt; &#xA; &lt;li&gt;better logo?&lt;/li&gt; &#xA; &lt;li&gt;number of requests last 24 hours, hour, etc.&lt;/li&gt; &#xA; &lt;li&gt;collect deprecation.rails&lt;/li&gt; &#xA; &lt;li&gt;fix misspellings?&lt;/li&gt; &#xA; &lt;li&gt;show &#34;loading banner&#34; until jquery is loaded?&lt;/li&gt; &#xA; &lt;li&gt;better UI on smaller screens? Recent requests when URL&#39;s are long? Truncate with CSS?&lt;/li&gt; &#xA; &lt;li&gt;rules for highlighting durations? how many ms to show warning, alert&lt;/li&gt; &#xA; &lt;li&gt;elastic search&lt;/li&gt; &#xA; &lt;li&gt;searchkiq&lt;/li&gt; &#xA; &lt;li&gt;sinatra?&lt;/li&gt; &#xA; &lt;li&gt;tests to check what is actually stored in redis db after request&lt;/li&gt; &#xA; &lt;li&gt;upgrade bulma&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You are welcome to contribute. I&#39;ve a big list of TODO.&lt;/p&gt; &#xA;&lt;p&gt;If &#34;schema&#34; how records are stored i Redis is changed, and this is a breaking change, update: &lt;code&gt;RailsPerformance::SCHEMA&lt;/code&gt; to a newer value.&lt;/p&gt; &#xA;&lt;h2&gt;Big thanks to contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/igorkasyanchuk/rails_performance/graphs/contributors&#34;&gt;https://github.com/igorkasyanchuk/rails_performance/graphs/contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource-heroes.com/r/igorkasyanchuk/rails_performance&#34;&gt;&lt;img src=&#34;https://opensource-heroes.com/svg/embed/igorkasyanchuk/rails_performance&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.railsjazz.com/?utm_source=github&amp;amp;utm_medium=bottom&amp;amp;utm_campaign=rails_performance&#34;&gt;&lt;img src=&#34;https://github.com/igorkasyanchuk/rails_time_travel/raw/main/docs/more_gems.png?raw=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rubyzip/rubyzip</title>
    <updated>2024-11-26T01:37:09Z</updated>
    <id>tag:github.com,2024-11-26:/rubyzip/rubyzip</id>
    <link href="https://github.com/rubyzip/rubyzip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Rubyzip repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rubyzip&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/rubyzip&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rubyzip.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rubyzip/rubyzip/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/rubyzip/rubyzip/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rubyzip/rubyzip/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/rubyzip/rubyzip/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Linter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rubyzip/rubyzip&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rubyzip/rubyzip.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/rubyzip/rubyzip?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/rubyzip/rubyzip.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rubyzip is a ruby library for reading and writing zip files.&lt;/p&gt; &#xA;&lt;h2&gt;Important notes&lt;/h2&gt; &#xA;&lt;h3&gt;Updating to version 3.0&lt;/h3&gt; &#xA;&lt;p&gt;The public API of some classes has been modernized to use named parameters for optional arguments. Please check your usage of the following Rubyzip classes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;File&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Entry&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OutputStream&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please see &lt;a href=&#34;https://github.com/rubyzip/rubyzip/wiki/Updating-to-version-3.x&#34;&gt;Updating to version 3.x&lt;/a&gt; in the wiki for details.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Version 3.x requires at least Ruby 3.0.&lt;/p&gt; &#xA;&lt;p&gt;Version 2.x requires at least Ruby 2.4, and is known to work on Ruby 3.1.&lt;/p&gt; &#xA;&lt;p&gt;It is not recommended to use any versions of Rubyzip earlier than 2.3 due to security issues.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Rubyzip is available on RubyGems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install rubyzip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rubyzip&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic zip archive creation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rubygems&#39;&#xA;require &#39;zip&#39;&#xA;&#xA;folder = &#34;Users/me/Desktop/stuff_to_zip&#34;&#xA;input_filenames = [&#39;image.jpg&#39;, &#39;description.txt&#39;, &#39;stats.csv&#39;]&#xA;&#xA;zipfile_name = &#34;/Users/me/Desktop/archive.zip&#34;&#xA;&#xA;Zip::File.open(zipfile_name, create: true) do |zipfile|&#xA;  input_filenames.each do |filename|&#xA;    # Two arguments:&#xA;    # - The name of the file as it will appear in the archive&#xA;    # - The original file, including the path to find it&#xA;    zipfile.add(filename, File.join(folder, filename))&#xA;  end&#xA;  zipfile.get_output_stream(&#34;myFile&#34;) { |f| f.write &#34;myFile contains just this&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zipping a directory recursively&lt;/h3&gt; &#xA;&lt;p&gt;Copy from &lt;a href=&#34;https://github.com/rubyzip/rubyzip/raw/9d891f7353e66052283562d3e252fe380bb4b199/samples/example_recursive.rb&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;zip&#39;&#xA;&#xA;# This is a simple example which uses rubyzip to&#xA;# recursively generate a zip file from the contents of&#xA;# a specified directory. The directory itself is not&#xA;# included in the archive, rather just its contents.&#xA;#&#xA;# Usage:&#xA;#   directory_to_zip = &#34;/tmp/input&#34;&#xA;#   output_file = &#34;/tmp/out.zip&#34;&#xA;#   zf = ZipFileGenerator.new(directory_to_zip, output_file)&#xA;#   zf.write()&#xA;class ZipFileGenerator&#xA;  # Initialize with the directory to zip and the location of the output archive.&#xA;  def initialize(input_dir, output_file)&#xA;    @input_dir = input_dir&#xA;    @output_file = output_file&#xA;  end&#xA;&#xA;  # Zip the input directory.&#xA;  def write&#xA;    entries = Dir.entries(@input_dir) - %w[. ..]&#xA;&#xA;    ::Zip::File.open(@output_file, create: true) do |zipfile|&#xA;      write_entries entries, &#39;&#39;, zipfile&#xA;    end&#xA;  end&#xA;&#xA;  private&#xA;&#xA;  # A helper method to make the recursion work.&#xA;  def write_entries(entries, path, zipfile)&#xA;    entries.each do |e|&#xA;      zipfile_path = path == &#39;&#39; ? e : File.join(path, e)&#xA;      disk_file_path = File.join(@input_dir, zipfile_path)&#xA;&#xA;      if File.directory? disk_file_path&#xA;        recursively_deflate_directory(disk_file_path, zipfile, zipfile_path)&#xA;      else&#xA;        put_into_archive(disk_file_path, zipfile, zipfile_path)&#xA;      end&#xA;    end&#xA;  end&#xA;&#xA;  def recursively_deflate_directory(disk_file_path, zipfile, zipfile_path)&#xA;    zipfile.mkdir zipfile_path&#xA;    subdir = Dir.entries(disk_file_path) - %w[. ..]&#xA;    write_entries subdir, zipfile_path, zipfile&#xA;  end&#xA;&#xA;  def put_into_archive(disk_file_path, zipfile, zipfile_path)&#xA;    zipfile.add(zipfile_path, disk_file_path)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Save zip archive entries sorted by name&lt;/h3&gt; &#xA;&lt;p&gt;To save zip archives with their entries sorted by name (see below), set &lt;code&gt;::Zip.sort_entries&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Vegetable/&#xA;Vegetable/bean&#xA;Vegetable/carrot&#xA;Vegetable/celery&#xA;fruit/&#xA;fruit/apple&#xA;fruit/kiwi&#xA;fruit/mango&#xA;fruit/orange&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Opening an existing zip file with this option set will not change the order of the entries automatically. Altering the zip file - adding an entry, renaming an entry, adding or changing the archive comment, etc - will cause the ordering to be applied when closing the file.&lt;/p&gt; &#xA;&lt;h3&gt;Default permissions of zip archives&lt;/h3&gt; &#xA;&lt;p&gt;On Posix file systems the default file permissions applied to a new archive are (0666 - umask), which mimics the behavior of standard tools such as &lt;code&gt;touch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Windows the default file permissions are set to 0644 as suggested by the &lt;a href=&#34;http://ruby-doc.org/core-2.2.2/File.html&#34;&gt;Ruby File documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When modifying a zip archive the file permissions of the archive are preserved.&lt;/p&gt; &#xA;&lt;h3&gt;Reading a Zip file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;MAX_SIZE = 1024**2 # 1MiB (but of course you can increase this)&#xA;Zip::File.open(&#39;foo.zip&#39;) do |zip_file|&#xA;  # Handle entries one by one&#xA;  zip_file.each do |entry|&#xA;    puts &#34;Extracting #{entry.name}&#34;&#xA;    raise &#39;File too large when extracted&#39; if entry.size &amp;gt; MAX_SIZE&#xA;&#xA;    # Extract to file or directory based on name in the archive&#xA;    entry.extract&#xA;&#xA;    # Read into memory&#xA;    content = entry.get_input_stream.read&#xA;  end&#xA;&#xA;  # Find specific entry&#xA;  entry = zip_file.glob(&#39;*.csv&#39;).first&#xA;  raise &#39;File too large when extracted&#39; if entry.size &amp;gt; MAX_SIZE&#xA;  puts entry.get_input_stream.read&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notes on &lt;code&gt;Zip::InputStream&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Zip::InputStream&lt;/code&gt; can be used for faster reading of zip file content because it does not read the Central directory up front.&lt;/p&gt; &#xA;&lt;p&gt;There is one exception where it can not work however, and this is if the file does not contain enough information in the local entry headers to extract an entry. This is indicated in an entry by the General Purpose Flag bit 3 being set.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If bit 3 (0x08) of the general-purpose flags field is set, then the CRC-32 and file sizes are not known when the header is written. The fields in the local header are filled with zero, and the CRC-32 and size are appended in a 12-byte structure (optionally preceded by a 4-byte signature) immediately after the compressed data.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If &lt;code&gt;Zip::InputStream&lt;/code&gt; finds such an entry in the zip archive it will raise an exception (&lt;code&gt;Zip::StreamingError&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Zip::InputStream&lt;/code&gt; is not designed to be used for random access in a zip file. When performing any operations on an entry that you are accessing via &lt;code&gt;Zip::InputStream.get_next_entry&lt;/code&gt; then you should complete any such operations before the next call to &lt;code&gt;get_next_entry&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;zip_stream = Zip::InputStream.new(File.open(&#39;file.zip&#39;))&#xA;&#xA;while entry = zip_stream.get_next_entry&#xA;  # All required operations on `entry` go here.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any attempt to move about in a zip file opened with &lt;code&gt;Zip::InputStream&lt;/code&gt; could result in the incorrect entry being accessed and/or Zlib buffer errors. If you need random access in a zip file, use &lt;code&gt;Zip::File&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Password Protection (Experimental)&lt;/h3&gt; &#xA;&lt;p&gt;Rubyzip supports reading/writing zip files with traditional zip encryption (a.k.a. &#34;ZipCrypto&#34;). AES encryption is not yet supported. It can be used with buffer streams, e.g.:&lt;/p&gt; &#xA;&lt;h4&gt;Version 2.x&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Writing.&#xA;enc = Zip::TraditionalEncrypter.new(&#39;password&#39;)&#xA;buffer = Zip::OutputStream.write_buffer(::StringIO.new(&#39;&#39;), enc) do |output|&#xA;  output.put_next_entry(&#34;my_file.txt&#34;)&#xA;  output.write my_data&#xA;end&#xA;&#xA;# Reading.&#xA;dec = Zip::TraditionalDecrypter.new(&#39;password&#39;)&#xA;Zip::InputStream.open(buffer, 0, dec) do |input|&#xA;  entry = input.get_next_entry&#xA;  puts &#34;Contents of &#39;#{entry.name}&#39;:&#34;&#xA;  puts input.read&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Version 3.x&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Writing.&#xA;enc = Zip::TraditionalEncrypter.new(&#39;password&#39;)&#xA;buffer = Zip::OutputStream.write_buffer(encrypter: enc) do |output|&#xA;  output.put_next_entry(&#34;my_file.txt&#34;)&#xA;  output.write my_data&#xA;end&#xA;&#xA;# Reading.&#xA;dec = Zip::TraditionalDecrypter.new(&#39;password&#39;)&#xA;Zip::InputStream.open(buffer, decrypter: dec) do |input|&#xA;  entry = input.get_next_entry&#xA;  puts &#34;Contents of &#39;#{entry.name}&#39;:&#34;&#xA;  puts input.read&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;This is an experimental feature and the interface for encryption may change in future versions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;h3&gt;Modify docx file with rubyzip&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;write_buffer&lt;/code&gt; instead &lt;code&gt;open&lt;/code&gt;. Thanks to @jondruse&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;buffer = Zip::OutputStream.write_buffer do |out|&#xA;  @zip_file.entries.each do |e|&#xA;    unless [DOCUMENT_FILE_PATH, RELS_FILE_PATH].include?(e.name)&#xA;      out.put_next_entry(e.name)&#xA;      out.write e.get_input_stream.read&#xA;    end&#xA;  end&#xA;&#xA;  out.put_next_entry(DOCUMENT_FILE_PATH)&#xA;  out.write xml_doc.to_xml(:indent =&amp;gt; 0).gsub(&#34;\n&#34;,&#34;&#34;)&#xA;&#xA;  out.put_next_entry(RELS_FILE_PATH)&#xA;  out.write rels.to_xml(:indent =&amp;gt; 0).gsub(&#34;\n&#34;,&#34;&#34;)&#xA;end&#xA;&#xA;File.open(new_path, &#34;wb&#34;) {|f| f.write(buffer.string) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Existing Files&lt;/h3&gt; &#xA;&lt;p&gt;By default, rubyzip will not overwrite files if they already exist inside of the extracted path. To change this behavior, you may specify a configuration option like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Zip.on_exists_proc = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using rubyzip with rails, consider placing this snippet of code in an initializer file such as &lt;code&gt;config/initializers/rubyzip.rb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if you want to configure rubyzip to overwrite existing files while creating a .zip file, you can do so with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Zip.continue_on_exists_proc = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Non-ASCII Names&lt;/h3&gt; &#xA;&lt;p&gt;If you want to store non-english names and want to open them on Windows(pre 7) you need to set this option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Zip.unicode_names = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes file names inside zip contain non-ASCII characters. If you can assume which encoding was used for such names and want to be able to find such entries using &lt;code&gt;find_entry&lt;/code&gt; then you can force assumed encoding like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Zip.force_entry_names_encoding = &#39;UTF-8&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Allowed encoding names are the same as accepted by &lt;code&gt;String#force_encoding&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Date Validation&lt;/h3&gt; &#xA;&lt;p&gt;Some zip files might have an invalid date format, which will raise a warning. You can hide this warning with the following setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Zip.warn_invalid_date = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Size Validation&lt;/h3&gt; &#xA;&lt;p&gt;By default (in rubyzip &amp;gt;= 2.0), rubyzip&#39;s &lt;code&gt;extract&lt;/code&gt; method checks that an entry&#39;s reported uncompressed size is not (significantly) smaller than its actual size. This is to help you protect your application against &lt;a href=&#34;https://en.wikipedia.org/wiki/Zip_bomb&#34;&gt;zip bombs&lt;/a&gt;. Before &lt;code&gt;extract&lt;/code&gt;ing an entry, you should check that its size is in the range you expect. For example, if your application supports processing up to 100 files at once, each up to 10MiB, your zip extraction code might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;MAX_FILE_SIZE = 10 * 1024**2 # 10MiB&#xA;MAX_FILES = 100&#xA;Zip::File.open(&#39;foo.zip&#39;) do |zip_file|&#xA;  num_files = 0&#xA;  zip_file.each do |entry|&#xA;    num_files += 1 if entry.file?&#xA;    raise &#39;Too many extracted files&#39; if num_files &amp;gt; MAX_FILES&#xA;    raise &#39;File too large when extracted&#39; if entry.size &amp;gt; MAX_FILE_SIZE&#xA;    entry.extract&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to extract zip files that report incorrect uncompressed sizes and you really trust them not too be too large, you can disable this setting with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Zip.validate_entry_sizes = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you use the lower level &lt;code&gt;Zip::InputStream&lt;/code&gt; interface, &lt;code&gt;rubyzip&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; check the entry &lt;code&gt;size&lt;/code&gt;s. In this case, the caller is responsible for making sure it does not read more data than expected from the input stream.&lt;/p&gt; &#xA;&lt;h3&gt;Compression level&lt;/h3&gt; &#xA;&lt;p&gt;When adding entries to a zip archive you can set the compression level to trade-off compressed size against compression speed. By default this is set to the same as the underlying Zlib library&#39;s default (&lt;code&gt;Zlib::DEFAULT_COMPRESSION&lt;/code&gt;), which is somewhere in the middle.&lt;/p&gt; &#xA;&lt;p&gt;You can configure the default compression level with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Zip.default_compression = X&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where X is an integer between 0 and 9, inclusive. If this option is set to 0 (&lt;code&gt;Zlib::NO_COMPRESSION&lt;/code&gt;) then entries will be stored in the zip archive uncompressed. A value of 1 (&lt;code&gt;Zlib::BEST_SPEED&lt;/code&gt;) gives the fastest compression and 9 (&lt;code&gt;Zlib::BEST_COMPRESSION&lt;/code&gt;) gives the smallest compressed file size.&lt;/p&gt; &#xA;&lt;p&gt;This can also be set for each archive as an option to &lt;code&gt;Zip::File&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Zip::File.open(&#39;foo.zip&#39;, create:true, compression_level: 9) do |zip|&#xA;  zip.add ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zip64 Support&lt;/h3&gt; &#xA;&lt;p&gt;Since version 3.0, Zip64 support is enabled for writing by default. To disable it do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Zip.write_zip64_support = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prior to version 3.0, Zip64 support is disabled for writing by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: If Zip64 write support is enabled then any extractor subsequently used may also require Zip64 support to read from the resultant archive.&lt;/p&gt; &#xA;&lt;h3&gt;Block Form&lt;/h3&gt; &#xA;&lt;p&gt;You can set multiple settings at the same time by using a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  Zip.setup do |c|&#xA;    c.on_exists_proc = true&#xA;    c.continue_on_exists_proc = true&#xA;    c.unicode_names = true&#xA;    c.default_compression = Zlib::BEST_COMPRESSION&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Rubyzip is known to run on a number of platforms and under a number of different Ruby versions.&lt;/p&gt; &#xA;&lt;h3&gt;Version 2.3.x&lt;/h3&gt; &#xA;&lt;p&gt;Rubyzip 2.3 is known to work on MRI 2.4 to 3.1 on Linux and Mac, and JRuby and Truffleruby on Linux. There are known issues with Windows which have been fixed on the development branch. Please &lt;a href=&#34;https://github.com/rubyzip/rubyzip/pulls&#34;&gt;let us know&lt;/a&gt; if you know Rubyzip 2.3 works on a platform/Ruby combination not listed here, or &lt;a href=&#34;https://github.com/rubyzip/rubyzip/issues&#34;&gt;raise an issue&lt;/a&gt; if you see a failure where we think it should work.&lt;/p&gt; &#xA;&lt;h3&gt;Next (version 3.0.0)&lt;/h3&gt; &#xA;&lt;p&gt;Please see the table below for what we think the current situation is. Note: an empty cell means &#34;unknown&#34;, not &#34;does not work&#34;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OS/Ruby&lt;/th&gt; &#xA;   &lt;th&gt;2.5&lt;/th&gt; &#xA;   &lt;th&gt;2.6&lt;/th&gt; &#xA;   &lt;th&gt;2.7&lt;/th&gt; &#xA;   &lt;th&gt;3.0&lt;/th&gt; &#xA;   &lt;th&gt;3.1&lt;/th&gt; &#xA;   &lt;th&gt;3.2&lt;/th&gt; &#xA;   &lt;th&gt;3.3&lt;/th&gt; &#xA;   &lt;th&gt;Head&lt;/th&gt; &#xA;   &lt;th&gt;JRuby 9.4.6.0&lt;/th&gt; &#xA;   &lt;th&gt;JRuby Head&lt;/th&gt; &#xA;   &lt;th&gt;Truffleruby 23.1.2&lt;/th&gt; &#xA;   &lt;th&gt;Truffleruby Head&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu 22.04&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;ci&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;ci&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;ci&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mac OS 12.7.3&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;ci&lt;/td&gt; &#xA;   &lt;td&gt;ci&lt;/td&gt; &#xA;   &lt;td&gt;ci&lt;/td&gt; &#xA;   &lt;td&gt;ci&lt;/td&gt; &#xA;   &lt;td&gt;ci&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows Server 2022&lt;/td&gt; &#xA;   &lt;td&gt;CI&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CI&amp;nbsp;mswin&lt;br&gt;CI&amp;nbsp;ucrt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Key: &lt;code&gt;CI&lt;/code&gt; - tested in CI, should work; &lt;code&gt;ci&lt;/code&gt; - tested in CI, might fail; &lt;code&gt;x&lt;/code&gt; - known working; &lt;code&gt;o&lt;/code&gt; - known failing.&lt;/p&gt; &#xA;&lt;p&gt;Ruby 3.0+ are also tested separately with YJIT turned on.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/rubyzip/rubyzip/actions&#34;&gt;the Actions tab&lt;/a&gt; in GitHub for full details.&lt;/p&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/rubyzip/rubyzip/pulls&#34;&gt;raise a PR&lt;/a&gt; if you know Rubyzip works on a platform/Ruby combination not listed here, or &lt;a href=&#34;https://github.com/rubyzip/rubyzip/issues&#34;&gt;raise an issue&lt;/a&gt; if you see a failure where we think it should work.&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;Install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests with &lt;code&gt;rake&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please also run &lt;code&gt;rubocop&lt;/code&gt; over your changes.&lt;/p&gt; &#xA;&lt;p&gt;Our CI runs on &lt;a href=&#34;https://github.com/rubyzip/rubyzip/actions&#34;&gt;GitHub Actions&lt;/a&gt;. Please note that &lt;code&gt;rubocop&lt;/code&gt; is run as part of the CI configuration and will fail a build if errors are found.&lt;/p&gt; &#xA;&lt;h2&gt;Website and Project Home&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://github.com/rubyzip/rubyzip&#34;&gt;http://github.com/rubyzip/rubyzip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rdoc.info/github/rubyzip/rubyzip/master/frames&#34;&gt;http://rdoc.info/github/rubyzip/rubyzip/master/frames&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/rubyzip/rubyzip/graphs/contributors&#34;&gt;https://github.com/rubyzip/rubyzip/graphs/contributors&lt;/a&gt; for a comprehensive list.&lt;/p&gt; &#xA;&lt;h3&gt;Current maintainers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Robert Haines (@hainesr)&lt;/li&gt; &#xA; &lt;li&gt;John Lees-Miller (@jdleesmiller)&lt;/li&gt; &#xA; &lt;li&gt;Oleksandr Simonov (@simonoff)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Original author&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thomas Sondergaard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Rubyzip is distributed under the same license as Ruby. In practice this means you can use it under the terms of the Ruby License or the 2-Clause BSD License. See &lt;a href=&#34;https://www.ruby-lang.org/en/about/license.txt&#34;&gt;https://www.ruby-lang.org/en/about/license.txt&lt;/a&gt; and LICENSE.md for details.&lt;/p&gt; &#xA;&lt;h2&gt;Research notice&lt;/h2&gt; &#xA;&lt;p&gt;Please note that this repository is participating in a study into sustainability of open source projects. Data will be gathered about this repository for approximately the next 12 months, starting from June 2021.&lt;/p&gt; &#xA;&lt;p&gt;Data collected will include number of contributors, number of PRs, time taken to close/merge these PRs, and issues closed.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please visit &lt;a href=&#34;https://sustainable-open-science-and-software.github.io/&#34;&gt;our informational page&lt;/a&gt; or download our &lt;a href=&#34;https://sustainable-open-science-and-software.github.io/assets/PIS_sustainable_software.pdf&#34;&gt;participant information sheet&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>