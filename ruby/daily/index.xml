<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-30T01:44:31Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>turchenkoalex/dropbox-download</title>
    <updated>2023-01-30T01:44:31Z</updated>
    <id>tag:github.com,2023-01-30:/turchenkoalex/dropbox-download</id>
    <link href="https://github.com/turchenkoalex/dropbox-download" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby simple app for sync with dropbox&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>ChargePoint/homebrew-xcparse</title>
    <updated>2023-01-30T01:44:31Z</updated>
    <id>tag:github.com,2023-01-30:/ChargePoint/homebrew-xcparse</id>
    <link href="https://github.com/ChargePoint/homebrew-xcparse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Homebrew Tap for xcparse&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;homebrew-xcparse&lt;/h1&gt; &#xA;&lt;p&gt;Homebrew Tap for &lt;a href=&#34;https://github.com/ChargePoint/xcparse&#34;&gt;xcparse&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-enumerables-lab</title>
    <updated>2023-01-30T01:44:31Z</updated>
    <id>tag:github.com,2023-01-30:/learn-co-curriculum/phase-3-enumerables-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-enumerables-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Enumerables Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Practice using common enumerable methods like &lt;code&gt;#each&lt;/code&gt;, &lt;code&gt;#map&lt;/code&gt;, &lt;code&gt;#find&lt;/code&gt;, and &lt;code&gt;#filter&lt;/code&gt; with arrays&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;In the &lt;code&gt;enumerables.rb&lt;/code&gt; file, there is an array of hashes representing different spicy foods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# this method returns an array of hashes, which we&#39;ll use in the other methods&#xA;def spicy_foods&#xA;  [&#xA;    { name: &#39;Green Curry&#39;, cuisine: &#39;Thai&#39;, heat_level: 9 },&#xA;    { name: &#39;Buffalo Wings&#39;, cuisine: &#39;American&#39;, heat_level: 3 },&#xA;    { name: &#39;Mapo Tofu&#39;, cuisine: &#39;Sichuan&#39;, heat_level: 6 },&#xA;  ]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Practice using Ruby enumerable methods to solve these deliverables. You &lt;em&gt;could&lt;/em&gt; use &lt;code&gt;#each&lt;/code&gt; to solve all of these, but try to expand your toolkit and use some other enumerable methods to make the job easier, like &lt;code&gt;#map&lt;/code&gt;, &lt;code&gt;#select&lt;/code&gt;, and &lt;code&gt;#find&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;#get_names&lt;/h3&gt; &#xA;&lt;p&gt;Define a method &lt;code&gt;#get_names&lt;/code&gt;, takes an array of &lt;code&gt;spicy_foods&lt;/code&gt; and &lt;strong&gt;returns an array of strings&lt;/strong&gt; with the names of each spicy food.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;get_names(spicy_foods)&#xA;# =&amp;gt; [&#34;Green Curry&#34;, &#34;Buffalo Wings&#34;, &#34;Mapo Tofu&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;#spiciest_foods&lt;/h3&gt; &#xA;&lt;p&gt;Define a method &lt;code&gt;#spiciest_foods&lt;/code&gt; that an array of &lt;code&gt;spicy_foods&lt;/code&gt; and &lt;strong&gt;returns an array of hashes&lt;/strong&gt; where the heat level of the food is greater than 5.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;spiciest_foods(spicy_foods)&#xA;# =&amp;gt; [{ name: &#39;Green Curry&#39;, cuisine: &#39;Thai&#39;, heat_level: 9 }, { name: &#39;Mapo Tofu&#39;, cuisine: &#39;Sichuan&#39;, heat_level: 6 }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;#print_spicy_foods&lt;/h3&gt; &#xA;&lt;p&gt;Define a method &lt;code&gt;#print_spicy_foods&lt;/code&gt; that takes an array of &lt;code&gt;spicy_foods&lt;/code&gt; and &lt;strong&gt;output to the terminal&lt;/strong&gt; each spicy food in the following format using &lt;code&gt;#puts&lt;/code&gt;: &lt;code&gt;Buffalo Wings (American) | Heat Level: ðŸŒ¶ðŸŒ¶ðŸŒ¶&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;HINT: you can use &lt;a href=&#34;https://ruby-doc.org/core-2.7.3/String.html#method-i-2A&#34;&gt;times (*) with a string&lt;/a&gt; to produce the correct number of &#34;ðŸŒ¶&#34; emoji.&lt;/p&gt; &#xA;&lt;p&gt;For example: &lt;code&gt;&#34;hello&#34; * 3 == &#34;hellohellohello&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;print_spicy_foods(spicy_foods)&#xA;# Green Curry (Thai) | Heat Level: ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶&#xA;# Buffalo Wings (American) | Heat Level: ðŸŒ¶ðŸŒ¶ðŸŒ¶&#xA;# Mapo Tofu (Sichuan) | Heat Level: ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;#get_spicy_food_by_cuisine&lt;/h3&gt; &#xA;&lt;p&gt;Define a method &lt;code&gt;get_spicy_food_by_cuisine&lt;/code&gt; that takes an array of &lt;code&gt;spicy_foods&lt;/code&gt; and a string representing a &lt;code&gt;cuisine&lt;/code&gt;, and &lt;strong&gt;returns a single hash&lt;/strong&gt; for the spicy food whose cuisine matches the cuisine being passed to the method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;get_spicy_food_by_cuisine(spicy_foods, &#34;American&#34;)&#xA;# =&amp;gt; { name: &#39;Buffalo Wings&#39;, cuisine: &#39;American&#39;, heat_level: 3 }&#xA;&#xA;get_spicy_food_by_cuisine(spicy_foods, &#34;Thai&#34;)&#xA;# =&amp;gt; { name: &#39;Green Curry&#39;, cuisine: &#39;Thai&#39;, heat_level: 9 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;#sort_by_heat&lt;/h3&gt; &#xA;&lt;p&gt;Define a method &lt;code&gt;#sort_by_heat&lt;/code&gt; that takes an array of &lt;code&gt;spicy_foods&lt;/code&gt; and &lt;strong&gt;returns an array of hashes&lt;/strong&gt; sorted by heat level from lowest to highest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;sort_by_heat(spicy_foods)&#xA;# =&amp;gt; [&#xA;#   { name: &#39;Buffalo Wings&#39;, cuisine: &#39;American&#39;, heat_level: 3 },&#xA;#   { name: &#39;Mapo Tofu&#39;, cuisine: &#39;Sichuan&#39;, heat_level: 6 },&#xA;#   { name: &#39;Green Curry&#39;, cuisine: &#39;Thai&#39;, heat_level: 9 }&#xA;# ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;#print_spiciest_foods&lt;/h3&gt; &#xA;&lt;p&gt;Define a method &lt;code&gt;#print_spiciest_foods&lt;/code&gt; that takes an array of &lt;code&gt;spicy_foods&lt;/code&gt; and &lt;strong&gt;outputs to the terminal&lt;/strong&gt; ONLY the spicy foods that have a heat level greater than 5, in the following format: &lt;code&gt;Buffalo Wings (American) | Heat Level: ðŸŒ¶ðŸŒ¶ðŸŒ¶&lt;/code&gt;. Try to use methods you&#39;ve already written to solve this!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;print_spiciest_foods(spicy_foods)&#xA;# Green Curry (Thai) | Heat Level: ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶&#xA;# Mapo Tofu (Sichuan) | Heat Level: ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶ðŸŒ¶&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;#average_heat_level&lt;/h3&gt; &#xA;&lt;p&gt;Define a method &lt;code&gt;#average_heat_level&lt;/code&gt; that takes an array of &lt;code&gt;spicy_foods&lt;/code&gt; and &lt;strong&gt;returns an integer&lt;/strong&gt; representing the average heat level of all the spicy foods in the array. Recall that to derive the average of a collection, you need to calculate the total and divide number of elements in the collection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;HINT&lt;/strong&gt;: you can solve this using &lt;code&gt;each&lt;/code&gt;, or try the &lt;a href=&#34;https://ruby-doc.org/core-2.7.3/Enumerable.html#method-i-sum&#34;&gt;sum method&lt;/a&gt; with a block, to get the total spice level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;average_heat_level(spicy_foods)&#xA;# =&amp;gt; 6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruby-doc.org/core-2.7.3/Enumerable.html&#34;&gt;Enumerable documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>