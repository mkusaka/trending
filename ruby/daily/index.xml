<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-25T01:39:26Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>appdev-projects/dashboards</title>
    <updated>2022-10-25T01:39:26Z</updated>
    <id>tag:github.com,2022-10-25:/appdev-projects/dashboards</id>
    <link href="https://github.com/appdev-projects/dashboards" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dashboards&lt;/h1&gt; &#xA;&lt;h2&gt;Target&lt;/h2&gt; &#xA;&lt;p&gt;Here is your target:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://dashboards.matchthetarget.com/&#34;&gt;http://dashboards.matchthetarget.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The required portion of the project is the foreign exchange rates.&lt;/p&gt; &#xA;&lt;h2&gt;APIs&lt;/h2&gt; &#xA;&lt;h3&gt;exchangerate.host&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API endpoint for available symbols: &lt;a href=&#34;https://api.exchangerate.host/symbols&#34;&gt;https://api.exchangerate.host/symbols&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;API endpoint to convert between two currencies (USD to EUR): &lt;a href=&#34;https://api.exchangerate.host/convert?from=USD&amp;amp;to=EUR&#34;&gt;https://api.exchangerate.host/convert?from=USD&amp;amp;to=EUR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://exchangerate.host/#/#docs&#34;&gt;Full documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The COVID Tracking Project&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API endpoint for a single state (Illinois): &lt;a href=&#34;https://covidtracking.com/api/v1/states/ca/current.json&#34;&gt;https://covidtracking.com/api/v1/states/ca/current.json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://covidtracking.com/data/api&#34;&gt;Full documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the web server by running &lt;code&gt;bin/server&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to your live application preview.&lt;/li&gt; &#xA; &lt;li&gt;As you work, remember to navigate to &lt;code&gt;/git&lt;/code&gt; and &lt;strong&gt;commit often as you work.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rails grade&lt;/code&gt; as often as you like to see how you are doing.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Specs&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click here to see names of each test&lt;/summary&gt; &#xA; &lt;p&gt;/forex has a level one heading with the text &#39;Currency pairs&#39;&lt;/p&gt; &#xA; &lt;p&gt;/forex lists each of the Currency Symbols from the API&lt;/p&gt; &#xA; &lt;p&gt;/forex has a link to &#39;/forex/X&#39;, where &#39;X&#39; is a currency symbol, for each currency symbol&lt;/p&gt; &#xA; &lt;p&gt;/forex/[CURRENCY SYMBOL] has a level one heading with the text &#39;Convert [CURRENCY SYMBOL]&#39;&lt;/p&gt; &#xA; &lt;p&gt;/forex/[CURRENCY SYMBOL] has a level one heading with the text &#39;Convert [CURRENCY SYMBOL]&#39;&lt;/p&gt; &#xA; &lt;p&gt;/forex/[CURRENCY SYMBOL] has a link with the text &#39;back&#39; to &#39;/forex&#39;&lt;/p&gt; &#xA; &lt;p&gt;/forex/[CURRENCY SYMBOL] has a link with the text, &#39;Convert 1 X to Y...&#39;, to &#39;/forex/X/Y&#39;, for each currency symbol&lt;/p&gt; &#xA; &lt;p&gt;/forex/[CURRENCY SYMBOL]/[CURRENCY SYMBOL] has a level one heading with the text &#39;Convert [CURRENCY SYMBOL] to [CURRENCY SYMBOL]&#39;&lt;/p&gt; &#xA; &lt;p&gt;/forex/[CURRENCY SYMBOL]/[CURRENCY SYMBOL] has the text &#39;1 [CURRENCY SYMBOL] equals [CURRENCY SYMBOL]&#39;&lt;/p&gt; &#xA; &lt;p&gt;/forex/[CURRENCY SYMBOL]/[CURRENCY SYMBOL] has a link with the text &#39;back&#39; to &#39;/forex/[CURRENCY SYMBOL]&#39;&lt;/p&gt; &#xA; &lt;p&gt;/forex/[CURRENCY SYMBOL]/[CURRENCY SYMBOL] has a link with the text &#39;back&#39; to &#39;/forex/[CURRENCY SYMBOL]&#39;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-metaprogramming-triangle-classification-lab</title>
    <updated>2022-10-25T01:39:26Z</updated>
    <id>tag:github.com,2022-10-25:/learn-co-curriculum/phase-3-metaprogramming-triangle-classification-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-metaprogramming-triangle-classification-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Triangle Classification Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define a custom error class and use it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Write a &lt;code&gt;Triangle&lt;/code&gt; class that accepts three arguments on initialization. Each argument is a length of one of the three sides of the triangle.&lt;/p&gt; &#xA;&lt;p&gt;Define an instance method, &lt;code&gt;#kind&lt;/code&gt; that returns, as a symbol, its type. The valid types are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:equilateral&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:isosceles&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:scalene&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/module-1/ruby-metaprogramming/triangle-classification-lab/Image_141_MathematicalTriangles.png&#34; alt=&#34;Triangle types&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;#kind&lt;/code&gt; method should raise a custom error, &lt;code&gt;TriangleError&lt;/code&gt; if the triangle is invalid. Check out the hint below to understand what makes a triangle valid.&lt;/p&gt; &#xA;&lt;p&gt;Write a custom error class, &lt;code&gt;TriangleError&lt;/code&gt; and inherit it from &lt;code&gt;StandardError&lt;/code&gt;. This custom error class should be defined in the same file as the &lt;code&gt;Triangle&lt;/code&gt; class, inside the &lt;code&gt;Triangle&lt;/code&gt; class definition, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/triangle.rb&#xA;&#xA;class Triangle&#xA;  # triangle code&#xA;&#xA;  class TriangleError &amp;lt; StandardError&#xA;    # triangle error code&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Several of the tests will be looking for the &lt;code&gt;TriangleError&lt;/code&gt; to be raised. If you implement a &lt;code&gt;rescue&lt;/code&gt; for it, however, the tests will not recognize that the error was raised. For purposes of this lab, therefore, you should not include a &lt;code&gt;rescue&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Identifying Valid Triangles&lt;/h2&gt; &#xA;&lt;p&gt;A valid triangle must meet the following criteria:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Each side must be larger than 0.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The sum of the lengths of any two sides of a triangle always exceeds the length of the third side. This is a principle known as the &lt;em&gt;triangle inequality&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.skorks.com/2009/09/ruby-exceptions-and-exception-handling/&#34;&gt;Exception Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.basic-mathematics.com/&#34;&gt;Basic Mathematics&lt;/a&gt; - &lt;a href=&#34;http://www.basic-mathematics.com/types-of-triangles.html&#34;&gt;Types of Triangles&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-ruby-oo-self-person-lab</title>
    <updated>2022-10-25T01:39:26Z</updated>
    <id>tag:github.com,2022-10-25:/learn-co-curriculum/phase-3-ruby-oo-self-person-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-ruby-oo-self-person-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OO Person Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gain proficiency instantiating a class&lt;/li&gt; &#xA; &lt;li&gt;Gain ability to discern when to implement &lt;code&gt;attr_accessor&lt;/code&gt;, &lt;code&gt;attr_reader&lt;/code&gt;, and &lt;code&gt;attr_writer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gain ability to discern when to define your own &lt;code&gt;attr_reader&lt;/code&gt; (getter) and &lt;code&gt;attr_writer&lt;/code&gt; (setter) methods&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;To practice object oriented programming (OOP), you&#39;re going to create a &lt;code&gt;Person&lt;/code&gt; class. Each instance of the &lt;code&gt;Person&lt;/code&gt; class will have the ability to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get paid/receive payments&lt;/li&gt; &#xA; &lt;li&gt;Take a bath&lt;/li&gt; &#xA; &lt;li&gt;Call a friend&lt;/li&gt; &#xA; &lt;li&gt;Start a conversation&lt;/li&gt; &#xA; &lt;li&gt;State if they are happy and/or clean&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A Note on Notation&lt;/h2&gt; &#xA;&lt;p&gt;In the instructions below (and in other labs), you&#39;ll see this notation used to represent instance methods and class methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ClassName#method_name&lt;/code&gt;: represents an &lt;strong&gt;instance method&lt;/strong&gt; that can be called on the class&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ClassName.method_name&lt;/code&gt;: represents a &lt;strong&gt;class method&lt;/strong&gt; that can be called on the class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;Person#name&lt;/code&gt; is an example of an instance method, that we can call on an instance of a class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class Person&#xA;  def name&#xA;    @name&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also define this particular instance method using a macro (which creates the getter method for us):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class Person&#xA;  attr_reader :name&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Person.new&lt;/code&gt; is an example of a class method (remember, to create a new instance of the class, we call &lt;code&gt;ClassName.new&lt;/code&gt;, which then calls the instance method &lt;code&gt;ClassName#initialize&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;Person&lt;/code&gt; class with the behavior described below. You can use &lt;code&gt;attr_&lt;/code&gt; macros for some of these deliverables; for others, you&#39;ll need to write custom getter and/or setter methods.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person.new(name)&lt;/code&gt;: takes an argument of a name and saves it to the object. The person&#39;s name &lt;em&gt;should not&lt;/em&gt; be able to change after initialization. When a new person is created, they should have the following attributes in addition to their name (saved to instance variables):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;@bank_account&lt;/code&gt; with an initial value of 25&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@happiness&lt;/code&gt; with an initial value of 8&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@hygiene&lt;/code&gt; with an initial value of 8&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#name&lt;/code&gt;: gets the person&#39;s name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#bank_account&lt;/code&gt;: gets the amount in a person&#39;s bank account.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#bank_account=(value)&lt;/code&gt;: sets the value of the bank account to a new amount.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#happiness&lt;/code&gt;: gets the value of the person&#39;s happiness points.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#happiness=(value)&lt;/code&gt;: sets the value of the person&#39;s happiness points. The maximum value allowed is 10, and the minimum value allowed is 0.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#hygiene&lt;/code&gt;: gets the value of the person&#39;s hygiene points.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#hygiene=(value)&lt;/code&gt;: sets the value of the person&#39;s hygiene points. The maximum value allowed is 10, and the minimum value allowed is 0.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional Instance Methods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#clean?&lt;/code&gt;: returns &lt;code&gt;true&lt;/code&gt; if the person&#39;s hygiene is more than seven; otherwise, it returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#happy?&lt;/code&gt;: returns &lt;code&gt;true&lt;/code&gt; if the person&#39;s happiness is more than seven; otherwise, it returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#get_paid(amount)&lt;/code&gt;: accepts a salary amount and adds this to the person&#39;s bank account. The method should return the string &lt;code&gt;&#34;all about the benjamins&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#take_bath&lt;/code&gt;: increments the person&#39;s hygiene points by four and returns the string &lt;code&gt;&#34;♪ Rub-a-dub just relaxing in the tub ♫&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#work_out&lt;/code&gt;: increments the person&#39;s happiness by two points, decreases their hygiene by three points, and returns the Queen lyrics, &lt;code&gt;&#34;♪ another one bites the dust ♫&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#call_friend(friend)&lt;/code&gt;: accepts another instance of the &lt;code&gt;Person&lt;/code&gt; class, or &#34;friend&#34;. The method should increment the person and the friend&#39;s happiness points by three. It should also return a string. For example, if Stella calls her friend Felix, the method increment both Stella and Felix&#39;s happiness points and then return &lt;code&gt;&#34;Hi Felix! It&#39;s Stella. How are you?&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person#start_conversation(friend, topic)&lt;/code&gt;: accept two arguments, the friend to start a conversation with and the topic of conversation.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the topic is politics, both people get sadder (their happiness decreases by 2) and the method returns &lt;code&gt;&#34;blah blah partisan blah lobbyist&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If the topic is weather, both people get a little happier (their happiness increases by 1) and the method returns &lt;code&gt;&#34;blah blah sun blah rain&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If the topic is not politics or weather, their happiness points don&#39;t change and the method returns &lt;code&gt;&#34;blah blah blah blah blah&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>