<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-03T01:37:45Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ryanb/nested_form</title>
    <updated>2025-03-03T01:37:45Z</updated>
    <id>tag:github.com,2025-03-03:/ryanb/nested_form</id>
    <link href="https://github.com/ryanb/nested_form" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rails plugin to conveniently handle multiple models in a single form.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unmaintained&lt;/h1&gt; &#xA;&lt;p&gt;The Nested Form gem is &lt;strong&gt;no longer maintained&lt;/strong&gt;. Feel free to fork this project.&lt;/p&gt; &#xA;&lt;h1&gt;Nested Form&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/ryanb/nested_form&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/ryanb/nested_form.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a Rails gem for conveniently manage multiple nested models in a single form. It does so in an unobtrusive way through jQuery or Prototype.&lt;/p&gt; &#xA;&lt;p&gt;This gem only works with Rails 3. See the &lt;a href=&#34;https://github.com/ryanb/nested_form/tree/rails2&#34;&gt;rails2 branch&lt;/a&gt; for a plugin to work in Rails 2.&lt;/p&gt; &#xA;&lt;p&gt;An example project showing how this works is available in the &lt;a href=&#34;https://github.com/ryanb/complex-form-examples/tree/nested_form&#34;&gt;complex-nested-forms/nested_form branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Add it to your Gemfile then run &lt;code&gt;bundle&lt;/code&gt; to install it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;nested_form&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then add it to the Asset Pipeline in the application.js file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;//= require jquery_nested_form&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Non Asset Pipeline Setup&lt;/h3&gt; &#xA;&lt;p&gt;If you do not use the asset pipeline, run this generator to create the JavaScript file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails g nested_form:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then include the generated JavaScript in your layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= javascript_include_tag :defaults, &#34;nested_form&#34; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Imagine you have a &lt;code&gt;Project&lt;/code&gt; model that &lt;code&gt;has_many :tasks&lt;/code&gt;. To be able to use this gem, you&#39;ll need to add &lt;code&gt;accepts_nested_attributes_for :tasks&lt;/code&gt; to your Project model. If you wish to allow the nested objects to be destroyed, then add the &lt;code&gt;:allow_destroy =&amp;gt; true&lt;/code&gt; option to that declaration. See the &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for&#34;&gt;accepts_nested_attributes_for documentation&lt;/a&gt; for details on all available options.&lt;/p&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;tasks_attributes=&lt;/code&gt; method, so you may need to add it to the &lt;code&gt;attr_accessible&lt;/code&gt; array (&lt;code&gt;attr_accessible :tasks_attributes&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Then use the &lt;code&gt;nested_form_for&lt;/code&gt; helper method to enable the nesting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= nested_form_for @project do |f| %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will then be able to use &lt;code&gt;link_to_add&lt;/code&gt; and &lt;code&gt;link_to_remove&lt;/code&gt; helper methods on the form builder in combination with fields_for to dynamically add/remove nested records.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.fields_for :tasks do |task_form| %&amp;gt;&#xA;  &amp;lt;%= task_form.text_field :name %&amp;gt;&#xA;  &amp;lt;%= task_form.link_to_remove &#34;Remove this task&#34; %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&amp;lt;p&amp;gt;&amp;lt;%= f.link_to_add &#34;Add a task&#34;, :tasks %&amp;gt;&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to choose how to handle, after validation errors, fields that are marked for destruction, the &lt;code&gt;marked_for_destruction&lt;/code&gt; class is added on the div if the object is marked for destruction.&lt;/p&gt; &#xA;&lt;h2&gt;Strong Parameters&lt;/h2&gt; &#xA;&lt;p&gt;For Rails 4 or people using the &#34;strong_parameters&#34; gem, here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params.require(:project).permit(:name, tasks_attributes: [:id, :name, :_destroy])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:id&lt;/code&gt; is to make sure you do not end up with a whole lot of tasks.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;:_destroy&lt;/code&gt; must be there so that we can delete tasks.&lt;/p&gt; &#xA;&lt;h2&gt;SimpleForm and Formtastic Support&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;simple_nested_form_for&lt;/code&gt; or &lt;code&gt;semantic_nested_form_for&lt;/code&gt; for SimpleForm and Formtastic support respectively.&lt;/p&gt; &#xA;&lt;h2&gt;Partials&lt;/h2&gt; &#xA;&lt;p&gt;It is often desirable to move the nested fields into a partial to keep things organized. If you don&#39;t supply a block to fields_for it will look for a partial and use that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.fields_for :tasks %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case it will look for a partial called &#34;task_fields&#34; and pass the form builder as an &lt;code&gt;f&lt;/code&gt; variable to it.&lt;/p&gt; &#xA;&lt;h2&gt;Specifying a Target for Nested Fields&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;link_to_add&lt;/code&gt; appends fields immediately before the link when clicked. This is not desirable when using a list or table, for example. In these situations, the &#34;data-target&#34; attribute can be used to specify where new fields should be inserted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;table id=&#34;tasks&#34;&amp;gt;&#xA;  &amp;lt;%= f.fields_for :tasks, :wrapper =&amp;gt; false do |task_form| %&amp;gt;&#xA;    &amp;lt;tr class=&#34;fields&#34;&amp;gt;&#xA;      &amp;lt;td&amp;gt;&amp;lt;%= task_form.text_field :name %&amp;gt;&amp;lt;/td&amp;gt;&#xA;      &amp;lt;td&amp;gt;&amp;lt;%= task_form.link_to_remove &#34;Remove this task&#34; %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;/tr&amp;gt;&#xA;  &amp;lt;% end %&amp;gt;&#xA;&amp;lt;/table&amp;gt;&#xA;&amp;lt;p&amp;gt;&amp;lt;%= f.link_to_add &#34;Add a task&#34;, :tasks, :data =&amp;gt; { :target =&amp;gt; &#34;#tasks&#34; } %&amp;gt;&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;:data&lt;/code&gt; option above only works in Rails 3.1+. For Rails 3.0 and below, the following syntax must be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;p&amp;gt;&amp;lt;%= f.link_to_add &#34;Add a task&#34;, :tasks, &#34;data-target&#34; =&amp;gt; &#34;#tasks&#34; %&amp;gt;&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JavaScript events&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you want to do some additional work after element was added or removed, but only after DOM was &lt;em&gt;really&lt;/em&gt; modified. In this case simply listening for click events on &#39;Add new&#39;/&#39;Remove&#39; link won&#39;t reliably work, because your code and code that inserts/removes nested field will run concurrently.&lt;/p&gt; &#xA;&lt;p&gt;This problem can be solved, because after adding or removing the field a set of custom events is triggered on this field. Using form example from above, if you click on the &#34;Add a task&#34; link, &lt;code&gt;nested:fieldAdded&lt;/code&gt; and &lt;code&gt;nested:fieldAdded:tasks&lt;/code&gt; will be triggered, while &lt;code&gt;nested:fieldRemoved&lt;/code&gt; and &lt;code&gt;nested:fieldRemoved:tasks&lt;/code&gt; will be triggered if you click &#34;Remove this task&#34; then.&lt;/p&gt; &#xA;&lt;p&gt;These events bubble up the DOM tree, going through &lt;code&gt;form&lt;/code&gt; element, until they reach the &lt;code&gt;document&lt;/code&gt;. This allows you to listen for the event and trigger some action accordingly. Field element, upon which action was made, is passed along with the &lt;code&gt;event&lt;/code&gt; object. In jQuery you can access it via &lt;code&gt;event.field&lt;/code&gt;, in Prototype the same field will be in &lt;code&gt;event.memo.field&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, you have a date input in a nested field and you want to use jQuery datepicker for it. This is a bit tricky, because you have to activate datepicker after field was inserted.&lt;/p&gt; &#xA;&lt;h3&gt;jQuery&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).on(&#39;nested:fieldAdded&#39;, function(event){&#xA;  // this field was just inserted into your form&#xA;  var field = event.field;&#xA;  // it&#39;s a jQuery object already! Now you can find date input&#xA;  var dateField = field.find(&#39;.date&#39;);&#xA;  // and activate datepicker on it&#xA;  dateField.datepicker();&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prototype&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.observe(&#39;nested:fieldAdded&#39;, function(event){&#xA;  var field = event.memo.field;&#xA;  // it&#39;s already extended by Prototype&#xA;  var dateField = field.down(&#39;.date&#39;);&#xA;  dateField.datepicker();&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Second type of event (i.e. &lt;code&gt;nested:fieldAdded:tasks&lt;/code&gt;) is useful then you have more than one type of nested fields on a form (i.e. tasks and milestones) and want to distinguish, which exactly was added/deleted.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/ryanb/nested_form/wiki/How-to:-limit-max-count-of-nested-fields&#34;&gt;how to limit max count of nested fields&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Enhanced jQuery JavaScript template&lt;/h2&gt; &#xA;&lt;p&gt;You can override default behavior of inserting new subforms into your form. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;window.nestedFormEvents.insertFields = function(content, assoc, link) {&#xA;  return $(link).closest(&#39;form&#39;).find(assoc + &#39;_fields&#39;).append($(content));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have any issues with Nested Form not addressed above or in the &lt;a href=&#34;https://github.com/ryanb/complex-form-examples/tree/nested_form&#34;&gt;example project&lt;/a&gt;, please add an &lt;a href=&#34;https://github.com/ryanb/nested_form/issues&#34;&gt;issue on GitHub&lt;/a&gt; or &lt;a href=&#34;https://help.github.com/articles/fork-a-repo&#34;&gt;fork the project&lt;/a&gt; and send a &lt;a href=&#34;https://help.github.com/articles/using-pull-requests&#34;&gt;pull request&lt;/a&gt;. To run the specs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;bundle exec rake spec:install&#xA;bundle exec rake db:migrate&#xA;bundle exec rake spec:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See available rake tasks using &lt;code&gt;bundle exec rake -T&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;This gem was originally based on the solution by Tim Riley in his &lt;a href=&#34;https://github.com/timriley/complex-form-examples/tree/unobtrusive-jquery-deep-fix2&#34;&gt;complex-form-examples fork&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thank you Andrew Manshin for the Rails 3 transition, &lt;a href=&#34;https://github.com/madebydna&#34;&gt;Andrea Singh&lt;/a&gt; for converting to a gem and &lt;a href=&#34;https://github.com/pglombardo&#34;&gt;Peter Giacomo Lombardo&lt;/a&gt; for Prototype support.&lt;/p&gt; &#xA;&lt;p&gt;Andrea also wrote a great &lt;a href=&#34;http://blog.madebydna.com/all/code/2010/10/07/dynamic-nested-froms-with-the-nested-form-gem.html&#34;&gt;blog post&lt;/a&gt; on the internal workings of this gem.&lt;/p&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/fxposter&#34;&gt;Pavel Forkert&lt;/a&gt; for the SimpleForm and Formtastic support.&lt;/p&gt;</summary>
  </entry>
</feed>