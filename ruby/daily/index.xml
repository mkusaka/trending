<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-07T01:45:41Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mrsked/mrsk</title>
    <updated>2023-02-07T01:45:41Z</updated>
    <id>tag:github.com,2023-02-07:/mrsked/mrsk</id>
    <link href="https://github.com/mrsked/mrsk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deploy web apps anywhere.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MRSK&lt;/h1&gt; &#xA;&lt;p&gt;MRSK deploys web apps in containers to servers running Docker with zero downtime. It uses the dynamic reverse-proxy Traefik to hold requests while the new application container is started and the old one is stopped. It works seamlessly across multiple hosts, using SSHKit to execute commands.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install MRSK globally with &lt;code&gt;gem install mrsk&lt;/code&gt;. Then, inside your app directory, run &lt;code&gt;mrsk init&lt;/code&gt; (or &lt;code&gt;mrsk init --bundle&lt;/code&gt; within Rails apps where you want a bin/mrsk binstub). Now edit the new file &lt;code&gt;config/deploy.yml&lt;/code&gt;. It could look as simple as this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;service: hey&#xA;image: 37s/hey&#xA;servers:&#xA;  - 192.168.0.1&#xA;  - 192.168.0.2&#xA;registry:&#xA;  username: registry-user-name&#xA;  password: &amp;lt;%= ENV.fetch(&#34;MRSK_REGISTRY_PASSWORD&#34;) %&amp;gt;&#xA;env:&#xA;  secret:&#xA;    - RAILS_MASTER_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then edit your &lt;code&gt;.env&lt;/code&gt; file to add your registry password as &lt;code&gt;MRSK_REGISTRY_PASSWORD&lt;/code&gt; (and your &lt;code&gt;RAILS_MASTER_KEY&lt;/code&gt; for production with a Rails app).&lt;/p&gt; &#xA;&lt;p&gt;Now you&#39;re ready to deploy to the servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mrsk deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect to the servers over SSH (using root by default, authenticated by your loaded ssh key)&lt;/li&gt; &#xA; &lt;li&gt;Install Docker on any server that might be missing it (using apt-get)&lt;/li&gt; &#xA; &lt;li&gt;Log into the registry both locally and remotely&lt;/li&gt; &#xA; &lt;li&gt;Build the image using the standard Dockerfile in the root of the application.&lt;/li&gt; &#xA; &lt;li&gt;Push the image to the registry.&lt;/li&gt; &#xA; &lt;li&gt;Pull the image from the registry on the servers.&lt;/li&gt; &#xA; &lt;li&gt;Ensure Traefik is running and accepting traffic on port 80.&lt;/li&gt; &#xA; &lt;li&gt;Stop any containers running a previous versions of the app.&lt;/li&gt; &#xA; &lt;li&gt;Start a new container with the version of the app that matches the current git version hash.&lt;/li&gt; &#xA; &lt;li&gt;Prune unused images and stopped containers to ensure servers don&#39;t fill up.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Voila! All the servers are now serving the app on port 80. If you&#39;re just running a single server, you&#39;re ready to go. If you&#39;re running multiple servers, you need to put a load balancer in front of them.&lt;/p&gt; &#xA;&lt;h2&gt;Why not just run Capistrano or Kubernetes?&lt;/h2&gt; &#xA;&lt;p&gt;MRSK basically is Capistrano for Containers, which allow us to use vanilla servers as the hosts. No need to ensure that the servers have just the right version of Ruby or other dependencies you need. That all lives in the Docker image now. You can boot a brand new Ubuntu (or whatever) server, add it to the deploy servers of MRSK, and it&#39;ll be auto-provisioned with Docker, and run right away. Docker&#39;s layer caching also allows for quicker deployments with less mucking about on the server. And the images built for MRSK can be used for CI or later introspection.&lt;/p&gt; &#xA;&lt;p&gt;Kubernetes is a beast. Running it yourself on your own hardware is not for the faint of heart. It&#39;s a fine option if you want to run on someone else&#39;s platform, like Render or Fly, but if you&#39;d like the freedom to move between cloud and your own hardware, or even mix the two, MRSK is much simpler. You can see everything that&#39;s going on, it&#39;s just basic Docker commands being called.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Using .env file to load required environment variables&lt;/h3&gt; &#xA;&lt;p&gt;MRSK uses &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;dotenv&lt;/a&gt; to automatically load environment variables set in the &lt;code&gt;.env&lt;/code&gt; file present in the application root. This file can be used to set variables like &lt;code&gt;MRSK_REGISTRY_PASSWORD&lt;/code&gt; or database passwords. But for this reason you must ensure that .env files are not checked into Git or included in your Dockerfile! The format is just key-value like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;MRSK_REGISTRY_PASSWORD=pw&#xA;DB_PASSWORD=secret123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using another registry than Docker Hub&lt;/h3&gt; &#xA;&lt;p&gt;The default registry is Docker Hub, but you can change it using &lt;code&gt;registry/server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;registry:&#xA;  server: registry.digitalocean.com&#xA;  username: registry-user-name&#xA;  password: &amp;lt;%= ENV.fetch(&#34;MRSK_REGISTRY_PASSWORD&#34;) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a different SSH user than root&lt;/h3&gt; &#xA;&lt;p&gt;The default SSH user is root, but you can change it using &lt;code&gt;ssh/user&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  user: app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a proxy SSH host&lt;/h3&gt; &#xA;&lt;p&gt;If you need to connect to server through a proxy host, you can use &lt;code&gt;ssh/proxy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  proxy: &#34;192.168.0.1&#34; # defaults to root as the user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with specific user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  proxy: &#34;app@192.168.0.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using env variables&lt;/h3&gt; &#xA;&lt;p&gt;You can inject env variables into the app containers using &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  DATABASE_URL: mysql2://db1/hey_production/&#xA;  REDIS_URL: redis://redis1:6379/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using secret env variables&lt;/h3&gt; &#xA;&lt;p&gt;If you have env variables that are secret, you can divide the &lt;code&gt;env&lt;/code&gt; block into &lt;code&gt;clear&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  clear:&#xA;    DATABASE_URL: mysql2://db1/hey_production/&#xA;    REDIS_URL: redis://redis1:6379/1&#xA;  secret:&#xA;    - DATABASE_PASSWORD&#xA;    - REDIS_PASSWORD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The list of secret env variables will be expanded at run time from your local machine. So a reference to a secret &lt;code&gt;DATABASE_PASSWORD&lt;/code&gt; will look for &lt;code&gt;ENV[&#34;DATABASE_PASSWORD&#34;]&lt;/code&gt; on the machine running MRSK. Just like with build secrets.&lt;/p&gt; &#xA;&lt;p&gt;If the referenced secret ENVs are missing, the configuration will be halted with a &lt;code&gt;KeyError&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;p&gt;Note: Marking an ENV as secret currently only redacts its value in the output for MRSK. The ENV is still injected in the clear into the container at runtime.&lt;/p&gt; &#xA;&lt;h3&gt;Using volumes&lt;/h3&gt; &#xA;&lt;p&gt;You can add custom volumes into the app containers using &lt;code&gt;volumes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;volumes:&#xA;  - &#34;/local/path:/container/path&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using different roles for servers&lt;/h3&gt; &#xA;&lt;p&gt;If your application uses separate hosts for running jobs or other roles beyond the default web running, you can specify these hosts in a dedicated role with a new entrypoint command like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  job:&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;    cmd: bin/jobs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Traefik will only by default be installed and run on the servers in the &lt;code&gt;web&lt;/code&gt; role (and on all servers if no roles are defined). If you need Traefik on hosts in other roles than &lt;code&gt;web&lt;/code&gt;, add &lt;code&gt;traefik: true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  web2:&#xA;    traefik: true&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using container labels&lt;/h3&gt; &#xA;&lt;p&gt;You can specialize the default Traefik rules by setting labels on the containers that are being started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;labels:&#xA;  traefik.http.routers.hey.rule: &#39;&#39;&#39;Host(`app.hey.com`)&#39;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The extra quotes are needed to ensure the rule is passed in correctly!&lt;/p&gt; &#xA;&lt;p&gt;This allows you to run multiple applications on the same server sharing the same Traefik instance and port. See &lt;a href=&#34;https://doc.traefik.io/traefik/routing/routers/#rule&#34;&gt;https://doc.traefik.io/traefik/routing/routers/#rule&lt;/a&gt; for a full list of available routing rules.&lt;/p&gt; &#xA;&lt;p&gt;The labels can also be applied on a per-role basis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  job:&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;    cmd: bin/jobs&#xA;    labels:&#xA;      my-label: &#34;50&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using remote builder for native multi-arch&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on ARM64 (like Apple Silicon), but you want to deploy on AMD64 (x86 64-bit), you can use multi-archecture images. By default, MRSK will setup a local buildx configuration that does this through QEMU emulation. But this can be quite slow, especially on the first build.&lt;/p&gt; &#xA;&lt;p&gt;If you want to speed up this process by using a remote AMD64 host to natively build the AMD64 part of the image, while natively building the ARM64 part locally, you can do so using builder options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  local:&#xA;    arch: arm64&#xA;    host: unix:///Users/&amp;lt;%= `whoami`.strip %&amp;gt;/.docker/run/docker.sock&#xA;  remote:&#xA;    arch: amd64&#xA;    host: ssh://root@192.168.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: You must have Docker running on the remote host being used as a builder. This instance should only be shared for builds using the same registry and credentials.&lt;/p&gt; &#xA;&lt;h3&gt;Using remote builder for single-arch&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on ARM64 (like Apple Silicon), want to deploy on AMD64 (x86 64-bit), but don&#39;t need to run the image locally (or on other ARM64 hosts), you can configure a remote builder that just targets AMD64. This is a bit faster than building with multi-arch, as there&#39;s nothing to build locally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  remote:&#xA;    arch: amd64&#xA;    host: ssh://root@192.168.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using native builder when multi-arch isn&#39;t needed&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on the same architecture as the one you&#39;re deploying on, you can speed up the build by forgoing both multi-arch and remote building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  multiarch: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is also a good option if you&#39;re running MRSK from a CI server that shares architecture with the deployment servers.&lt;/p&gt; &#xA;&lt;h3&gt;Using build secrets for new images&lt;/h3&gt; &#xA;&lt;p&gt;Some images need a secret passed in during build time, like a GITHUB_TOKEN to give access to private gem repositories. This can be done by having the secret in ENV, then referencing it in the builder configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  secrets:&#xA;    - GITHUB_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This build secret can then be referenced in the Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Copy Gemfiles&#xA;COPY Gemfile Gemfile.lock ./&#xA;&#xA;# Install dependencies, including private repositories via access token&#xA;RUN --mount=type=secret,id=GITHUB_TOKEN \&#xA;  BUNDLE_GITHUB__COM=x-access-token:$(cat /run/secrets/GITHUB_TOKEN) \&#xA;  bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using command arguments for Traefik&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the traefik command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;traefik:&#xA;  accesslog: true&#xA;  accesslog.format: json&#xA;  metrics.prometheus: true&#xA;  metrics.prometheus.buckets: 0.1,0.3,1.2,5.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring build args for new images&lt;/h3&gt; &#xA;&lt;p&gt;Build arguments that aren&#39;t secret can also be configured:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  args:&#xA;    RUBY_VERSION: 3.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This build argument can then be used in the Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Private repositories need an access token during the build&#xA;ARG RUBY_VERSION&#xA;FROM ruby:$RUBY_VERSION-slim as base&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using accessories for database, cache, search services&lt;/h3&gt; &#xA;&lt;p&gt;You can manage your accessory services via MRSK as well. The services will build off public images, and will not be automatically updated when you deploy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;accessories:&#xA;  mysql:&#xA;    image: mysql:5.7&#xA;    host: 1.1.1.3&#xA;    port: 3306&#xA;    env:&#xA;      clear:&#xA;        MYSQL_ROOT_HOST: &#39;%&#39;&#xA;      secret:&#xA;        - MYSQL_ROOT_PASSWORD&#xA;    volumes:&#xA;      - /var/lib/mysql:/var/lib/mysql&#xA;  redis:&#xA;    image: redis:latest&#xA;    host: 1.1.1.4&#xA;    port: &#34;36379:6379&#34;&#xA;    volumes:&#xA;      - /var/lib/redis:/data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run &lt;code&gt;mrsk accessory start mysql&lt;/code&gt; to start the MySQL server on 1.1.1.3. See &lt;code&gt;mrsk accessory&lt;/code&gt; for all the commands possible.&lt;/p&gt; &#xA;&lt;h3&gt;Using a generated .env file&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using a centralized secret store, like 1Password, you can create &lt;code&gt;.env.erb&lt;/code&gt; as a template which looks up the secrets. Example of a .env.erb file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;% if (session_token = `op signin --account my-one-password-account --raw`.strip) != &#34;&#34; %&amp;gt;# Generated by mrsk envify&#xA;GITHUB_TOKEN=&amp;lt;%= `gh config get -h github.com oauth_token`.strip %&amp;gt;&#xA;MRSK_REGISTRY_PASSWORD=&amp;lt;%= `op read &#34;op://Vault/Docker Hub/password&#34; -n --session  #{session_token}` %&amp;gt;&#xA;RAILS_MASTER_KEY=&amp;lt;%= `op read &#34;op://Vault/My App/RAILS_MASTER_SECRET&#34; -n --session #{session_token}` %&amp;gt;&#xA;MYSQL_ROOT_PASSWORD=&amp;lt;%= `op read &#34;op://Vault/My App/MYSQL_ROOT_PASSWORD&#34; -n --session #{session_token}` %&amp;gt;&#xA;&amp;lt;% else raise ArgumentError, &#34;Session token missing&#34; end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This template can safely be checked into git. Then everyone deploying the app can run &lt;code&gt;mrsk envify&lt;/code&gt; when they setup the app for the first time or passwords change to get the correct &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you need separate env variables for different destinations, you can set them with &lt;code&gt;.env.destination.erb&lt;/code&gt; for the template, which will generate &lt;code&gt;.env.staging&lt;/code&gt; when run with &lt;code&gt;mrsk envify -d staging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Running commands on servers&lt;/h3&gt; &#xA;&lt;p&gt;You can execute one-off commands on the servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Runs command on all servers&#xA;mrsk app exec &#39;ruby -v&#39;&#xA;App Host: 192.168.0.1&#xA;ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;&#xA;App Host: 192.168.0.2&#xA;ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;&#xA;# Runs command on primary server&#xA;mrsk app exec --primary &#39;cat .ruby-version&#39;&#xA;App Host: 192.168.0.1&#xA;3.1.3&#xA;&#xA;# Runs Rails command on all servers&#xA;mrsk app exec &#39;bin/rails about&#39;&#xA;App Host: 192.168.0.1&#xA;About your application&#39;s environment&#xA;Rails version             7.1.0.alpha&#xA;Ruby version              ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;RubyGems version          3.3.26&#xA;Rack version              2.2.5&#xA;Middleware                ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::Callbacks, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper&#xA;Application root          /rails&#xA;Environment               production&#xA;Database adapter          sqlite3&#xA;Database schema version   20221231233303&#xA;&#xA;App Host: 192.168.0.2&#xA;About your application&#39;s environment&#xA;Rails version             7.1.0.alpha&#xA;Ruby version              ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;RubyGems version          3.3.26&#xA;Rack version              2.2.5&#xA;Middleware                ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::Callbacks, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper&#xA;Application root          /rails&#xA;Environment               production&#xA;Database adapter          sqlite3&#xA;Database schema version   20221231233303&#xA;&#xA;# Run Rails runner on primary server&#xA;mrsk app exec -p &#39;bin/rails runner &#34;puts Rails.application.config.time_zone&#34;&#39;&#xA;UTC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running interactive commands over SSH&lt;/h3&gt; &#xA;&lt;p&gt;You can run interactive commands, like a Rails console or a bash session, on a server (default is primary, use &lt;code&gt;--hosts&lt;/code&gt; to connect to another):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Starts a bash session in a new container made from the most recent app image&#xA;mrsk app exec -i bash&#xA;&#xA;# Starts a bash session in the currently running container for the app&#xA;mrsk app exec -i --reuse bash&#xA;&#xA;# Starts a Rails console in a new container made from the most recent app image&#xA;mrsk app exec -i &#39;bin/rails console&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running details to see state of containers&lt;/h3&gt; &#xA;&lt;p&gt;You can see the state of your servers by running &lt;code&gt;mrsk details&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Traefik Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMES&#xA;6195b2a28c81   traefik   &#34;/entrypoint.sh --pr…&#34;   30 minutes ago   Up 19 minutes   0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp   traefik&#xA;&#xA;Traefik Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMES&#xA;de14a335d152   traefik   &#34;/entrypoint.sh --pr…&#34;   30 minutes ago   Up 19 minutes   0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp   traefik&#xA;&#xA;App Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS          PORTS      NAMES&#xA;badb1aa51db3   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   13 minutes ago   Up 13 minutes   3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;&#xA;App Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS          PORTS      NAMES&#xA;1d3c91ed1f55   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   13 minutes ago   Up 13 minutes   3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also see just info for app containers with &lt;code&gt;mrsk app details&lt;/code&gt; or just for Traefik with &lt;code&gt;mrsk traefik details&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running rollback to fix a bad deploy&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve discovered a bad deploy, you can quickly rollback by reactivating the old, paused container image. You can see what old containers are available for rollback by running &lt;code&gt;mrsk app containers&lt;/code&gt;. It&#39;ll give you a presentation similar to &lt;code&gt;mrsk app details&lt;/code&gt;, but include all the old containers as well. Showing something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;App Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS                      PORTS      NAMES&#xA;1d3c91ed1f51   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   19 minutes ago   Up 19 minutes               3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;539f26b28369   registry.digitalocean.com/user/app:e5d9d7c2b898289dfbc5f7f1334140d984eedae4   &#34;/rails/bin/docker-e…&#34;   31 minutes ago   Exited (1) 27 minutes ago              chat-e5d9d7c2b898289dfbc5f7f1334140d984eedae4&#xA;&#xA;App Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS                      PORTS      NAMES&#xA;badb1aa51db4   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   19 minutes ago   Up 19 minutes               3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;6f170d1172ae   registry.digitalocean.com/user/app:e5d9d7c2b898289dfbc5f7f1334140d984eedae4   &#34;/rails/bin/docker-e…&#34;   31 minutes ago   Exited (1) 27 minutes ago              chat-e5d9d7c2b898289dfbc5f7f1334140d984eedae4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the example above, we can see that &lt;code&gt;e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt; was the last version, so it&#39;s available as a rollback target. We can perform this rollback by running &lt;code&gt;mrsk rollback e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt;. That&#39;ll stop &lt;code&gt;6ef8a6a84c525b123c5245345a8483f86d05a123&lt;/code&gt; and then start &lt;code&gt;e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt;. Because the old container is still available, this is very quick. Nothing to download from the registry.&lt;/p&gt; &#xA;&lt;p&gt;Note that by default old containers are pruned after 3 days when you run &lt;code&gt;mrsk deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running removal to clean up servers&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to remove the entire application, including Traefik, containers, images, and registry session, you can run &lt;code&gt;mrsk remove&lt;/code&gt;. This will leave the servers clean.&lt;/p&gt; &#xA;&lt;h2&gt;Stage of development&lt;/h2&gt; &#xA;&lt;p&gt;This is alpha software. Lots of stuff is missing. Lots of stuff will keep moving around for a while.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MRSK is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>solidusio/solidus_i18n</title>
    <updated>2023-02-07T01:45:41Z</updated>
    <id>tag:github.com,2023-02-07:/solidusio/solidus_i18n</id>
    <link href="https://github.com/solidusio/solidus_i18n" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌏 This is the Internationalization project for Solidus&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Solidus Internationalization&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/solidusio/solidus_i18n&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/solidusio/solidus_i18n.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/solidusio/solidus_i18n&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/solidusio/solidus_i18n/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/solidus_i18n&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/solidus_i18n.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the Internationalization project for &lt;a href=&#34;https://solidus.io&#34;&gt;Solidus&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Changes in Version 2.0&lt;/h2&gt; &#xA;&lt;p&gt;solidus_i18n Version 2.0+ only contains translation files.&lt;/p&gt; &#xA;&lt;p&gt;Previous versions of solidus_i18n included extra functionality like locale selectors and which is now built in to Solidus 2.6+. Configuration for &lt;code&gt;routing-filter&lt;/code&gt; has also been removed and must be configured manually (See &lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus_i18n/master/#locale-in-url&#34;&gt;Locale in URL&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;solidus_i18n&#39;, &#39;~&amp;gt; 2.0&#39;&#xA;gem &#39;rails-i18n&#39;, &#39;~&amp;gt; 5.1&#39;&#xA;gem &#39;kaminari-i18n&#39;, &#39;~&amp;gt; 0.5.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Locale in URL&lt;/h2&gt; &#xA;&lt;p&gt;Older versions of solidus_i18n included the routing-filter gem and configured routes to include the locale in the URL. This is still supported (maybe even recommended) but requires some additional configuration.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add this gem to your &lt;code&gt;Gemfile&lt;/code&gt;, then run &lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;routing-filter&#39;, &#39;~&amp;gt; 0.6.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;code&gt;filter :locale&lt;/code&gt; to your &lt;code&gt;config/routes.rb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.routes.draw do&#xA;  filter :locale&#xA;&#xA;  mount Spree::Core::Engine, at: &#39;/&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Configure routing-fitler in &lt;code&gt;config/initializers/locale_filter.rb&lt;/code&gt; (optional)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Do not include the default locale in the URL&#xA;RoutingFilter::Locale.include_default_locale = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;p&gt;We currently support the &lt;a href=&#34;https://github.com/solidusio/solidus_i18n/tree/master/config/locales&#34;&gt;following locales&lt;/a&gt; by default. If you need a locale that is not in the list you can add a custom translation file into your application by following the &lt;a href=&#34;http://guides.rubyonrails.org/i18n.html#how-to-store-your-custom-translations&#34;&gt;Rails translations guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Updating Translations&lt;/h2&gt; &#xA;&lt;p&gt;If you want to improve the translations on your language, run the tasks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec rake solidus_i18n:update_default&#xA;bundle exec i18n-tasks add-missing --nil-value --locale &amp;lt;LOCALE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Substitute &#xA; &lt;locale&gt;&#xA;   with your locale code (e.g: &#xA;  &lt;code&gt;it&lt;/code&gt;).&#xA; &lt;/locale&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will do a cleanup and prepare &lt;code&gt;&amp;lt;LOCALE&amp;gt;.yml&lt;/code&gt; with all the missing keys. You can then write the translations and open a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Model Translations&lt;/h2&gt; &#xA;&lt;p&gt;We &lt;strong&gt;removed&lt;/strong&gt; support for translating models into &lt;a href=&#34;https://github.com/solidusio-contrib/solidus_globalize&#34;&gt;a separate Gem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please update your &lt;code&gt;Gemfile&lt;/code&gt; if you still need the model translations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile&#xA;gem &#39;solidus_globalize&#39;, github: &#39;solidusio-contrib/solidus_globalize&#39;, branch: &#39;master&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Localizing country names&lt;/h2&gt; &#xA;&lt;p&gt;You can translate country names by defining &lt;code&gt;spree.country_names&lt;/code&gt; in your own locale files. For example, to have countries in Spanish do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;es:&#xA;  spree:&#xA;    country_names:&#xA;      US: Estados Unidos de América&#xA;      UK: Reino Unido&#xA;      CA: Canadá&#xA;      # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some supported languages already define localized country names. Take a look at this repo&#39;s &lt;code&gt;.yml&lt;/code&gt; files for your locale to confirm if we already provide translations.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Solidus is an open source project and we encourage contributions. Please read &lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus_i18n/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before contributing.&lt;/p&gt;</summary>
  </entry>
</feed>