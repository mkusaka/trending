<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-29T01:32:54Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thoughtbot/paperclip</title>
    <updated>2022-07-29T01:32:54Z</updated>
    <id>tag:github.com,2022-07-29:/thoughtbot/paperclip</id>
    <link href="https://github.com/thoughtbot/paperclip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy file attachment management for ActiveRecord&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Paperclip&lt;/h1&gt; &#xA;&lt;h1&gt;Deprecated&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://robots.thoughtbot.com/closing-the-trombone&#34;&gt;Paperclip is deprecated&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For new projects, we recommend Rails&#39; own &lt;a href=&#34;http://guides.rubyonrails.org/active_storage_overview.html&#34;&gt;ActiveStorage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For existing projects, please consult and contribute to the migration guide, available &lt;a href=&#34;https://github.com/thoughtbot/paperclip/raw/master/MIGRATING.md&#34;&gt;in English&lt;/a&gt;, &lt;a href=&#34;https://github.com/thoughtbot/paperclip/raw/master/MIGRATING-ES.md&#34;&gt;en espa√±ol&lt;/a&gt;, and as &lt;a href=&#34;https://www.youtube.com/watch?v=tZ_WNUytO9o&#34;&gt;a video&lt;/a&gt; recorded at RailsConf 2019. You may also prefer &lt;a href=&#34;https://www.tokyodev.com/2021/03/23/paperclip-activestorage/&#34;&gt;an alternative migration tutorial used by Doorkeeper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, for existing projects, &lt;a href=&#34;https://www.kreeti.com/&#34;&gt;Kreeti&lt;/a&gt; is maintaining &lt;a href=&#34;https://rubygems.org/gems/kt-paperclip&#34;&gt;kt-paperclip&lt;/a&gt;, an ongoing &lt;a href=&#34;https://github.com/kreeti/kt-paperclip&#34;&gt;fork of Paperclip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We will leave the Issues open as a discussion forum &lt;em&gt;only&lt;/em&gt;. We do &lt;em&gt;not&lt;/em&gt; guarantee a response from us in the Issues. All bug reports should go to kt-paperclip.&lt;/p&gt; &#xA;&lt;p&gt;We are no longer accepting pull requests &lt;em&gt;except&lt;/em&gt; pull requests against the migration guide. All other pull requests will be closed without merging.&lt;/p&gt; &#xA;&lt;h1&gt;Existing documentation&lt;/h1&gt; &#xA;&lt;h2&gt;Documentation valid for &lt;code&gt;master&lt;/code&gt; branch&lt;/h2&gt; &#xA;&lt;p&gt;Please check the documentation for the paperclip version you are using: &lt;a href=&#34;https://github.com/thoughtbot/paperclip/releases&#34;&gt;https://github.com/thoughtbot/paperclip/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/thoughtbot/paperclip&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/thoughtbot/paperclip.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gemnasium.com/thoughtbot/paperclip&#34;&gt;&lt;img src=&#34;https://gemnasium.com/thoughtbot/paperclip.svg?travis&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/thoughtbot/paperclip&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/thoughtbot/paperclip.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/thoughtbot/paperclip&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/thoughtbot/paperclip.svg?sanitize=true&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hakiri.io/github/thoughtbot/paperclip/master&#34;&gt;&lt;img src=&#34;https://hakiri.io/github/thoughtbot/paperclip/master.svg?sanitize=true&#34; alt=&#34;Security&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#requirements&#34;&gt;Requirements&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#ruby-and-rails&#34;&gt;Ruby and Rails&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#image-processor&#34;&gt;Image Processor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#file&#34;&gt;&lt;code&gt;file&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#models&#34;&gt;Models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#migrations&#34;&gt;Migrations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#edit-and-new-views&#34;&gt;Edit and New Views&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#edit-and-new-views-with-simple-form&#34;&gt;Edit and New Views with Simple Form&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#controller&#34;&gt;Controller&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#view-helpers&#34;&gt;View Helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#checking-a-file-exists&#34;&gt;Checking a File Exists&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#deleting-an-attachment&#34;&gt;Deleting an Attachment&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#validations&#34;&gt;Validations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#internationalization-i18n&#34;&gt;Internationalization (I18n)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#security-validations&#34;&gt;Security Validations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#defaults&#34;&gt;Defaults&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#migrations-1&#34;&gt;Migrations&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#add-attachment-column-to-a-table&#34;&gt;Add Attachment Column To A Table&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#schema-definition&#34;&gt;Schema Definition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#vintage-syntax&#34;&gt;Vintage Syntax&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#storage&#34;&gt;Storage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#understanding-storage&#34;&gt;Understanding Storage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#io-adapters&#34;&gt;IO Adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#post-processing&#34;&gt;Post Processing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#custom-attachment-processors&#34;&gt;Custom Attachment Processors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#events&#34;&gt;Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#uri-obfuscation&#34;&gt;URI Obfuscation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#checksum--fingerprint&#34;&gt;Checksum / Fingerprint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#file-preservation-for-soft-delete&#34;&gt;File Preservation for Soft-Delete&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#dynamic-configuration&#34;&gt;Dynamic Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#dynamic-styles&#34;&gt;Dynamic Styles:&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#dynamic-processors&#34;&gt;Dynamic Processors:&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#deployment&#34;&gt;Deployment&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#attachment-styles&#34;&gt;Attachment Styles&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/#about-thoughtbot&#34;&gt;About thoughtbot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;p&gt;Paperclip is intended as an easy file attachment library for ActiveRecord. The intent behind it was to keep setup as easy as possible and to treat files as much like other attributes as possible. This means they aren&#39;t saved to their final locations on disk, nor are they deleted if set to nil, until ActiveRecord::Base#save is called. It manages validations based on size and presence, if required. It can transform its assigned image into thumbnails if needed, and the prerequisites are as simple as installing ImageMagick (which, for most modern Unix-based systems, is as easy as installing the right packages). Attached files are saved to the filesystem and referenced in the browser by an easily understandable specification, which has sensible and useful defaults.&lt;/p&gt; &#xA;&lt;p&gt;See the documentation for &lt;code&gt;has_attached_file&lt;/code&gt; in &lt;a href=&#34;http://www.rubydoc.info/gems/paperclip/Paperclip/ClassMethods&#34;&gt;&lt;code&gt;Paperclip::ClassMethods&lt;/code&gt;&lt;/a&gt; for more detailed options.&lt;/p&gt; &#xA;&lt;p&gt;The complete &lt;a href=&#34;http://www.rubydoc.info/gems/paperclip&#34;&gt;RDoc&lt;/a&gt; is online.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Ruby and Rails&lt;/h3&gt; &#xA;&lt;p&gt;Paperclip now requires Ruby version &lt;strong&gt;&amp;gt;= 2.1&lt;/strong&gt; and Rails version &lt;strong&gt;&amp;gt;= 4.2&lt;/strong&gt; (only if you&#39;re going to use Paperclip with Ruby on Rails).&lt;/p&gt; &#xA;&lt;h3&gt;Image Processor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.imagemagick.org&#34;&gt;ImageMagick&lt;/a&gt; must be installed and Paperclip must have access to it. To ensure that it does, on your command line, run &lt;code&gt;which convert&lt;/code&gt; (one of the ImageMagick utilities). This will give you the path where that utility is installed. For example, it might return &lt;code&gt;/usr/local/bin/convert&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, in your environment config file, let Paperclip know to look there by adding that directory to its path.&lt;/p&gt; &#xA;&lt;p&gt;In development mode, you might add this line to &lt;code&gt;config/environments/development.rb)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Paperclip.options[:command_path] = &#34;/usr/local/bin/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re on Mac OS X, you&#39;ll want to run the following with &lt;a href=&#34;http://www.brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install imagemagick&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are dealing with pdf uploads or running the test suite, you&#39;ll also need to install GhostScript. On Mac OS X, you can also install that using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install gs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are on Ubuntu (or any Debian base Linux distribution), you&#39;ll want to run the following with apt-get:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install imagemagick -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;file&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The Unix &lt;a href=&#34;https://en.wikipedia.org/wiki/File_(command)&#34;&gt;&lt;code&gt;file&lt;/code&gt; command&lt;/a&gt; is required for content-type checking. This utility isn&#39;t available in Windows, but comes bundled with Ruby &lt;a href=&#34;https://github.com/oneclick/rubyinstaller/wiki/Development-Kit&#34;&gt;Devkit&lt;/a&gt;, so Windows users must make sure that the devkit is installed and added to the system &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Manual Installation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Windows 7+ as a development environment, you may need to install the &lt;code&gt;file.exe&lt;/code&gt; application manually. The &lt;code&gt;file spoofing&lt;/code&gt; system in Paperclip 4+ relies on this; if you don&#39;t have it working, you&#39;ll receive &lt;code&gt;Validation failed: Upload file has an extension that does not match its contents.&lt;/code&gt; errors.&lt;/p&gt; &#xA;&lt;p&gt;To manually install, you should perform the following:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Download &amp;amp; install &lt;code&gt;file&lt;/code&gt; from &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/file.htm&#34;&gt;this URL&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To test, you can use the image below: &lt;img src=&#34;https://cloud.githubusercontent.com/assets/1104431/4524452/a1f8cce4-4d44-11e4-872e-17adb96f79c9.png&#34; alt=&#34;untitled&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next, you need to integrate with your environment - preferably through the &lt;code&gt;PATH&lt;/code&gt; variable, or by changing your &lt;code&gt;config/environments/development.rb&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PATH&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Click &#34;Start&#34;&#xA;2. On &#34;Computer&#34;, right-click and select &#34;Properties&#34;&#xA;3. In Properties, select &#34;Advanced System Settings&#34;&#xA;4. Click the &#34;Environment Variables&#34; button&#xA;5. Locate the &#34;PATH&#34; var - at the end, add the path to your newly installed `file.exe` (typically `C:\Program Files (x86)\GnuWin32\bin`)&#xA;6. Restart any CMD shells you have open &amp;amp; see if it works&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Environment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Open `config/environments/development.rb`&#xA;2. Add the following line: `Paperclip.options[:command_path] = &#39;C:\Program Files (x86)\GnuWin32\bin&#39;`&#xA;3. Restart your Rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Either of these methods will give your Rails setup access to the &lt;code&gt;file.exe&lt;/code&gt; functionality, thus providing the ability to check the contents of a file (fixing the spoofing problem)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Paperclip is distributed as a gem, which is how it should be used in your app.&lt;/p&gt; &#xA;&lt;p&gt;Include the gem in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;paperclip&#34;, &#34;~&amp;gt; 6.0.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you want to get the latest, you can get master from the main paperclip repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;paperclip&#34;, git: &#34;git://github.com/thoughtbot/paperclip.git&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re trying to use features that don&#39;t seem to be in the latest released gem, but are mentioned in this README, then you probably need to specify the master branch if you want to use them. This README is probably ahead of the latest released version if you&#39;re reading it on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;For Non-Rails usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ModuleName &amp;lt; ActiveRecord::Base&#xA;  include Paperclip::Glue&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  has_attached_file :avatar, styles: { medium: &#34;300x300&amp;gt;&#34;, thumb: &#34;100x100&amp;gt;&#34; }, default_url: &#34;/images/:style/missing.png&#34;&#xA;  validates_attachment_content_type :avatar, content_type: /\Aimage\/.*\z/&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Migrations&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you have a &lt;code&gt;users&lt;/code&gt; table, add an &lt;code&gt;avatar&lt;/code&gt; column to the &lt;code&gt;users&lt;/code&gt; table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddAvatarColumnsToUsers &amp;lt; ActiveRecord::Migration&#xA;  def up&#xA;    add_attachment :users, :avatar&#xA;  end&#xA;&#xA;  def down&#xA;    remove_attachment :users, :avatar&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Or you can use the Rails migration generator: &lt;code&gt;rails generate paperclip user avatar&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Edit and New Views&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have corresponding methods in your controller:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= form_for @user, url: users_path, html: { multipart: true } do |form| %&amp;gt;&#xA;  &amp;lt;%= form.file_field :avatar %&amp;gt;&#xA;  &amp;lt;%= form.submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edit and New Views with &lt;a href=&#34;https://github.com/plataformatec/simple_form&#34;&gt;Simple Form&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user, url: users_path do |form| %&amp;gt;&#xA;  &amp;lt;%= form.input :avatar, as: :file %&amp;gt;&#xA;  &amp;lt;%= form.submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Controller&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def create&#xA;  @user = User.create(user_params)&#xA;end&#xA;&#xA;private&#xA;&#xA;# Use strong_parameters for attribute whitelisting&#xA;# Be sure to update your create() and update() controller methods.&#xA;&#xA;def user_params&#xA;  params.require(:user).permit(:avatar)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View Helpers&lt;/h3&gt; &#xA;&lt;p&gt;Add these to the view where you want your images displayed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= image_tag @user.avatar.url %&amp;gt;&#xA;&amp;lt;%= image_tag @user.avatar.url(:medium) %&amp;gt;&#xA;&amp;lt;%= image_tag @user.avatar.url(:thumb) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking a File Exists&lt;/h3&gt; &#xA;&lt;p&gt;There are two methods for checking if a file exists:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;file?&lt;/code&gt; and &lt;code&gt;present?&lt;/code&gt; checks if the &lt;code&gt;_file_name&lt;/code&gt; field is populated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exists?&lt;/code&gt; checks if the file exists (will perform a TCP connection if stored in the cloud)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Keep this in mind if you are checking if files are present in a loop. The first version is significantly more performant, but has different semantics.&lt;/p&gt; &#xA;&lt;h3&gt;Deleting an Attachment&lt;/h3&gt; &#xA;&lt;p&gt;Set the attribute to &lt;code&gt;nil&lt;/code&gt; and save.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@user.avatar = nil&#xA;@user.save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The basics of Paperclip are quite simple: Declare that your model has an attachment with the &lt;code&gt;has_attached_file&lt;/code&gt; method, and give it a name.&lt;/p&gt; &#xA;&lt;p&gt;Paperclip will wrap up to four attributes (all prefixed with that attachment&#39;s name, so you can have multiple attachments per model if you wish) and give them a friendly front end. These attributes are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;attachment&amp;gt;_file_name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;attachment&amp;gt;_file_size&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;attachment&amp;gt;_content_type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;attachment&amp;gt;_updated_at&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, only &lt;code&gt;&amp;lt;attachment&amp;gt;_file_name&lt;/code&gt; is required for Paperclip to operate. You&#39;ll need to add &lt;code&gt;&amp;lt;attachment&amp;gt;_content_type&lt;/code&gt; in case you want to use content type validation.&lt;/p&gt; &#xA;&lt;p&gt;More information about the options passed to &lt;code&gt;has_attached_file&lt;/code&gt; is available in the documentation of &lt;a href=&#34;http://www.rubydoc.info/gems/paperclip/Paperclip/ClassMethods&#34;&gt;&lt;code&gt;Paperclip::ClassMethods&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Validations&lt;/h2&gt; &#xA;&lt;p&gt;For validations, Paperclip introduces several validators to validate your attachment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AttachmentContentTypeValidator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AttachmentPresenceValidator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AttachmentSizeValidator&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;validates :avatar, attachment_presence: true&#xA;validates_with AttachmentPresenceValidator, attributes: :avatar&#xA;validates_with AttachmentSizeValidator, attributes: :avatar, less_than: 1.megabytes&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Validators can also be defined using the old helper style:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;validates_attachment_presence&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;validates_attachment_content_type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;validates_attachment_size&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;validates_attachment_presence :avatar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, you can also define multiple validations on a single attachment using &lt;code&gt;validates_attachment&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;validates_attachment :avatar, presence: true,&#xA;  content_type: &#34;image/jpeg&#34;,&#xA;  size: { in: 0..10.kilobytes }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: Post-processing will not even &lt;strong&gt;start&lt;/strong&gt; if the attachment is not valid according to the validations. Your callbacks and processors will &lt;strong&gt;only&lt;/strong&gt; be called with valid attachments.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Message &amp;lt; ActiveRecord::Base&#xA;  has_attached_file :asset, styles: { thumb: &#34;100x100#&#34; }&#xA;&#xA;  before_post_process :skip_for_audio&#xA;&#xA;  def skip_for_audio&#xA;    ! %w(audio/ogg application/ogg).include?(asset_content_type)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have other validations that depend on assignment order, the recommended course of action is to prevent the assignment of the attachment until afterwards, then assign manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Book &amp;lt; ActiveRecord::Base&#xA;  has_attached_file :document, styles: { thumbnail: &#34;60x60#&#34; }&#xA;  validates_attachment :document, content_type: &#34;application/pdf&#34;&#xA;  validates_something_else # Other validations that conflict with Paperclip&#39;s&#xA;end&#xA;&#xA;class BooksController &amp;lt; ApplicationController&#xA;  def create&#xA;    @book = Book.new(book_params)&#xA;    @book.document = params[:book][:document]&#xA;    @book.save&#xA;    respond_with @book&#xA;  end&#xA;&#xA;  private&#xA;&#xA;  def book_params&#xA;    params.require(:book).permit(:title, :author)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;A note on content_type validations and security&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You should ensure that you validate files to be only those MIME types you explicitly want to support. If you don&#39;t, you could be open to &lt;a href=&#34;https://www.owasp.org/index.php/Testing_for_Stored_Cross_site_scripting_(OWASP-DV-002)&#34;&gt;XSS attacks&lt;/a&gt; if a user uploads a file with a malicious HTML payload.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re only interested in images, restrict your allowed content_types to image-y ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;validates_attachment :avatar,&#xA;  content_type: [&#34;image/jpeg&#34;, &#34;image/gif&#34;, &#34;image/png&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Paperclip::ContentTypeDetector&lt;/code&gt; will attempt to match a file&#39;s extension to an inferred content_type, regardless of the actual contents of the file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Internationalization (I18n)&lt;/h2&gt; &#xA;&lt;p&gt;For using or adding locale files in different languages, check the project &lt;a href=&#34;https://github.com/thoughtbot/paperclip-i18n&#34;&gt;https://github.com/thoughtbot/paperclip-i18n&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Security Validations&lt;/h1&gt; &#xA;&lt;p&gt;Thanks to a report from &lt;a href=&#34;http://homakov.blogspot.com/&#34;&gt;Egor Homakov&lt;/a&gt; we have taken steps to prevent people from spoofing Content-Types and getting data you weren&#39;t expecting onto your server.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Starting at version 4.0.0, all attachments are &lt;em&gt;required&lt;/em&gt; to include a content_type validation, a file_name validation, or to explicitly state that they&#39;re not going to have either. &lt;em&gt;Paperclip will raise an error&lt;/em&gt; if you do not do this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ActiveRecord::Base&#xA;  has_attached_file :avatar&#xA;  # Validate content type&#xA;  validates_attachment_content_type :avatar, content_type: /\Aimage/&#xA;  # Validate filename&#xA;  validates_attachment_file_name :avatar, matches: [/png\z/, /jpe?g\z/]&#xA;  # Explicitly do not validate&#xA;  do_not_validate_attachment_file_type :avatar&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This keeps Paperclip secure-by-default, and will prevent people trying to mess with your filesystem.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Also starting at version 4.0.0, Paperclip has another validation that cannot be turned off. This validation will prevent content type spoofing. That is, uploading a PHP document (for example) as part of the EXIF tags of a well-formed JPEG. This check is limited to the media type (the first part of the MIME type, so, &#39;text&#39; in &lt;code&gt;text/plain&lt;/code&gt;). This will prevent HTML documents from being uploaded as JPEGs, but will not prevent GIFs from being uploaded with a &lt;code&gt;.jpg&lt;/code&gt; extension. This validation will only add validation errors to the form. It will not cause errors to be raised.&lt;/p&gt; &#xA;&lt;p&gt;This can sometimes cause false validation errors in applications that use custom file extensions. In these cases you may wish to add your custom extension to the list of content type mappings by creating &lt;code&gt;config/initializers/paperclip.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Allow &#34;.foo&#34; as an extension for files with the MIME type &#34;text/plain&#34;.&#xA;Paperclip.options[:content_type_mappings] = {&#xA;  foo: %w(text/plain)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Defaults&lt;/h2&gt; &#xA;&lt;p&gt;Global defaults for all your Paperclip attachments can be defined by changing the Paperclip::Attachment.default_options Hash. This can be useful for setting your default storage settings per example so you won&#39;t have to define them in every &lt;code&gt;has_attached_file&lt;/code&gt; definition.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Rails, you can define a Hash with default options in &lt;code&gt;config/application.rb&lt;/code&gt; or in any of the &lt;code&gt;config/environments/*.rb&lt;/code&gt; files on config.paperclip_defaults. These will get merged into &lt;code&gt;Paperclip::Attachment.default_options&lt;/code&gt; as your Rails app boots. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module YourApp&#xA;  class Application &amp;lt; Rails::Application&#xA;    # Other code...&#xA;&#xA;    config.paperclip_defaults = { storage: :fog, fog_credentials: { provider: &#34;Local&#34;, local_root: &#34;#{Rails.root}/public&#34;}, fog_directory: &#34;&#34;, fog_host: &#34;localhost&#34;}&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option is to directly modify the &lt;code&gt;Paperclip::Attachment.default_options&lt;/code&gt; Hash - this method works for non-Rails applications or is an option if you prefer to place the Paperclip default settings in an initializer.&lt;/p&gt; &#xA;&lt;p&gt;An example Rails initializer would look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Paperclip::Attachment.default_options[:storage] = :fog&#xA;Paperclip::Attachment.default_options[:fog_credentials] = { provider: &#34;Local&#34;, local_root: &#34;#{Rails.root}/public&#34;}&#xA;Paperclip::Attachment.default_options[:fog_directory] = &#34;&#34;&#xA;Paperclip::Attachment.default_options[:fog_host] = &#34;http://localhost:3000&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Migrations&lt;/h2&gt; &#xA;&lt;p&gt;Paperclip defines several migration methods which can be used to create the necessary columns in your model. There are two types of helper methods to aid in this, as follows:&lt;/p&gt; &#xA;&lt;h3&gt;Add Attachment Column To A Table&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;attachment&lt;/code&gt; helper can be used when creating a table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreateUsersWithAttachments &amp;lt; ActiveRecord::Migration&#xA;  def up&#xA;    create_table :users do |t|&#xA;      t.attachment :avatar&#xA;    end&#xA;  end&#xA;&#xA;  # This is assuming you are only using the users table for Paperclip attachment. Drop with care!&#xA;  def down&#xA;    drop_table :users&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;change&lt;/code&gt; method, instead of the &lt;code&gt;up&lt;/code&gt;/&lt;code&gt;down&lt;/code&gt; combination above, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreateUsersWithAttachments &amp;lt; ActiveRecord::Migration&#xA;  def change&#xA;    create_table :users do |t|&#xA;      t.attachment :avatar&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Schema Definition&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, the &lt;code&gt;add_attachment&lt;/code&gt; and &lt;code&gt;remove_attachment&lt;/code&gt; methods can be used to add new Paperclip columns to an existing table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddAttachmentColumnsToUsers &amp;lt; ActiveRecord::Migration&#xA;  def up&#xA;    add_attachment :users, :avatar&#xA;  end&#xA;&#xA;  def down&#xA;    remove_attachment :users, :avatar&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can do this with the &lt;code&gt;change&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddAttachmentColumnsToUsers &amp;lt; ActiveRecord::Migration&#xA;  def change&#xA;    add_attachment :users, :avatar&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vintage Syntax&lt;/h3&gt; &#xA;&lt;p&gt;Vintage syntax (such as &lt;code&gt;t.has_attached_file&lt;/code&gt; and &lt;code&gt;drop_attached_file&lt;/code&gt;) is still supported in Paperclip 3.x, but you&#39;re advised to update those migration files to use this new syntax.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Storage&lt;/h2&gt; &#xA;&lt;p&gt;Paperclip ships with 3 storage adapters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File Storage&lt;/li&gt; &#xA; &lt;li&gt;S3 Storage (via &lt;code&gt;aws-sdk-s3&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fog Storage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you would like to use Paperclip with another storage, you can install these gems along side with Paperclip:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supportify/paperclip-azure&#34;&gt;paperclip-azure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gmontard/paperclip-azure-storage&#34;&gt;paperclip-azure-storage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/janko-m/paperclip-dropbox&#34;&gt;paperclip-dropbox&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Understanding Storage&lt;/h3&gt; &#xA;&lt;p&gt;The files that are assigned as attachments are, by default, placed in the directory specified by the &lt;code&gt;:path&lt;/code&gt; option to &lt;code&gt;has_attached_file&lt;/code&gt;. By default, this location is &lt;code&gt;:rails_root/public/system/:class/:attachment/:id_partition/:style/:filename&lt;/code&gt;. This location was chosen because, on standard Capistrano deployments, the &lt;code&gt;public/system&lt;/code&gt; directory can be symlinked to the app&#39;s shared directory, meaning it survives between deployments. For example, using that &lt;code&gt;:path&lt;/code&gt;, you may have a file at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/data/myapp/releases/20081229172410/public/system/users/avatar/000/000/013/small/my_pic.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This is a change from previous versions of Paperclip, but is overall a safer choice for the default file store.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may also choose to store your files using Amazon&#39;s S3 service. To do so, include the &lt;code&gt;aws-sdk-s3&lt;/code&gt; gem in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;aws-sdk-s3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you can specify using S3 from &lt;code&gt;has_attached_file&lt;/code&gt;. You can find more information about configuring and using S3 storage in &lt;a href=&#34;http://www.rubydoc.info/gems/paperclip/Paperclip/Storage/S3&#34;&gt;the &lt;code&gt;Paperclip::Storage::S3&lt;/code&gt; documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Files on the local filesystem (and in the Rails app&#39;s public directory) will be available to the internet at large. If you require access control, it&#39;s possible to place your files in a different location. You will need to change both the &lt;code&gt;:path&lt;/code&gt; and &lt;code&gt;:url&lt;/code&gt; options in order to make sure the files are unavailable to the public. Both &lt;code&gt;:path&lt;/code&gt; and &lt;code&gt;:url&lt;/code&gt; allow the same set of interpolated variables.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;IO Adapters&lt;/h2&gt; &#xA;&lt;p&gt;When a file is uploaded or attached, it can be in one of a few different input forms, from Rails&#39; UploadedFile object to a StringIO to a Tempfile or even a simple String that is a URL that points to an image.&lt;/p&gt; &#xA;&lt;p&gt;Paperclip will accept, by default, many of these sources. It also is capable of handling even more with a little configuration. The IO Adapters that handle images from non-local sources are not enabled by default. They can be enabled by adding a line similar to the following into &lt;code&gt;config/initializers/paperclip.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Paperclip::DataUriAdapter.register&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s best to only enable a remote-loading adapter if you need it. Otherwise there&#39;s a chance that someone can gain insight into your internal network structure using it as a vector.&lt;/p&gt; &#xA;&lt;p&gt;The following adapters are &lt;em&gt;not&lt;/em&gt; loaded by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Paperclip::UriAdapter&lt;/code&gt; - which accepts a &lt;code&gt;URI&lt;/code&gt; instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Paperclip::HttpUrlProxyAdapter&lt;/code&gt; - which accepts a &lt;code&gt;http&lt;/code&gt; string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Paperclip::DataUriAdapter&lt;/code&gt; - which accepts a Base64-encoded &lt;code&gt;data:&lt;/code&gt; string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Post Processing&lt;/h2&gt; &#xA;&lt;p&gt;Paperclip supports an extensible selection of post-processors. When you define a set of styles for an attachment, by default it is expected that those &#34;styles&#34; are actually &#34;thumbnails.&#34; These are processed by &lt;code&gt;Paperclip::Thumbnail&lt;/code&gt;. For backward compatibility reasons you can pass either a single geometry string, or an array containing a geometry and a format that the file will be converted to, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;has_attached_file :avatar, styles: { thumb: [&#34;32x32#&#34;, :png] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will convert the &#34;thumb&#34; style to a 32x32 square in PNG format, regardless of what was uploaded. If the format is not specified, it is kept the same (e.g. JPGs will remain JPGs). &lt;code&gt;Paperclip::Thumbnail&lt;/code&gt; uses ImageMagick to process images; &lt;a href=&#34;http://www.imagemagick.org/script/command-line-processing.php#geometry&#34;&gt;ImageMagick&#39;s geometry documentation&lt;/a&gt; has more information on the accepted style formats.&lt;/p&gt; &#xA;&lt;p&gt;For more fine-grained control of the conversion process, &lt;code&gt;source_file_options&lt;/code&gt; and &lt;code&gt;convert_options&lt;/code&gt; can be used to pass flags and settings directly to ImageMagick&#39;s powerful Convert tool, &lt;a href=&#34;https://www.imagemagick.org/script/convert.php&#34;&gt;documented here&lt;/a&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;has_attached_file :image, styles: { regular: [&#39;800x800&amp;gt;&#39;, :png]}, &#xA;    source_file_options: { regular: &#34;-density 96 -depth 8 -quality 85&#34; },&#xA;    convert_options: { regular: &#34;-posterize 3&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ImageMagick supports a number of environment variables for controlling its resource limits. For example, you can enforce memory or execution time limits by setting the following variables in your application&#39;s process environment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MAGICK_MEMORY_LIMIT=128MiB&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MAGICK_MAP_LIMIT=64MiB&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MAGICK_TIME_LIMIT=30&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a full list of variables and description, see &lt;a href=&#34;http://www.imagemagick.org/script/resources.php&#34;&gt;ImageMagick&#39;s resources documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Custom Attachment Processors&lt;/h2&gt; &#xA;&lt;p&gt;You can write your own custom attachment processors to carry out tasks like adding watermarks, compressing images, or encrypting files. Custom processors must be defined within the &lt;code&gt;Paperclip&lt;/code&gt; module, inherit from &lt;code&gt;Paperclip::Processor&lt;/code&gt; (see &lt;a href=&#34;https://github.com/thoughtbot/paperclip/raw/master/lib/paperclip/processor.rb&#34;&gt;&lt;code&gt;lib/paperclip/processor.rb&lt;/code&gt;&lt;/a&gt;), and implement a &lt;code&gt;make&lt;/code&gt; method that returns a &lt;code&gt;File&lt;/code&gt;. All files in your Rails app&#39;s &lt;code&gt;lib/paperclip&lt;/code&gt; and &lt;code&gt;lib/paperclip_processors&lt;/code&gt; directories will be automatically loaded by Paperclip. Processors are specified using the &lt;code&gt;:processors&lt;/code&gt; option to &lt;code&gt;has_attached_file&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;has_attached_file :scan, styles: { text: { quality: :better } },&#xA;                         processors: [:ocr]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would load the hypothetical class &lt;code&gt;Paperclip::Ocr&lt;/code&gt;, and pass it the options hash &lt;code&gt;{ quality: :better }&lt;/code&gt;, along with the uploaded file.&lt;/p&gt; &#xA;&lt;p&gt;Multiple processors can be specified, and they will be invoked in the order they are defined in the &lt;code&gt;:processors&lt;/code&gt; array. Each successive processor is given the result from the previous processor. All processors receive the same parameters, which are defined in the &lt;code&gt;:styles&lt;/code&gt; hash. For example, assuming we had this definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;has_attached_file :scan, styles: { text: { quality: :better } },&#xA;                         processors: [:rotator, :ocr]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both the &lt;code&gt;:rotator&lt;/code&gt; processor and the &lt;code&gt;:ocr&lt;/code&gt; processor would receive the options &lt;code&gt;{ quality: :better }&lt;/code&gt;. If a processor receives an option it doesn&#39;t recognise, it&#39;s expected to ignore it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: Because processors operate by turning the original attachment into the styles, no processors will be run if there are no styles defined.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in caching your thumbnail&#39;s width, height and size in the database, take a look at the &lt;a href=&#34;https://github.com/teeparham/paperclip-meta&#34;&gt;paperclip-meta&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;p&gt;Also, if you&#39;re interested in generating the thumbnail on-the-fly, you might want to look into the &lt;a href=&#34;https://github.com/drpentode/Attachment-on-the-Fly&#34;&gt;attachment_on_the_fly&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;p&gt;Paperclip&#39;s thumbnail generator (see &lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/lib/paperclip/thumbnail.rb&#34;&gt;&lt;code&gt;lib/paperclip/thumbnail.rb&lt;/code&gt;&lt;/a&gt;) is implemented as a processor, and may be a good reference for writing your own processors.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;p&gt;Before and after the Post Processing step, Paperclip calls back to the model with a few callbacks, allowing the model to change or cancel the processing step. The callbacks are &lt;code&gt;before_post_process&lt;/code&gt; and &lt;code&gt;after_post_process&lt;/code&gt; (which are called before and after the processing of each attachment), and the attachment-specific &lt;code&gt;before_&amp;lt;attachment&amp;gt;_post_process&lt;/code&gt; and &lt;code&gt;after_&amp;lt;attachment&amp;gt;_post_process&lt;/code&gt;. The callbacks are intended to be as close to normal ActiveRecord callbacks as possible, so if you return false (specifically - returning nil is not the same) in a &lt;code&gt;before_filter&lt;/code&gt;, the post processing step will halt. Returning false in an &lt;code&gt;after_filter&lt;/code&gt; will not halt anything, but you can access the model and the attachment if necessary.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: Post processing will not even &lt;strong&gt;start&lt;/strong&gt; if the attachment is not valid according to the validations. Your callbacks and processors will &lt;strong&gt;only&lt;/strong&gt; be called with valid attachments.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Message &amp;lt; ActiveRecord::Base&#xA;  has_attached_file :asset, styles: { thumb: &#34;100x100#&#34; }&#xA;&#xA;  before_post_process :skip_for_audio&#xA;&#xA;  def skip_for_audio&#xA;    ! %w(audio/ogg application/ogg).include?(asset_content_type)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;URI Obfuscation&lt;/h2&gt; &#xA;&lt;p&gt;Paperclip has an interpolation called &lt;code&gt;:hash&lt;/code&gt; for obfuscating filenames of publicly-available files.&lt;/p&gt; &#xA;&lt;p&gt;Example Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;has_attached_file :avatar, {&#xA;    url: &#34;/system/:hash.:extension&#34;,&#xA;    hash_secret: &#34;longSecretString&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:hash&lt;/code&gt; interpolation will be replaced with a unique hash made up of whatever is specified in &lt;code&gt;:hash_data&lt;/code&gt;. The default value for &lt;code&gt;:hash_data&lt;/code&gt; is &lt;code&gt;&#34;:class/:attachment/:id/:style/:updated_at&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:hash_secret&lt;/code&gt; is required - an exception will be raised if &lt;code&gt;:hash&lt;/code&gt; is used without &lt;code&gt;:hash_secret&lt;/code&gt; present.&lt;/p&gt; &#xA;&lt;p&gt;For more on this feature, read &lt;a href=&#34;https://github.com/thoughtbot/paperclip/pull/416&#34;&gt;the author&#39;s own explanation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Checksum / Fingerprint&lt;/h2&gt; &#xA;&lt;p&gt;A checksum of the original file assigned will be placed in the model if it has an attribute named fingerprint. Following the user model migration example above, the migration would look like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddAvatarFingerprintColumnToUser &amp;lt; ActiveRecord::Migration&#xA;  def up&#xA;    add_column :users, :avatar_fingerprint, :string&#xA;  end&#xA;&#xA;  def down&#xA;    remove_column :users, :avatar_fingerprint&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The algorithm can be specified using a configuration option; it defaults to MD5 for backwards compatibility with Paperclip 5 and earlier.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;has_attached_file :some_attachment, adapter_options: { hash_digest: Digest::SHA256 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;CLASS=User ATTACHMENT=avatar rake paperclip:refresh:fingerprints&lt;/code&gt; after changing the digest on existing attachments to update the fingerprints in the database.&lt;/p&gt; &#xA;&lt;h2&gt;File Preservation for Soft-Delete&lt;/h2&gt; &#xA;&lt;p&gt;An option is available to preserve attachments in order to play nicely with soft-deleted models. (acts_as_paranoid, paranoia, etc.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;has_attached_file :some_attachment, {&#xA;    preserve_files: true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will prevent &lt;code&gt;some_attachment&lt;/code&gt; from being wiped out when the model gets destroyed, so it will still exist when the object is restored later.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Dynamic Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Callable objects (lambdas, Procs) can be used in a number of places for dynamic configuration throughout Paperclip. This strategy exists in a number of components of the library but is most significant in the possibilities for allowing custom styles and processors to be applied for specific model instances, rather than applying defined styles and processors across all instances.&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic Styles:&lt;/h3&gt; &#xA;&lt;p&gt;Imagine a user model that had different styles based on the role of the user. Perhaps some users are bosses (e.g. a User model instance responds to &lt;code&gt;#boss?&lt;/code&gt;) and merit a bigger avatar thumbnail than regular users. The configuration to determine what style parameters are to be used based on the user role might look as follows where a boss will receive a &lt;code&gt;300x300&lt;/code&gt; thumbnail otherwise a &lt;code&gt;100x100&lt;/code&gt; thumbnail will be created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  has_attached_file :avatar, styles: lambda { |attachment| { thumb: (attachment.instance.boss? ? &#34;300x300&amp;gt;&#34; : &#34;100x100&amp;gt;&#34;) } }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamic Processors:&lt;/h3&gt; &#xA;&lt;p&gt;Another contrived example is a user model that is aware of which file processors should be applied to it (beyond the implied &lt;code&gt;thumbnail&lt;/code&gt; processor invoked when &lt;code&gt;:styles&lt;/code&gt; are defined). Perhaps we have a watermark processor available and it is only used on the avatars of certain models. The configuration for this might be where the instance is queried for which processors should be applied to it. Presumably some users might return &lt;code&gt;[:thumbnail, :watermark]&lt;/code&gt; for its processors, where a defined &lt;code&gt;watermark&lt;/code&gt; processor is invoked after the &lt;code&gt;thumbnail&lt;/code&gt; processor already defined by Paperclip.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  has_attached_file :avatar, processors: lambda { |instance| instance.processors }&#xA;  attr_accessor :processors&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;By default, Paperclip outputs logging according to your logger level. If you want to disable logging (e.g. during testing) add this into your environment&#39;s configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Your::Application.configure do&#xA;...&#xA;  Paperclip.options[:log] = false&#xA;...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information in the &lt;a href=&#34;http://www.rubydoc.info/github/thoughtbot/paperclip/Paperclip.options&#34;&gt;rdocs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;To make Capistrano symlink the &lt;code&gt;public/system&lt;/code&gt; directory so that attachments survive new deployments, set the &lt;code&gt;linked_dirs&lt;/code&gt; option in your &lt;code&gt;config/deploy.rb&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :linked_dirs, fetch(:linked_dirs, []).push(&#39;public/system&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attachment Styles&lt;/h3&gt; &#xA;&lt;p&gt;Paperclip is aware of new attachment styles you have added in previous deploys. The only thing you should do after each deployment is to call &lt;code&gt;rake paperclip:refresh:missing_styles&lt;/code&gt;. It will store current attachment styles in &lt;code&gt;RAILS_ROOT/public/system/paperclip_attachments.yml&lt;/code&gt; by default. You can change it by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Paperclip.registered_attachments_styles_path = &#39;/tmp/config/paperclip_attachments.yml&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example for Capistrano:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :paperclip do&#xA;  desc &#34;build missing paperclip styles&#34;&#xA;  task :build_missing_styles do&#xA;    on roles(:app) do&#xA;      within release_path do&#xA;        with rails_env: fetch(:rails_env) do&#xA;          execute :rake, &#34;paperclip:refresh:missing_styles&#34;&#xA;        end&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;after(&#34;deploy:compile_assets&#34;, &#34;paperclip:build_missing_styles&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you don&#39;t have to remember to refresh thumbnails in production every time you add a new style. Unfortunately, it does not work with dynamic styles - it just ignores them.&lt;/p&gt; &#xA;&lt;p&gt;If you already have a working app and don&#39;t want &lt;code&gt;rake paperclip:refresh:missing_styles&lt;/code&gt; to refresh old pictures, you need to tell Paperclip about existing styles. Simply create a &lt;code&gt;paperclip_attachments.yml&lt;/code&gt; file by hand. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  has_attached_file :avatar, styles: { thumb: &#39;x100&#39;, croppable: &#39;600x600&amp;gt;&#39;, big: &#39;1000x1000&amp;gt;&#39; }&#xA;end&#xA;&#xA;class Book &amp;lt; ActiveRecord::Base&#xA;  has_attached_file :cover, styles: { small: &#39;x100&#39;, large: &#39;1000x1000&amp;gt;&#39; }&#xA;  has_attached_file :sample, styles: { thumb: &#39;x100&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in &lt;code&gt;RAILS_ROOT/public/system/paperclip_attachments.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;---&#xA;:User:&#xA;  :avatar:&#xA;  - :thumb&#xA;  - :croppable&#xA;  - :big&#xA;:Book:&#xA;  :cover:&#xA;  - :small&#xA;  - :large&#xA;  :sample:&#xA;  - :thumb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Paperclip provides rspec-compatible matchers for testing attachments. See the documentation on &lt;a href=&#34;http://www.rubydoc.info/gems/paperclip/Paperclip/Shoulda/Matchers&#34;&gt;Paperclip::Shoulda::Matchers&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parallel Tests&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Because of the default &lt;code&gt;path&lt;/code&gt; for Paperclip storage, if you try to run tests in parallel, you may find that files get overwritten because the same path is being calculated for them in each test process. While this fix works for parallel_tests, a similar concept should be used for any other mechanism for running tests concurrently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if ENV[&#39;PARALLEL_TEST_GROUPS&#39;]&#xA;  Paperclip::Attachment.default_options[:path] = &#34;:rails_root/public/system/:rails_env/#{ENV[&#39;TEST_ENV_NUMBER&#39;].to_i}/:class/:attachment/:id_partition/:filename&#34;&#xA;else&#xA;  Paperclip::Attachment.default_options[:path] = &#34;:rails_root/public/system/:rails_env/:class/:attachment/:id_partition/:filename&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The important part here being the inclusion of &lt;code&gt;ENV[&#39;TEST_ENV_NUMBER&#39;]&lt;/code&gt;, or a similar mechanism for whichever parallel testing library you use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Integration Tests&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using integration tests with FactoryBot may save multiple copies of your test files within the app. To avoid this, specify a custom path in the &lt;code&gt;config/environments/test.rb&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Paperclip::Attachment.default_options[:path] = &#34;#{Rails.root}/spec/test_files/:class/:id_partition/:style.:extension&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, make sure to delete that directory after the test suite runs by adding this to &lt;code&gt;spec_helper.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.after(:suite) do&#xA;  FileUtils.rm_rf(Dir[&#34;#{Rails.root}/spec/test_files/&#34;])&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example of test configuration with Factory Bot&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;FactoryBot.define do&#xA;  factory :user do&#xA;    avatar { File.new(&#34;#{Rails.root}/spec/support/fixtures/image.jpg&#34;) }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute a feature or bugfix: Thanks! To make sure your fix/feature has a high chance of being included, please read the following guidelines:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Post a &lt;a href=&#34;https://github.com/thoughtbot/paperclip/compare/&#34;&gt;pull request&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure there are tests! We will not accept any patch that is not tested. It&#39;s a rare time when explicit tests aren&#39;t needed. If you have questions about writing tests for paperclip, please open a &lt;a href=&#34;https://github.com/thoughtbot/paperclip/issues/new&#34;&gt;GitHub issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/paperclip/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; for more details on contributing and running test.&lt;/p&gt; &#xA;&lt;p&gt;Thank you to all &lt;a href=&#34;https://github.com/thoughtbot/paperclip/graphs/contributors&#34;&gt;the contributors&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Paperclip is Copyright ¬© 2008-2017 thoughtbot, inc. It is free software, and may be redistributed under the terms specified in the MIT-LICENSE file.&lt;/p&gt; &#xA;&lt;h2&gt;About thoughtbot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://presskit.thoughtbot.com/images/thoughtbot-logo-for-readmes.svg?sanitize=true&#34; alt=&#34;thoughtbot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Paperclip is maintained and funded by thoughtbot. The names and logos for thoughtbot are trademarks of thoughtbot, inc.&lt;/p&gt; &#xA;&lt;p&gt;We love open source software! See &lt;a href=&#34;https://thoughtbot.com/community?utm_source=github&#34;&gt;our other projects&lt;/a&gt; or &lt;a href=&#34;https://thoughtbot.com?utm_source=github&#34;&gt;hire us&lt;/a&gt; to design, develop, and grow your product.&lt;/p&gt;</summary>
  </entry>
</feed>