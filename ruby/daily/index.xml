<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-23T01:43:20Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>airbnb/ruby</title>
    <updated>2023-03-23T01:43:20Z</updated>
    <id>tag:github.com,2023-03-23:/airbnb/ruby</id>
    <link href="https://github.com/airbnb/ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby Style Guide&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby Style Guide&lt;/h1&gt; &#xA;&lt;p&gt;This is Airbnb&#39;s Ruby Style Guide.&lt;/p&gt; &#xA;&lt;p&gt;It was inspired by &lt;a href=&#34;https://web.archive.org/web/20160410033955/https://github.com/styleguide/ruby&#34;&gt;GitHub&#39;s guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/rubocop-hq/ruby-style-guide&#34;&gt;RuboCop&#39;s guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Airbnb also maintains a &lt;a href=&#34;https://github.com/airbnb/javascript&#34;&gt;JavaScript Style Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#whitespace&#34;&gt;Whitespace&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#indentation&#34;&gt;Indentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#inline&#34;&gt;Inline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#newlines&#34;&gt;Newlines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#line-length&#34;&gt;Line Length&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#commenting&#34;&gt;Commenting&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#fileclass-level-comments&#34;&gt;File/class-level comments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#function-comments&#34;&gt;Function comments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#block-and-inline-comments&#34;&gt;Block and inline comments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#punctuation-spelling-and-grammar&#34;&gt;Punctuation, spelling, and grammar&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#todo-comments&#34;&gt;TODO comments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#commented-out-code&#34;&gt;Commented-out code&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#methods&#34;&gt;Methods&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#method-definitions&#34;&gt;Method definitions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#method-calls&#34;&gt;Method calls&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#conditional-expressions&#34;&gt;Conditional Expressions&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#conditional-keywords&#34;&gt;Conditional keywords&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#ternary-operator&#34;&gt;Ternary operator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#syntax&#34;&gt;Syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#naming&#34;&gt;Naming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#classes&#34;&gt;Classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#exceptions&#34;&gt;Exceptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#collections&#34;&gt;Collections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#strings&#34;&gt;Strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#regular-expressions&#34;&gt;Regular Expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#percent-literals&#34;&gt;Percent Literals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#rails&#34;&gt;Rails&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#scopes&#34;&gt;Scopes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#be-consistent&#34;&gt;Be Consistent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#translation&#34;&gt;Translation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Whitespace&lt;/h2&gt; &#xA;&lt;h3&gt;Indentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;default-indentation&#34;&gt;&lt;/a&gt;Use soft-tabs with a two-space indent.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#default-indentation&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;indent-when-as-case&#34;&gt;&lt;/a&gt;Indent &lt;code&gt;when&lt;/code&gt; as deep as &lt;code&gt;case&lt;/code&gt;. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#indent-when-as-case&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;case&#xA;when song.name == &#39;Misty&#39;&#xA;  puts &#39;Not again!&#39;&#xA;when song.duration &amp;gt; 120&#xA;  puts &#39;Too long!&#39;&#xA;when Time.now.hour &amp;gt; 21&#xA;  puts &#34;It&#39;s too late&#34;&#xA;else&#xA;  song.play&#xA;end&#xA;&#xA;kind = case year&#xA;       when 1850..1889 then &#39;Blues&#39;&#xA;       when 1890..1909 then &#39;Ragtime&#39;&#xA;       when 1910..1929 then &#39;New Orleans Jazz&#39;&#xA;       when 1930..1939 then &#39;Swing&#39;&#xA;       when 1940..1950 then &#39;Bebop&#39;&#xA;       else &#39;Jazz&#39;&#xA;       end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;align-function-params&#34;&gt;&lt;/a&gt;Align function parameters either all on the same line or one per line.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#align-function-params&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;def self.create_translation(phrase_id, phrase_key, target_locale,&#xA;                            value, user_id, do_xss_check, allow_verification)&#xA;  ...&#xA;end&#xA;&#xA;# good&#xA;def self.create_translation(phrase_id,&#xA;                            phrase_key,&#xA;                            target_locale,&#xA;                            value,&#xA;                            user_id,&#xA;                            do_xss_check,&#xA;                            allow_verification)&#xA;  ...&#xA;end&#xA;&#xA;# good&#xA;def self.create_translation(&#xA;  phrase_id,&#xA;  phrase_key,&#xA;  target_locale,&#xA;  value,&#xA;  user_id,&#xA;  do_xss_check,&#xA;  allow_verification&#xA;)&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;indent-multi-line-bool&#34;&gt;&lt;/a&gt;Indent succeeding lines in multi-line boolean expressions.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#indent-multi-line-bool&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;def is_eligible?(user)&#xA;  Trebuchet.current.launch?(ProgramEligibilityHelper::PROGRAM_TREBUCHET_FLAG) &amp;amp;&amp;amp;&#xA;  is_in_program?(user) &amp;amp;&amp;amp;&#xA;  program_not_expired&#xA;end&#xA;&#xA;# good&#xA;def is_eligible?(user)&#xA;  Trebuchet.current.launch?(ProgramEligibilityHelper::PROGRAM_TREBUCHET_FLAG) &amp;amp;&amp;amp;&#xA;    is_in_program?(user) &amp;amp;&amp;amp;&#xA;    program_not_expired&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inline&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;trailing-whitespace&#34;&gt;&lt;/a&gt;Never leave trailing whitespace. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#trailing-whitespace&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;space-before-comments&#34;&gt;&lt;/a&gt;When making inline comments, include a space between the end of the code and the start of your comment. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#space-before-comments&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;result = func(a, b)# we might want to change b to c&#xA;&#xA;# good&#xA;result = func(a, b) # we might want to change b to c&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;spaces-operators&#34;&gt;&lt;/a&gt;Use spaces around operators; after commas, colons, and semicolons; and around &lt;code&gt;{&lt;/code&gt; and before &lt;code&gt;}&lt;/code&gt;. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#spaces-operators&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sum = 1 + 2&#xA;a, b = 1, 2&#xA;1 &amp;gt; 2 ? true : false; puts &#39;Hi&#39;&#xA;[1, 2, 3].each { |e| puts e }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-space-before-commas&#34;&gt;&lt;/a&gt;Never include a space before a comma. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-space-before-commas&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;result = func(a, b)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;spaces-block-params&#34;&gt;&lt;/a&gt;Do not include space inside block parameter pipes. Include one space between parameters in a block. Include one space outside block parameter pipes. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#spaces-block-params&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;{}.each { | x,  y |puts x }&#xA;&#xA;# good&#xA;{}.each { |x, y| puts x }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-space-after-!&#34;&gt;&lt;/a&gt;Do not leave space between &lt;code&gt;!&lt;/code&gt; and its argument.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-space-after-!&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;!something&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-spaces-braces&#34;&gt;&lt;/a&gt;No spaces after &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt; or before &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-spaces-braces&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;some(arg).other&#xA;[1, 2, 3].length&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-spaces-string-interpolation&#34;&gt;&lt;/a&gt;Omit whitespace when doing string interpolation.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-spaces-string-interpolation&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;var = &#34;This #{ foobar } is interpolated.&#34;&#xA;&#xA;# good&#xA;var = &#34;This #{foobar} is interpolated.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-spaces-range-literals&#34;&gt;&lt;/a&gt;Don&#39;t use extra whitespace in range literals.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-spaces-range-literals&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;(0 ... coll).each do |item|&#xA;&#xA;# good&#xA;(0...coll).each do |item|&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Newlines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;multiline-if-newline&#34;&gt;&lt;/a&gt;Add a new line after &lt;code&gt;if&lt;/code&gt; conditions spanning multiple lines to help differentiate between the conditions and the body. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#multiline-if-newline&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if @reservation_alteration.checkin == @reservation.start_date &amp;amp;&amp;amp;&#xA;   @reservation_alteration.checkout == (@reservation.start_date + @reservation.nights)&#xA;&#xA;  redirect_to_alteration @reservation_alteration&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;newline-after-conditional&#34;&gt;&lt;/a&gt;Add a new line after conditionals, blocks, case statements, etc.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#newline-after-conditional&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if robot.is_awesome?&#xA;  send_robot_present&#xA;end&#xA;&#xA;robot.add_trait(:human_like_intelligence)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;newline-different-indent&#34;&gt;&lt;/a&gt;Don’t include newlines between areas of different indentation (such as around class or module bodies). &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#newline-different-indent&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;class Foo&#xA;&#xA;  def bar&#xA;    # body omitted&#xA;  end&#xA;&#xA;end&#xA;&#xA;# good&#xA;class Foo&#xA;  def bar&#xA;    # body omitted&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;newline-between-methods&#34;&gt;&lt;/a&gt;Include one, but no more than one, new line between methods.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#newline-between-methods&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def a&#xA;end&#xA;&#xA;def b&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;method-def-empty-lines&#34;&gt;&lt;/a&gt;Use a single empty line to break between statements to break up methods into logical paragraphs internally. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#method-def-empty-lines&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def transformorize_car&#xA;  car = manufacture(options)&#xA;  t = transformer(robot, disguise)&#xA;&#xA;  car.after_market_mod!&#xA;  t.transform(car)&#xA;  car.assign_cool_name!&#xA;&#xA;  fleet.add(car)&#xA;  car&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;trailing-newline&#34;&gt;&lt;/a&gt;End each file with a newline. Don&#39;t include multiple newlines at the end of a file. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#trailing-newline&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Line Length&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keep each line of code to a readable length. Unless you have a reason not to, keep lines to fewer than 100 characters. (&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/rationales.md#line-length&#34;&gt;rationale&lt;/a&gt;)&lt;sup&gt; [&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#line-length&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Commenting&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Though a pain to write, comments are absolutely vital to keeping our code readable. The following rules describe what you should comment and where. But remember: while comments are very important, the best code is self-documenting. Giving sensible names to types and variables is much better than using obscure names that you must then explain through comments.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When writing your comments, write for your audience: the next contributor who will need to understand your code. Be generous — the next one may be you!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;—&lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;Google C++ Style Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Portions of this section borrow heavily from the Google &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html#Comments&#34;&gt;C++&lt;/a&gt; and &lt;a href=&#34;https://google.github.io/styleguide/pyguide.html#Comments&#34;&gt;Python&lt;/a&gt; style guides.&lt;/p&gt; &#xA;&lt;h3&gt;File/class-level comments&lt;/h3&gt; &#xA;&lt;p&gt;Every class definition should have an accompanying comment that describes what it is for and how it should be used.&lt;/p&gt; &#xA;&lt;p&gt;A file that contains zero classes or more than one class should have a comment at the top describing its contents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Automatic conversion of one locale to another where it is possible, like&#xA;# American to British English.&#xA;module Translation&#xA;  # Class for converting between text between similar locales.&#xA;  # Right now only conversion between American English -&amp;gt; British, Canadian,&#xA;  # Australian, New Zealand variations is provided.&#xA;  class PrimAndProper&#xA;    def initialize&#xA;      @converters = { :en =&amp;gt; { :&#34;en-AU&#34; =&amp;gt; AmericanToAustralian.new,&#xA;                               :&#34;en-CA&#34; =&amp;gt; AmericanToCanadian.new,&#xA;                               :&#34;en-GB&#34; =&amp;gt; AmericanToBritish.new,&#xA;                               :&#34;en-NZ&#34; =&amp;gt; AmericanToKiwi.new,&#xA;                             } }&#xA;    end&#xA;&#xA;  ...&#xA;&#xA;  # Applies transforms to American English that are common to&#xA;  # variants of all other English colonies.&#xA;  class AmericanToColonial&#xA;    ...&#xA;  end&#xA;&#xA;  # Converts American to British English.&#xA;  # In addition to general Colonial English variations, changes &#34;apartment&#34;&#xA;  # to &#34;flat&#34;.&#xA;  class AmericanToBritish &amp;lt; AmericanToColonial&#xA;    ...&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All files, including data and config files, should have file-level comments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# List of American-to-British spelling variants.&#xA;#&#xA;# This list is made with&#xA;# lib/tasks/list_american_to_british_spelling_variants.rake.&#xA;#&#xA;# It contains words with general spelling variation patterns:&#xA;#   [trave]led/lled, [real]ize/ise, [flav]or/our, [cent]er/re, plus&#xA;# and these extras:&#xA;#   learned/learnt, practices/practises, airplane/aeroplane, ...&#xA;&#xA;sectarianizes: sectarianises&#xA;neutralization: neutralisation&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Function comments&lt;/h3&gt; &#xA;&lt;p&gt;Every function declaration should have comments immediately preceding it that describe what the function does and how to use it. These comments should be descriptive (&#34;Opens the file&#34;) rather than imperative (&#34;Open the file&#34;); the comment describes the function, it does not tell the function what to do. In general, these comments do not describe how the function performs its task. Instead, that should be left to comments interspersed in the function&#39;s code.&lt;/p&gt; &#xA;&lt;p&gt;Every function should mention what the inputs and outputs are, unless it meets all of the following criteria:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;not externally visible&lt;/li&gt; &#xA; &lt;li&gt;very short&lt;/li&gt; &#xA; &lt;li&gt;obvious&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may use whatever format you wish. In Ruby, two popular function documentation schemes are &lt;a href=&#34;http://tomdoc.org/&#34;&gt;TomDoc&lt;/a&gt; and &lt;a href=&#34;https://rubydoc.info/docs/yard/file/docs/GettingStarted.md&#34;&gt;YARD&lt;/a&gt;. You can also just write things out concisely:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Returns the fallback locales for the_locale.&#xA;# If opts[:exclude_default] is set, the default locale, which is otherwise&#xA;# always the last one in the returned list, will be excluded.&#xA;#&#xA;# For example:&#xA;#   fallbacks_for(:&#34;pt-BR&#34;)&#xA;#     =&amp;gt; [:&#34;pt-BR&#34;, :pt, :en]&#xA;#   fallbacks_for(:&#34;pt-BR&#34;, :exclude_default =&amp;gt; true)&#xA;#     =&amp;gt; [:&#34;pt-BR&#34;, :pt]&#xA;def fallbacks_for(the_locale, opts = {})&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Block and inline comments&lt;/h3&gt; &#xA;&lt;p&gt;The final place to have comments is in tricky parts of the code. If you&#39;re going to have to explain it at the next code review, you should comment it now. Complicated operations get a few lines of comments before the operations commence. Non-obvious ones get comments at the end of the line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def fallbacks_for(the_locale, opts = {})&#xA;  # dup() to produce an array that we can mutate.&#xA;  ret = @fallbacks[the_locale].dup&#xA;&#xA;  # We make two assumptions here:&#xA;  # 1) There is only one default locale (that is, it has no less-specific&#xA;  #    children).&#xA;  # 2) The default locale is just a language. (Like :en, and not :&#34;en-US&#34;.)&#xA;  if opts[:exclude_default] &amp;amp;&amp;amp;&#xA;      ret.last == default_locale &amp;amp;&amp;amp;&#xA;      ret.last != language_from_locale(the_locale)&#xA;    ret.pop&#xA;  end&#xA;&#xA;  ret&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the other hand, never describe the code. Assume the person reading the code knows the language (though not what you&#39;re trying to do) better than you do.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;no-block-comments&#34;&gt;&lt;/a&gt;Related: do not use block comments. They cannot be preceded by whitespace and are not as easy to spot as regular comments. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-block-comments&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;=begin&#xA;comment line&#xA;another comment line&#xA;=end&#xA;&#xA;# good&#xA;# comment line&#xA;# another comment line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Punctuation, spelling and grammar&lt;/h3&gt; &#xA;&lt;p&gt;Pay attention to punctuation, spelling, and grammar; it is easier to read well-written comments than badly written ones.&lt;/p&gt; &#xA;&lt;p&gt;Comments should be as readable as narrative text, with proper capitalization and punctuation. In many cases, complete sentences are more readable than sentence fragments. Shorter comments, such as comments at the end of a line of code, can sometimes be less formal, but you should be consistent with your style.&lt;/p&gt; &#xA;&lt;p&gt;Although it can be frustrating to have a code reviewer point out that you are using a comma when you should be using a semicolon, it is very important that source code maintain a high level of clarity and readability. Proper punctuation, spelling, and grammar help with that goal.&lt;/p&gt; &#xA;&lt;h3&gt;TODO comments&lt;/h3&gt; &#xA;&lt;p&gt;Use TODO comments for code that is temporary, a short-term solution, or good-enough but not perfect.&lt;/p&gt; &#xA;&lt;p&gt;TODOs should include the string TODO in all caps, followed by the full name of the person who can best provide context about the problem referenced by the TODO, in parentheses. A colon is optional. A comment explaining what there is to do is required. The main purpose is to have a consistent TODO format that can be searched to find the person who can provide more details upon request. A TODO is not a commitment that the person referenced will fix the problem. Thus when you create a TODO, it is almost always your name that is given.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # bad&#xA;  # TODO(RS): Use proper namespacing for this constant.&#xA;&#xA;  # bad&#xA;  # TODO(drumm3rz4lyfe): Use proper namespacing for this constant.&#xA;&#xA;  # good&#xA;  # TODO(Ringo Starr): Use proper namespacing for this constant.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commented-out code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a name=&#34;commented-code&#34;&gt;&lt;/a&gt;Never leave commented-out code in our codebase. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#commented-code&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;h3&gt;Method definitions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;method-def-parens&#34;&gt;&lt;/a&gt;Use &lt;code&gt;def&lt;/code&gt; with parentheses when there are parameters. Omit the parentheses when the method doesn&#39;t accept any parameters.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#method-def-parens&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def some_method&#xA;  # body omitted&#xA;end&#xA;&#xA;def some_method_with_parameters(arg1, arg2)&#xA;  # body omitted&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-default-args&#34;&gt;&lt;/a&gt;Do not use default positional arguments. Use keyword arguments (if available - in Ruby 2.0 or later) or an options hash instead.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-default-args&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;def obliterate(things, gently = true, except = [], at = Time.now)&#xA;  ...&#xA;end&#xA;&#xA;# good&#xA;def obliterate(things, gently: true, except: [], at: Time.now)&#xA;  ...&#xA;end&#xA;&#xA;# good&#xA;def obliterate(things, options = {})&#xA;  options = {&#xA;    :gently =&amp;gt; true, # obliterate with soft-delete&#xA;    :except =&amp;gt; [], # skip obliterating these things&#xA;    :at =&amp;gt; Time.now, # don&#39;t obliterate them until later&#xA;  }.merge(options)&#xA;&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-single-line-methods&#34;&gt;&lt;/a&gt;Avoid single-line methods. Although they are somewhat popular in the wild, there are a few peculiarities about their definition syntax that make their use undesirable. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-single-line-methods&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;def too_much; something; something_else; end&#xA;&#xA;# good&#xA;def some_method&#xA;  # body&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Method calls&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use parentheses&lt;/strong&gt; for a method call:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;returns-val-parens&#34;&gt;&lt;/a&gt;If the method returns a value. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#returns-val-parens&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;@current_user = User.find_by_id 1964192&#xA;&#xA;# good&#xA;@current_user = User.find_by_id(1964192)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;first-arg-parens&#34;&gt;&lt;/a&gt;If the first argument to the method uses parentheses.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#first-arg-parens&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;put! (x + y) % len, value&#xA;&#xA;# good&#xA;put!((x + y) % len, value)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;space-method-call&#34;&gt;&lt;/a&gt;Never put a space between a method name and the opening parenthesis.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#space-method-call&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;f (3 + 2) + 1&#xA;&#xA;# good&#xA;f(3 + 2) + 1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-args-parens&#34;&gt;&lt;/a&gt;&lt;strong&gt;Omit parentheses&lt;/strong&gt; for a method call if the method accepts no arguments.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-args-parens&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;nil?()&#xA;&#xA;# good&#xA;nil?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-return-parens&#34;&gt;&lt;/a&gt;If the method doesn&#39;t return a value (or we don&#39;t care about the return), parentheses are optional. (Especially if the arguments overflow to multiple lines, parentheses may add readability.) &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-return-parens&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# okay&#xA;render(:partial =&amp;gt; &#39;foo&#39;)&#xA;&#xA;# okay&#xA;render :partial =&amp;gt; &#39;foo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In either case:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;options-no-braces&#34;&gt;&lt;/a&gt;If a method accepts an options hash as the last argument, do not use &lt;code&gt;{&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; during invocation. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#options-no-braces&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;get &#39;/v1/reservations&#39;, { :id =&amp;gt; 54875 }&#xA;&#xA;# good&#xA;get &#39;/v1/reservations&#39;, :id =&amp;gt; 54875&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Conditional Expressions&lt;/h2&gt; &#xA;&lt;h3&gt;Conditional keywords&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;multiline-if-then&#34;&gt;&lt;/a&gt;Never use &lt;code&gt;then&lt;/code&gt; for multi-line &lt;code&gt;if/unless&lt;/code&gt;. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#multiline-if-then&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;if some_condition then&#xA;  ...&#xA;end&#xA;&#xA;# good&#xA;if some_condition&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;multiline-while-until&#34;&gt;&lt;/a&gt;Never use &lt;code&gt;do&lt;/code&gt; for multi-line &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;until&lt;/code&gt;.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#multiline-while-until&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;while x &amp;gt; 5 do&#xA;  ...&#xA;end&#xA;&#xA;until x &amp;gt; 5 do&#xA;  ...&#xA;end&#xA;&#xA;# good&#xA;while x &amp;gt; 5&#xA;  ...&#xA;end&#xA;&#xA;until x &amp;gt; 5&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-and-or&#34;&gt;&lt;/a&gt;The &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt; keywords are banned. It&#39;s just not worth it. Always use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, and &lt;code&gt;!&lt;/code&gt; instead. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-and-or&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;only-simple-if-unless&#34;&gt;&lt;/a&gt;Modifier &lt;code&gt;if/unless&lt;/code&gt; usage is okay when the body is simple, the condition is simple, and the whole thing fits on one line. Otherwise, avoid modifier &lt;code&gt;if/unless&lt;/code&gt;. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#only-simple-if-unless&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad - this doesn&#39;t fit on one line&#xA;add_trebuchet_experiments_on_page(request_opts[:trebuchet_experiments_on_page]) if request_opts[:trebuchet_experiments_on_page] &amp;amp;&amp;amp; !request_opts[:trebuchet_experiments_on_page].empty?&#xA;&#xA;# okay&#xA;if request_opts[:trebuchet_experiments_on_page] &amp;amp;&amp;amp;&#xA;     !request_opts[:trebuchet_experiments_on_page].empty?&#xA;&#xA;  add_trebuchet_experiments_on_page(request_opts[:trebuchet_experiments_on_page])&#xA;end&#xA;&#xA;# bad - this is complex and deserves multiple lines and a comment&#xA;parts[i] = part.to_i(INTEGER_BASE) if !part.nil? &amp;amp;&amp;amp; [0, 2, 3].include?(i)&#xA;&#xA;# okay&#xA;return if reconciled?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-unless-with-else&#34;&gt;&lt;/a&gt;Never use &lt;code&gt;unless&lt;/code&gt; with &lt;code&gt;else&lt;/code&gt;. Rewrite these with the positive case first.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-unless-with-else&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;unless success?&#xA;  puts &#39;failure&#39;&#xA;else&#xA;  puts &#39;success&#39;&#xA;end&#xA;&#xA;# good&#xA;if success?&#xA;  puts &#39;success&#39;&#xA;else&#xA;  puts &#39;failure&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;unless-with-multiple-conditions&#34;&gt;&lt;/a&gt;Avoid &lt;code&gt;unless&lt;/code&gt; with multiple conditions.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#unless-with-multiple-conditions&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # bad&#xA;  unless foo? &amp;amp;&amp;amp; bar?&#xA;    ...&#xA;  end&#xA;&#xA;  # okay&#xA;  if !(foo? &amp;amp;&amp;amp; bar?)&#xA;    ...&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;unless-with-comparison-operator&#34;&gt;&lt;/a&gt;Avoid &lt;code&gt;unless&lt;/code&gt; with comparison operators if you can use &lt;code&gt;if&lt;/code&gt; with an opposing comparison operator.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#unless-with-comparison-operator&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # bad&#xA;  unless x == 10&#xA;    ...&#xA;  end&#xA;&#xA;  # good&#xA;  if x != 10&#xA;    ...&#xA;  end&#xA;&#xA;  # bad&#xA;  unless x &amp;lt; 10&#xA;    ...&#xA;  end&#xA;&#xA;  # good&#xA;  if x &amp;gt;= 10&#xA;    ...&#xA;  end&#xA;&#xA;  # ok&#xA;  unless x === 10&#xA;    ...&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;parens-around-conditions&#34;&gt;&lt;/a&gt;Don&#39;t use parentheses around the condition of an &lt;code&gt;if/unless/while&lt;/code&gt;. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#parens-around-conditions&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;if (x &amp;gt; 10)&#xA;  ...&#xA;end&#xA;&#xA;# good&#xA;if x &amp;gt; 10&#xA;  ...&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ternary operator&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;avoid-complex-ternary&#34;&gt;&lt;/a&gt;Avoid the ternary operator (&lt;code&gt;?:&lt;/code&gt;) except in cases where all expressions are extremely trivial. However, do use the ternary operator(&lt;code&gt;?:&lt;/code&gt;) over &lt;code&gt;if/then/else/end&lt;/code&gt; constructs for single line conditionals.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#avoid-complex-ternary&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;result = if some_condition then something else something_else end&#xA;&#xA;# good&#xA;result = some_condition ? something : something_else&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-nested-ternaries&#34;&gt;&lt;/a&gt;Use one expression per branch in a ternary operator. This also means that ternary operators must not be nested. Prefer &lt;code&gt;if/else&lt;/code&gt; constructs in these cases.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-nested-ternaries&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else&#xA;&#xA;# good&#xA;if some_condition&#xA;  nested_condition ? nested_something : nested_something_else&#xA;else&#xA;  something_else&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;single-condition-ternary&#34;&gt;&lt;/a&gt;Avoid multiple conditions in ternaries. Ternaries are best used with single conditions. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#single-condition-ternary&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-multiline-ternaries&#34;&gt;&lt;/a&gt;Avoid multi-line &lt;code&gt;?:&lt;/code&gt; (the ternary operator), use &lt;code&gt;if/then/else/end&lt;/code&gt; instead. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-multiline-ternaries&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;some_really_long_condition_that_might_make_you_want_to_split_lines ?&#xA;  something : something_else&#xA;&#xA;# good&#xA;if some_really_long_condition_that_might_make_you_want_to_split_lines&#xA;  something&#xA;else&#xA;  something_else&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Nested conditionals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-nested-conditionals&#34;&gt;&lt;/a&gt; Avoid the use of nested conditionals for flow of control. (&lt;a href=&#34;http://blog.timoxley.com/post/47041269194/avoid-else-return-early&#34;&gt;More on this&lt;/a&gt;.) &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-nested-conditionals&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;p&gt;Prefer a guard clause when you can assert invalid data. A guard clause is a conditional statement at the top of a function that returns as soon as it can.&lt;/p&gt; &lt;p&gt;The general principles boil down to:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Return immediately once you know your function cannot do anything more.&lt;/li&gt; &#xA;   &lt;li&gt;Reduce nesting and indentation in the code by returning early. This makes the code easier to read and requires less mental bookkeeping on the part of the reader to keep track of &lt;code&gt;else&lt;/code&gt; branches.&lt;/li&gt; &#xA;   &lt;li&gt;The core or most important flows should be the least indented.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;def compute&#xA;  server = find_server&#xA;  if server&#xA;    client = server.client&#xA;    if client&#xA;      request = client.make_request&#xA;      if request&#xA;         process_request(request)&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;# good&#xA;def compute&#xA;  server = find_server&#xA;  return unless server&#xA;  client = server.client&#xA;  return unless client&#xA;  request = client.make_request&#xA;  return unless request&#xA;  process_request(request)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Prefer &lt;code&gt;next&lt;/code&gt; in loops instead of conditional blocks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;[0, 1, 2, 3].each do |item|&#xA;  if item &amp;gt; 1&#xA;    puts item&#xA;  end&#xA;end&#xA;&#xA;# good&#xA;[0, 1, 2, 3].each do |item|&#xA;  next unless item &amp;gt; 1&#xA;  puts item&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See also the section &#34;Guard Clause&#34;, p68-70 in Beck, Kent. &lt;em&gt;Implementation Patterns&lt;/em&gt;. Upper Saddle River: Addison-Wesley, 2008, which has inspired some of the content above.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Syntax&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-for&#34;&gt;&lt;/a&gt;Never use &lt;code&gt;for&lt;/code&gt;, unless you know exactly why. Most of the time iterators should be used instead. &lt;code&gt;for&lt;/code&gt; is implemented in terms of &lt;code&gt;each&lt;/code&gt; (so you&#39;re adding a level of indirection), but with a twist - &lt;code&gt;for&lt;/code&gt; doesn&#39;t introduce a new scope (unlike &lt;code&gt;each&lt;/code&gt;) and variables defined in its block will be visible outside it.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-for&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;arr = [1, 2, 3]&#xA;&#xA;# bad&#xA;for elem in arr do&#xA;  puts elem&#xA;end&#xA;&#xA;# good&#xA;arr.each { |elem| puts elem }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;single-line-blocks&#34;&gt;&lt;/a&gt;Prefer &lt;code&gt;{...}&lt;/code&gt; over &lt;code&gt;do...end&lt;/code&gt; for single-line blocks. Avoid using &lt;code&gt;{...}&lt;/code&gt; for multi-line blocks (multiline chaining is always ugly). Always use &lt;code&gt;do...end&lt;/code&gt; for &#34;control flow&#34; and &#34;method definitions&#34; (e.g. in Rakefiles and certain DSLs). Avoid &lt;code&gt;do...end&lt;/code&gt; when chaining.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#single-line-blocks&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;names = [&#34;Bozhidar&#34;, &#34;Steve&#34;, &#34;Sarah&#34;]&#xA;&#xA;# good&#xA;names.each { |name| puts name }&#xA;&#xA;# bad&#xA;names.each do |name| puts name end&#xA;&#xA;# good&#xA;names.each do |name|&#xA;  puts name&#xA;  puts &#39;yay!&#39;&#xA;end&#xA;&#xA;# bad&#xA;names.each { |name|&#xA;  puts name&#xA;  puts &#39;yay!&#39;&#xA;}&#xA;&#xA;# good&#xA;names.select { |name| name.start_with?(&#34;S&#34;) }.map { |name| name.upcase }&#xA;&#xA;# bad&#xA;names.select do |name|&#xA;  name.start_with?(&#34;S&#34;)&#xA;end.map { |name| name.upcase }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Some will argue that multiline chaining would look okay with the use of &lt;code&gt;{...}&lt;/code&gt;, but they should ask themselves if this code is really readable and whether the block&#39;s content can be extracted into nifty methods.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;self-assignment&#34;&gt;&lt;/a&gt;Use shorthand self assignment operators whenever applicable.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#self-assignment&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;x = x + y&#xA;x = x * y&#xA;x = x**y&#xA;x = x / y&#xA;x = x || y&#xA;x = x &amp;amp;&amp;amp; y&#xA;&#xA;# good&#xA;x += y&#xA;x *= y&#xA;x **= y&#xA;x /= y&#xA;x ||= y&#xA;x &amp;amp;&amp;amp;= y&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;semicolons&#34;&gt;&lt;/a&gt;Avoid semicolons except for in single line class definitions. When it is appropriate to use a semicolon, it should be directly adjacent to the statement it terminates: there should be no space before the semicolon.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#semicolons&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;puts &#39;foobar&#39;; # superfluous semicolon&#xA;puts &#39;foo&#39;; puts &#39;bar&#39; # two expressions on the same line&#xA;&#xA;# good&#xA;puts &#39;foobar&#39;&#xA;&#xA;puts &#39;foo&#39;&#xA;puts &#39;bar&#39;&#xA;&#xA;puts &#39;foo&#39;, &#39;bar&#39; # this applies to puts in particular&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;colon-use&#34;&gt;&lt;/a&gt;Use :: only to reference constants(this includes classes and modules) and constructors (like Array() or Nokogiri::HTML()). Do not use :: for regular method invocation.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#colon-use&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;SomeClass::some_method&#xA;some_object::some_method&#xA;&#xA;# good&#xA;SomeClass.some_method&#xA;some_object.some_method&#xA;SomeModule::SomeClass::SOME_CONST&#xA;SomeModule::SomeClass()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;redundant-return&#34;&gt;&lt;/a&gt;Avoid &lt;code&gt;return&lt;/code&gt; where not required. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#redundant-return&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;def some_method(some_arr)&#xA;  return some_arr.size&#xA;end&#xA;&#xA;# good&#xA;def some_method(some_arr)&#xA;  some_arr.size&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;assignment-in-conditionals&#34;&gt;&lt;/a&gt;Don&#39;t use the return value of &lt;code&gt;=&lt;/code&gt; in conditionals&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#assignment-in-conditionals&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad - shows intended use of assignment&#xA;if (v = array.grep(/foo/))&#xA;  ...&#xA;end&#xA;&#xA;# bad&#xA;if v = array.grep(/foo/)&#xA;  ...&#xA;end&#xA;&#xA;# good&#xA;v = array.grep(/foo/)&#xA;if v&#xA;  ...&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;double-pipe-for-uninit&#34;&gt;&lt;/a&gt;Use &lt;code&gt;||=&lt;/code&gt; freely to initialize variables. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#double-pipe-for-uninit&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# set name to Bozhidar, only if it&#39;s nil or false&#xA;name ||= &#39;Bozhidar&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-double-pipes-for-bools&#34;&gt;&lt;/a&gt;Don&#39;t use &lt;code&gt;||=&lt;/code&gt; to initialize boolean variables. (Consider what would happen if the current value happened to be &lt;code&gt;false&lt;/code&gt;.)&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-double-pipes-for-bools&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad - would set enabled to true even if it was false&#xA;enabled ||= true&#xA;&#xA;# good&#xA;enabled = true if enabled.nil?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;lambda-calls&#34;&gt;&lt;/a&gt;Use &lt;code&gt;.call&lt;/code&gt; explicitly when calling lambdas. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#lambda-calls&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;lambda.(x, y)&#xA;&#xA;# good&#xA;lambda.call(x, y)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-cryptic-perl&#34;&gt;&lt;/a&gt;Avoid using Perl-style special variables (like &lt;code&gt;$0-9&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, etc. ). They are quite cryptic and their use in anything but one-liner scripts is discouraged. Prefer long form versions such as &lt;code&gt;$PROGRAM_NAME&lt;/code&gt;.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-cryptic-perl&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;single-action-blocks&#34;&gt;&lt;/a&gt;When a method block takes only one argument, and the body consists solely of reading an attribute or calling one method with no arguments, use the &lt;code&gt;&amp;amp;:&lt;/code&gt; shorthand. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#single-action-blocks&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;bluths.map { |bluth| bluth.occupation }&#xA;bluths.select { |bluth| bluth.blue_self? }&#xA;&#xA;# good&#xA;bluths.map(&amp;amp;:occupation)&#xA;bluths.select(&amp;amp;:blue_self?)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;redundant-self&#34;&gt;&lt;/a&gt;Prefer &lt;code&gt;some_method&lt;/code&gt; over &lt;code&gt;self.some_method&lt;/code&gt; when calling a method on the current instance.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#redundant-self&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;def end_date&#xA;  self.start_date + self.nights&#xA;end&#xA;&#xA;# good&#xA;def end_date&#xA;  start_date + nights&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the following three common cases, &lt;code&gt;self.&lt;/code&gt; is required by the language and is good to use:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;When defining a class method: &lt;code&gt;def self.some_method&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;em&gt;left hand side&lt;/em&gt; when calling an assignment method, including assigning an attribute when &lt;code&gt;self&lt;/code&gt; is an ActiveRecord model: &lt;code&gt;self.guest = user&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Referencing the current instance&#39;s class: &lt;code&gt;self.class&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;freeze-constants&#34;&gt;&lt;/a&gt;When defining an object of any mutable type meant to be a constant, make sure to call &lt;code&gt;freeze&lt;/code&gt; on it. Common examples are strings, arrays, and hashes. (&lt;a href=&#34;https://blog.honeybadger.io/when-to-use-freeze-and-frozen-in-ruby/&#34;&gt;More on this&lt;/a&gt;.)&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#freeze-constants&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;p&gt;The reason is that Ruby constants are actually mutable. Calling &lt;code&gt;freeze&lt;/code&gt; ensures they are not mutated and are therefore truly constant and attempting to modify them will raise an exception. For strings, this allows older versions of Ruby below 2.2 to intern them.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;class Color&#xA;  RED = &#39;red&#39;&#xA;  BLUE = &#39;blue&#39;&#xA;  GREEN = &#39;green&#39;&#xA;&#xA;  ALL_COLORS = [&#xA;    RED,&#xA;    BLUE,&#xA;    GREEN,&#xA;  ]&#xA;&#xA;  COLOR_TO_RGB = {&#xA;    RED =&amp;gt; 0xFF0000,&#xA;    BLUE =&amp;gt; 0x0000FF,&#xA;    GREEN =&amp;gt; 0x00FF00,&#xA;  }&#xA;end&#xA;&#xA;# good&#xA;class Color&#xA;  RED = &#39;red&#39;.freeze&#xA;  BLUE = &#39;blue&#39;.freeze&#xA;  GREEN = &#39;green&#39;.freeze&#xA;&#xA;  ALL_COLORS = [&#xA;    RED,&#xA;    BLUE,&#xA;    GREEN,&#xA;  ].freeze&#xA;&#xA;  COLOR_TO_RGB = {&#xA;    RED =&amp;gt; 0xFF0000,&#xA;    BLUE =&amp;gt; 0x0000FF,&#xA;    GREEN =&amp;gt; 0x00FF00,&#xA;  }.freeze&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Naming&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;snake-case&#34;&gt;&lt;/a&gt;Use &lt;code&gt;snake_case&lt;/code&gt; for methods and variables. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#snake-case&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;camel-case&#34;&gt;&lt;/a&gt;Use &lt;code&gt;CamelCase&lt;/code&gt; for classes and modules. (Keep acronyms like HTTP, RFC, XML uppercase.) &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#camel-case&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;screaming-snake-case&#34;&gt;&lt;/a&gt;Use &lt;code&gt;SCREAMING_SNAKE_CASE&lt;/code&gt; for other constants.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#screaming-snake-case&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;predicate-method-names&#34;&gt;&lt;/a&gt;The names of predicate methods (methods that return a boolean value) should end in a question mark. (i.e. &lt;code&gt;Array#empty?&lt;/code&gt;).&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#predicate-method-names&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;bang-methods&#34;&gt;&lt;/a&gt;The names of potentially &#34;dangerous&#34; methods (i.e. methods that modify &lt;code&gt;self&lt;/code&gt; or the arguments, &lt;code&gt;exit!&lt;/code&gt;, etc.) should end with an exclamation mark. Bang methods should only exist if a non-bang method exists. (&lt;a href=&#34;http://dablog.rubypal.com/2007/8/15/bang-methods-or-danger-will-rubyist&#34;&gt;More on this&lt;/a&gt;.) &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#bang-methods&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;throwaway-variables&#34;&gt;&lt;/a&gt;Name throwaway variables &lt;code&gt;_&lt;/code&gt;. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#throwaway-variables&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version = &#39;3.2.1&#39;&#xA;major_version, minor_version, _ = version.split(&#39;.&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Classes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;avoid-class-variables&#34;&gt;&lt;/a&gt;Avoid the usage of class (&lt;code&gt;@@&lt;/code&gt;) variables due to their &#34;nasty&#34; behavior in inheritance. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#avoid-class-variables&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Parent&#xA;  @@class_var = &#39;parent&#39;&#xA;&#xA;  def self.print_class_var&#xA;    puts @@class_var&#xA;  end&#xA;end&#xA;&#xA;class Child &amp;lt; Parent&#xA;  @@class_var = &#39;child&#39;&#xA;end&#xA;&#xA;Parent.print_class_var # =&amp;gt; will print &#34;child&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As you can see all the classes in a class hierarchy actually share one class variable. Class instance variables should usually be preferred over class variables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;singleton-methods&#34;&gt;&lt;/a&gt;Use &lt;code&gt;def self.method&lt;/code&gt; to define singleton methods. This makes the methods more resistant to refactoring changes. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#singleton-methods&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class TestClass&#xA;  # bad&#xA;  def TestClass.some_method&#xA;    ...&#xA;  end&#xA;&#xA;  # good&#xA;  def self.some_other_method&#xA;    ...&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;no-class-self&#34;&gt;&lt;/a&gt;Avoid &lt;code&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; except when necessary, e.g. single accessors and aliased attributes. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#no-class-self&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class TestClass&#xA;  # bad&#xA;  class &amp;lt;&amp;lt; self&#xA;    def first_method&#xA;      ...&#xA;    end&#xA;&#xA;    def second_method_etc&#xA;      ...&#xA;    end&#xA;  end&#xA;&#xA;  # good&#xA;  class &amp;lt;&amp;lt; self&#xA;    attr_accessor :per_page&#xA;    alias_method :nwo, :find_by_name_with_owner&#xA;  end&#xA;&#xA;  def self.first_method&#xA;    ...&#xA;  end&#xA;&#xA;  def self.second_method_etc&#xA;    ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;access-modifiers&#34;&gt;&lt;/a&gt;Indent the &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, and &lt;code&gt;private&lt;/code&gt; methods as much the method definitions they apply to. Leave one blank line above and below them.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#access-modifiers&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SomeClass&#xA;  def public_method&#xA;    # ...&#xA;  end&#xA;&#xA;  private&#xA;&#xA;  def private_method&#xA;    # ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exceptions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;exception-flow-control&#34;&gt;&lt;/a&gt;Don&#39;t use exceptions for flow of control. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#exception-flow-control&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;begin&#xA;  n / d&#xA;rescue ZeroDivisionError&#xA;  puts &#34;Cannot divide by 0!&#34;&#xA;end&#xA;&#xA;# good&#xA;if d.zero?&#xA;  puts &#34;Cannot divide by 0!&#34;&#xA;else&#xA;  n / d&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;dont-rescue-exception&#34;&gt;&lt;/a&gt;Avoid rescuing the &lt;code&gt;Exception&lt;/code&gt; class. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#dont-rescue-exception&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;begin&#xA;  # an exception occurs here&#xA;rescue Exception&#xA;  # exception handling&#xA;end&#xA;&#xA;# good&#xA;begin&#xA;  # an exception occurs here&#xA;rescue StandardError&#xA;  # exception handling&#xA;end&#xA;&#xA;# acceptable&#xA;begin&#xA;  # an exception occurs here&#xA;rescue&#xA;  # exception handling&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;redundant-exception&#34;&gt;&lt;/a&gt;Don&#39;t specify &lt;code&gt;RuntimeError&lt;/code&gt; explicitly in the two argument version of raise. Prefer error sub-classes for clarity and explicit error creation.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#redundant-exception&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;raise RuntimeError, &#39;message&#39;&#xA;&#xA;# better - RuntimeError is implicit here&#xA;raise &#39;message&#39;&#xA;&#xA;# best&#xA;class MyExplicitError &amp;lt; RuntimeError; end&#xA;raise MyExplicitError&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;exception-class-messages&#34;&gt;&lt;/a&gt; Prefer supplying an exception class and a message as two separate arguments to &lt;code&gt;raise&lt;/code&gt;, instead of an exception instance. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#exception-class-messages&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Ruby&#34;&gt;# bad&#xA;raise SomeException.new(&#39;message&#39;)&#xA;# Note that there is no way to do `raise SomeException.new(&#39;message&#39;), backtrace`.&#xA;&#xA;# good&#xA;raise SomeException, &#39;message&#39;&#xA;# Consistent with `raise SomeException, &#39;message&#39;, backtrace`.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;rescue-as-modifier&#34;&gt;&lt;/a&gt;Avoid using rescue in its modifier form. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#rescue-as-modifier&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;read_file rescue handle_error($!)&#xA;&#xA;# good&#xA;begin&#xA;  read_file&#xA;rescue Errno:ENOENT =&amp;gt; ex&#xA;  handle_error(ex)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Collections&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;map-over-collect&#34;&gt;&lt;/a&gt;Prefer &lt;code&gt;map&lt;/code&gt; over &lt;code&gt;collect&lt;/code&gt;.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#map-over-collect&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;detect-over-find&#34;&gt;&lt;/a&gt;Prefer &lt;code&gt;detect&lt;/code&gt; over &lt;code&gt;find&lt;/code&gt;. The use of &lt;code&gt;find&lt;/code&gt; is ambiguous with regard to ActiveRecord&#39;s &lt;code&gt;find&lt;/code&gt; method - &lt;code&gt;detect&lt;/code&gt; makes clear that you&#39;re working with a Ruby collection, not an AR object. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#detect-over-find&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;reduce-over-inject&#34;&gt;&lt;/a&gt;Prefer &lt;code&gt;reduce&lt;/code&gt; over &lt;code&gt;inject&lt;/code&gt;. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#reduce-over-inject&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;size-over-count&#34;&gt;&lt;/a&gt;Prefer &lt;code&gt;size&lt;/code&gt; over either &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;count&lt;/code&gt; for performance reasons.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#size-over-count&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;empty-collection-literals&#34;&gt;&lt;/a&gt;Prefer literal array and hash creation notation unless you need to pass parameters to their constructors. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#empty-collection-literals&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;arr = Array.new&#xA;hash = Hash.new&#xA;&#xA;# good&#xA;arr = []&#xA;hash = {}&#xA;&#xA;# good because constructor requires parameters&#xA;x = Hash.new { |h, k| h[k] = {} }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;array-join&#34;&gt;&lt;/a&gt;Favor &lt;code&gt;Array#join&lt;/code&gt; over &lt;code&gt;Array#*&lt;/code&gt; for clarity. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#array-join&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;%w(one two three) * &#39;, &#39;&#xA;# =&amp;gt; &#39;one, two, three&#39;&#xA;&#xA;# good&#xA;%w(one two three).join(&#39;, &#39;)&#xA;# =&amp;gt; &#39;one, two, three&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;symbol-keys&#34;&gt;&lt;/a&gt;Use symbols instead of strings as hash keys. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#symbol-keys&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;hash = { &#39;one&#39; =&amp;gt; 1, &#39;two&#39; =&amp;gt; 2, &#39;three&#39; =&amp;gt; 3 }&#xA;&#xA;# good&#xA;hash = { :one =&amp;gt; 1, :two =&amp;gt; 2, :three =&amp;gt; 3 }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;symbol-literals&#34;&gt;&lt;/a&gt;Relatedly, use plain symbols instead of string symbols when possible.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#symbol-literals&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;:&#34;symbol&#34;&#xA;&#xA;# good&#xA;:symbol&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;deprecated-hash-methods&#34;&gt;&lt;/a&gt;Use &lt;code&gt;Hash#key?&lt;/code&gt; instead of &lt;code&gt;Hash#has_key?&lt;/code&gt; and &lt;code&gt;Hash#value?&lt;/code&gt; instead of &lt;code&gt;Hash#has_value?&lt;/code&gt;. According to Matz, the longer forms are considered deprecated. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#deprecated-hash-methods&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;hash.has_key?(:test)&#xA;hash.has_value?(value)&#xA;&#xA;# good&#xA;hash.key?(:test)&#xA;hash.value?(value)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;multiline-hashes&#34;&gt;&lt;/a&gt;Use multi-line hashes when it makes the code more readable, and use trailing commas to ensure that parameter changes don&#39;t cause extraneous diff lines when the logic has not otherwise changed. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#multiline-hashes&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hash = {&#xA;  :protocol =&amp;gt; &#39;https&#39;,&#xA;  :only_path =&amp;gt; false,&#xA;  :controller =&amp;gt; :users,&#xA;  :action =&amp;gt; :set_password,&#xA;  :redirect =&amp;gt; @redirect_url,&#xA;  :secret =&amp;gt; @secret,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;array-trailing-comma&#34;&gt;&lt;/a&gt;Use a trailing comma in an &lt;code&gt;Array&lt;/code&gt; that spans more than 1 line&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#array-trailing-comma&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# good&#xA;array = [1, 2, 3]&#xA;&#xA;# good&#xA;array = [&#xA;  &#34;car&#34;,&#xA;  &#34;bear&#34;,&#xA;  &#34;plane&#34;,&#xA;  &#34;zoo&#34;,&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Strings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;string-interpolation&#34;&gt;&lt;/a&gt;Prefer string interpolation instead of string concatenation:&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#string-interpolation&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;email_with_name = user.name + &#39; &amp;lt;&#39; + user.email + &#39;&amp;gt;&#39;&#xA;&#xA;# good&#xA;email_with_name = &#34;#{user.name} &amp;lt;#{user.email}&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Furthermore, keep in mind Ruby 1.9-style interpolation. Let&#39;s say you are composing cache keys like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CACHE_KEY = &#39;_store&#39;&#xA;&#xA;cache.write(@user.id + CACHE_KEY)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Prefer string interpolation instead of string concatenation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CACHE_KEY = &#39;%d_store&#39;&#xA;&#xA;cache.write(CACHE_KEY % @user.id)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;string-concatenation&#34;&gt;&lt;/a&gt;Avoid using &lt;code&gt;String#+&lt;/code&gt; when you need to construct large data chunks. Instead, use &lt;code&gt;String#&amp;lt;&amp;lt;&lt;/code&gt;. Concatenation mutates the string instance in-place and is always faster than &lt;code&gt;String#+&lt;/code&gt;, which creates a bunch of new string objects.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#string-concatenation&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# good and also fast&#xA;story = &#39;&#39;&#xA;story &amp;lt;&amp;lt; &#39;The Ugly Duckling&#39;&#xA;&#xA;paragraphs.each do |paragraph|&#xA;  story &amp;lt;&amp;lt; paragraph&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;multi-line-strings&#34;&gt;&lt;/a&gt;Use &lt;code&gt;\&lt;/code&gt; at the end of the line instead of &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; to concatenate multi-line strings. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#multi-line-strings&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;&#34;Some string is really long and &#34; +&#xA;  &#34;spans multiple lines.&#34;&#xA;&#xA;&#34;Some string is really long and &#34; &amp;lt;&amp;lt;&#xA;  &#34;spans multiple lines.&#34;&#xA;&#xA;# good&#xA;&#34;Some string is really long and &#34; \&#xA;  &#34;spans multiple lines.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Regular Expressions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;regex-named-groups&#34;&gt;&lt;/a&gt;Avoid using &lt;code&gt;$1-9&lt;/code&gt; as it can be hard to track what they contain. Named groups can be used instead. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#regex-named-groups&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;/(regexp)/ =~ string&#xA;...&#xA;process $1&#xA;&#xA;# good&#xA;/(?&amp;lt;meaningful_var&amp;gt;regexp)/ =~ string&#xA;...&#xA;process meaningful_var&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;caret-and-dollar-regexp&#34;&gt;&lt;/a&gt;Be careful with &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; as they match start/end of line, not string endings. If you want to match the whole string use: &lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\z&lt;/code&gt;.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#caret-and-dollar-regexp&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;string = &#34;some injection\nusername&#34;&#xA;string[/^username$/]   # matches&#xA;string[/\Ausername\z/] # don&#39;t match&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;comment-regexes&#34;&gt;&lt;/a&gt;Use &lt;code&gt;x&lt;/code&gt; modifier for complex regexps. This makes them more readable and you can add some useful comments. Just be careful as spaces are ignored.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#comment-regexes&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;regexp = %r{&#xA;  start         # some text&#xA;  \s            # white space char&#xA;  (group)       # first group&#xA;  (?:alt1|alt2) # some alternation&#xA;  end&#xA;}x&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Percent Literals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;percent-literal-delimiters&#34;&gt;&lt;/a&gt;Prefer parentheses over curly braces, brackets, or pipes when using &lt;code&gt;%&lt;/code&gt;-literal delimiters for consistency, and because the behavior of &lt;code&gt;%&lt;/code&gt;-literals is closer to method calls than the alternatives.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#percent-literal-delimiters&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;%w[date locale]&#xA;%w{date locale}&#xA;%w|date locale|&#xA;&#xA;# good&#xA;%w(date locale)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;percent-w&#34;&gt;&lt;/a&gt;Use &lt;code&gt;%w&lt;/code&gt; freely.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#percent-w&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;STATES = %w(draft open closed)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;percent-parens&#34;&gt;&lt;/a&gt;Use &lt;code&gt;%()&lt;/code&gt; for single-line strings which require both interpolation and embedded double-quotes. For multi-line strings, prefer heredocs.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#percent-parens&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad - no interpolation needed&#xA;%(Welcome, Jane!)&#xA;# should be &#39;Welcome, Jane!&#39;&#xA;&#xA;# bad - no double-quotes&#xA;%(This is #{quality} style)&#xA;# should be &#34;This is #{quality} style&#34;&#xA;&#xA;# bad - multiple lines&#xA;%(Welcome, Jane!\nPlease enjoy your stay at #{location}\nCheers!)&#xA;# should be a heredoc.&#xA;&#xA;# good - requires interpolation, has quotes, single line&#xA;%(Welcome, #{name}!)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;percent-r&#34;&gt;&lt;/a&gt;Use &lt;code&gt;%r&lt;/code&gt; only for regular expressions matching &lt;em&gt;more than&lt;/em&gt; one &#39;/&#39; character.&lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#percent-r&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;%r(\s+)&#xA;&#xA;# still bad&#xA;%r(^/(.*)$)&#xA;# should be /^\/(.*)$/&#xA;&#xA;# good&#xA;%r(^/blog/2011/(.*)$)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;percent-x&#34;&gt;&lt;/a&gt;Avoid the use of %x unless you&#39;re going to invoke a command with backquotes in it (which is rather unlikely). &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#percent-x&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;date = %x(date)&#xA;&#xA;# good&#xA;date = `date`&#xA;echo = %x(echo `date`)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rails&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;next-line-return&#34;&gt;&lt;/a&gt;When immediately returning after calling &lt;code&gt;render&lt;/code&gt; or &lt;code&gt;redirect_to&lt;/code&gt;, put &lt;code&gt;return&lt;/code&gt; on the next line, not the same line. &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#next-line-return&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;render :text =&amp;gt; &#39;Howdy&#39; and return&#xA;&#xA;# good&#xA;render :text =&amp;gt; &#39;Howdy&#39;&#xA;return&#xA;&#xA;# still bad&#xA;render :text =&amp;gt; &#39;Howdy&#39; and return if foo.present?&#xA;&#xA;# good&#xA;if foo.present?&#xA;  render :text =&amp;gt; &#39;Howdy&#39;&#xA;  return&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Scopes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;scope-lambda&#34;&gt;&lt;/a&gt;When defining ActiveRecord model scopes, wrap the relation in a &lt;code&gt;lambda&lt;/code&gt;. A naked relation forces a database connection to be established at class load time (instance startup). &lt;sup&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/ruby/main/#scope-lambda&#34;&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# bad&#xA;scope :foo, where(:bar =&amp;gt; 1)&#xA;&#xA;# good&#xA;scope :foo, -&amp;gt; { where(:bar =&amp;gt; 1) }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Be Consistent&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you&#39;re editing code, take a few minutes to look at the code around you and determine its style. If they use spaces around all their arithmetic operators, you should too. If their comments have little boxes of hash marks around them, make your comments have little boxes of hash marks around them too.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The point of having style guidelines is to have a common vocabulary of coding so people can concentrate on what you&#39;re saying rather than on how you&#39;re saying it. We present global style rules here so people know the vocabulary, but local style is also important. If code you add to a file looks drastically different from the existing code around it, it throws readers out of their rhythm when they go to read it. Avoid this.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;—&lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;Google C++ Style Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;This style guide is also available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png&#34; alt=&#34;cn&#34;&gt; &lt;strong&gt;Chinese (Simplified)&lt;/strong&gt;: &lt;a href=&#34;https://github.com/1c7/ruby-airbnb&#34;&gt;1c7/ruby-airbnb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>