<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-13T01:37:11Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>elixir-editors/vim-elixir</title>
    <updated>2025-05-13T01:37:11Z</updated>
    <id>tag:github.com,2025-05-13:/elixir-editors/vim-elixir</id>
    <link href="https://github.com/elixir-editors/vim-elixir" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vim configuration files for Elixir&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vim-elixir&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/elixir-editors/vim-elixir&#34;&gt;&lt;img src=&#34;https://travis-ci.org/elixir-editors/vim-elixir.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://elixir-lang.org&#34;&gt;Elixir&lt;/a&gt; support for vim&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax highlighting for Elixir and EEx files&lt;/li&gt; &#xA; &lt;li&gt;Filetype detection for &lt;code&gt;.ex&lt;/code&gt;, &lt;code&gt;.exs&lt;/code&gt;, &lt;code&gt;.eex&lt;/code&gt;, &lt;code&gt;.heex&lt;/code&gt;, &lt;code&gt;.leex&lt;/code&gt;, and &lt;code&gt;.sface&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;Automatic indentation&lt;/li&gt; &#xA; &lt;li&gt;Integration between Ecto projects and &lt;a href=&#34;https://github.com/tpope/vim-dadbod&#34;&gt;vim-dadbod&lt;/a&gt; for running SQL queries on defined Ecto repositories&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vim-elixir&lt;/code&gt; can be installed either with a plugin manager or by directly copying the files into your vim folders (location varies between platforms)&lt;/p&gt; &#xA;&lt;h3&gt;Plugin Managers&lt;/h3&gt; &#xA;&lt;p&gt;If you are using a plugin manager then add &lt;code&gt;vim-elixir&lt;/code&gt; the way you would any other plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using vim 8 native package loading&#xA;#   http://vimhelp.appspot.com/repeat.txt.html#packages&#xA;git clone https://github.com/elixir-editors/vim-elixir.git ~/.vim/pack/my-packages/start/vim-elixir&#xA;&#xA;# Using pathogen&#xA;git clone https://github.com/elixir-editors/vim-elixir.git ~/.vim/bundle/vim-elixir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Using vim-plug&#xA;Plug &#39;elixir-editors/vim-elixir&#39;&#xA;&#xA;&#34; Using Vundle&#xA;Plugin &#39;elixir-editors/vim-elixir&#39;&#xA;&#xA;&#34; Using NeoBundle&#xA;NeoBundle &#39;elixir-editors/vim-elixir&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Installation&lt;/h3&gt; &#xA;&lt;p&gt;If you are not using a package manager then you can use the provided &lt;code&gt;manual_install.sh&lt;/code&gt; script to copy the files into their respective homes.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/vim-elixir/master/manual_install.sh&#34;&gt;./manual_install.sh&lt;/a&gt; to copy the contents of each directory in the respective directories inside &lt;code&gt;~/.vim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You must add the following to your &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34; Enable syntax highlighting&#xA;syntax on&#xA;&#xA;&#34; Enables filetype detection, loads ftplugin, and loads indent&#xA;&#34; (Not necessary on nvim and may not be necessary on vim 8.2+)&#xA;filetype plugin indent on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes/Caveats&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;mix format&lt;/code&gt; Integration&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve decided not to include &lt;code&gt;mix format&lt;/code&gt; integration into &lt;code&gt;vim-elixir&lt;/code&gt;. If you&#39;d like to set it up yourself, you have the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For asynchronous execution of the formatter, have a look at &lt;a href=&#34;https://github.com/mhinz/vim-mix-format&#34;&gt;vim-mix-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add it as a &lt;code&gt;formatprg&lt;/code&gt; (e.g. &lt;code&gt;setlocal formatprg=mix\ format\ -&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why isn&#39;t this supported? We&#39;ve run into two major issues with calling out to &lt;code&gt;mix format&lt;/code&gt;. First &lt;code&gt;mix format&lt;/code&gt; would not work unless your program compiled. Second &lt;code&gt;mix format&lt;/code&gt; added an external process dependency to &lt;code&gt;vim-elixir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If someone really wanted to try and add this then we might be able to model it after &lt;code&gt;vim-go&lt;/code&gt;&#39;s &lt;code&gt;go fmt&lt;/code&gt; integration which I think could be acceptable to merge into master.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Maintenance Help&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;vim-elixir&lt;/code&gt; is looking for new maintainers. If you get a lot of value from it, know vimscript well, or eager to learn about it then feel free to get in touch with @jbodah (GH issue, elixir-lang Slack)&lt;/p&gt; &#xA;&lt;h3&gt;Running the Tests&lt;/h3&gt; &#xA;&lt;p&gt;The tests depend on having Ruby installed. They also depend on a GUI vim (gvim, mvim) with server support. If you do not have gvim or mvim in your PATH then you can create a &lt;code&gt;.gvim_path&lt;/code&gt; file in the vim-elixir root directory which specifies the path to the GUI vim executable.&lt;/p&gt; &#xA;&lt;p&gt;To run the tests: &lt;code&gt;bundle exec parallel_rspec spec&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Developing in Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can spawn a container with vim and your development configs using &lt;code&gt;bin/vim&lt;/code&gt; or &lt;code&gt;bin/nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging Indent&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Open vim in a container loading this plugin&#xA;bin/vim myfile.ex&#xA;&#xA;# Debug statements should be configured to print automatically&#xA;# Write/indent some code&#xA;:messages&#xA;&#xA;# You should see output like the following:&#xA;#   ==&amp;gt; Indenting line 3&#xA;#   text = &#39;    _ -&amp;gt; :wowo&#39;&#xA;#   testing handler elixir#indent#handle_top_of_file&#xA;#   testing handler elixir#indent#handle_starts_with_string_continuation&#xA;#   testing handler elixir#indent#handle_following_trailing_binary_operator&#xA;#   testing handler elixir#indent#handle_starts_with_pipe&#xA;#   testing handler elixir#indent#handle_starts_with_binary_operator&#xA;#   testing handler elixir#indent#handle_inside_block&#xA;#   pattern matching relative to lnum 2&#xA;#   current line contains -&amp;gt;; assuming match definition&#xA;#   line 3: elixir#indent#handle_inside_block returned 4&#xA;#   1 change; before #1  4 seconds ago&#xA;#&#xA;# This tells you which line is being inspected as well as which handlers are being run&#xA;# and which branches are being exercised by those handlers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Feature Wishlist&lt;/h3&gt; &#xA;&lt;p&gt;Here is a list of features that I think would be great additions to &lt;code&gt;vim-elixir&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Regularly merging &lt;code&gt;vim-elixir&lt;/code&gt; into &lt;code&gt;vim&lt;/code&gt; and keeping the sync up-to-date&lt;/li&gt; &#xA; &lt;li&gt;Fixing our build so it can run regularly on CI&lt;/li&gt; &#xA; &lt;li&gt;Live view support&lt;/li&gt; &#xA; &lt;li&gt;Testing .exs files and ensuring feature compatibility between .ex and .exs&lt;/li&gt; &#xA; &lt;li&gt;Documentation (e.g. &lt;code&gt;:h vim-elixir&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;README docs for various .vimrc options/flags&lt;/li&gt; &#xA; &lt;li&gt;Identifying and rewriting tests that conflict with &lt;code&gt;mix format&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fixes for indentation rule edge cases (e.g. &lt;code&gt;with&lt;/code&gt;, see GH issues for examples)&lt;/li&gt; &#xA; &lt;li&gt;Simplifying syntax rules&lt;/li&gt; &#xA; &lt;li&gt;Performance optimizations for syntax/indent rules (especially for determining if something is a string)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>