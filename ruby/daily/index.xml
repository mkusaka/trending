<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-14T01:37:11Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>moowahaha/settable_constructor_variables</title>
    <updated>2022-11-14T01:37:11Z</updated>
    <id>tag:github.com,2022-11-14:/moowahaha/settable_constructor_variables</id>
    <link href="https://github.com/moowahaha/settable_constructor_variables" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Set instance variables from constructor parameters without doing it yourself.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Allows you to set instance variables through constructor parameters. Dead simple but resolves an annoyance.&lt;/p&gt; &#xA;&lt;p&gt;require &#39;settable_constructor_variables&#39;&lt;/p&gt; &#xA;&lt;p&gt;class MyClass include SettableConstructorVariables attr_accessor :something end&lt;/p&gt; &#xA;&lt;p&gt;MyClass.new(something: &#39;abc&#39;).something #=&amp;gt; &#39;abc&#39;&lt;/p&gt; &#xA;&lt;p&gt;To use this in conjunction with your own constructor...&lt;/p&gt; &#xA;&lt;p&gt;class MyClass include SettableConstructorVariables attr_accessor :something&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;def initialize params&#xA;  # do something&#xA;  super params&#xA;  # do something else&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;end&lt;/p&gt; &#xA;&lt;p&gt;Tinniest gem ever and having put the effort in to make it a gem, I am wondering how worthwhile the effort was...&lt;/p&gt; &#xA;&lt;p&gt;... And now I wait for somebody to tell me it has already been done!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>L-codes/pwcrack-framework</title>
    <updated>2022-11-14T01:37:11Z</updated>
    <id>tag:github.com,2022-11-14:/L-codes/pwcrack-framework</id>
    <link href="https://github.com/L-codes/pwcrack-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Password Crack Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;0x00 pwcrack-framework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/L-codes/pwcrack-framework/master/README.md&#34;&gt;简体中文&lt;/a&gt;　｜　&lt;a href=&#34;https://raw.githubusercontent.com/L-codes/pwcrack-framework/master/README-en.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pwcrack-framework&lt;/strong&gt; 是一个用Ruby编写的密码自动破解框架，目前提供了 23 个在线破解和 34 个离线破解接口，支持 57 种算法破解&lt;/p&gt; &#xA;&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/L-codes/pwcrack-framework&#34;&gt;https://github.com/L-codes/pwcrack-framework&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;0x01 Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby3.1+ (tested with Ruby 3.1.1)&lt;/li&gt; &#xA; &lt;li&gt;支持Linux/OSX/Windows平台运行&lt;/li&gt; &#xA; &lt;li&gt;支持在线和离线的进行破解密码明文&lt;/li&gt; &#xA; &lt;li&gt;支持自动分析密文算法调用插件破解&lt;/li&gt; &#xA; &lt;li&gt;提供简单DSL编写框架插件&lt;/li&gt; &#xA; &lt;li&gt;配置 java 环境扩展，支持更多算法, 可安装 &lt;code&gt;gem install rjb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;0x02 Installing&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/L-codes/pwcrack-framework&#xA;$ cd pwcrack-framework&#xA;$ bundle install&#xA;&#xA;# banner view&#xA;$ ./pwcrack banner&#xA;&#xA;                                             &#xA;          &#34;$$$$$$&#39;&#39;  &#39;M$  &#39;$$$@m            &#xA;        :$$$$$$$$$$$$$$&#39;&#39;$$$$&#39;               &#xA;       &#39;$&#39;    &#39;JZI&#39;$$&amp;amp;  $$$$&#39;                &#xA;                 &#39;$$$  &#39;$$$$                 &#xA;                 $$$$  J$$$$&#39;                &#xA;                m$$$$  $$$$,                &#xA;                $$$$@  &#39;$$$$_         pwcrack-framework&#xA;             &#39;1t$$$$&#39; &#39;$$$$&amp;lt;               &#xA;          &#39;$$$$$$$$$$&#39;  $$$$          version 1.16.14&#xA;               &#39;@$$$$&#39;  $$$$&#39;                &#xA;                &#39;$$$$  &#39;$$$@                 &#xA;             &#39;z$$$$$$  @$$$                  &#xA;                r$$$   $$|                   &#xA;                &#39;$$v c$$                     &#xA;               &#39;$$v $$v$$$$$$$$$#            &#xA;               $$x$$$$$$$$$twelve$$$@$&#39;      &#xA;             @$$$@L &#39;    &#39;&amp;lt;@$$$$$$$$`        &#xA;           $$                 &#39;$$$           &#xA;                                             &#xA;&#xA;    [ Github ] https://github.com/L-codes/pwcrack-framework&#xA;&#xA;                       [ Plugin Count ] &#xA;&#xA;         Online Plugin: 23        Offline Plugin: 34&#xA;                   supporting algorithms: 57&#xA;&#xA;                  [ Algorithm Plugin Count ] &#xA;&#xA;            md5: 21          serv_u: 21            sha1: 13&#xA;        dedecms: 10          md5_16: 10           mysql:  8&#xA;         sha256:  7            ntlm:  7          sha512:  7&#xA;         mysql3:  6             md4:  4              lm:  4&#xA;         sha384:  3           mssql:  2       mobaxterm:  1&#xA;    mac_osx_vnc:  1        lsrunase:  1     landray_ekp:  1&#xA;  juniper_type9:  1         h3c_imc:  1      h3c_huawei:  1&#xA;        h3c_cvm:  1         grafana:  1             gpp:  1&#xA;        foxmail:  1        foxmail6:  1        flashfxp:  1&#xA;     finereport:  1       filezilla:  1       druid_rsa:  1&#xA;     dongao_rc4:  1       whirlpool:  1          sha224:  1&#xA;      ripemd320:  1       ripemd256:  1       ripemd160:  1&#xA;      ripemd128:  1            mdc2:  1             md2:  1&#xA;      dahan_jis:  1       d3des_vnc:  1       cisco_vpn:  1&#xA;    cisco_type7:  1          xshell:  1            xftp:  1&#xA;      websphere:  1     uportal2800:  1          trswcm:  1&#xA;         signer:  1 seeyon_analyze_icloud:  1       seeyon_a8:  1&#xA;   securecrt_v2:  1       securecrt:  1        richmail:  1&#xA;      qizhi_php:  1       navicat12:  1       navicat11:  1&#xA;         zfsoft:  1&#xA;&#xA;&#xA;# Install in Termux&#xA;$ pkg install git ruby ruby-dev clang make libffi-dev&#xA;$ gem install bundler&#xA;$ git clone https://github.com/L-codes/pwcrack-framework&#xA;$ cd pwcrack-framework&#xA;$ bundle update --bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;0x03 Example usage&lt;/h1&gt; &#xA;&lt;h2&gt;Examples 1&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/o9QpPkK.png&#34; alt=&#34;examples1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples 2&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/X0YYywh.png&#34; alt=&#34;examples2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples 3&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WHC9aVF.png&#34; alt=&#34;examples3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples 4&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3Ms2kQL.png&#34; alt=&#34;examples4&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;0x04 Plugin Development DSL&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#!/usr/bin/env ruby&#xA;#&#xA;# Plugin 80p&#xA;# Author L&#xA;#&#xA;&#xA;plugin &#39;80p&#39; do&#xA;  web_server &#39;http://md5.80p.cn&#39;&#xA;  supported_algorithm :md5, :md5_16, :sha1&#xA;&#xA;  crack {&#xA;    r = post &#39;/&#39;, {&#39;decode&#39;: passwd}&#xA;    r.body.extract(/&amp;lt;font color=&#34;#FF0000&#34;&amp;gt;(.*?)&amp;lt;\/font&amp;gt;/)&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;0x05 Local DB&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;在 v1.4.0 之后版本，添加了本地的密码数据库(大多数为cmd5等需收费查询)&#xA;localdb 插件，会查询本地的数据库&#xA;&#xA;初次使用或需要重建本地数据库，则执行如下命令&#xA;$ pwcrack initdb&#xA;&#xA;也可以自定义字典进行创建数据库&#xA;$ pwcrack initdb my_dict.txt&#xA;&#xA;在 v1.9.8 之后版本，添加了 add 和 updatedb 功能&#xA;新增明文到 data/words.txt 则使用&#xA;$ pwcrack add &amp;lt;word...&amp;gt;&#xA;&#xA;更新 data/words.txt 中新增的明文记录到数据库则使用&#xA;$ pwcrack updatedb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Akze0mt.png&#34; alt=&#34;localdb&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;0x06 Problem&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;遇到收费的password也可以提交&lt;a href=&#34;https://github.com/L-codes/pwcrack-framework/issues&#34;&gt;Issues&lt;/a&gt;，共同完善localdb&lt;/li&gt; &#xA; &lt;li&gt;如在使用过程中发现bug或有好的建议，欢迎提交&lt;a href=&#34;https://github.com/L-codes/pwcrack-framework/issues&#34;&gt;Issues&lt;/a&gt;和&lt;a href=&#34;https://github.com/L-codes/pwcrack-framework/pulls&#34;&gt;Pull Requests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cloudfoundry/routing-release</title>
    <updated>2022-11-14T01:37:11Z</updated>
    <id>tag:github.com,2022-11-14:/cloudfoundry/routing-release</id>
    <link href="https://github.com/cloudfoundry/routing-release" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is the BOSH release for cloud foundry routers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Routing Release&lt;/h1&gt; &#xA;&lt;p&gt;This repository is a &lt;a href=&#34;https://github.com/cloudfoundry/bosh&#34;&gt;BOSH release&lt;/a&gt; for deploying Gorouter, TCP Routing, and other associated tasks that provide HTTP and TCP routing in Cloud Foundry foundations.&lt;/p&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;Our BOSH release is available on &lt;a href=&#34;http://bosh.io/releases/github.com/cloudfoundry/routing-release&#34;&gt;bosh.io&lt;/a&gt; and on our &lt;a href=&#34;https://github.com/cloudfoundry/routing-release/releases&#34;&gt;GitHub Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you have a concrete issue to report or a change to request, please create a &lt;a href=&#34;https://github.com/cloudfoundry/routing-release/issues/new/choose&#34;&gt;Github issue on routing-release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Issues with any related submodules (&lt;a href=&#34;https://github.com/cloudfoundry/gorouter&#34;&gt;Gorouter&lt;/a&gt;, &lt;a href=&#34;https://github.com/cloudfoundry/routing-api&#34;&gt;Routing API&lt;/a&gt;, &lt;a href=&#34;https://github.com/cloudfoundry/route-registrar&#34;&gt;Route Registrar&lt;/a&gt;, &lt;a href=&#34;https://github.com/cloudfoundry/cf-tcp-router&#34;&gt;CF TCP Router&lt;/a&gt;) should be created here instead.&lt;/p&gt; &#xA;&lt;p&gt;You can also reach us on Slack at &lt;a href=&#34;https://cloudfoundry.slack.com&#34;&gt;cloudfoundry.slack.com&lt;/a&gt; in the &lt;a href=&#34;https://cloudfoundry.slack.com/app_redirect?channel=C01ABMVNE9E&#34;&gt;&lt;code&gt;#cf-for-vms-networking&lt;/code&gt;&lt;/a&gt;. channel.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/cloudfoundry/routing-release/develop/#routing-contributor-resources&#34;&gt;Routing Contributing Resources&lt;/a&gt; section for more information on how to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cloudfoundry/routing-release/develop/#routing-operator-resources&#34;&gt;Routing Operator Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cloudfoundry/routing-release/develop/#routing-app-developer-resources&#34;&gt;Routing App Developer Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cloudfoundry/routing-release/develop/#routing-contributor-resources&#34;&gt;Routing Contributor Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;routing-operator-resources&#34;&gt;&lt;/a&gt; Routing Operator Resources&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;high-availability&#34;&gt;&lt;/a&gt; High Availability&lt;/h3&gt; &#xA;&lt;p&gt;The TCP Router and Routing API are stateless and horizontally scalable. The TCP Routers must be fronted by a load balancer for high-availability. The Routing API depends on a database, that can be clustered for high-availability. For high availability, deploy multiple instances of each job, distributed across regions of your infrastructure.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;routing-api&#34;&gt;&lt;/a&gt; Routing API&lt;/h3&gt; &#xA;&lt;p&gt;For details refer to &lt;a href=&#34;https://github.com/cloudfoundry/routing-api/raw/master/README.md&#34;&gt;Routing API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;metrics&#34;&gt;&lt;/a&gt; Metrics&lt;/h3&gt; &#xA;&lt;p&gt;For documentation on metrics available for streaming from Routing components through the Loggregator &lt;a href=&#34;https://docs.cloudfoundry.org/loggregator/architecture.html&#34;&gt;Firehose&lt;/a&gt;, visit the &lt;a href=&#34;http://docs.cloudfoundry.org/loggregator/all_metrics.html#routing&#34;&gt;CloudFoundry Documentation&lt;/a&gt;. You can use the &lt;a href=&#34;https://github.com/cloudfoundry/noaa&#34;&gt;NOAA Firehose sample app&lt;/a&gt; to quickly consume metrics from the Firehose.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;routing-app-developer-resources&#34;&gt;&lt;/a&gt; Routing App Developer Resources&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;session-affinity&#34;&gt;&lt;/a&gt; Session Affinity&lt;/h3&gt; &#xA;&lt;p&gt;For more information on how Routing release accomplishes session affinity, i.e. sticky sessions, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/cloudfoundry/routing-release/develop/docs/session-affinity.md&#34;&gt;Session Affinity document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;headers&#34;&gt;&lt;/a&gt; Headers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cloudfoundry/routing-release/develop/docs/x_cf_headers.md&#34;&gt;X-CF Headers&lt;/a&gt; describes the X-CF headers that are set on requests and responses inside of CF.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;routing-contributor-resources&#34;&gt;&lt;/a&gt; Routing Contributor Resources&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;ci-statues&#34;&gt;&lt;/a&gt; CI Statuses&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Job&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unit tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://networking.ci.cf-app.com/teams/ga/pipelines/routing/jobs/routing-release-unit&#34;&gt;&lt;img src=&#34;https://networking.ci.cf-app.com/api/v1/teams/ga/pipelines/routing/jobs/routing-release-unit/badge&#34; alt=&#34;networking.ci.cf-app.com&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;performance tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://networking.ci.cf-app.com/teams/ga/pipelines/routing/jobs/diana-tcp-perf-tests&#34;&gt;&lt;img src=&#34;https://networking.ci.cf-app.com/api/v1/teams/ga/pipelines/routing/jobs/diana-tcp-perf-tests/badge&#34; alt=&#34;networking.ci.cf-app.com&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;smoke tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://networking.ci.cf-app.com/teams/ga/pipelines/routing/jobs/cf-deployment-smoke-and-indicator-protocol-tests&#34;&gt;&lt;img src=&#34;https://networking.ci.cf-app.com/api/v1/teams/ga/pipelines/routing/jobs/cf-deployment-smoke-and-indicator-protocol-tests/badge&#34; alt=&#34;networking.ci.cf-app.com&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;developer-workflow&#34;&gt;&lt;/a&gt; Developer Workflow&lt;/h3&gt; &#xA;&lt;p&gt;When working on individual components of the Routing Release, work out of the submodules under &lt;code&gt;src/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run the appropriate unit tests (see &lt;a href=&#34;https://raw.githubusercontent.com/cloudfoundry/routing-release/develop/#running-unit-and-integration-tests&#34;&gt;Testing&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;release&lt;/code&gt; branch contains code that has been released. All development work happens on the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h4&gt;Get the code&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/workspace&#xA;cd ~/workspace&#xA;git clone https://github.com/cloudfoundry/routing-release.git&#xA;cd routing-release/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Initialize and sync submodules.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;running-bosh-job-templating-tests&#34;&gt;&lt;/a&gt; Running BOSH Job Templating Tests&lt;/h4&gt; &#xA;&lt;p&gt;From the root of the repo, run:&lt;/p&gt; &#xA;&lt;h5&gt;Run the specs&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec ./spec/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Lint the specs&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rubocop ./spec/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not have &lt;code&gt;rspec&lt;/code&gt; or &lt;code&gt;rubocop&lt;/code&gt; installed locally, run &lt;code&gt;./scripts/start-docker-for-testing.sh&lt;/code&gt; and execute the commands in the docker container. Prepend &#34;sudo&#34; to the script if you are an unprivileged user.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;running-unit-and-integration-tests&#34;&gt;&lt;/a&gt; Running Unit and Integration Tests&lt;/h4&gt; &#xA;&lt;h5&gt;In a Docker container&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run tests using the script provided. This script pulls a docker image and runs the tests within a container because integration tests require Linux specific features.&lt;/p&gt; &lt;p&gt;Notice/warning: the script is called &lt;code&gt;run-unit-tests-in-docker&lt;/code&gt; but it really runs unit &lt;em&gt;and&lt;/em&gt; integration tests, that&#39;s why they need to run in a container.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/run-unit-tests-in-docker #sudo for unprivileged users&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;d like to run a specific component&#39;s tests in a Docker container, the &lt;code&gt;run-unit-tests&lt;/code&gt; script also takes a package name as an argument:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/run-unit-tests-in-docker gorouter&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Locally&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;d like to run the unit and integration tests for an individual component locally, we recommend you run &lt;code&gt;bin/test&lt;/code&gt; in that component&#39;s directory. Please make sure it&#39;s a component that doesn&#39;t require a Linux operating system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;running-acceptance-tests&#34;&gt;&lt;/a&gt; Running Acceptance tests&lt;/h4&gt; &#xA;&lt;p&gt;The Routing Acceptance Tests must run against a full Cloud Foundry deployment. One method is to &lt;a href=&#34;https://github.com/cloudfoundry/cf-deployment/tree/master/iaas-support/bosh-lite&#34;&gt;deploy Cloud Foundry&lt;/a&gt; on a BOSH lite with cf-deployment.&lt;/p&gt; &#xA;&lt;p&gt;To run the &lt;a href=&#34;https://github.com/cloudfoundry/routing-acceptance-tests&#34;&gt;Routing Acceptance Tests&lt;/a&gt;, see the README.md.&lt;/p&gt;</summary>
  </entry>
</feed>