<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-18T01:35:29Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yjacquin/fast-mcp</title>
    <updated>2025-06-18T01:35:29Z</updated>
    <id>tag:github.com,2025-06-18:/yjacquin/fast-mcp</id>
    <link href="https://github.com/yjacquin/fast-mcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby Implementation of the Model Context Protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fast MCP üöÄ&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Connect AI models to your Ruby applications with ease&lt;/h3&gt; &#xA; &lt;p&gt;No complex protocols, no integration headaches, no compatibility issues ‚Äì just beautiful, expressive Ruby code.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://badge.fury.io/rb/fast-mcp&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/fast-mcp.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yjacquin/fast-mcp/workflows/CI/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/yjacquin/fast-mcp/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/code_of_conduct.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/9HHfAtY3HF&#34;&gt;&lt;img src=&#34;https://dcbadge.limes.pink/api/server/https://discord.gg/9HHfAtY3HF?style=flat&#34; alt=&#34;Discord invite link&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üåü Interface your Servers with LLMs in minutes !&lt;/h2&gt; &#xA;&lt;p&gt;AI models are powerful, but they need to interact with your applications to be truly useful. Traditional approaches mean wrestling with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üîÑ Complex communication protocols and custom JSON formats&lt;/li&gt; &#xA; &lt;li&gt;üîå Integration challenges with different model providers&lt;/li&gt; &#xA; &lt;li&gt;üß© Compatibility issues between your app and AI tools&lt;/li&gt; &#xA; &lt;li&gt;üß† Managing the state between AI interactions and your data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Fast MCP solves all these problems by providing a clean, Ruby-focused implementation of the &lt;a href=&#34;https://github.com/modelcontextprotocol&#34;&gt;Model Context Protocol&lt;/a&gt;, making AI integration a joy, not a chore.&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üõ†Ô∏è &lt;strong&gt;Tools API&lt;/strong&gt; - Let AI models call your Ruby functions securely, with in-depth argument validation through &lt;a href=&#34;https://github.com/dry-rb/dry-schema&#34;&gt;Dry-Schema&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;strong&gt;Resources API&lt;/strong&gt; - Share data between your app and AI models&lt;/li&gt; &#xA; &lt;li&gt;üîÑ &lt;strong&gt;Multiple Transports&lt;/strong&gt; - Choose from STDIO, HTTP, or SSE based on your needs&lt;/li&gt; &#xA; &lt;li&gt;üß© &lt;strong&gt;Framework Integration&lt;/strong&gt; - Works seamlessly with Rails, Sinatra or any Rack app.&lt;/li&gt; &#xA; &lt;li&gt;üîí &lt;strong&gt;Authentication Support&lt;/strong&gt; - Secure your AI-powered endpoints with ease&lt;/li&gt; &#xA; &lt;li&gt;üöÄ &lt;strong&gt;Real-time Updates&lt;/strong&gt; - Subscribe to changes for interactive applications&lt;/li&gt; &#xA; &lt;li&gt;üéØ &lt;strong&gt;Dynamic Filtering&lt;/strong&gt; - Control tool/resource access based on request context (permissions, API versions, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíé What Makes FastMCP Great&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Define tools for AI models to use&#xA;server = FastMcp::Server.new(name: &#39;popular-users&#39;, version: &#39;1.0.0&#39;)&#xA;&#xA;# Define a tool by inheriting from FastMcp::Tool&#xA;class CreateUserTool &amp;lt; FastMcp::Tool&#xA;  description &#34;Create a user&#34;&#xA;    # These arguments will generate the needed JSON to be presented to the MCP Client&#xA;    # And they will be validated at run time.&#xA;    # The validation is based off Dry-Schema, with the addition of the description.&#xA;  arguments do&#xA;    required(:first_name).filled(:string).description(&#34;First name of the user&#34;)&#xA;    optional(:age).filled(:integer).description(&#34;Age of the user&#34;)&#xA;    required(:address).hash do&#xA;      optional(:street).filled(:string)&#xA;      optional(:city).filled(:string)&#xA;      optional(:zipcode).filled(:string)&#xA;    end&#xA;  end&#xA;&#xA;  def call(first_name:, age: nil, address: {})&#xA;    User.create!(first_name:, age:, address:)&#xA;  end&#xA;end&#xA;&#xA;# Register the tool with the server&#xA;server.register_tool(CreateUserTool)&#xA;&#xA;# Share data resources with AI models by inheriting from FastMcp::Resource&#xA;class PopularUsers &amp;lt; FastMcp::Resource&#xA;  uri &#34;myapp:///users/popular&#34;&#xA;  resource_name &#34;Popular Users&#34;&#xA;  mime_type &#34;application/json&#34;&#xA;&#xA;  def content&#xA;    JSON.generate(User.popular.limit(5).as_json)&#xA;  end&#xA;end&#xA;&#xA;class User &amp;lt; FastMcp::Resource&#xA;  uri &#34;myapp:///users/{id}&#34; # This is a resource template&#xA;  resource_name &#34;user&#34;&#xA;  mime_type &#34;application/json&#34;&#xA;&#xA;  def content&#xA;    id = params[:id] # params are computed from the uri pattern&#xA;&#xA;    JSON.generate(User.find(id).as_json)&#xA;  end&#xA;end&#xA;&#xA;# Register the resource with the server&#xA;server.register_resources(PopularUsers, User)&#xA;&#xA;# Accessing the resource through the server&#xA;server.read_resource(PopularUsers.uri)&#xA;&#xA;# Notify the resource content has been updated to clients&#xA;server.notify_resource_updated(PopularUsers.variabilized_uri)&#xA;&#xA;# Notifiy the content of a resource from a template has been updated to clients&#xA;server.notify_resource_updated(User.variabilized_uri(id: 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üéØ Dynamic Tool Filtering&lt;/h3&gt; &#xA;&lt;p&gt;Control which tools and resources are available based on request context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Tag your tools for easy filtering&#xA;class AdminTool &amp;lt; FastMcp::Tool&#xA;  tags :admin, :dangerous&#xA;  description &#34;Perform admin operations&#34;&#xA;  &#xA;  def call&#xA;    # Admin only functionality&#xA;  end&#xA;end&#xA;&#xA;# Filter tools based on user permissions&#xA;server.filter_tools do |request, tools|&#xA;  user_role = request.params[&#39;role&#39;]&#xA;  &#xA;  case user_role&#xA;  when &#39;admin&#39;&#xA;    tools # Admins see all tools&#xA;  when &#39;user&#39;&#xA;    tools.reject { |t| t.tags.include?(:admin) }&#xA;  else&#xA;    tools.select { |t| t.tags.include?(:public) }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üöÇ Fast Ruby on Rails implementation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle add fast-mcp&#xA;bin/rails generate fast_mcp:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add a configurable &lt;code&gt;fast_mcp.rb&lt;/code&gt; initializer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fast_mcp&#39;&#xA;&#xA;FastMcp.mount_in_rails(&#xA;  Rails.application,&#xA;  name: Rails.application.class.module_parent_name.underscore.dasherize,&#xA;  version: &#39;1.0.0&#39;,&#xA;  path_prefix: &#39;/mcp&#39;, # This is the default path prefix&#xA;  messages_route: &#39;messages&#39;, # This is the default route for the messages endpoint&#xA;  sse_route: &#39;sse&#39;, # This is the default route for the SSE endpoint&#xA;  # Add allowed origins below, it defaults to Rails.application.config.hosts&#xA;  # allowed_origins: [&#39;localhost&#39;, &#39;127.0.0.1&#39;, &#39;example.com&#39;, /.*\.example\.com/],&#xA;  # localhost_only: true, # Set to false to allow connections from other hosts&#xA;  # whitelist specific ips to if you want to run on localhost and allow connections from other IPs&#xA;  # allowed_ips: [&#39;127.0.0.1&#39;, &#39;::1&#39;]&#xA;  # authenticate: true,       # Uncomment to enable authentication&#xA;  # auth_token: &#39;your-token&#39; # Required if authenticate: true&#xA;) do |server|&#xA;  Rails.application.config.after_initialize do&#xA;    # FastMcp will automatically discover and register:&#xA;    # - All classes that inherit from ApplicationTool (which uses ActionTool::Base)&#xA;    # - All classes that inherit from ApplicationResource (which uses ActionResource::Base)&#xA;    server.register_tools(*ApplicationTool.descendants)&#xA;    server.register_resources(*ApplicationResource.descendants)&#xA;    # alternatively, you can register tools and resources manually:&#xA;    # server.register_tool(MyTool)&#xA;    # server.register_resource(MyResource)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The install script will also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add app/resources folder&lt;/li&gt; &#xA; &lt;li&gt;add app/tools folder&lt;/li&gt; &#xA; &lt;li&gt;add app/tools/sample_tool.rb&lt;/li&gt; &#xA; &lt;li&gt;add app/resources/sample_resource.rb&lt;/li&gt; &#xA; &lt;li&gt;add ApplicationTool to inherit from&lt;/li&gt; &#xA; &lt;li&gt;add ApplicationResource to inherit from as well&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Rails-friendly class naming conventions&lt;/h4&gt; &#xA;&lt;p&gt;For Rails applications, FastMCP provides Rails-style class names to better fit with Rails conventions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ActionTool::Base&lt;/code&gt; - An alias for &lt;code&gt;FastMcp::Tool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ActionResource::Base&lt;/code&gt; - An alias for &lt;code&gt;FastMcp::Resource&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are automatically set up in Rails applications. You can use either naming convention in your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Using Rails-style naming:&#xA;class MyTool &amp;lt; ActionTool::Base&#xA;  description &#34;My awesome tool&#34;&#xA;&#xA;  arguments do&#xA;    required(:input).filled(:string)&#xA;  end&#xA;&#xA;  def call(input:)&#xA;    # Your implementation&#xA;  end&#xA;end&#xA;&#xA;# Using standard FastMcp naming:&#xA;class AnotherTool &amp;lt; FastMcp::Tool&#xA;  # Both styles work interchangeably in Rails apps&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When creating new tools or resources, the generators will use the Rails naming convention by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/tools/application_tool.rb&#xA;class ApplicationTool &amp;lt; ActionTool::Base&#xA;  # Base methods for all tools&#xA;end&#xA;&#xA;# app/resources/application_resource.rb&#xA;class ApplicationResource &amp;lt; ActionResource::Base&#xA;  # Base methods for all resources&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Easy Sinatra setup&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ll let you check out the dedicated &lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/docs/sinatra_integration.md&#34;&gt;sinatra integration docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Create a Server with Tools and Resources and STDIO transport&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fast_mcp&#39;&#xA;&#xA;# Create an MCP server&#xA;server = FastMcp::Server.new(name: &#39;my-ai-server&#39;, version: &#39;1.0.0&#39;)&#xA;&#xA;# Define a tool by inheriting from FastMcp::Tool&#xA;class SummarizeTool &amp;lt; FastMcp::Tool&#xA;  description &#34;Summarize a given text&#34;&#xA;&#xA;  arguments do&#xA;    required(:text).filled(:string).description(&#34;Text to summarize&#34;)&#xA;    optional(:max_length).filled(:integer).description(&#34;Maximum length of summary&#34;)&#xA;  end&#xA;&#xA;  def call(text:, max_length: 100)&#xA;    # Your summarization logic here&#xA;    text.split(&#39;.&#39;).first(3).join(&#39;.&#39;) + &#39;...&#39;&#xA;  end&#xA;end&#xA;&#xA;# Register the tool with the server&#xA;server.register_tool(SummarizeTool)&#xA;&#xA;# Create a resource by inheriting from FastMcp::Resource&#xA;class StatisticsResource &amp;lt; FastMcp::Resource&#xA;  uri &#34;data/statistics&#34;&#xA;  resource_name &#34;Usage Statistics&#34;&#xA;  description &#34;Current system statistics&#34;&#xA;  mime_type &#34;application/json&#34;&#xA;&#xA;  def content&#xA;    JSON.generate({&#xA;      users_online: 120,&#xA;      queries_per_minute: 250,&#xA;      popular_topics: [&#34;Ruby&#34;, &#34;AI&#34;, &#34;WebDev&#34;]&#xA;    })&#xA;  end&#xA;end&#xA;&#xA;# Register the resource with the server&#xA;server.register_resource(StatisticsResource)&#xA;&#xA;# Start the server&#xA;server.start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üß™ Testing with the inspector&lt;/h2&gt; &#xA;&lt;p&gt;MCP has developed a very &lt;a href=&#34;https://github.com/modelcontextprotocol/inspector&#34;&gt;useful inspector&lt;/a&gt;. You can use it to validate your implementation. I suggest you use the examples I provided with this project as an easy boilerplate. Clone this project, then give it a go !&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx @modelcontextprotocol/inspector examples/server_with_stdio_transport.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to test with an SSE transport using a rack middleware:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx @modelcontextprotocol/inspector examples/rack_middleware.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to test over SSE with an authenticated rack middleware:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx @modelcontextprotocol/inspector examples/authenticated_rack_middleware.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can test your custom implementation with the official MCP inspector by using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Test with a stdio transport:&#xA;npx @modelcontextprotocol/inspector path/to/your_ruby_file.rb&#xA;&#xA;# Test with an HTTP / SSE server. In the UI select SSE and input your address.&#xA;npx @modelcontextprotocol/inspector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sinatra&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app.rb&#xA;require &#39;sinatra&#39;&#xA;require &#39;fast_mcp&#39;&#xA;&#xA;use FastMcp::RackMiddleware.new(name: &#39;my-ai-server&#39;, version: &#39;1.0.0&#39;) do |server|&#xA;  # Register tools and resources here&#xA;  server.register_tool(SummarizeTool)&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  &#39;Hello World!&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integrating with Claude Desktop&lt;/h3&gt; &#xA;&lt;p&gt;Add your server to your Claude Desktop configuration at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS: &lt;code&gt;~/Library/Application Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;%APPDATA%\Claude\claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;my-great-server&#34;: {&#xA;      &#34;command&#34;: &#34;ruby&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;/Users/path/to/your/awesome/fast-mcp/server.rb&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to add a MCP server to Claude, Cursor, or other MCP clients?&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/docs/configuring_mcp_clients.md&#34;&gt;configuring_mcp_clients&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìä Supported Specifications&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ &lt;strong&gt;JSON-RPC 2.0&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Full implementation for communication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ &lt;strong&gt;Tool Definition &amp;amp; Calling&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Define and call tools with rich argument types&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ &lt;strong&gt;Resource &amp;amp; Resource Templates Management&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create, read, update, and subscribe to resources&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ &lt;strong&gt;Transport Options&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;STDIO, HTTP, and SSE for flexible integration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ &lt;strong&gt;Framework Integration&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rails, Sinatra, Hanami, and any Rack-compatible framework&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ &lt;strong&gt;Authentication&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Secure your AI endpoints with token authentication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ &lt;strong&gt;Schema Support&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Full JSON Schema for tool arguments with validation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üó∫Ô∏è Use Cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ü§ñ &lt;strong&gt;AI-powered Applications&lt;/strong&gt;: Connect LLMs to your Ruby app&#39;s functionality&lt;/li&gt; &#xA; &lt;li&gt;üìä &lt;strong&gt;Real-time Dashboards&lt;/strong&gt;: Build dashboards with live AI-generated insights&lt;/li&gt; &#xA; &lt;li&gt;üîó &lt;strong&gt;Microservice Communication&lt;/strong&gt;: Use MCP as a clean protocol between services&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;strong&gt;Interactive Documentation&lt;/strong&gt;: Create AI-enhanced API documentation&lt;/li&gt; &#xA; &lt;li&gt;üí¨ &lt;strong&gt;Chatbots and Assistants&lt;/strong&gt;: Build AI assistants with access to your app&#39;s data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üîí Security Features&lt;/h2&gt; &#xA;&lt;p&gt;Fast MCP includes built-in security features to protect your applications:&lt;/p&gt; &#xA;&lt;h3&gt;DNS Rebinding Protection&lt;/h3&gt; &#xA;&lt;p&gt;The HTTP/SSE transport validates the Origin header on all incoming connections to prevent DNS rebinding attacks, which could allow malicious websites to interact with local MCP servers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Configure allowed origins (defaults to [&#39;localhost&#39;, &#39;127.0.0.1&#39;])&#xA;FastMcp.rack_middleware(app,&#xA;  allowed_origins: [&#39;localhost&#39;, &#39;127.0.0.1&#39;, &#39;your-domain.com&#39;, /.*\.your-domain\.com/],&#xA;  localhost_only: false,&#xA;  allowed_ips: [&#39;192.168.1.1&#39;, &#39;10.0.0.1&#39;],&#xA;  # other options...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authentication&lt;/h3&gt; &#xA;&lt;p&gt;Fast MCP supports token-based authentication for all connections:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Enable authentication&#xA;FastMcp.authenticated_rack_middleware(app,&#xA;  auth_token: &#39;your-secret-token&#39;,&#xA;  # other options...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìñ Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/docs/getting_started.md&#34;&gt;üöÄ Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/docs/integration_guide.md&#34;&gt;üß© Integration Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/docs/rails_integration.md&#34;&gt;üõ§Ô∏è Rails Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/docs/sinatra_integration.md&#34;&gt;üåê Sinatra Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/docs/resources.md&#34;&gt;üìö Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/docs/tools.md&#34;&gt;üõ†Ô∏è Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/docs/security.md&#34;&gt;üîí Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/docs/filtering.md&#34;&gt;üéØ Dynamic Filtering&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíª Examples&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/examples&#34;&gt;examples directory&lt;/a&gt; for more detailed examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;üî® Basic Examples&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/examples/server_with_stdio_transport.rb&#34;&gt;Simple Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/examples/tool_examples.rb&#34;&gt;Tool Examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;üåê Web Integration&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/examples/rack_middleware.rb&#34;&gt;Rack Middleware&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/examples/authenticated_rack_middleware.rb&#34;&gt;Authenticated Endpoints&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üß™ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 3.2+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üë• Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Fast MCP! Here&#39;s how you can help:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create a new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://raw.githubusercontent.com/yjacquin/fast-mcp/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ License&lt;/h2&gt; &#xA;&lt;p&gt;This project is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üôè Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/modelcontextprotocol&#34;&gt;Model Context Protocol&lt;/a&gt; team for creating the specification&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/dry-rb/dry-schema&#34;&gt;Dry-Schema&lt;/a&gt; team for the argument validation.&lt;/li&gt; &#xA; &lt;li&gt;All contributors to this project&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>