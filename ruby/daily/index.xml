<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-27T01:35:05Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ruby/json</title>
    <updated>2024-10-27T01:35:05Z</updated>
    <id>tag:github.com,2024-10-27:/ruby/json</id>
    <link href="https://github.com/ruby/json" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JSON implementation for Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSON implementation for Ruby&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ruby/json/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/ruby/json/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This is an implementation of the JSON specification according to RFC 7159 &lt;a href=&#34;http://www.ietf.org/rfc/rfc7159.txt&#34;&gt;http://www.ietf.org/rfc/rfc7159.txt&lt;/a&gt; . There is two variants available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A pure ruby variant, that relies on the &lt;code&gt;strscan&lt;/code&gt; extensions, which is part of the ruby standard library.&lt;/li&gt; &#xA; &lt;li&gt;The quite a bit faster native extension variant, which is in parts implemented in C or Java and comes with a parser generated by the &lt;a href=&#34;http://www.colm.net/open-source/ragel/&#34;&gt;Ragel&lt;/a&gt; state machine compiler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both variants of the JSON generator generate UTF-8 character sequences by default. If an :ascii_only option with a true value is given, they escape all non-ASCII and control characters with \uXXXX escape sequences, and support UTF-16 surrogate pairs in order to be able to generate the whole range of unicode code points.&lt;/p&gt; &#xA;&lt;p&gt;All strings, that are to be encoded as JSON strings, should be UTF-8 byte sequences on the Ruby side. To encode raw binary strings, that aren&#39;t UTF-8 encoded, please use the to_json_raw_object method of String (which produces an object, that contains a byte array) and decode the result on the receiving endpoint.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s recommended to use the extension variant of JSON, because it&#39;s faster than the pure ruby variant. If you cannot build it on your system, you can settle for the latter.&lt;/p&gt; &#xA;&lt;p&gt;Install the gem and add to the application&#39;s Gemfile by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle add json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If bundler is not being used to manage dependencies, install the gem by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a pure ruby json only variant of the gem, that can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install json_pure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use JSON you can&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to load the installed variant (either the extension &lt;code&gt;&#39;json&#39;&lt;/code&gt; or the pure variant &lt;code&gt;&#39;json_pure&#39;&lt;/code&gt;). If you have installed the extension variant, you can pick either the extension variant or the pure variant by typing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;json/ext&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;json/pure&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can parse a JSON document into a ruby data structure by calling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;JSON.parse(document)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to generate a JSON document from a ruby data structure call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;JSON.generate(data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;pretty_generate&lt;/code&gt; method (which formats the output more verbosely and nicely) or &lt;code&gt;fast_generate&lt;/code&gt; (which doesn&#39;t do any of the security checks generate performs, e. g. nesting deepness checks).&lt;/p&gt; &#xA;&lt;p&gt;There are also the JSON and JSON[] methods which use parse on a String or generate a JSON document from an array or hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;document = JSON &#39;test&#39;  =&amp;gt; 23 # =&amp;gt; &#34;{\&#34;test\&#34;:23}&#34;&#xA;document = JSON[&#39;test&#39; =&amp;gt; 23] # =&amp;gt; &#34;{\&#34;test\&#34;:23}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;data = JSON &#39;{&#34;test&#34;:23}&#39;  # =&amp;gt; {&#34;test&#34;=&amp;gt;23}&#xA;data = JSON[&#39;{&#34;test&#34;:23}&#39;] # =&amp;gt; {&#34;test&#34;=&amp;gt;23}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can choose to load a set of common additions to ruby core&#39;s objects if you&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;json/add/core&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After requiring this you can, e. g., serialise/deserialise Ruby ranges:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;JSON JSON(1..10) # =&amp;gt; 1..10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find out how to add JSON support to other or your own classes, read the section &#34;More Examples&#34; below.&lt;/p&gt; &#xA;&lt;h2&gt;Serializing exceptions&lt;/h2&gt; &#xA;&lt;p&gt;The JSON module doesn&#39;t extend &lt;code&gt;Exception&lt;/code&gt; by default. If you convert an &lt;code&gt;Exception&lt;/code&gt; object to JSON, it will by default only include the exception message.&lt;/p&gt; &#xA;&lt;p&gt;To include the full details, you must either load the &lt;code&gt;json/add/core&lt;/code&gt; mentioned above, or specifically load the exception addition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;json/add/exception&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;p&gt;To create a JSON document from a ruby data structure, you can call &lt;code&gt;JSON.generate&lt;/code&gt; like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json = JSON.generate [1, 2, {&#34;a&#34;=&amp;gt;3.141}, false, true, nil, 4..10]&#xA;# =&amp;gt; &#34;[1,2,{\&#34;a\&#34;:3.141},false,true,null,\&#34;4..10\&#34;]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get back a ruby data structure from a JSON document, you have to call JSON.parse on it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;JSON.parse json&#xA;# =&amp;gt; [1, 2, {&#34;a&#34;=&amp;gt;3.141}, false, true, nil, &#34;4..10&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that the range from the original data structure is a simple string now. The reason for this is, that JSON doesn&#39;t support ranges or arbitrary classes. In this case the json library falls back to call &lt;code&gt;Object#to_json&lt;/code&gt;, which is the same as &lt;code&gt;#to_s.to_json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to add JSON support serialization to arbitrary classes by simply implementing a more specialized version of the &lt;code&gt;#to_json method&lt;/code&gt;, that should return a JSON object (a hash converted to JSON with &lt;code&gt;#to_json&lt;/code&gt;) like this (don&#39;t forget the &lt;code&gt;*a&lt;/code&gt; for all the arguments):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Range&#xA;  def to_json(*a)&#xA;    {&#xA;      &#39;json_class&#39;   =&amp;gt; self.class.name, # = &#39;Range&#39;&#xA;      &#39;data&#39;         =&amp;gt; [ first, last, exclude_end? ]&#xA;    }.to_json(*a)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The hash key &lt;code&gt;json_class&lt;/code&gt; is the class, that will be asked to deserialise the JSON representation later. In this case it&#39;s &lt;code&gt;Range&lt;/code&gt;, but any namespace of the form &lt;code&gt;A::B&lt;/code&gt; or &lt;code&gt;::A::B&lt;/code&gt; will do. All other keys are arbitrary and can be used to store the necessary data to configure the object to be deserialised.&lt;/p&gt; &#xA;&lt;p&gt;If the key &lt;code&gt;json_class&lt;/code&gt; is found in a JSON object, the JSON parser checks if the given class responds to the &lt;code&gt;json_create&lt;/code&gt; class method. If so, it is called with the JSON object converted to a Ruby hash. So a range can be deserialised by implementing &lt;code&gt;Range.json_create&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Range&#xA;  def self.json_create(o)&#xA;    new(*o[&#39;data&#39;])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now it possible to serialise/deserialise ranges as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json = JSON.generate [1, 2, {&#34;a&#34;=&amp;gt;3.141}, false, true, nil, 4..10]&#xA;# =&amp;gt; &#34;[1,2,{\&#34;a\&#34;:3.141},false,true,null,{\&#34;json_class\&#34;:\&#34;Range\&#34;,\&#34;data\&#34;:[4,10,false]}]&#34;&#xA;JSON.parse json&#xA;# =&amp;gt; [1, 2, {&#34;a&#34;=&amp;gt;3.141}, false, true, nil, 4..10]&#xA;json = JSON.generate [1, 2, {&#34;a&#34;=&amp;gt;3.141}, false, true, nil, 4..10]&#xA;# =&amp;gt; &#34;[1,2,{\&#34;a\&#34;:3.141},false,true,null,{\&#34;json_class\&#34;:\&#34;Range\&#34;,\&#34;data\&#34;:[4,10,false]}]&#34;&#xA;JSON.parse json, :create_additions =&amp;gt; true&#xA;# =&amp;gt; [1, 2, {&#34;a&#34;=&amp;gt;3.141}, false, true, nil, 4..10]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;JSON.generate&lt;/code&gt; always creates the shortest possible string representation of a ruby data structure in one line. This is good for data storage or network protocols, but not so good for humans to read. Fortunately there&#39;s also &lt;code&gt;JSON.pretty_generate&lt;/code&gt; (or &lt;code&gt;JSON.pretty_generate&lt;/code&gt;) that creates a more readable output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt; puts JSON.pretty_generate([1, 2, {&#34;a&#34;=&amp;gt;3.141}, false, true, nil, 4..10])&#xA; [&#xA;   1,&#xA;   2,&#xA;   {&#xA;     &#34;a&#34;: 3.141&#xA;   },&#xA;   false,&#xA;   true,&#xA;   null,&#xA;   {&#xA;     &#34;json_class&#34;: &#34;Range&#34;,&#xA;     &#34;data&#34;: [&#xA;       4,&#xA;       10,&#xA;       false&#xA;     ]&#xA;   }&#xA; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also the methods &lt;code&gt;Kernel#j&lt;/code&gt; for generate, and &lt;code&gt;Kernel#jj&lt;/code&gt; for &lt;code&gt;pretty_generate&lt;/code&gt; output to the console, that work analogous to Core Ruby&#39;s &lt;code&gt;p&lt;/code&gt; and the &lt;code&gt;pp&lt;/code&gt; library&#39;s &lt;code&gt;pp&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Release&lt;/h3&gt; &#xA;&lt;p&gt;Update the &lt;code&gt;lib/json/version.rb&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv shell 2.6.5&#xA;rake build&#xA;gem push pkg/json-2.3.0.gem&#xA;&#xA;rbenv shell jruby-9.2.9.0&#xA;rake build&#xA;gem push pkg/json-2.3.0-java.gem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Florian Frank &lt;a href=&#34;mailto:flori@ping.de&#34;&gt;mailto:flori@ping.de&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Ruby License, see &lt;a href=&#34;https://www.ruby-lang.org/en/about/license.txt&#34;&gt;https://www.ruby-lang.org/en/about/license.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;The latest version of this library can be downloaded at&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubygems.org/gems/json&#34;&gt;https://rubygems.org/gems/json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Online Documentation should be located at&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rubydoc.info/gems/json&#34;&gt;https://www.rubydoc.info/gems/json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>elastic/homebrew-tap</title>
    <updated>2024-10-27T01:35:05Z</updated>
    <id>tag:github.com,2024-10-27:/elastic/homebrew-tap</id>
    <link href="https://github.com/elastic/homebrew-tap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Homebrew tap for the Elastic Stack&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elastic Homebrew Tap&lt;/h1&gt; &#xA;&lt;p&gt;This tap is for products in the Elastic stack.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING: main is now the default branch&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since October 2021, the default branch is renamed from &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch is no longer updated and will be &lt;strong&gt;deleted on June 1st, 2023&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://raw.githubusercontent.com/elastic/homebrew-tap/main/#how-do-i-ensure-my-configuration-is-up-to-date&#34;&gt;follow the instructions to update&lt;/a&gt; your configuration.&lt;/p&gt; &#xA;&lt;h2&gt;How do I install these formulae?&lt;/h2&gt; &#xA;&lt;p&gt;Install the tap via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap elastic/tap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can install individual products via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install elastic/tap/elasticsearch-full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following products are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Elasticsearch &lt;code&gt;brew install elastic/tap/elasticsearch-full&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Logstash &lt;code&gt;brew install elastic/tap/logstash-full&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kibana &lt;code&gt;brew install elastic/tap/kibana-full&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Beats &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auditbeat &lt;code&gt;brew install elastic/tap/auditbeat-full&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Filebeat &lt;code&gt;brew install elastic/tap/filebeat-full&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Heartbeat &lt;code&gt;brew install elastic/tap/heartbeat-full&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Metricbeat &lt;code&gt;brew install elastic/tap/metricbeat-full&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Packetbeat &lt;code&gt;brew install elastic/tap/packetbeat-full&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;APM server &lt;code&gt;brew install elastic/tap/apm-server-full&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elastic Cloud Control (ecctl) &lt;code&gt;brew install elastic/tap/ecctl&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Logstash, Beats and APM server, we fully support the OSS distributions too; replace &lt;code&gt;-full&lt;/code&gt; with &lt;code&gt;-oss&lt;/code&gt; in any of the above commands to install the OSS distribution. Note that the default distribution and OSS distribution of a product can not be installed at the same time.&lt;/p&gt; &#xA;&lt;h2&gt;How do I ensure my configuration is still up to date after the branch renaming?&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command to update your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew untap elastic/tap --force&#xA;brew tap elastic/tap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify your configuration is based on the &lt;code&gt;main&lt;/code&gt; branch with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git -C /usr/local/homebrew/Library/Taps/elastic/homebrew-tap status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should have the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;On branch main&#xA;Your branch is up to date with &#39;origin/main&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;brew help&lt;/code&gt;, &lt;code&gt;man brew&lt;/code&gt; or check &lt;a href=&#34;https://github.com/Homebrew/brew/raw/master/docs/README.md&#34;&gt;Homebrew&#39;s documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Calling bottle :unneeded is deprecated!&lt;/h3&gt; &#xA;&lt;p&gt;When I execute &lt;code&gt;brew update&lt;/code&gt;, the following warning appears&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Warning: Calling bottle :unneeded is deprecated! There is no replacement.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is related to your configuration not being up-to-date. Your are still using the legacy &lt;code&gt;master&lt;/code&gt; branch which is not updated anymore. Please &lt;a href=&#34;https://raw.githubusercontent.com/elastic/homebrew-tap/main/#how-do-i-ensure-my-configuration-is-up-to-date&#34;&gt;follow the instructions to update&lt;/a&gt; your local configuration to use the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;</summary>
  </entry>
</feed>