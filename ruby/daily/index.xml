<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:41:40Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mikker/passwordless</title>
    <updated>2023-10-22T01:41:40Z</updated>
    <id>tag:github.com,2023-10-22:/mikker/passwordless</id>
    <link href="https://github.com/mikker/passwordless" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üóù Authentication for your Rails app without the icky-ness of passwords&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://s3.brnbw.com/Passwordless-title-gaIVkX0sPg.svg?sanitize=true&#34; alt=&#34;Passwordless&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mikker/passwordless/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/mikker/passwordless/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/passwordless&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/passwordless.svg?sanitize=true&#34; alt=&#34;Rubygems&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/mikker/passwordless&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/mikker/passwordless/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add authentication to your Rails app without all the icky-ness of passwords. &lt;em&gt;Magic link&lt;/em&gt; authentication, if you will. We call it &lt;em&gt;passwordless&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add to your bundle and copy over the migrations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle add passwordless&#xA;$ bin/rails passwordless:install:migrations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upgrading&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mikker/passwordless/master/docs/upgrading_to_1_0.md&#34;&gt;Upgrading to Passwordless 1.0&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Passwordless creates a single model called &lt;code&gt;Passwordless::Session&lt;/code&gt;. It doesn&#39;t come with its own &lt;code&gt;User&lt;/code&gt; model, it expects you to create one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bin/rails generate model User email&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then specify which field on your &lt;code&gt;User&lt;/code&gt; record is the email field with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord&#xA;  validates :email,&#xA;            presence: true,&#xA;            uniqueness: { case_sensitive: false },&#xA;            format: { with: URI::MailTo::EMAIL_REGEXP }&#xA;&#xA;  passwordless_with :email # &amp;lt;-- here!&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, mount the engine in your routes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.routes.draw do&#xA;  passwordless_for :users&#xA;&#xA;  # other routes&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting the current user, restricting access, the usual&lt;/h3&gt; &#xA;&lt;p&gt;Passwordless doesn&#39;t give you &lt;code&gt;current_user&lt;/code&gt; automatically. Here&#39;s how you could add it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  include Passwordless::ControllerHelpers # &amp;lt;-- This!&#xA;&#xA;  # ...&#xA;&#xA;  helper_method :current_user&#xA;&#xA;  private&#xA;&#xA;  def current_user&#xA;    @current_user ||= authenticate_by_session(User)&#xA;  end&#xA;&#xA;  def require_user!&#xA;    return if current_user&#xA;    save_passwordless_redirect_location!(User) # &amp;lt;-- optional, see below&#xA;    redirect_to root_path, flash: { error: &#39;You are not worthy!&#39; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Et voil√†:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class VerySecretThingsController &amp;lt; ApplicationController&#xA;  before_action :require_user!&#xA;&#xA;  def index&#xA;    @things = current_user.very_secret_things&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Providing your own templates&lt;/h3&gt; &#xA;&lt;p&gt;To make Passwordless look like your app, override the bundled views by adding your own. You can manually copy the specific views that you need or copy them to your application with &lt;code&gt;rails generate passwordless:views&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Passwordless has 2 action views and 1 mailer view:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# the form where the user inputs their email address&#xA;app/views/passwordless/sessions/new.html.erb&#xA;# the form where the user inputs their just received token&#xA;app/views/passwordless/sessions/show.html.erb&#xA;# the email with the token and magic link&#xA;app/views/passwordless/mailer/sign_in.text.erb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/mikker/passwordless/tree/master/app/views/passwordless&#34;&gt;the bundled views&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Registering new users&lt;/h3&gt; &#xA;&lt;p&gt;Because your &lt;code&gt;User&lt;/code&gt; record is like any other record, you create one like you normally would. Passwordless provides a helper method to sign in the created user after it is saved ‚Äì like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class UsersController &amp;lt; ApplicationController&#xA;  include Passwordless::ControllerHelpers # &amp;lt;-- This!&#xA;  # (unless you already have it in your ApplicationController)&#xA;&#xA;  def create&#xA;    @user = User.new(user_params)&#xA;&#xA;    if @user.save&#xA;      sign_in(build_passwordless_session(@user)) # &amp;lt;-- This!&#xA;      redirect_to(@user, flash: { notice: &#39;Welcome!&#39; })&#xA;    else&#xA;      render(:new)&#xA;    end&#xA;  end&#xA;&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;URLs and links&lt;/h3&gt; &#xA;&lt;p&gt;By default, Passwordless uses the resource name given to &lt;code&gt;passwordless_for&lt;/code&gt; to generate its routes and helpers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;passwordless_for :users&#xA;  # &amp;lt;%= users_sign_in_path %&amp;gt; # =&amp;gt; /users/sign_in&#xA;&#xA;passwordless_for :users, at: &#39;/&#39;, as: :auth&#xA;  # &amp;lt;%= auth_sign_in_path %&amp;gt; # =&amp;gt; /sign_in&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also be sure to &lt;a href=&#34;http://guides.rubyonrails.org/action_mailer_basics.html#generating-urls-in-action-mailer-views&#34;&gt;specify ActionMailer&#39;s &lt;code&gt;default_url_options.host&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;To customize Passwordless, create a file &lt;code&gt;config/initializers/passwordless.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default values are shown below. It&#39;s recommended to only include the ones that you specifically want to modify.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Passwordless.configure do |config|&#xA;  config.default_from_address = &#34;CHANGE_ME@example.com&#34;&#xA;  config.parent_mailer = &#34;ActionMailer::Base&#34;&#xA;  config.restrict_token_reuse = false # Can a token/link be used multiple times?&#xA;  config.token_generator = Passwordless::ShortTokenGenerator.new # Used to generate magic link tokens.&#xA;&#xA;  config.expires_at = lambda { 1.year.from_now } # How long until a signed in session expires.&#xA;  config.timeout_at = lambda { 10.minutes.from_now } # How long until a token/magic link times out.&#xA;&#xA;  config.redirect_back_after_sign_in = true # When enabled the user will be redirected to their previous page, or a page specified by the `destination_path` query parameter, if available.&#xA;  config.redirect_to_response_options = {} # Additional options for redirects.&#xA;  config.success_redirect_path = &#39;/&#39; # After a user successfully signs in&#xA;  config.failure_redirect_path = &#39;/&#39; # After a sign in fails&#xA;  config.sign_out_redirect_path = &#39;/&#39; # After a user signs out&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delivery method&lt;/h3&gt; &#xA;&lt;p&gt;By default, Passwordless sends emails. See &lt;a href=&#34;https://raw.githubusercontent.com/mikker/passwordless/master/#providing-your-own-templates&#34;&gt;Providing your own templates&lt;/a&gt;. If you need to customize this further, you can do so in the &lt;code&gt;after_session_save&lt;/code&gt; callback.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;config/initializers/passwordless.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Passwordless.configure do |config|&#xA;  config.after_session_save = lambda do |session, request|&#xA;    # Default behavior is&#xA;    # Passwordless::Mailer.sign_in(session).deliver_now&#xA;&#xA;    # You can change behavior to do something with session model. For example,&#xA;    # SmsApi.send_sms(session.authenticatable.phone_number, session.token)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Token generation&lt;/h3&gt; &#xA;&lt;p&gt;By default Passwordless generates short, 6-digit, alpha numeric tokens. You can change the generator using &lt;code&gt;Passwordless.config.token_generator&lt;/code&gt; to something else that responds to &lt;code&gt;call(session)&lt;/code&gt; eg.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Passwordless.configure do |config|&#xA;  config.token_generator = lambda do |session|&#xA;    &#34;probably-stupid-token-#{session.user_agent}-#{Time.current}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Passwordless will keep generating tokens until it finds one that hasn&#39;t been used yet. So be sure to use some kind of method where matches are unlikely.&lt;/p&gt; &#xA;&lt;h3&gt;Timeout and Expiry&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;timeout&lt;/em&gt; is the time by which the generated token and magic link is invalidated. After this the token cannot be used to sign in to your app and the user will need to request a new token.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;expiry&lt;/em&gt; is the expiration time of the session of a logged in user. Once this is expired, the user is signed out.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Passwordless&#39; session relies on Rails&#39; own session and so will never live longer than that.&lt;/p&gt; &#xA;&lt;p&gt;To configure your Rails session, in &lt;code&gt;config/initializers/session_store.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.session_store :cookie_store,&#xA;  expire_after: 1.year,&#xA;  # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Redirection after sign-in&lt;/h3&gt; &#xA;&lt;p&gt;By default Passwordless will redirect back to where the user wanted to go &lt;em&gt;if&lt;/em&gt; it knows where that is -- so you&#39;ll have to help it. &lt;code&gt;Passwordless::ControllerHelpers&lt;/code&gt; provide a method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  include Passwordless::ControllerHelpers # &amp;lt;-- Probably already have this!&#xA;&#xA;  # ...&#xA;&#xA;  def require_user!&#xA;    return if current_user&#xA;    save_passwordless_redirect_location!(User) # &amp;lt;-- this one!&#xA;    redirect_to root_path, flash: {error: &#39;You are not worthy!&#39;}&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be turned off with &lt;code&gt;Passwordless.config.redirect_back_after_sign_in = false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Looking up the user&lt;/h3&gt; &#xA;&lt;p&gt;By default Passwordless uses the &lt;code&gt;passwordless_with&lt;/code&gt; column to &lt;em&gt;case insensitively&lt;/em&gt; fetch the user resource.&lt;/p&gt; &#xA;&lt;p&gt;You can override this by defining a class method &lt;code&gt;fetch_resource_for_passwordless&lt;/code&gt; in your user model. This method will be called with the down-cased, stripped &lt;code&gt;email&lt;/code&gt; and should return an &lt;code&gt;ActiveRecord&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord&#xA;  def self.fetch_resource_for_passwordless(email)&#xA;    find_or_create_by(email: email)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Claiming tokens&lt;/h3&gt; &#xA;&lt;p&gt;By default, a token/magic link &lt;strong&gt;can&lt;/strong&gt; be used more than once.&lt;/p&gt; &#xA;&lt;p&gt;To change, in &lt;code&gt;config/initializers/passwordless.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Passwordless.configure do |config|&#xA;  config.restrict_token_reuse = true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test helpers&lt;/h2&gt; &#xA;&lt;p&gt;To help with testing, a set of test helpers are provided.&lt;/p&gt; &#xA;&lt;p&gt;If you are using RSpec, add the following line to your &lt;code&gt;spec/rails_helper.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;passwordless/test_helpers&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using TestUnit, add this line to your &lt;code&gt;test/test_helper.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;passwordless/test_helpers&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in your controller, request, and system tests/specs, you can utilize the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;passwordless_sign_in(user) # signs you in as a user&#xA;passwordless_sign_out # signs out user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security considerations&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s no reason that this approach should be less secure than the usual username/password combo. In fact this is most often a more secure option, as users don&#39;t get to choose the horrible passwords they can&#39;t seem to stop using. In a way, this is just the same as having each user go through &#34;Forgot password&#34; on every login.&lt;/p&gt; &#xA;&lt;p&gt;But be aware that when everyone authenticates via emails, the way you send those mails becomes a weak spot. Email services usually provide a log of all the mails you send so if your email delivery provider account is compromised, every user in the system is as well. (This is the same for &#34;Forgot password&#34;.) &lt;a href=&#34;https://thenextweb.com/hardfork/2018/01/05/reddit-bitcoin-cash-stolen-hack/&#34;&gt;Reddit was once compromised&lt;/a&gt; using this method.&lt;/p&gt; &#xA;&lt;p&gt;Ideally you should set up your email provider to not log these mails. And be sure to turn on non-SMS 2-factor authentication if your provider supports it.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stas/otp-jwt&#34;&gt;OTP JWT&lt;/a&gt; -- Passwordless JSON Web Tokens&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>