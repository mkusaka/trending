<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T01:34:02Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jekyll/jekyll</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/jekyll/jekyll</id>
    <link href="https://github.com/jekyll/jekyll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üåê Jekyll is a blog-aware static site generator in Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/jekyll&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/jekyll.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jekyll/jekyll/actions?query=workflow%3A%22Continuous+Integration%22+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/jekyll/jekyll/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Linux Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/jekyll/jekyll/branch/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/ci/jekyll/jekyll/master.svg?label=Windows%20build&#34; alt=&#34;Windows Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jekyll/jekyll/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jekyll/jekyll/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. Jekyll is the engine behind &lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub Pages&lt;/a&gt;, which you can use to host sites right from your GitHub repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;Jekyll does what you tell it to do&amp;nbsp;‚Äî no more, no less. It doesn&#39;t try to outsmart users by making bold assumptions, nor does it burden them with needless complexity and configuration. Put simply, Jekyll gets out of your way and allows you to concentrate on what truly matters: your content.&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://jekyllrb.com/philosophy&#34;&gt;https://jekyllrb.com/philosophy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jekyllrb.com/docs/installation/&#34;&gt;Install&lt;/a&gt; the gem&lt;/li&gt; &#xA; &lt;li&gt;Read up about its &lt;a href=&#34;https://jekyllrb.com/docs/usage/&#34;&gt;Usage&lt;/a&gt; and &lt;a href=&#34;https://jekyllrb.com/docs/configuration/&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Take a gander at some existing &lt;a href=&#34;https://github.com/jekyll/jekyll/wiki/sites&#34;&gt;Sites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jekyll/jekyll/fork&#34;&gt;Fork&lt;/a&gt; and &lt;a href=&#34;https://jekyllrb.com/docs/contributing/&#34;&gt;Contribute&lt;/a&gt; your own modifications&lt;/li&gt; &#xA; &lt;li&gt;Have questions? Check out our official forum community &lt;a href=&#34;https://talk.jekyllrb.com/&#34;&gt;Jekyll Talk&lt;/a&gt; and &lt;a href=&#34;https://libera.chat&#34;&gt;&lt;code&gt;#jekyll&lt;/code&gt; Channel on Libera IRC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Diving In&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://import.jekyllrb.com/docs/home/&#34;&gt;Migrate&lt;/a&gt; from your previous system&lt;/li&gt; &#xA; &lt;li&gt;Learn how &lt;a href=&#34;https://jekyllrb.com/docs/front-matter/&#34;&gt;Front Matter&lt;/a&gt; works&lt;/li&gt; &#xA; &lt;li&gt;Put information on your site with &lt;a href=&#34;https://jekyllrb.com/docs/variables/&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customize the &lt;a href=&#34;https://jekyllrb.com/docs/permalinks/&#34;&gt;Permalinks&lt;/a&gt; your posts are generated with&lt;/li&gt; &#xA; &lt;li&gt;Use the built-in &lt;a href=&#34;https://jekyllrb.com/docs/templates/&#34;&gt;Liquid Extensions&lt;/a&gt; to make your life easier&lt;/li&gt; &#xA; &lt;li&gt;Use custom &lt;a href=&#34;https://jekyllrb.com/docs/plugins/&#34;&gt;Plugins&lt;/a&gt; to generate content specific to your site&lt;/li&gt; &#xA; &lt;li&gt;Watch &lt;a href=&#34;https://jekyllrb.com/tutorials/video-walkthroughs/&#34;&gt;video tutorials from Giraffe Academy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t find the answer to your problem in our &lt;a href=&#34;https://jekyllrb.com/docs/&#34;&gt;docs&lt;/a&gt;, or in the &lt;a href=&#34;https://jekyllrb.com/docs/troubleshooting/&#34;&gt;troubleshooting section&lt;/a&gt;, ask the &lt;a href=&#34;https://jekyllrb.com/docs/community/&#34;&gt;community&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to have a more open and welcoming community, Jekyll adheres to a &lt;a href=&#34;https://jekyllrb.com/docs/conduct/&#34;&gt;code of conduct&lt;/a&gt; adapted from the Ruby on Rails code of conduct.&lt;/p&gt; &#xA;&lt;p&gt;Please adhere to this code of conduct in any interactions you have in the Jekyll community. It is strictly enforced on all official Jekyll repositories, websites, and resources. If you encounter someone violating these terms, please let one of our &lt;a href=&#34;https://jekyllrb.com/team/#core-team&#34;&gt;core team members&lt;/a&gt; know and we will address it as soon as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up in this README with a link to your website. &lt;a href=&#34;https://opencollective.com/jekyll#sponsor&#34;&gt;Become a sponsor!&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/0/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/1/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/2/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/3/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/4/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 4&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/5/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 5&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/6/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 6&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/7/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/8/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/9/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 9&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://raw.githubusercontent.com/jekyll/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;Jekyll Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our backers! üôè &lt;a href=&#34;https://opencollective.com/jekyll#backer&#34;&gt;Become a backer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/jekyll#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/backers.svg?width=890&#34; alt=&#34;Jekyll Backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/jekyll/jekyll/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>faker-ruby/faker</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/faker-ruby/faker</id>
    <link href="https://github.com/faker-ruby/faker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for generating fake data such as names, addresses, and phone numbers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36028424/40263395-4318481e-5b44-11e8-92e5-3dcc1ce169b3.png&#34; alt=&#34;logotype a happy-07&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Faker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/faker-ruby/faker/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/faker-ruby/faker/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/faker&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/faker.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inch-ci.org/github/faker-ruby/faker&#34;&gt;&lt;img src=&#34;https://inch-ci.org/github/faker-ruby/faker.svg?branch=master&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/stympy/faker/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/ef54c7f9df86e965d64b/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/stympy/faker/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/ef54c7f9df86e965d64b/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dependabot.com/compatibility-score.html?dependency-name=faker&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34;&gt;&lt;img src=&#34;https://api.dependabot.com/badges/compatibility_score?dependency-name=faker&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34; alt=&#34;SemVer compatibility&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This gem is a port of &lt;a href=&#34;https://metacpan.org/pod/Data::Faker&#34;&gt;Perl&#39;s Data::Faker library&lt;/a&gt; that generates fake data.&lt;/p&gt; &#xA;&lt;p&gt;It comes in very handy for taking screenshots (taking screenshots for my project, &lt;a href=&#34;http://catchthebest.com/&#34;&gt;Catch the Best&lt;/a&gt; was the original impetus for the creation of this gem), having real-looking test data, and having your database populated with more than one or two records while you&#39;re doing development.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#faker&#34;&gt;Faker&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#note&#34;&gt;NOTE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#cli&#34;&gt;CLI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#ensuring-unique-values&#34;&gt;Ensuring unique values&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#deterministic-random&#34;&gt;Deterministic Random&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#generators&#34;&gt;Generators&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#default&#34;&gt;Default&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#blockchain&#34;&gt;Blockchain&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#books&#34;&gt;Books&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#fantasy&#34;&gt;Fantasy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#creature&#34;&gt;Creature&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#games&#34;&gt;Games&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#japanese-media&#34;&gt;Japanese Media&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#movies&#34;&gt;Movies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#music&#34;&gt;Music&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#quotes&#34;&gt;Quotes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#sports&#34;&gt;Sports&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#tv-shows&#34;&gt;Tv Shows&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NOTE&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;While Faker generates data at random, returned values are not guaranteed to be unique by default. You must explicitly specify when you require unique values, see &lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#ensuring-unique-values&#34;&gt;details&lt;/a&gt;. Values also can be deterministic if you use the deterministic feature, see &lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#deterministic-random&#34;&gt;details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;This is the &lt;code&gt;master&lt;/code&gt; branch of Faker and may contain changes that are not yet released. Please refer the README of your version for the available methods. List of all versions is &lt;a href=&#34;https://github.com/stympy/faker/releases&#34;&gt;available here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install faker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: if you are getting a &lt;code&gt;uninitialized constant Faker::[some_class]&lt;/code&gt; error, your version of the gem is behind the one documented here. To make sure that your gem is the one documented here, change the line in your Gemfile to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;faker&#39;, :git =&amp;gt; &#39;https://github.com/faker-ruby/faker.git&#39;, :branch =&amp;gt; &#39;master&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;faker&#39;&#xA;&#xA;Faker::Name.name      #=&amp;gt; &#34;Christophe Bartell&#34;&#xA;&#xA;Faker::Internet.email #=&amp;gt; &#34;kirsten.greenholt@corkeryfisher.info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;Instructions are available in the &lt;a href=&#34;https://github.com/faker-ruby/faker-bot&#34;&gt;faker-bot README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Ensuring unique values&lt;/h3&gt; &#xA;&lt;p&gt;Prefix your method call with &lt;code&gt;unique&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Name.unique.name # This will return a unique name every time it is called&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If too many unique values are requested from a generator that has a limited number of potential values, a &lt;code&gt;Faker::UniqueGenerator::RetryLimitExceeded&lt;/code&gt; exception may be raised. It is possible to clear the record of unique values that have been returned, for example between tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Name.unique.clear # Clears used values for Faker::Name&#xA;Faker::UniqueGenerator.clear # Clears used values for all generators&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also can give some already used values to the unique generator if you have collisions with the generated data (i.e: using FactoryBot with random and manually set values).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Usage:&#xA;# Faker::&amp;lt;generator&amp;gt;.unique.exclude(method, arguments, list)&#xA;&#xA;# Add &#39;azerty&#39; and &#39;wxcvbn&#39; to the string generator with 6 char length&#xA;Faker::Lorem.unique.exclude :string, [number: 6], %w[azerty wxcvbn]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deterministic Random&lt;/h3&gt; &#xA;&lt;p&gt;Faker supports seeding of its pseudo-random number generator (PRNG) to provide deterministic output of repeated method calls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Config.random = Random.new(42)&#xA;Faker::Company.bs #=&amp;gt; &#34;seize collaborative mindshare&#34;&#xA;Faker::Company.bs #=&amp;gt; &#34;engage strategic platforms&#34;&#xA;Faker::Config.random = Random.new(42)&#xA;Faker::Company.bs #=&amp;gt; &#34;seize collaborative mindshare&#34;&#xA;Faker::Company.bs #=&amp;gt; &#34;engage strategic platforms&#34;&#xA;&#xA;Faker::Config.random = nil # seeds the PRNG using default entropy sources&#xA;Faker::Config.random.seed #=&amp;gt; 185180369676275068918401850258677722187&#xA;Faker::Company.bs #=&amp;gt; &#34;cultivate viral synergies&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generators&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Some of the generators below aren&#39;t released yet. If you want to use them, change the line in your gemfile to:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;faker&#39;, :git =&amp;gt; &#39;https://github.com/faker-ruby/faker.git&#39;, :branch =&amp;gt; &#39;master&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/address.md&#34;&gt;Faker::Address&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/alphanumeric.md&#34;&gt;Faker::Alphanumeric&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/ancient.md&#34;&gt;Faker::Ancient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/app.md&#34;&gt;Faker::App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/appliance.md&#34;&gt;Faker::Appliance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/artist.md&#34;&gt;Faker::Artist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/avatar.md&#34;&gt;Faker::Avatar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/bank.md&#34;&gt;Faker::Bank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/barcode.md&#34;&gt;Faker::Barcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/beer.md&#34;&gt;Faker::Beer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/blood.md&#34;&gt;Faker::Blood&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/boolean.md&#34;&gt;Faker::Boolean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/bossa_nova.md&#34;&gt;Faker::BossaNova&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/business.md&#34;&gt;Faker::Business&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/camera.md&#34;&gt;Faker::Camera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/cannabis.md&#34;&gt;Faker::Cannabis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/chile_rut.md&#34;&gt;Faker::ChileRut&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/chuck_norris.md&#34;&gt;Faker::ChuckNorris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/code.md&#34;&gt;Faker::Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/coffee.md&#34;&gt;Faker::Coffee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/coin.md&#34;&gt;Faker::Coin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/color.md&#34;&gt;Faker::Color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/commerce.md&#34;&gt;Faker::Commerce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/company.md&#34;&gt;Faker::Company&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/compass.md&#34;&gt;Faker::Compass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/computer.md&#34;&gt;Faker::Computer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/construction.md&#34;&gt;Faker::Construction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/cosmere.md&#34;&gt;Faker::Cosmere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/crypto.md&#34;&gt;Faker::Crypto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/crypto_coin.md&#34;&gt;Faker::CryptoCoin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/currency.md&#34;&gt;Faker::Currency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/date.md&#34;&gt;Faker::Date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/dc_comics.md&#34;&gt;Faker::DcComics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/demographic.md&#34;&gt;Faker::Demographic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/dessert.md&#34;&gt;Faker::Dessert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/device.md&#34;&gt;Faker::Device&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/driving_licence.md&#34;&gt;Faker::DrivingLicence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/drone/drone.md&#34;&gt;Faker::Drone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/educator.md&#34;&gt;Faker::Educator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/electrical_components.md&#34;&gt;Faker::ElectricalComponents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/emotion.md&#34;&gt;Faker::Emotion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/esport.md&#34;&gt;Faker::Esport&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/file.md&#34;&gt;Faker::File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/fillmurray.md&#34;&gt;Faker::Fillmurray&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/finance.md&#34;&gt;Faker::Finance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/food.md&#34;&gt;Faker::Food&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/funny_name.md&#34;&gt;Faker::FunnyName&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/gender.md&#34;&gt;Faker::Gender&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/greek_philosophers.md&#34;&gt;Faker::GreekPhilosophers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/hacker.md&#34;&gt;Faker::Hacker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/hipster.md&#34;&gt;Faker::Hipster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/hobby.md&#34;&gt;Faker::Hobby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/house.md&#34;&gt;Faker::House&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/id_number.md&#34;&gt;Faker::IDNumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/industry_segments.md&#34;&gt;Faker::IndustrySegments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/internet.md&#34;&gt;Faker::Internet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/invoice.md&#34;&gt;Faker::Invoice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/job.md&#34;&gt;Faker::Job&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/json.md&#34;&gt;Faker::Json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/kpop.md&#34;&gt;Faker::Kpop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/lorem.md&#34;&gt;Faker::Lorem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/lorem_flickr.md&#34;&gt;Faker::LoremFlickr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/lorem_pixel.md&#34;&gt;Faker::LoremPixel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/markdown.md&#34;&gt;Faker::Markdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/marketing.md&#34;&gt;Faker::Marketing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/measurement.md&#34;&gt;Faker::Measurement&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/military.md&#34;&gt;Faker::Military&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/mountain.md&#34;&gt;Faker::Mountain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/name.md&#34;&gt;Faker::Name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/nation.md&#34;&gt;Faker::Nation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/nato_phonetic_alphabet.md&#34;&gt;Faker::NatoPhoneticAlphabet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/national_health_service.md&#34;&gt;Faker::NationalHealthService&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/number.md&#34;&gt;Faker::Number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/omniauth.md&#34;&gt;Faker::Omniauth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/phone_number.md&#34;&gt;Faker::PhoneNumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/placeholdit.md&#34;&gt;Faker::Placeholdit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/programming_language.md&#34;&gt;Faker::ProgrammingLanguage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/relationship.md&#34;&gt;Faker::Relationship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/restaurant.md&#34;&gt;Faker::Restaurant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/science.md&#34;&gt;Faker::Science&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/slack_emoji.md&#34;&gt;Faker::SlackEmoji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/source.md&#34;&gt;Faker::Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/south_africa.md&#34;&gt;Faker::SouthAfrica&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/space.md&#34;&gt;Faker::Space&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/string.md&#34;&gt;Faker::String&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/stripe.md&#34;&gt;Faker::Stripe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/subscription.md&#34;&gt;Faker::Subscription&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/superhero.md&#34;&gt;Faker::Superhero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/tea.md&#34;&gt;Faker::Tea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/team.md&#34;&gt;Faker::Team&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/time.md&#34;&gt;Faker::Time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/twitter.md&#34;&gt;Faker::Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/types.md&#34;&gt;Faker::Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/university.md&#34;&gt;Faker::University&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/vehicle.md&#34;&gt;Faker::Vehicle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/verbs.md&#34;&gt;Faker::Verbs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/world_cup.md&#34;&gt;Faker::WorldCup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Blockchain&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/aeternity.md&#34;&gt;Faker::Blockchain::Aeternity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/bitcoin.md&#34;&gt;Faker::Blockchain::Bitcoin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/ethereum.md&#34;&gt;Faker::Blockchain::Ethereum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/tezos.md&#34;&gt;Faker::Blockchain::Tezos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/book.md&#34;&gt;Faker::Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/culture_series.md&#34;&gt;Faker::Books::CultureSeries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/dune.md&#34;&gt;Faker::Books::Dune&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/lovecraft.md&#34;&gt;Faker::Books::Lovecraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/the_kingkiller_chronicle.md&#34;&gt;Faker::Books::TheKingkillerChronicle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fantasy&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/fantasy/tolkien.md&#34;&gt;Faker::Fantasy::Tolkien&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Creature&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/animal.md&#34;&gt;Faker::Creature::Animal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/bird.md&#34;&gt;Faker::Creature::Bird&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/cat.md&#34;&gt;Faker::Creature::Cat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/dog.md&#34;&gt;Faker::Creature::Dog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/horse.md&#34;&gt;Faker::Creature::Horse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Games&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/game.md&#34;&gt;Faker::Game&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/clash_of_clans.md&#34;&gt;Faker::Games::ClashOfClans&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/dnd.md&#34;&gt;Faker::Games::DnD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/dota.md&#34;&gt;Faker::Games::Dota&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/elder_scrolls.md&#34;&gt;Faker::Games::ElderScrolls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/fallout.md&#34;&gt;Faker::Games::Fallout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/half_life.md&#34;&gt;Faker::Games::HalfLife&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/heroes.md&#34;&gt;Faker::Games::Heroes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/heroes_of_the_storm.md&#34;&gt;Faker::Games::HeroesOfTheStorm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/league_of_legends.md&#34;&gt;Faker::Games::LeagueOfLegends&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/minecraft.md&#34;&gt;Faker::Games::Minecraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/myst.md&#34;&gt;Faker::Games::Myst&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/overwatch.md&#34;&gt;Faker::Games::Overwatch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/pokemon.md&#34;&gt;Faker::Games::Pokemon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/sonic_the_hedgehog.md&#34;&gt;Faker::Games::SonicTheHedgehog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/street_fighter.md&#34;&gt;Faker::Games::StreetFighter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/super_mario.md&#34;&gt;Faker::Games::SuperMario&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/super_smash_bros.md&#34;&gt;Faker::Games::SuperSmashBros&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/touhou.md&#34;&gt;Faker::Games::Touhou&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/warhammer_fantasy.md&#34;&gt;Faker::Games::WarhammerFantasy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/witcher.md&#34;&gt;Faker::Games::Witcher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/world_of_warcraft.md&#34;&gt;Faker::Games::WorldOfWarcraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/zelda.md&#34;&gt;Faker::Games::Zelda&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Japanese Media&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/dragon_ball.md&#34;&gt;Faker::JapaneseMedia::DragonBall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/one_piece.md&#34;&gt;Faker::JapaneseMedia::OnePiece&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/studio_ghibli.md&#34;&gt;Faker::JapaneseMedia::StudioGhibli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/sword_art_online.md&#34;&gt;Faker::JapaneseMedia::SwordArtOnline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/naruto.md&#34;&gt;Faker::JapaneseMedia::Naruto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/doraemon.md&#34;&gt;Faker::JapaneseMedia::Doraemon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/conan.md&#34;&gt;Faker::JapaneseMedia::Conan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/fullmetal_alchemist_brotherhood.md&#34;&gt;Faker::JapaneseMedia::FmaBrotherhood&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Movies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/movie.md&#34;&gt;Faker::Movie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/back_to_the_future.md&#34;&gt;Faker::Movies::BackToTheFuture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/departed.md&#34;&gt;Faker::Movies::Departed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/ghostbusters.md&#34;&gt;Faker::Movies::Ghostbusters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/harry_potter.md&#34;&gt;Faker::Movies::HarryPotter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/hitchhikers_guide_to_the_galaxy.md&#34;&gt;Faker::Movies::HitchhikersGuideToTheGalaxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/hobbit.md&#34;&gt;Faker::Movies::Hobbit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/how_to_train_your_dragon.md&#34;&gt;Faker::Movies::HowToTrainYourDragon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/lebowski.md&#34;&gt;Faker::Movies::Lebowski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/lord_of_the_rings.md&#34;&gt;Faker::Movies::LordOfTheRings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/princess_bride.md&#34;&gt;Faker::Movies::PrincessBride&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/star_wars.md&#34;&gt;Faker::Movies::StarWars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/tron.md&#34;&gt;Faker::Movies::TRON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/v_for_vendetta.md&#34;&gt;Faker::Movies::VForVendetta&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Music&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/music.md&#34;&gt;Faker::Music&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/grateful_dead.md&#34;&gt;Faker::Music::GratefulDead&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/hiphop.md&#34;&gt;Faker::Music::Hiphop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/opera.md&#34;&gt;Faker::Music::Opera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/pearl_jam.md&#34;&gt;Faker::Music::PearlJam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/phish.md&#34;&gt;Faker::Music::Phish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/prince.md&#34;&gt;Faker::Music::Prince&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/rock_band.md&#34;&gt;Faker::Music::RockBand&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/rush.md&#34;&gt;Faker::Music::Rush&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/umphreys_mcgee.md&#34;&gt;Faker::Music::UmphreysMcgee&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quotes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/quote.md&#34;&gt;Faker::Quote&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/chiquito.md&#34;&gt;Faker::Quotes::Chiquito&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/rajnikanth.md&#34;&gt;Faker::Quotes::Rajnikanth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/shakespeare.md&#34;&gt;Faker::Quotes::Shakespeare&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sports&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/sports/basketball.md&#34;&gt;Faker::Sports::Basketball&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/sports/football.md&#34;&gt;Faker::Sports::Football&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tv Shows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/aqua_teen_hunger_force.md&#34;&gt;Faker::TvShows::AquaTeenHungerForce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/big_bang_theory.md&#34;&gt;Faker::TvShows::BigBangTheory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/bojack_horseman.md&#34;&gt;Faker::TvShows::BojackHorseman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/breaking_bad.md&#34;&gt;Faker::TvShows::BreakingBad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/brooklyn_nine_nine.md&#34;&gt;Faker::TvShows::BrooklynNineNine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/buffy.md&#34;&gt;Faker::TvShows::Buffy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/community.md&#34;&gt;Faker::TvShows::Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/dr_who.md&#34;&gt;Faker::TvShows::DrWho&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/dumb_and_dumber.md&#34;&gt;Faker::TvShows::DumbAndDumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/family_guy.md&#34;&gt;Faker::TvShows::FamilyGuy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/final_space.md&#34;&gt;Faker::TvShows::FinalSpace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/friends.md&#34;&gt;Faker::TvShows::Friends&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/game_of_thrones.md&#34;&gt;Faker::TvShows::GameOfThrones&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/hey_arnold.md&#34;&gt;Faker::TvShows::HeyArnold&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/how_i_met_your_mother.md&#34;&gt;Faker::TvShows::HowIMetYourMother&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/michael_scott.md&#34;&gt;Faker::TvShows::MichaelScott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/new_girl.md&#34;&gt;Faker::TvShows::NewGirl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/parks_and_rec.md&#34;&gt;Faker::TvShows::ParksAndRec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/rick_and_morty.md&#34;&gt;Faker::TvShows::RickAndMorty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/rupaul.md&#34;&gt;Faker::TvShows::RuPaul&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/seinfeld.md&#34;&gt;Faker::TvShows::Seinfeld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/silicon_valley.md&#34;&gt;Faker::TvShows::SiliconValley&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/simpsons.md&#34;&gt;Faker::TvShows::Simpsons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/south_park.md&#34;&gt;Faker::TvShows::SouthPark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/star_trek.md&#34;&gt;Faker::TvShows::StarTrek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/stargate.md&#34;&gt;Faker::TvShows::Stargate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/stranger_things.md&#34;&gt;Faker::TvShows::StrangerThings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/suits.md&#34;&gt;Faker::TvShows::Suits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/supernatural.md&#34;&gt;Faker::TvShows::Supernatural&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_expanse.md&#34;&gt;Faker::TvShows::TheExpanse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_fresh_prince_of_bel_air.md&#34;&gt;Faker::TvShows::TheFreshPrinceOfBelAir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_it_crowd.md&#34;&gt;Faker::TvShows::TheITCrowd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_thick_of_it.md&#34;&gt;Faker::TvShows::TheThickOfIt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/twin_peaks.md&#34;&gt;Faker::TvShows::TwinPeaks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/venture_bros.md&#34;&gt;Faker::TvShows::VentureBros&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Since you may want to make addresses and other types of data look different depending on where in the world you are (US postal codes vs. UK postal codes, for example), Faker uses the I18n gem to store strings (like state names) and formats (US postal codes are NNNNN while UK postal codes are AAN NAA), allowing you to get different formats by switching locales. Just set the locale you want as shown below, and Faker will take care of the rest.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Config.locale = &#39;es&#39;&#xA;# or&#xA;Faker::Config.locale = :es&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your locale doesn&#39;t already exist, create it in the &lt;code&gt;lib/locales&lt;/code&gt; directory and you can then override or add elements to suit your needs. See more about how to use locales &lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/lib/locales/README.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en-au-ocker:&#xA;  faker:&#xA;    name:&#xA;      # Existing faker field, new data&#xA;      first_name:&#xA;        - Charlotte&#xA;        - Ava&#xA;        - Chloe&#xA;        - Emily&#xA;&#xA;      # New faker fields&#xA;      ocker_first_name:&#xA;        - Bazza&#xA;        - Bluey&#xA;        - Davo&#xA;        - Johno&#xA;        - Shano&#xA;        - Shazza&#xA;      region:&#xA;        - South East Queensland&#xA;        - Wide Bay Burnett&#xA;        - Margaret River&#xA;        - Port Pirie&#xA;        - Gippsland&#xA;        - Elizabeth&#xA;        - Barossa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/stympy/faker/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Comments and feedback are welcome. Send an email to Benjamin Curtis via the &lt;a href=&#34;http://groups.google.com/group/ruby-faker&#34;&gt;google group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also join our &lt;a href=&#34;https://discord.gg/RMumTwB&#34;&gt;discord channel&lt;/a&gt; to discuss anything regarding improvements or feature requests.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is free to use under the terms of the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rack/rack-attack</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/rack/rack-attack</id>
    <link href="https://github.com/rack/rack-attack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rack middleware for blocking &amp; throttling&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; You are viewing the development&#39;s branch version of README which might contain documentation for unreleased features. For the README consistent with the latest released version see &lt;a href=&#34;https://github.com/rack/rack-attack/raw/6-stable/README.md&#34;&gt;https://github.com/rack/rack-attack/blob/6-stable/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Rack::Attack&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Rack middleware for blocking &amp;amp; throttling abusive requests&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Protect your Rails and Rack apps from bad clients. Rack::Attack lets you easily decide when to &lt;em&gt;allow&lt;/em&gt;, &lt;em&gt;block&lt;/em&gt; and &lt;em&gt;throttle&lt;/em&gt; based on properties of the request.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://www.kickstarter.com/backing-and-hacking/rack-attack-protection-from-abusive-clients&#34;&gt;Backing &amp;amp; Hacking blog post&lt;/a&gt; introducing Rack::Attack.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/rack-attack&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rack-attack.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rack/rack-attack/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/rack/rack-attack/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/kickstarter/rack-attack&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/kickstarter/rack-attack.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/rack-attack/rack-attack&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/rack-attack/rack-attack.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/rack-attack/rack-attack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#plugging-into-the-application&#34;&gt;Plugging into the application&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#safelisting&#34;&gt;Safelisting&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#safelist_ipip_address_string&#34;&gt;&lt;code&gt;safelist_ip(ip_address_string)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#safelist_ipip_subnet_string&#34;&gt;&lt;code&gt;safelist_ip(ip_subnet_string)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#safelistname-block&#34;&gt;&lt;code&gt;safelist(name, &amp;amp;block)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#blocking&#34;&gt;Blocking&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#blocklist_ipip_address_string&#34;&gt;&lt;code&gt;blocklist_ip(ip_address_string)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#blocklist_ipip_subnet_string&#34;&gt;&lt;code&gt;blocklist_ip(ip_subnet_string)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#blocklistname-block&#34;&gt;&lt;code&gt;blocklist(name, &amp;amp;block)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#fail2ban&#34;&gt;Fail2Ban&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#allow2ban&#34;&gt;Allow2Ban&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#throttling&#34;&gt;Throttling&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#throttlename-options-block&#34;&gt;&lt;code&gt;throttle(name, options, &amp;amp;block)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#tracks&#34;&gt;Tracks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#cache-store-configuration&#34;&gt;Cache store configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#customizing-responses&#34;&gt;Customizing responses&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#ratelimit-headers-for-well-behaved-clients&#34;&gt;RateLimit headers for well-behaved clients&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#logging--instrumentation&#34;&gt;Logging &amp;amp; Instrumentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#how-it-works&#34;&gt;How it works&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#about-tracks&#34;&gt;About Tracks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#development-setup&#34;&gt;Development setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# In your Gemfile&#xA;&#xA;gem &#39;rack-attack&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install rack-attack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugging into the application&lt;/h3&gt; &#xA;&lt;p&gt;Then tell your ruby web application to use rack-attack as a middleware.&lt;/p&gt; &#xA;&lt;p&gt;a) For &lt;strong&gt;rails&lt;/strong&gt; applications it is used by default.&lt;/p&gt; &#xA;&lt;p&gt;You can disable it permanently (like for specific environment) or temporarily (can be useful for specific test cases) by writing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::Attack.enabled = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;b) For &lt;strong&gt;rack&lt;/strong&gt; applications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# In config.ru&#xA;&#xA;require &#34;rack/attack&#34;&#xA;use Rack::Attack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: By default, rack-attack won&#39;t perform any blocking or throttling, until you specifically tell it what to protect against by configuring some rules.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; If you just want to get going asap, then you can take our &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/docs/example_configuration.md&#34;&gt;example configuration&lt;/a&gt; and tailor it to your needs, or check out the &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/docs/advanced_configuration.md&#34;&gt;advanced configuration&lt;/a&gt; examples.&lt;/p&gt; &#xA;&lt;p&gt;Define rules by calling &lt;code&gt;Rack::Attack&lt;/code&gt; public methods, in any file that runs when your application is being initialized. For rails applications this means creating a new file named &lt;code&gt;config/initializers/rack_attack.rb&lt;/code&gt; and writing your rules there.&lt;/p&gt; &#xA;&lt;h3&gt;Safelisting&lt;/h3&gt; &#xA;&lt;p&gt;Safelists have the most precedence, so any request matching a safelist would be allowed despite matching any number of blocklists or throttles.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;safelist_ip(ip_address_string)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails app)&#xA;&#xA;Rack::Attack.safelist_ip(&#34;5.6.7.8&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;safelist_ip(ip_subnet_string)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails app)&#xA;&#xA;Rack::Attack.safelist_ip(&#34;5.6.7.0/24&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;safelist(name, &amp;amp;block)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Name your custom safelist and make your ruby-block argument return a truthy value if you want the request to be allowed, and falsy otherwise.&lt;/p&gt; &#xA;&lt;p&gt;The request object is a &lt;a href=&#34;http://www.rubydoc.info/gems/rack/Rack/Request&#34;&gt;Rack::Request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails apps)&#xA;&#xA;# Provided that trusted users use an HTTP request header named APIKey&#xA;Rack::Attack.safelist(&#34;mark any authenticated access safe&#34;) do |request|&#xA;  # Requests are allowed if the return value is truthy&#xA;  request.env[&#34;HTTP_APIKEY&#34;] == &#34;secret-string&#34;&#xA;end&#xA;&#xA;# Always allow requests from localhost&#xA;# (blocklist &amp;amp; throttles are skipped)&#xA;Rack::Attack.safelist(&#39;allow from localhost&#39;) do |req|&#xA;  # Requests are allowed if the return value is truthy&#xA;  &#39;127.0.0.1&#39; == req.ip || &#39;::1&#39; == req.ip&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Blocking&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;blocklist_ip(ip_address_string)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails apps)&#xA;&#xA;Rack::Attack.blocklist_ip(&#34;1.2.3.4&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;blocklist_ip(ip_subnet_string)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails apps)&#xA;&#xA;Rack::Attack.blocklist_ip(&#34;1.2.0.0/16&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;blocklist(name, &amp;amp;block)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Name your custom blocklist and make your ruby-block argument return a truthy value if you want the request to be blocked, and falsy otherwise.&lt;/p&gt; &#xA;&lt;p&gt;The request object is a &lt;a href=&#34;http://www.rubydoc.info/gems/rack/Rack/Request&#34;&gt;Rack::Request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails apps)&#xA;&#xA;Rack::Attack.blocklist(&#34;block all access to admin&#34;) do |request|&#xA;  # Requests are blocked if the return value is truthy&#xA;  request.path.start_with?(&#34;/admin&#34;)&#xA;end&#xA;&#xA;Rack::Attack.blocklist(&#39;block bad UA logins&#39;) do |req|&#xA;  req.path == &#39;/login&#39; &amp;amp;&amp;amp; req.post? &amp;amp;&amp;amp; req.user_agent == &#39;BadUA&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fail2Ban&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Fail2Ban.filter&lt;/code&gt; can be used within a blocklist to block all requests from misbehaving clients. This pattern is inspired by &lt;a href=&#34;https://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;fail2ban&lt;/a&gt;. See the &lt;a href=&#34;https://www.fail2ban.org/wiki/index.php/MANUAL_0_8#Jail_Options&#34;&gt;fail2ban documentation&lt;/a&gt; for more details on how the parameters work. For multiple filters, be sure to put each filter in a separate blocklist and use a unique discriminator for each fail2ban filter.&lt;/p&gt; &#xA;&lt;p&gt;Fail2ban state is stored in a &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#cache-store-configuration&#34;&gt;configurable cache&lt;/a&gt; (which defaults to &lt;code&gt;Rails.cache&lt;/code&gt; if present).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Block suspicious requests for &#39;/etc/password&#39; or wordpress specific paths.&#xA;# After 3 blocked requests in 10 minutes, block all requests from that IP for 5 minutes.&#xA;Rack::Attack.blocklist(&#39;fail2ban pentesters&#39;) do |req|&#xA;  # `filter` returns truthy value if request fails, or if it&#39;s from a previously banned IP&#xA;  # so the request is blocked&#xA;  Rack::Attack::Fail2Ban.filter(&#34;pentesters-#{req.ip}&#34;, maxretry: 3, findtime: 10.minutes, bantime: 5.minutes) do&#xA;    # The count for the IP is incremented if the return value is truthy&#xA;    CGI.unescape(req.query_string) =~ %r{/etc/passwd} ||&#xA;    req.path.include?(&#39;/etc/passwd&#39;) ||&#xA;    req.path.include?(&#39;wp-admin&#39;) ||&#xA;    req.path.include?(&#39;wp-login&#39;)&#xA;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;Fail2Ban&lt;/code&gt; filters are not automatically scoped to the blocklist, so when using multiple filters in an application the scoping must be added to the discriminator e.g. &lt;code&gt;&#34;pentest:#{req.ip}&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Allow2Ban&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Allow2Ban.filter&lt;/code&gt; works the same way as the &lt;code&gt;Fail2Ban.filter&lt;/code&gt; except that it &lt;em&gt;allows&lt;/em&gt; requests from misbehaving clients until such time as they reach maxretry at which they are cut off as per normal.&lt;/p&gt; &#xA;&lt;p&gt;Allow2ban state is stored in a &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#cache-store-configuration&#34;&gt;configurable cache&lt;/a&gt; (which defaults to &lt;code&gt;Rails.cache&lt;/code&gt; if present).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Lockout IP addresses that are hammering your login page.&#xA;# After 20 requests in 1 minute, block all requests from that IP for 1 hour.&#xA;Rack::Attack.blocklist(&#39;allow2ban login scrapers&#39;) do |req|&#xA;  # `filter` returns false value if request is to your login page (but still&#xA;  # increments the count) so request below the limit are not blocked until&#xA;  # they hit the limit.  At that point, filter will return true and block.&#xA;  Rack::Attack::Allow2Ban.filter(req.ip, maxretry: 20, findtime: 1.minute, bantime: 1.hour) do&#xA;    # The count for the IP is incremented if the return value is truthy.&#xA;    req.path == &#39;/login&#39; and req.post?&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Throttling&lt;/h3&gt; &#xA;&lt;p&gt;Throttle state is stored in a &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#cache-store-configuration&#34;&gt;configurable cache&lt;/a&gt; (which defaults to &lt;code&gt;Rails.cache&lt;/code&gt; if present).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;throttle(name, options, &amp;amp;block)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Name your custom throttle, provide &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;period&lt;/code&gt; as options, and make your ruby-block argument return the &lt;strong&gt;discriminator&lt;/strong&gt;. This discriminator is how you tell rack-attack whether you&#39;re limiting per IP address, per user email or any other.&lt;/p&gt; &#xA;&lt;p&gt;The request object is a &lt;a href=&#34;http://www.rubydoc.info/gems/rack/Rack/Request&#34;&gt;Rack::Request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails apps)&#xA;&#xA;Rack::Attack.throttle(&#34;requests by ip&#34;, limit: 5, period: 2) do |request|&#xA;  request.ip&#xA;end&#xA;&#xA;# Throttle login attempts for a given email parameter to 6 reqs/minute&#xA;# Return the *normalized* email as a discriminator on POST /login requests&#xA;Rack::Attack.throttle(&#39;limit logins per email&#39;, limit: 6, period: 60) do |req|&#xA;  if req.path == &#39;/login&#39; &amp;amp;&amp;amp; req.post?&#xA;    # Normalize the email, using the same logic as your authentication process, to&#xA;    # protect against rate limit bypasses.&#xA;    req.params[&#39;email&#39;].to_s.downcase.gsub(/\s+/, &#34;&#34;)&#xA;  end&#xA;end&#xA;&#xA;# You can also set a limit and period using a proc. For instance, after&#xA;# Rack::Auth::Basic has authenticated the user:&#xA;limit_proc = proc { |req| req.env[&#34;REMOTE_USER&#34;] == &#34;admin&#34; ? 100 : 1 }&#xA;period_proc = proc { |req| req.env[&#34;REMOTE_USER&#34;] == &#34;admin&#34; ? 1 : 60 }&#xA;&#xA;Rack::Attack.throttle(&#39;request per ip&#39;, limit: limit_proc, period: period_proc) do |request|&#xA;  request.ip&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tracks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Track requests from a special user agent.&#xA;Rack::Attack.track(&#34;special_agent&#34;) do |req|&#xA;  req.user_agent == &#34;SpecialAgent&#34;&#xA;end&#xA;&#xA;# Supports optional limit and period, triggers the notification only when the limit is reached.&#xA;Rack::Attack.track(&#34;special_agent&#34;, limit: 6, period: 60) do |req|&#xA;  req.user_agent == &#34;SpecialAgent&#34;&#xA;end&#xA;&#xA;# Track it using ActiveSupport::Notification&#xA;ActiveSupport::Notifications.subscribe(&#34;track.rack_attack&#34;) do |name, start, finish, request_id, payload|&#xA;  req = payload[:request]&#xA;  if req.env[&#39;rack.attack.matched&#39;] == &#34;special_agent&#34;&#xA;    Rails.logger.info &#34;special_agent: #{req.path}&#34;&#xA;    STATSD.increment(&#34;special_agent&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cache store configuration&lt;/h3&gt; &#xA;&lt;p&gt;Throttle, allow2ban and fail2ban state is stored in a configurable cache (which defaults to &lt;code&gt;Rails.cache&lt;/code&gt; if present), presumably backed by memcached or redis (&lt;a href=&#34;https://rubygems.org/gems/redis&#34;&gt;at least gem v3.0.0&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::Attack.cache.store = ActiveSupport::Cache::MemoryStore.new # defaults to Rails.cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;Rack::Attack.cache&lt;/code&gt; is only used for throttling, allow2ban and fail2ban filtering; not blocklisting and safelisting. Your cache store must implement &lt;code&gt;increment&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; like &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html&#34;&gt;ActiveSupport::Cache::Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing responses&lt;/h2&gt; &#xA;&lt;p&gt;Customize the response of blocklisted and throttled requests using an object that adheres to the &lt;a href=&#34;http://www.rubydoc.info/github/rack/rack/file/SPEC.rdoc&#34;&gt;Rack app interface&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::Attack.blocklisted_responder = lambda do |request|&#xA;  # Using 503 because it may make attacker think that they have successfully&#xA;  # DOSed the site. Rack::Attack returns 403 for blocklists by default&#xA;  [ 503, {}, [&#39;Blocked&#39;]]&#xA;end&#xA;&#xA;Rack::Attack.throttled_responder = lambda do |request|&#xA;  # NB: you have access to the name and other data about the matched throttle&#xA;  #  request.env[&#39;rack.attack.matched&#39;],&#xA;  #  request.env[&#39;rack.attack.match_type&#39;],&#xA;  #  request.env[&#39;rack.attack.match_data&#39;],&#xA;  #  request.env[&#39;rack.attack.match_discriminator&#39;]&#xA;&#xA;  # Using 503 because it may make attacker think that they have successfully&#xA;  # DOSed the site. Rack::Attack returns 429 for throttling by default&#xA;  [ 503, {}, [&#34;Server Error\n&#34;]]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RateLimit headers for well-behaved clients&lt;/h3&gt; &#xA;&lt;p&gt;While Rack::Attack&#39;s primary focus is minimizing harm from abusive clients, it can also be used to return rate limit data that&#39;s helpful for well-behaved clients.&lt;/p&gt; &#xA;&lt;p&gt;If you want to return to user how many seconds to wait until they can start sending requests again, this can be done through enabling &lt;code&gt;Retry-After&lt;/code&gt; header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::Attack.throttled_response_retry_after_header = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example response that includes conventional &lt;code&gt;RateLimit-*&lt;/code&gt; headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::Attack.throttled_responder = lambda do |request|&#xA;  match_data = request.env[&#39;rack.attack.match_data&#39;]&#xA;  now = match_data[:epoch_time]&#xA;&#xA;  headers = {&#xA;    &#39;RateLimit-Limit&#39; =&amp;gt; match_data[:limit].to_s,&#xA;    &#39;RateLimit-Remaining&#39; =&amp;gt; &#39;0&#39;,&#xA;    &#39;RateLimit-Reset&#39; =&amp;gt; (now + (match_data[:period] - now % match_data[:period])).to_s&#xA;  }&#xA;&#xA;  [ 429, headers, [&#34;Throttled\n&#34;]]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For responses that did not exceed a throttle limit, Rack::Attack annotates the env with match data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;request.env[&#39;rack.attack.throttle_data&#39;][name] # =&amp;gt; { discriminator: d, count: n, period: p, limit: l, epoch_time: t }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging &amp;amp; Instrumentation&lt;/h2&gt; &#xA;&lt;p&gt;Rack::Attack uses the &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveSupport/Notifications.html&#34;&gt;ActiveSupport::Notifications&lt;/a&gt; API if available.&lt;/p&gt; &#xA;&lt;p&gt;You can subscribe to &lt;code&gt;rack_attack&lt;/code&gt; events and log it, graph it, etc.&lt;/p&gt; &#xA;&lt;p&gt;To get notified about specific type of events, subscribe to the event name followed by the &lt;code&gt;rack_attack&lt;/code&gt; namespace. E.g. for throttles use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::Notifications.subscribe(&#34;throttle.rack_attack&#34;) do |name, start, finish, request_id, payload|&#xA;  # request object available in payload[:request]&#xA;&#xA;  # Your code here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to subscribe to every &lt;code&gt;rack_attack&lt;/code&gt; event, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::Notifications.subscribe(/rack_attack/) do |name, start, finish, request_id, payload|&#xA;  # request object available in payload[:request]&#xA;&#xA;  # Your code here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;A note on developing and testing apps using Rack::Attack - if you are using throttling in particular, you will need to enable the cache in your development environment. See &lt;a href=&#34;http://guides.rubyonrails.org/caching_with_rails.html&#34;&gt;Caching with Rails&lt;/a&gt; for more on how to do this.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Rack::Attack.enabled = false&lt;/code&gt; can be used to either completely disable Rack::Attack in your tests, or to disable/enable for specific test cases only.&lt;/p&gt; &#xA;&lt;h3&gt;Test case isolation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Rack::Attack.reset!&lt;/code&gt; can be used in your test suite to clear any Rack::Attack state between different test cases. If you&#39;re testing blocklist and safelist configurations, consider using &lt;code&gt;Rack::Attack.clear_configuration&lt;/code&gt; to unset the values for those lists between test cases.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The Rack::Attack middleware compares each request against &lt;em&gt;safelists&lt;/em&gt;, &lt;em&gt;blocklists&lt;/em&gt;, &lt;em&gt;throttles&lt;/em&gt;, and &lt;em&gt;tracks&lt;/em&gt; that you define. There are none by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the request matches any &lt;strong&gt;safelist&lt;/strong&gt;, it is allowed.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, if the request matches any &lt;strong&gt;blocklist&lt;/strong&gt;, it is blocked.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, if the request matches any &lt;strong&gt;throttle&lt;/strong&gt;, a counter is incremented in the Rack::Attack.cache. If any throttle&#39;s limit is exceeded, the request is blocked.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, all &lt;strong&gt;tracks&lt;/strong&gt; are checked, and the request is allowed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The algorithm is actually more concise in code: See &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/lib/rack/attack.rb&#34;&gt;Rack::Attack.call&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def call(env)&#xA;  req = Rack::Attack::Request.new(env)&#xA;&#xA;  if safelisted?(req)&#xA;    @app.call(env)&#xA;  elsif blocklisted?(req)&#xA;    self.class.blocklisted_responder.call(req)&#xA;  elsif throttled?(req)&#xA;    self.class.throttled_responder.call(req)&#xA;  else&#xA;    tracked?(req)&#xA;    @app.call(env)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;Rack::Attack::Request&lt;/code&gt; is just a subclass of &lt;code&gt;Rack::Request&lt;/code&gt; so that you can cleanly monkey patch helper methods onto the &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/lib/rack/attack/request.rb&#34;&gt;request object&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;About Tracks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Rack::Attack.track&lt;/code&gt; doesn&#39;t affect request processing. Tracks are an easy way to log and measure requests matching arbitrary attributes.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;The overhead of running Rack::Attack is typically negligible (a few milliseconds per request), but it depends on how many checks you&#39;ve configured, and how long they take. Throttles usually require a network roundtrip to your cache server(s), so try to keep the number of throttle checks per request low.&lt;/p&gt; &#xA;&lt;p&gt;If a request is blocklisted or throttled, the response is a very simple Rack response. A single typical ruby web server thread can block several hundred requests per second.&lt;/p&gt; &#xA;&lt;p&gt;Rack::Attack complements tools like &lt;code&gt;iptables&lt;/code&gt; and nginx&#39;s &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone&#34;&gt;limit_conn_zone module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Abusive clients range from malicious login crackers to naively-written scrapers. They hinder the security, performance, &amp;amp; availability of web applications.&lt;/p&gt; &#xA;&lt;p&gt;It is impractical if not impossible to block abusive clients completely.&lt;/p&gt; &#xA;&lt;p&gt;Rack::Attack aims to let developers quickly mitigate abusive requests and rely less on short-term, one-off hacks to block a particular attack.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development setup&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/docs/development.md&#34;&gt;Development guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright Kickstarter, PBC.&lt;/p&gt; &#xA;&lt;p&gt;Released under an &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gitlabhq/gitlabhq</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/gitlabhq/gitlabhq</id>
    <link href="https://github.com/gitlabhq/gitlabhq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitLab CE Mirror | Please open new issues in our issue tracker on GitLab.com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitLab&lt;/h1&gt; &#xA;&lt;h2&gt;Canonical source&lt;/h2&gt; &#xA;&lt;p&gt;The canonical source of GitLab where all development takes place is &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab&#34;&gt;hosted on GitLab.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to clone a copy of GitLab without proprietary code, you can use the read-only mirror of GitLab located at &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-foss/&#34;&gt;https://gitlab.com/gitlab-org/gitlab-foss/&lt;/a&gt;. However, please do not submit any issues and/or merge requests to that project.&lt;/p&gt; &#xA;&lt;h2&gt;Free trial&lt;/h2&gt; &#xA;&lt;p&gt;You can request a free trial of GitLab Ultimate &lt;a href=&#34;https://about.gitlab.com/free-trial/&#34;&gt;on our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Open source software to collaborate on code&lt;/h2&gt; &#xA;&lt;p&gt;To see how GitLab looks please see the &lt;a href=&#34;https://about.gitlab.com/features/&#34;&gt;features page on our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manage Git repositories with fine grained access controls that keep your code secure&lt;/li&gt; &#xA; &lt;li&gt;Perform code reviews and enhance collaboration with merge requests&lt;/li&gt; &#xA; &lt;li&gt;Complete continuous integration (CI) and continuous deployment/delivery (CD) pipelines to build, test, and deploy your applications&lt;/li&gt; &#xA; &lt;li&gt;Each project can also have an issue tracker, issue board, and a wiki&lt;/li&gt; &#xA; &lt;li&gt;Used by more than 100,000 organizations, GitLab is the most popular solution to manage Git repositories on-premises&lt;/li&gt; &#xA; &lt;li&gt;Completely free and open source (MIT Expat license)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Editions&lt;/h2&gt; &#xA;&lt;p&gt;There are three editions of GitLab:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitLab Community Edition (CE) is available freely under the MIT Expat license.&lt;/li&gt; &#xA; &lt;li&gt;GitLab Enterprise Edition (EE) includes &lt;a href=&#34;https://about.gitlab.com/pricing/#compare-options&#34;&gt;extra features&lt;/a&gt; that are more useful for organizations with more than 100 users. To use EE and get official support please &lt;a href=&#34;https://about.gitlab.com/pricing/&#34;&gt;become a subscriber&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;JiHu Edition (JH) tailored specifically for the &lt;a href=&#34;https://about.gitlab.cn/&#34;&gt;Chinese market&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/gitlabhq/gitlabhq/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for licensing information as it pertains to files in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Hiring&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re hiring developers, support people, and production engineers all the time, please see our &lt;a href=&#34;https://about.gitlab.com/jobs/&#34;&gt;jobs page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;p&gt;On &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;about.gitlab.com&lt;/a&gt; you can find more information about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/pricing/&#34;&gt;Subscriptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/consultancy/&#34;&gt;Consultancy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/community/&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/gitlab-com/&#34;&gt;Hosted GitLab.com&lt;/a&gt; use GitLab as a free service&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/features/#enterprise&#34;&gt;GitLab Enterprise Edition&lt;/a&gt; with additional features aimed at larger organizations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/gitlab-ci/&#34;&gt;GitLab CI&lt;/a&gt; a continuous integration (CI) server that is easy to integrate with GitLab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/gitlabhq/gitlabhq/master/doc/install/requirements.md&#34;&gt;requirements documentation&lt;/a&gt; for system requirements and more information about the supported operating systems.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install GitLab is with the &lt;a href=&#34;https://about.gitlab.com/downloads/&#34;&gt;Omnibus packages&lt;/a&gt; on our package server. Compared to an installation from source, this is faster and less error prone. Just select your operating system, download the respective package (Debian or RPM) and install it using the system&#39;s package manager.&lt;/p&gt; &#xA;&lt;p&gt;There are various other options to install GitLab, please refer to the &lt;a href=&#34;https://about.gitlab.com/installation/&#34;&gt;installation page on the GitLab website&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;GitLab is an open source project and we are very happy to accept community contributions. Please refer to &lt;a href=&#34;https://about.gitlab.com/contributing/&#34;&gt;Contributing to GitLab page&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Install a development environment&lt;/h2&gt; &#xA;&lt;p&gt;To work on GitLab itself, we recommend setting up your development environment with &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-development-kit&#34;&gt;the GitLab Development Kit&lt;/a&gt;. If you do not use the GitLab Development Kit you need to install and configure all the dependencies yourself, this is a lot of work and error prone. One small thing you also have to do when installing it yourself is to copy the example development Puma configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp config/puma.example.development.rb config/puma.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instructions on how to start GitLab and how to run the tests can be found in the &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-development-kit#getting-started&#34;&gt;getting started section of the GitLab Development Kit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Software stack&lt;/h2&gt; &#xA;&lt;p&gt;GitLab is a Ruby on Rails application that runs on the following software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu/Debian/CentOS/RHEL/OpenSUSE&lt;/li&gt; &#xA; &lt;li&gt;Ruby (MRI) 2.7.5&lt;/li&gt; &#xA; &lt;li&gt;Git 2.33+&lt;/li&gt; &#xA; &lt;li&gt;Redis 5.0+&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL 12+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information please see the &lt;a href=&#34;https://docs.gitlab.com/ee/development/architecture.html&#34;&gt;architecture&lt;/a&gt; and &lt;a href=&#34;https://docs.gitlab.com/ee/install/requirements.html&#34;&gt;requirements&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h2&gt;UX design&lt;/h2&gt; &#xA;&lt;p&gt;Please adhere to the &lt;a href=&#34;https://design.gitlab.com/&#34;&gt;UX Guide&lt;/a&gt; when creating designs and implementing code.&lt;/p&gt; &#xA;&lt;h2&gt;Third-party applications&lt;/h2&gt; &#xA;&lt;p&gt;There are a lot of &lt;a href=&#34;https://about.gitlab.com/applications/&#34;&gt;third-party applications integrating with GitLab&lt;/a&gt;. These include GUI Git clients, mobile applications and API wrappers for various languages.&lt;/p&gt; &#xA;&lt;h2&gt;GitLab release cycle&lt;/h2&gt; &#xA;&lt;p&gt;For more information about the release process see the &lt;a href=&#34;https://gitlab.com/gitlab-org/release-tools/blob/master/README.md&#34;&gt;release documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;For upgrading information please see our &lt;a href=&#34;https://about.gitlab.com/update/&#34;&gt;update page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All documentation can be found on &lt;a href=&#34;https://docs.gitlab.com&#34;&gt;https://docs.gitlab.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://about.gitlab.com/getting-help/&#34;&gt;Getting help for GitLab&lt;/a&gt; on our website for the many options to get help.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://about.gitlab.com/why/&#34;&gt;Read here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Is it any good?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://about.gitlab.com/is-it-any-good/&#34;&gt;Yes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Is it awesome?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/gitlab/followers&#34;&gt;These people&lt;/a&gt; seem to like it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elastic/logstash</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/elastic/logstash</id>
    <link href="https://github.com/elastic/logstash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Logstash - transport and process your logs, events, or other data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Logstash&lt;/h1&gt; &#xA;&lt;p&gt;Logstash is part of the &lt;a href=&#34;https://www.elastic.co/products&#34;&gt;Elastic Stack&lt;/a&gt; along with Beats, Elasticsearch and Kibana. Logstash is a server-side data processing pipeline that ingests data from a multitude of sources simultaneously, transforms it, and then sends it to your favorite &#34;stash.&#34; (Ours is Elasticsearch, naturally.). Logstash has over 200 plugins, and you can write your own very easily as well.&lt;/p&gt; &#xA;&lt;p&gt;For more info, see &lt;a href=&#34;https://www.elastic.co/products/logstash&#34;&gt;https://www.elastic.co/products/logstash&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation and Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can find the documentation and getting started guides for Logstash on the &lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html&#34;&gt;elastic.co site&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For information about building the documentation, see the README in &lt;a href=&#34;https://github.com/elastic/docs&#34;&gt;https://github.com/elastic/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;You can download officially released Logstash binaries, as well as debian/rpm packages for the supported platforms, from &lt;a href=&#34;https://www.elastic.co/downloads/logstash&#34;&gt;downloads page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need Help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discuss.elastic.co/c/logstash&#34;&gt;Logstash Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/index.html&#34;&gt;Logstash Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webchat.freenode.net/?channels=logstash&#34;&gt;#logstash on freenode IRC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/products/logstash&#34;&gt;Logstash Product Information&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/subscriptions&#34;&gt;Elastic Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Logstash Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Logstash plugins are hosted in separate repositories under the &lt;a href=&#34;https://github.com/logstash-plugins&#34;&gt;logstash-plugins&lt;/a&gt; github organization. Each plugin is a self-contained Ruby gem which gets published to RubyGems.org.&lt;/p&gt; &#xA;&lt;h3&gt;Writing your own Plugin&lt;/h3&gt; &#xA;&lt;p&gt;Logstash is known for its extensibility. There are hundreds of plugins for Logstash and you can write your own very easily! For more info on developing and testing these plugins, please see the &lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/contributing-to-logstash.html&#34;&gt;working with plugins section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Plugin Issues and Pull Requests&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please open new issues and pull requests for plugins under its own repository&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, if you have to report an issue/enhancement for the Elasticsearch output, please do so &lt;a href=&#34;https://github.com/logstash-plugins/logstash-output-elasticsearch/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Logstash core will continue to exist under this repository and all related issues and pull requests can be submitted here.&lt;/p&gt; &#xA;&lt;h2&gt;Developing Logstash Core&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install JDK version 11 or 17. Make sure to set the &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable to the path to your JDK installation directory. For example &lt;code&gt;set JAVA_HOME=&amp;lt;JDK_PATH&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install JRuby 9.2.x It is recommended to use a Ruby version manager such as &lt;a href=&#34;https://rvm.io/&#34;&gt;RVM&lt;/a&gt; or &lt;a href=&#34;https://github.com/sstephenson/rbenv&#34;&gt;rbenv&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;rake&lt;/code&gt; and &lt;code&gt;bundler&lt;/code&gt; tool using &lt;code&gt;gem install rake&lt;/code&gt; and &lt;code&gt;gem install bundler&lt;/code&gt; respectively.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RVM install (optional)&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to use rvm (ruby version manager) to manage Ruby versions on your machine, follow these directions. In the Logstash folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3&#xA;\curl -sSL https://get.rvm.io | bash -s stable --ruby=$(cat .ruby-version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Check Ruby version&lt;/h3&gt; &#xA;&lt;p&gt;Before you proceed, please check your ruby version by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ruby -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The printed version should be the same as in the &lt;code&gt;.ruby-version&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Building Logstash&lt;/h3&gt; &#xA;&lt;p&gt;The Logstash project includes the source code for all of Logstash, including the Elastic-Licensed X-Pack features and functions; to run Logstash from source using only the OSS-licensed code, export the &lt;code&gt;OSS&lt;/code&gt; environment variable with a value of &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export OSS=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set up the location of the source code to build&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export LOGSTASH_SOURCE=1&#xA;export LOGSTASH_PATH=/YOUR/LOGSTASH/DIRECTORY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run Logstash from the repo you must first bootstrap the environment:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can then use &lt;code&gt;bin/logstash&lt;/code&gt; to start Logstash, but there are no plugins installed. To install default plugins, you can run:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake plugin:install-default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the 80+ default plugins which makes Logstash ready to connect to multiple data sources, perform transformations and send the results to Elasticsearch and other destinations.&lt;/p&gt; &#xA;&lt;p&gt;To verify your environment, run the following to send your first event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin/logstash -e &#39;input { stdin { } } output { stdout {} }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should start Logstash with stdin input waiting for you to enter an event&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hello world&#xA;2016-11-11T01:22:14.405+0000 0.0.0.0 hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advanced: Drip Launcher&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ninjudd/drip&#34;&gt;Drip&lt;/a&gt; is a tool that solves the slow JVM startup problem while developing Logstash. The drip script is intended to be a drop-in replacement for the java command. We recommend using drip during development, in particular for running tests. Using drip, the first invocation of a command will not be faster but the subsequent commands will be swift.&lt;/p&gt; &#xA;&lt;p&gt;To tell logstash to use drip, set the environment variable &lt;code&gt;JAVACMD=`which drip`&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example (but see the &lt;em&gt;Testing&lt;/em&gt; section below before running rspec for the first time):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JAVACMD=`which drip` bin/rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caveats&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Drip does not work with STDIN. You cannot use drip for running configs which use the stdin plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Building Logstash Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To build the Logstash Reference (open source content only) on your local machine, clone the following repos:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/logstash&#34;&gt;logstash&lt;/a&gt; - contains main docs about core features&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/logstash-docs&#34;&gt;logstash-docs&lt;/a&gt; - contains generated plugin docs&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/docs&#34;&gt;docs&lt;/a&gt; - contains doc build files&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have the same branch checked out in &lt;code&gt;logstash&lt;/code&gt; and &lt;code&gt;logstash-docs&lt;/code&gt;. Check out &lt;code&gt;master&lt;/code&gt; in the &lt;code&gt;docs&lt;/code&gt; repo.&lt;/p&gt; &#xA;&lt;p&gt;Run the doc build script from within the &lt;code&gt;docs&lt;/code&gt; repo. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build_docs.pl --doc ../logstash/docs/index.asciidoc --chunk=1 -open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Most of the unit tests in Logstash are written using &lt;a href=&#34;http://rspec.info/&#34;&gt;rspec&lt;/a&gt; for the Ruby parts. For the Java parts, we use junit. For testing you can use the &lt;em&gt;test&lt;/em&gt; &lt;code&gt;rake&lt;/code&gt; tasks and the &lt;code&gt;bin/rspec&lt;/code&gt; command, see instructions below:&lt;/p&gt; &#xA;&lt;h3&gt;Core tests&lt;/h3&gt; &#xA;&lt;p&gt;1- To run the core tests you can use the Gradle task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use the &lt;code&gt;rspec&lt;/code&gt; tool to run all tests or run a specific test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/rspec&#xA;bin/rspec spec/foo/bar_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that before running the &lt;code&gt;rspec&lt;/code&gt; command for the first time you need to set up the RSpec test dependencies by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2- To run the subset of tests covering the Java codebase only run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew javaTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3- To execute the complete test-suite including the integration tests run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4- To execute a single Ruby test run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SPEC_OPTS=&#34;-fd -P logstash-core/spec/logstash/api/commands/default_metadata_spec.rb&#34; ./gradlew :logstash-core:rubyTests --tests org.logstash.RSpecTests    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;5- To execute single spec for integration test, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew integrationTests -PrubyIntegrationSpecs=specs/slowlog_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes you might find a change to a piece of Logstash code causes a test to hang. These can be hard to debug.&lt;/p&gt; &#xA;&lt;p&gt;If you set &lt;code&gt;LS_JAVA_OPTS=&#34;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&#34;&lt;/code&gt; you can connect to a running Logstash with your IDEs debugger which can be a great way of finding the issue.&lt;/p&gt; &#xA;&lt;h3&gt;Plugins tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the tests of all currently installed plugins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake test:plugins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the default set of plugins included in the logstash package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake test:install-default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Note that if a plugin is installed using the plugin manager &lt;code&gt;bin/logstash-plugin install ...&lt;/code&gt; do not forget to also install the plugins development dependencies using the following command after the plugin installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/logstash-plugin install --development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Artifacts&lt;/h2&gt; &#xA;&lt;p&gt;Built artifacts will be placed in the &lt;code&gt;LS_HOME/build&lt;/code&gt; directory, and will create the directory if it is not already present.&lt;/p&gt; &#xA;&lt;p&gt;You can build a Logstash snapshot package as tarball or zip file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew assembleTarDistribution&#xA;./gradlew assembleZipDistribution&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OSS-only artifacts can similarly be built with their own gradle tasks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew assembleOssTarDistribution&#xA;./gradlew assembleOssZipDistribution&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build .rpm and .deb, but the &lt;a href=&#34;https://github.com/jordansissel/fpm&#34;&gt;fpm&lt;/a&gt; tool is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake artifact:rpm&#xA;rake artifact:deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake artifact:rpm_oss&#xA;rake artifact:deb_oss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using a Custom JRuby Distribution&lt;/h2&gt; &#xA;&lt;p&gt;If you want the build to use a custom JRuby you can do so by setting a path to a custom JRuby distribution&#39;s source root via the &lt;code&gt;custom.jruby.path&lt;/code&gt; Gradle property.&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew clean test -Pcustom.jruby.path=&#34;/path/to/jruby&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Community: If a newbie has a bad time, it&#39;s a bug.&lt;/li&gt; &#xA; &lt;li&gt;Software: Make it work, then make it right, then make it fast.&lt;/li&gt; &#xA; &lt;li&gt;Technology: If it doesn&#39;t do a thing today, we can make it do it tomorrow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcome: ideas, patches, documentation, bug reports, complaints, and even something you drew up on a napkin.&lt;/p&gt; &#xA;&lt;p&gt;Programming is not a required skill. Whatever you&#39;ve seen about open source and maintainers or community members saying &#34;send patches or die&#34; - you will not see that here.&lt;/p&gt; &#xA;&lt;p&gt;It is more important to me that you are able to contribute.&lt;/p&gt; &#xA;&lt;p&gt;For more information about contributing, see the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/logstash/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>solidusio/solidus</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/solidusio/solidus</id>
    <link href="https://github.com/solidusio/solidus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üõíSolidus, Rails eCommerce System&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;250&#34; src=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/logo.svg?sanitize=true&#34; alt=&#34;Solidus logo&#34;&gt; &#xA;&lt;h1&gt;Solidus&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/solidusio/solidus/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/solidusio/solidus/tree/master.svg?style=shield&#34; alt=&#34;Circle CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/solidus&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/solidus.svg?sanitize=true&#34; alt=&#34;Gem&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/LICENSE.md&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-BSD-yellowgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;&lt;img src=&#34;https://opencollective.com/solidus/tiers/supporter/badge.svg?label=Supporters&amp;amp;color=brightgree&#34; alt=&#34;Supporters on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;&lt;img src=&#34;https://opencollective.com/solidus/tiers/bronze/badge.svg?label=Bronze%C2%A0Partners&amp;amp;color=brightgree&#34; alt=&#34;Bronze Partners on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;&lt;img src=&#34;https://opencollective.com/solidus/tiers/silver/badge.svg?label=Silver%C2%A0Partners&amp;amp;color=brightgree&#34; alt=&#34;Silver Partners on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;&lt;img src=&#34;https://opencollective.com/solidus/tiers/gold/badge.svg?label=Gold%C2%A0Partners&amp;amp;color=brightgree&#34; alt=&#34;Gold Partners on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/solidusio/solidus&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/solidusio/solidus/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://slack.solidus.io&#34;&gt;&lt;img src=&#34;http://slack.solidus.io/badge.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A free, open-source ecommerce platform that gives you complete control over your store.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visit our website&lt;/strong&gt;: &lt;a href=&#34;https://solidus.io/&#34;&gt;https://solidus.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read our Community Guidelines&lt;/strong&gt;: &lt;a href=&#34;https://solidus.io/community-guidelines/&#34;&gt;https://solidus.io/community-guidelines/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read our guides&lt;/strong&gt;: &lt;a href=&#34;https://guides.solidus.io/developers/&#34;&gt;https://guides.solidus.io/developers/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Join our Slack&lt;/strong&gt;: &lt;a href=&#34;http://slack.solidus.io/&#34;&gt;http://slack.solidus.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Solidus Security&lt;/strong&gt;: &lt;a href=&#34;https://groups.google.com/forum/#!forum/solidus-security&#34;&gt;mailing list&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#supporting-solidus&#34;&gt;Supporting Solidus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#installation-options&#34;&gt;Installation Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#developing-solidus&#34;&gt;Developing Solidus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supporting Solidus&lt;/h2&gt; &#xA;&lt;p&gt;As a community-driven project, Solidus relies on funds and time donated by developers and stakeholders who use Solidus for their businesses. If you&#39;d like to help Solidus keep growing, please consider:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;Become a backer or sponsor on Open Collective&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/raw/master/CONTRIBUTING.md&#34;&gt;Contribute to the project&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Main Contributor &amp;amp; Director&lt;/h3&gt; &#xA;&lt;p&gt;At present, Nebulab is the main code contributor and director of Solidus, providing technical guidance and coordinating community efforts and activities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nebulab.com/&#34;&gt;&lt;img src=&#34;https://nebulab.com/assets/img/logo-nebulab_gh-dark-light-mode.svg?sanitize=true&#34; alt=&#34;Nebulab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Ambassadors&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a Solidus Ambassador. Your logo will show up here with a link to your website. &lt;a href=&#34;https://opencollective.com/solidus&#34;&gt;Become an Ambassador&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://supergood.software/&#34;&gt;&lt;img src=&#34;https://images.opencollective.com/supergoodsoft/f720462/logo/100.png&#34; alt=&#34;Super Good Software&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://karmacreative.io/&#34;&gt;&lt;img src=&#34;https://images.opencollective.com/proxy/images?src=https%3A%2F%2Fopencollective-production.s3-us-west-1.amazonaws.com%2Fab94d2a0-7253-11e9-a366-37673cc38cee.png&amp;amp;height=100&#34; alt=&#34;Karma Creative&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.moddedeuros.com&#34;&gt;&lt;img src=&#34;https://images.opencollective.com/proxy/images?src=https%3A%2F%2Fimages.opencollective.com%2Fmodded-euros%2Ff1a80ae%2Flogo.png&amp;amp;height=100&#34; alt=&#34;ModdedEuros&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;Solidus is a complete open source ecommerce solution built with Ruby on Rails. It is a fork of &lt;a href=&#34;https://spreecommerce.org&#34;&gt;Spree&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://docs.solidus.io&#34;&gt;Solidus class documentation&lt;/a&gt; and the &lt;a href=&#34;https://guides.solidus.io&#34;&gt;Solidus Guides&lt;/a&gt; for information about the functionality that Solidus provides.&lt;/p&gt; &#xA;&lt;p&gt;Solidus consists of several gems. When you require the &lt;code&gt;solidus&lt;/code&gt; gem in your &lt;code&gt;Gemfile&lt;/code&gt;, Bundler will install all of the gems maintained in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/api&#34;&gt;&lt;code&gt;solidus_api&lt;/code&gt;&lt;/a&gt; (RESTful API)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/frontend&#34;&gt;&lt;code&gt;solidus_frontend&lt;/code&gt;&lt;/a&gt; (Cart and storefront)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/backend&#34;&gt;&lt;code&gt;solidus_backend&lt;/code&gt;&lt;/a&gt; (Admin area)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/core&#34;&gt;&lt;code&gt;solidus_core&lt;/code&gt;&lt;/a&gt; (Essential models, mailers, and classes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/sample&#34;&gt;&lt;code&gt;solidus_sample&lt;/code&gt;&lt;/a&gt; (Sample data)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of the gems are designed to work together to provide a fully functional ecommerce platform. However, you may only want to use the &lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/core&#34;&gt;&lt;code&gt;solidus_core&lt;/code&gt;&lt;/a&gt; gem combine it with your own custom frontend, admin interface, and API.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;You can try the live Solidus demo &lt;a href=&#34;http://demo.solidus.io/&#34;&gt;here.&lt;/a&gt; The admin section can be accessed &lt;a href=&#34;http://demo.solidus.io/admin&#34;&gt;here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also try out Solidus with one-click on Heroku:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/solidusio/solidus-example-app&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can use Docker to run a demo on your local machine. Run the following command to download the image and run it at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -p 3000:3000 solidusio/solidus-demo:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The admin interface can be accessed at &lt;a href=&#34;http://localhost:3000/admin/&#34;&gt;http://localhost:3000/admin/&lt;/a&gt;, the default credentials are &lt;code&gt;admin@example.com&lt;/code&gt; and &lt;code&gt;test123&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Begin by making sure you have &lt;a href=&#34;http://imagemagick.org/script/download.php&#34;&gt;Imagemagick&lt;/a&gt; installed, which is required for Paperclip. (You can install it using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; if you&#39;re on a Mac.)&lt;/p&gt; &#xA;&lt;p&gt;To add Solidus, begin with a Rails 5.2, 6 or 6.1 application and a database configured and created.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Solidus&lt;/h3&gt; &#xA;&lt;p&gt;In your application&#39;s root folder run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle add solidus&#xA;bin/rails g solidus:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And follow the prompt&#39;s instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing Solidus Store&lt;/h3&gt; &#xA;&lt;p&gt;Start the Rails server with the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/solidusio/solidus/tree/master/frontend&#34;&gt;&lt;code&gt;solidus_frontend&lt;/code&gt;&lt;/a&gt; storefront will be accessible at &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; and the admin can be found at &lt;a href=&#34;http://localhost:3000/admin/&#34;&gt;http://localhost:3000/admin/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For information on how to customize your store, check out the &lt;a href=&#34;https://guides.solidus.io/developers/customizations/overview.html&#34;&gt;customization guides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Default Username/Password&lt;/h3&gt; &#xA;&lt;p&gt;As part of running the above installation steps, you will be asked to set an admin email/password combination. The default values are &lt;code&gt;admin@example.com&lt;/code&gt; and &lt;code&gt;test123&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;h3&gt;Questions?&lt;/h3&gt; &#xA;&lt;p&gt;The best way to ask questions is to &lt;a href=&#34;http://slack.solidus.io/&#34;&gt;join the Solidus Slack&lt;/a&gt; and join the &lt;a href=&#34;https://solidusio.slack.com/messages/support/details/&#34;&gt;#support channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation options&lt;/h2&gt; &#xA;&lt;p&gt;Instead of a stable build, if you want to use the bleeding edge version of Solidus, use this line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;solidus&#39;, github: &#39;solidusio/solidus&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: The master branch is not guaranteed to ever be in a fully functioning state. It is too risky to use this branch in production.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, the installation generator (&lt;code&gt;solidus:install&lt;/code&gt;) will run migrations as well as adding seed and sample data. This can be disabled using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g solidus:install --migrate=false --sample=false --seed=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can always perform any of these steps later by using these commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails railties:install:migrations&#xA;bin/rails db:migrate&#xA;bin/rails db:seed&#xA;bin/rails spree_sample:load&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also options and rake tasks provided by &lt;a href=&#34;https://github.com/solidusio/solidus_auth_devise&#34;&gt;solidus_auth_devise&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;You may notice that your Solidus store runs slowly in development mode. This can be because in development each CSS and JavaScript is loaded as a separate include. This can be disabled by adding the following to &lt;code&gt;config/environments/development.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.assets.debug = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Turbolinks&lt;/h3&gt; &#xA;&lt;p&gt;To gain some extra speed you may enable Turbolinks inside of Solidus admin.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#39;turbolinks&#39;, &#39;~&amp;gt; 5.0.0&#39;&lt;/code&gt; into your &lt;code&gt;Gemfile&lt;/code&gt; (if not already present) and change &lt;code&gt;vendor/assets/javascripts/spree/backend/all.js&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require turbolinks&#xA;//&#xA;// ... current file content&#xA;//&#xA;//= require spree/backend/turbolinks-integration.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt; Please be aware that Turbolinks can break extensions and/or customizations to the Solidus admin. Use at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;Developing Solidus&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the Git repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git://github.com/solidusio/solidus.git&#xA;cd solidus&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Without Docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the gem dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: If you&#39;re using PostgreSQL or MySQL, you&#39;ll need to install those gems through the DB environment variable.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# PostgreSQL&#xA;export DB=postgresql&#xA;bin/setup&#xA;&#xA;# MySQL&#xA;export DB=mysql&#xA;bin/setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;With Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait for all the gems to be installed (progress can be checked through &lt;code&gt;docker-compose logs -f app&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can provide the ruby version you want your image to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build --build-arg RUBY_VERSION=2.6 app&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rails version can be customized at runtime through &lt;code&gt;RAILS_VERSION&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RAILS_VERSION=&#39;~&amp;gt; 5.0&#39; docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# sqlite&#xA;docker-compose exec app bin/rspec&#xA;# postgres&#xA;docker-compose exec app env DB=postgres bin/rspec&#xA;# mysql&#xA;docker-compose exec app env DB=mysql bin/rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing the databases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# sqlite&#xA;docker-compose exec app sqlite3 /path/to/db&#xA;# postgres&#xA;docker-compose exec app env PGPASSWORD=password psql -U root -h postgres&#xA;# mysql&#xA;docker-compose exec app mysql -u root -h mysql -ppassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to be able to access the &lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/#sandbox&#34;&gt;sandbox application&lt;/a&gt;, just make sure to provide the appropriate &lt;code&gt;--binding&lt;/code&gt; option to &lt;code&gt;rails server&lt;/code&gt;. By default, port &lt;code&gt;3000&lt;/code&gt; is exposed, but you can change it through &lt;code&gt;SANDBOX_PORT&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SANDBOX_PORT=4000 docker-compose up -d&#xA;docker-compose exec app bin/sandbox&#xA;docker-compose exec app bin/rails server --binding 0.0.0.0 --port 4000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sandbox&lt;/h3&gt; &#xA;&lt;p&gt;Solidus is meant to be run within the context of Rails application. You can easily create a sandbox application inside of your cloned source directory for testing purposes.&lt;/p&gt; &#xA;&lt;p&gt;This sandbox includes solidus_auth_devise and generates with seed and sample data already loaded.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the sandbox application&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can create a sandbox with PostgreSQL or MySQL by setting the DB environment variable.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# PostgreSQL&#xA;export DB=postgresql&#xA;bin/sandbox&#xA;&#xA;# MySQL&#xA;export DB=mysql&#xA;bin/sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need to create a Rails 5.2 application for your sandbox, for example if you are still using Ruby 2.4 which is not supported by Rails 6, you can use the &lt;code&gt;RAILS_VERSION&lt;/code&gt; environment variable.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  export RAILS_VERSION=&#39;~&amp;gt; 5.2.0&#39;&#xA;  bin/setup&#xA;  bin/sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the server (&lt;code&gt;bin/rails&lt;/code&gt; will forward any argument to the sandbox)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Solidus uses &lt;a href=&#34;http://rspec.info&#34;&gt;RSpec&lt;/a&gt; for tests. Refer to its documentation for more information about the testing library.&lt;/p&gt; &#xA;&lt;h4&gt;CircleCI&lt;/h4&gt; &#xA;&lt;p&gt;We use CircleCI to run the tests for Solidus as well as all incoming pull requests. All pull requests must pass to be merged.&lt;/p&gt; &#xA;&lt;p&gt;You can see the build statuses at &lt;a href=&#34;https://circleci.com/gh/solidusio/solidus&#34;&gt;https://circleci.com/gh/solidusio/solidus&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Run all tests&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/home&#34;&gt;ChromeDriver&lt;/a&gt; is required to run the frontend and backend test suites.&lt;/p&gt; &#xA;&lt;p&gt;To execute all of the test specs, run the &lt;code&gt;bin/build&lt;/code&gt; script at the root of the Solidus project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;createuser --superuser --echo postgres # only the first time&#xA;bin/build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;bin/build&lt;/code&gt; script runs using PostgreSQL by default, but it can be overridden by setting the DB environment variable to &lt;code&gt;DB=sqlite&lt;/code&gt; or &lt;code&gt;DB=mysql&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env DB=mysql bin/build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the command fails with MySQL related errors you can try creating a user with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Creates a user with the same name as the current user and no restrictions.&#xA;mysql --user=&#34;root&#34; --execute=&#34;CREATE USER &#39;$USER&#39;@&#39;localhost&#39;; GRANT ALL PRIVILEGES ON * . * TO &#39;$USER&#39;@&#39;localhost&#39;;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run an individual test suite&lt;/h4&gt; &#xA;&lt;p&gt;Each gem contains its own series of tests. To run the tests for the core project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd core&#xA;bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;rspec&lt;/code&gt; runs the tests for SQLite 3. If you would like to run specs against another database you may specify the database in the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env DB=postgresql bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Code coverage reports&lt;/h4&gt; &#xA;&lt;p&gt;If you want to run the &lt;a href=&#34;https://github.com/colszowka/simplecov&#34;&gt;SimpleCov&lt;/a&gt; code coverage report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;COVERAGE=true bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;In addition to core functionality provided in Solidus, there are a number of ways to add features to your store that are not (or not yet) part of the core project.&lt;/p&gt; &#xA;&lt;p&gt;A list can be found at &lt;a href=&#34;http://extensions.solidus.io/&#34;&gt;extensions.solidus.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to write an extension for Solidus, you can use the &lt;a href=&#34;https://github.com/solidusio/solidus_dev_support.git&#34;&gt;solidus_dev_support&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Solidus is an open source project and we encourage contributions. Please read &lt;a href=&#34;https://raw.githubusercontent.com/solidusio/solidus/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before contributing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DataDog/dd-trace-rb</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/DataDog/dd-trace-rb</id>
    <link href="https://github.com/DataDog/dd-trace-rb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Datadog Tracing Ruby Client&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Version 1.0.0 has recently been released. Check out our &lt;a href=&#34;https://github.com/DataDog/dd-trace-rb/raw/master/docs/UpgradeGuide.md#from-0x-to-10&#34;&gt;upgrade guide&lt;/a&gt; for more details.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Datadog Trace Client&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/ddtrace/&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/ddtrace&#34; alt=&#34;Gem&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/DataDog/dd-trace-rb/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/DataDog/dd-trace-rb/tree/master.svg?style=svg&amp;amp;circle-token=b0bd5ef866ec7f7b018f48731bb495f2d1372cc1&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/DataDog/dd-trace-rb/branch/master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/DataDog/dd-trace-rb/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.rubydoc.info/gems/ddtrace/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/YARD-documentation-blue&#34; alt=&#34;YARD documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ddtrace&lt;/code&gt; is Datadog‚Äôs tracing client for Ruby. It is used to trace requests as they flow across web servers, databases and microservices so that developers have great visiblity into bottlenecks and troublesome requests.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;For a basic product overview, check out our &lt;a href=&#34;https://docs.datadoghq.com/tracing/setup/ruby/&#34;&gt;setup documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For installation, configuration, and details about using the API, check out our &lt;a href=&#34;https://github.com/DataDog/dd-trace-rb/raw/master/docs/GettingStarted.md&#34;&gt;API documentation&lt;/a&gt; and &lt;a href=&#34;http://gems.datadoghq.com/trace/docs/&#34;&gt;gem documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For descriptions of terminology used in APM, take a look at the &lt;a href=&#34;https://docs.datadoghq.com/tracing/visualization/&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For contributing, checkout the &lt;a href=&#34;https://github.com/DataDog/dd-trace-rb/raw/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&#34;https://github.com/DataDog/dd-trace-rb/raw/master/docs/DevelopmentGuide.md&#34;&gt;development guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>octokit/octokit.rb</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/octokit/octokit.rb</id>
    <link href="https://github.com/octokit/octokit.rb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby toolkit for the GitHub API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Octokit&lt;/h1&gt; &#xA;&lt;p&gt;Ruby toolkit for the GitHub API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.github.com/assets/images/gundamcat.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Upgrading? Check the &lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#upgrading-guide&#34;&gt;Upgrade Guide&lt;/a&gt; before bumping to a new &lt;a href=&#34;http://semver.org/&#34;&gt;major version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#philosophy&#34;&gt;Philosophy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#quick-start&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#making-requests&#34;&gt;Making requests&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#additional-query-parameters&#34;&gt;Additional Query Parameters&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#consuming-resources&#34;&gt;Consuming resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#accessing-http-responses&#34;&gt;Accessing HTTP responses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#handling-errors&#34;&gt;Handling errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#authentication&#34;&gt;Authentication&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#basic-authentication&#34;&gt;Basic Authentication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#oauth-access-tokens&#34;&gt;OAuth access tokens&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#two-factor-authentication&#34;&gt;Two-Factor Authentication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#using-a-netrc-file&#34;&gt;Using a .netrc file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#application-authentication&#34;&gt;Application authentication&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#pagination&#34;&gt;Pagination&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#auto-pagination&#34;&gt;Auto pagination&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#working-with-github-enterprise&#34;&gt;Working with GitHub Enterprise&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#interacting-with-the-githubcom-apis-in-github-enterprise&#34;&gt;Interacting with the GitHub.com APIs in GitHub Enterprise&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#interacting-with-the-github-enterprise-admin-apis&#34;&gt;Interacting with the GitHub Enterprise Admin APIs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#interacting-with-the-github-enterprise-management-console-apis&#34;&gt;Interacting with the GitHub Enterprise Management Console APIs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#ssl-connection-errors&#34;&gt;SSL Connection Errors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#configuration-and-defaults&#34;&gt;Configuration and defaults&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#configuring-module-defaults&#34;&gt;Configuring module defaults&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#using-env-variables&#34;&gt;Using ENV variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#timeouts&#34;&gt;Timeouts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#hypermedia-agent&#34;&gt;Hypermedia agent&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#hypermedia-in-octokit&#34;&gt;Hypermedia in Octokit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#uri-templates&#34;&gt;URI templates&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#the-full-hypermedia-experience&#34;&gt;The Full Hypermedia Experience‚Ñ¢&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#upgrading-guide&#34;&gt;Upgrading guide&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#upgrading-from-1xx&#34;&gt;Upgrading from 1.x.x&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#advanced-usage&#34;&gt;Advanced usage&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#caching&#34;&gt;Caching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#hacking-on-octokitrb&#34;&gt;Hacking on Octokit.rb&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#running-and-writing-new-tests&#34;&gt;Running and writing new tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#supported-ruby-versions&#34;&gt;Supported Ruby Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#making-repeating-requests&#34;&gt;Making Repeating Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;API wrappers &lt;a href=&#34;http://wynnnetherland.com/journal/what-makes-a-good-api-wrapper&#34;&gt;should reflect the idioms of the language in which they were written&lt;/a&gt;. Octokit.rb wraps the &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;GitHub API&lt;/a&gt; in a flat API client that follows Ruby conventions and requires little knowledge of REST. Most methods have positional arguments for required input and an options hash for optional parameters, headers, or other options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Octokit::Client.new&#xA;&#xA;# Fetch a README with Accept header for HTML format&#xA;client.readme &#39;al3x/sovereign&#39;, :accept =&amp;gt; &#39;application/vnd.github.html&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via Rubygems&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install octokit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or add to your Gemfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#34;octokit&#34;, &#34;~&amp;gt; 4.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Access the library in Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require &#39;octokit&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Making requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://octokit.github.io/octokit.rb/method_list.html&#34;&gt;API methods&lt;/a&gt; are available as client instance methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Provide authentication credentials&#xA;client = Octokit::Client.new(:access_token =&amp;gt; &#39;personal_access_token&#39;)&#xA;&#xA;# You can still use the username/password syntax by replacing the password value with your PAT.&#xA;# client = Octokit::Client.new(:login =&amp;gt; &#39;defunkt&#39;, :password =&amp;gt; &#39;personal_access_token&#39;)&#xA;&#xA;# Fetch the current user&#xA;client.user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Additional query parameters&lt;/h3&gt; &#xA;&lt;p&gt;When passing additional parameters to GET based request use the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt; # query: { parameter_name: &#39;value&#39; }&#xA; # Example: Get repository listing by owner in ascending order&#xA; client.repos({}, query: {type: &#39;owner&#39;, sort: &#39;asc&#39;})&#xA;&#xA; # Example: Get contents of a repository by ref&#xA; # https://api.github.com/repos/octokit/octokit.rb/contents/path/to/file.rb?ref=some-other-branch&#xA; client.contents(&#39;octokit/octokit.rb&#39;, path: &#39;path/to/file.rb&#39;, query: {ref: &#39;some-other-branch&#39;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Consuming resources&lt;/h2&gt; &#xA;&lt;p&gt;Most methods return a &lt;code&gt;Resource&lt;/code&gt; object which provides dot notation and &lt;code&gt;[]&lt;/code&gt; access for fields returned in the API response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Octokit::Client.new&#xA;&#xA;# Fetch a user&#xA;user = client.user &#39;jbarnette&#39;&#xA;puts user.name&#xA;# =&amp;gt; &#34;John Barnette&#34;&#xA;puts user.fields&#xA;# =&amp;gt; &amp;lt;Set: {:login, :id, :gravatar_id, :type, :name, :company, :blog, :location, :email, :hireable, :bio, :public_repos, :followers, :following, :created_at, :updated_at, :public_gists}&amp;gt;&#xA;puts user[:company]&#xA;# =&amp;gt; &#34;GitHub&#34;&#xA;user.rels[:gists].href&#xA;# =&amp;gt; &#34;https://api.github.com/users/jbarnette/gists&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; URL fields are culled into a separate &lt;code&gt;.rels&lt;/code&gt; collection for easier &lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#hypermedia-agent&#34;&gt;Hypermedia&lt;/a&gt; support.&lt;/p&gt; &#xA;&lt;h2&gt;Accessing HTTP responses&lt;/h2&gt; &#xA;&lt;p&gt;While most methods return a &lt;code&gt;Resource&lt;/code&gt; object or a Boolean, sometimes you may need access to the raw HTTP response headers. You can access the last HTTP response with &lt;code&gt;Client#last_response&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user      = client.user &#39;andrewpthorp&#39;&#xA;response  = client.last_response&#xA;etag      = response.headers[:etag]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Handling errors&lt;/h2&gt; &#xA;&lt;p&gt;When the API returns an error response, Octokit will raise a Ruby exception.&lt;/p&gt; &#xA;&lt;p&gt;A range of different exceptions can be raised depending on the error returned by the API - for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;400 Bad Request&lt;/code&gt; response will lead to an &lt;code&gt;Octokit::BadRequest&lt;/code&gt; error&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;403 Forbidden&lt;/code&gt; error with a &#34;rate limited exceeded&#34; message will lead to a &lt;code&gt;Octokit::TooManyRequests&lt;/code&gt; error&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of the different exception classes inherit from &lt;code&gt;Octokit::Error&lt;/code&gt; and expose the &lt;code&gt;#response_status&lt;/code&gt;, &lt;code&gt;#response_headers&lt;/code&gt; and &lt;code&gt;#response_body&lt;/code&gt;. For validation errors, &lt;code&gt;#errors&lt;/code&gt; will return an &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;Hash&lt;/code&gt;es with the detailed information &lt;a href=&#34;https://docs.github.com/en/rest/overview/resources-in-the-rest-api#client-errors&#34;&gt;returned by the API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;Octokit supports the various &lt;a href=&#34;http://developer.github.com/v3/#authentication&#34;&gt;authentication methods supported by the GitHub API&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;Basic Authentication&lt;/h3&gt; &#xA;&lt;p&gt;Using your GitHub username and password is the easiest way to get started making authenticated requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Octokit::Client.new(:login =&amp;gt; &#39;defunkt&#39;, :password =&amp;gt; &#39;c0d3b4ssssss!&#39;)&#xA;&#xA;user = client.user&#xA;user.login&#xA;# =&amp;gt; &#34;defunkt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While Basic Authentication allows you to get started quickly, OAuth access tokens are the preferred way to authenticate on behalf of users.&lt;/p&gt; &#xA;&lt;h3&gt;OAuth access tokens&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://developer.github.com/v3/oauth/&#34;&gt;OAuth access tokens&lt;/a&gt; provide two main benefits over using your username and password:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Revocable access&lt;/strong&gt;. Access tokens can be revoked, removing access for only that token without having to change your password everywhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Limited access&lt;/strong&gt;. Access tokens have &lt;a href=&#34;http://developer.github.com/v3/oauth/#scopes&#34;&gt;access scopes&lt;/a&gt; which allow for more granular access to API resources. For instance, you can grant a third party access to your gists but not your private repositories.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use an access token with the Octokit client, pass your token in the &lt;code&gt;:access_token&lt;/code&gt; options parameter in lieu of your username and password:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Octokit::Client.new(:access_token =&amp;gt; &#34;&amp;lt;your 40 char token&amp;gt;&#34;)&#xA;&#xA;user = client.user&#xA;user.login&#xA;# =&amp;gt; &#34;defunkt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://help.github.com/articles/creating-an-access-token-for-command-line-use&#34;&gt;create access tokens through your GitHub Account Settings&lt;/a&gt; or with a basic authenticated Octokit client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Octokit::Client.new(:login =&amp;gt; &#39;defunkt&#39;, :password =&amp;gt; &#39;c0d3b4ssssss!&#39;)&#xA;&#xA;client.create_authorization(:scopes =&amp;gt; [&#34;user&#34;], :note =&amp;gt; &#34;Name of token&#34;)&#xA;# =&amp;gt; &amp;lt;your new oauth token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Two-Factor Authentication&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/about-two-factor-authentication&#34;&gt;Two-Factor Authentication&lt;/a&gt; brings added security to the account by requiring more information to login.&lt;/p&gt; &#xA;&lt;p&gt;Using two-factor authentication for API calls is as simple as adding the &lt;a href=&#34;http://developer.github.com/v3/auth/#working-with-two-factor-authentication&#34;&gt;required header&lt;/a&gt; as an option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Octokit::Client.new \&#xA;  :login    =&amp;gt; &#39;defunkt&#39;,&#xA;  :password =&amp;gt; &#39;c0d3b4ssssss!&#39;&#xA;&#xA;user = client.user(&#34;defunkt&#34;, :headers =&amp;gt; { &#34;X-GitHub-OTP&#34; =&amp;gt; &#34;&amp;lt;your 2FA token&amp;gt;&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can imagine, this gets annoying quickly since two-factor auth tokens are very short lived. So it is recommended to create an oauth token for the user to communicate with the API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Octokit::Client.new \&#xA;  :login    =&amp;gt; &#39;defunkt&#39;,&#xA;  :password =&amp;gt; &#39;c0d3b4ssssss!&#39;&#xA;&#xA;client.create_authorization(:scopes =&amp;gt; [&#34;user&#34;], :note =&amp;gt; &#34;Name of token&#34;,&#xA;                            :headers =&amp;gt; { &#34;X-GitHub-OTP&#34; =&amp;gt; &#34;&amp;lt;your 2FA token&amp;gt;&#34; })&#xA;# =&amp;gt; &amp;lt;your new oauth token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a .netrc file&lt;/h3&gt; &#xA;&lt;p&gt;Octokit supports reading credentials from a netrc file (defaulting to &lt;code&gt;~/.netrc&lt;/code&gt;). Given these lines in your netrc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;machine api.github.com&#xA;  login defunkt&#xA;  password c0d3b4ssssss!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now create a client with those credentials:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Octokit::Client.new(:netrc =&amp;gt; true)&#xA;client.login&#xA;# =&amp;gt; &#34;defunkt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But &lt;em&gt;I want to use OAuth&lt;/em&gt; you say. Since the GitHub API supports using an OAuth token as a Basic password, you totally can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;machine api.github.com&#xA;  login defunkt&#xA;  password &amp;lt;your 40 char token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Support for netrc requires adding the &lt;a href=&#34;https://rubygems.org/gems/netrc&#34;&gt;netrc gem&lt;/a&gt; to your Gemfile or &lt;code&gt;.gemspec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Application authentication&lt;/h3&gt; &#xA;&lt;p&gt;Octokit also supports application-only authentication &lt;a href=&#34;http://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications&#34;&gt;using OAuth application client credentials&lt;/a&gt;. Using application credentials will result in making anonymous API calls on behalf of an application in order to take advantage of the higher rate limit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Octokit::Client.new \&#xA;  :client_id     =&amp;gt; &#34;&amp;lt;your 20 char id&amp;gt;&#34;,&#xA;  :client_secret =&amp;gt; &#34;&amp;lt;your 40 char secret&amp;gt;&#34;&#xA;&#xA;user = client.user &#39;defunkt&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default results per_page&lt;/h2&gt; &#xA;&lt;p&gt;Default results from the GitHub API are 30, if you wish to add more you must do so during Octokit configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Octokit::Client.new(access_token: &#34;&amp;lt;your 40 char token&amp;gt;&#34;, per_page: 100)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pagination&lt;/h2&gt; &#xA;&lt;p&gt;Many GitHub API resources are &lt;a href=&#34;http://developer.github.com/v3/#pagination&#34;&gt;paginated&lt;/a&gt;. While you may be tempted to start adding &lt;code&gt;:page&lt;/code&gt; parameters to your calls, the API returns links to the next, previous, and last pages for you in the &lt;code&gt;Link&lt;/code&gt; response header as &lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#hypermedia-agent&#34;&gt;Hypermedia link relations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;issues = client.issues &#39;rails/rails&#39;&#xA;issues.concat client.get(client.last_response.rels[:next].href)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Auto pagination&lt;/h3&gt; &#xA;&lt;p&gt;For smallish resource lists, Octokit provides auto pagination. When this is enabled, calls for paginated resources will fetch and concatenate the results from every page into a single array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.auto_paginate = true&#xA;issues = client.issues &#39;rails/rails&#39;&#xA;issues.length&#xA;&#xA;# =&amp;gt; 702&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also enable auto pagination for all Octokit client instances:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Octokit.configure do |c|&#xA;  c.auto_paginate = true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While Octokit auto pagination will set the page size to the maximum &lt;code&gt;100&lt;/code&gt;, and seek to not overstep your rate limit, you probably want to use a custom pattern for traversing large lists.&lt;/p&gt; &#xA;&lt;h2&gt;Working with GitHub Enterprise&lt;/h2&gt; &#xA;&lt;p&gt;With a bit of setup, you can also use Octokit with your GitHub Enterprise instance.&lt;/p&gt; &#xA;&lt;h3&gt;Interacting with the GitHub.com APIs in GitHub Enterprise&lt;/h3&gt; &#xA;&lt;p&gt;To interact with the &#34;regular&#34; GitHub.com APIs in GitHub Enterprise, simply configure the &lt;code&gt;api_endpoint&lt;/code&gt; to match your hostname. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Octokit.configure do |c|&#xA;  c.api_endpoint = &#34;https://&amp;lt;hostname&amp;gt;/api/v3/&#34;&#xA;end&#xA;&#xA;client = Octokit::Client.new(:access_token =&amp;gt; &#34;&amp;lt;your 40 char token&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interacting with the GitHub Enterprise Admin APIs&lt;/h3&gt; &#xA;&lt;p&gt;The GitHub Enterprise Admin APIs are under a different client: &lt;code&gt;EnterpriseAdminClient&lt;/code&gt;. You&#39;ll need to have an administrator account in order to use these APIs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;admin_client = Octokit::EnterpriseAdminClient.new(&#xA;  :access_token =&amp;gt; &#34;&amp;lt;your 40 char token&amp;gt;&#34;,&#xA;  :api_endpoint =&amp;gt; &#34;https://&amp;lt;hostname&amp;gt;/api/v3/&#34;&#xA;)&#xA;&#xA;# or&#xA;Octokit.configure do |c|&#xA;  c.api_endpoint = &#34;https://&amp;lt;hostname&amp;gt;/api/v3/&#34;&#xA;  c.access_token = &#34;&amp;lt;your 40 char token&amp;gt;&#34;&#xA;end&#xA;&#xA;admin_client = Octokit.enterprise_admin_client.new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interacting with the GitHub Enterprise Management Console APIs&lt;/h3&gt; &#xA;&lt;p&gt;The GitHub Enterprise Management Console APIs are also under a separate client: &lt;code&gt;EnterpriseManagementConsoleClient&lt;/code&gt;. In order to use it, you&#39;ll need to provide both your management console password as well as the endpoint to your management console. This is different from the API endpoint provided above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;management_console_client = Octokit::EnterpriseManagementConsoleClient.new(&#xA;  :management_console_password =&amp;gt; &#34;secret&#34;,&#xA;  :management_console_endpoint = &#34;https://hostname:8633&#34;&#xA;)&#xA;&#xA;# or&#xA;Octokit.configure do |c|&#xA;  c.management_console_endpoint = &#34;https://hostname:8633&#34;&#xA;  c.management_console_password = &#34;secret&#34;&#xA;end&#xA;&#xA;management_console_client = Octokit.enterprise_management_console_client.new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSL Connection Errors&lt;/h3&gt; &#xA;&lt;p&gt;You &lt;em&gt;may&lt;/em&gt; need to disable SSL temporarily while first setting up your GitHub Enterprise install. You can do that with the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.connection_options[:ssl] = { :verify =&amp;gt; false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do remember to turn &lt;code&gt;:verify&lt;/code&gt; back to &lt;code&gt;true&lt;/code&gt;, as it&#39;s important for secure communication.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration and defaults&lt;/h2&gt; &#xA;&lt;p&gt;While &lt;code&gt;Octokit::Client&lt;/code&gt; accepts a range of options when creating a new client instance, Octokit&#39;s configuration API allows you to set your configuration options at the module level. This is particularly handy if you&#39;re creating a number of client instances based on some shared defaults. Changing options affects new instances only and will not modify existing &lt;code&gt;Octokit::Client&lt;/code&gt; instances created with previous options.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring module defaults&lt;/h3&gt; &#xA;&lt;p&gt;Every writable attribute in {Octokit::Configurable} can be set one at a time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Octokit.api_endpoint = &#39;http://api.github.dev&#39;&#xA;Octokit.web_endpoint = &#39;http://github.dev&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in batch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Octokit.configure do |c|&#xA;  c.api_endpoint = &#39;http://api.github.dev&#39;&#xA;  c.web_endpoint = &#39;http://github.dev&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using ENV variables&lt;/h3&gt; &#xA;&lt;p&gt;Default configuration values are specified in {Octokit::Default}. Many attributes will look for a default value from the ENV before returning Octokit&#39;s default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Given $OCTOKIT_API_ENDPOINT is &#34;http://api.github.dev&#34;&#xA;client.api_endpoint&#xA;&#xA;# =&amp;gt; &#34;http://api.github.dev&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deprecation warnings and API endpoints in development preview warnings are printed to STDOUT by default, these can be disabled by setting the ENV &lt;code&gt;OCTOKIT_SILENT=true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Timeouts&lt;/h3&gt; &#xA;&lt;p&gt;By default, Octokit does not timeout network requests. To set a timeout, pass in Faraday timeout settings to Octokit&#39;s &lt;code&gt;connection_options&lt;/code&gt; setting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Octokit.configure do |c|&#xA;  c.api_endpoint = ENV.fetch(&#39;GITHUB_API_ENDPOINT&#39;, &#39;https://api.github.com/&#39;)&#xA;  c.connection_options = {&#xA;    request: {&#xA;      open_timeout: 5,&#xA;      timeout: 5&#xA;    }&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should set a timeout in order to avoid Ruby‚Äôs Timeout module, which can hose your server. Here are some resources for more information on this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.schneems.com/2017/02/21/the-oldest-bug-in-ruby-why-racktimeout-might-hose-your-server/&#34;&gt;The Oldest Bug In Ruby - Why Rack::Timeout Might Hose your Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mikeperham.com/2015/05/08/timeout-rubys-most-dangerous-api/&#34;&gt;Timeout: Ruby&#39;s Most Dangerous API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankane/the-ultimate-guide-to-ruby-timeouts&#34;&gt;The Ultimate Guide to Ruby Timeouts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hypermedia agent&lt;/h2&gt; &#xA;&lt;p&gt;Starting in version 2.0, Octokit is &lt;a href=&#34;http://en.wikipedia.org/wiki/Hypermedia&#34;&gt;hypermedia&lt;/a&gt;-enabled. Under the hood, {Octokit::Client} uses &lt;a href=&#34;https://github.com/lostisland/sawyer&#34;&gt;Sawyer&lt;/a&gt;, a hypermedia client built on &lt;a href=&#34;https://github.com/lostisland/faraday&#34;&gt;Faraday&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Hypermedia in Octokit&lt;/h3&gt; &#xA;&lt;p&gt;Resources returned by Octokit methods contain not only data but hypermedia link relations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user = client.user &#39;technoweenie&#39;&#xA;&#xA;# Get the repos rel, returned from the API&#xA;# as repos_url in the resource&#xA;user.rels[:repos].href&#xA;# =&amp;gt; &#34;https://api.github.com/users/technoweenie/repos&#34;&#xA;&#xA;repos = user.rels[:repos].get.data&#xA;repos.last.name&#xA;# =&amp;gt; &#34;faraday-zeromq&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When processing API responses, all &lt;code&gt;*_url&lt;/code&gt; attributes are culled into the link relations collection. Any &lt;code&gt;url&lt;/code&gt; attribute becomes &lt;code&gt;.rels[:self]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;URI templates&lt;/h3&gt; &#xA;&lt;p&gt;You might notice many link relations have variable placeholders. Octokit supports &lt;a href=&#34;http://tools.ietf.org/html/rfc6570&#34;&gt;URI Templates&lt;/a&gt; for parameterized URI expansion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;repo = client.repo &#39;pengwynn/pingwynn&#39;&#xA;rel = repo.rels[:issues]&#xA;# =&amp;gt; #&amp;lt;Sawyer::Relation: issues: get https://api.github.com/repos/pengwynn/pingwynn/issues{/number}&amp;gt;&#xA;&#xA;# Get a page of issues&#xA;rel.get.data&#xA;&#xA;# Get issue #2&#xA;rel.get(:uri =&amp;gt; {:number =&amp;gt; 2}).data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The Full Hypermedia Experience‚Ñ¢&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use Octokit as a pure hypermedia API client, you can start at the API root and follow link relations from there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;root = client.root&#xA;root.rels[:repository].get :uri =&amp;gt; {:owner =&amp;gt; &#34;octokit&#34;, :repo =&amp;gt; &#34;octokit.rb&#34; }&#xA;root.rels[:user_repositories].get :uri =&amp;gt; { :user =&amp;gt; &#34;octokit&#34; },&#xA;                                  :query =&amp;gt; { :type =&amp;gt; &#34;owner&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Octokit 3.0 aims to be hypermedia-driven, removing the internal URL construction currently used throughout the client.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading guide&lt;/h2&gt; &#xA;&lt;p&gt;Version 4.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;removes support for a &lt;a href=&#34;https://github.com/octokit/octokit.rb/commit/e48e91f736d5fce51e3bf74d7c9022aaa52f5c5c&#34;&gt;long-deprecated overload&lt;/a&gt; for passing state as a positional argument&lt;/strong&gt; when listing pull requests. Instead, pass &lt;code&gt;state&lt;/code&gt; in the method options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;drops support for Ruby &amp;lt; 2.0&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;adds support for new &lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/#working-with-github-enterprise&#34;&gt;Enterprise-only APIs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;adds support for &lt;a href=&#34;https://developer.github.com/changes/2015-05-26-repository-redirects-are-coming/&#34;&gt;Repository redirects&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 3.0 includes a couple breaking changes when upgrading from v2.x.x:&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://developer.github.com/changes/2014-01-07-upcoming-change-to-default-media-type/&#34;&gt;default media type&lt;/a&gt; is now &lt;code&gt;v3&lt;/code&gt; instead of &lt;code&gt;beta&lt;/code&gt;. If you need to request the older media type, you can set the default media type for the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Octokit.default_media_type = &#34;application/vnd.github.beta+json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or per-request&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.emails(:accept =&amp;gt; &#34;application/vnd.github.beta+json&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The long-deprecated &lt;code&gt;Octokit::Client#create_download&lt;/code&gt; method has been removed.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading from 1.x.x&lt;/h3&gt; &#xA;&lt;p&gt;Version 2.0 includes a completely rewritten &lt;code&gt;Client&lt;/code&gt; factory that now memoizes client instances based on unique configuration options. Breaking changes also include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:oauth_token&lt;/code&gt; is now &lt;code&gt;:access_token&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:auto_traversal&lt;/code&gt; is now &lt;code&gt;:auto_paginate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Hashie::Mash&lt;/code&gt; has been removed. Responses now return a &lt;code&gt;Sawyer::Resource&lt;/code&gt; object. This new type behaves mostly like a Ruby &lt;code&gt;Hash&lt;/code&gt;, but does not fully support the &lt;code&gt;Hashie::Mash&lt;/code&gt; API.&lt;/li&gt; &#xA; &lt;li&gt;Two new client error types are raised where appropriate: &lt;code&gt;Octokit::TooManyRequests&lt;/code&gt; and &lt;code&gt;Octokit::TooManyLoginAttempts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;search_*&lt;/code&gt; methods from v1.x are now found at &lt;code&gt;legacy_search_*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for netrc requires including the &lt;a href=&#34;https://rubygems.org/gems/netrc&#34;&gt;netrc gem&lt;/a&gt; in your Gemfile or gemspec.&lt;/li&gt; &#xA; &lt;li&gt;DateTime fields are now proper &lt;code&gt;DateTime&lt;/code&gt; objects. Previous versions outputted DateTime fields as &#39;String&#39; objects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;p&gt;Since Octokit employs &lt;a href=&#34;https://github.com/lostisland/faraday&#34;&gt;Faraday&lt;/a&gt; under the hood, some behavior can be extended via middleware.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Often, it helps to know what Octokit is doing under the hood. You can add a logger to the middleware that enables you to peek into the underlying HTTP traffic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stack = Faraday::RackBuilder.new do |builder|&#xA;  builder.use Faraday::Retry::Middleware, exceptions: [Octokit::ServerError] # or Faraday::Request::Retry for Faraday &amp;lt; 2.0&#xA;  builder.use Octokit::Middleware::FollowRedirects&#xA;  builder.use Octokit::Response::RaiseError&#xA;  builder.use Octokit::Response::FeedParser&#xA;  builder.response :logger do |logger|&#xA;    logger.filter(/(Authorization: &#34;(token|Bearer) )(\w+)/, &#39;\1[REMOVED]&#39;)&#xA;  end&#xA;  builder.adapter Faraday.default_adapter&#xA;end&#xA;Octokit.middleware = stack&#xA;&#xA;client = Octokit::Client.new&#xA;client.user &#39;pengwynn&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;I, [2013-08-22T15:54:38.583300 #88227]  INFO -- : get https://api.github.com/users/pengwynn&#xA;D, [2013-08-22T15:54:38.583401 #88227] DEBUG -- request: Accept: &#34;application/vnd.github.beta+json&#34;&#xA;User-Agent: &#34;Octokit Ruby Gem 2.0.0.rc4&#34;&#xA;I, [2013-08-22T15:54:38.843313 #88227]  INFO -- Status: 200&#xA;D, [2013-08-22T15:54:38.843459 #88227] DEBUG -- response: server: &#34;GitHub.com&#34;&#xA;date: &#34;Thu, 22 Aug 2013 20:54:40 GMT&#34;&#xA;content-type: &#34;application/json; charset=utf-8&#34;&#xA;transfer-encoding: &#34;chunked&#34;&#xA;connection: &#34;close&#34;&#xA;status: &#34;200 OK&#34;&#xA;x-ratelimit-limit: &#34;60&#34;&#xA;x-ratelimit-remaining: &#34;39&#34;&#xA;x-ratelimit-reset: &#34;1377205443&#34;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/lostisland/faraday&#34;&gt;Faraday README&lt;/a&gt; for more middleware magic.&lt;/p&gt; &#xA;&lt;h3&gt;Caching&lt;/h3&gt; &#xA;&lt;p&gt;If you want to boost performance, stretch your API rate limit, or avoid paying the hypermedia tax, you can use &lt;a href=&#34;https://github.com/plataformatec/faraday-http-cache&#34;&gt;Faraday Http Cache&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add the gem to your Gemfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;faraday-http-cache&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, construct your own Faraday middleware:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stack = Faraday::RackBuilder.new do |builder|&#xA;  builder.use Faraday::HttpCache, serializer: Marshal, shared_cache: false&#xA;  builder.use Octokit::Response::RaiseError&#xA;  builder.adapter Faraday.default_adapter&#xA;end&#xA;Octokit.middleware = stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once configured, the middleware will store responses in cache based on ETag fingerprint and serve those back up for future &lt;code&gt;304&lt;/code&gt; responses for the same resource. See the &lt;a href=&#34;https://github.com/plataformatec/faraday-http-cache&#34;&gt;project README&lt;/a&gt; for advanced usage.&lt;/p&gt; &#xA;&lt;h2&gt;Hacking on Octokit.rb&lt;/h2&gt; &#xA;&lt;p&gt;If you want to hack on Octokit locally, we try to make &lt;a href=&#34;http://wynnnetherland.com/linked/2013012801/bootstrapping-consistency&#34;&gt;bootstrapping the project&lt;/a&gt; as painless as possible. To start hacking, clone and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;script/bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install project dependencies and get you up and running. If you want to run a Ruby console to poke on Octokit, you can crank one up with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;script/console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the scripts in &lt;code&gt;./script&lt;/code&gt; instead of &lt;code&gt;bundle exec rspec&lt;/code&gt;, &lt;code&gt;bundle console&lt;/code&gt;, etc. ensures your dependencies are up-to-date.&lt;/p&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;We want both the Octokit.rb and larger Octokit communities to be open and welcoming environments. Please read and follow both in spirit and letter &lt;a href=&#34;https://raw.githubusercontent.com/octokit/octokit.rb/4-stable/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running and writing new tests&lt;/h3&gt; &#xA;&lt;p&gt;Octokit uses &lt;a href=&#34;https://github.com/vcr/vcr&#34;&gt;VCR&lt;/a&gt; for recording and playing back API fixtures during test runs. These cassettes (fixtures) are part of the Git project in the &lt;code&gt;spec/cassettes&lt;/code&gt; folder. If you&#39;re not recording new cassettes you can run the specs with existing cassettes with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;script/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Octokit uses environmental variables for storing credentials used in testing. If you are testing an API endpoint that doesn&#39;t require authentication, you can get away without any additional configuration. For the most part, tests use an authenticated client, using a token stored in &lt;code&gt;ENV[&#39;OCTOKIT_TEST_GITHUB_TOKEN&#39;]&lt;/code&gt;. There are several different authentication methods used across the api. Here is the full list of configurable environmental variables for testing Octokit:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;ENV Variable&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_LOGIN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GitHub login name (preferably one created specifically for testing against).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_PASSWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Password for the test GitHub login.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_TOKEN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/blog/1509-personal-api-tokens&#34;&gt;Personal Access Token&lt;/a&gt; for the test GitHub login.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_CLIENT_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Test OAuth application client id.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_CLIENT_SECRET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Test OAuth application client secret.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_REPOSITORY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Test repository to perform destructive actions against, this should not be set to any repository of importance. &lt;strong&gt;Automatically created by the test suite if nonexistent&lt;/strong&gt; Default: &lt;code&gt;api-sandbox&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_ORGANIZATION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Test organization.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_ENTERPRISE_LOGIN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GitHub Enterprise login name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_ENTERPRISE_TOKEN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GitHub Enterprise token.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_ENTERPRISE_MANAGEMENT_CONSOLE_PASSWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GitHub Enterprise management console password.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_ENTERPRISE_ENDPOINT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GitHub Enterprise hostname.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_ENTERPRISE_MANAGEMENT_CONSOLE_ENDPOINT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GitHub Enterprise Management Console endpoint.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_INTEGRATION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://developer.github.com/early-access/integrations/&#34;&gt;GitHub Integration&lt;/a&gt; owned by your test organization.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_GITHUB_INTEGRATION_INSTALLATION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Installation of the GitHub Integration specified above.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OCTOKIT_TEST_INTEGRATION_PEM_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;File path to the private key generated from your integration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Since we periodically refresh our cassettes, please keep some points in mind when writing new specs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Specs should be idempotent&lt;/strong&gt;. The HTTP calls made during a spec should be able to be run over and over. This means deleting a known resource prior to creating it if the name has to be unique.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Specs should be able to be run in random order.&lt;/strong&gt; If a spec depends on another resource as a fixture, make sure that&#39;s created in the scope of the spec and not depend on a previous spec to create the data needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Do not depend on authenticated user info.&lt;/strong&gt; Instead of asserting actual values in resources, try to assert the existence of a key or that a response is an Array. We&#39;re testing the client, not the API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Ruby Versions&lt;/h2&gt; &#xA;&lt;p&gt;This library aims to support and is &lt;a href=&#34;https://github.com/octokit/octokit.rb/actions&#34;&gt;tested against&lt;/a&gt; the following Ruby implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 2.5&lt;/li&gt; &#xA; &lt;li&gt;Ruby 2.6&lt;/li&gt; &#xA; &lt;li&gt;Ruby 2.7&lt;/li&gt; &#xA; &lt;li&gt;Ruby 3.0&lt;/li&gt; &#xA; &lt;li&gt;Ruby 3.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If something doesn&#39;t work on one of these Ruby versions, it&#39;s a bug.&lt;/p&gt; &#xA;&lt;p&gt;This library may inadvertently work (or seem to work) on other Ruby implementations, but support will only be provided for the versions listed above.&lt;/p&gt; &#xA;&lt;p&gt;If you would like this library to support another Ruby version, you may volunteer to be a maintainer. Being a maintainer entails making sure all tests run and pass on that implementation. When something breaks on your implementation, you will be responsible for providing patches in a timely fashion. If critical issues for a particular implementation exist at the time of a major release, support for that Ruby version may be dropped.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;This library aims to adhere to &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt;. Violations of this scheme should be reported as bugs. Specifically, if a minor or patch version is released that breaks backward compatibility, that version should be immediately yanked and/or a new version should be immediately released that restores compatibility. Breaking changes to the public API will only be introduced with new major versions. As a result of this policy, you can (and should) specify a dependency on this gem using the &lt;a href=&#34;http://guides.rubygems.org/patterns/#pessimistic-version-constraint&#34;&gt;Pessimistic Version Constraint&lt;/a&gt; with two digits of precision. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spec.add_dependency &#39;octokit&#39;, &#39;~&amp;gt; 3.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The changes made between versions can be seen on the &lt;a href=&#34;https://github.com/octokit/octokit.rb/releases&#34;&gt;project releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Making Repeating Requests&lt;/h2&gt; &#xA;&lt;p&gt;In most cases it would be best to use &lt;a href=&#34;https://developer.github.com/webhooks/&#34;&gt;webhooks&lt;/a&gt;, but sometimes webhooks don&#39;t provide all of the information needed. In those cases where one might need to poll for progress or retry a request on failure, we designed &lt;a href=&#34;https://github.com/octokit/octopoller.rb&#34;&gt;Octopoller&lt;/a&gt;. Octopoller is a micro gem perfect for making repeating requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Octopoller.poll(timeout: 15.seconds) do&#xA;  begin&#xA;    client.request_progress # ex. request a long running job&#39;s status&#xA;  rescue Error&#xA;    :re_poll&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful when making requests for a long running job&#39;s progress (ex. requesting a &lt;a href=&#34;https://developer.github.com/v3/migrations/source_imports/#get-import-progress&#34;&gt;Source Import&#39;s progress&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2009-2014 Wynn Netherland, Adam Stacoviak, Erik Michaels-Ober&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rubocop/rubocop</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/rubocop/rubocop</id>
    <link href="https://github.com/rubocop/rubocop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby static code analyzer and formatter, based on the community Ruby style guide.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/logo/rubo-logo-horizontal.png&#34; alt=&#34;RuboCop Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-rubocop-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/rubocop&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rubocop.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/rubocop/rubocop/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/rubocop/rubocop/tree/master.svg?style=svg&#34; alt=&#34;CircleCI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rubocop/rubocop/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/rubocop/rubocop/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rubocop/rubocop/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/d2d67f728e88ea84ac69/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rubocop/rubocop/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/d2d67f728e88ea84ac69/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/wJjWvGRDmm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Role models are important. &lt;br&gt; -- Officer Alex J. Murphy / RoboCop&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;RuboCop&lt;/strong&gt; is a Ruby static code analyzer (a.k.a. &lt;code&gt;linter&lt;/code&gt;) and code formatter. Out of the box it will enforce many of the guidelines outlined in the community &lt;a href=&#34;https://rubystyle.guide&#34;&gt;Ruby Style Guide&lt;/a&gt;. Apart from reporting the problems discovered in your code, RuboCop can also automatically fix many of them for you.&lt;/p&gt; &#xA;&lt;p&gt;RuboCop is extremely flexible and most aspects of its behavior can be tweaked via various &lt;a href=&#34;https://github.com/rubocop/rubocop/raw/master/config/default.yml&#34;&gt;configuration options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/#open-collective-backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backers/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/#open-collective-sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsors/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-rubocop?utm_source=rubygems-rubocop&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://tidelift.com/badges/package/rubygems/rubocop&#34; alt=&#34;Tidelift&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Working on RuboCop is often fun, but it also requires a great deal of time and energy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please consider &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/#funding&#34;&gt;financially supporting its ongoing development&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;RuboCop&lt;/strong&gt;&#39;s installation is pretty standard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gem install rubocop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d rather install RuboCop using &lt;code&gt;bundler&lt;/code&gt;, add a line for it in your &lt;code&gt;Gemfile&lt;/code&gt; (but set the &lt;code&gt;require&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;, as it is a standalone tool):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;gem &#39;rubocop&#39;, require: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RuboCop is stable between major versions, both in terms of API and cop configuration. We aim to ease the maintenance of RuboCop extensions and the upgrades between RuboCop releases. All big changes are reserved for major releases. To prevent an unwanted RuboCop update you might want to use a conservative version lock in your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;gem &#39;rubocop&#39;, &#39;~&amp;gt; 1.30&#39;, require: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.rubocop.org/rubocop/versioning.html&#34;&gt;our versioning policy&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Just type &lt;code&gt;rubocop&lt;/code&gt; in a Ruby project&#39;s folder and watch the magic happen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd my/cool/ruby/project&#xA;$ rubocop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can read a lot more about RuboCop in its &lt;a href=&#34;https://docs.rubocop.org&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;RuboCop officially supports the following Ruby implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MRI 2.6+&lt;/li&gt; &#xA; &lt;li&gt;JRuby 9.3+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.rubocop.org/rubocop/compatibility.html&#34;&gt;compatibility documentation&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Readme Badge&lt;/h2&gt; &#xA;&lt;p&gt;If you use RuboCop in your project, you can include one of these badges in your readme to let people know that your code is written following the community Ruby Style Guide.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-rubocop-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubystyle.guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-community-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here are the Markdown snippets for the two badges:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Ruby Style Guide](https://img.shields.io/badge/code_style-rubocop-brightgreen.svg)](https://github.com/rubocop/rubocop)&#xA;&#xA;[![Ruby Style Guide](https://img.shields.io/badge/code_style-community-brightgreen.svg)](https://rubystyle.guide)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a list of RuboCop&#39;s core developers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov&#34;&gt;Bozhidar Batsov&lt;/a&gt; (author &amp;amp; head maintainer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonas054&#34;&gt;Jonas Arvidsson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yujinakayama&#34;&gt;Yuji Nakayama&lt;/a&gt; (retired)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edzhelyov&#34;&gt;Evgeni Dzhelyov&lt;/a&gt; (retired)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/drenmi&#34;&gt;Ted Johansson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pocke&#34;&gt;Masataka Kuwabara&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koic&#34;&gt;Koichi Ito&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/darhazer&#34;&gt;Maxim Krizhanovski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bquorning&#34;&gt;Benjamin Quorning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcandre&#34;&gt;Marc-Andr√© Lafortune&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dvandersluis&#34;&gt;Daniel Vandersluis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.rubocop.org/rubocop/about/team.html&#34;&gt;team page&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Logo&lt;/h2&gt; &#xA;&lt;p&gt;RuboCop&#39;s logo was created by &lt;a href=&#34;https://www.chadomoto.com/&#34;&gt;Dimiter Petrov&lt;/a&gt;. You can find the logo in various formats &lt;a href=&#34;https://github.com/rubocop/rubocop/tree/master/logo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The logo is licensed under a &lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/deed.en_GB&#34;&gt;Creative Commons Attribution-NonCommercial 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/rubocop/rubocop/graphs/contributors&#34;&gt;list&lt;/a&gt; of all the people who have contributed to the development of RuboCop.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m extremely grateful to each and every one of them!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to RuboCop, please take the time to go through our short &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Converting more of the Ruby Style Guide into RuboCop cops is our top priority right now. Writing a new cop is a great way to dive into RuboCop!&lt;/p&gt; &#xA;&lt;p&gt;Of course, bug reports and suggestions for improvements are always welcome. GitHub pull requests are even better! :-)&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;While RuboCop is free software and will always be, the project would benefit immensely from some funding. Raising a monthly budget of a couple of thousand dollars would make it possible to pay people to work on certain complex features, fund other development related stuff (e.g. hardware, conference trips) and so on. Raising a monthly budget of over $5000 would open the possibility of someone working full-time on the project which would speed up the pace of development significantly.&lt;/p&gt; &#xA;&lt;p&gt;We welcome both individual and corporate sponsors! We also offer a wide array of funding channels to account for your preferences (although currently &lt;a href=&#34;https://opencollective.com/rubocop&#34;&gt;Open Collective&lt;/a&gt; is our preferred funding platform).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you&#39;re working in a company that&#39;s making significant use of RuboCop we&#39;d appreciate it if you suggest to your company to become a RuboCop sponsor.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can support the development of RuboCop via &lt;a href=&#34;https://github.com/sponsors/bbatsov&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;Patreon&lt;/a&gt;, &lt;a href=&#34;https://paypal.me/bbatsov&#34;&gt;PayPal&lt;/a&gt;, &lt;a href=&#34;https://opencollective.com/rubocop&#34;&gt;Open Collective&lt;/a&gt; and &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-rubocop?utm_source=rubygems-rubocop&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;Tidelift&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If doing a sponsorship in the form of donation is problematic for your company from an accounting standpoint, we&#39;d recommend the use of Tidelift, where you can get a support-like subscription instead.&lt;/p&gt; &#xA;&lt;h3&gt;Open Collective Backers&lt;/h3&gt; &#xA;&lt;p&gt;Support us with a monthly donation and help us continue our activities. [&lt;a href=&#34;https://opencollective.com/rubocop#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/rubocop/backer/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open Collective Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Become a sponsor and get your logo on our README on GitHub with a link to your site. [&lt;a href=&#34;https://opencollective.com/rubocop#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/rubocop/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;RuboCop&#39;s changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2022 Bozhidar Batsov. See &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; for further details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ankane/strong_migrations</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/ankane/strong_migrations</id>
    <link href="https://github.com/ankane/strong_migrations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Catch unsafe migrations in development&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Strong Migrations&lt;/h1&gt; &#xA;&lt;p&gt;Catch unsafe migrations in development&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;‚úì&amp;nbsp;&amp;nbsp;Detects potentially dangerous operations&lt;br&gt;&amp;nbsp;&amp;nbsp;‚úì&amp;nbsp;&amp;nbsp;Prevents them from running by default&lt;br&gt;&amp;nbsp;&amp;nbsp;‚úì&amp;nbsp;&amp;nbsp;Provides instructions on safer ways to do what you want&lt;/p&gt; &#xA;&lt;p&gt;Supports PostgreSQL, MySQL, and MariaDB&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;üçä&lt;/span&gt; Battle-tested at &lt;a href=&#34;https://www.instacart.com/opensource&#34;&gt;Instacart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankane/strong_migrations/actions&#34;&gt;&lt;img src=&#34;https://github.com/ankane/strong_migrations/workflows/build/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application‚Äôs Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;strong_migrations&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle install&#xA;rails generate strong_migrations:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Strong Migrations sets a long statement timeout for migrations so you can set a &lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#app-timeouts&#34;&gt;short statement timeout&lt;/a&gt; for your application.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;When you run a migration that‚Äôs potentially dangerous, you‚Äôll see an error message like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;=== Dangerous operation detected #strong_migrations ===&#xA;&#xA;Active Record caches attributes, which causes problems&#xA;when removing columns. Be sure to ignore the column:&#xA;&#xA;class User &amp;lt; ApplicationRecord&#xA;  self.ignored_columns = [&#34;name&#34;]&#xA;end&#xA;&#xA;Deploy the code, then wrap this step in a safety_assured { ... } block.&#xA;&#xA;class RemoveColumn &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    safety_assured { remove_column :users, :name }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An operation is classified as dangerous if it either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blocks reads or writes for more than a few seconds (after a lock is acquired)&lt;/li&gt; &#xA; &lt;li&gt;Has a good chance of causing application errors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Checks&lt;/h2&gt; &#xA;&lt;p&gt;Potentially dangerous operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#removing-a-column&#34;&gt;removing a column&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-a-column-with-a-default-value&#34;&gt;adding a column with a default value&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#backfilling-data&#34;&gt;backfilling data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#changing-the-type-of-a-column&#34;&gt;changing the type of a column&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#renaming-a-column&#34;&gt;renaming a column&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#renaming-a-table&#34;&gt;renaming a table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#creating-a-table-with-the-force-option&#34;&gt;creating a table with the force option&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-a-check-constraint&#34;&gt;adding a check constraint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#executing-SQL-directly&#34;&gt;executing SQL directly&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Postgres-specific checks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-an-index-non-concurrently&#34;&gt;adding an index non-concurrently&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-a-reference&#34;&gt;adding a reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-a-foreign-key&#34;&gt;adding a foreign key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-a-json-column&#34;&gt;adding a json column&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#setting-not-null-on-an-existing-column&#34;&gt;setting NOT NULL on an existing column&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Best practices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#keeping-non-unique-indexes-to-three-columns-or-less&#34;&gt;keeping non-unique indexes to three columns or less&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also add &lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#custom-checks&#34;&gt;custom checks&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#disable-checks&#34;&gt;disable specific checks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Removing a column&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Active Record caches database columns at runtime, so if you drop a column, it can cause exceptions until your app reboots.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class RemoveSomeColumnFromUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    remove_column :users, :some_column&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Tell Active Record to ignore the column from its cache&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord&#xA;  self.ignored_columns = [&#34;some_column&#34;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Deploy code&lt;/li&gt; &#xA; &lt;li&gt;Write a migration to remove the column (wrap in &lt;code&gt;safety_assured&lt;/code&gt; block)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class RemoveSomeColumnFromUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    safety_assured { remove_column :users, :some_column }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Deploy and run migration&lt;/li&gt; &#xA; &lt;li&gt;Remove the line added in step 1&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Adding a column with a default value&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In earlier versions of Postgres, MySQL, and MariaDB, adding a column with a default value to an existing table causes the entire table to be rewritten. During this time, reads and writes are blocked in Postgres, and writes are blocked in MySQL and MariaDB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeColumnToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_column :users, :some_column, :text, default: &#34;default_value&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Postgres 11+, MySQL 8.0.12+, and MariaDB 10.3.2+, this no longer requires a table rewrite and is safe.&lt;/p&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Instead, add the column without a default value, then change the default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeColumnToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def up&#xA;    add_column :users, :some_column, :text&#xA;    change_column_default :users, :some_column, &#34;default_value&#34;&#xA;  end&#xA;&#xA;  def down&#xA;    remove_column :users, :some_column&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the next section for how to backfill.&lt;/p&gt; &#xA;&lt;h3&gt;Backfilling data&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Active Record creates a transaction around each migration, and backfilling in the same transaction that alters a table keeps the table locked for the &lt;a href=&#34;https://wework.github.io/data/2015/11/05/add-columns-with-default-values-to-large-tables-in-rails-postgres/&#34;&gt;duration of the backfill&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeColumnToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_column :users, :some_column, :text&#xA;    User.update_all some_column: &#34;default_value&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, running a single query to update data can cause issues for large tables.&lt;/p&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;There are three keys to backfilling safely: batching, throttling, and running it outside a transaction. Use the Rails console or a separate migration with &lt;code&gt;disable_ddl_transaction!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class BackfillSomeColumn &amp;lt; ActiveRecord::Migration[7.0]&#xA;  disable_ddl_transaction!&#xA;&#xA;  def up&#xA;    User.unscoped.in_batches do |relation|&#xA;      relation.update_all some_column: &#34;default_value&#34;&#xA;      sleep(0.01) # throttle&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changing the type of a column&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Changing the type of a column causes the entire table to be rewritten. During this time, reads and writes are blocked in Postgres, and writes are blocked in MySQL and MariaDB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ChangeSomeColumnType &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    change_column :users, :some_column, :new_type&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some changes don‚Äôt require a table rewrite and are safe in Postgres:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Safe Changes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cidr&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Changing to &lt;code&gt;inet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;citext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Changing to &lt;code&gt;text&lt;/code&gt; if not indexed, changing to &lt;code&gt;string&lt;/code&gt; with no &lt;code&gt;:limit&lt;/code&gt; if not indexed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing or removing &lt;code&gt;:precision&lt;/code&gt;, changing to &lt;code&gt;timestamptz&lt;/code&gt; when session time zone is UTC in Postgres 12+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing &lt;code&gt;:precision&lt;/code&gt; at same &lt;code&gt;:scale&lt;/code&gt;, removing &lt;code&gt;:precision&lt;/code&gt; and &lt;code&gt;:scale&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing or removing &lt;code&gt;:precision&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;numeric&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing &lt;code&gt;:precision&lt;/code&gt; at same &lt;code&gt;:scale&lt;/code&gt;, removing &lt;code&gt;:precision&lt;/code&gt; and &lt;code&gt;:scale&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing or removing &lt;code&gt;:limit&lt;/code&gt;, changing to &lt;code&gt;text&lt;/code&gt;, changing &lt;code&gt;citext&lt;/code&gt; if not indexed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Changing to &lt;code&gt;string&lt;/code&gt; with no &lt;code&gt;:limit&lt;/code&gt;, changing to &lt;code&gt;citext&lt;/code&gt; if not indexed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing or removing &lt;code&gt;:precision&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;timestamptz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing or removing &lt;code&gt;:limit&lt;/code&gt;, changing to &lt;code&gt;datetime&lt;/code&gt; when session time zone is UTC in Postgres 12+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And some in MySQL and MariaDB:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Safe Changes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing &lt;code&gt;:limit&lt;/code&gt; from under 255 up to 255, increasing &lt;code&gt;:limit&lt;/code&gt; from over 255 to the max&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;A safer approach is to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new column&lt;/li&gt; &#xA; &lt;li&gt;Write to both columns&lt;/li&gt; &#xA; &lt;li&gt;Backfill data from the old column to the new column&lt;/li&gt; &#xA; &lt;li&gt;Move reads from the old column to the new column&lt;/li&gt; &#xA; &lt;li&gt;Stop writing to the old column&lt;/li&gt; &#xA; &lt;li&gt;Drop the old column&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Renaming a column&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Renaming a column that‚Äôs in use will cause errors in your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class RenameSomeColumn &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    rename_column :users, :some_column, :new_name&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;A safer approach is to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new column&lt;/li&gt; &#xA; &lt;li&gt;Write to both columns&lt;/li&gt; &#xA; &lt;li&gt;Backfill data from the old column to the new column&lt;/li&gt; &#xA; &lt;li&gt;Move reads from the old column to the new column&lt;/li&gt; &#xA; &lt;li&gt;Stop writing to the old column&lt;/li&gt; &#xA; &lt;li&gt;Drop the old column&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Renaming a table&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Renaming a table that‚Äôs in use will cause errors in your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class RenameUsersToCustomers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    rename_table :users, :customers&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;A safer approach is to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new table&lt;/li&gt; &#xA; &lt;li&gt;Write to both tables&lt;/li&gt; &#xA; &lt;li&gt;Backfill data from the old table to new table&lt;/li&gt; &#xA; &lt;li&gt;Move reads from the old table to the new table&lt;/li&gt; &#xA; &lt;li&gt;Stop writing to the old table&lt;/li&gt; &#xA; &lt;li&gt;Drop the old table&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Creating a table with the force option&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;force&lt;/code&gt; option can drop an existing table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreateUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    create_table :users, force: true do |t|&#xA;      # ...&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Create tables without the &lt;code&gt;force&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreateUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    create_table :users do |t|&#xA;      # ...&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you intend to drop an existing table, run &lt;code&gt;drop_table&lt;/code&gt; first.&lt;/p&gt; &#xA;&lt;h3&gt;Adding a check constraint&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;üê¢&lt;/span&gt; Safe by default available&lt;/p&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Adding a check constraint blocks reads and writes in Postgres and blocks writes in MySQL and MariaDB while every row is checked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddCheckConstraint &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_check_constraint :users, &#34;price &amp;gt; 0&#34;, name: &#34;price_check&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good - Postgres&lt;/h4&gt; &#xA;&lt;p&gt;Add the check constraint without validating existing rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddCheckConstraint &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_check_constraint :users, &#34;price &amp;gt; 0&#34;, name: &#34;price_check&#34;, validate: false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then validate them in a separate migration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ValidateCheckConstraint &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    validate_check_constraint :users, name: &#34;price_check&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good - MySQL and MariaDB&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankane/strong_migrations/issues/new&#34;&gt;Let us know&lt;/a&gt; if you have a safe way to do this (check constraints can be added with &lt;code&gt;NOT ENFORCED&lt;/code&gt;, but enforcing blocks writes).&lt;/p&gt; &#xA;&lt;h3&gt;Executing SQL directly&lt;/h3&gt; &#xA;&lt;p&gt;Strong Migrations can‚Äôt ensure safety for raw SQL statements. Make really sure that what you‚Äôre doing is safe, then use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ExecuteSQL &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    safety_assured { execute &#34;...&#34; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding an index non-concurrently&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;üê¢&lt;/span&gt; Safe by default available&lt;/p&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In Postgres, adding an index non-concurrently blocks writes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeIndexToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_index :users, :some_column&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Add indexes concurrently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeIndexToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  disable_ddl_transaction!&#xA;&#xA;  def change&#xA;    add_index :users, :some_column, algorithm: :concurrently&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you forget &lt;code&gt;disable_ddl_transaction!&lt;/code&gt;, the migration will fail. Also, note that indexes on new tables (those created in the same migration) don‚Äôt require this.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/ankane/gindex&#34;&gt;gindex&lt;/a&gt;, you can generate an index migration instantly with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rails g index table column&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding a reference&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;üê¢&lt;/span&gt; Safe by default available&lt;/p&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Rails adds an index non-concurrently to references by default, which blocks writes in Postgres.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddReferenceToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_reference :users, :city&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Make sure the index is added concurrently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddReferenceToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  disable_ddl_transaction!&#xA;&#xA;  def change&#xA;    add_reference :users, :city, index: {algorithm: :concurrently}&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding a foreign key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;üê¢&lt;/span&gt; Safe by default available&lt;/p&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In Postgres, adding a foreign key blocks writes on both tables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddForeignKeyOnUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_foreign_key :users, :orders&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddReferenceToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_reference :users, :order, foreign_key: true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Add the foreign key without validating existing rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddForeignKeyOnUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_foreign_key :users, :orders, validate: false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then validate them in a separate migration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ValidateForeignKeyOnUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    validate_foreign_key :users, :orders&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding a json column&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In Postgres, there‚Äôs no equality operator for the &lt;code&gt;json&lt;/code&gt; column type, which can cause errors for existing &lt;code&gt;SELECT DISTINCT&lt;/code&gt; queries in your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddPropertiesToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_column :users, :properties, :json&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;jsonb&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddPropertiesToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_column :users, :properties, :jsonb&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting NOT NULL on an existing column&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;üê¢&lt;/span&gt; Safe by default available&lt;/p&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In Postgres, setting &lt;code&gt;NOT NULL&lt;/code&gt; on an existing column blocks reads and writes while every row is checked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SetSomeColumnNotNull &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    change_column_null :users, :some_column, false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Instead, add a check constraint.&lt;/p&gt; &#xA;&lt;p&gt;For Rails 6.1, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SetSomeColumnNotNull &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_check_constraint :users, &#34;some_column IS NOT NULL&#34;, name: &#34;users_some_column_null&#34;, validate: false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Rails &amp;lt; 6.1, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SetSomeColumnNotNull &amp;lt; ActiveRecord::Migration[6.0]&#xA;  def change&#xA;    safety_assured do&#xA;      execute &#39;ALTER TABLE &#34;users&#34; ADD CONSTRAINT &#34;users_some_column_null&#34; CHECK (&#34;some_column&#34; IS NOT NULL) NOT VALID&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then validate it in a separate migration. A &lt;code&gt;NOT NULL&lt;/code&gt; check constraint is &lt;a href=&#34;https://medium.com/doctolib/adding-a-not-null-constraint-on-pg-faster-with-minimal-locking-38b2c00c4d1c&#34;&gt;functionally equivalent&lt;/a&gt; to setting &lt;code&gt;NOT NULL&lt;/code&gt; on the column (but it won‚Äôt show up in &lt;code&gt;schema.rb&lt;/code&gt; in Rails &amp;lt; 6.1). In Postgres 12+, once the check constraint is validated, you can safely set &lt;code&gt;NOT NULL&lt;/code&gt; on the column and drop the check constraint.&lt;/p&gt; &#xA;&lt;p&gt;For Rails 6.1, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ValidateSomeColumnNotNull &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    validate_check_constraint :users, name: &#34;users_some_column_null&#34;&#xA;&#xA;    # in Postgres 12+, you can then safely set NOT NULL on the column&#xA;    change_column_null :users, :some_column, false&#xA;    remove_check_constraint :users, name: &#34;users_some_column_null&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Rails &amp;lt; 6.1, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ValidateSomeColumnNotNull &amp;lt; ActiveRecord::Migration[6.0]&#xA;  def change&#xA;    safety_assured do&#xA;      execute &#39;ALTER TABLE &#34;users&#34; VALIDATE CONSTRAINT &#34;users_some_column_null&#34;&#39;&#xA;    end&#xA;&#xA;    # in Postgres 12+, you can then safely set NOT NULL on the column&#xA;    change_column_null :users, :some_column, false&#xA;    safety_assured do&#xA;      execute &#39;ALTER TABLE &#34;users&#34; DROP CONSTRAINT &#34;users_some_column_null&#34;&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keeping non-unique indexes to three columns or less&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Adding a non-unique index with more than three columns rarely improves performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeIndexToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_index :users, [:a, :b, :c, :d]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Instead, start an index with columns that narrow down the results the most.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeIndexToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_index :users, [:b, :d]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Postgres, be sure to add them concurrently.&lt;/p&gt; &#xA;&lt;h2&gt;Assuring Safety&lt;/h2&gt; &#xA;&lt;p&gt;To mark a step in the migration as safe, despite using a method that might otherwise be dangerous, wrap it in a &lt;code&gt;safety_assured&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MySafeMigration &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    safety_assured { remove_column :users, :some_column }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Certain methods like &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;change_table&lt;/code&gt; cannot be inspected and are prevented from running by default. Make sure what you‚Äôre doing is really safe and use this pattern.&lt;/p&gt; &#xA;&lt;h2&gt;Safe by Default&lt;/h2&gt; &#xA;&lt;p&gt;Make operations safe by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;adding and removing an index&lt;/li&gt; &#xA; &lt;li&gt;adding a foreign key&lt;/li&gt; &#xA; &lt;li&gt;adding a check constraint&lt;/li&gt; &#xA; &lt;li&gt;setting NOT NULL on an existing column&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add to &lt;code&gt;config/initializers/strong_migrations.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.safe_by_default = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Checks&lt;/h2&gt; &#xA;&lt;p&gt;Add your own custom checks with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.add_check do |method, args|&#xA;  if method == :add_index &amp;amp;&amp;amp; args[0].to_s == &#34;users&#34;&#xA;    stop! &#34;No more indexes on the users table&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;stop!&lt;/code&gt; method to stop migrations.&lt;/p&gt; &#xA;&lt;p&gt;Note: Since &lt;code&gt;remove_column&lt;/code&gt; always requires a &lt;code&gt;safety_assured&lt;/code&gt; block, it‚Äôs not possible to add a custom check for &lt;code&gt;remove_column&lt;/code&gt; operations.&lt;/p&gt; &#xA;&lt;h2&gt;Opt-in Checks&lt;/h2&gt; &#xA;&lt;h3&gt;Removing an index non-concurrently&lt;/h3&gt; &#xA;&lt;p&gt;Postgres supports removing indexes concurrently, but removing them non-concurrently shouldn‚Äôt be an issue for most applications. You can enable this check with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.enable_check(:remove_index)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disable Checks&lt;/h2&gt; &#xA;&lt;p&gt;Disable specific checks with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.disable_check(:add_index)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/ankane/strong_migrations/raw/master/lib/strong_migrations.rb&#34;&gt;source code&lt;/a&gt; for the list of keys.&lt;/p&gt; &#xA;&lt;h2&gt;Down Migrations / Rollbacks&lt;/h2&gt; &#xA;&lt;p&gt;By default, checks are disabled when migrating down. Enable them with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.check_down = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Messages&lt;/h2&gt; &#xA;&lt;p&gt;To customize specific messages, create an initializer with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.error_messages[:add_column_default] = &#34;Your custom instructions&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/ankane/strong_migrations/raw/master/lib/strong_migrations/error_messages.rb&#34;&gt;source code&lt;/a&gt; for the list of keys.&lt;/p&gt; &#xA;&lt;h2&gt;Migration Timeouts&lt;/h2&gt; &#xA;&lt;p&gt;It‚Äôs extremely important to set a short lock timeout for migrations. This way, if a migration can‚Äôt acquire a lock in a timely manner, other statements won‚Äôt be stuck behind it. We also recommend setting a long statement timeout so migrations can run for a while.&lt;/p&gt; &#xA;&lt;p&gt;Create &lt;code&gt;config/initializers/strong_migrations.rb&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.lock_timeout = 10.seconds&#xA;StrongMigrations.statement_timeout = 1.hour&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or set the timeouts directly on the database user that runs migrations. For Postgres, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER ROLE myuser SET lock_timeout = &#39;10s&#39;;&#xA;ALTER ROLE myuser SET statement_timeout = &#39;1h&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you use PgBouncer in transaction mode, you must set timeouts on the database user.&lt;/p&gt; &#xA;&lt;h2&gt;Lock Timeout Retries [experimental]&lt;/h2&gt; &#xA;&lt;p&gt;There‚Äôs the option to automatically retry statements when the lock timeout is reached. Here‚Äôs how it works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If a lock timeout happens outside a transaction, the statement is retried&lt;/li&gt; &#xA; &lt;li&gt;If it happens inside the DDL transaction, the entire migration is retried (only applicable to Postgres)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add to &lt;code&gt;config/initializers/strong_migrations.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.lock_timeout_retries = 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the delay between retries with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.lock_timeout_retry_delay = 10.seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;App Timeouts&lt;/h2&gt; &#xA;&lt;p&gt;We recommend adding timeouts to &lt;code&gt;config/database.yml&lt;/code&gt; to prevent connections from hanging and individual queries from taking up too many resources in controllers, jobs, the Rails console, and other places.&lt;/p&gt; &#xA;&lt;p&gt;For Postgres:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;production:&#xA;  connect_timeout: 5&#xA;  variables:&#xA;    statement_timeout: 15s&#xA;    lock_timeout: 10s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you use PgBouncer in transaction mode, you must set the statement and lock timeouts on the database user as shown above.&lt;/p&gt; &#xA;&lt;p&gt;For MySQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;production:&#xA;  connect_timeout: 5&#xA;  read_timeout: 5&#xA;  write_timeout: 5&#xA;  variables:&#xA;    max_execution_time: 15000 # ms&#xA;    lock_wait_timeout: 10 # sec&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For MariaDB:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;production:&#xA;  connect_timeout: 5&#xA;  read_timeout: 5&#xA;  write_timeout: 5&#xA;  variables:&#xA;    max_statement_time: 15 # sec&#xA;    lock_wait_timeout: 10 # sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For HTTP connections, Redis, and other services, check out &lt;a href=&#34;https://github.com/ankane/the-ultimate-guide-to-ruby-timeouts&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Existing Migrations&lt;/h2&gt; &#xA;&lt;p&gt;To mark migrations as safe that were created before installing this gem, create an initializer with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.start_after = 20170101000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the version from your latest migration.&lt;/p&gt; &#xA;&lt;h2&gt;Target Version&lt;/h2&gt; &#xA;&lt;p&gt;If your development database version is different from production, you can specify the production version so the right checks run in development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.target_version = 10 # or &#34;8.0.12&#34;, &#34;10.3.2&#34;, etc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The major version works well for Postgres, while the full version is recommended for MySQL and MariaDB.&lt;/p&gt; &#xA;&lt;p&gt;For safety, this option only affects development and test environments. In other environments, the actual server version is always used.&lt;/p&gt; &#xA;&lt;h2&gt;Analyze Tables&lt;/h2&gt; &#xA;&lt;p&gt;Analyze tables automatically (to update planner statistics) after an index is added. Create an initializer with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.auto_analyze = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Faster Migrations&lt;/h2&gt; &#xA;&lt;p&gt;Only dump the schema when adding a new migration. If you use Git, add to the end of your &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;task :faster_migrations do&#xA;  ActiveRecord::Base.dump_schema_after_migration = Rails.env.development? &amp;amp;&amp;amp;&#xA;    `git status db/migrate/ --porcelain`.present?&#xA;end&#xA;&#xA;task &#34;db:migrate&#34;: &#34;faster_migrations&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schema Sanity&lt;/h2&gt; &#xA;&lt;p&gt;Columns can flip order in &lt;code&gt;db/schema.rb&lt;/code&gt; when you have multiple developers. One way to prevent this is to &lt;a href=&#34;https://www.pgrs.net/2008/03/12/alphabetize-schema-rb-columns/&#34;&gt;alphabetize them&lt;/a&gt;. Add to the end of your &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;task &#34;db:schema:dump&#34;: &#34;strong_migrations:alphabetize_columns&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using a &lt;a href=&#34;https://ankane.org/postgres-users&#34;&gt;separate database user&lt;/a&gt; for migrations when possible so you don‚Äôt need to grant your app user permission to alter tables.&lt;/p&gt; &#xA;&lt;h2&gt;Smaller Projects&lt;/h2&gt; &#xA;&lt;p&gt;You probably don‚Äôt need this gem for smaller projects, as operations that are unsafe at scale can be perfectly safe on smaller, low-traffic tables.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pedro.herokuapp.com/past/2011/7/13/rails_migrations_with_no_downtime/&#34;&gt;Rails Migrations with No Downtime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/braintree-product-technology/postgresql-at-scale-database-schema-changes-without-downtime-20d3749ed680&#34;&gt;PostgreSQL at Scale: Database Schema Changes Without Downtime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mydbops.wordpress.com/2020/03/04/an-overview-of-ddl-algorithms-in-mysql-covers-mysql-8/&#34;&gt;An Overview of DDL Algorithms in MySQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mariadb.com/kb/en/innodb-online-ddl-overview/&#34;&gt;MariaDB InnoDB Online DDL Overview&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to Bob Remeika and David Waller for the &lt;a href=&#34;https://github.com/foobarfighter/safe-migrations&#34;&gt;original code&lt;/a&gt; and &lt;a href=&#34;https://github.com/LendingHome/zero_downtime_migrations&#34;&gt;Sean Huber&lt;/a&gt; for the bad/good readme format.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Everyone is encouraged to help improve this project. Here are a few ways you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankane/strong_migrations/issues&#34;&gt;Report bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fix bugs and &lt;a href=&#34;https://github.com/ankane/strong_migrations/pulls&#34;&gt;submit pull requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write, clarify, or fix documentation&lt;/li&gt; &#xA; &lt;li&gt;Suggest or add new features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get started with development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/ankane/strong_migrations.git&#xA;cd strong_migrations&#xA;bundle install&#xA;&#xA;# Postgres&#xA;createdb strong_migrations_test&#xA;bundle exec rake test&#xA;&#xA;# MySQL and MariaDB&#xA;mysqladmin create strong_migrations_test&#xA;ADAPTER=mysql2 bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>activerecord-hackery/ransack</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/activerecord-hackery/ransack</id>
    <link href="https://github.com/activerecord-hackery/ransack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Object-based searching.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/activerecord-hackery/ransack/main/docs/static/logo/ransack-h.png&#34; alt=&#34;Ransack&#34; title=&#34;Ransack&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/activerecord-hackery/ransack/actions&#34;&gt;&lt;img src=&#34;https://github.com/activerecord-hackery/ransack/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/rb/ransack&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/ransack.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/activerecord-hackery/ransack&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/activerecord-hackery/ransack/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/activerecord-hackery/ransack/main/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/activerecord-hackery/ransack/main/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SPECIAL ANNOUNCEMENT&lt;/h1&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://activerecord-hackery.github.io/ransack/blog&#34;&gt;Ransack Blog&lt;/a&gt; for a special announcement from the Ransack maintainers and Ernie Miller, the original author of Ransack.&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Ransack will help you easily add &lt;strong&gt;searching to your Rails application&lt;/strong&gt;, without any additional dependencies.&lt;/p&gt; &#xA;&lt;p&gt;There are advanced searching solutions around, like ElasticSearch or Algolia. &lt;strong&gt;Ransack&lt;/strong&gt; will do the job for many Rails websites, without the need to run additional infrastructure or work in a different language. With Ransack you do it all with standard Ruby and ERB.&lt;/p&gt; &#xA;&lt;p&gt;Ready to move beyond the basics? Use &lt;strong&gt;advanced features&lt;/strong&gt; like i18n and extensive configuration options.&lt;/p&gt; &#xA;&lt;p&gt;Ransack is supported for Rails 7.0, 6.x on Ruby 2.6.6 and later.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install &lt;code&gt;ransack&lt;/code&gt; and add it to your Gemfile, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;ransack&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bleeding edge&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to use the latest updates not yet published to RubyGems, use the &lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;ransack&#39;, :github =&amp;gt; &#39;activerecord-hackery/ransack&#39;, :branch =&amp;gt; &#39;main&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;There is &lt;a href=&#34;https://activerecord-hackery.github.io/ransack/&#34;&gt;extensive documentation on Ransack&lt;/a&gt;, which is a &lt;a href=&#34;https://docusaurus.io/&#34;&gt;Docusaurus&lt;/a&gt; project and run as a GitHub Pages site.&lt;/p&gt; &#xA;&lt;h2&gt;Issues tracker&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Before filing an issue, please read the &lt;a href=&#34;https://raw.githubusercontent.com/activerecord-hackery/ransack/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;File an issue if a bug is caused by Ransack, is new (has not already been reported), and &lt;em&gt;can be reproduced from the information you provide&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please consider adding a branch with a failing spec describing the problem.&lt;/li&gt; &#xA; &lt;li&gt;Contributions are welcome. &lt;span&gt;üòÉ&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Please do not use the issue tracker for personal support requests. Stack Overflow is a better place for that where a wider community can help you!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;To support the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consider supporting us via &lt;a href=&#34;https://opencollective.com/ransack/backers/badge.svg&#34;&gt;Open Collective&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use Ransack in your apps, and let us know if you encounter anything that&#39;s broken or missing. A failing spec to demonstrate the issue is awesome. A pull request with passing tests is even better!&lt;/li&gt; &#xA; &lt;li&gt;Before filing an issue or pull request, be sure to read and follow the &lt;a href=&#34;https://raw.githubusercontent.com/activerecord-hackery/ransack/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please use Stack Overflow or other sites for questions or discussion not directly related to bug reports, pull requests, or documentation improvements.&lt;/li&gt; &#xA; &lt;li&gt;Spread the word on Twitter, Facebook, and elsewhere if Ransack&#39;s been useful to you. The more people who are using the project, the quicker we can find and fix bugs!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Ransack was created by &lt;a href=&#34;http://twitter.com/erniemiller&#34;&gt;Ernie Miller&lt;/a&gt; and is developed and maintained by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scarroll32&#34;&gt;Sean Carroll&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deivid-rodriguez&#34;&gt;Deivid Rodriguez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gregmolnar&#34;&gt;Greg Molnar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/activerecord-hackery/ransack/graphs/contributors&#34;&gt;A great group of contributors&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ransack&#39;s logo is designed by &lt;a href=&#34;https://github.com/anilkilic&#34;&gt;Anƒ±l Kƒ±lƒ±√ß&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alumni Maintainers&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/jonatack&#34;&gt;Jon Atack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/ryanbigg&#34;&gt;Ryan Bigg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;img src=&#34;https://opencollective.com/ransack/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! üôè [&lt;a href=&#34;https://opencollective.com/ransack#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ransack#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/ransack#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ransack/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rubygems/rubygems</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/rubygems/rubygems</id>
    <link href="https://github.com/rubygems/rubygems" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Library packaging and distribution for Ruby.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RubyGems &lt;a href=&#34;https://codeclimate.com/github/rubygems/rubygems/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/30f913e9c2dd932132c1/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;RubyGems is a package management framework for Ruby.&lt;/p&gt; &#xA;&lt;p&gt;A package (also known as a library) contains a set of functionality that can be invoked by a Ruby program, such as reading and parsing an XML file. We call these packages &#34;gems&#34; and RubyGems is a tool to install, create, manage and load these packages in your Ruby environment.&lt;/p&gt; &#xA;&lt;p&gt;RubyGems is also a client for &lt;a href=&#34;https://rubygems.org&#34;&gt;RubyGems.org&lt;/a&gt;, a public repository of Gems that allows you to publish a Gem that can be shared and used by other developers. See our guide on publishing a Gem at &lt;a href=&#34;https://guides.rubygems.org/publishing/&#34;&gt;guides.rubygems.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Installing and managing a Gem is done through the &lt;code&gt;gem&lt;/code&gt; command. To install a Gem such as &lt;a href=&#34;https://github.com/sparklemotion/nokogiri&#34;&gt;Nokogiri&lt;/a&gt; which lets you read and parse XML in Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install nokogiri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RubyGems will download the Nokogiri Gem from RubyGems.org and install it into your Ruby environment.&lt;/p&gt; &#xA;&lt;p&gt;Finally, inside your Ruby program, load the Nokogiri gem and start parsing your XML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require &#39;nokogiri&#39;&#xA;&#xA;Nokogiri.XML(&#39;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about how to use RubyGems, see our RubyGems basics guide at &lt;a href=&#34;https://guides.rubygems.org/rubygems-basics/&#34;&gt;guides.rubygems.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RubyGems 2.6 supports Ruby 2.4 or lower.&lt;/li&gt; &#xA; &lt;li&gt;RubyGems 2.7 supports Ruby 2.5 or lower.&lt;/li&gt; &#xA; &lt;li&gt;RubyGems 3.0 supports Ruby 2.3 or later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;RubyGems is already installed in your Ruby environment, you can check the version you have installed by running &lt;code&gt;gem --version&lt;/code&gt; in your terminal emulator.&lt;/p&gt; &#xA;&lt;p&gt;In some cases Ruby &amp;amp; RubyGems may be provided as OS packages. This is not a recommended way to use Ruby &amp;amp; RubyGems. It&#39;s better to use a Ruby Version Manager, such as &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; or &lt;a href=&#34;https://github.com/postmodern/chruby&#34;&gt;chruby&lt;/a&gt;. If you still want to use the version provided by your OS package manager, please also use your OS package manager to upgrade rubygems, and disregard any other installation instructions given below.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to manually install RubyGems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download from &lt;a href=&#34;https://rubygems.org/pages/download&#34;&gt;https://rubygems.org/pages/download&lt;/a&gt;, unpack, and &lt;code&gt;cd&lt;/code&gt; into RubyGems&#39; src&lt;/li&gt; &#xA; &lt;li&gt;OR clone this repository and &lt;code&gt;cd&lt;/code&gt; into the repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install RubyGems by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ruby setup.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details and other options, see:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ruby setup.rb --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading RubyGems&lt;/h2&gt; &#xA;&lt;p&gt;To upgrade to the latest RubyGems, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem update --system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rubygems/rubygems/master/UPGRADING.md&#34;&gt;UPGRADING&lt;/a&gt; for more details and alternative instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;RubyGems uses &lt;a href=&#34;https://github.com/rdoc/rdoc&#34;&gt;rdoc&lt;/a&gt; for documentation. A compiled set of the docs can be viewed online at &lt;a href=&#34;https://www.rubydoc.info/github/rubygems/rubygems&#34;&gt;rubydoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;RubyGems also provides a comprehensive set of guides which covers numerous topics such as creating a new gem, security practices and other resources at &lt;a href=&#34;https://guides.rubygems.org&#34;&gt;https://guides.rubygems.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;h3&gt;Filing Tickets&lt;/h3&gt; &#xA;&lt;p&gt;Got a bug and you&#39;re not sure? You&#39;re sure you have a bug, but don&#39;t know what to do next? In any case, let us know about it! The best place for letting the RubyGems team know about bugs or problems you&#39;re having is &lt;a href=&#34;http://github.com/rubygems/rubygems/issues&#34;&gt;on the RubyGems issues page at GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bundler Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://bundler.io/compatibility&#34;&gt;http://bundler.io/compatibility&lt;/a&gt; for known issues.&lt;/p&gt; &#xA;&lt;h3&gt;Supporting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubytogether.org/&#34;&gt;&lt;img src=&#34;https://rubytogether.org/images/rubies.svg?sanitize=true&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://rubytogether.org/&#34;&gt;Ruby Together&lt;/a&gt; pays some RubyGems maintainers for their ongoing work. As a grassroots initiative committed to supporting the critical Ruby infrastructure you rely on, Ruby Together is funded entirely by the Ruby community. Contribute today &lt;a href=&#34;https://rubytogether.org/developers&#34;&gt;as an individual&lt;/a&gt; or even better, &lt;a href=&#34;https://rubytogether.org/companies&#34;&gt;as a company&lt;/a&gt;, and ensure that RubyGems, Bundler, and other shared tooling is around for years to come.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to RubyGems, that&#39;s awesome, and we &amp;lt;3 you. Check out our &lt;a href=&#34;https://raw.githubusercontent.com/rubygems/rubygems/master/CONTRIBUTING.md&#34;&gt;guide to contributing&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;While some RubyGems contributors are compensated by Ruby Together, the project maintainers make decisions independent of Ruby Together. As a project, we welcome contributions regardless of the author‚Äôs affiliation with Ruby Together.&lt;/p&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;Everyone interacting in the RubyGems project‚Äôs codebases, issue trackers, chat rooms, and mailing lists is expected to follow the &lt;a href=&#34;https://github.com/rubygems/rubygems/raw/master/CODE_OF_CONDUCT.md&#34;&gt;contributor code of conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rack/rack</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/rack/rack</id>
    <link href="https://github.com/rack/rack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modular Ruby web server interface.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;= \Rack, a modular Ruby webserver interface&lt;/p&gt; &#xA;&lt;p&gt;{&lt;img src=&#34;https://rack.github.io/logo.png&#34; width=&#34;400&#34; alt=&#34;rack powers web applications&#34;&gt;}[https://rack.github.io/]&lt;/p&gt; &#xA;&lt;p&gt;{&lt;img src=&#34;https://github.com/rack/rack/workflows/Development/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions status&#34;&gt;}[https://github.com/rack/rack/actions?query=workflow%3ADevelopment] {&lt;img src=&#34;https://badge.fury.io/rb/rack.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;}[http://badge.fury.io/rb/rack] {&lt;img src=&#34;https://api.dependabot.com/badges/compatibility_score?dependency-name=rack&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34; alt=&#34;SemVer Stability&#34;&gt;}[https://dependabot.com/compatibility-score.html?dependency-name=rack&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver] {&lt;img src=&#34;http://inch-ci.org/github/rack/rack.svg?branch=master&#34; alt=&#34;Inline docs&#34;&gt;}[http://inch-ci.org/github/rack/rack]&lt;/p&gt; &#xA;&lt;p&gt;\Rack provides a minimal, modular, and adaptable interface for developing web applications in Ruby. By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for web servers, web frameworks, and software in between (the so-called middleware) into a single method call.&lt;/p&gt; &#xA;&lt;p&gt;The exact details of this are described in the {\Rack specification}[rdoc-ref:SPEC.rdoc], which all \Rack applications should conform to.&lt;/p&gt; &#xA;&lt;p&gt;== Supported web servers&lt;/p&gt; &#xA;&lt;p&gt;The included &lt;em&gt;handlers&lt;/em&gt; can connect these web servers to \Rack:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WEBrick[https://github.com/ruby/webrick]&lt;/li&gt; &#xA; &lt;li&gt;CGI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These web servers include \Rack handlers in their distributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agoo[https://github.com/ohler55/agoo]&lt;/li&gt; &#xA; &lt;li&gt;Falcon[https://github.com/socketry/falcon]&lt;/li&gt; &#xA; &lt;li&gt;Iodine[https://github.com/boazsegev/iodine]&lt;/li&gt; &#xA; &lt;li&gt;{NGINX Unit}[https://unit.nginx.org/]&lt;/li&gt; &#xA; &lt;li&gt;{Phusion Passenger}[https://www.phusionpassenger.com/] (which is mod_rack for Apache and for nginx)&lt;/li&gt; &#xA; &lt;li&gt;Puma[https://puma.io/]&lt;/li&gt; &#xA; &lt;li&gt;Thin[https://rubygems.org/gems/thin]&lt;/li&gt; &#xA; &lt;li&gt;Unicorn[https://yhbt.net/unicorn/]&lt;/li&gt; &#xA; &lt;li&gt;uWSGI[https://uwsgi-docs.readthedocs.io/en/latest/]&lt;/li&gt; &#xA; &lt;li&gt;Lamby[https://lamby.custominktech.com] (for AWS Lambda)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any valid \Rack app will run the same on all these handlers, without changing anything.&lt;/p&gt; &#xA;&lt;p&gt;== Supported web frameworks&lt;/p&gt; &#xA;&lt;p&gt;These frameworks and many others support the \Rack API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Camping[http://www.ruby-camping.com/]&lt;/li&gt; &#xA; &lt;li&gt;Coset[http://leahneukirchen.org/repos/coset/]&lt;/li&gt; &#xA; &lt;li&gt;Hanami[https://hanamirb.org/]&lt;/li&gt; &#xA; &lt;li&gt;Padrino[http://padrinorb.com/]&lt;/li&gt; &#xA; &lt;li&gt;Ramaze[http://ramaze.net/]&lt;/li&gt; &#xA; &lt;li&gt;Roda[https://github.com/jeremyevans/roda]&lt;/li&gt; &#xA; &lt;li&gt;{Ruby on Rails}[https://rubyonrails.org/]&lt;/li&gt; &#xA; &lt;li&gt;Rum[https://github.com/leahneukirchen/rum]&lt;/li&gt; &#xA; &lt;li&gt;Sinatra[http://sinatrarb.com/]&lt;/li&gt; &#xA; &lt;li&gt;Utopia[https://github.com/socketry/utopia]&lt;/li&gt; &#xA; &lt;li&gt;WABuR[https://github.com/ohler55/wabur]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Available middleware shipped with \Rack&lt;/p&gt; &#xA;&lt;p&gt;Between the server and the framework, \Rack can be customized to your applications needs using middleware. \Rack itself ships with the following middleware:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rack::Chunked, for streaming responses using chunked encoding.&lt;/li&gt; &#xA; &lt;li&gt;Rack::CommonLogger, for creating Apache-style logfiles.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ConditionalGet, for returning not modified responses when the response has not changed.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Config, for modifying the environment before processing the request.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ContentLength, for setting content-length header based on body size.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ContentType, for setting default content-type header for responses.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Deflater, for compressing responses with gzip.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ETag, for setting ETag header on string bodies.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Events, for providing easy hooks when a request is received and when the response is sent.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Files, for serving static files.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Head, for returning an empty body for HEAD requests.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Lint, for checking conformance to the \Rack API.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Lock, for serializing requests using a mutex.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Logger, for setting a logger to handle logging errors.&lt;/li&gt; &#xA; &lt;li&gt;Rack::MethodOverride, for modifying the request method based on a submitted parameter.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Recursive, for including data from other paths in the application, and for performing internal redirects.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Reloader, for reloading files if they have been modified.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Runtime, for including a response header with the time taken to process the request.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Sendfile, for working with web servers that can use optimized file serving for file system paths.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ShowException, for catching unhandled exceptions and presenting them in a nice and helpful way with clickable backtrace.&lt;/li&gt; &#xA; &lt;li&gt;Rack::ShowStatus, for using nice error pages for empty client error responses.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Static, for more configurable serving of static files.&lt;/li&gt; &#xA; &lt;li&gt;Rack::TempfileReaper, for removing temporary files creating during a request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All these components use the same interface, which is described in detail in the \Rack specification. These optional components can be used in any way you wish.&lt;/p&gt; &#xA;&lt;p&gt;== Convenience&lt;/p&gt; &#xA;&lt;p&gt;If you want to develop outside of existing frameworks, implement your own ones, or develop middleware, \Rack provides many helpers to create \Rack applications quickly and without doing the same web stuff all over:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rack::Request, which also provides query string parsing and multipart handling.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Response, for convenient generation of HTTP replies and cookie handling.&lt;/li&gt; &#xA; &lt;li&gt;Rack::MockRequest and Rack::MockResponse for efficient and quick testing of \Rack application without real HTTP round-trips.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Cascade, for trying additional \Rack applications if an application returns a not found or method not supported response.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Directory, for serving files under a given directory, with directory indexes.&lt;/li&gt; &#xA; &lt;li&gt;Rack::MediaType, for parsing content-type headers.&lt;/li&gt; &#xA; &lt;li&gt;Rack::Mime, for determining content-type based on file extension.&lt;/li&gt; &#xA; &lt;li&gt;Rack::RewindableInput, for making any IO object rewindable, using a temporary file buffer.&lt;/li&gt; &#xA; &lt;li&gt;Rack::URLMap, to route to multiple applications inside the same process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== rack-contrib&lt;/p&gt; &#xA;&lt;p&gt;The plethora of useful middleware created the need for a project that collects fresh \Rack middleware. rack-contrib includes a variety of add-on components for \Rack and it is easy to contribute new modules.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rack/rack-contrib&#34;&gt;https://github.com/rack/rack-contrib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== rackup&lt;/p&gt; &#xA;&lt;p&gt;rackup is a useful tool for running \Rack applications, which uses the Rack::Builder DSL to configure middleware and build up applications easily.&lt;/p&gt; &#xA;&lt;p&gt;rackup automatically figures out the environment it is run in, and runs your application as FastCGI, CGI, or WEBrick---all from the same configuration.&lt;/p&gt; &#xA;&lt;p&gt;== Quick start&lt;/p&gt; &#xA;&lt;p&gt;Try the lobster!&lt;/p&gt; &#xA;&lt;p&gt;Either with the embedded WEBrick starter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ruby -Ilib lib/rack/lobster.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with rackup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/rackup -Ilib example/lobster.ru&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the lobster is found at &lt;a href=&#34;http://localhost:9292&#34;&gt;http://localhost:9292&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;== Installing with RubyGems&lt;/p&gt; &#xA;&lt;p&gt;A Gem of \Rack is available at {rubygems.org}[https://rubygems.org/gems/rack]. You can install it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install rack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;== Usage&lt;/p&gt; &#xA;&lt;p&gt;You should require the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require &#39;rack&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;\Rack uses autoload to automatically load other files \Rack ships with on demand, so you should not need require paths under +rack+. If you require paths under +rack+ without requiring +rack+ itself, things may not work correctly.&lt;/p&gt; &#xA;&lt;p&gt;== Configuration&lt;/p&gt; &#xA;&lt;p&gt;Several parameters can be modified on Rack::Utils to configure \Rack behaviour.&lt;/p&gt; &#xA;&lt;p&gt;e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Rack::Utils.param_depth_limit = 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=== param_depth_limit&lt;/p&gt; &#xA;&lt;p&gt;The maximum amount of nesting allowed in parameters. For example, if set to 3, this query string would be allowed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;?a[b][c]=d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but this query string would not be allowed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;?a[b][c][d]=e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Limiting the depth prevents a possible stack overflow when parsing parameters.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to 32.&lt;/p&gt; &#xA;&lt;p&gt;=== multipart_part_limit&lt;/p&gt; &#xA;&lt;p&gt;The maximum number of parts a request can contain. Accepting too many part can lead to the server running out of file handles.&lt;/p&gt; &#xA;&lt;p&gt;The default is 128, which means that a single request can&#39;t upload more than 128 files at once.&lt;/p&gt; &#xA;&lt;p&gt;Set to 0 for no limit.&lt;/p&gt; &#xA;&lt;p&gt;Can also be set via the +RACK_MULTIPART_PART_LIMIT+ environment variable.&lt;/p&gt; &#xA;&lt;p&gt;=== key_space_limit&lt;/p&gt; &#xA;&lt;p&gt;No longer has an effect, deprecated.&lt;/p&gt; &#xA;&lt;p&gt;== Changelog&lt;/p&gt; &#xA;&lt;p&gt;See {CHANGELOG.md}[https://github.com/rack/rack/blob/master/CHANGELOG.md].&lt;/p&gt; &#xA;&lt;p&gt;== Contributing&lt;/p&gt; &#xA;&lt;p&gt;See {CONTRIBUTING.md}[https://github.com/rack/rack/blob/master/CONTRIBUTING.md].&lt;/p&gt; &#xA;&lt;p&gt;== Contact&lt;/p&gt; &#xA;&lt;p&gt;Please post bugs, suggestions and patches to the bug tracker at {issues}[https://github.com/rack/rack/issues].&lt;/p&gt; &#xA;&lt;p&gt;Please post security related bugs and suggestions to the core team at &lt;a href=&#34;https://groups.google.com/forum/#!forum/rack-core&#34;&gt;https://groups.google.com/forum/#!forum/rack-core&lt;/a&gt; or &lt;a href=&#34;mailto:rack-core@googlegroups.com&#34;&gt;rack-core@googlegroups.com&lt;/a&gt;. This list is not public. Due to wide usage of the library, it is strongly preferred that we manage timing in order to provide viable patches at the time of disclosure. Your assistance in this matter is greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Mailing list archives are available at &lt;a href=&#34;https://groups.google.com/forum/#!forum/rack-devel&#34;&gt;https://groups.google.com/forum/#!forum/rack-devel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Git repository (send Git patches to the mailing list):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rack/rack&#34;&gt;https://github.com/rack/rack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are also welcome to join the #rack channel on irc.freenode.net.&lt;/p&gt; &#xA;&lt;p&gt;== Thanks&lt;/p&gt; &#xA;&lt;p&gt;The \Rack Core Team, consisting of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Aaron Patterson (tenderlove[https://github.com/tenderlove])&lt;/li&gt; &#xA; &lt;li&gt;Samuel Williams (ioquatix[https://github.com/ioquatix])&lt;/li&gt; &#xA; &lt;li&gt;Jeremy Evans (jeremyevans[https://github.com/jeremyevans])&lt;/li&gt; &#xA; &lt;li&gt;Eileen Uchitelle (eileencodes[https://github.com/eileencodes])&lt;/li&gt; &#xA; &lt;li&gt;Matthew Draper (matthewd[https://github.com/matthewd])&lt;/li&gt; &#xA; &lt;li&gt;Rafael Fran√ßa (rafaelfranca[https://github.com/rafaelfranca])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and the \Rack Alumni&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ryan Tomayko (rtomayko[https://github.com/rtomayko])&lt;/li&gt; &#xA; &lt;li&gt;Scytrin dai Kinthra (scytrin[https://github.com/scytrin])&lt;/li&gt; &#xA; &lt;li&gt;Leah Neukirchen (leahneukirchen[https://github.com/leahneukirchen])&lt;/li&gt; &#xA; &lt;li&gt;James Tucker (raggi[https://github.com/raggi])&lt;/li&gt; &#xA; &lt;li&gt;Josh Peek (josh[https://github.com/josh])&lt;/li&gt; &#xA; &lt;li&gt;Jos√© Valim (josevalim[https://github.com/josevalim])&lt;/li&gt; &#xA; &lt;li&gt;Michael Fellinger (manveru[https://github.com/manveru])&lt;/li&gt; &#xA; &lt;li&gt;Santiago Pastorino (spastorino[https://github.com/spastorino])&lt;/li&gt; &#xA; &lt;li&gt;Konstantin Haase (rkh[https://github.com/rkh])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;would like to thank:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adrian Madrid, for the LiteSpeed handler.&lt;/li&gt; &#xA; &lt;li&gt;Christoffer Sawicki, for the first Rails adapter and Rack::Deflater.&lt;/li&gt; &#xA; &lt;li&gt;Tim Fletcher, for the HTTP authentication code.&lt;/li&gt; &#xA; &lt;li&gt;Luc Heinrich for the Cookie sessions, the static file handler and bugfixes.&lt;/li&gt; &#xA; &lt;li&gt;Armin Ronacher, for the logo and racktools.&lt;/li&gt; &#xA; &lt;li&gt;Alex Beregszaszi, Alexander Kahn, Anil Wadghule, Aredridel, Ben Alpert, Dan Kubb, Daniel Roethlisberger, Matt Todd, Tom Robinson, Phil Hagelberg, S. Brent Faulkner, Bosko Milekic, Daniel Rodr√≠guez Troiti√±o, Genki Takiuchi, Geoffrey Grosenbach, Julien Sanchez, Kamal Fariz Mahyuddin, Masayoshi Takahashi, Patrick Aljordm, Mig, Kazuhiro Nishiyama, Jon Bardin, Konstantin Haase, Larry Siden, Matias Korhonen, Sam Ruby, Simon Chiang, Tim Connor, Timur Batyrshin, and Zach Brock for bug fixing and other improvements.&lt;/li&gt; &#xA; &lt;li&gt;Eric Wong, Hongli Lai, Jeremy Kemper for their continuous support and API improvements.&lt;/li&gt; &#xA; &lt;li&gt;Yehuda Katz and Carl Lerche for refactoring rackup.&lt;/li&gt; &#xA; &lt;li&gt;Brian Candler, for Rack::ContentType.&lt;/li&gt; &#xA; &lt;li&gt;Graham Batty, for improved handler loading.&lt;/li&gt; &#xA; &lt;li&gt;Stephen Bannasch, for bug reports and documentation.&lt;/li&gt; &#xA; &lt;li&gt;Gary Wright, for proposing a better Rack::Response interface.&lt;/li&gt; &#xA; &lt;li&gt;Jonathan Buch, for improvements regarding Rack::Response.&lt;/li&gt; &#xA; &lt;li&gt;Armin R√∂hrl, for tracking down bugs in the Cookie generator.&lt;/li&gt; &#xA; &lt;li&gt;Alexander Kellett for testing the Gem and reviewing the announcement.&lt;/li&gt; &#xA; &lt;li&gt;Marcus R√ºckert, for help with configuring and debugging lighttpd.&lt;/li&gt; &#xA; &lt;li&gt;The WSGI team for the well-done and documented work they&#39;ve done and \Rack builds up on.&lt;/li&gt; &#xA; &lt;li&gt;All bug reporters and patch contributors not mentioned above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Links&lt;/p&gt; &#xA;&lt;p&gt;\Rack:: &lt;a href=&#34;https://rack.github.io/&#34;&gt;https://rack.github.io/&lt;/a&gt; Official \Rack repositories:: &lt;a href=&#34;https://github.com/rack&#34;&gt;https://github.com/rack&lt;/a&gt; \Rack Bug Tracking:: &lt;a href=&#34;https://github.com/rack/rack/issues&#34;&gt;https://github.com/rack/rack/issues&lt;/a&gt; rack-devel mailing list:: &lt;a href=&#34;https://groups.google.com/forum/#!forum/rack-devel&#34;&gt;https://groups.google.com/forum/#!forum/rack-devel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;== License&lt;/p&gt; &#xA;&lt;p&gt;\Rack is released under the {MIT License}[https://opensource.org/licenses/MIT].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>puma/puma</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/puma/puma</id>
    <link href="https://github.com/puma/puma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby/Rack web server built for parallelism&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://puma.io/images/logos/puma-logo-large.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Puma: A Ruby Web Server Built For Parallelism&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/puma/puma/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/puma/puma/workflows/Tests/badge.svg?branch=master&#34; alt=&#34;Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/puma/puma&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/puma/puma.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/puma&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-Puma-blue.svg?sanitize=true&#34; alt=&#34;StackOverflow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Puma is a &lt;strong&gt;simple, fast, multi-threaded, and highly parallel HTTP 1.1 server for Ruby/Rack applications&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Built For Speed &amp;amp; Parallelism&lt;/h2&gt; &#xA;&lt;p&gt;Puma processes requests using a C-optimized Ragel extension (inherited from Mongrel) that provides fast, accurate HTTP 1.1 protocol parsing in a portable way. Puma then serves the request using a thread pool. Each request is served in a separate thread, so truly parallel Ruby implementations (JRuby, Rubinius) will use all available CPU cores.&lt;/p&gt; &#xA;&lt;p&gt;Originally designed as a server for &lt;a href=&#34;https://github.com/rubinius/rubinius&#34;&gt;Rubinius&lt;/a&gt;, Puma also works well with Ruby (MRI) and JRuby.&lt;/p&gt; &#xA;&lt;p&gt;On MRI, there is a Global VM Lock (GVL) that ensures only one thread can run Ruby code at a time. But if you&#39;re doing a lot of blocking IO (such as HTTP calls to external APIs like Twitter), Puma still improves MRI&#39;s throughput by allowing IO waiting to be done in parallel.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install puma&#xA;$ puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without arguments, puma will look for a rackup (.ru) file in working directory called &lt;code&gt;config.ru&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SSL Connection Support&lt;/h2&gt; &#xA;&lt;p&gt;Puma will install/compile with support for ssl sockets, assuming OpenSSL development files are installed on the system.&lt;/p&gt; &#xA;&lt;p&gt;If the system does not have OpenSSL development files installed, Puma will install/compile, but it will not allow ssl connections.&lt;/p&gt; &#xA;&lt;h2&gt;Frameworks&lt;/h2&gt; &#xA;&lt;h3&gt;Rails&lt;/h3&gt; &#xA;&lt;p&gt;Puma is the default server for Rails, included in the generated Gemfile.&lt;/p&gt; &#xA;&lt;p&gt;Start your server with the &lt;code&gt;rails&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many configuration options and Puma features are not available when using &lt;code&gt;rails server&lt;/code&gt;. It is recommended that you use Puma&#39;s executable instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sinatra&lt;/h3&gt; &#xA;&lt;p&gt;You can run your Sinatra application with Puma from the command line like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ruby app.rb -s Puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to actually configure Puma using a config file, like &lt;code&gt;puma.rb&lt;/code&gt;, however, you need to use the &lt;code&gt;puma&lt;/code&gt; executable. To do this, you must add a rackup file to your Sinatra app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;require &#39;./app&#39;&#xA;run Sinatra::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then start your application using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Puma provides numerous options. Consult &lt;code&gt;puma -h&lt;/code&gt; (or &lt;code&gt;puma --help&lt;/code&gt;) for a full list of CLI options, or see &lt;code&gt;Puma::DSL&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/dsl.rb&#34;&gt;dsl.rb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also find several configuration examples as part of the &lt;a href=&#34;https://github.com/puma/puma/tree/master/test/config&#34;&gt;test&lt;/a&gt; suite.&lt;/p&gt; &#xA;&lt;p&gt;For debugging purposes, you can set the environment variable &lt;code&gt;PUMA_LOG_CONFIG&lt;/code&gt; with a value and the loaded configuration will be printed as part of the boot process.&lt;/p&gt; &#xA;&lt;h3&gt;Thread Pool&lt;/h3&gt; &#xA;&lt;p&gt;Puma uses a thread pool. You can set the minimum and maximum number of threads that are available in the pool with the &lt;code&gt;-t&lt;/code&gt; (or &lt;code&gt;--threads&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -t 8:32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Puma will automatically scale the number of threads, from the minimum until it caps out at the maximum, based on how much traffic is present. The current default is &lt;code&gt;0:16&lt;/code&gt; and on MRI is &lt;code&gt;0:5&lt;/code&gt;. Feel free to experiment, but be careful not to set the number of maximum threads to a large number, as you may exhaust resources on the system (or cause contention for the Global VM Lock, when using MRI).&lt;/p&gt; &#xA;&lt;p&gt;Be aware that additionally Puma creates threads on its own for internal purposes (e.g. handling slow clients). So, even if you specify -t 1:1, expect around 7 threads created in your application.&lt;/p&gt; &#xA;&lt;h3&gt;Clustered mode&lt;/h3&gt; &#xA;&lt;p&gt;Puma also offers &#34;clustered mode&#34;. Clustered mode &lt;code&gt;fork&lt;/code&gt;s workers from a master process. Each child process still has its own thread pool. You can tune the number of workers with the &lt;code&gt;-w&lt;/code&gt; (or &lt;code&gt;--workers&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -t 8:32 -w 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with the &lt;code&gt;WEB_CONCURRENCY&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ WEB_CONCURRENCY=3 puma -t 8:32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that threads are still used in clustered mode, and the &lt;code&gt;-t&lt;/code&gt; thread flag setting is per worker, so &lt;code&gt;-w 2 -t 16:16&lt;/code&gt; will spawn 32 threads in total, with 16 in each worker process.&lt;/p&gt; &#xA;&lt;p&gt;In clustered mode, Puma can &#34;preload&#34; your application. This loads all the application code &lt;em&gt;prior&lt;/em&gt; to forking. Preloading reduces total memory usage of your application via an operating system feature called &lt;a href=&#34;https://en.wikipedia.org/wiki/Copy-on-write&#34;&gt;copy-on-write&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;WEB_CONCURRENCY&lt;/code&gt; environment variable is set to a value &amp;gt; 1 (and &lt;code&gt;--prune-bundler&lt;/code&gt; has not been specified), preloading will be enabled by default. Otherwise, you can use the &lt;code&gt;--preload&lt;/code&gt; flag from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -w 3 --preload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you&#39;re using a configuration file, you can use the &lt;code&gt;preload_app!&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/puma.rb&#xA;workers 3&#xA;preload_app!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Preloading can‚Äôt be used with phased restart, since phased restart kills and restarts workers one-by-one, and preloading copies the code of master into the workers.&lt;/p&gt; &#xA;&lt;p&gt;When using clustered mode, you can specify a block in your configuration file that will be run on boot of each worker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/puma.rb&#xA;on_worker_boot do&#xA;  # configuration here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code can be used to setup the process before booting the application, allowing you to do some Puma-specific things that you don&#39;t want to embed in your application. For instance, you could fire a log notification that a worker booted or send something to statsd. This can be called multiple times.&lt;/p&gt; &#xA;&lt;p&gt;Constants loaded by your application (such as &lt;code&gt;Rails&lt;/code&gt;) will not be available in &lt;code&gt;on_worker_boot&lt;/code&gt; unless preloading is enabled.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify a block to be run before workers are forked, using &lt;code&gt;before_fork&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/puma.rb&#xA;before_fork do&#xA;  # configuration here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error handling&lt;/h3&gt; &#xA;&lt;p&gt;If puma encounters an error outside of the context of your application, it will respond with a 500 and a simple textual error message (see &lt;code&gt;Puma::Server#lowlevel_error&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/server.rb&#34;&gt;server.rb&lt;/a&gt;). You can specify custom behavior for this scenario. For example, you can report the error to your third-party error-tracking service (in this example, &lt;a href=&#34;https://rollbar.com&#34;&gt;rollbar&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lowlevel_error_handler do |e|&#xA;  Rollbar.critical(e)&#xA;  [500, {}, [&#34;An error has occurred, and engineers have been informed. Please reload the page. If you continue to have problems, contact support@example.com\n&#34;]]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binding TCP / Sockets&lt;/h3&gt; &#xA;&lt;p&gt;Bind Puma to a socket with the &lt;code&gt;-b&lt;/code&gt; (or &lt;code&gt;--bind&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b tcp://127.0.0.1:9292&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a UNIX Socket instead of TCP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b unix:///var/run/puma.sock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to change the permissions of the UNIX socket, just add a umask parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;unix:///var/run/puma.sock?umask=0111&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Need a bit of security? Use SSL sockets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Self-signed SSL certificates (via the &lt;a href=&#34;https://github.com/socketry/localhost&#34;&gt;&lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt; gem, for development use):&lt;/h4&gt; &#xA;&lt;p&gt;Puma supports the &lt;a href=&#34;https://github.com/socketry/localhost&#34;&gt;&lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt; gem for self-signed certificates. This is particularly useful if you want to use Puma with SSL locally, and self-signed certificates will work for your use-case. Currently, the integration can only be used in MRI.&lt;/p&gt; &#xA;&lt;p&gt;Puma automatically configures SSL when the &lt;a href=&#34;https://github.com/socketry/localhost&#34;&gt;&lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt; gem is loaded in a &lt;code&gt;development&lt;/code&gt; environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Add the gem to your Gemfile&#xA;group(:development) do&#xA;  gem &#39;localhost&#39;&#xA;end&#xA;&#xA;# And require it implicitly using bundler&#xA;require &#34;bundler&#34;&#xA;Bundler.require(:default, ENV[&#34;RACK_ENV&#34;].to_sym)&#xA;&#xA;# Alternatively, you can require the gem in config.ru:&#xA;require &#39;./app&#39;&#xA;require &#39;localhost&#39;&#xA;run Sinatra::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, Puma must be listening to an SSL socket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ puma -b &#39;ssl://localhost:9292&#39; config.ru&#xA;&#xA;# The following options allow you to reach Puma over HTTP as well:&#xA;$ puma -b ssl://localhost:9292 -b tcp://localhost:9393 config.ru&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Controlling SSL Cipher Suites&lt;/h4&gt; &#xA;&lt;p&gt;To use or avoid specific SSL cipher suites, use &lt;code&gt;ssl_cipher_filter&lt;/code&gt; or &lt;code&gt;ssl_cipher_list&lt;/code&gt; options.&lt;/p&gt; &#xA;&lt;h5&gt;Ruby:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;ssl_cipher_filter=!aNULL:AES+SHA&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;JRuby:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?keystore=path_to_keystore&amp;amp;keystore-pass=keystore_password&amp;amp;ssl_cipher_list=TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html&#34;&gt;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html&lt;/a&gt; for cipher filter format and full list of cipher suites.&lt;/p&gt; &#xA;&lt;p&gt;Disable TLS v1 with the &lt;code&gt;no_tlsv1&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;no_tlsv1=true&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Controlling OpenSSL Verification Flags&lt;/h4&gt; &#xA;&lt;p&gt;To enable verification flags offered by OpenSSL, use &lt;code&gt;verification_flags&lt;/code&gt; (not available for JRuby):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;verification_flags=PARTIAL_CHAIN&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set multiple verification flags (by separating them with coma):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;verification_flags=PARTIAL_CHAIN,CRL_CHECK&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List of available flags: &lt;code&gt;USE_CHECK_TIME&lt;/code&gt;, &lt;code&gt;CRL_CHECK&lt;/code&gt;, &lt;code&gt;CRL_CHECK_ALL&lt;/code&gt;, &lt;code&gt;IGNORE_CRITICAL&lt;/code&gt;, &lt;code&gt;X509_STRICT&lt;/code&gt;, &lt;code&gt;ALLOW_PROXY_CERTS&lt;/code&gt;, &lt;code&gt;POLICY_CHECK&lt;/code&gt;, &lt;code&gt;EXPLICIT_POLICY&lt;/code&gt;, &lt;code&gt;INHIBIT_ANY&lt;/code&gt;, &lt;code&gt;INHIBIT_MAP&lt;/code&gt;, &lt;code&gt;NOTIFY_POLICY&lt;/code&gt;, &lt;code&gt;EXTENDED_CRL_SUPPORT&lt;/code&gt;, &lt;code&gt;USE_DELTAS&lt;/code&gt;, &lt;code&gt;CHECK_SS_SIGNATURE&lt;/code&gt;, &lt;code&gt;TRUSTED_FIRST&lt;/code&gt;, &lt;code&gt;SUITEB_128_LOS_ONLY&lt;/code&gt;, &lt;code&gt;SUITEB_192_LOS&lt;/code&gt;, &lt;code&gt;SUITEB_128_LOS&lt;/code&gt;, &lt;code&gt;PARTIAL_CHAIN&lt;/code&gt;, &lt;code&gt;NO_ALT_CHAINS&lt;/code&gt;, &lt;code&gt;NO_CHECK_TIME&lt;/code&gt; (see &lt;a href=&#34;https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_hostflags.html#VERIFICATION-FLAGS&#34;&gt;https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_hostflags.html#VERIFICATION-FLAGS&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Control/Status Server&lt;/h3&gt; &#xA;&lt;p&gt;Puma has a built-in status and control app that can be used to query and control Puma.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma --control-url tcp://127.0.0.1:9293 --control-token foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Puma will start the control server on localhost port 9293. All requests to the control server will need to include control token (in this case, &lt;code&gt;token=foo&lt;/code&gt;) as a query parameter. This allows for simple authentication. Check out &lt;code&gt;Puma::App::Status&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/app/status.rb&#34;&gt;status.rb&lt;/a&gt; to see what the status app has available.&lt;/p&gt; &#xA;&lt;p&gt;You can also interact with the control server via &lt;code&gt;pumactl&lt;/code&gt;. This command will restart Puma:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pumactl --control-url &#39;tcp://127.0.0.1:9293&#39; --control-token foo restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a list of &lt;code&gt;pumactl&lt;/code&gt; options, use &lt;code&gt;pumactl --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration File&lt;/h3&gt; &#xA;&lt;p&gt;You can also provide a configuration file with the &lt;code&gt;-C&lt;/code&gt; (or &lt;code&gt;--config&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -C /path/to/config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no configuration file is specified, Puma will look for a configuration file at &lt;code&gt;config/puma.rb&lt;/code&gt;. If an environment is specified (via the &lt;code&gt;--environment&lt;/code&gt; flag or through the &lt;code&gt;APP_ENV&lt;/code&gt;, &lt;code&gt;RACK_ENV&lt;/code&gt;, or &lt;code&gt;RAILS_ENV&lt;/code&gt; environment variables) Puma looks for a configuration file at &lt;code&gt;config/puma/&amp;lt;environment_name&amp;gt;.rb&lt;/code&gt; and then falls back to &lt;code&gt;config/puma.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to prevent Puma from looking for a configuration file in those locations, include the &lt;code&gt;--no-config&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma --no-config&#xA;&#xA;# or&#xA;&#xA;$ puma -C &#34;-&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other side-effects of setting the environment are whether to show stack traces (in &lt;code&gt;development&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt;), and setting RACK_ENV may potentially affect middleware looking for this value to change their behavior. The default puma RACK_ENV value is &lt;code&gt;development&lt;/code&gt;. You can see all config default values in &lt;code&gt;Puma::Configuration#puma_default_options&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/61c6213fbab/lib/puma/configuration.rb#L182-L204&#34;&gt;configuration.rb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;code&gt;Puma::DSL&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/dsl.rb&#34;&gt;dsl.rb&lt;/a&gt; to see all available options.&lt;/p&gt; &#xA;&lt;h2&gt;Restart&lt;/h2&gt; &#xA;&lt;p&gt;Puma includes the ability to restart itself. When available (MRI, Rubinius, JRuby), Puma performs a &#34;hot restart&#34;. This is the same functionality available in &lt;em&gt;Unicorn&lt;/em&gt; and &lt;em&gt;NGINX&lt;/em&gt; which keep the server sockets open between restarts. This makes sure that no pending requests are dropped while the restart is taking place.&lt;/p&gt; &#xA;&lt;p&gt;For more, see the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/restart.md&#34;&gt;Restart documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Signals&lt;/h2&gt; &#xA;&lt;p&gt;Puma responds to several signals. A detailed guide to using UNIX signals with Puma can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/signals.md&#34;&gt;Signals documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Constraints&lt;/h2&gt; &#xA;&lt;p&gt;Some platforms do not support all Puma features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JRuby&lt;/strong&gt;, &lt;strong&gt;Windows&lt;/strong&gt;: server sockets are not seamless on restart, they must be closed and reopened. These platforms have no way to pass descriptors into a new process that is exposed to Ruby. Also, cluster mode is not supported due to a lack of fork(2).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: Cluster mode is not supported due to a lack of fork(2).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;: The way Kubernetes handles pod shutdowns interacts poorly with server processes implementing graceful shutdown, like Puma. See the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/kubernetes.md&#34;&gt;kubernetes section of the documentation&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Bugs&lt;/h2&gt; &#xA;&lt;p&gt;For MRI versions 2.2.7, 2.2.8, 2.2.9, 2.2.10, 2.3.4 and 2.4.1, you may see &lt;code&gt;stream closed in another thread (IOError)&lt;/code&gt;. It may be caused by a &lt;a href=&#34;https://bugs.ruby-lang.org/issues/13632&#34;&gt;Ruby bug&lt;/a&gt;. It can be fixed with the gem &lt;a href=&#34;https://rubygems.org/gems/stopgap_13632&#34;&gt;https://rubygems.org/gems/stopgap_13632&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if %w(2.2.7 2.2.8 2.2.9 2.2.10 2.3.4 2.4.1).include? RUBY_VERSION&#xA;  begin&#xA;    require &#39;stopgap_13632&#39;&#xA;  rescue LoadError&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Puma has support for Capistrano with an &lt;a href=&#34;https://github.com/seuros/capistrano-puma&#34;&gt;external gem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is common to use process monitors with Puma. Modern process monitors like systemd or rc.d provide continuous monitoring and restarts for increased reliability in production environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/jungle/rc.d/README.md&#34;&gt;rc.d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/systemd.md&#34;&gt;systemd&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Community guides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/anon987654321/4532cf8d6c59c1f43ec8973faa031103&#34;&gt;Deploying Puma on OpenBSD using relayd and httpd&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community Extensions&lt;/h2&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/harmjanblok/puma-metrics&#34;&gt;puma-metrics&lt;/a&gt; ‚Äî&amp;nbsp;export Puma metrics to Prometheus&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yob/puma-plugin-statsd&#34;&gt;puma-plugin-statsd&lt;/a&gt; ‚Äî&amp;nbsp;send Puma metrics to statsd&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sj26/puma-plugin-systemd&#34;&gt;puma-plugin-systemd&lt;/a&gt; ‚Äî&amp;nbsp;deeper integration with systemd for notify, status and watchdog&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Monitoring&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ylecuyer/puma-status&#34;&gt;puma-status&lt;/a&gt; ‚Äî&amp;nbsp;Monitor CPU/Mem/Load of running puma instances from the CLI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Find details for contributing in the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Puma is copyright Evan Phoenix and contributors, licensed under the BSD 3-Clause license. See the included LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simplecov-ruby/simplecov</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/simplecov-ruby/simplecov</id>
    <link href="https://github.com/simplecov-ruby/simplecov" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code coverage for Ruby with a powerful configuration library and automatic merging of coverage across test suites&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SimpleCov &lt;a href=&#34;https://badge.fury.io/rb/simplecov&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/simplecov.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/actions?query=workflow%3Astable&#34; title=&#34;SimpleCov is built around the clock by github.com&#34;&gt;&lt;img src=&#34;https://github.com/simplecov-ruby/simplecov/workflows/stable/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/simplecov-ruby/simplecov/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/c071d197d61953a7e482/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/simplecov-ruby/simplecov&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/simplecov-ruby/simplecov.svg?branch=main&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code coverage for Ruby&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simplecov-ruby/simplecov&#34; title=&#34;Source Code @ GitHub&#34;&gt;Source Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubydoc.info/gems/simplecov/frames&#34; title=&#34;RDoc API Documentation at Rubydoc.info&#34;&gt;API documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/raw/main/CHANGELOG.md&#34; title=&#34;Project Changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubygems.org/gems/simplecov&#34; title=&#34;SimpleCov @ rubygems.org&#34;&gt;Rubygem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/actions?query=workflow%3Astable&#34; title=&#34;SimpleCov is built around the clock by github.com&#34;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SimpleCov is a code coverage analysis tool for Ruby. It uses &lt;a href=&#34;https://ruby-doc.org/stdlib/libdoc/coverage/rdoc/Coverage.html&#34; title=&#34;API doc for Ruby&#39;s Coverage library&#34;&gt;Ruby&#39;s built-in Coverage&lt;/a&gt; library to gather code coverage data, but makes processing its results much easier by providing a clean API to filter, group, merge, format, and display those results, giving you a complete code coverage suite that can be set up with just a couple lines of code. SimpleCov/Coverage track covered ruby code, gathering coverage for common templating solutions like erb, slim and haml is not supported.&lt;/p&gt; &#xA;&lt;p&gt;In most cases, you&#39;ll want overall coverage results for your projects, including all types of tests, Cucumber features, etc. SimpleCov automatically takes care of this by caching and merging results when generating reports, so your report actually includes coverage across your test suites and thereby gives you a better picture of blank spots.&lt;/p&gt; &#xA;&lt;p&gt;The official formatter of SimpleCov is packaged as a separate gem called &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov-html&#34; title=&#34;SimpleCov HTML Formatter Source Code @ GitHub&#34;&gt;simplecov-html&lt;/a&gt;, but will be installed and configured automatically when you launch SimpleCov. If you&#39;re curious, you can find it &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov-html&#34; title=&#34;SimpleCov HTML Formatter Source Code @ GitHub&#34;&gt;on GitHub, too&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Code and Bug Reports&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/issues&#34;&gt;Issue Tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for how to contribute along with some common problems to check out before creating an issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Questions, Problems, Suggestions, etc.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/simplecov&#34;&gt;Mailing List&lt;/a&gt; &#34;Open mailing list for discussion and announcements on Google Groups&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add SimpleCov to your &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;simplecov&#39;, require: false, group: :test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Load and launch SimpleCov &lt;strong&gt;at the very top&lt;/strong&gt; of your &lt;code&gt;test/test_helper.rb&lt;/code&gt; (&lt;em&gt;or &lt;code&gt;spec_helper.rb&lt;/code&gt;, &lt;code&gt;rails_helper&lt;/code&gt;, cucumber &lt;code&gt;env.rb&lt;/code&gt;, or whatever your preferred test framework uses&lt;/em&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;simplecov&#39;&#xA;SimpleCov.start&#xA;&#xA;# Previous content of test helper now starts here&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If SimpleCov starts after your application code is already loaded (via &lt;code&gt;require&lt;/code&gt;), it won&#39;t be able to track your files and their coverage! The &lt;code&gt;SimpleCov.start&lt;/code&gt; &lt;strong&gt;must&lt;/strong&gt; be issued &lt;strong&gt;before any of your application code is required!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This is especially true if you use anything that keeps your tests application loaded like spring, check out the &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplecov-ruby/simplecov/main/#want-to-use-spring-with-simplecov&#34;&gt;spring section&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;SimpleCov must be running in the process that you want the code coverage analysis to happen on. When testing a server process (e.g. a JSON API endpoint) via a separate test process (e.g. when using Selenium) where you want to see all code executed by the &lt;code&gt;rails server&lt;/code&gt;, and not just code executed in your actual test files, you need to require SimpleCov in the server process. For rails for instance, you&#39;ll want to add something like this to the top of &lt;code&gt;bin/rails&lt;/code&gt;, but below the &#34;shebang&#34; line (&lt;code&gt;#! /usr/bin/env ruby&lt;/code&gt;) and after config/boot is required:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if ENV[&#39;RAILS_ENV&#39;] == &#39;test&#39;&#xA;  require &#39;simplecov&#39;&#xA;  SimpleCov.start &#39;rails&#39;&#xA;  puts &#34;required simplecov&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run your full test suite to see the percent coverage that your application has.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After running your tests, open &lt;code&gt;coverage/index.html&lt;/code&gt; in the browser of your choice. For example, in a Mac Terminal, run the following command from your application&#39;s root directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;open coverage/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;in a debian/ubuntu Terminal,&lt;/p&gt; &lt;pre&gt;&lt;code&gt;xdg-open coverage/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href=&#34;https://dwheeler.com/essays/open-files-urls.html&#34;&gt;This guide&lt;/a&gt; can help if you&#39;re unsure which command your particular operating system requires.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;.gitignore&lt;/code&gt; file to ensure that coverage results are not tracked by Git (optional):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;echo coverage &amp;gt;&amp;gt; .gitignore&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;re making a Rails application, SimpleCov comes with built-in configurations (see below for information on profiles) that will get you started with groups for your Controllers, Models and Helpers. To use it, the first two lines of your test_helper should be like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;simplecov&#39;&#xA;SimpleCov.start &#39;rails&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example output&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Coverage results report, fully browsable locally with sorting and much more:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/137793/17071162/db6f253e-502d-11e6-9d84-e40c3d75f333.png&#34; alt=&#34;SimpleCov coverage report&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Source file coverage details view:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/137793/17071163/db6f9f0a-502d-11e6-816c-edb2c66fad8d.png&#34; alt=&#34;SimpleCov source file detail view&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use it with any framework!&lt;/h2&gt; &#xA;&lt;p&gt;Similarly to the usage with Test::Unit described above, the only thing you have to do is to add the SimpleCov config to the very top of your Cucumber/RSpec/whatever setup file.&lt;/p&gt; &#xA;&lt;p&gt;Add the setup code to the &lt;strong&gt;top&lt;/strong&gt; of &lt;code&gt;features/support/env.rb&lt;/code&gt; (for Cucumber) or &lt;code&gt;spec/spec_helper.rb&lt;/code&gt; (for RSpec). Other test frameworks should work accordingly, whatever their setup file may be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;simplecov&#39;&#xA;SimpleCov.start &#39;rails&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could even track what kind of code your UI testers are touching if you want to go overboard with things. SimpleCov does not care what kind of framework it is running in; it just looks at what code is being executed and generates a report about it.&lt;/p&gt; &#xA;&lt;h3&gt;Notes on specific frameworks and test utilities&lt;/h3&gt; &#xA;&lt;p&gt;For some frameworks and testing tools there are quirks and problems you might want to know about if you want to use SimpleCov with them. Here&#39;s an overview of the known ones:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th&gt;Framework&lt;/th&gt;&#xA;   &lt;th&gt;Notes&lt;/th&gt;&#xA;   &lt;th&gt;Issue&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; parallel_tests &lt;/th&gt; &#xA;   &lt;td&gt; As of 0.8.0, SimpleCov should correctly recognize parallel_tests and supplement your test suite names with their corresponding test env numbers. SimpleCov locks the resultset cache while merging, ensuring no race conditions occur when results are merged. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/issues/64&#34;&gt;#64&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/pull/185&#34;&gt;#185&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; knapsack_pro &lt;/th&gt; &#xA;   &lt;td&gt; To make SimpleCov work with Knapsack Pro Queue Mode to split tests in parallel on CI jobs you need to provide CI node index number to the &lt;code&gt;SimpleCov.command_name&lt;/code&gt; in &lt;code&gt;KnapsackPro::Hooks::Queue.before_queue&lt;/code&gt; hook. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://knapsackpro.com/faq/question/how-to-use-simplecov-in-queue-mode&#34;&gt;Tip&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; RubyMine &lt;/th&gt; &#xA;   &lt;td&gt; The &lt;a href=&#34;https://www.jetbrains.com/ruby/&#34;&gt;RubyMine IDE&lt;/a&gt; has built-in support for SimpleCov&#39;s coverage reports, though you might need to explicitly set the output root using `SimpleCov.root(&#39;foo/bar/baz&#39;)` &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/issues/95&#34;&gt;#95&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; Spork &lt;/th&gt; &#xA;   &lt;td&gt; Because of how Spork works internally (using preforking), there used to be trouble when using SimpleCov with it, but that has apparently been resolved with a specific configuration strategy. See &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/issues/42#issuecomment-4440284&#34;&gt;this&lt;/a&gt; comment. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/issues/42#issuecomment-4440284&#34;&gt;#42&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; Spring &lt;/th&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/simplecov-ruby/simplecov/main/#want-to-use-spring-with-simplecov&#34;&gt;See section below.&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/issues/381&#34;&gt;#381&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; Test/Unit &lt;/th&gt; &#xA;   &lt;td&gt; Test Unit 2 used to mess with ARGV, leading to a failure to detect the test process name in SimpleCov. &lt;code&gt;test-unit&lt;/code&gt; releases 2.4.3+ (Dec 11th, 2011) should have this problem resolved. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/issues/45&#34;&gt;#45&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/test-unit/test-unit/pull/12&#34;&gt;test-unit/test-unit#12&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Configuring SimpleCov&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rubydoc.info/gems/simplecov/SimpleCov/Configuration&#34; title=&#34;Configuration options API documentation&#34;&gt;Configuration&lt;/a&gt; settings can be applied in three formats, which are completely equivalent:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The most common way is to configure it directly in your start block:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start do&#xA;  some_config_option &#39;foo&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also set all configuration options directly:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.some_config_option &#39;foo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you do not want to start coverage immediately after launch or want to add additional configuration later on in a concise way, use:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.configure do&#xA;  some_config_option &#39;foo&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please check out the &lt;a href=&#34;http://rubydoc.info/gems/simplecov/SimpleCov/Configuration&#34; title=&#34;Configuration options API documentation&#34;&gt;Configuration&lt;/a&gt; API documentation to find out what you can customize.&lt;/p&gt; &#xA;&lt;h2&gt;Using .simplecov for centralized config&lt;/h2&gt; &#xA;&lt;p&gt;If you use SimpleCov to merge multiple test suite results (e.g. Test/Unit and Cucumber) into a single report, you&#39;d normally have to set up all your config options twice, once in &lt;code&gt;test_helper.rb&lt;/code&gt; and once in &lt;code&gt;env.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To avoid this, you can place a file called &lt;code&gt;.simplecov&lt;/code&gt; in your project root. You can then just leave the &lt;code&gt;require &#39;simplecov&#39;&lt;/code&gt; in each test setup helper (&lt;strong&gt;at the top&lt;/strong&gt;) and move the &lt;code&gt;SimpleCov.start&lt;/code&gt; code with all your custom config options into &lt;code&gt;.simplecov&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# test/test_helper.rb&#xA;require &#39;simplecov&#39;&#xA;&#xA;# features/support/env.rb&#xA;require &#39;simplecov&#39;&#xA;&#xA;# .simplecov&#xA;SimpleCov.start &#39;rails&#39; do&#xA;  # any custom configs like groups and filters can be here at a central place&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;.simplecov&lt;/code&gt; rather than separately requiring SimpleCov multiple times is recommended if you are merging multiple test frameworks like Cucumber and RSpec that rely on each other, as invoking SimpleCov multiple times can cause coverage information to be lost.&lt;/p&gt; &#xA;&lt;h2&gt;Branch coverage (ruby &#34;~&amp;gt; 2.5&#34;)&lt;/h2&gt; &#xA;&lt;p&gt;Add branch coverage measurement statistics to your results. Supported in CRuby versions 2.5+.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start do&#xA;  enable_coverage :branch&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Branch coverage is a feature introduced in Ruby 2.5 concerning itself with whether a particular branch of a condition had been executed. Line coverage on the other hand is only interested in whether a line of code has been executed.&lt;/p&gt; &#xA;&lt;p&gt;This comes in handy for instance for one line conditionals:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;number.odd? ? &#34;odd&#34; : &#34;even&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In line coverage this line would always be marked as executed but you&#39;d never know if both conditions were met. Guard clauses have a similar story:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;return if number.odd?&#xA;&#xA;# more code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If all the code in that method was covered you&#39;d never know if the guard clause was ever triggered! With line coverage as just evaluating the condition marks it as covered.&lt;/p&gt; &#xA;&lt;p&gt;In the HTML report the lines of code will be annotated like &lt;code&gt;branch_type: hit_count&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;then: 2&lt;/code&gt; - the then branch (of an &lt;code&gt;if&lt;/code&gt;) was executed twice&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;else: 0&lt;/code&gt; - the else branch (of an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;case&lt;/code&gt;) was never executed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not that even if you don&#39;t declare an &lt;code&gt;else&lt;/code&gt; branch it will still show up in the coverage reports meaning that the condition of the &lt;code&gt;if&lt;/code&gt; was not hit or that no &lt;code&gt;when&lt;/code&gt; of &lt;code&gt;case&lt;/code&gt; was hit during the test runs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Is branch coverage strictly better?&lt;/strong&gt; No. Branch coverage really only concerns itself with conditionals - meaning coverage of sequential code is of no interest to it. A file without conditional logic will have no branch coverage data and SimpleCov will report 0 of 0 branches covered as 100% (as everything that can be covered was covered).&lt;/p&gt; &#xA;&lt;p&gt;Hence, we recommend looking at both metrics together. Branch coverage might also be a good overall metric to look at - while you might be missing only 10% of your lines that might account for 50% of your branches for instance.&lt;/p&gt; &#xA;&lt;h2&gt;Primary Coverage&lt;/h2&gt; &#xA;&lt;p&gt;By default, the primary coverage type is &lt;code&gt;line&lt;/code&gt;. To set the primary coverage to something else, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# or in configure SimpleCov.primary_coverage :branch&#xA;SimpleCov.start do&#xA;  enable_coverage :branch&#xA;  primary_coverage :branch&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Primary coverage determines what will come in first all output, and the type of coverage to check if you don&#39;t specify the type of coverage when customizing exit behavior (&lt;code&gt;SimpleCov.minimum_coverage 90&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note that coverage must first be enabled for non-default coverage types.&lt;/p&gt; &#xA;&lt;h2&gt;Filters&lt;/h2&gt; &#xA;&lt;p&gt;Filters can be used to remove selected files from your coverage data. By default, a filter is applied that removes all files OUTSIDE of your project&#39;s root directory - otherwise you&#39;d end up with billions of coverage reports for source files in the gems you are using.&lt;/p&gt; &#xA;&lt;p&gt;You can define your own to remove things like configuration files, tests or whatever you don&#39;t need in your coverage report.&lt;/p&gt; &#xA;&lt;h3&gt;Defining custom filters&lt;/h3&gt; &#xA;&lt;p&gt;You can currently define a filter using either a String or Regexp (that will then be Regexp-matched against each source file&#39;s path), a block or by passing in your own Filter class.&lt;/p&gt; &#xA;&lt;h4&gt;String filter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start do&#xA;  add_filter &#34;/test/&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This simple string filter will remove all files that match &#34;/test/&#34; in their path.&lt;/p&gt; &#xA;&lt;h4&gt;Regex filter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start do&#xA;  add_filter %r{^/test/}&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This simple regex filter will remove all files that start with /test/ in their path.&lt;/p&gt; &#xA;&lt;h4&gt;Block filter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start do&#xA;  add_filter do |source_file|&#xA;    source_file.lines.count &amp;lt; 5&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Block filters receive a SimpleCov::SourceFile instance and expect your block to return either true (if the file is to be removed from the result) or false (if the result should be kept). Please check out the RDoc for SimpleCov::SourceFile to learn about the methods available to you. In the above example, the filter will remove all files that have less than 5 lines of code.&lt;/p&gt; &#xA;&lt;h4&gt;Custom filter class&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class LineFilter &amp;lt; SimpleCov::Filter&#xA;  def matches?(source_file)&#xA;    source_file.lines.count &amp;lt; filter_argument&#xA;  end&#xA;end&#xA;&#xA;SimpleCov.add_filter LineFilter.new(5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Defining your own filters is pretty easy: Just inherit from SimpleCov::Filter and define a method &#39;matches?(source_file)&#39;. When running the filter, a true return value from this method will result in the removal of the given source_file. The filter_argument method is being set in the SimpleCov::Filter initialize method and thus is set to 5 in this example.&lt;/p&gt; &#xA;&lt;h4&gt;Array filter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start do&#xA;  proc = Proc.new { |source_file| false }&#xA;  add_filter [&#34;string&#34;, /regex/, proc, LineFilter.new(5)]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass in an array containing any of the other filter types.&lt;/p&gt; &#xA;&lt;h4&gt;Ignoring/skipping code&lt;/h4&gt; &#xA;&lt;p&gt;You can exclude code from the coverage report by wrapping it in &lt;code&gt;# :nocov:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# :nocov:&#xA;def skip_this_method&#xA;  never_reached&#xA;end&#xA;# :nocov:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The name of the token can be changed to your liking. &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/raw/main/features/config_nocov_token.feature&#34;&gt;Learn more about the nocov feature.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You shouldn&#39;t have to use the nocov token to skip private methods that are being included in your coverage. If you appropriately test the public interface of your classes and objects you should automatically get full coverage of your private methods.&lt;/p&gt; &#xA;&lt;h2&gt;Default root filter and coverage for things outside of it&lt;/h2&gt; &#xA;&lt;p&gt;By default, SimpleCov filters everything outside of the &lt;code&gt;SimpleCov.root&lt;/code&gt; directory. However, sometimes you may want to include coverage reports for things you include as a gem, for example a Rails Engine.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example by &lt;a href=&#34;https://github.com/lsaffie&#34;&gt;@lsaffie&lt;/a&gt; from &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/issues/221&#34;&gt;#221&lt;/a&gt; that shows how you can achieve just that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start :rails do&#xA;  filters.clear # This will remove the :root_filter and :bundler_filter that come via simplecov&#39;s defaults&#xA;  add_filter do |src|&#xA;    !(src.filename =~ /^#{SimpleCov.root}/) unless src.filename =~ /my_engine/&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Groups&lt;/h2&gt; &#xA;&lt;p&gt;You can separate your source files into groups. For example, in a Rails app, you&#39;ll want to have separate listings for Models, Controllers, Helpers, and Libs. Group definition works similarly to Filters (and also accepts custom filter classes), but source files end up in a group when the filter passes (returns true), as opposed to filtering results, which exclude files from results when the filter results in a true value.&lt;/p&gt; &#xA;&lt;p&gt;Add your groups with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start do&#xA;  add_group &#34;Models&#34;, &#34;app/models&#34;&#xA;  add_group &#34;Controllers&#34;, &#34;app/controllers&#34;&#xA;  add_group &#34;Long files&#34; do |src_file|&#xA;    src_file.lines.count &amp;gt; 100&#xA;  end&#xA;  add_group &#34;Multiple Files&#34;, [&#34;app/models&#34;, &#34;app/controllers&#34;] # You can also pass in an array&#xA;  add_group &#34;Short files&#34;, LineFilter.new(5) # Using the LineFilter class defined in Filters section above&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Merging results&lt;/h2&gt; &#xA;&lt;p&gt;You normally want to have your coverage analyzed across ALL of your test suites, right?&lt;/p&gt; &#xA;&lt;p&gt;Simplecov automatically caches coverage results in your (coverage_path)/.resultset.json, and will merge or override those with subsequent runs, depending on whether simplecov considers those subsequent runs as different test suites or as the same test suite as the cached results. To make this distinction, simplecov has the concept of &#34;test suite names&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Test suite names&lt;/h3&gt; &#xA;&lt;p&gt;SimpleCov tries to guess the name of the currently running test suite based upon the shell command the tests are running on. This should work fine for Unit Tests, RSpec, and Cucumber. If it fails, it will use the shell command that invoked the test suite as a command name.&lt;/p&gt; &#xA;&lt;p&gt;If you have some non-standard setup and still want nicely labeled test suites, you have to give Simplecov a cue as to what the name of the currently running test suite is. You can do so by specifying &lt;code&gt;SimpleCov.command_name&lt;/code&gt; in one test file that is part of your specific suite.&lt;/p&gt; &#xA;&lt;p&gt;To customize the suite names on a Rails app (yeah, sorry for being Rails-biased, but everyone knows what the structure of those projects is. You can apply this accordingly to the RSpecs in your Outlook-WebDAV-Calendar-Sync gem), you could do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# test/unit/some_test.rb&#xA;SimpleCov.command_name &#39;test:units&#39;&#xA;&#xA;# test/functionals/some_controller_test.rb&#xA;SimpleCov.command_name &#34;test:functionals&#34;&#xA;&#xA;# test/integration/some_integration_test.rb&#xA;SimpleCov.command_name &#34;test:integration&#34;&#xA;&#xA;# features/support/env.rb&#xA;SimpleCov.command_name &#34;features&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this only has to be invoked ONCE PER TEST SUITE, so even if you have 200 unit test files, specifying it in &lt;code&gt;some_test.rb&lt;/code&gt; is enough.&lt;/p&gt; &#xA;&lt;p&gt;Last but not least &lt;strong&gt;if multiple suites resolve to the same &lt;code&gt;command_name&lt;/code&gt;&lt;/strong&gt; be aware that the coverage results &lt;strong&gt;will clobber each other instead of being merged&lt;/strong&gt;. SimpleCov is smart enough to detect unique names for the most common setups, but if you have more than one test suite that doesn&#39;t follow a common pattern then you will want to manually ensure that each suite gets a unique &lt;code&gt;command_name&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are running tests in parallel each process has the potential to clobber results from the other test processes. If you are relying on the default &lt;code&gt;command_name&lt;/code&gt; then SimpleCov will attempt to detect and avoid parallel test suite &lt;code&gt;command_name&lt;/code&gt; collisions based on the presence of &lt;code&gt;ENV[&#39;PARALLEL_TEST_GROUPS&#39;]&lt;/code&gt; and &lt;code&gt;ENV[&#39;TEST_ENV_NUMBER&#39;]&lt;/code&gt;. If your parallel test runner does not set one or both of these then &lt;em&gt;you must&lt;/em&gt; set a &lt;code&gt;command_name&lt;/code&gt; and ensure that it is unique per process (eg. &lt;code&gt;command_name &#34;Unit Tests PID #{$$}&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you are using parallel_tests, you must incorporate &lt;code&gt;TEST_ENV_NUMBER&lt;/code&gt; into the command name yourself, in order for SimpleCov to merge the results correctly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/spec_helper.rb&#xA;SimpleCov.command_name &#34;features&#34; + (ENV[&#39;TEST_ENV_NUMBER&#39;] || &#39;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simplecov-ruby/simplecov-html&#34; title=&#34;SimpleCov HTML Formatter Source Code @ GitHub&#34;&gt;simplecov-html&lt;/a&gt; prints the used test suites in the footer of the generated coverage report.&lt;/p&gt; &#xA;&lt;h3&gt;Merging test runs under the same execution environment&lt;/h3&gt; &#xA;&lt;p&gt;Test results are automatically merged with previous runs in the same execution environment when generating the result, so when coverage is set up properly for Cucumber and your unit / functional / integration tests, all of those test suites will be taken into account when building the coverage report.&lt;/p&gt; &#xA;&lt;h4&gt;Timeout for merge&lt;/h4&gt; &#xA;&lt;p&gt;Of course, your cached coverage data is likely to become invalid at some point. Thus, when automatically merging subsequent test runs, result sets that are older than &lt;code&gt;SimpleCov.merge_timeout&lt;/code&gt; will not be used any more. By default, the timeout is 600 seconds (10 minutes), and you can raise (or lower) it by specifying &lt;code&gt;SimpleCov.merge_timeout 3600&lt;/code&gt; (1 hour), or, inside a configure/start block, with just &lt;code&gt;merge_timeout 3600&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can deactivate this automatic merging altogether with &lt;code&gt;SimpleCov.use_merging false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Merging test runs under different execution environments&lt;/h3&gt; &#xA;&lt;p&gt;If your tests are done in parallel across multiple build machines, you can fetch them all and merge them into a single result set using the &lt;code&gt;SimpleCov.collate&lt;/code&gt; method. This can be added to a Rakefile or script file, having downloaded a set of &lt;code&gt;.resultset.json&lt;/code&gt; files from each parallel test run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/tasks/coverage_report.rake&#xA;namespace :coverage do&#xA;  desc &#34;Collates all result sets generated by the different test runners&#34;&#xA;  task :report do&#xA;    require &#39;simplecov&#39;&#xA;&#xA;    SimpleCov.collate Dir[&#34;simplecov-resultset-*/.resultset.json&#34;]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;SimpleCov.collate&lt;/code&gt; also takes an optional simplecov profile and an optional block for configuration, just the same as &lt;code&gt;SimpleCov.start&lt;/code&gt; or &lt;code&gt;SimpleCov.configure&lt;/code&gt;. This means you can configure a separate formatter for the collated output. For instance, you can make the formatter in &lt;code&gt;SimpleCov.start&lt;/code&gt; the &lt;code&gt;SimpleCov::Formatter::SimpleFormatter&lt;/code&gt;, and only use more complex formatters in the final &lt;code&gt;SimpleCov.collate&lt;/code&gt; run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/spec_helper.rb&#xA;require &#39;simplecov&#39;&#xA;&#xA;SimpleCov.start &#39;rails&#39; do&#xA;  # Disambiguates individual test runs&#xA;  command_name &#34;Job #{ENV[&#34;TEST_ENV_NUMBER&#34;]}&#34; if ENV[&#34;TEST_ENV_NUMBER&#34;]&#xA;&#xA;  if ENV[&#39;CI&#39;]&#xA;    formatter SimpleCov::Formatter::SimpleFormatter&#xA;  else&#xA;    formatter SimpleCov::Formatter::MultiFormatter.new([&#xA;      SimpleCov::Formatter::SimpleFormatter,&#xA;      SimpleCov::Formatter::HTMLFormatter&#xA;    ])&#xA;  end&#xA;&#xA;  track_files &#34;**/*.rb&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/tasks/coverage_report.rake&#xA;namespace :coverage do&#xA;  task :report do&#xA;    require &#39;simplecov&#39;&#xA;&#xA;    SimpleCov.collate Dir[&#34;simplecov-resultset-*/.resultset.json&#34;], &#39;rails&#39; do&#xA;      formatter SimpleCov::Formatter::MultiFormatter.new([&#xA;        SimpleCov::Formatter::SimpleFormatter,&#xA;        SimpleCov::Formatter::HTMLFormatter&#xA;      ])&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running simplecov against subprocesses&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SimpleCov.enable_for_subprocesses&lt;/code&gt; will allow SimpleCov to observe subprocesses starting using &lt;code&gt;Process.fork&lt;/code&gt;. This modifies ruby&#39;s core Process.fork method so that SimpleCov can see into it, appending &lt;code&gt;&#34; (subprocess #{pid})&#34;&lt;/code&gt; to the &lt;code&gt;SimpleCov.command_name&lt;/code&gt;, with results that can be merged together using SimpleCov&#39;s merging feature.&lt;/p&gt; &#xA;&lt;p&gt;To configure this, use &lt;code&gt;.at_fork&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.enable_for_subprocesses true&#xA;SimpleCov.at_fork do |pid|&#xA;  # This needs a unique name so it won&#39;t be ovewritten&#xA;  SimpleCov.command_name &#34;#{SimpleCov.command_name} (subprocess: #{pid})&#34;&#xA;  # be quiet, the parent process will be in charge of output and checking coverage totals&#xA;  SimpleCov.print_error_status = false&#xA;  SimpleCov.formatter SimpleCov::Formatter::SimpleFormatter&#xA;  SimpleCov.minimum_coverage 0&#xA;  # start&#xA;  SimpleCov.start&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: SimpleCov must have already been started before &lt;code&gt;Process.fork&lt;/code&gt; was called.&lt;/p&gt; &#xA;&lt;h3&gt;Running simplecov against spawned subprocesses&lt;/h3&gt; &#xA;&lt;p&gt;Perhaps you&#39;re testing a ruby script with &lt;code&gt;PTY.spawn&lt;/code&gt; or &lt;code&gt;Open3.popen&lt;/code&gt;, or &lt;code&gt;Process.spawn&lt;/code&gt; or etc. SimpleCov can cover this too.&lt;/p&gt; &#xA;&lt;p&gt;Add a .simplecov_spawn.rb file to your project root&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# .simplecov_spawn.rb&#xA;require &#39;simplecov&#39; # this will also pick up whatever config is in .simplecov&#xA;                    # so ensure it just contains configuration, and doesn&#39;t call SimpleCov.start.&#xA;SimpleCov.command_name &#39;spawn&#39; # As this is not for a test runner directly, script doesn&#39;t have a pre-defined base command_name&#xA;SimpleCov.at_fork.call(Process.pid) # Use the per-process setup described previously&#xA;SimpleCov.start # only now can we start.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, instead of calling your script directly, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PTY.spawn(&#39;my_script.rb&#39;) do # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use bin/ruby to require the new .simplecov_spawn file, then your script&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PTY.spawn(&#39;ruby -r./.simplecov_spawn my_script.rb&#39;) do # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running coverage only on demand&lt;/h2&gt; &#xA;&lt;p&gt;The Ruby STDLIB Coverage library that SimpleCov builds upon is &lt;em&gt;very&lt;/em&gt; fast (on a ~10 min Rails test suite, the speed drop was only a couple seconds for me), and therefore it&#39;s SimpleCov&#39;s policy to just generate coverage every time you run your tests because it doesn&#39;t do your test speed any harm and you&#39;re always equipped with the latest and greatest coverage results.&lt;/p&gt; &#xA;&lt;p&gt;Because of this, SimpleCov has no explicit built-in mechanism to run coverage only on demand.&lt;/p&gt; &#xA;&lt;p&gt;However, you can still accomplish this very easily by introducing an ENV variable conditional into your SimpleCov setup block, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start if ENV[&#34;COVERAGE&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, SimpleCov will only run if you execute your tests like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;COVERAGE=true rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Errors and exit statuses&lt;/h2&gt; &#xA;&lt;p&gt;To aid in debugging issues, if an error is raised, SimpleCov will print a message to &lt;code&gt;STDERR&lt;/code&gt; with the exit status of the error, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SimpleCov failed with exit 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &lt;code&gt;STDERR&lt;/code&gt; message can be disabled with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SimpleCov.print_error_status = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profiles&lt;/h2&gt; &#xA;&lt;p&gt;By default, SimpleCov&#39;s only config assumption is that you only want coverage reports for files inside your project root. To save yourself from repetitive configuration, you can use predefined blocks of configuration, called &#39;profiles&#39;, or define your own.&lt;/p&gt; &#xA;&lt;p&gt;You can then pass the name of the profile to be used as the first argument to SimpleCov.start. For example, simplecov comes bundled with a &#39;rails&#39; profile. It looks somewhat like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.profiles.define &#39;rails&#39; do&#xA;  add_filter &#39;/test/&#39;&#xA;  add_filter &#39;/config/&#39;&#xA;&#xA;  add_group &#39;Controllers&#39;, &#39;app/controllers&#39;&#xA;  add_group &#39;Models&#39;, &#39;app/models&#39;&#xA;  add_group &#39;Helpers&#39;, &#39;app/helpers&#39;&#xA;  add_group &#39;Libraries&#39;, &#39;lib&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, it&#39;s just a SimpleCov.configure block. In your test_helper.rb, launch SimpleCov with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start &#39;rails&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.start &#39;rails&#39; do&#xA;  # additional config here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom profiles&lt;/h3&gt; &#xA;&lt;p&gt;You can load additional profiles with the SimpleCov.load_profile(&#39;xyz&#39;) method. This allows you to build upon an existing profile and customize it so you can reuse it in unit tests and Cucumber features. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/simplecov_custom_profile.rb&#xA;require &#39;simplecov&#39;&#xA;SimpleCov.profiles.define &#39;myprofile&#39; do&#xA;  load_profile &#39;rails&#39;&#xA;  add_filter &#39;vendor&#39; # Don&#39;t include vendored stuff&#xA;end&#xA;&#xA;# features/support/env.rb&#xA;require &#39;simplecov_custom_profile&#39;&#xA;SimpleCov.start &#39;myprofile&#39;&#xA;&#xA;# test/test_helper.rb&#xA;require &#39;simplecov_custom_profile&#39;&#xA;SimpleCov.start &#39;myprofile&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customizing exit behaviour&lt;/h2&gt; &#xA;&lt;p&gt;You can define what SimpleCov should do when your test suite finishes by customizing the at_exit hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.at_exit do&#xA;  SimpleCov.result.format!&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above is the default behaviour. Do whatever you like instead!&lt;/p&gt; &#xA;&lt;h3&gt;Minimum coverage&lt;/h3&gt; &#xA;&lt;p&gt;You can define the minimum coverage percentage expected. SimpleCov will return non-zero if unmet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.minimum_coverage 90&#xA;# same as above (the default is to check line coverage)&#xA;SimpleCov.minimum_coverage line: 90&#xA;# check for a minimum line coverage of 90% and minimum 80% branch coverage&#xA;SimpleCov.minimum_coverage line: 90, branch: 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minimum coverage by file&lt;/h3&gt; &#xA;&lt;p&gt;You can define the minimum coverage by file percentage expected. SimpleCov will return non-zero if unmet. This is useful to help ensure coverage is relatively consistent, rather than being skewed by particularly good or bad areas of the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.minimum_coverage_by_file 80&#xA;# same as above (the default is to check line coverage by file)&#xA;SimpleCov.minimum_coverage_by_file line: 80&#xA;# check for a minimum line coverage by file of 90% and minimum 80% branch coverage&#xA;SimpleCov.minimum_coverage_by_file line: 90, branch: 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maximum coverage drop&lt;/h3&gt; &#xA;&lt;p&gt;You can define the maximum coverage drop percentage at once. SimpleCov will return non-zero if exceeded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.maximum_coverage_drop 5&#xA;# same as above (the default is to check line drop)&#xA;SimpleCov.maximum_coverage_drop line: 5&#xA;# check for a maximum line drop of 5% and maximum 10% branch drop&#xA;SimpleCov.maximum_coverage_drop line: 5, branch: 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Refuse dropping coverage&lt;/h3&gt; &#xA;&lt;p&gt;You can also entirely refuse dropping coverage between test runs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.refuse_coverage_drop&#xA;# same as above (the default is to only refuse line drop)&#xA;SimpleCov.refuse_coverage_drop :line&#xA;# refuse drop for line and branch&#xA;SimpleCov.refuse_coverage_drop :line, :branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using your own formatter&lt;/h2&gt; &#xA;&lt;p&gt;You can use your own formatter with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleCov.formatter = SimpleCov::Formatter::HTMLFormatter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;SimpleCov.result.format!&lt;/code&gt; will be invoked with &lt;code&gt;SimpleCov::Formatter::YourFormatter.new.format(result)&lt;/code&gt;, and &lt;code&gt;result&lt;/code&gt; is an instance of &lt;code&gt;SimpleCov::Result&lt;/code&gt;. Do whatever your wish with that!&lt;/p&gt; &#xA;&lt;h2&gt;Using multiple formatters&lt;/h2&gt; &#xA;&lt;p&gt;As of SimpleCov 0.9, you can specify multiple result formats. Formatters besides the default HTML formatter require separate gems, however.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;simplecov-html&#34;&#xA;&#xA;SimpleCov.formatters = SimpleCov::Formatter::MultiFormatter.new([&#xA;  SimpleCov::Formatter::HTMLFormatter,&#xA;  SimpleCov::Formatter::CSVFormatter,&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JSON formatter&lt;/h2&gt; &#xA;&lt;p&gt;SimpleCov is packaged with a separate gem called &lt;a href=&#34;https://github.com/codeclimate-community/simplecov_json_formatter&#34;&gt;simplecov_json_formatter&lt;/a&gt; that provides you with a JSON formatter, this formatter could be useful for different use cases, such as for CI consumption or for reporting to external services.&lt;/p&gt; &#xA;&lt;p&gt;In order to use it you will need to manually load the installed gem like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;simplecov_json_formatter&#34;&#xA;SimpleCov.formatter = SimpleCov::Formatter::JSONFormatter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; In case you plan to report your coverage results to CodeClimate services, know that SimpleCov will automatically use the JSON formatter along with the HTML formatter when the &lt;code&gt;CC_TEST_REPORTER_ID&lt;/code&gt; variable is present in the environment.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Available formatters, editor integrations and hosted services&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplecov-ruby/simplecov/main/doc/alternate-formatters.md&#34;&gt;Open Source formatter and integration plugins for SimpleCov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplecov-ruby/simplecov/main/doc/editor-integration.md&#34;&gt;Editor Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplecov-ruby/simplecov/main/doc/commercial-services.md&#34;&gt;Hosted (commercial) services&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ruby version compatibility&lt;/h2&gt; &#xA;&lt;p&gt;SimpleCov is built in &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/actions?query=workflow%3Astable&#34; title=&#34;SimpleCov is built around the clock by github.com&#34;&gt;Continuous Integration&lt;/a&gt; on Ruby 2.5+ as well as JRuby 9.2+.&lt;/p&gt; &#xA;&lt;p&gt;Note for JRuby =&amp;gt; You need to pass JRUBY_OPTS=&#34;--debug&#34; or create .jrubyrc and add debug.fullTrace=true&lt;/p&gt; &#xA;&lt;h2&gt;Want to find dead code in production?&lt;/h2&gt; &#xA;&lt;p&gt;Try &lt;a href=&#34;https://github.com/danmayer/coverband&#34;&gt;Coverband&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Want to use Spring with SimpleCov?&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://github.com/rails/spring&#34;&gt;Spring&lt;/a&gt; to speed up test suite runs and want to run SimpleCov along with them, you&#39;ll find that it often misreports coverage with the default config due to some sort of eager loading issue. Don&#39;t despair!&lt;/p&gt; &#xA;&lt;p&gt;One solution is to &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/issues/381#issuecomment-347651728&#34;&gt;explicitly call eager load&lt;/a&gt; in your &lt;code&gt;test_helper.rb&lt;/code&gt; / &lt;code&gt;spec_helper.rb&lt;/code&gt; after calling &lt;code&gt;SimpleCov.start&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;simplecov&#39;&#xA;SimpleCov.start &#39;rails&#39;&#xA;Rails.application.eager_load!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you could disable Spring while running SimpleCov:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DISABLE_SPRING=1 rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you could remove &lt;code&gt;gem &#39;spring&#39;&lt;/code&gt; from your &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;most common problem is that simplecov isn&#39;t required and started before everything else&lt;/strong&gt;. In order to track coverage for your whole application &lt;strong&gt;simplecov needs to be the first one&lt;/strong&gt; so that it (and the underlying coverage library) can subsequently track loaded files and their usage.&lt;/p&gt; &#xA;&lt;p&gt;If you are missing coverage for some code a simple trick is to put a puts statement in there and right after &lt;code&gt;SimpleCov.start&lt;/code&gt; so you can see if the file really was loaded after simplecov was started.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# my_code.rb&#xA;class MyCode&#xA;&#xA;  puts &#34;MyCode is being loaded!&#34;&#xA;&#xA;  def my_method&#xA;    # ...&#xA;  end&#xA;end&#xA;&#xA;# spec_helper.rb/rails_helper.rb/test_helper.rb/.simplecov whatever&#xA;&#xA;SimpleCov.start&#xA;puts &#34;SimpleCov started successfully!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now when you run your test suite and you see:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SimpleCov started successfully!&#xA;MyCode is being loaded!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then it&#39;s good otherwise you likely have a problem :)&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone participating in this project&#39;s development, issue trackers and other channels is expected to follow our &lt;a href=&#34;https://raw.githubusercontent.com/simplecov-ruby/simplecov/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Kudos&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to Aaron Patterson for the original idea for this!&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2010-2017 Christoph Olszowka. See MIT-LICENSE for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mperham/sidekiq</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/mperham/sidekiq</id>
    <link href="https://github.com/mperham/sidekiq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, efficient background processing for Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sidekiq&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/sidekiq&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/sidekiq.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/mperham/sidekiq/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple, efficient background processing for Ruby.&lt;/p&gt; &#xA;&lt;p&gt;Sidekiq uses threads to handle many jobs at the same time in the same process. It does not require Rails but will integrate tightly with Rails to make background processing dead simple.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Latency&lt;/th&gt; &#xA;   &lt;th&gt;Garbage created for 10k jobs&lt;/th&gt; &#xA;   &lt;th&gt;Time to process 100k jobs&lt;/th&gt; &#xA;   &lt;th&gt;Throughput&lt;/th&gt; &#xA;   &lt;th&gt;Ruby&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 6.0.2&lt;/td&gt; &#xA;   &lt;td&gt;3 ms&lt;/td&gt; &#xA;   &lt;td&gt;156 MB&lt;/td&gt; &#xA;   &lt;td&gt;14.0 sec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;7100 jobs/sec&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MRI 2.6.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 6.0.0&lt;/td&gt; &#xA;   &lt;td&gt;3 ms&lt;/td&gt; &#xA;   &lt;td&gt;156 MB&lt;/td&gt; &#xA;   &lt;td&gt;19 sec&lt;/td&gt; &#xA;   &lt;td&gt;5200 jobs/sec&lt;/td&gt; &#xA;   &lt;td&gt;MRI 2.6.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 4.0.0&lt;/td&gt; &#xA;   &lt;td&gt;10 ms&lt;/td&gt; &#xA;   &lt;td&gt;151 MB&lt;/td&gt; &#xA;   &lt;td&gt;22 sec&lt;/td&gt; &#xA;   &lt;td&gt;4500 jobs/sec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 3.5.1&lt;/td&gt; &#xA;   &lt;td&gt;22 ms&lt;/td&gt; &#xA;   &lt;td&gt;1257 MB&lt;/td&gt; &#xA;   &lt;td&gt;125 sec&lt;/td&gt; &#xA;   &lt;td&gt;800 jobs/sec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Resque 1.25.2&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;420 sec&lt;/td&gt; &#xA;   &lt;td&gt;240 jobs/sec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DelayedJob 4.1.1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;465 sec&lt;/td&gt; &#xA;   &lt;td&gt;215 jobs/sec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This benchmark can be found in &lt;code&gt;bin/sidekiqload&lt;/code&gt; and assumes a Redis network latency of 1ms.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis: 4.0+&lt;/li&gt; &#xA; &lt;li&gt;Ruby: MRI 2.5+ or JRuby 9.2+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sidekiq 6.0 supports Rails 5.0+ but does not require it.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle add sidekiq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Getting-Started&#34;&gt;Getting Started wiki page&lt;/a&gt; and follow the simple setup process. You can watch &lt;a href=&#34;https://www.youtube.com/playlist?list=PLjeHh2LSCFrWGT5uVjUuFKAcrcj5kSai1&#34;&gt;this YouTube playlist&lt;/a&gt; to learn all about Sidekiq and see its features in action. Here&#39;s the Web UI:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mperham/sidekiq/raw/main/examples/web-ui.png&#34; alt=&#34;Web UI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Want to Upgrade?&lt;/h2&gt; &#xA;&lt;p&gt;I also sell Sidekiq Pro and Sidekiq Enterprise, extensions to Sidekiq which provide more features, a commercial-friendly license and allow you to support high quality open source development all at the same time. Please see the &lt;a href=&#34;https://sidekiq.org/&#34;&gt;Sidekiq&lt;/a&gt; homepage for more detail.&lt;/p&gt; &#xA;&lt;p&gt;Subscribe to the &lt;strong&gt;&lt;a href=&#34;https://tinyletter.com/sidekiq&#34;&gt;quarterly newsletter&lt;/a&gt;&lt;/strong&gt; to stay informed about the latest features and changes to Sidekiq and its bigger siblings.&lt;/p&gt; &#xA;&lt;h2&gt;Problems?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please do not directly email any Sidekiq committers with questions or problems.&lt;/strong&gt; A community is best served when discussions are held in public.&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem, please review the &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt; and &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Problems-and-Troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; wiki pages. Searching the &lt;a href=&#34;https://github.com/mperham/sidekiq/issues&#34;&gt;issues&lt;/a&gt; for your problem is also a good idea.&lt;/p&gt; &#xA;&lt;p&gt;Sidekiq Pro and Sidekiq Enterprise customers get private email support. You can purchase at &lt;a href=&#34;https://sidekiq.org&#34;&gt;https://sidekiq.org&lt;/a&gt;; email &lt;a href=&#34;mailto:support@contribsys.com&#34;&gt;support@contribsys.com&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;p&gt;Useful resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Product documentation is in the &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Occasional announcements are made to the &lt;a href=&#34;https://twitter.com/sidekiq&#34;&gt;@sidekiq&lt;/a&gt; Twitter account.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sidekiq&#34;&gt;Sidekiq tag&lt;/a&gt; on Stack Overflow has lots of useful Q &amp;amp; A.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every Friday morning is Sidekiq happy hour: I video chat and answer questions. See the &lt;a href=&#34;https://sidekiq.org/support.html&#34;&gt;Sidekiq support page&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/mperham/sidekiq/raw/main/.github/contributing.md&#34;&gt;the contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/mperham/sidekiq/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for licensing details.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Mike Perham, &lt;a href=&#34;https://twitter.com/getajobmike&#34;&gt;@getajobmike&lt;/a&gt; / &lt;a href=&#34;https://twitter.com/sidekiq&#34;&gt;@sidekiq&lt;/a&gt;, &lt;a href=&#34;https://www.mikeperham.com&#34;&gt;https://www.mikeperham.com&lt;/a&gt; / &lt;a href=&#34;https://www.contribsys.com&#34;&gt;https://www.contribsys.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chatwoot/chatwoot</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/chatwoot/chatwoot</id>
    <link href="https://github.com/chatwoot/chatwoot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source customer engagement suite, an alternative to Intercom, Zendesk, Salesforce Service Cloud etc. üî•üí¨&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://s3.us-west-2.amazonaws.com/gh-assets.chatwoot.com/brand.svg?sanitize=true&#34; alt=&#34;Woot-logo&#34; width=&#34;240&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;Customer engagement suite, an open-source alternative to Intercom, Zendesk, Salesforce Service Cloud etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&#34; alt=&#34;Deploy to Heroku&#34;&gt; &lt;img width=&#34;150&#34; alt=&#34;Deploy&#34; src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt; &lt;img width=&#34;200&#34; alt=&#34;Deploy to DO&#34; src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://codeclimate.com/github/chatwoot/chatwoot/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/80f9e1a7c72d186289ad/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/circleci/build/github/chatwoot/chatwoot&#34; alt=&#34;CircleCI Badge&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/chatwoot/chatwoot/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/chatwoot/chatwoot&#34; alt=&#34;Docker Pull Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/chatwoot/chatwoot/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/chatwoot/chatwoot&#34; alt=&#34;Docker Build Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/chatwoot/chatwoot&#34; alt=&#34;Commits-per-month&#34;&gt; &lt;a title=&#34;Crowdin&#34; target=&#34;_self&#34; href=&#34;https://chatwoot.crowdin.com/chatwoot&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/e/37ced7eba411064bd792feb3b7a28b16/localized.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/cJXdrwS&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/647412545203994635&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huntr.dev/bounties/disclose&#34;&gt;&lt;img src=&#34;https://cdn.huntr.dev/huntr_security_badge_mono.svg?sanitize=true&#34; alt=&#34;Huntr&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://status.chatwoot.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fuptime.json&#34; alt=&#34;uptime&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://status.chatwoot.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fresponse-time.json&#34; alt=&#34;response time&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;img src=&#34;https://chatwoot-public-assets.s3.amazonaws.com/github/screenshot.png&#34; width=&#34;100%&#34; alt=&#34;Chat dashboard&#34;&gt; &#xA;&lt;p&gt;Chatwoot is an open-source, self-hosted customer engagement suite. Chatwoot lets you view and manage your customer data, communicate with them irrespective of which medium they use, and re-engage them based on their profile.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Chatwoot supports the following conversation channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: Talk to your customers using our live chat widget and make use of our SDK to identify a user and provide contextual support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Facebook&lt;/strong&gt;: Connect your Facebook pages and start replying to the direct messages to your page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instagram&lt;/strong&gt;: Connect your Instagram profile and start replying to the direct messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: Connect your Twitter profiles and reply to direct messages or the tweets where you are mentioned.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Telegram&lt;/strong&gt;: Connect your Telegram bot and reply to your customers right from a single dashboard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WhatsApp&lt;/strong&gt;: Connect your WhatsApp business account and manage the conversation in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Line&lt;/strong&gt;: Connect your Line account and manage the conversations in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SMS&lt;/strong&gt;: Connect your Twilio SMS account and reply to the SMS queries in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Channel&lt;/strong&gt;: Build custom communication channels using our API channel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt;: Forward all your email queries to Chatwoot and view it in our integrated dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And more.&lt;/p&gt; &#xA;&lt;p&gt;Other features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CRM&lt;/strong&gt;: Save all your customer information right inside Chatwoot, use contact notes to log emails, phone calls, or meeting notes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom Attributes&lt;/strong&gt;: Define custom attribute attributes to store information about a contact or a conversation and extend the product to match your workflow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shared multi-brand inboxes&lt;/strong&gt;: Manage multiple brands or pages using a shared inbox.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Private notes&lt;/strong&gt;: Use @mentions and private notes to communicate internally about a conversation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Canned responses (Saved replies)&lt;/strong&gt;: Improve the response rate by adding saved replies for frequently asked questions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversation Labels&lt;/strong&gt;: Use conversation labels to create custom workflows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto assignment&lt;/strong&gt;: Chatwoot intelligently assigns a ticket to the agents who have access to the inbox depending on their availability and load.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversation continuity&lt;/strong&gt;: If the user has provided an email address through the chat widget, Chatwoot will send an email to the customer under the agent name so that the user can continue the conversation over the email.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-lingual support&lt;/strong&gt;: Chatwoot supports 10+ languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful API &amp;amp; Webhooks&lt;/strong&gt;: Extend the capability of the software using Chatwoot‚Äôs webhooks and APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt;: Chatwoot natively integrates with Slack right now. Manage your conversations in Slack without logging into the dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation is available at &lt;a href=&#34;https://www.chatwoot.com/help-center&#34;&gt;chatwoot.com/help-center&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translation process&lt;/h2&gt; &#xA;&lt;p&gt;The translation process for Chatwoot web and mobile app is managed at &lt;a href=&#34;https://translate.chatwoot.com&#34;&gt;https://translate.chatwoot.com&lt;/a&gt; using Crowdin. Please read the &lt;a href=&#34;https://www.chatwoot.com/docs/contributing/translating-chatwoot-to-your-language&#34;&gt;translation guide&lt;/a&gt; for contributing to Chatwoot.&lt;/p&gt; &#xA;&lt;h2&gt;Branching model&lt;/h2&gt; &#xA;&lt;p&gt;We use the &lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;git-flow&lt;/a&gt; branching model. The base branch is &lt;code&gt;develop&lt;/code&gt;. If you are looking for a stable version, please use the &lt;code&gt;master&lt;/code&gt; or tags labelled as &lt;code&gt;v1.x.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;h3&gt;Heroku one-click deploy&lt;/h3&gt; &#xA;&lt;p&gt;Deploying Chatwoot to Heroku is a breeze. It&#39;s as simple as clicking this button:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow this &lt;a href=&#34;https://www.chatwoot.com/docs/environment-variables&#34;&gt;link&lt;/a&gt; to understand setting the correct environment variables for the app to work with all the features. There might be breakages if you do not set the relevant environment variables.&lt;/p&gt; &#xA;&lt;h3&gt;DigitalOcean 1-Click Kubernetes deployment&lt;/h3&gt; &#xA;&lt;p&gt;Chatwoot now supports 1-Click deployment to DigitalOcean as a kubernetes app.&lt;/p&gt; &#xA;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt; &lt;img width=&#34;200&#34; alt=&#34;Deploy to DO&#34; src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Other deployment options&lt;/h3&gt; &#xA;&lt;p&gt;For other supported options, checkout our &lt;a href=&#34;https://chatwoot.com/deploy&#34;&gt;deployment page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Looking to report a vulnerability? Please refer our &lt;a href=&#34;https://raw.githubusercontent.com/chatwoot/chatwoot/develop/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Community? Questions? Support ?&lt;/h2&gt; &#xA;&lt;p&gt;If you need help or just want to hang out, come, say hi on our &lt;a href=&#34;https://discord.gg/cJXdrwS&#34;&gt;Discord&lt;/a&gt; server.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ‚ú®&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to all these &lt;a href=&#34;https://www.chatwoot.com/docs/contributors&#34;&gt;wonderful people&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chatwoot/chatwoot/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/chatwoot/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Chatwoot&lt;/em&gt; ¬© 2017-2022, Chatwoot Inc - Released under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>heartcombo/simple_form</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/heartcombo/simple_form</id>
    <link href="https://github.com/heartcombo/simple_form" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Forms made easy for Rails! It&#39;s tied to a simple DSL, with no opinion on markup.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/heartcombo/simple_form/master/simple_form.png&#34; alt=&#34;Simple Form Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rails forms made easy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; aims to be as flexible as possible while helping you with powerful components to create your forms. The basic goal of &lt;strong&gt;Simple Form&lt;/strong&gt; is to not touch your way of defining the layout, letting you find the better design for your eyes. Most of the DSL was inherited from Formtastic, which we are thankful for and should make you feel right at home.&lt;/p&gt; &#xA;&lt;p&gt;INFO: This README refers to &lt;strong&gt;Simple Form&lt;/strong&gt; 5.0. For older releases, check the related branch for your version.&lt;/p&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#bootstrap-5&#34;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#zurb-foundation-5&#34;&gt;Zurb Foundation 5&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#country-select&#34;&gt;Country Select&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#stripping-away-all-wrapper-divs&#34;&gt;Stripping away all wrapper divs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#collections&#34;&gt;Collections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#priority&#34;&gt;Priority&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#associations&#34;&gt;Associations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#buttons&#34;&gt;Buttons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#wrapping-rails-form-helpers&#34;&gt;Wrapping Rails Form Helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#extra-helpers&#34;&gt;Extra helpers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#simple-fields-for&#34;&gt;Simple Fields For&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#collection-radio-buttons&#34;&gt;Collection Radio Buttons&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#collection-check-boxes&#34;&gt;Collection Check Boxes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#available-input-types-and-defaults-for-each-column-type&#34;&gt;Available input types and defaults for each column type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#custom-inputs&#34;&gt;Custom inputs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#custom-form-builder&#34;&gt;Custom form builder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#i18n&#34;&gt;I18n&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#the-wrappers-api&#34;&gt;The wrappers API&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#custom-components&#34;&gt;Custom Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#html-5-notice&#34;&gt;HTML 5 Notice&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#using-non-active-record-objects&#34;&gt;Using non Active Record objects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#information&#34;&gt;Information&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#rdocs&#34;&gt;RDocs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#supported-ruby--rails-versions&#34;&gt;Supported Ruby / Rails versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#bug-reports&#34;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;simple_form&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following command to install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;rails generate simple_form:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bootstrap 5&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; can be easily integrated with &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap 5&lt;/a&gt;. Use the &lt;code&gt;bootstrap&lt;/code&gt; option in the install generator, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;rails generate simple_form:install --bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add an initializer that configures &lt;strong&gt;Simple Form&lt;/strong&gt; wrappers for Bootstrap 5&#39;s &lt;a href=&#34;https://getbootstrap.com/docs/5.0/forms/overview/&#34;&gt;form controls&lt;/a&gt;. You have to be sure that you added a copy of the &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; assets on your application.&lt;/p&gt; &#xA;&lt;p&gt;For more information see the generator output, our &lt;a href=&#34;https://github.com/heartcombo/simple_form-bootstrap&#34;&gt;example application code&lt;/a&gt; and &lt;a href=&#34;https://simple-form-bootstrap.herokuapp.com/&#34;&gt;the live example app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Zurb Foundation 5&lt;/h3&gt; &#xA;&lt;p&gt;To generate wrappers that are compatible with &lt;a href=&#34;http://foundation.zurb.com/&#34;&gt;Zurb Foundation 5&lt;/a&gt;, pass the &lt;code&gt;foundation&lt;/code&gt; option to the generator, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;rails generate simple_form:install --foundation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the Foundation wrapper does not support the &lt;code&gt;:hint&lt;/code&gt; option by default. In order to enable hints, please uncomment the appropriate line in &lt;code&gt;config/initializers/simple_form_foundation.rb&lt;/code&gt;. You will need to provide your own CSS styles for hints.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;http://foundation.zurb.com/docs/applications.html&#34;&gt;instructions on how to install Foundation in a Rails app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Country Select&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the country select, you will need the &lt;a href=&#34;https://rubygems.org/gems/country_select&#34;&gt;country_select gem&lt;/a&gt;, add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;country_select&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use the gem you can easily override this behaviour by mapping the country inputs to something else, with a line like this in your &lt;code&gt;simple_form.rb&lt;/code&gt; initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.input_mappings = { /country/ =&amp;gt; :string }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; was designed to be customized as you need to. Basically it&#39;s a stack of components that are invoked to create a complete html input for you, which by default contains label, hints, errors and the input itself. It does not aim to create a lot of different logic from the default Rails form helpers, as they do a great job by themselves. Instead, &lt;strong&gt;Simple Form&lt;/strong&gt; acts as a DSL and just maps your input type (retrieved from the column definition in the database) to a specific helper method.&lt;/p&gt; &#xA;&lt;p&gt;To start using &lt;strong&gt;Simple Form&lt;/strong&gt; you just have to use the helper it provides:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username %&amp;gt;&#xA;  &amp;lt;%= f.input :password %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate an entire form with labels for user name and password as well, and render errors by default when you render the form with invalid data (after submitting for example).&lt;/p&gt; &#xA;&lt;p&gt;You can overwrite the default label by passing it to the input method. You can also add a hint, an error, or even a placeholder. For boolean inputs, you can add an inline label as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, label: &#39;Your username please&#39;, error: &#39;Username is mandatory, please specify one&#39; %&amp;gt;&#xA;  &amp;lt;%= f.input :password, hint: &#39;No special characters.&#39; %&amp;gt;&#xA;  &amp;lt;%= f.input :email, placeholder: &#39;user@domain.com&#39; %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, inline_label: &#39;Yes, remember me&#39; %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In some cases you may want to disable labels, hints or errors. Or you may want to configure the html of any of them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, label_html: { class: &#39;my_class&#39; }, hint_html: { class: &#39;hint_class&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, hint: false, error_html: { id: &#39;password_error&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password_confirmation, label: false %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to pass any html attribute straight to the input, by using the &lt;code&gt;:input_html&lt;/code&gt; option, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, input_html: { class: &#39;special&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, input_html: { maxlength: 20 } %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, input_html: { value: &#39;1&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to pass the same options to all inputs in the form (for example, a default class), you can use the &lt;code&gt;:defaults&lt;/code&gt; option in &lt;code&gt;simple_form_for&lt;/code&gt;. Specific options in &lt;code&gt;input&lt;/code&gt; call will overwrite the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user, defaults: { input_html: { class: &#39;default_class&#39; } } do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, input_html: { class: &#39;special&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, input_html: { maxlength: 20 } %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, input_html: { value: &#39;1&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;strong&gt;Simple Form&lt;/strong&gt; generates a wrapper div around your label and input by default, you can pass any html attribute to that wrapper as well using the &lt;code&gt;:wrapper_html&lt;/code&gt; option, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, wrapper_html: { class: &#39;username&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, wrapper_html: { id: &#39;password&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, wrapper_html: { class: &#39;options&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Required fields are marked with an * prepended to their labels.&lt;/p&gt; &#xA;&lt;p&gt;By default all inputs are required. When the form object includes &lt;code&gt;ActiveModel::Validations&lt;/code&gt; (which, for example, happens with Active Record models), fields are required only when there is &lt;code&gt;presence&lt;/code&gt; validation. Otherwise, &lt;strong&gt;Simple Form&lt;/strong&gt; will mark fields as optional. For performance reasons, this detection is skipped on validations that make use of conditional options, such as &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And of course, the &lt;code&gt;required&lt;/code&gt; property of any input can be overwritten as needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name, required: false %&amp;gt;&#xA;  &amp;lt;%= f.input :username %&amp;gt;&#xA;  &amp;lt;%= f.input :password %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;Simple Form&lt;/strong&gt; will look at the column type in the database and use an appropriate input for the column. For example, a column created with type &lt;code&gt;:text&lt;/code&gt; in the database will use a &lt;code&gt;textarea&lt;/code&gt; input by default. See the section &lt;a href=&#34;https://github.com/heartcombo/simple_form#available-input-types-and-defaults-for-each-column-type&#34;&gt;Available input types and defaults for each column type&lt;/a&gt; for a complete list of defaults.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also lets you overwrite the default input type it creates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username %&amp;gt;&#xA;  &amp;lt;%= f.input :password %&amp;gt;&#xA;  &amp;lt;%= f.input :description, as: :text %&amp;gt;&#xA;  &amp;lt;%= f.input :accepts,     as: :radio_buttons %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So instead of a checkbox for the &lt;em&gt;accepts&lt;/em&gt; attribute, you&#39;ll have a pair of radio buttons with yes/no labels and a textarea instead of a text field for the description. You can also render boolean attributes using &lt;code&gt;as: :select&lt;/code&gt; to show a dropdown.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to give the &lt;code&gt;:disabled&lt;/code&gt; option to &lt;strong&gt;Simple Form&lt;/strong&gt;, and it&#39;ll automatically mark the wrapper as disabled with a CSS class, so you can style labels, hints and other components inside the wrapper as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, disabled: true, hint: &#39;You cannot change your username.&#39; %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; inputs accept the same options as their corresponding input type helper in Rails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :date_of_birth, as: :date, start_year: Date.today.year - 90,&#xA;                              end_year: Date.today.year - 12, discard_day: true,&#xA;                              order: [:month, :year] %&amp;gt;&#xA;  &amp;lt;%= f.input :accepts, as: :boolean, checked_value: true, unchecked_value: false %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also allows you to use label, hint, input_field, error and full_error helpers (please take a look at the rdocs for each method for more info):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.label :username %&amp;gt;&#xA;  &amp;lt;%= f.input_field :username %&amp;gt;&#xA;  &amp;lt;%= f.hint &#39;No special characters, please!&#39; %&amp;gt;&#xA;  &amp;lt;%= f.error :username, id: &#39;user_name_error&#39; %&amp;gt;&#xA;  &amp;lt;%= f.full_error :token %&amp;gt;&#xA;  &amp;lt;%= f.submit &#39;Save&#39; %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any extra option passed to these methods will be rendered as html option.&lt;/p&gt; &#xA;&lt;h3&gt;Stripping away all wrapper divs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also allows you to strip away all the div wrappers around the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field that is generated with the usual &lt;code&gt;f.input&lt;/code&gt;. The easiest way to achieve this is to use &lt;code&gt;f.input_field&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;simple_form_for @user do |f|&#xA;  f.input_field :name&#xA;  f.input_field :remember_me, as: :boolean&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form&amp;gt;&#xA;  ...&#xA;  &amp;lt;input class=&#34;string required&#34; id=&#34;user_name&#34; maxlength=&#34;255&#34; name=&#34;user[name]&#34; size=&#34;255&#34; type=&#34;text&#34;&amp;gt;&#xA;  &amp;lt;input name=&#34;user[remember_me]&#34; type=&#34;hidden&#34; value=&#34;0&#34;&amp;gt;&#xA;  &amp;lt;label class=&#34;checkbox&#34;&amp;gt;&#xA;    &amp;lt;input class=&#34;boolean optional&#34; id=&#34;user_published&#34; name=&#34;user[remember_me]&#34; type=&#34;checkbox&#34; value=&#34;1&#34;&amp;gt;&#xA;  &amp;lt;/label&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For check boxes and radio buttons you can remove the label changing &lt;code&gt;boolean_style&lt;/code&gt; from default value &lt;code&gt;:nested&lt;/code&gt; to &lt;code&gt;:inline&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;simple_form_for @user do |f|&#xA;  f.input_field :name&#xA;  f.input_field :remember_me, as: :boolean, boolean_style: :inline&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form&amp;gt;&#xA;  ...&#xA;  &amp;lt;input class=&#34;string required&#34; id=&#34;user_name&#34; maxlength=&#34;255&#34; name=&#34;user[name]&#34; size=&#34;255&#34; type=&#34;text&#34;&amp;gt;&#xA;  &amp;lt;input name=&#34;user[remember_me]&#34; type=&#34;hidden&#34; value=&#34;0&#34;&amp;gt;&#xA;  &amp;lt;input class=&#34;boolean optional&#34; id=&#34;user_remember_me&#34; name=&#34;user[remember_me]&#34; type=&#34;checkbox&#34; value=&#34;1&#34;&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view the actual RDocs for this, check them out here - &lt;a href=&#34;http://rubydoc.info/github/heartcombo/simple_form/master/SimpleForm/FormBuilder:input_field&#34;&gt;http://rubydoc.info/github/heartcombo/simple_form/master/SimpleForm/FormBuilder:input_field&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Collections&lt;/h3&gt; &#xA;&lt;p&gt;And what if you want to create a select containing the age from 18 to 60 in your form? You can do it overriding the &lt;code&gt;:collection&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :user %&amp;gt;&#xA;  &amp;lt;%= f.input :age, collection: 18..60 %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Collections can be arrays or ranges, and when a &lt;code&gt;:collection&lt;/code&gt; is given the &lt;code&gt;:select&lt;/code&gt; input will be rendered by default, so we don&#39;t need to pass the &lt;code&gt;as: :select&lt;/code&gt; option. Other types of collection are &lt;code&gt;:radio_buttons&lt;/code&gt; and &lt;code&gt;:check_boxes&lt;/code&gt;. Those are added by &lt;strong&gt;Simple Form&lt;/strong&gt; to Rails set of form helpers (read Extra Helpers section below for more information).&lt;/p&gt; &#xA;&lt;p&gt;Collection inputs accept two other options beside collections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;label_method&lt;/em&gt; =&amp;gt; the label method to be applied to the collection to retrieve the label (use this instead of the &lt;code&gt;text_method&lt;/code&gt; option in &lt;code&gt;collection_select&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;value_method&lt;/em&gt; =&amp;gt; the value method to be applied to the collection to retrieve the value&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Those methods are useful to manipulate the given collection. Both of these options also accept lambda/procs in case you want to calculate the value or label in a special way eg. custom translation. You can also define a &lt;code&gt;to_label&lt;/code&gt; method on your model as &lt;strong&gt;Simple Form&lt;/strong&gt; will search for and use &lt;code&gt;:to_label&lt;/code&gt; as a &lt;code&gt;:label_method&lt;/code&gt; first if it is found.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;Simple Form&lt;/strong&gt; will use the first item from an array as the label and the second one as the value. If you want to change this behavior you must make it explicit, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :gender, as: :radio_buttons, collection: [[&#39;0&#39;, &#39;female&#39;], [&#39;1&#39;, &#39;male&#39;]], label_method: :second, value_method: :first %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All other options given are sent straight to the underlying Rails helper(s): &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select&#34;&gt;&lt;code&gt;collection_select&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_check_boxes&#34;&gt;&lt;code&gt;collection_check_boxes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_radio_buttons&#34;&gt;&lt;code&gt;collection_radio_buttons&lt;/code&gt;&lt;/a&gt;. For example, you can pass &lt;code&gt;prompt&lt;/code&gt; and &lt;code&gt;selected&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :age, collection: 18..60, prompt: &#34;Select your age&#34;, selected: 21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may also be useful to explicitly pass a value to the optional &lt;code&gt;:selected&lt;/code&gt; like above, especially if passing a collection of nested objects.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to create grouped collection selects, that will use the html &lt;em&gt;optgroup&lt;/em&gt; tags, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :country_id, collection: @continents, as: :grouped_select, group_method: :countries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grouped collection inputs accept the same &lt;code&gt;:label_method&lt;/code&gt; and &lt;code&gt;:value_method&lt;/code&gt; options, which will be used to retrieve label/value attributes for the &lt;code&gt;option&lt;/code&gt; tags. Besides that, you can give:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;group_method&lt;/em&gt; =&amp;gt; the method to be called on the given collection to generate the options for each group (required)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;group_label_method&lt;/em&gt; =&amp;gt; the label method to be applied on the given collection to retrieve the label for the &lt;em&gt;optgroup&lt;/em&gt; (&lt;strong&gt;Simple Form&lt;/strong&gt; will attempt to guess the best one the same way it does with &lt;code&gt;:label_method&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Priority&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also supports &lt;code&gt;:time_zone&lt;/code&gt; and &lt;code&gt;:country&lt;/code&gt;. When using such helpers, you can give &lt;code&gt;:priority&lt;/code&gt; as an option to select which time zones and/or countries should be given higher priority:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :residence_country, priority: [ &#34;Brazil&#34; ]&#xA;f.input :time_zone, priority: /US/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those values can also be configured with a default value to be used on the site through the &lt;code&gt;SimpleForm.country_priority&lt;/code&gt; and &lt;code&gt;SimpleForm.time_zone_priority&lt;/code&gt; helpers.&lt;/p&gt; &#xA;&lt;p&gt;Note: While using &lt;code&gt;country_select&lt;/code&gt; if you want to restrict to only a subset of countries for a specific drop down then you may use the &lt;code&gt;:collection&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :shipping_country, priority: [ &#34;Brazil&#34; ], collection: [ &#34;Australia&#34;, &#34;Brazil&#34;, &#34;New Zealand&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Associations&lt;/h3&gt; &#xA;&lt;p&gt;To deal with associations, &lt;strong&gt;Simple Form&lt;/strong&gt; can generate select inputs, a series of radios buttons or checkboxes. Lets see how it works: imagine you have a user model that belongs to a company and &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; roles. The structure would be something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  belongs_to :company&#xA;  has_and_belongs_to_many :roles&#xA;end&#xA;&#xA;class Company &amp;lt; ActiveRecord::Base&#xA;  has_many :users&#xA;end&#xA;&#xA;class Role &amp;lt; ActiveRecord::Base&#xA;  has_and_belongs_to_many :users&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we have the user form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name %&amp;gt;&#xA;  &amp;lt;%= f.association :company %&amp;gt;&#xA;  &amp;lt;%= f.association :roles %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple enough, right? This is going to render a &lt;code&gt;:select&lt;/code&gt; input for choosing the &lt;code&gt;:company&lt;/code&gt;, and another &lt;code&gt;:select&lt;/code&gt; input with &lt;code&gt;:multiple&lt;/code&gt; option for the &lt;code&gt;:roles&lt;/code&gt;. You can, of course, change it to use radio buttons and checkboxes as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.association :company, as: :radio_buttons&#xA;f.association :roles,   as: :check_boxes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The association helper just invokes &lt;code&gt;input&lt;/code&gt; under the hood, so all options available to &lt;code&gt;:select&lt;/code&gt;, &lt;code&gt;:radio_buttons&lt;/code&gt; and &lt;code&gt;:check_boxes&lt;/code&gt; are also available to association. Additionally, you can specify the collection by hand, all together with the prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.association :company, collection: Company.active.order(:name), prompt: &#34;Choose a Company&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you want to declare different labels and values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.association :company, label_method: :company_name, value_method: :id, include_blank: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the association helper is currently only tested with Active Record. It currently does not work well with Mongoid and depending on the ORM you&#39;re using your mileage may vary.&lt;/p&gt; &#xA;&lt;h3&gt;Buttons&lt;/h3&gt; &#xA;&lt;p&gt;All web forms need buttons, right? &lt;strong&gt;Simple Form&lt;/strong&gt; wraps them in the DSL, acting like a proxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will simply call submit. You choose to use it or not, it&#39;s just a question of taste.&lt;/p&gt; &#xA;&lt;p&gt;The button method also accepts optional parameters, that are delegated to the underlying submit call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.button :submit, &#34;Custom Button Text&#34;, class: &#34;my-button&#34; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element, use the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.button :button, &#34;Custom Button Text&#34; %&amp;gt;&#xA;&#xA;&amp;lt;%= f.button :button do %&amp;gt;&#xA;  Custom Button Text&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wrapping Rails Form Helpers&lt;/h3&gt; &#xA;&lt;p&gt;Say you wanted to use a rails form helper but still wrap it in &lt;strong&gt;Simple Form&lt;/strong&gt; goodness? You can, by calling input with a block like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.input :role do %&amp;gt;&#xA;  &amp;lt;%= f.select :role, Role.all.map { |r| [r.name, r.id, { class: r.company.id }] }, include_blank: true %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example, we&#39;re taking advantage of Rails 3&#39;s select method that allows us to pass in a hash of additional attributes for each option.&lt;/p&gt; &#xA;&lt;h3&gt;Extra helpers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also comes with some extra helpers you can use inside rails default forms without relying on &lt;code&gt;simple_form_for&lt;/code&gt; helper. They are listed below.&lt;/p&gt; &#xA;&lt;h4&gt;Simple Fields For&lt;/h4&gt; &#xA;&lt;p&gt;Wrapper to use &lt;strong&gt;Simple Form&lt;/strong&gt; inside a default rails form. It works in the same way that the &lt;code&gt;fields_for&lt;/code&gt; Rails helper, but change the builder to use the &lt;code&gt;SimpleForm::FormBuilder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.simple_fields_for :posts do |posts_form|&#xA;    # Here you have all simple_form methods available&#xA;    posts_form.input :title&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Collection Radio Buttons&lt;/h4&gt; &#xA;&lt;p&gt;Creates a collection of radio inputs with labels associated (same API as &lt;code&gt;collection_select&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.collection_radio_buttons :options, [[true, &#39;Yes&#39;], [false, &#39;No&#39;]], :first, :last&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input id=&#34;user_options_true&#34; name=&#34;user[options]&#34; type=&#34;radio&#34; value=&#34;true&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_radio_buttons&#34; for=&#34;user_options_true&#34;&amp;gt;Yes&amp;lt;/label&amp;gt;&#xA;&amp;lt;input id=&#34;user_options_false&#34; name=&#34;user[options]&#34; type=&#34;radio&#34; value=&#34;false&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_radio_buttons&#34; for=&#34;user_options_false&#34;&amp;gt;No&amp;lt;/label&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Collection Check Boxes&lt;/h4&gt; &#xA;&lt;p&gt;Creates a collection of checkboxes with labels associated (same API as &lt;code&gt;collection_select&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.collection_check_boxes :options, [[true, &#39;Yes&#39;], [false, &#39;No&#39;]], :first, :last&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input name=&#34;user[options][]&#34; type=&#34;hidden&#34; value=&#34;&#34; /&amp;gt;&#xA;&amp;lt;input id=&#34;user_options_true&#34; name=&#34;user[options][]&#34; type=&#34;checkbox&#34; value=&#34;true&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_check_box&#34; for=&#34;user_options_true&#34;&amp;gt;Yes&amp;lt;/label&amp;gt;&#xA;&amp;lt;input name=&#34;user[options][]&#34; type=&#34;hidden&#34; value=&#34;&#34; /&amp;gt;&#xA;&amp;lt;input id=&#34;user_options_false&#34; name=&#34;user[options][]&#34; type=&#34;checkbox&#34; value=&#34;false&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_check_box&#34; for=&#34;user_options_false&#34;&amp;gt;No&amp;lt;/label&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this with associations in your model, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.collection_check_boxes :role_ids, Role.all, :id, :name # using :roles here is not going to work.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add a CSS class to the label item, you can use the &lt;code&gt;item_label_class&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.collection_check_boxes :role_ids, Role.all, :id, :name, item_label_class: &#39;my-custom-class&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available input types and defaults for each column type&lt;/h2&gt; &#xA;&lt;p&gt;The following table shows the html element you will get for each attribute according to its database definition. These defaults can be changed by specifying the helper method in the column &lt;code&gt;Mapping&lt;/code&gt; as the &lt;code&gt;as:&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mapping&lt;/th&gt; &#xA;   &lt;th&gt;Generated HTML Element&lt;/th&gt; &#xA;   &lt;th&gt;Database Column Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=checkbox]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=text]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;citext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=text]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;citext&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=email]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /email/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=url]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /url/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=tel]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /phone/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;password&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=password]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /password/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;search&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=search]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=text]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=color]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hstore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hstore&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;json&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonb&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=file]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; responding to file methods&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hidden&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=hidden]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=number]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=number]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=number]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;range&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=range]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime/timestamp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;date&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;date select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;date&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;time select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to&lt;/code&gt;/&lt;code&gt;has_many&lt;/code&gt;/&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; associations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;radio_buttons&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;collection of &lt;code&gt;input[type=radio]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to&lt;/code&gt; associations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;check_boxes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;collection of &lt;code&gt;input[type=checkbox]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many&lt;/code&gt;/&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; associations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;country&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt; (countries as options)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /country/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time_zone&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt; (timezones as options)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /time_zone/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom inputs&lt;/h2&gt; &#xA;&lt;p&gt;It is very easy to add custom inputs to &lt;strong&gt;Simple Form&lt;/strong&gt;. For instance, if you want to add a custom input that extends the string one, you just need to add this file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/currency_input.rb&#xA;class CurrencyInput &amp;lt; SimpleForm::Inputs::Base&#xA;  def input(wrapper_options)&#xA;    merged_input_options = merge_wrapper_options(input_html_options, wrapper_options)&#xA;&#xA;    &#34;$ #{@builder.text_field(attribute_name, merged_input_options)}&#34;.html_safe&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use it in your views:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :money, as: :currency&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, you may have to create the &lt;code&gt;app/inputs/&lt;/code&gt; directory and restart your webserver.&lt;/p&gt; &#xA;&lt;p&gt;You can also redefine existing &lt;strong&gt;Simple Form&lt;/strong&gt; inputs by creating a new class with the same name. For instance, if you want to wrap date/time/datetime in a div, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/date_time_input.rb&#xA;class DateTimeInput &amp;lt; SimpleForm::Inputs::DateTimeInput&#xA;  def input(wrapper_options)&#xA;    template.content_tag(:div, super)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to add a class to all the select fields you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/collection_select_input.rb&#xA;class CollectionSelectInput &amp;lt; SimpleForm::Inputs::CollectionSelectInput&#xA;  def input_html_classes&#xA;    super.push(&#39;chosen&#39;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If needed, you can namespace your custom inputs in a module and tell &lt;strong&gt;Simple Form&lt;/strong&gt; to look for their definitions in this module. This can avoid conflicts with other form libraries (like Formtastic) that look up the global context to find inputs definition too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/custom_inputs/numeric_input&#xA;module CustomInputs&#xA;  class NumericInput &amp;lt; SimpleForm::Inputs::NumericInput&#xA;    def input_html_classes&#xA;      super.push(&#39;no-spinner&#39;)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in the &lt;strong&gt;SimpleForm&lt;/strong&gt; initializer :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/simple_form.rb&#xA;config.custom_inputs_namespaces &amp;lt;&amp;lt; &#34;CustomInputs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom form builder&lt;/h2&gt; &#xA;&lt;p&gt;You can create a custom form builder that uses &lt;strong&gt;Simple Form&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create a helper method that calls &lt;code&gt;simple_form_for&lt;/code&gt; with a custom builder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def custom_form_for(object, *args, &amp;amp;block)&#xA;  options = args.extract_options!&#xA;  simple_form_for(object, *(args &amp;lt;&amp;lt; options.merge(builder: CustomFormBuilder)), &amp;amp;block)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a form builder class that inherits from &lt;code&gt;SimpleForm::FormBuilder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CustomFormBuilder &amp;lt; SimpleForm::FormBuilder&#xA;  def input(attribute_name, options = {}, &amp;amp;block)&#xA;    super(attribute_name, options.merge(label: false), &amp;amp;block)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;I18n&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; uses all power of I18n API to lookup labels, hints, prompts and placeholders. To customize your forms you can create a locale file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      user:&#xA;        username: &#39;User name&#39;&#xA;        password: &#39;Password&#39;&#xA;    hints:&#xA;      user:&#xA;        username: &#39;User name to sign in.&#39;&#xA;        password: &#39;No special characters, please.&#39;&#xA;    placeholders:&#xA;      user:&#xA;        username: &#39;Your username&#39;&#xA;        password: &#39;****&#39;&#xA;    include_blanks:&#xA;      user:&#xA;        age: &#39;Rather not say&#39;&#xA;    prompts:&#xA;      user:&#xA;        role: &#39;Select your role&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And your forms will use this information to render the components for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also lets you be more specific, separating lookups through actions. Let&#39;s say you want a different label for new and edit actions, the locale file would be something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      user:&#xA;        username: &#39;User name&#39;&#xA;        password: &#39;Password&#39;&#xA;        edit:&#xA;          username: &#39;Change user name&#39;&#xA;          password: &#39;Change password&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way &lt;strong&gt;Simple Form&lt;/strong&gt; will figure out the right translation for you, based on the action being rendered. And to be a little bit DRYer with your locale file, you can specify defaults for all models under the &#39;defaults&#39; key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      defaults:&#xA;        username: &#39;User name&#39;&#xA;        password: &#39;Password&#39;&#xA;        new:&#xA;          username: &#39;Choose a user name&#39;&#xA;    hints:&#xA;      defaults:&#xA;        username: &#39;User name to sign in.&#39;&#xA;        password: &#39;No special characters, please.&#39;&#xA;    placeholders:&#xA;      defaults:&#xA;        username: &#39;Your username&#39;&#xA;        password: &#39;****&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; will always look for a default attribute translation under the &#34;defaults&#34; key if no specific is found inside the model key.&lt;/p&gt; &#xA;&lt;p&gt;In addition, &lt;strong&gt;Simple Form&lt;/strong&gt; will fallback to default &lt;code&gt;human_attribute_name&lt;/code&gt; from Rails when no other translation is found for labels. Finally, you can also overwrite any label, hint or placeholder inside your view, just by passing the option manually. This way the I18n lookup will be skipped.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;:prompt&lt;/code&gt; and &lt;code&gt;:include_blank&lt;/code&gt; the I18n lookup is optional and to enable it is necessary to pass &lt;code&gt;:translate&lt;/code&gt; as value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :role, prompt: :translate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also has support for translating options in collection helpers. For instance, given a User with a &lt;code&gt;:role&lt;/code&gt; attribute, you might want to create a select box showing translated labels that would post either &lt;code&gt;:admin&lt;/code&gt; or &lt;code&gt;:editor&lt;/code&gt; as value. With &lt;strong&gt;Simple Form&lt;/strong&gt; you could create an input like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :role, collection: [:admin, :editor]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;strong&gt;Simple Form&lt;/strong&gt; will try a lookup like this in your locale file, to find the right labels to show:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    options:&#xA;      user:&#xA;        role:&#xA;          admin: &#39;Administrator&#39;&#xA;          editor: &#39;Editor&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;defaults&lt;/code&gt; key as you would do with labels, hints and placeholders. It is important to notice that &lt;strong&gt;Simple Form&lt;/strong&gt; will only do the lookup for options if you give a collection composed of symbols only. This is to avoid constant lookups to I18n.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also possible to translate buttons, using Rails&#39; built-in I18n support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  helpers:&#xA;    submit:&#xA;      user:&#xA;        create: &#34;Add %{model}&#34;&#xA;        update: &#34;Save Changes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are other options that can be configured through I18n API, such as required text and boolean. Be sure to check our locale file or the one copied to your application after you run &lt;code&gt;rails generate simple_form:install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It should be noted that translations for labels, hints and placeholders for a namespaced model, e.g. &lt;code&gt;Admin::User&lt;/code&gt;, should be placed under &lt;code&gt;admin_user&lt;/code&gt;, not under &lt;code&gt;admin/user&lt;/code&gt;. This is different from how translations for namespaced model and attribute names are defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  activerecord:&#xA;    models:&#xA;        admin/user: User&#xA;    attributes:&#xA;        admin/user:&#xA;            name: Name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They should be placed under &lt;code&gt;admin/user&lt;/code&gt;. Form labels, hints and placeholders for those attributes, though, should be placed under &lt;code&gt;admin_user&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;        admin_user:&#xA;            name: Name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This difference exists because &lt;strong&gt;Simple Form&lt;/strong&gt; relies on &lt;code&gt;object_name&lt;/code&gt; provided by Rails&#39; FormBuilder to determine the translation path for a given object instead of &lt;code&gt;i18n_key&lt;/code&gt; from the object itself. Thus, similarly, if a form for an &lt;code&gt;Admin::User&lt;/code&gt; object is defined by calling &lt;code&gt;simple_form_for @admin_user, as: :some_user&lt;/code&gt;, &lt;strong&gt;Simple Form&lt;/strong&gt; will look for translations under &lt;code&gt;some_user&lt;/code&gt; instead of &lt;code&gt;admin_user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When translating &lt;code&gt;simple_fields_for&lt;/code&gt; attributes be sure to use the same name you pass to it, e.g. &lt;code&gt;simple_fields_for :posts&lt;/code&gt; should be placed under &lt;code&gt;posts&lt;/code&gt; not &lt;code&gt;post&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      posts:&#xA;        title: &#39;Post title&#39;&#xA;    hints:&#xA;      posts:&#xA;        title: &#39;A good title&#39;&#xA;    placeholders:&#xA;      posts:&#xA;        title: &#39;Once upon a time...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; has several configuration options. You can read and change them in the initializer created by &lt;strong&gt;Simple Form&lt;/strong&gt;, so if you haven&#39;t executed the command below yet, please do:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rails generate simple_form:install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The wrappers API&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;strong&gt;Simple Form&lt;/strong&gt; you can configure how your components will be rendered using the wrappers API. The syntax looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers tag: :div, class: :input,&#xA;                error_class: :field_with_errors,&#xA;                valid_class: :field_without_errors do |b|&#xA;&#xA;  # Form extensions&#xA;  b.use :html5&#xA;  b.optional :pattern&#xA;  b.use :maxlength&#xA;  b.use :placeholder&#xA;  b.use :readonly&#xA;&#xA;  # Form components&#xA;  b.use :label_input&#xA;  b.use :hint,  wrap_with: { tag: :span, class: :hint }&#xA;  b.use :error, wrap_with: { tag: :span, class: :error }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;Form components&lt;/em&gt; will generate the form tags like labels, inputs, hints or errors contents. The available components are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;:label         # The &amp;lt;label&amp;gt; tag alone&#xA;:input         # The &amp;lt;input&amp;gt; tag alone&#xA;:label_input   # The &amp;lt;label&amp;gt; and the &amp;lt;input&amp;gt; tags&#xA;:hint          # The hint for the input&#xA;:error         # The error for the input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;Form extensions&lt;/em&gt; are used to generate some attributes or perform some lookups on the model to add extra information to your components.&lt;/p&gt; &#xA;&lt;p&gt;You can create new &lt;em&gt;Form components&lt;/em&gt; using the wrappers API as in the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;  b.wrapper tag: :div, class: &#39;separator&#39; do |component|&#xA;    component.use :hint,  wrap_with: { tag: :span, class: :hint }&#xA;    component.use :error, wrap_with: { tag: :span, class: :error }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will wrap the hint and error components within a &lt;code&gt;div&lt;/code&gt; tag using the class &lt;code&gt;&#39;separator&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can customize &lt;em&gt;Form components&lt;/em&gt; passing options to them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers do |b|&#xA;  b.use :label_input, class: &#39;label-input-class&#39;, error_class: &#39;is-invalid&#39;, valid_class: &#39;is-valid&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the input and label classes to &lt;code&gt;&#39;label-input-class&#39;&lt;/code&gt; and will set the class &lt;code&gt;&#39;is-invalid&#39;&lt;/code&gt; if the input has errors and &lt;code&gt;&#39;is-valid&#39;&lt;/code&gt; if the input is valid.&lt;/p&gt; &#xA;&lt;p&gt;If you want to customize the custom &lt;em&gt;Form components&lt;/em&gt; on demand you can give it a name like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;  b.wrapper :my_wrapper, tag: :div, class: &#39;separator&#39;, html: { id: &#39;my_wrapper_id&#39; } do |component|&#xA;    component.use :hint,  wrap_with: { tag: :span, class: :hint }&#xA;    component.use :error, wrap_with: { tag: :span, class: :error }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and now you can pass options to your &lt;code&gt;input&lt;/code&gt; calls to customize the &lt;code&gt;:my_wrapper&lt;/code&gt; &lt;em&gt;Form component&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Completely turns off the custom wrapper&#xA;f.input :name, my_wrapper: false&#xA;&#xA;# Configure the html&#xA;f.input :name, my_wrapper_html: { id: &#39;special_id&#39; }&#xA;&#xA;# Configure the tag&#xA;f.input :name, my_wrapper_tag: :p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define more than one wrapper and pick one to render in a specific form or input. To define another wrapper you have to give it a name, as the follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers :small do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use it in this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Specifying to whole form&#xA;simple_form_for @user, wrapper: :small do |f|&#xA;  f.input :name&#xA;end&#xA;&#xA;# Specifying to one input&#xA;simple_form_for @user do |f|&#xA;  f.input :name, wrapper: :small&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also allows you to use optional elements. For instance, let&#39;s suppose you want to use hints or placeholders, but you don&#39;t want them to be generated automatically. You can set their default values to &lt;code&gt;false&lt;/code&gt; or use the &lt;code&gt;optional&lt;/code&gt; method. Is preferable to use the &lt;code&gt;optional&lt;/code&gt; syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers placeholder: false do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;  b.wrapper tag: :div, class: &#39;separator&#39; do |component|&#xA;    component.optional :hint, wrap_with: { tag: :span, class: :hint }&#xA;    component.use :error, wrap_with: { tag: :span, class: :error }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By setting it as &lt;code&gt;optional&lt;/code&gt;, a hint will only be generated when &lt;code&gt;hint: true&lt;/code&gt; is explicitly used. The same for placeholder.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to give the option &lt;code&gt;:unless_blank&lt;/code&gt; to the wrapper if you want to render it only when the content is present.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  b.wrapper tag: :span, class: &#39;hint&#39;, unless_blank: true do |component|&#xA;    component.optional :hint&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Components&lt;/h2&gt; &#xA;&lt;p&gt;When you use custom wrappers, you might also be looking for a way to add custom components to your wrapper. The default components are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;:label         # The &amp;lt;label&amp;gt; tag alone&#xA;:input         # The &amp;lt;input&amp;gt; tag alone&#xA;:label_input   # The &amp;lt;label&amp;gt; and the &amp;lt;input&amp;gt; tags&#xA;:hint          # The hint for the input&#xA;:error         # The error for the input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A custom component might be interesting for you if your views look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @blog do |f| %&amp;gt;&#xA;  &amp;lt;div class=&#34;row&#34;&amp;gt;&#xA;    &amp;lt;div class=&#34;span1 number&#34;&amp;gt;&#xA;      1&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div class=&#34;span8&#34;&amp;gt;&#xA;      &amp;lt;%= f.input :title %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;  &amp;lt;div class=&#34;row&#34;&amp;gt;&#xA;    &amp;lt;div class=&#34;span1 number&#34;&amp;gt;&#xA;      2&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div class=&#34;span8&#34;&amp;gt;&#xA;      &amp;lt;%= f.input :body, as: :text %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A cleaner method to create your views would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @blog, wrapper: :with_numbers do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :title, number: 1 %&amp;gt;&#xA;  &amp;lt;%= f.input :body, as: :text, number: 2 %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the number option on the input, first, tells to Simple Form the place where the components will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/simple_form.rb&#xA;Dir[Rails.root.join(&#39;lib/components/**/*.rb&#39;)].each { |f| require f }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new component within the path specified above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/components/numbers_component.rb&#xA;module NumbersComponent&#xA;  # To avoid deprecation warning, you need to make the wrapper_options explicit&#xA;  # even when they won&#39;t be used.&#xA;  def number(wrapper_options = nil)&#xA;    @number ||= begin&#xA;      options[:number].to_s.html_safe if options[:number].present?&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;SimpleForm.include_component(NumbersComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, add a new wrapper to the config/initializers/simple_form.rb file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers :with_numbers, tag: &#39;div&#39;, class: &#39;row&#39;, error_class: &#39;error&#39; do |b|&#xA;  b.use :html5&#xA;  b.use :number, wrap_with: { tag: &#39;div&#39;, class: &#39;span1 number&#39; }&#xA;  b.wrapper tag: &#39;div&#39;, class: &#39;span8&#39; do |ba|&#xA;    ba.use :placeholder&#xA;    ba.use :label&#xA;    ba.use :input&#xA;    ba.use :error, wrap_with: { tag: &#39;span&#39;, class: &#39;help-inline&#39; }&#xA;    ba.use :hint,  wrap_with: { tag: &#39;p&#39;, class: &#39;help-block&#39; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTML 5 Notice&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;Simple Form&lt;/strong&gt; will generate input field types and attributes that are supported in HTML5, but are considered invalid HTML for older document types such as HTML4 or XHTML1.0. The HTML5 extensions include the new field types such as email, number, search, url, tel, and the new attributes such as required, autofocus, maxlength, min, max, step.&lt;/p&gt; &#xA;&lt;p&gt;Most browsers will not care, but some of the newer ones - in particular Chrome 10+ - use the required attribute to force a value into an input and will prevent form submission without it. Depending on the design of the application this may or may not be desired. In many cases it can break existing UI&#39;s.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to disable all HTML 5 extensions in &lt;strong&gt;Simple Form&lt;/strong&gt; by removing the &lt;code&gt;html5&lt;/code&gt; component from the wrapper used to render the inputs.&lt;/p&gt; &#xA;&lt;p&gt;For example, change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers tag: :div do |b|&#xA;  b.use :html5&#xA;&#xA;  b.use :label_input&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers tag: :div do |b|&#xA;  b.use :label_input&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to have all other HTML 5 features, such as the new field types, you can disable only the browser validation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleForm.browser_validations = false # default is true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option adds a new &lt;code&gt;novalidate&lt;/code&gt; property to the form, instructing it to skip all HTML 5 validation. The inputs will still be generated with the required and other attributes, that might help you to use some generic javascript validation.&lt;/p&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;novalidate&lt;/code&gt; to a specific form by setting the option on the form itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for(resource, html: { novalidate: true }) do |form| %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please notice that none of the configurations above will disable the &lt;code&gt;placeholder&lt;/code&gt; component, which is an HTML 5 feature. We believe most of the newest browsers are handling this attribute just fine, and if they aren&#39;t, any plugin you use would take care of applying the placeholder. In any case, you can disable it if you really want to, by removing the placeholder component from the components list in the &lt;strong&gt;Simple Form&lt;/strong&gt; configuration file.&lt;/p&gt; &#xA;&lt;p&gt;HTML 5 date / time inputs are not generated by &lt;strong&gt;Simple Form&lt;/strong&gt; by default, so using &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; or &lt;code&gt;datetime&lt;/code&gt; will all generate select boxes using normal Rails helpers. We believe browsers are not totally ready for these yet, but you can easily opt-in on a per-input basis by passing the html5 option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.input :expires_at, as: :date, html5: true %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using non Active Record objects&lt;/h3&gt; &#xA;&lt;p&gt;There are few ways to build forms with objects that don&#39;t inherit from Active Record, as follows:&lt;/p&gt; &#xA;&lt;p&gt;You can include the module &lt;code&gt;ActiveModel::Model&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  include ActiveModel::Model&#xA;&#xA;  attr_accessor :id, :name&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Presenters or Decorators that inherit from &lt;code&gt;SimpleDelegator&lt;/code&gt; you can delegate it to the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class UserPresenter &amp;lt; SimpleDelegator&#xA;  # Without that, Simple Form will consider the user model as the object.&#xA;  def to_model&#xA;    self&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define all methods required by the helpers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  extend ActiveModel::Naming&#xA;&#xA;  attr_accessor :id, :name&#xA;&#xA;  def to_model&#xA;    self&#xA;  end&#xA;&#xA;  def to_key&#xA;    id&#xA;  end&#xA;&#xA;  def persisted?&#xA;    false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your object doesn&#39;t implement those methods, you must make explicit it when you are building the form&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  attr_accessor :id, :name&#xA;&#xA;  # The only method required to use the f.submit helper.&#xA;  def persisted?&#xA;    false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for(@user, as: :user, method: :post, url: users_path) do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name %&amp;gt;&#xA;  &amp;lt;%= f.submit &#39;New user&#39; %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;h3&gt;RDocs&lt;/h3&gt; &#xA;&lt;p&gt;You can view the &lt;strong&gt;Simple Form&lt;/strong&gt; documentation in RDoc format here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rubydoc.info/github/heartcombo/simple_form/master/frames&#34;&gt;http://rubydoc.info/github/heartcombo/simple_form/master/frames&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported Ruby / Rails versions&lt;/h3&gt; &#xA;&lt;p&gt;We intend to maintain support for all Ruby / Rails versions that haven&#39;t reached end-of-life.&lt;/p&gt; &#xA;&lt;p&gt;For more information about specific versions please check &lt;a href=&#34;https://www.ruby-lang.org/en/downloads/branches/&#34;&gt;Ruby&lt;/a&gt; and &lt;a href=&#34;https://guides.rubyonrails.org/maintenance_policy.html&#34;&gt;Rails&lt;/a&gt; maintenance policies, and our test matrix.&lt;/p&gt; &#xA;&lt;h3&gt;Bug reports&lt;/h3&gt; &#xA;&lt;p&gt;If you discover any bugs, feel free to create an issue on GitHub. Please add as much information as possible to help us in fixing the potential bug. We also encourage you to help even more by forking and sending us a pull request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/simple_form/issues&#34;&gt;https://github.com/heartcombo/simple_form/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have discovered a security related bug, please do NOT use the GitHub issue tracker. Send an e-mail to &lt;a href=&#34;mailto:heartcombo@googlegroups.com&#34;&gt;heartcombo@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carlos Antonio da Silva (&lt;a href=&#34;https://github.com/carlosantoniodasilva&#34;&gt;https://github.com/carlosantoniodasilva&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Rafael Mendon√ßa Fran√ßa (&lt;a href=&#34;https://github.com/rafaelfranca&#34;&gt;https://github.com/rafaelfranca&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Felipe Renan (&lt;a href=&#34;https://github.com/feliperenan&#34;&gt;https://github.com/feliperenan&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/simple_form&#34;&gt;&lt;img src=&#34;https://fury-badge.herokuapp.com/rb/simple_form.png&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/heartcombo/simple_form&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/heartcombo/simple_form.png&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/heartcombo/simple_form&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/heartcombo/simple_form.png&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License. Copyright 2020 Rafael Fran√ßa, Carlos Ant√¥nio da Silva. Copyright 2009-2019 Plataformatec.&lt;/p&gt; &#xA;&lt;p&gt;The Simple Form logo is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>activeadmin/activeadmin</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/activeadmin/activeadmin</id>
    <link href="https://github.com/activeadmin/activeadmin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The administration framework for Ruby on Rails applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Active Admin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://activeadmin.info&#34;&gt;Active Admin&lt;/a&gt; is a Ruby on Rails framework for creating elegant backends for website administration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/activeadmin&#34;&gt;&lt;img src=&#34;http://img.shields.io/gem/v/activeadmin.svg?sanitize=true&#34; alt=&#34;Version         &#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/activeadmin/activeadmin/actions&#34;&gt;&lt;img src=&#34;https://github.com/activeadmin/activeadmin/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;Github Actions  &#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/activeadmin/activeadmin/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/779e407d22bacff19733/test_coverage&#34; alt=&#34;Coverage        &#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-activeadmin?utm_source=rubygems-activeadmin&amp;amp;utm_medium=readme&#34;&gt;&lt;img src=&#34;https://tidelift.com/badges/github/activeadmin/activeadmin&#34; alt=&#34;Tidelift        &#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/activeadmin/activeadmin&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/activeadmin/activeadmin.svg?branch=master&#34; alt=&#34;Inch CI         &#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable developers to quickly create good-looking administration interfaces.&lt;/li&gt; &#xA; &lt;li&gt;Build a DSL for developers and an interface for businesses.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that developers can easily customize every nook and cranny.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;http://activeadmin.info/0-installation.html&#34;&gt;the docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Try the &lt;a href=&#34;http://demo.activeadmin.info/admin&#34;&gt;live demo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/activeadmin/activeadmin/wiki&#34;&gt;wiki&lt;/a&gt; includes links to tutorials, articles and sample projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;For enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Active Admin for enterprise is available via the Tidelift subscription. &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-activeadmin?utm_source=rubygems-activeadmin&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&#34;&gt;Learn More&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/activeadmin&#34;&gt;StackOverflow&lt;/a&gt; for help requests and how-to questions.&lt;/p&gt; &#xA;&lt;p&gt;Please open GitHub issues for bugs and enhancements only, not general help requests. Please search previous issues (and Google and StackOverflow) before creating a new issue.&lt;/p&gt; &#xA;&lt;p&gt;Google Groups, IRC #activeadmin and Gitter are not actively monitored.&lt;/p&gt; &#xA;&lt;h2&gt;Want to contribute?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute through code or documentation, the &lt;a href=&#34;https://github.com/activeadmin/activeadmin/raw/master/CONTRIBUTING.md&#34;&gt;Contributing guide is the best place to start&lt;/a&gt;. If you have questions, feel free to ask.&lt;/p&gt; &#xA;&lt;h2&gt;Want to support us?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to support us financially, you can &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-activeadmin?utm_source=rubygems-activeadmin&amp;amp;utm_medium=referral&amp;amp;utm_campaign=github&amp;amp;utm_content=support&#34;&gt;help fund the project through a Tidelift subscription&lt;/a&gt;. By buying a Tidelift subscription you make sure your whole dependency stack is properly maintained, while also getting a comprehensive view of outdated dependencies, new releases, security alerts, and licensing compatibility issues.&lt;/p&gt; &#xA;&lt;p&gt;You can also support us with a weekly tip via &lt;a href=&#34;https://liberapay.com/Active-Admin/donate&#34;&gt;Liberapay&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, we have an &lt;a href=&#34;https://opencollective.com/activeadmin&#34;&gt;Open Collective&lt;/a&gt; where you can become a backer or sponsor for the project, and also submit expenses to it.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;We try not to reinvent the wheel, so Active Admin is built with other open source projects:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/activeadmin/arbre&#34;&gt;Arbre&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ruby -&amp;gt; HTML, just like that.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/plataformatec/devise&#34;&gt;Devise&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Powerful, extensible user authentication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/justinfrench/formtastic&#34;&gt;Formtastic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Rails form builder plugin with semantically rich and accessible markup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/activeadmin/inherited_resources&#34;&gt;Inherited Resources&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simplifies controllers with pre-built RESTful controller actions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kaminari/kaminari&#34;&gt;Kaminari&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Elegant pagination for any sort of collection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/activerecord-hackery/ransack&#34;&gt;Ransack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides a simple search API to query your data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Security contact information&lt;/h2&gt; &#xA;&lt;p&gt;Please use the Tidelift security contact to &lt;a href=&#34;https://tidelift.com/security&#34;&gt;report a security vulnerability&lt;/a&gt;. Tidelift will coordinate the fix and disclosure.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/gregbell&#34;&gt;Greg Bell&lt;/a&gt; for creating and sharing this project with the open source community.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/activeadmin/activeadmin/graphs/contributors&#34;&gt;all the people that ever contributed through code&lt;/a&gt; or other means such as bug reports, issue triaging, feature suggestions, code snippet tips, Slack discussions and so on.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-activeadmin?utm_source=rubygems-activeadmin&amp;amp;utm_medium=readme&#34;&gt;Tidelift&lt;/a&gt; and all our Tidelift subscribers.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://opencollective.com/activeadmin#contributors&#34;&gt;Open Collective&lt;/a&gt; and all our Open Collective contributors.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>heartcombo/devise</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/heartcombo/devise</id>
    <link href="https://github.com/heartcombo/devise" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible authentication solution for Rails with Warden.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/heartcombo/devise/main/devise.png&#34; alt=&#34;Devise Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codeclimate.com/github/heartcombo/devise&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/heartcombo/devise.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Devise is a flexible authentication solution for Rails based on Warden. It:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is Rack based;&lt;/li&gt; &#xA; &lt;li&gt;Is a complete MVC solution based on Rails engines;&lt;/li&gt; &#xA; &lt;li&gt;Allows you to have multiple models signed in at the same time;&lt;/li&gt; &#xA; &lt;li&gt;Is based on a modularity concept: use only what you really need.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s composed of 10 modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/DatabaseAuthenticatable&#34;&gt;Database Authenticatable&lt;/a&gt;: hashes and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Omniauthable&#34;&gt;Omniauthable&lt;/a&gt;: adds OmniAuth (&lt;a href=&#34;https://github.com/omniauth/omniauth&#34;&gt;https://github.com/omniauth/omniauth&lt;/a&gt;) support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Confirmable&#34;&gt;Confirmable&lt;/a&gt;: sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Recoverable&#34;&gt;Recoverable&lt;/a&gt;: resets the user password and sends reset instructions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Registerable&#34;&gt;Registerable&lt;/a&gt;: handles signing up users through a registration process, also allowing them to edit and destroy their account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Rememberable&#34;&gt;Rememberable&lt;/a&gt;: manages generating and clearing a token for remembering the user from a saved cookie.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Trackable&#34;&gt;Trackable&lt;/a&gt;: tracks sign in count, timestamps and IP address.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Timeoutable&#34;&gt;Timeoutable&lt;/a&gt;: expires sessions that have not been active in a specified period of time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Validatable&#34;&gt;Validatable&lt;/a&gt;: provides validations of email and password. It&#39;s optional and can be customized, so you&#39;re able to define your own validations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Lockable&#34;&gt;Lockable&lt;/a&gt;: locks an account after a specified number of failed sign-in attempts. Can unlock via email or after a specified time period.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- TOC depthFrom:1 depthTo:6 withLinks:1 orderedList:0 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#information&#34;&gt;Information&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#the-devise-wiki&#34;&gt;The Devise wiki&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#bug-reports&#34;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#stackoverflow-and-mailing-list&#34;&gt;StackOverflow and Mailing List&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#rdocs&#34;&gt;RDocs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#example-applications&#34;&gt;Example applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#starting-with-rails&#34;&gt;Starting with Rails?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#controller-filters-and-helpers&#34;&gt;Controller filters and helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-models&#34;&gt;Configuring Models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#strong-parameters&#34;&gt;Strong Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-views&#34;&gt;Configuring views&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-controllers&#34;&gt;Configuring controllers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-routes&#34;&gt;Configuring routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#i18n&#34;&gt;I18n&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#test-helpers&#34;&gt;Test helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#controller-tests&#34;&gt;Controller tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#integration-tests&#34;&gt;Integration tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#omniauth&#34;&gt;OmniAuth&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-multiple-models&#34;&gt;Configuring multiple models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#activejob-integration&#34;&gt;ActiveJob Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#password-reset-tokens-and-rails-logs&#34;&gt;Password reset tokens and Rails logs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#other-orms&#34;&gt;Other ORMs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#rails-api-mode&#34;&gt;Rails API mode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#additional-information&#34;&gt;Additional information&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#warden&#34;&gt;Warden&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;h3&gt;The Devise wiki&lt;/h3&gt; &#xA;&lt;p&gt;The Devise Wiki has lots of additional information about Devise including many &#34;how-to&#34; articles and answers to the most frequently asked questions. Please browse the Wiki after finishing this README:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki&#34;&gt;https://github.com/heartcombo/devise/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Bug reports&lt;/h3&gt; &#xA;&lt;p&gt;If you discover a problem with Devise, we would like to know about it. However, we ask that you please review these guidelines before submitting a bug report:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Bug-reports&#34;&gt;https://github.com/heartcombo/devise/wiki/Bug-reports&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have discovered a security related bug, please do &lt;em&gt;NOT&lt;/em&gt; use the GitHub issue tracker. Send an email to &lt;a href=&#34;mailto:heartcombo@googlegroups.com&#34;&gt;heartcombo@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;StackOverflow and Mailing List&lt;/h3&gt; &#xA;&lt;p&gt;If you have any questions, comments, or concerns, please use StackOverflow instead of the GitHub issue tracker:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/devise&#34;&gt;http://stackoverflow.com/questions/tagged/devise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The deprecated mailing list can still be read on&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/plataformatec-devise&#34;&gt;https://groups.google.com/group/plataformatec-devise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;RDocs&lt;/h3&gt; &#xA;&lt;p&gt;You can view the Devise documentation in RDoc format here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rubydoc.info/github/heartcombo/devise/main/frames&#34;&gt;http://rubydoc.info/github/heartcombo/devise/main/frames&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you need to use Devise with previous versions of Rails, you can always run &#34;gem server&#34; from the command line after you install the gem to access the old documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Example applications&lt;/h3&gt; &#xA;&lt;p&gt;There are a few example applications available on GitHub that demonstrate various features of Devise with different versions of Rails. You can view them here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Example-Applications&#34;&gt;https://github.com/heartcombo/devise/wiki/Example-Applications&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Our community has created a number of extensions that add functionality above and beyond what is included with Devise. You can view a list of available extensions and add your own here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Extensions&#34;&gt;https://github.com/heartcombo/devise/wiki/Extensions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We hope that you will consider contributing to Devise. Please read this short overview for some information about how to get started:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Contributing&#34;&gt;https://github.com/heartcombo/devise/wiki/Contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will usually want to write tests for your changes. To run the test suite, go into Devise&#39;s top-level directory and run &lt;code&gt;bundle install&lt;/code&gt; and &lt;code&gt;bin/test&lt;/code&gt;. Devise works with multiple Ruby and Rails versions, and ActiveRecord and Mongoid ORMs, which means you can run the test suite with some modifiers: &lt;code&gt;DEVISE_ORM&lt;/code&gt; and &lt;code&gt;BUNDLE_GEMFILE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;DEVISE_ORM&lt;/h3&gt; &#xA;&lt;p&gt;Since Devise supports both Mongoid and ActiveRecord, we rely on this variable to run specific code for each ORM. The default value of &lt;code&gt;DEVISE_ORM&lt;/code&gt; is &lt;code&gt;active_record&lt;/code&gt;. To run the tests for Mongoid, you can pass &lt;code&gt;mongoid&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DEVISE_ORM=mongoid bin/test&#xA;&#xA;==&amp;gt; Devise.orm = :mongoid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When running the tests for Mongoid, you will need to have a MongoDB server (version 2.0 or newer) running on your system.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the command output will show the variable value being used.&lt;/p&gt; &#xA;&lt;h3&gt;BUNDLE_GEMFILE&lt;/h3&gt; &#xA;&lt;p&gt;We can use this variable to tell bundler what Gemfile it should use (instead of the one in the current directory). Inside the &lt;a href=&#34;https://github.com/heartcombo/devise/tree/main/gemfiles&#34;&gt;gemfiles&lt;/a&gt; directory, we have one for each version of Rails we support. When you send us a pull request, it may happen that the test suite breaks using some of them. If that&#39;s the case, you can simulate the same environment using the &lt;code&gt;BUNDLE_GEMFILE&lt;/code&gt; variable. For example, if the tests broke using Ruby 2.4.2 and Rails 4.1, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rbenv shell 2.4.2 # or rvm use 2.4.2&#xA;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bundle install&#xA;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also combine both of them if the tests broke for Mongoid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bundle install&#xA;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable DEVISE_ORM=mongoid bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;Devise uses &lt;a href=&#34;https://github.com/seattlerb/minitest&#34;&gt;Mini Test&lt;/a&gt; as test framework.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running all tests:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running tests for an specific file:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test test/models/trackable_test.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running a specific test given a regex:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test test/models/trackable_test.rb:16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Starting with Rails?&lt;/h2&gt; &#xA;&lt;p&gt;If you are building your first Rails application, we recommend you &lt;em&gt;do not&lt;/em&gt; use Devise. Devise requires a good understanding of the Rails Framework. In such cases, we advise you to start a simple authentication system from scratch. Here&#39;s a few resources that should help you get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Michael Hartl&#39;s online book: &lt;a href=&#34;https://www.railstutorial.org/book/modeling_users&#34;&gt;https://www.railstutorial.org/book/modeling_users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ryan Bates&#39; Railscasts: &lt;a href=&#34;http://railscasts.com/episodes/250-authentication-from-scratch&#34;&gt;http://railscasts.com/episodes/250-authentication-from-scratch&lt;/a&gt; and &lt;a href=&#34;http://railscasts.com/episodes/250-authentication-from-scratch-revised&#34;&gt;http://railscasts.com/episodes/250-authentication-from-scratch-revised&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Codecademy&#39;s Ruby on Rails: Authentication and Authorization: &lt;a href=&#34;https://www.codecademy.com/learn/rails-auth&#34;&gt;https://www.codecademy.com/learn/rails-auth&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have solidified your understanding of Rails and authentication mechanisms, we assure you Devise will be very pleasant to work with. &lt;span&gt;üòÉ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Devise 4.0 works with Rails 4.1 onwards. Add the following line to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;devise&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next, you need to run the generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, a number of instructions will appear in the console. Among these instructions, you&#39;ll need to set up the default URL options for the Devise mailer in each environment. Here is a possible configuration for &lt;code&gt;config/environments/development.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generator will install an initializer which describes ALL of Devise&#39;s configuration options. It is &lt;em&gt;imperative&lt;/em&gt; that you take a look at it. When you are done, you are ready to add Devise to any of your models using the generator.&lt;/p&gt; &#xA;&lt;p&gt;In the following command you will replace &lt;code&gt;MODEL&lt;/code&gt; with the class name used for the application‚Äôs users (it‚Äôs frequently &lt;code&gt;User&lt;/code&gt; but could also be &lt;code&gt;Admin&lt;/code&gt;). This will create a model (if one does not exist) and configure it with the default Devise modules. The generator also configures your &lt;code&gt;config/routes.rb&lt;/code&gt; file to point to the Devise controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise MODEL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, check the MODEL for any additional configuration options you might want to add, such as confirmable or lockable. If you add an option, be sure to inspect the migration file (created by the generator if your ORM supports them) and uncomment the appropriate section. For example, if you add the confirmable option in the model, you&#39;ll need to uncomment the Confirmable section in the migration.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;rails db:migrate&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You should restart your application after changing Devise&#39;s configuration options (this includes stopping spring). Otherwise, you will run into strange errors, for example, users being unable to login and route helpers being undefined.&lt;/p&gt; &#xA;&lt;h3&gt;Controller filters and helpers&lt;/h3&gt; &#xA;&lt;p&gt;Devise will create some helpers to use inside your controllers and views. To set up a controller with user authentication, just add this before_action (assuming your devise model is &#39;User&#39;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before_action :authenticate_user!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Rails 5, note that &lt;code&gt;protect_from_forgery&lt;/code&gt; is no longer prepended to the &lt;code&gt;before_action&lt;/code&gt; chain, so if you have set &lt;code&gt;authenticate_user&lt;/code&gt; before &lt;code&gt;protect_from_forgery&lt;/code&gt;, your request will result in &#34;Can&#39;t verify CSRF token authenticity.&#34; To resolve this, either change the order in which you call them, or use &lt;code&gt;protect_from_forgery prepend: true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your devise model is something other than User, replace &#34;_user&#34; with &#34;_yourmodel&#34;. The same logic applies to the instructions below.&lt;/p&gt; &#xA;&lt;p&gt;To verify if a user is signed in, use the following helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user_signed_in?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the current signed-in user, this helper is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;current_user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access the session for this scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user_session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After signing in a user, confirming the account or updating the password, Devise will look for a scoped root path to redirect to. For instance, when using a &lt;code&gt;:user&lt;/code&gt; resource, the &lt;code&gt;user_root_path&lt;/code&gt; will be used if it exists; otherwise, the default &lt;code&gt;root_path&lt;/code&gt; will be used. This means that you need to set the root inside your routes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;root to: &#39;home#index&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also override &lt;code&gt;after_sign_in_path_for&lt;/code&gt; and &lt;code&gt;after_sign_out_path_for&lt;/code&gt; to customize your redirect hooks.&lt;/p&gt; &#xA;&lt;p&gt;Notice that if your Devise model is called &lt;code&gt;Member&lt;/code&gt; instead of &lt;code&gt;User&lt;/code&gt;, for example, then the helpers available are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before_action :authenticate_member!&#xA;&#xA;member_signed_in?&#xA;&#xA;current_member&#xA;&#xA;member_session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Models&lt;/h3&gt; &#xA;&lt;p&gt;The Devise method in your models also accepts some options to configure its modules. For example, you can choose the cost of the hashing algorithm with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise :database_authenticatable, :registerable, :confirmable, :recoverable, stretches: 13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides &lt;code&gt;:stretches&lt;/code&gt;, you can define &lt;code&gt;:pepper&lt;/code&gt;, &lt;code&gt;:encryptor&lt;/code&gt;, &lt;code&gt;:confirm_within&lt;/code&gt;, &lt;code&gt;:remember_for&lt;/code&gt;, &lt;code&gt;:timeout_in&lt;/code&gt;, &lt;code&gt;:unlock_in&lt;/code&gt; among other options. For more details, see the initializer file that was created when you invoked the &#34;devise:install&#34; generator described above. This file is usually located at &lt;code&gt;/config/initializers/devise.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Strong Parameters&lt;/h3&gt; &#xA;&lt;p&gt;The Parameter Sanitizer API has changed for Devise 4 &lt;span&gt;‚ö†&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For previous Devise versions see &lt;a href=&#34;https://github.com/heartcombo/devise/tree/3-stable#strong-parameters&#34;&gt;https://github.com/heartcombo/devise/tree/3-stable#strong-parameters&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you customize your own views, you may end up adding new attributes to forms. Rails 4 moved the parameter sanitization from the model to the controller, causing Devise to handle this concern at the controller as well.&lt;/p&gt; &#xA;&lt;p&gt;There are just three actions in Devise that allow any set of parameters to be passed down to the model, therefore requiring sanitization. Their names and default permitted parameters are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sign_in&lt;/code&gt; (&lt;code&gt;Devise::SessionsController#create&lt;/code&gt;) - Permits only the authentication keys (like &lt;code&gt;email&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sign_up&lt;/code&gt; (&lt;code&gt;Devise::RegistrationsController#create&lt;/code&gt;) - Permits authentication keys plus &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;password_confirmation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;account_update&lt;/code&gt; (&lt;code&gt;Devise::RegistrationsController#update&lt;/code&gt;) - Permits authentication keys plus &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;password_confirmation&lt;/code&gt; and &lt;code&gt;current_password&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In case you want to permit additional parameters (the lazy way‚Ñ¢), you can do so using a simple before action in your &lt;code&gt;ApplicationController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  before_action :configure_permitted_parameters, if: :devise_controller?&#xA;&#xA;  protected&#xA;&#xA;  def configure_permitted_parameters&#xA;    devise_parameter_sanitizer.permit(:sign_up, keys: [:username])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above works for any additional fields where the parameters are simple scalar types. If you have nested attributes (say you&#39;re using &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;), then you will need to tell devise about those nestings and types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  before_action :configure_permitted_parameters, if: :devise_controller?&#xA;&#xA;  protected&#xA;&#xA;  def configure_permitted_parameters&#xA;    devise_parameter_sanitizer.permit(:sign_up, keys: [:first_name, :last_name, address_attributes: [:country, :state, :city, :area, :postal_code]])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Devise allows you to completely change Devise defaults or invoke custom behavior by passing a block:&lt;/p&gt; &#xA;&lt;p&gt;To permit simple scalar values for username and email, use this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def configure_permitted_parameters&#xA;  devise_parameter_sanitizer.permit(:sign_in) do |user_params|&#xA;    user_params.permit(:username, :email)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have some checkboxes that express the roles a user may take on registration, the browser will send those selected checkboxes as an array. An array is not one of Strong Parameters&#39; permitted scalars, so we need to configure Devise in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def configure_permitted_parameters&#xA;  devise_parameter_sanitizer.permit(:sign_up) do |user_params|&#xA;    user_params.permit({ roles: [] }, :email, :password, :password_confirmation)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the list of permitted scalars, and how to declare permitted keys in nested hashes and arrays, see&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rails/strong_parameters#nested-parameters&#34;&gt;https://github.com/rails/strong_parameters#nested-parameters&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have multiple Devise models, you may want to set up a different parameter sanitizer per model. In this case, we recommend inheriting from &lt;code&gt;Devise::ParameterSanitizer&lt;/code&gt; and adding your own logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User::ParameterSanitizer &amp;lt; Devise::ParameterSanitizer&#xA;  def initialize(*)&#xA;    super&#xA;    permit(:sign_up, keys: [:username, :email])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then configure your controllers to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  protected&#xA;&#xA;  def devise_parameter_sanitizer&#xA;    if resource_class == User&#xA;      User::ParameterSanitizer.new(User, :user, params)&#xA;    else&#xA;      super # Use the default one&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above overrides the permitted parameters for the user to be both &lt;code&gt;:username&lt;/code&gt; and &lt;code&gt;:email&lt;/code&gt;. The non-lazy way to configure parameters would be by defining the before filter above in a custom controller. We detail how to configure and customize controllers in some sections below.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring views&lt;/h3&gt; &#xA;&lt;p&gt;We built Devise to help you quickly develop an application that uses authentication. However, we don&#39;t want to be in your way when you need to customize it.&lt;/p&gt; &#xA;&lt;p&gt;Since Devise is an engine, all its views are packaged inside the gem. These views will help you get started, but after some time you may want to change them. If this is the case, you just need to invoke the following generator, and it will copy all views to your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:views&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have more than one Devise model in your application (such as &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Admin&lt;/code&gt;), you will notice that Devise uses the same views for all models. Fortunately, Devise offers an easy way to customize views. All you need to do is set &lt;code&gt;config.scoped_views = true&lt;/code&gt; inside the &lt;code&gt;config/initializers/devise.rb&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;After doing so, you will be able to have views based on the role like &lt;code&gt;users/sessions/new&lt;/code&gt; and &lt;code&gt;admins/sessions/new&lt;/code&gt;. If no view is found within the scope, Devise will use the default view at &lt;code&gt;devise/sessions/new&lt;/code&gt;. You can also use the generator to generate scoped views:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:views users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to generate only a few sets of views, like the ones for the &lt;code&gt;registerable&lt;/code&gt; and &lt;code&gt;confirmable&lt;/code&gt; module, you can pass a list of modules to the generator with the &lt;code&gt;-v&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:views -v registrations confirmations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring controllers&lt;/h3&gt; &#xA;&lt;p&gt;If the customization at the views level is not enough, you can customize each controller by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your custom controllers using the generator which requires a scope:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:controllers [scope]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you specify &lt;code&gt;users&lt;/code&gt; as the scope, controllers will be created in &lt;code&gt;app/controllers/users/&lt;/code&gt;. And the sessions controller will look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController&#xA;  # GET /resource/sign_in&#xA;  # def new&#xA;  #   super&#xA;  # end&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Use the -c flag to specify a controller, for example: &lt;code&gt;rails generate devise:controllers users -c=sessions&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tell the router to use this controller:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_for :users, controllers: { sessions: &#39;users/sessions&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the views from &lt;code&gt;devise/sessions&lt;/code&gt; to &lt;code&gt;users/sessions&lt;/code&gt;. Since the controller was changed, it won&#39;t use the default views located in &lt;code&gt;devise/sessions&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, change or extend the desired controller actions.&lt;/p&gt; &lt;p&gt;You can completely override a controller action:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController&#xA;  def create&#xA;    # custom sign-in code&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or you can simply add new behavior to it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController&#xA;  def create&#xA;    super do |resource|&#xA;      BackgroundWorker.trigger(resource)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful for triggering background jobs or logging events during certain actions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Remember that Devise uses flash messages to let users know if sign in was successful or unsuccessful. Devise expects your application to call &lt;code&gt;flash[:notice]&lt;/code&gt; and &lt;code&gt;flash[:alert]&lt;/code&gt; as appropriate. Do not print the entire flash hash, print only specific keys. In some circumstances, Devise adds a &lt;code&gt;:timedout&lt;/code&gt; key to the flash hash, which is not meant for display. Remove this key from the hash if you intend to print the entire hash.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring routes&lt;/h3&gt; &#xA;&lt;p&gt;Devise also ships with default routes. If you need to customize them, you should probably be able to do it through the devise_for method. It accepts several options like :class_name, :path_prefix and so on, including the possibility to change path names for I18n:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_for :users, path: &#39;auth&#39;, path_names: { sign_in: &#39;login&#39;, sign_out: &#39;logout&#39;, password: &#39;secret&#39;, confirmation: &#39;verification&#39;, unlock: &#39;unblock&#39;, registration: &#39;register&#39;, sign_up: &#39;cmon_let_me_in&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to check &lt;code&gt;devise_for&lt;/code&gt; &lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/ActionDispatch/Routing/Mapper%3Adevise_for&#34;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;If you have the need for more deep customization, for instance to also allow &#34;/sign_in&#34; besides &#34;/users/sign_in&#34;, all you need to do is create your routes normally and wrap them in a &lt;code&gt;devise_scope&lt;/code&gt; block in the router:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_scope :user do&#xA;  get &#39;sign_in&#39;, to: &#39;devise/sessions#new&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, you tell Devise to use the scope &lt;code&gt;:user&lt;/code&gt; when &#34;/sign_in&#34; is accessed. Notice &lt;code&gt;devise_scope&lt;/code&gt; is also aliased as &lt;code&gt;as&lt;/code&gt; in your router.&lt;/p&gt; &#xA;&lt;p&gt;Please note: You will still need to add &lt;code&gt;devise_for&lt;/code&gt; in your routes in order to use helper methods such as &lt;code&gt;current_user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_for :users, skip: :all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;I18n&lt;/h3&gt; &#xA;&lt;p&gt;Devise uses flash messages with I18n, in conjunction with the flash keys :notice and :alert. To customize your app, you can set up your locale file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  devise:&#xA;    sessions:&#xA;      signed_in: &#39;Signed in successfully.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create distinct messages based on the resource you&#39;ve configured using the singular name given in routes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  devise:&#xA;    sessions:&#xA;      user:&#xA;        signed_in: &#39;Welcome user, you are signed in.&#39;&#xA;      admin:&#xA;        signed_in: &#39;Hello admin!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Devise mailer uses a similar pattern to create subject messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  devise:&#xA;    mailer:&#xA;      confirmation_instructions:&#xA;        subject: &#39;Hello everybody!&#39;&#xA;        user_subject: &#39;Hello User! Please confirm your email&#39;&#xA;      reset_password_instructions:&#xA;        subject: &#39;Reset instructions&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at our locale file to check all available messages. You may also be interested in one of the many translations that are available on our wiki:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/I18n&#34;&gt;https://github.com/heartcombo/devise/wiki/I18n&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Caution: Devise Controllers inherit from ApplicationController. If your app uses multiple locales, you should be sure to set I18n.locale in ApplicationController.&lt;/p&gt; &#xA;&lt;h3&gt;Test helpers&lt;/h3&gt; &#xA;&lt;p&gt;Devise includes some test helpers for controller and integration tests. In order to use them, you need to include the respective module in your test cases/specs.&lt;/p&gt; &#xA;&lt;h3&gt;Controller tests&lt;/h3&gt; &#xA;&lt;p&gt;Controller tests require that you include &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt; on your test case or its parent &lt;code&gt;ActionController::TestCase&lt;/code&gt; superclass. For Rails versions prior to 5, include &lt;code&gt;Devise::Test::ControllerHelpers&lt;/code&gt; instead, since the superclass for controller tests was changed to ActionDispatch::IntegrationTest (for more details, see the &lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#integration-tests&#34;&gt;Integration tests&lt;/a&gt; section).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsControllerTest &amp;lt; ActionController::TestCase&#xA;  include Devise::Test::IntegrationHelpers # Rails &amp;gt;= 5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsControllerTest &amp;lt; ActionController::TestCase&#xA;  include Devise::Test::ControllerHelpers # Rails &amp;lt; 5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using RSpec, you can put the following inside a file named &lt;code&gt;spec/support/devise.rb&lt;/code&gt; or in your &lt;code&gt;spec/spec_helper.rb&lt;/code&gt; (or &lt;code&gt;spec/rails_helper.rb&lt;/code&gt; if you are using &lt;code&gt;rspec-rails&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.include Devise::Test::ControllerHelpers, type: :controller&#xA;  config.include Devise::Test::ControllerHelpers, type: :view&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just be sure that this inclusion is made &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;require &#39;rspec/rails&#39;&lt;/code&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;Now you are ready to use the &lt;code&gt;sign_in&lt;/code&gt; and &lt;code&gt;sign_out&lt;/code&gt; methods on your controller tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sign_in @user&#xA;sign_in @user, scope: :admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are testing Devise internal controllers or a controller that inherits from Devise&#39;s, you need to tell Devise which mapping should be used before a request. This is necessary because Devise gets this information from the router, but since controller tests do not pass through the router, it needs to be stated explicitly. For example, if you are testing the user scope, simply use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;test &#39;GET new&#39; do&#xA;  # Mimic the router behavior of setting the Devise scope through the env.&#xA;  @request.env[&#39;devise.mapping&#39;] = Devise.mappings[:user]&#xA;&#xA;  # Use the sign_in helper to sign in a fixture `User` record.&#xA;  sign_in users(:alice)&#xA;&#xA;  get :new&#xA;&#xA;  # assert something&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration tests&lt;/h3&gt; &#xA;&lt;p&gt;Integration test helpers are available by including the &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsTests &amp;lt; ActionDispatch::IntegrationTest&#xA;  include Devise::Test::IntegrationHelpers&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use the following &lt;code&gt;sign_in&lt;/code&gt; and &lt;code&gt;sign_out&lt;/code&gt; methods in your integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sign_in users(:bob)&#xA;sign_in users(:bob), scope: :admin&#xA;&#xA;sign_out :user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSpec users can include the &lt;code&gt;IntegrationHelpers&lt;/code&gt; module on their &lt;code&gt;:feature&lt;/code&gt; specs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.include Devise::Test::IntegrationHelpers, type: :feature&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike controller tests, integration tests do not need to supply the &lt;code&gt;devise.mapping&lt;/code&gt; &lt;code&gt;env&lt;/code&gt; value, as the mapping can be inferred by the routes that are executed in your tests.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about testing your Rails 3 - Rails 4 controllers with RSpec in the wiki:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Test-controllers-with-Rails-(and-RSpec)&#34;&gt;https://github.com/heartcombo/devise/wiki/How-To:-Test-controllers-with-Rails-(and-RSpec)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;OmniAuth&lt;/h3&gt; &#xA;&lt;p&gt;Devise comes with OmniAuth support out of the box to authenticate with other providers. To use it, simply specify your OmniAuth configuration in &lt;code&gt;config/initializers/devise.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.omniauth :github, &#39;APP_ID&#39;, &#39;APP_SECRET&#39;, scope: &#39;user,public_repo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read more about OmniAuth support in the wiki:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview&#34;&gt;https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuring multiple models&lt;/h3&gt; &#xA;&lt;p&gt;Devise allows you to set up as many Devise models as you want. If you want to have an Admin model with just authentication and timeout features, in addition to the User model above, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Create a migration with the required fields&#xA;create_table :admins do |t|&#xA;  t.string :email&#xA;  t.string :encrypted_password&#xA;  t.timestamps null: false&#xA;end&#xA;&#xA;# Inside your Admin model&#xA;devise :database_authenticatable, :timeoutable&#xA;&#xA;# Inside your routes&#xA;devise_for :admins&#xA;&#xA;# Inside your protected controller&#xA;before_action :authenticate_admin!&#xA;&#xA;# Inside your controllers and views&#xA;admin_signed_in?&#xA;current_admin&#xA;admin_session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can simply run the Devise generator.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that those models will have completely different routes. They &lt;strong&gt;do not&lt;/strong&gt; and &lt;strong&gt;cannot&lt;/strong&gt; share the same controller for sign in, sign out and so on. In case you want to have different roles sharing the same actions, we recommend that you use a role-based approach, by either providing a role column or using a dedicated gem for authorization.&lt;/p&gt; &#xA;&lt;h3&gt;ActiveJob Integration&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Rails 4.2 and ActiveJob to deliver ActionMailer messages in the background through a queuing back-end, you can send Devise emails through your existing queue by overriding the &lt;code&gt;send_devise_notification&lt;/code&gt; method in your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def send_devise_notification(notification, *args)&#xA;  devise_mailer.send(notification, self, *args).deliver_later&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Password reset tokens and Rails logs&lt;/h3&gt; &#xA;&lt;p&gt;If you enable the &lt;a href=&#34;http://rubydoc.info/github/heartcombo/devise/main/Devise/Models/Recoverable&#34;&gt;Recoverable&lt;/a&gt; module, note that a stolen password reset token could give an attacker access to your application. Devise takes effort to generate random, secure tokens, and stores only token digests in the database, never plaintext. However the default logging behavior in Rails can cause plaintext tokens to leak into log files:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Action Mailer logs the entire contents of all outgoing emails to the DEBUG level. Password reset tokens delivered to users in email will be leaked.&lt;/li&gt; &#xA; &lt;li&gt;Active Job logs all arguments to every enqueued job at the INFO level. If you configure Devise to use &lt;code&gt;deliver_later&lt;/code&gt; to send password reset emails, password reset tokens will be leaked.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Rails sets the production logger level to INFO by default. Consider changing your production logger level to WARN if you wish to prevent tokens from being leaked into your logs. In &lt;code&gt;config/environments/production.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.log_level = :warn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other ORMs&lt;/h3&gt; &#xA;&lt;p&gt;Devise supports ActiveRecord (default) and Mongoid. To select another ORM, simply require it in the initializer file.&lt;/p&gt; &#xA;&lt;h3&gt;Rails API Mode&lt;/h3&gt; &#xA;&lt;p&gt;Rails 5+ has a built-in &lt;a href=&#34;https://edgeguides.rubyonrails.org/api_app.html&#34;&gt;API Mode&lt;/a&gt; which optimizes Rails for use as an API (only). Devise is &lt;em&gt;somewhat&lt;/em&gt; able to handle applications that are built in this mode without additional modifications in the sense that it should not raise exceptions and the like. But some issues may still arise during &lt;code&gt;development&lt;/code&gt;/&lt;code&gt;testing&lt;/code&gt;, as we still don&#39;t know the full extent of this compatibility. (For more information, see &lt;a href=&#34;https://github.com/heartcombo/devise/issues/4947/&#34;&gt;issue #4947&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Supported Authentication Strategies&lt;/h4&gt; &#xA;&lt;p&gt;API-only applications don&#39;t support browser-based authentication via cookies, which is devise&#39;s default. Yet, devise can still provide authentication out of the box in those cases with the &lt;code&gt;http_authenticatable&lt;/code&gt; strategy, which uses HTTP Basic Auth and authenticates the user on each request. (For more info, see this wiki article for &lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Use-HTTP-Basic-Authentication&#34;&gt;How To: Use HTTP Basic Authentication&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;The devise default for HTTP Auth is disabled, so it will need to be enabled in the devise initializer for the database strategy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.http_authenticatable = [:database]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This restriction does not limit you from implementing custom warden strategies, either in your application or via gem-based extensions for devise. A common authentication strategy for APIs is token-based authentication. For more information on extending devise to support this type of authentication and others, see the wiki article for &lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Simple-Token-Authentication-Example#alternatives&#34;&gt;Simple Token Authentication Examples and alternatives&lt;/a&gt; or this blog post on &lt;a href=&#34;http://blog.plataformatec.com.br/2019/01/custom-authentication-methods-with-devise/&#34;&gt;Custom authentication methods with Devise&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;API Mode changes the order of the middleware stack, and this can cause problems for &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt;. This problem usually surfaces as an &lt;code&gt;undefined method `[]=&#39; for nil:NilClass&lt;/code&gt; error when using integration test helpers, such as &lt;code&gt;#sign_in&lt;/code&gt;. The solution is simply to reorder the middlewares by adding the following to test.rb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Cookies&#xA;Rails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Session::CookieStore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a deeper understanding of this, review &lt;a href=&#34;https://github.com/heartcombo/devise/issues/4696&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally be mindful that without views supported, some email-based flows from Confirmable, Recoverable and Lockable are not supported directly at this time.&lt;/p&gt; &#xA;&lt;h2&gt;Additional information&lt;/h2&gt; &#xA;&lt;h3&gt;Warden&lt;/h3&gt; &#xA;&lt;p&gt;Devise is based on Warden, which is a general Rack authentication framework created by Daniel Neighman. We encourage you to read more about Warden here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wardencommunity/warden&#34;&gt;https://github.com/wardencommunity/warden&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;We have a long list of valued contributors. Check them all at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/graphs/contributors&#34;&gt;https://github.com/heartcombo/devise/graphs/contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License. Copyright 2020 Rafael Fran√ßa, Leonardo Tegon, Carlos Ant√¥nio da Silva. Copyright 2009-2019 Plataformatec.&lt;/p&gt; &#xA;&lt;p&gt;The Devise logo is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ruby/ruby</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/ruby/ruby</id>
    <link href="https://github.com/ruby/ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Ruby Programming Language [mirror]&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ruby/ruby/actions?query=workflow%3A%22MinGW%22&#34;&gt;&lt;img src=&#34;https://github.com/ruby/ruby/workflows/MinGW/badge.svg?sanitize=true&#34; alt=&#34;Actions Status: MinGW&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ruby/ruby/actions?query=workflow%3A%22MJIT%22&#34;&gt;&lt;img src=&#34;https://github.com/ruby/ruby/workflows/MJIT/badge.svg?sanitize=true&#34; alt=&#34;Actions Status: MJIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ruby/ruby/actions?query=workflow%3A%22Ubuntu%22&#34;&gt;&lt;img src=&#34;https://github.com/ruby/ruby/workflows/Ubuntu/badge.svg?sanitize=true&#34; alt=&#34;Actions Status: Ubuntu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ruby/ruby/actions?query=workflow%3A%22Windows%22&#34;&gt;&lt;img src=&#34;https://github.com/ruby/ruby/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Actions Status: Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/ruby/ruby/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/0sy8rrxut4o0k960/branch/master?svg=true&#34; alt=&#34;AppVeyor status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.travis-ci.com/ruby/ruby&#34;&gt;&lt;img src=&#34;https://app.travis-ci.com/ruby/ruby.svg?branch=master&#34; alt=&#34;Travis Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/ruby/ruby/master&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/ruby/ruby.svg?sanitize=true&#34; alt=&#34;Cirrus Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is Ruby?&lt;/h1&gt; &#xA;&lt;p&gt;Ruby is an interpreted object-oriented programming language often used for web development. It also offers many scripting features to process plain text and serialized files, or manage system tasks. It is simple, straightforward, and extensible.&lt;/p&gt; &#xA;&lt;h2&gt;Features of Ruby&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple Syntax&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Normal&lt;/strong&gt; Object-oriented Features (e.g. class, method calls)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced&lt;/strong&gt; Object-oriented Features (e.g. mix-in, singleton-method)&lt;/li&gt; &#xA; &lt;li&gt;Operator Overloading&lt;/li&gt; &#xA; &lt;li&gt;Exception Handling&lt;/li&gt; &#xA; &lt;li&gt;Iterators and Closures&lt;/li&gt; &#xA; &lt;li&gt;Garbage Collection&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Loading of Object Files (on some architectures)&lt;/li&gt; &#xA; &lt;li&gt;Highly Portable (works on many Unix-like/POSIX compatible platforms as well as Windows, macOS, etc.) cf. &lt;a href=&#34;https://github.com/ruby/ruby/raw/master/doc/maintainers.rdoc#label-Platform+Maintainers&#34;&gt;https://github.com/ruby/ruby/blob/master/doc/maintainers.rdoc#label-Platform+Maintainers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to get Ruby with Git&lt;/h2&gt; &#xA;&lt;p&gt;For a complete list of ways to install Ruby, including using third-party tools like rvm, see:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/downloads/&#34;&gt;https://www.ruby-lang.org/en/downloads/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The mirror of the Ruby source tree can be checked out with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ruby/ruby.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are some other branches under development. Try the following command to see the list of branches:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git ls-remote https://github.com/ruby/ruby.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also want to use &lt;a href=&#34;https://git.ruby-lang.org/ruby.git&#34;&gt;https://git.ruby-lang.org/ruby.git&lt;/a&gt; (actual master of Ruby source) if you are a committer.&lt;/p&gt; &#xA;&lt;h2&gt;Ruby home page&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ruby-lang.org/&#34;&gt;https://www.ruby-lang.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ruby-lang.org/en/master/index.html&#34;&gt;English&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ruby-lang.org/ja/master/index.html&#34;&gt;Japanese&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mailing list&lt;/h2&gt; &#xA;&lt;p&gt;There is a mailing list to discuss Ruby. To subscribe to this list, please send the following phrase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;subscribe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in the mail body (not subject) to the address &lt;a href=&#34;mailto:ruby-talk-request@ruby-lang.org?subject=Join%20Ruby%20Mailing%20List&amp;amp;body=subscribe&#34;&gt;ruby-talk-request@ruby-lang.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copying&lt;/h2&gt; &#xA;&lt;p&gt;See the file &lt;a href=&#34;rdoc-ref:COPYING&#34;&gt;COPYING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Questions about the Ruby language can be asked on the &lt;a href=&#34;https://www.ruby-lang.org/en/community/mailing-lists&#34;&gt;Ruby-Talk&lt;/a&gt; mailing list or on websites like &lt;a href=&#34;https://stackoverflow.com&#34;&gt;https://stackoverflow.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bugs should be reported at &lt;a href=&#34;https://bugs.ruby-lang.org&#34;&gt;https://bugs.ruby-lang.org&lt;/a&gt;. Read &lt;a href=&#34;https://docs.ruby-lang.org/en/master/reporting_issues_md.html&#34;&gt;&#34;Reporting Issues&#34;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.ruby-lang.org/en/master/contributing_md.html&#34;&gt;&#34;Contributing to Ruby&#34;&lt;/a&gt;, which includes setup and build instructions.&lt;/p&gt; &#xA;&lt;h2&gt;The Author&lt;/h2&gt; &#xA;&lt;p&gt;Ruby was originally designed and developed by Yukihiro Matsumoto (Matz) in 1995.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:matz@ruby-lang.org&#34;&gt;matz@ruby-lang.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rails/rails</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/rails/rails</id>
    <link href="https://github.com/rails/rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby on Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Rails&lt;/h1&gt; &#xA;&lt;h2&gt;What&#39;s Rails?&lt;/h2&gt; &#xA;&lt;p&gt;Rails is a web-application framework that includes everything needed to create database-backed web applications according to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Model-view-controller&#34;&gt;Model-View-Controller (MVC)&lt;/a&gt; pattern.&lt;/p&gt; &#xA;&lt;p&gt;Understanding the MVC pattern is key to understanding Rails. MVC divides your application into three layers: Model, View, and Controller, each with a specific responsibility.&lt;/p&gt; &#xA;&lt;h2&gt;Model layer&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;strong&gt;Model layer&lt;/strong&gt;&lt;/em&gt; represents the domain model (such as Account, Product, Person, Post, etc.) and encapsulates the business logic specific to your application. In Rails, database-backed model classes are derived from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activerecord/README.rdoc&#34;&gt;Active Record&lt;/a&gt; allows you to present the data from database rows as objects and embellish these data objects with business logic methods. Although most Rails models are backed by a database, models can also be ordinary Ruby classes, or Ruby classes that implement a set of interfaces as provided by the &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activemodel/README.rdoc&#34;&gt;Active Model&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;h2&gt;View layer&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;strong&gt;View layer&lt;/strong&gt;&lt;/em&gt; is composed of &#34;templates&#34; that are responsible for providing appropriate representations of your application&#39;s resources. Templates can come in a variety of formats, but most view templates are HTML with embedded Ruby code (ERB files). Views are typically rendered to generate a controller response or to generate the body of an email. In Rails, View generation is handled by &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionview/README.rdoc&#34;&gt;Action View&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Controller layer&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;strong&gt;Controller layer&lt;/strong&gt;&lt;/em&gt; is responsible for handling incoming HTTP requests and providing a suitable response. Usually, this means returning HTML, but Rails controllers can also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and manipulate models, and render view templates in order to generate the appropriate HTTP response. In Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and controller classes are derived from &lt;code&gt;ActionController::Base&lt;/code&gt;. Action Dispatch and Action Controller are bundled together in &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionpack/README.rdoc&#34;&gt;Action Pack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Frameworks and libraries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activerecord/README.rdoc&#34;&gt;Active Record&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activemodel/README.rdoc&#34;&gt;Active Model&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionpack/README.rdoc&#34;&gt;Action Pack&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionview/README.rdoc&#34;&gt;Action View&lt;/a&gt; can each be used independently outside Rails.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that, Rails also comes with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionmailer/README.rdoc&#34;&gt;Action Mailer&lt;/a&gt;, a library to generate and send emails&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionmailbox/README.md&#34;&gt;Action Mailbox&lt;/a&gt;, a library to receive emails within a Rails application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activejob/README.md&#34;&gt;Active Job&lt;/a&gt;, a framework for declaring jobs and making them run on a variety of queuing backends&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actioncable/README.md&#34;&gt;Action Cable&lt;/a&gt;, a framework to integrate WebSockets with a Rails application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activestorage/README.md&#34;&gt;Active Storage&lt;/a&gt;, a library to attach cloud and local files to Rails applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actiontext/README.md&#34;&gt;Action Text&lt;/a&gt;, a library to handle rich text content&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activesupport/README.rdoc&#34;&gt;Active Support&lt;/a&gt;, a collection of utility classes and standard library extensions that are useful for Rails, and may also be used independently outside Rails&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Rails at the command prompt if you haven&#39;t yet:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ gem install rails&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;At the command prompt, create a new Rails application:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ rails new myapp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where &#34;myapp&#34; is the application name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directory to &lt;code&gt;myapp&lt;/code&gt; and start the web server:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ cd myapp&#xA; $ bin/rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run with &lt;code&gt;--help&lt;/code&gt; or &lt;code&gt;-h&lt;/code&gt; for options.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;code&gt;http://localhost:3000&lt;/code&gt; and you&#39;ll see the Rails bootscreen with your Rails and Ruby versions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the guidelines to start developing your application. You may find the following resources handy:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/getting_started.html&#34;&gt;Getting Started with Rails&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org&#34;&gt;Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://api.rubyonrails.org&#34;&gt;The API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to contribute to Ruby on Rails! Please check out the &lt;a href=&#34;https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html&#34;&gt;Contributing to Ruby on Rails guide&lt;/a&gt; for guidelines about how to proceed. &lt;a href=&#34;https://contributors.rubyonrails.org&#34;&gt;Join us!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Trying to report a possible security vulnerability in Rails? Please check out our &lt;a href=&#34;https://rubyonrails.org/security&#34;&gt;security policy&lt;/a&gt; for guidelines about how to proceed.&lt;/p&gt; &#xA;&lt;p&gt;Everyone interacting in Rails and its sub-projects&#39; codebases, issue trackers, chat rooms, and mailing lists is expected to follow the Rails &lt;a href=&#34;https://rubyonrails.org/conduct&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Ruby on Rails is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rspec/rspec-rails</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/rspec/rspec-rails</id>
    <link href="https://github.com/rspec/rspec-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RSpec for Rails 5+&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rspec-rails &lt;a href=&#34;https://codeclimate.com/github/rspec/rspec-rails&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rspec/rspec-rails.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/rspec-rails&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rspec-rails.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;rspec-rails&lt;/code&gt; brings the &lt;a href=&#34;https://rspec.info/&#34;&gt;RSpec&lt;/a&gt; testing framework to &lt;a href=&#34;https://rubyonrails.org/&#34;&gt;Ruby on Rails&lt;/a&gt; as a drop-in alternative to its default testing framework, Minitest.&lt;/p&gt; &#xA;&lt;p&gt;In RSpec, tests are not just scripts that verify your application code. They‚Äôre also specifications (or &lt;em&gt;specs,&lt;/em&gt; for short): detailed explanations of how the application is supposed to behave, expressed in plain English.&lt;/p&gt; &#xA;&lt;p&gt;According to &lt;a href=&#34;https://github.com/rspec/rspec-rails/raw/main/rfcs/versioning-strategy.md&#34;&gt;RSpec Rails new versioning strategy&lt;/a&gt; use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/6-0-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 6.x&lt;/a&gt;&lt;/strong&gt; for Rails 6.1 or 7.x.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/5-1-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 5.x&lt;/a&gt;&lt;/strong&gt; for Rails 5.2 or 6.x.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/4-1-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 4.x&lt;/a&gt;&lt;/strong&gt; for Rails from 5.x or 6.x.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/3-9-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 3.x&lt;/a&gt;&lt;/strong&gt; for Rails earlier than 5.0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/dchelimsky/rspec-rails&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 1.x&lt;/a&gt;&lt;/strong&gt; for Rails 2.x.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; This README / branch refers to the current development build. See the &lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/6-0-maintenance&#34;&gt;&lt;code&gt;6-0-maintenance&lt;/code&gt; branch on Github&lt;/a&gt; if you want or require the latest stable release.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;rspec-rails&lt;/code&gt; to &lt;strong&gt;both&lt;/strong&gt; the &lt;code&gt;:development&lt;/code&gt; and &lt;code&gt;:test&lt;/code&gt; groups of your app‚Äôs &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Run against this stable release&#xA;group :development, :test do&#xA;  gem &#39;rspec-rails&#39;, &#39;~&amp;gt; 6.0.0&#39;&#xA;end&#xA;&#xA;# Or, run against the main branch&#xA;# (requires main-branch versions of all related RSpec libraries)&#xA;group :development, :test do&#xA;  %w[rspec-core rspec-expectations rspec-mocks rspec-rails rspec-support].each do |lib|&#xA;    gem lib, git: &#34;https://github.com/rspec/#{lib}.git&#34;, branch: &#39;main&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Adding it to the &lt;code&gt;:development&lt;/code&gt; group is not strictly necessary, but without it, generators and rake tasks must be preceded by &lt;code&gt;RAILS_ENV=test&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then, in your project directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Download and install&#xA;$ bundle install&#xA;&#xA;# Generate boilerplate configuration files&#xA;# (check the comments in each generated file for more information)&#xA;$ rails generate rspec:install&#xA;      create  .rspec&#xA;      create  spec&#xA;      create  spec/spec_helper.rb&#xA;      create  spec/rails_helper.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;If your project is already using an older version of &lt;code&gt;rspec-rails&lt;/code&gt;, upgrade to the latest version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle update rspec-rails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSpec follows &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;, which means that ‚Äúmajor version‚Äù upgrades (&lt;em&gt;e.g.,&lt;/em&gt; 2.x ‚Üí 3.x) come with &lt;strong&gt;breaking changes&lt;/strong&gt;. If you‚Äôre upgrading from version 2.x or below, read the &lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/upgrade&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; upgrade notes&lt;/a&gt; to find out what to watch out for.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to check the general &lt;a href=&#34;https://relishapp.com/rspec/docs/upgrade&#34;&gt;RSpec upgrade notes&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Creating boilerplate specs with &lt;code&gt;rails generate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# RSpec hooks into built-in generators&#xA;$ rails generate model user&#xA;      invoke  active_record&#xA;      create    db/migrate/20181017040312_create_users.rb&#xA;      create    app/models/user.rb&#xA;      invoke    rspec&#xA;      create      spec/models/user_spec.rb&#xA;&#xA;# RSpec also provides its own spec file generators&#xA;$ rails generate rspec:model user&#xA;      create  spec/models/user_spec.rb&#xA;&#xA;# List all RSpec generators&#xA;$ rails generate --help | grep rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running specs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Default: Run all spec files (i.e., those matching spec/**/*_spec.rb)&#xA;$ bundle exec rspec&#xA;&#xA;# Run all spec files in a single directory (recursively)&#xA;$ bundle exec rspec spec/models&#xA;&#xA;# Run a single spec file&#xA;$ bundle exec rspec spec/controllers/accounts_controller_spec.rb&#xA;&#xA;# Run a single example from a spec file (by line number)&#xA;$ bundle exec rspec spec/controllers/accounts_controller_spec.rb:8&#xA;&#xA;# See all options for running specs&#xA;$ bundle exec rspec --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt; If &lt;code&gt;bundle exec rspec&lt;/code&gt; is too verbose for you, you can generate a binstub at &lt;code&gt;bin/rspec&lt;/code&gt; and use that instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle binstubs rspec-core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RSpec DSL Basics (or, how do I write a spec?)&lt;/h2&gt; &#xA;&lt;p&gt;In RSpec, application behavior is described &lt;strong&gt;first in (almost) plain English, then again in test code&lt;/strong&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe &#39;Post&#39; do           #&#xA;  context &#39;before publication&#39; do  # (almost) plain English&#xA;    it &#39;cannot have comments&#39; do   #&#xA;      expect { Post.create.comments.create! }.to raise_error(ActiveRecord::RecordInvalid)  # test code&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;rspec&lt;/code&gt; will execute this test code, and then use the plain-English descriptions to generate a report of where the application conforms to (or fails to meet) the spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec --format documentation spec/models/post_spec.rb&#xA;&#xA;Post&#xA;  before publication&#xA;    cannot have comments&#xA;&#xA;Failures:&#xA;&#xA;  1) Post before publication cannot have comments&#xA;     Failure/Error: expect { Post.create.comments.create! }.to raise_error(ActiveRecord::RecordInvalid)&#xA;       expected ActiveRecord::RecordInvalid but nothing was raised&#xA;     # ./spec/models/post.rb:4:in `block (3 levels) in &amp;lt;top (required)&amp;gt;&#39;&#xA;&#xA;Finished in 0.00527 seconds (files took 0.29657 seconds to load)&#xA;1 example, 1 failure&#xA;&#xA;Failed examples:&#xA;&#xA;rspec ./spec/models/post_spec.rb:3 # Post before publication cannot have comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an in-depth look at the RSpec DSL, including lots of examples, read the official Cucumber documentation for &lt;a href=&#34;https://relishapp.com/rspec/rspec-core/docs&#34;&gt;RSpec Core&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Helpful Rails Matchers&lt;/h3&gt; &#xA;&lt;p&gt;In RSpec, assertions are called &lt;em&gt;expectations,&lt;/em&gt; and every expectation is built around a &lt;em&gt;matcher.&lt;/em&gt; When you &lt;code&gt;expect(a).to eq(b)&lt;/code&gt;, you‚Äôre using the &lt;code&gt;eq&lt;/code&gt; matcher.&lt;/p&gt; &#xA;&lt;p&gt;In addition to &lt;a href=&#34;https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers&#34;&gt;the matchers that come standard in RSpec&lt;/a&gt;, here are some extras that make it easier to test the various parts of a Rails system:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;RSpec matcher&lt;/th&gt; &#xA;   &lt;th&gt;Delegates to&lt;/th&gt; &#xA;   &lt;th&gt;Available in&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/be-a-new-matcher&#34;&gt;&lt;code&gt;be_a_new&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;primarily intended for controller specs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/render-template-matcher&#34;&gt;&lt;code&gt;render_template&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assert_template&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;request / controller / view&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(response).to&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/redirect-to-matcher&#34;&gt;&lt;code&gt;redirect_to&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assert_redirect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;request / controller&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(response).to&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/routing-specs/route-to-matcher&#34;&gt;&lt;code&gt;route_to&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assert_recognizes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;routing / controller&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(...).to route_to&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/routing-specs/be-routable-matcher&#34;&gt;&lt;code&gt;be_routable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;routing / controller&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(...).not_to be_routable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/have-http-status-matcher&#34;&gt;&lt;code&gt;have_http_status&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;request / controller / feature&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/activerecord-relation-match-array&#34;&gt;&lt;code&gt;match_array&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;for comparing arrays of ActiveRecord objects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/have-been-enqueued-matcher&#34;&gt;&lt;code&gt;have_been_enqueued&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;requires config: &lt;code&gt;ActiveJob::Base.queue_adapter = :test&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/have-enqueued-job-matcher&#34;&gt;&lt;code&gt;have_enqueued_job&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;requires config: &lt;code&gt;ActiveJob::Base.queue_adapter = :test&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Follow the links above for examples of how each matcher is used.&lt;/p&gt; &#xA;&lt;h3&gt;What else does RSpec Rails add?&lt;/h3&gt; &#xA;&lt;p&gt;For a comprehensive look at RSpec Rails‚Äô features, read the &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs&#34;&gt;official Cucumber documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What tests should I write?&lt;/h2&gt; &#xA;&lt;p&gt;RSpec Rails defines ten different &lt;em&gt;types&lt;/em&gt; of specs for testing different parts of a typical Rails application. Each one inherits from one of Rails‚Äô built-in &lt;code&gt;TestCase&lt;/code&gt; classes, meaning the helper methods provided by default in Rails tests are available in RSpec, as well.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Spec type&lt;/th&gt; &#xA;   &lt;th&gt;Corresponding Rails test class&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/model-specs&#34;&gt;model&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/controller-specs&#34;&gt;controller&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionController/TestCase.html&#34;&gt;&lt;code&gt;ActionController::TestCase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/mailer-specs&#34;&gt;mailer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ActionMailer::TestCase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/job-specs/job-spec&#34;&gt;job&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/view-specs/view-spec&#34;&gt;view&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ActionView::TestCase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/routing-specs&#34;&gt;routing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/helper-specs/helper-spec&#34;&gt;helper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ActionView::TestCase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/request-specs/request-spec&#34;&gt;request&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/IntegrationTest.html&#34;&gt;&lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec&#34;&gt;feature&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/system-specs/system-spec&#34;&gt;system&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/SystemTestCase.html&#34;&gt;&lt;code&gt;ActionDispatch::SystemTestCase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Follow the links above to see examples of each spec type, or for official Rails API documentation on the given &lt;code&gt;TestCase&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note: This is not a checklist.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Ask a hundred developers how to test an application, and you‚Äôll get a hundred different answers.&lt;/p&gt; &#xA; &lt;p&gt;RSpec Rails provides thoughtfully selected features to encourage good testing practices, but there‚Äôs no ‚Äúright‚Äù way to do it. Ultimately, it‚Äôs up to you to decide how your test suite will be composed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When creating a spec file, assign it a type in the top-level &lt;code&gt;describe&lt;/code&gt; block, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/models/user_spec.rb&#xA;&#xA;RSpec.describe User, type: :model do&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;System specs, feature specs, request specs‚Äìwhat‚Äôs the difference?&lt;/h3&gt; &#xA;&lt;p&gt;RSpec Rails provides some end-to-end (entire application) testing capability to specify the interaction with the client.&lt;/p&gt; &#xA;&lt;h4&gt;System specs&lt;/h4&gt; &#xA;&lt;p&gt;Also called &lt;strong&gt;acceptance tests&lt;/strong&gt;, &lt;strong&gt;browser tests&lt;/strong&gt;, or &lt;strong&gt;end-to-end tests&lt;/strong&gt;, system specs test the application from the perspective of a &lt;em&gt;human client.&lt;/em&gt; The test code walks through a user‚Äôs browser interactions,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;visit &#39;/login&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fill_in &#39;Name&#39;, with: &#39;jdoe&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and the expectations revolve around page content.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;expect(page).to have_text(&#39;Welcome&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Because system specs are a wrapper around Rails‚Äô built-in &lt;code&gt;SystemTestCase&lt;/code&gt;, they‚Äôre only available on Rails 5.1+. (Feature specs serve the same purpose, but without this dependency.)&lt;/p&gt; &#xA;&lt;h4&gt;Feature specs&lt;/h4&gt; &#xA;&lt;p&gt;Before Rails introduced system testing facilities, feature specs were the only spec type for end-to-end testing. While the RSpec team now &lt;a href=&#34;https://rspec.info/blog/2017/10/rspec-3-7-has-been-released/#rails-actiondispatchsystemtest-integration-system-specs&#34;&gt;officially recommends system specs&lt;/a&gt; instead, feature specs are still fully supported, look basically identical, and work on older versions of Rails.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, feature specs require non-trivial configuration to get some important features working, like JavaScript testing or making sure each test runs with a fresh DB state. With system specs, this configuration is provided out-of-the-box.&lt;/p&gt; &#xA;&lt;p&gt;Like system specs, feature specs require the &lt;a href=&#34;https://github.com/teamcapybara/capybara&#34;&gt;Capybara&lt;/a&gt; gem. Rails 5.1+ includes it by default as part of system tests, but if you don‚Äôt have the luxury of upgrading, be sure to add it to the &lt;code&gt;:test&lt;/code&gt; group of your &lt;code&gt;Gemfile&lt;/code&gt; first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :test do&#xA;  gem &#34;capybara&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Request specs&lt;/h4&gt; &#xA;&lt;p&gt;Request specs are for testing the application from the perspective of a &lt;em&gt;machine client.&lt;/em&gt; They begin with an HTTP request and end with the HTTP response, so they‚Äôre faster than feature specs, but do not examine your app‚Äôs UI or JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;Request specs provide a high-level alternative to controller specs. In fact, as of RSpec 3.5, both the Rails and RSpec teams &lt;a href=&#34;https://rspec.info/blog/2016/07/rspec-3-5-has-been-released/#rails-support-for-rails-5&#34;&gt;discourage directly testing controllers&lt;/a&gt; in favor of functional tests like request specs.&lt;/p&gt; &#xA;&lt;p&gt;When writing them, try to answer the question, ‚ÄúFor a given HTTP request (verb + path + parameters), what HTTP response should the application return?‚Äù&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/BUILD_DETAIL.md&#34;&gt;Build details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/CONTRIBUTING.md&#34;&gt;Detailed contributing guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you‚Äôve cloned the repo and &lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/DEVELOPMENT.md&#34;&gt;set up the environment&lt;/a&gt;, you can run the specs and Cucumber features, or submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;h3&gt;RSpec base libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;https://github.com/rspec/rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-core&#34;&gt;https://github.com/rspec/rspec-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-expectations&#34;&gt;https://github.com/rspec/rspec-expectations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-mocks&#34;&gt;https://github.com/rspec/rspec-mocks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recommended third-party extensions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thoughtbot/factory_bot&#34;&gt;FactoryBot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teamcapybara/capybara&#34;&gt;Capybara&lt;/a&gt; (Included by default in Rails 5.1+. Note that &lt;a href=&#34;https://rubydoc.info/gems/rspec-rails/file/Capybara.md&#34;&gt;additional configuration is required&lt;/a&gt; to use the Capybara DSL anywhere other than system specs and feature specs.)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rmosolgo/graphql-ruby</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/rmosolgo/graphql-ruby</id>
    <link href="https://github.com/rmosolgo/graphql-ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby implementation of GraphQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;graphql &lt;img src=&#34;https://cloud.githubusercontent.com/assets/2231765/9094460/cb43861e-3b66-11e5-9fbf-71066ff3ab13.png&#34; height=&#34;40&#34; alt=&#34;graphql-ruby&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rmosolgo/graphql-ruby/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/rmosolgo/graphql-ruby/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI Suite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/graphql&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/graphql.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Ruby implementation of &lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graphql-ruby.org/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rubydoc.info/github/rmosolgo/graphql-ruby&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tinyletter.com/graphql-ruby&#34;&gt;Newsletter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install from RubyGems by adding it to your &lt;code&gt;Gemfile&lt;/code&gt;, then bundling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile&#xA;gem &#39;graphql&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rails generate graphql:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this, you may need to run &lt;code&gt;bundle install&lt;/code&gt; again, as by default graphiql-rails is added on installation.&lt;/p&gt; &#xA;&lt;p&gt;Or, see &lt;a href=&#34;https://graphql-ruby.org/getting_started.html&#34;&gt;&#34;Getting Started&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrade&lt;/h2&gt; &#xA;&lt;p&gt;I also sell &lt;a href=&#34;https://graphql.pro&#34;&gt;GraphQL::Pro&lt;/a&gt; which provides several features on top of the GraphQL runtime, including &lt;a href=&#34;https://graphql-ruby.org/authorization/pundit_integration&#34;&gt;Pundit authorization&lt;/a&gt;, &lt;a href=&#34;https://graphql-ruby.org/authorization/can_can_integration&#34;&gt;CanCan authorization&lt;/a&gt;, &lt;a href=&#34;https://graphql-ruby.org/subscriptions/pusher_implementation&#34;&gt;Pusher-based subscriptions&lt;/a&gt; and &lt;a href=&#34;https://graphql-ruby.org/operation_store/overview&#34;&gt;persisted queries&lt;/a&gt;. Besides that, Pro customers get email support and an opportunity to support graphql-ruby&#39;s development!&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement the GraphQL spec &amp;amp; support a Relay front end&lt;/li&gt; &#xA; &lt;li&gt;Provide idiomatic, plain-Ruby API with similarities to reference implementation where possible&lt;/li&gt; &#xA; &lt;li&gt;Support Ruby on Rails and Relay&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Involved&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Say hi &amp;amp; ask questions&lt;/strong&gt; in the #graphql-ruby channel on &lt;a href=&#34;https://discord.com/invite/xud7bH9&#34;&gt;Discord&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/rmosolgo&#34;&gt;on Twitter&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Report bugs&lt;/strong&gt; by posting a description, full stack trace, and all relevant code in a &lt;a href=&#34;https://github.com/rmosolgo/graphql-ruby/issues&#34;&gt;GitHub issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start hacking&lt;/strong&gt; with the &lt;a href=&#34;https://graphql-ruby.org/development&#34;&gt;Development guide&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>testdouble/mocktail</title>
    <updated>2022-05-29T01:34:02Z</updated>
    <id>tag:github.com,2022-05-29:/testdouble/mocktail</id>
    <link href="https://github.com/testdouble/mocktail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/79303/134366631-9c6cfe67-a9c0-4096-bbea-ba1698a85b0b.png&#34; width=&#34;90%&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mocktail üç∏&lt;/h1&gt; &#xA;&lt;p&gt;Mocktail is a &lt;a href=&#34;https://github.com/testdouble/contributing-tests/wiki/Test-Double&#34;&gt;test double&lt;/a&gt; library for Ruby that provides a terse and robust API for creating mocks, getting them in the hands of the code you&#39;re testing, stub &amp;amp; verify behavior, and even safely override class methods.&lt;/p&gt; &#xA;&lt;h2&gt;An aperitif&lt;/h2&gt; &#xA;&lt;p&gt;Before getting into the details, let&#39;s demonstrate what Mocktail&#39;s API looks like. Suppose you want to test a &lt;code&gt;Bartender&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Bartender&#xA;  def initialize&#xA;    @shaker = Shaker.new&#xA;    @glass = Glass.new&#xA;    @bar = Bar.new&#xA;  end&#xA;&#xA;  def make_drink(name, customer:)&#xA;    if name == :negroni&#xA;      drink = @shaker.combine(:gin, :campari, :sweet_vermouth)&#xA;      @glass.pour!(drink)&#xA;      @bar.pass(@glass, to: customer)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could write an isolated unit test with Mocktail like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;shaker = Mocktail.of_next(Shaker)&#xA;glass = Mocktail.of_next(Glass)&#xA;bar = Mocktail.of_next(Bar)&#xA;subject = Bartender.new&#xA;stubs { shaker.combine(:gin, :campari, :sweet_vermouth) }.with { :a_drink }&#xA;stubs { bar.pass(glass, to: &#34;Eileen&#34;) }.with { &#34;üéâ&#34; }&#xA;&#xA;result = subject.make_drink(:negroni, customer: &#34;Eileen&#34;)&#xA;&#xA;assert_equal &#34;üéâ&#34;, result&#xA;# Oh yeah, and make sure the drink got poured! Silly side effects!&#xA;verify { glass.pour!(:a_drink) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why Mocktail?&lt;/h2&gt; &#xA;&lt;p&gt;Besides helping you avoid a hangover, Mocktail offers several advantages over Ruby&#39;s other mocking libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simpler test recipes&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/mocktail/main/#mocktailof_next&#34;&gt;Mocktail.of_next(type)&lt;/a&gt; both creates your mock and supplies to your subject under test in a single one-liner. No more forcing dependency injection for the sake of your tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WYSIWYG API&lt;/strong&gt;: Want to know how to stub a call to &lt;code&gt;phone.dial(911)&lt;/code&gt;? You just demonstrate the call with &lt;code&gt;stubs { phone.dial(911) }.with { :operator }&lt;/code&gt;. Because stubbing &amp;amp; verifying looks just like the actual call, your tests becomes a sounding board for your APIs as you invent them&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Argument validation&lt;/strong&gt;: Ever see a test pass after a change to a mocked method should have broken it? Not with Mocktail, you haven&#39;t&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mocked class methods&lt;/strong&gt;: Singleton methods on modules and classes can be faked out using &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/mocktail/main/#mocktailreplace&#34;&gt;&lt;code&gt;Mocktail.replace(type)&lt;/code&gt;&lt;/a&gt; without sacrificing thread safety&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Super-duper detailed error messages&lt;/strong&gt; A good mocking library should make coding feel like &lt;a href=&#34;https://en.wikipedia.org/wiki/Paint_by_number&#34;&gt;paint-by-number&lt;/a&gt;, thoughtfully guiding you from one step to the next. Calling a method that doesn&#39;t exist will print a sample definition you can copy-paste. Verification failures will print every call that &lt;em&gt;did&lt;/em&gt; occur. And &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/mocktail/main/#mocktailexplain&#34;&gt;Mocktail.explain()&lt;/a&gt; provides even more introspection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Expressive&lt;/strong&gt;: Built-in &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/mocktail/main/#mocktailmatchers&#34;&gt;argument matchers&lt;/a&gt; and a simple API for adding &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/mocktail/main/#custom-matchers&#34;&gt;custom matchers&lt;/a&gt; allow you to tune your stubbing configuration and call verification to match &lt;em&gt;exactly&lt;/em&gt; what your test intends&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/mocktail/main/#mocktailcaptor&#34;&gt;Argument captors&lt;/a&gt; for assertions of very complex arguments, as well as advanced configuration options for stubbing &amp;amp; verification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ready to order?&lt;/h2&gt; &#xA;&lt;h3&gt;Install the gem&lt;/h3&gt; &#xA;&lt;p&gt;The main ingredient to add to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;mocktail&#34;, group: :test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sprinkle in the DSL&lt;/h3&gt; &#xA;&lt;p&gt;Then, in each of your tests or in a test helper, you&#39;ll probably want to include Mocktail&#39;s DSL. (This is optional, however, as every method in the DSL is also available as a singleton method on &lt;code&gt;Mocktail&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;In Minitest, you might add the DSL with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Minitest::Test&#xA;  include Mocktail::DSL&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, in RSpec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.include Mocktail::DSL&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clean up when you&#39;re done&lt;/h3&gt; &#xA;&lt;p&gt;To reset Mocktail&#39;s internal state between tests and avoid test pollution, you should also call &lt;code&gt;Mocktail.reset&lt;/code&gt; after each test:&lt;/p&gt; &#xA;&lt;p&gt;In Minitest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Minitest::Test&#xA;  # Or, if in a Rails test, in a `teardown do‚Ä¶end` block&#xA;  def teardown&#xA;    Mocktail.reset&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And RSpec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.after(:each) do&#xA;    Mocktail.reset&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The entire public API is listed in the &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/mocktail/main/lib/mocktail.rb&#34;&gt;top-level module&#39;s source&lt;/a&gt;. Below is a longer menu to explain what goes into each feature.&lt;/p&gt; &#xA;&lt;h3&gt;Mocktail.of&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Mocktail.of(module_or_class)&lt;/code&gt; takes a module or class and returns an instance of an object with fake methods in place of all its instance methods which can then be stubbed or verified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Clothes; end;&#xA;class Shoe &amp;lt; Clothes&#xA;  def tie(laces)&#xA;  end&#xA;end&#xA;&#xA;shoe = Mocktail.of(Shoe)&#xA;shoe.instance_of?(Shoe) # =&amp;gt; true&#xA;shoe.is_a?(Clothes) # =&amp;gt; true&#xA;shoe.class == Shoe # =&amp;gt; false!&#xA;shoe.to_s # =&amp;gt; #&amp;lt;Mocktail of Shoe:0x00000001343b57b0&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mocktail.of_next&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Mocktail.of_next(klass, [count: 1])&lt;/code&gt; takes a class and returns one mock (the default) or an array of multiple mocks. It also effectively overrides the behavior of that class&#39;s constructor to return those mock(s) in order and finally restoring its previous behavior.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you wanted to test the &lt;code&gt;Notifier&lt;/code&gt; class below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Notifier&#xA;  def initialize&#xA;    @mailer = Mailer.new&#xA;  end&#xA;&#xA;  def notify(name)&#xA;    @mailer.deliver!(&#34;Hello, #{name}&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could write a test like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def test_notifier&#xA;  mailer = Mocktail.of_next(Mailer)&#xA;  subject = Notifier.new&#xA;&#xA;  subject.notify(&#34;Pants&#34;)&#xA;&#xA;  verify { mailer.deliver!(&#34;Hello, Pants&#34;) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s nothing wrong with creating mocks using &lt;code&gt;Mocktail.of&lt;/code&gt; and passing them to your subject some other way, but this approach allows you to write very terse isolation tests without foisting additional indirection or dependency injection in for your tests&#39; sake.&lt;/p&gt; &#xA;&lt;h3&gt;Mocktail.stubs&lt;/h3&gt; &#xA;&lt;p&gt;Configuring a fake method to take a certain action or return a particular value is called &#34;stubbing&#34;. To stub a call with a value, you can call &lt;code&gt;Mocktail.stubs&lt;/code&gt; (or just &lt;code&gt;stubs&lt;/code&gt; if you&#39;ve included &lt;code&gt;Mocktail::DSL&lt;/code&gt;) and then specify an effect that will be invoked whenever that call configuration is satisfied using &lt;code&gt;with&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The API is very simple in the simple case:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class UserRepository&#xA;  def find(id, debug: false); end&#xA;&#xA;  def transaction(&amp;amp;blk); end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could stub responses to a mock of the &lt;code&gt;UserRepository&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user_repository = Mocktail.of(UserRepository)&#xA;&#xA;stubs { user_repository.find(42) }.with { :a_user }&#xA;user_repository.find(42) # =&amp;gt; :a_user&#xA;user_repository.find(43) # =&amp;gt; nil&#xA;user_repository.find # =&amp;gt; ArgumentError: wrong number of arguments (given 0, expected 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The block passed to &lt;code&gt;stubs&lt;/code&gt; is called the &#34;demonstration&#34;, because it represents an example of the kind of calls that Mocktail should match.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get fancy, you can use matchers to make your demonstration more dynamic. For example, you could match any number with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stubs { |m| user_repository.find(m.numeric) }.with { :another_user }&#xA;user_repository.find(41) # =&amp;gt; :another_user&#xA;user_repository.find(42) # =&amp;gt; :another_user&#xA;user_repository.find(43) # =&amp;gt; :another_user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stubbings are last-in-wins, which is why the stubbing above would have overridden the earlier-but-more-specific stubbing of &lt;code&gt;find(42)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A stubbing&#39;s effect can also be changed dynamically based on the actual call that satisfied the demonstration by looking at the &lt;code&gt;call&lt;/code&gt; block argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stubs { |m| user_repository.find(m.is_a(Integer)) }.with { |call|&#xA;  {id: call.args.first}&#xA;}&#xA;user_repository.find(41) # =&amp;gt; {id: 41}&#xA;# Since 42.5 is a Float, the earlier stubbing will win here:&#xA;user_repository.find(42.5) # =&amp;gt; :another_user&#xA;user_repository.find(43) # =&amp;gt; {id: 43}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s certainly more complex to think through, but if your stubbed method takes a block, your demonstration can pass a block of its own and inspect or invoke it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stubs {&#xA;  user_repository.transaction { |block| block.call == {id: 41} }&#xA;}.with { :successful_transaction }&#xA;&#xA;user_repository.transaction {&#xA;  user_repository.find(41)&#xA;} # =&amp;gt; :successful_transaction&#xA;user_repository.transaction {&#xA;  user_repository.find(40)&#xA;} # =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also several advanced options you can pass to &lt;code&gt;stubs&lt;/code&gt; to control its behavior.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;times&lt;/code&gt; will limit the number of times a satisfied stubbing can have its effect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stubs { |m| user_repository.find(m.any) }.with { :not_found }&#xA;stubs(times: 2) { |m| user_repository.find(1) }.with { :someone }&#xA;&#xA;user_repository.find(1) # =&amp;gt; :someone&#xA;user_repository.find(1) # =&amp;gt; :someone&#xA;user_repository.find(1) # =&amp;gt; :not_found&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ignore_extra_args&lt;/code&gt; will allow a demonstration to be considered satisfied even if it fails to specify arguments and keyword arguments made by the actual call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stubs { user_repository.find(4) }.with { :a_person }&#xA;user_repository.find(4, debug: true) # =&amp;gt; nil&#xA;&#xA;stubs(ignore_extra_args: true) { user_repository.find(4) }.with { :b_person }&#xA;user_repository.find(4, debug: true) # =&amp;gt; :b_person&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;code&gt;ignore_block&lt;/code&gt; will similarly allow a demonstration to not concern itself with whether an actual call passed the method a block‚Äîit&#39;s satisfied either way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stubs { user_repository.transaction }.with { :transaction }&#xA;user_repository.transaction {} # =&amp;gt; nil&#xA;&#xA;stubs(ignore_block: true) { user_repository.transaction }.with { :transaction }&#xA;user_repository.transaction {} # =&amp;gt; :transaction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mocktail.verify&lt;/h3&gt; &#xA;&lt;p&gt;In practice, we&#39;ve found that we stub far more responses than we explicitly verify a particular call took place. That&#39;s because our code normally returns some observable value that is &lt;em&gt;influenced&lt;/em&gt; by our dependencies&#39; behavior, so adding additional assertions that they be called would be redundant. That said, for cases where a dependency doesn&#39;t return a value but just has a necessary side effect, the &lt;code&gt;verify&lt;/code&gt; method exists (and like &lt;code&gt;stubs&lt;/code&gt; is included in &lt;code&gt;Mocktail::DSL&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve gotten the hang of stubbing, you&#39;ll find that the &lt;code&gt;verify&lt;/code&gt; method is intentionally very similar. They almost rhyme.&lt;/p&gt; &#xA;&lt;p&gt;For this example, consider an &lt;code&gt;Auditor&lt;/code&gt; class that our code might need to call to record that certain actions took place.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Auditor&#xA;  def record!(message, user_id:, action: nil); end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve created a mock of the &lt;code&gt;Auditor&lt;/code&gt;, you can start verifying basic calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;auditor = Mocktail.of(Auditor)&#xA;&#xA;verify { auditor.record!(&#34;hello&#34;, user_id: 42) }&#xA;# =&amp;gt; raised Mocktail::VerificationError&#xA;# Expected mocktail of Auditor#record! to be called like:&#xA;#&#xA;#   record!(&#34;hello&#34;, user_id: 42)&#xA;#&#xA;# But it was never called.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wups! Verify will blow up whenever a matching call hasn&#39;t occurred, so it should be called after you&#39;ve invoked your subject under test along with any other assertions you have.&lt;/p&gt; &#xA;&lt;p&gt;If we make a call that satisfies the &lt;code&gt;verify&lt;/code&gt; call&#39;s demonstration, however, you won&#39;t see that error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;auditor.record!(&#34;hello&#34;, user_id: 42)&#xA;&#xA;verify { auditor.record!(&#34;hello&#34;, user_id: 42) } # =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There, nothing happened! Just like any other assertion library, you only hear from &lt;code&gt;verify&lt;/code&gt; when verification fails.&lt;/p&gt; &#xA;&lt;p&gt;Just like with &lt;code&gt;stubs&lt;/code&gt;, you can any built-in or custom matchers can serve as garnishes for your demonstration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;auditor.record!(&#34;hello&#34;, user_id: 42)&#xA;&#xA;verify { |m| auditor.record!(m.is_a(String), user_id: m.numeric) } # =&amp;gt; nil&#xA;# But this will raise a VerificationError:&#xA;verify { |m| auditor.record!(m.is_a(String), user_id: m.that { |arg| arg &amp;gt; 50}) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you pass a block to your demonstration, it will be invoked with any block that was passed to the actual call to the mock. Truthy responses will satisfy the verification and falsey ones will fail:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;auditor.record!(&#34;ok&#34;, user_id: 1) { Time.new }&#xA;&#xA;verify { |m| auditor.record!(&#34;ok&#34;, user_id: 1) { |block| block.call.is_a?(Time) } } # =&amp;gt; nil&#xA;# But this will raise a VerificationError:&#xA;verify { |m| auditor.record!(&#34;ok&#34;, user_id: 1) { |block| block.call.is_a?(Date) } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;verify&lt;/code&gt; supports the same options as &lt;code&gt;stubs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;times&lt;/code&gt; will require the demonstrated call happened exactly &lt;code&gt;times&lt;/code&gt; times (by default, the call has to happen 1 or more times)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore_extra_args&lt;/code&gt; will allow the demonstration to forego specifying optional arguments while still being considered satisfied&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore_block&lt;/code&gt; will similarly allow the demonstration to forego specifying a block, even if the actual call receives one&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mocktail.matchers&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll probably never need to call &lt;code&gt;Mocktail.matchers&lt;/code&gt; directly, because it&#39;s the object that is passed to every demonstration block passed to &lt;code&gt;stubs&lt;/code&gt; and &lt;code&gt;verify&lt;/code&gt;. By default, a stubbing (e.g. &lt;code&gt;stubs { email.send(&#34;text&#34;) }&lt;/code&gt;) is only considered satisfied if every argument passed to an actual call was passed an &lt;code&gt;==&lt;/code&gt; check. Matchers allow us to relax or change that constraint for both regular arguments and keyword arguments so that our demonstrations can match more kinds of method invocations.&lt;/p&gt; &#xA;&lt;p&gt;Matchers allow you to specify stubbings and verifications that look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stubs { |m| email.send(m.is_a(String)) }.with { &#34;I&#39;m an email&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Built-in matchers&lt;/h4&gt; &#xA;&lt;p&gt;These matchers come out of the box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;any&lt;/code&gt; - Will match any value (even nil) in the given argument position or keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;is_a(type)&lt;/code&gt; - Will match when its &lt;code&gt;type&lt;/code&gt; passes an &lt;code&gt;is_a?&lt;/code&gt; check against the actual argument&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;includes(thing, [**more_things])&lt;/code&gt; - Will match when all of its arguments are contained by the corresponding argument‚Äîbe it a string, array, hash, or anything that responds to &lt;code&gt;includes?&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;matches(pattern)&lt;/code&gt; - Will match when the provided string or pattern passes a &lt;code&gt;match?&lt;/code&gt; test on the corresponding argument; usually used to match strings that contain a particular substring or pattern, but will work with any argument that responds to &lt;code&gt;match?&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;not(thing)&lt;/code&gt; - Will only match when its argument &lt;em&gt;does not&lt;/em&gt; equal (via &lt;code&gt;!=&lt;/code&gt;) the actual argument&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;numeric&lt;/code&gt; - Will match when the actual argument is an instance of &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, or (if loaded) &lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;that { |arg| ‚Ä¶ }&lt;/code&gt; - Takes a block that will receive the actual argument. If the block returns truthy, it&#39;s considered a match; otherwise, it&#39;s not a match.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom matchers&lt;/h4&gt; &#xA;&lt;p&gt;If you want to write your own matchers, check out &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/mocktail/main/lib/mocktail/matchers/includes.rb&#34;&gt;the source for examples&lt;/a&gt;. Once you&#39;ve implemented a class, just pass it to &lt;code&gt;Mocktail.register_matcher&lt;/code&gt; in your test helper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyAwesomeMatcher &amp;lt; Mocktail::Matchers::Base&#xA;  def self.matcher_name&#xA;    :awesome&#xA;  end&#xA;&#xA;  def match?(actual)&#xA;    &#34;#{@expected}‚ú®&#34; == actual&#xA;  end&#xA;end&#xA;&#xA;Mocktail.register_matcher(MyAwesomeMatcher)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, a stubbing like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;stubs { |m| user_repository.find(m.awesome(11)) }.with { :awesome_user }&#xA;&#xA;user_repository.find(&#34;11&#34;)) # =&amp;gt; nil&#xA;user_repository.find(&#34;11‚ú®&#34;)) # =&amp;gt; :awesome_user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mocktail.captor&lt;/h3&gt; &#xA;&lt;p&gt;An argument captor is a special kind of matcher‚Ä¶ really, it&#39;s a matcher factory. Suppose you have a &lt;code&gt;verify&lt;/code&gt; call for which one of the expected arguments is &lt;em&gt;really&lt;/em&gt; complicated. Since &lt;code&gt;verify&lt;/code&gt; tends to be paired with fire-and-forget APIs that are being invoked for the side effect, this is a pretty common case. You want to be able to effectively snag that value and then run any number of specific assertions against it.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s what &lt;code&gt;Mocktail.captor&lt;/code&gt; is for. It&#39;s easiest to make sense of this by example. Given this &lt;code&gt;BigApi&lt;/code&gt; class that&#39;s presumably being called by your subject at the end of a lot of other work building up a payload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class BigApi&#xA;  def send(payload); end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could capture the value of that payload as part of the verification of the call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;big_api = Mocktail.of(BigApi)&#xA;&#xA;big_api.send({imagine: &#34;that&#34;, this: &#34;is&#34;, a: &#34;huge&#34;, object: &#34;!&#34;})&#xA;&#xA;payload_captor = Mocktail.captor&#xA;verify { big_api.send(payload_captor.capture) } # =&amp;gt; nil!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;verify&lt;/code&gt; above will pass because &lt;em&gt;a&lt;/em&gt; call did happen, but we haven&#39;t asserted anything beyond that yet. What really happened is that &lt;code&gt;payload_captor.capture&lt;/code&gt; actually returned a matcher that will return true for any argument &lt;em&gt;while also sneakily storing a copy of the argument value&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s why we instantiated &lt;code&gt;payload_captor&lt;/code&gt; with &lt;code&gt;Mocktail.captor&lt;/code&gt; outside the demonstration block, so we can inspect its &lt;code&gt;value&lt;/code&gt; after the &lt;code&gt;verify&lt;/code&gt; call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;payload_captor = Mocktail.captor&#xA;verify { big_api.send(payload_captor.capture) } # =&amp;gt; nil!&#xA;&#xA;payload = payload_captor.value # {:imagine=&amp;gt;&#34;that&#34;, :this=&amp;gt;&#34;is&#34;, :a=&amp;gt;&#34;huge&#34;, :object=&amp;gt;&#34;!&#34;}&#xA;assert_equal &#34;huge&#34;, payload[:a]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mocktail.replace&lt;/h3&gt; &#xA;&lt;p&gt;Mocktail was written to support isolated test-driven development, which usually results in a lot of boring classes and instance methods. But sometimes you need to mock singleton methods on classes or modules, and we support that too.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;Mocktail.replace(type)&lt;/code&gt;, all of the singleton methods on the provided type are replaced with fake methods available for stubbing and verification. It&#39;s really that simple.&lt;/p&gt; &#xA;&lt;p&gt;For example, if our &lt;code&gt;Bartender&lt;/code&gt; class has a class method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Bartender&#xA;  def self.cliche_greeting&#xA;    [&#34;It&#39;s 5 o&#39;clock somewhere!&#34;, &#34;Norm!&#34;].sample&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can replace the behavior of the overall class, and then stub how we&#39;d like it to respond, in our test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Mocktail.replace(Bartender)&#xA;stubs { Bartender.cliche_greeting }.with { &#34;Norm!&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[&lt;strong&gt;Obligatory warning:&lt;/strong&gt; Mocktail does its best to ensure that other threads won&#39;t be affected when you replace the singleton methods on a type, but your mileage may very! Singleton methods are global and code that introspects or invokes a replaced method in a peculiar-enough way could lead to hard-to-track down bugs. (If this concerns you, then the fact that class methods are effectively global state may be a great reason not to rely too heavily on them!)]&lt;/p&gt; &#xA;&lt;h3&gt;Mocktail.explain&lt;/h3&gt; &#xA;&lt;p&gt;Test debugging is hard enough when there &lt;em&gt;aren&#39;t&lt;/em&gt; fake objects flying every which way, so Mocktail tries to make it a little easier on you. In addition to returning useful messages throughout the API, the gem also includes an introspection method &lt;code&gt;Mocktail.explain(thing)&lt;/code&gt;, which returns a human-readable &lt;code&gt;message&lt;/code&gt; and a &lt;code&gt;reference&lt;/code&gt; object with useful attributes (that vary depending on the type of fake &lt;code&gt;thing&lt;/code&gt; you pass in. Below are some things &lt;code&gt;explain()&lt;/code&gt; can do.&lt;/p&gt; &#xA;&lt;h4&gt;Fake instances created by Mocktail&lt;/h4&gt; &#xA;&lt;p&gt;Any instances created by &lt;code&gt;Mocktail.of&lt;/code&gt; or &lt;code&gt;Mocktail.of_next&lt;/code&gt; can be passed to &lt;code&gt;Mocktail.explain&lt;/code&gt;, and they will list out all the calls and stubbings made for each of their fake methods.&lt;/p&gt; &#xA;&lt;p&gt;Suppose these interactions have occurred:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ice_tray = Mocktail.of(IceTray)&#xA;&#xA;Mocktail.stubs { ice_tray.fill(:tap_water, 30) }.with { :some_ice }&#xA;&#xA;ice_tray.fill(:tap_water, 50)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can interrogate what&#39;s going on with the fake instance by passing it to &lt;code&gt;explain&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;explanation = Mocktail.explain(ice_tray)&#xA;&#xA;explanation.reference.type      #=&amp;gt; IceTray&#xA;explanation.reference.double    #=&amp;gt; The ice_tray instance&#xA;explanation.reference.calls     #=&amp;gt; details on each invocation of each method&#xA;explanation.reference.stubbings #=&amp;gt; all stubbings configured for each method&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;explanation.message&lt;/code&gt; will return:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This is a fake `IceTray&#39; instance.&#xA;&#xA;It has these mocked methods:&#xA;  - fill&#xA;&#xA;`IceTray#fill&#39; stubbings:&#xA;&#xA;  fill(:tap_water, 30)&#xA;&#xA;`IceTray#fill&#39; calls:&#xA;&#xA;  fill(:tap_water, 50)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Modules and classes with singleton methods replaced&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;ve called &lt;code&gt;Mocktail.replace()&lt;/code&gt; on a class or module, it can also be passed to &lt;code&gt;Mocktail.explain()&lt;/code&gt; for a summary of all the stubbing configurations and calls made against its faked singleton methods for the currently running thread.&lt;/p&gt; &#xA;&lt;p&gt;Imagine a &lt;code&gt;Shop&lt;/code&gt; class with &lt;code&gt;self.open!&lt;/code&gt; and &lt;code&gt;self.close!&lt;/code&gt; singleton methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Mocktail.replace(Shop)&#xA;&#xA;stubs { |m| Shop.open!(m.numeric) }.with { :a_bar }&#xA;&#xA;Shop.open!(42)&#xA;&#xA;Shop.close!(42)&#xA;&#xA;explanation = Mocktail.explain(Shop)&#xA;&#xA;explanation.reference.type      #=&amp;gt; Shop&#xA;explanation.reference.replaced_method_names #=&amp;gt; [:close!, :open!]&#xA;explanation.reference.calls     #=&amp;gt; details on each invocation of each method&#xA;explanation.reference.stubbings #=&amp;gt; all stubbings configured for each method&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;code&gt;explanation.message&lt;/code&gt; will return:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;`Shop&#39; is a class that has had its singleton methods faked.&#xA;&#xA;It has these mocked methods:&#xA;  - close!&#xA;  - open!&#xA;&#xA;`Shop.close!&#39; has no stubbings.&#xA;&#xA;`Shop.close!&#39; calls:&#xA;&#xA;  close!(42)&#xA;&#xA;  close!(42)&#xA;&#xA;`Shop.open!&#39; stubbings:&#xA;&#xA;  open!(numeric)&#xA;&#xA;  open!(numeric)&#xA;&#xA;`Shop.open!&#39; calls:&#xA;&#xA;  open!(42)&#xA;&#xA;  open!(42)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Methods on faked instances and replaced types&lt;/h4&gt; &#xA;&lt;p&gt;In addition to passing the test double, you can also pass a reference to any fake method created by Mocktail to &lt;code&gt;Mocktail.explain&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ice_tray = Mocktail.of(IceTray)&#xA;&#xA;ice_tray.fill(:chilled, 50)&#xA;&#xA;explanation = Mocktail.explain(ice_tray.method(:fill))&#xA;&#xA;explanation.reference.receiver  #=&amp;gt; a reference to the `ice_tray` instance&#xA;explanation.reference.calls     #=&amp;gt; details on each invocation of the method&#xA;explanation.reference.stubbings #=&amp;gt; all stubbings configured for the method&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above may be handy in cases where you want to assert the number of calls of a method outside the &lt;code&gt;Mocktail.verify&lt;/code&gt; API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;assert_equal 1, explanation.reference.calls.size&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The explanation will also contain a &lt;code&gt;message&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;`IceTray#fill&#39; has no stubbings.&#xA;&#xA;`IceTray#fill&#39; calls:&#xA;&#xA;  fill(:chilled, 50)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replaced singleton methods can also be passed to &lt;code&gt;explain()&lt;/code&gt;, so something like &lt;code&gt;Mocktail.explain(Shop.method(:open!))&lt;/code&gt; from the earlier example would also work (with &lt;code&gt;Shop&lt;/code&gt; being the &lt;code&gt;receiver&lt;/code&gt; on the explanation&#39;s &lt;code&gt;reference&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Undefined methods&lt;/h4&gt; &#xA;&lt;p&gt;There&#39;s no API for this one, but Mocktail also offers explanations for methods that don&#39;t exist yet. You&#39;ll see this error message whenever you try to call a method that doesn&#39;t exist on a test double. The message is designed to facilitate &#34;paint-by-numbers&#34; TDD, by including a sample definition of the method you had attempted to call that can be copy-pasted into a source listing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class IceTray&#xA;end&#xA;&#xA;ice_tray = Mocktail.of(IceTray)&#xA;&#xA;ice_tray.fill(:water_type, 30)&#xA;# =&amp;gt; No method `IceTray#fill&#39; exists for call: (NoMethodError)&#xA;#&#xA;#      fill(:water_type, 30)&#xA;#&#xA;#    Need to define the method? Here&#39;s a sample definition:&#xA;#&#xA;#      def fill(water_type, arg)&#xA;#      end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From there, you can just copy-paste the provided method stub as a starting point for your new method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class IceTray&#xA;  def fill(water_type, amount)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mocktail.explain_nils&lt;/h3&gt; &#xA;&lt;p&gt;Is a faked method returning &lt;code&gt;nil&lt;/code&gt; and you don&#39;t understand why?&lt;/p&gt; &#xA;&lt;p&gt;By default, methods faked by Mocktail will return &lt;code&gt;nil&lt;/code&gt; when no stubbing is satisfied. A frequent frustration, therefore, is when the way &lt;code&gt;stubs {}.with {}&lt;/code&gt; is configured does not satisfy a call the way you expected. To try to make debugging this a little bit easier, the gem provides a top-level &lt;code&gt;Mocktail.explain_nils&lt;/code&gt; method that will return an array of summaries of every call to a faked method that failed to satisfy any stubbings.&lt;/p&gt; &#xA;&lt;p&gt;For example, suppose you stub this &lt;code&gt;fill&lt;/code&gt; method like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ice_tray = Mocktail.of(IceTray)&#xA;&#xA;stubs { ice_tray.fill(:tap_water, 30) }.with { :normal_ice }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But then you find that your subject under test is just getting &lt;code&gt;nil&lt;/code&gt; back and you don&#39;t understand why:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def prep&#xA;  ice = ice_tray.fill(:tap_water, 50)&#xA;  glass.add(ice) # =&amp;gt; why is `ice` nil?!&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whenever you&#39;re confused by a nil, you can call &lt;code&gt;Mocktail.explain_nils&lt;/code&gt; for an array containing &lt;code&gt;UnsatisfyingCallExplanation&lt;/code&gt; objects (one for each call to a faked method that did not satisfy any configured stubbings).&lt;/p&gt; &#xA;&lt;p&gt;The returned explanation objects will include both a &lt;code&gt;reference&lt;/code&gt; object to explore as well a summary &lt;code&gt;message&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def prep&#xA;  ice = ice_tray.fill(:tap_water, 50)&#xA;  puts Mocktail.explain_nils.first.message&#xA;  glass.add(ice)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will print:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This `nil&#39; was returned by a mocked `IceTray#fill&#39; method&#xA;because none of its configured stubbings were satisfied.&#xA;&#xA;The actual call:&#xA;&#xA;  fill(:tap_water, 50)&#xA;&#xA;The call site:&#xA;&#xA;  /path/to/your/code.rb:42:in `prep&#39;&#xA;&#xA;Stubbings configured prior to this call but not satisfied by it:&#xA;&#xA;  fill(:tap_water, 30)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;reference&lt;/code&gt; object will have details of the &lt;code&gt;call&lt;/code&gt; itself, an array of &lt;code&gt;other_stubbings&lt;/code&gt; defined on the faked method, and a &lt;code&gt;backtrace&lt;/code&gt; to determine which call site produced the unexpected &lt;code&gt;nil&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;h3&gt;Mocktail.reset&lt;/h3&gt; &#xA;&lt;p&gt;This one&#39;s simple: you probably want to call &lt;code&gt;Mocktail.reset&lt;/code&gt; after each test, but you &lt;em&gt;definitely&lt;/em&gt; want to call it if you&#39;re using &lt;code&gt;Mocktail.replace&lt;/code&gt; or &lt;code&gt;Mocktail.of_next&lt;/code&gt; anywhere, since those will affect state that is shared across tests.&lt;/p&gt; &#xA;&lt;p&gt;Calling reset in a &lt;code&gt;teardown&lt;/code&gt; or &lt;code&gt;after(:each)&lt;/code&gt; hook will also improve the usefulness of messages returned by &lt;code&gt;Mocktail.explain&lt;/code&gt; and &lt;code&gt;Mocktail.explain_nils&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;Mocktail is designed following a somewhat academic understanding of what mocking is and how it should be used. Below are several references on this topic.&lt;/p&gt; &#xA;&lt;p&gt;Blog Posts and Papers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[Endo-Testing: Unit Testing with Mock Objects](&lt;a href=&#34;https://www2.ccs.neu.edu/research/demeter/related-work/extreme-programming/MockObjectsFinal.PDF&#34;&gt;https://www2.ccs.neu.edu/research/demeter/related-work/extreme-programming/MockObjectsFinal.PDF&lt;/a&gt; by Tim Mackinnon, Steve Freeman, and Philip Craig, the paper that introduced mocking presented by the creators of mocking.&lt;/li&gt; &#xA; &lt;li&gt;Michael Feathers&#39; &lt;a href=&#34;https://michaelfeathers.typepad.com/michael_feathers_blog/2008/06/the-flawed-theo.html&#34;&gt;The Flawed Theory Behind Unit Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Books:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bookshop.org/books/growing-object-oriented-software-guided-by-tests/9780321503626&#34;&gt;&lt;em&gt;Growing Object-Oriented Software, Guided by Tests&lt;/em&gt;&lt;/a&gt; by Steve Freeman and Nat Price&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Talks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Af4M8GMoxi4&#34;&gt;Please don‚Äôt mock me&lt;/a&gt; by Justin Searls&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Mocktail is created &amp;amp; maintained by the software agency &lt;a href=&#34;https://twitter.com&#34;&gt;Test Double&lt;/a&gt;. If you&#39;ve ever come across our eponymously-named &lt;a href=&#34;https://github.com/testdouble/testdouble.js/&#34;&gt;testdouble.js&lt;/a&gt;, you might find Mocktail&#39;s API to be quite similar. The term &#34;test double&#34; was originally coined by Gerard Meszaros in his book &lt;a href=&#34;http://xunitpatterns.com/Test%20Double.html&#34;&gt;xUnit Test Patterns&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The name is inspired by the innovative Java mocking library &lt;a href=&#34;https://site.mockito.org&#34;&gt;Mockito&lt;/a&gt;. Mocktail also the spiritual successor to &lt;a href=&#34;https://github.com/searls/gimme&#34;&gt;gimme&lt;/a&gt;, which offers a similar API but which fell victim to the limitations of Ruby 1.8.7 (and &lt;a href=&#34;https://twitter.com/searls&#34;&gt;@searls&lt;/a&gt;&#39;s Ruby chops). Gimme was also one of the final projects we collaborated with &lt;a href=&#34;https://github.com/jimweirich&#34;&gt;Jim Weirich&lt;/a&gt; on, so this approach to isolated unit testing holds a special significance to us.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project follows Test Double&#39;s &lt;a href=&#34;https://testdouble.com/code-of-conduct&#34;&gt;code of conduct&lt;/a&gt; for all community interactions, including (but not limited to) one-on-one communications, public posts/comments, code reviews, pull requests, and GitHub issues. If violations occur, Test Double will take any action they deem appropriate for the infraction, up to and including blocking a user from the organization&#39;s repositories.&lt;/p&gt;</summary>
  </entry>
</feed>