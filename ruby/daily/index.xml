<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-20T01:32:48Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>globalize/globalize</title>
    <updated>2024-05-20T01:32:48Z</updated>
    <id>tag:github.com,2024-05-20:/globalize/globalize</id>
    <link href="https://github.com/globalize/globalize" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rails I18n de-facto standard library for ActiveRecord model/data translation.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;http://globalize.github.io/globalize/images/globalize.png&#34; alt=&#34;Globalize&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/globalize/globalize/actions&#34;&gt;&lt;img src=&#34;https://github.com/globalize/globalize/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/globalize/globalize&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/globalize/globalize.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/globalize/globalize&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/globalize/globalize/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can chat with us using Gitter:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/globalize/globalize&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/globalize/globalize.svg?sanitize=true&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Globalize builds on the &lt;a href=&#34;http://guides.rubyonrails.org/i18n.html&#34;&gt;I18n API in Ruby on Rails&lt;/a&gt; to add model translations to ActiveRecord models.&lt;/p&gt; &#xA;&lt;p&gt;In other words, a way to translate actual user-generated content, for example; a single blog post with multiple translations.&lt;/p&gt; &#xA;&lt;h2&gt;Current state of the gem&lt;/h2&gt; &#xA;&lt;p&gt;Globalize is not very actively maintained. Pull Requests are welcome, especially for compatibility with new versions of Rails, but none of the maintainers actively use Globalize anymore. If you need a more actively maintained model translation gem, we recommend checking out &lt;a href=&#34;https://github.com/shioyama/mobility&#34;&gt;Mobility&lt;/a&gt;, a natural successor of Globalize created by Chris Salzberg (one of Globalize maintainers) and inspired by the ideas discussed around Globalize. For a more up-to-date discussion of the current situation, see &lt;a href=&#34;https://github.com/globalize/globalize/issues/753&#34;&gt;issue #753&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ActiveRecord &amp;gt;= 4.2.0 (see below for installation with ActiveRecord 3.x)&lt;/li&gt; &#xA; &lt;li&gt;I18n&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the ActiveRecord 4.2.x compatible version of Globalize with its default setup, just use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem install globalize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using bundler put this in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;globalize&#39;, &#39;~&amp;gt; 5.3.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please help us by letting us know what works, and what doesn&#39;t, when using pre-release code.&lt;/p&gt; &#xA;&lt;p&gt;Put in your Gemfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;globalize&#39;, git: &#39;https://github.com/globalize/globalize&#39;&#xA;gem &#39;activemodel-serializers-xml&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the version of globalize for ActiveRecord 4.0 or 4.1, specify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;globalize&#39;, &#39;~&amp;gt; 4.0.3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the version of globalize for ActiveRecord 3.1 or 3.2, specify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;globalize&#39;, &#39;~&amp;gt; 3.1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(If you are using ActiveRecord 3.0, use version 3.0: &lt;code&gt;gem &#39;globalize&#39;, &#39;3.0.4&#39;&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/globalize/globalize/tree/3-1-stable&#34;&gt;&lt;code&gt;3-1-stable&lt;/code&gt; branch&lt;/a&gt; of this repository corresponds to the latest ActiveRecord 3 version of globalize. Note that &lt;code&gt;globalize3&lt;/code&gt; has been deprecated and you are encouraged to update your Gemfile accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Model translations&lt;/h2&gt; &#xA;&lt;p&gt;Model translations allow you to translate your models&#39; attribute values. E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  translates :title, :text&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Allows you to translate the attributes :title and :text per locale:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;I18n.locale = :en&#xA;post.title # =&amp;gt; Globalize rocks!&#xA;&#xA;I18n.locale = :he&#xA;post.title # =&amp;gt; גלובאלייז2 שולט!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set translations with mass-assignment by specifying the locale:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post.attributes = { title: &#39;גלובאלייז2 שולט!&#39;, locale: :he }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to make this work, you&#39;ll need to add the appropriate translation tables. Globalize comes with a handy helper method to help you do this. It&#39;s called &lt;code&gt;create_translation_table!&lt;/code&gt;. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;p&gt;Note that your migrations can use &lt;code&gt;create_translation_table!&lt;/code&gt; and &lt;code&gt;drop_translation_table!&lt;/code&gt; only inside the &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; instance methods, respectively. You cannot use &lt;code&gt;create_translation_table!&lt;/code&gt; and &lt;code&gt;drop_translation_table!&lt;/code&gt; inside the &lt;code&gt;change&lt;/code&gt; instance method.&lt;/p&gt; &#xA;&lt;h3&gt;Creating translation tables&lt;/h3&gt; &#xA;&lt;p&gt;Also note that before you can create a translation table, you have to define the translated attributes via &lt;code&gt;translates&lt;/code&gt; in your model as shown above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreatePosts &amp;lt; ActiveRecord::Migration&#xA;  def change&#xA;    create_table :posts do |t|&#xA;      t.timestamps&#xA;    end&#xA;&#xA;    reversible do |dir|&#xA;      dir.up do&#xA;        Post.create_translation_table! :title =&amp;gt; :string, :text =&amp;gt; :text&#xA;      end&#xA;&#xA;      dir.down do&#xA;        Post.drop_translation_table!&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you can pass options for specific columns. Here’s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreatePosts &amp;lt; ActiveRecord::Migration&#xA;  def change&#xA;    create_table :posts do |t|&#xA;      t.timestamps&#xA;    end&#xA;&#xA;    reversible do |dir|&#xA;      dir.up do&#xA;        Post.create_translation_table! :title =&amp;gt; :string,&#xA;          :text =&amp;gt; {:type =&amp;gt; :text, :null =&amp;gt; false, :default =&amp;gt; &#39;abc&#39;}&#xA;      end&#xA;&#xA;      dir.down do&#xA;        Post.drop_translation_table!&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the ActiveRecord model &lt;code&gt;Post&lt;/code&gt; must already exist and have a &lt;code&gt;translates&lt;/code&gt; directive listing the translated fields.&lt;/p&gt; &#xA;&lt;h2&gt;Migrating existing data to and from the translated version&lt;/h2&gt; &#xA;&lt;p&gt;As well as creating a translation table, you can also use &lt;code&gt;create_translation_table!&lt;/code&gt; to migrate across any existing data to the default locale. This can also operate in reverse to restore any translations from the default locale back to the model when you don&#39;t want to use a translation table anymore using &lt;code&gt;drop_translation_table!&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This feature makes use of &lt;code&gt;untranslated_attributes&lt;/code&gt; which allows access to the model&#39;s attributes as they were before the translation was applied. Here&#39;s an example (which assumes you already have a model called &lt;code&gt;Post&lt;/code&gt; and its table exists):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class TranslatePosts &amp;lt; ActiveRecord::Migration&#xA;  def change&#xA;    reversible do |dir|&#xA;      dir.up do&#xA;        Post.create_translation_table!({&#xA;          :title =&amp;gt; :string,&#xA;          :text =&amp;gt; :text&#xA;        }, {&#xA;          :migrate_data =&amp;gt; true&#xA;        })&#xA;      end&#xA;&#xA;      dir.down do&#xA;        Post.drop_translation_table! :migrate_data =&amp;gt; true&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Make sure you drop the translated columns from the parent table after all your data is safely migrated.&lt;/p&gt; &#xA;&lt;p&gt;To automatically remove the translated columns from the parent table after the data migration, please use option &lt;code&gt;remove_source_columns&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class TranslatePosts &amp;lt; ActiveRecord::Migration&#xA;  def self.up&#xA;    Post.create_translation_table!({&#xA;      :title =&amp;gt; :string,&#xA;      :text =&amp;gt; :text&#xA;    }, {&#xA;      :migrate_data =&amp;gt; true,&#xA;      :remove_source_columns =&amp;gt; true&#xA;    })&#xA;  end&#xA;&#xA;  def self.down&#xA;    Post.drop_translation_table! :migrate_data =&amp;gt; true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to use a specific locale for migrated data, you can use &lt;code&gt;I18n.with_locale&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    I18n.with_locale(:bo) do&#xA;      Post.create_translation_table!({&#xA;        :title =&amp;gt; :string,&#xA;        :text =&amp;gt; :text&#xA;      }, {&#xA;        :migrate_data =&amp;gt; true&#xA;      })&#xA;    end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding additional fields to the translation table&lt;/h2&gt; &#xA;&lt;p&gt;In order to add a new field to an existing translation table, you can use &lt;code&gt;add_translation_fields!&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddAuthorToPost &amp;lt; ActiveRecord::Migration&#xA;  def change&#xA;    reversible do |dir|&#xA;      dir.up do&#xA;        Post.add_translation_fields! author: :text&#xA;      end&#xA;&#xA;      dir.down do&#xA;        remove_column :post_translations, :author&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Remember to add the new field to the model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;translates :title, :author&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gotchas&lt;/h2&gt; &#xA;&lt;p&gt;Because globalize uses the &lt;code&gt;:locale&lt;/code&gt; key to specify the locale during mass-assignment, you should avoid having a &lt;code&gt;locale&lt;/code&gt; attribute on the parent model.&lt;/p&gt; &#xA;&lt;p&gt;If you like your translated model to update if a translation changes, use the &lt;code&gt;touch: true&lt;/code&gt; option together with &lt;code&gt;translates&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  translates :name, touch: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re getting the &lt;code&gt;ActiveRecord::StatementInvalid: PG::NotNullViolation: ERROR: null value in column &#34;column_name&#34; violates not-null constraint&lt;/code&gt; error, the only known way to deal with it as of now is to remove not-null constraint for the globalized columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class RemoveNullConstraintsFromResourceTranslations &amp;lt; ActiveRecord::Migration&#xA;  def change&#xA;    change_column_null :resource_translations, :column_name, true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning with Globalize&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/globalize/globalize-versioning&#34;&gt;globalize-versioning&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;h2&gt;I18n fallbacks for empty translations&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to enable fallbacks for empty translations. It will depend on the configuration setting you have set for I18n translations in your Rails config.&lt;/p&gt; &#xA;&lt;p&gt;You can enable them by adding the next line to &lt;code&gt;config/application.rb&lt;/code&gt; (or only &lt;code&gt;config/environments/production.rb&lt;/code&gt; if you only want them in production)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# For version 1.1.0 and above of the `i18n` gem:&#xA;config.i18n.fallbacks = [I18n.default_locale]&#xA;# Below version 1.1.0 of the `i18n` gem:&#xA;config.i18n.fallbacks = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, globalize will only use fallbacks when your translation model does not exist or the translation value for the item you&#39;ve requested is &lt;code&gt;nil&lt;/code&gt;. However it is possible to also use fallbacks for &lt;code&gt;blank&lt;/code&gt; translations by adding &lt;code&gt;:fallbacks_for_empty_translations =&amp;gt; true&lt;/code&gt; to the &lt;code&gt;translates&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  translates :title, :name&#xA;end&#xA;&#xA;puts post.translations.inspect&#xA;# =&amp;gt; [#&amp;lt;Post::Translation id: 1, post_id: 1, locale: &#34;en&#34;, title: &#34;Globalize rocks!&#34;, name: &#34;Globalize&#34;&amp;gt;,&#xA;      #&amp;lt;Post::Translation id: 2, post_id: 1, locale: &#34;nl&#34;, title: &#39;&#39;, name: nil&amp;gt;]&#xA;&#xA;I18n.locale = :en&#xA;post.title # =&amp;gt; &#39;Globalize rocks!&#39;&#xA;post.name  # =&amp;gt; &#39;Globalize&#39;&#xA;&#xA;I18n.locale = :nl&#xA;post.title # =&amp;gt; &#39;&#39;&#xA;post.name  # =&amp;gt; &#39;Globalize&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  translates :title, :name, :fallbacks_for_empty_translations =&amp;gt; true&#xA;end&#xA;&#xA;puts post.translations.inspect&#xA;# =&amp;gt; [#&amp;lt;Post::Translation id: 1, post_id: 1, locale: &#34;en&#34;, title: &#34;Globalize rocks!&#34;, name: &#34;Globalize&#34;&amp;gt;,&#xA;      #&amp;lt;Post::Translation id: 2, post_id: 1, locale: &#34;nl&#34;, title: &#39;&#39;, name: nil&amp;gt;]&#xA;&#xA;I18n.locale = :en&#xA;post.title # =&amp;gt; &#39;Globalize rocks!&#39;&#xA;post.name  # =&amp;gt; &#39;Globalize&#39;&#xA;&#xA;I18n.locale = :nl&#xA;post.title # =&amp;gt; &#39;Globalize rocks!&#39;&#xA;post.name  # =&amp;gt; &#39;Globalize&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fallback locales to each other&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to setup locales to fallback to each other.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  translates :title, :name&#xA;end&#xA;&#xA;Globalize.fallbacks = {:en =&amp;gt; [:en, :pl], :pl =&amp;gt; [:pl, :en]}&#xA;&#xA;I18n.locale = :en&#xA;en_post = Post.create(:title =&amp;gt; &#39;en_title&#39;)&#xA;&#xA;I18n.locale = :pl&#xA;pl_post = Post.create(:title =&amp;gt; &#39;pl_title&#39;)&#xA;en_post.title # =&amp;gt; &#39;en_title&#39;&#xA;&#xA;I18n.locale = :en&#xA;en_post.title # =&amp;gt; &#39;en_title&#39;&#xA;pl_post.title # =&amp;gt; &#39;pl_title&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scoping objects by those with translations&lt;/h2&gt; &#xA;&lt;p&gt;To only return objects that have a translation for the given locale we can use the &lt;code&gt;with_translations&lt;/code&gt; scope. This will only return records that have a translations for the passed in locale.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Post.with_translations(&#39;en&#39;)&#xA;# =&amp;gt; [&#xA;  #&amp;lt;Post::Translation id: 1, post_id: 1, locale: &#34;en&#34;, title: &#34;Globalize rocks!&#34;, name: &#34;Globalize&#34;&amp;gt;,&#xA;  #&amp;lt;Post::Translation id: 2, post_id: 1, locale: &#34;nl&#34;, title: &#39;&#39;, name: nil&amp;gt;&#xA;]&#xA;&#xA;Post.with_translations(I18n.locale)&#xA;# =&amp;gt; [&#xA;  #&amp;lt;Post::Translation id: 1, post_id: 1, locale: &#34;en&#34;, title: &#34;Globalize rocks!&#34;, name: &#34;Globalize&#34;&amp;gt;,&#xA;  #&amp;lt;Post::Translation id: 2, post_id: 1, locale: &#34;nl&#34;, title: &#39;&#39;, name: nil&amp;gt;&#xA;]&#xA;&#xA;Post.with_translations(&#39;de&#39;)&#xA;# =&amp;gt; []&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show different languages&lt;/h2&gt; &#xA;&lt;p&gt;In views, if there is content from different locales that you wish to display, you should use the &lt;code&gt;with_locale&lt;/code&gt; option with a block, as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;% Globalize.with_locale(:en) do %&amp;gt;&#xA;  &amp;lt;%= render &#34;my_translated_partial&#34; %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your partial will now be rendered with the &lt;code&gt;:en&lt;/code&gt; locale set as the current locale.&lt;/p&gt; &#xA;&lt;h2&gt;Interpolation&lt;/h2&gt; &#xA;&lt;p&gt;Globalize supports interpolation in a similar manner to I18n.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  translates :title&#xA;end&#xA;&#xA;I18n.locale = :en&#xA;post.title = &#34;Globalize %{superlative}!&#34;&#xA;&#xA;post.title&#xA;# #=&amp;gt; &#34;Globalize %{superlative}!&#34;&#xA;&#xA;post.title(:foo =&amp;gt; &#34;bar&#34;)&#xA;# SomeError: missing interpolation argument :superlative&#xA;&#xA;post.title(:superlative =&amp;gt; &#34;rocks&#34;)&#xA;# #=&amp;gt; &#34;Globalize rocks!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fragment caching&lt;/h2&gt; &#xA;&lt;p&gt;Don&#39;t forget to add globalize locale into the &lt;code&gt;cache_key&lt;/code&gt; to separate different localizations of the record. One of the possible ways to implement it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# inside translated model&#xA;def cache_key&#xA;  super + &#39;-&#39; + Globalize.locale.to_s&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Thread-safety&lt;/h2&gt; &#xA;&lt;p&gt;Globalize uses &lt;a href=&#34;https://github.com/steveklabnik/request_store&#34;&gt;request_store&lt;/a&gt; gem to clean up thread-global variable after every request. RequestStore includes a Railtie that will configure everything properly for Rails 3+ apps.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not using Rails, you may need to consult a RequestStore&#39;s &lt;a href=&#34;https://github.com/steveklabnik/request_store#no-rails-no-problem&#34;&gt;README&lt;/a&gt; to configure it.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials and articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sitepoint.com/go-global-rails-i18n/&#34;&gt;Go Global with Rails and I18n&lt;/a&gt; - introductory article about i18n in Rails (Ilya Bodrov)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Official Globalize extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/globalize/globalize-accessors&#34;&gt;globalize-accessors&lt;/a&gt; - generator of accessor methods for models. &lt;em&gt;(e.g. title_en, title_cz)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/globalize/globalize-versioning&#34;&gt;globalize-versioning&lt;/a&gt; - versioning support for using Globalize with &lt;a href=&#34;https://github.com/airblade/paper_trail&#34;&gt;&lt;code&gt;paper_trail&lt;/code&gt;&lt;/a&gt;. (compatible with Globalize 3.x and 4.x)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternative solutions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/barsoom/traco&#34;&gt;Traco&lt;/a&gt; - use multiple columns in the same model (Barsoom)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shioyama/mobility&#34;&gt;Mobility&lt;/a&gt; - pluggable translation framework supporting many strategies, including translatable columns, translation tables and hstore/jsonb (Chris Salzberg)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cfabianski/hstore_translate&#34;&gt;hstore_translate&lt;/a&gt; - use PostgreSQL&#39;s hstore datatype to store translations, instead of separate translation tables (Cédric Fabianski)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cfabianski/json_translate&#34;&gt;json_translate&lt;/a&gt; - use PostgreSQL&#39;s json/jsonb datatype to store translations, instead of separate translation tables (Cédric Fabianski)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yabawock/trasto&#34;&gt;Trasto&lt;/a&gt; - store translations directly in the model in a Postgres Hstore column&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related solutions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/norman/friendly_id-globalize&#34;&gt;friendly_id-globalize&lt;/a&gt; - lets you use Globalize to translate slugs (Norman Clarke)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>