<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-17T01:46:51Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>appdev-projects/float-chapter</title>
    <updated>2023-01-17T01:46:51Z</updated>
    <id>tag:github.com,2023-01-17:/appdev-projects/float-chapter</id>
    <link href="https://github.com/appdev-projects/float-chapter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby Practice&lt;/h1&gt; &#xA;&lt;p&gt;Run your Ruby file by typing &lt;code&gt;ruby &lt;/code&gt; and then the name of the file you want to run in the Terminal.&lt;/p&gt; &#xA;&lt;p&gt;If we want to run &lt;code&gt;float_round.rb&lt;/code&gt;, we can write the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ruby float_round.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To re-run this command, you can use the UP and DOWN arrow keys to look at the history of commands you&#39;ve run in a Terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Float&lt;/h2&gt; &#xA;&lt;h3&gt;float_find_hypotenuse.rb&lt;/h3&gt; &#xA;&lt;p&gt;A right triangle&#39;s two shorter sides have length &lt;code&gt;2.8&lt;/code&gt; and &lt;code&gt;4.5&lt;/code&gt;. Write a program to calculate how long its longest side is and print it.&lt;/p&gt; &#xA;&lt;p&gt;Remember: the Pythagorean Theorem says that&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appdev-projects/float-chapter/main/pythagorous.png&#34; alt=&#34;pythagorean therum&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;where &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are the lengths of the shorter sides, and &lt;code&gt;c&lt;/code&gt; is the length of the longest side.&lt;/p&gt; &#xA;&lt;p&gt;Your program should output a number; for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;5.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about the formula: &lt;a href=&#34;https://www.mathsisfun.com/pythagoras.html&#34;&gt;https://www.mathsisfun.com/pythagoras.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;float_rounding.rb&lt;/h3&gt; &#xA;&lt;p&gt;Write a program that calculates 10 divided by 3 and rounds the result to 3 decimal places. The program should print this result.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;3.333&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Specs&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click here to see names of each test&lt;/summary&gt; &#xA; &lt;p&gt;float_find_hypotenuse.rb should output &#39;5.3&#39;&#39;&lt;/p&gt; &#xA; &lt;p&gt;float_round.rb should output &#39;3.333&#39;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>appdev-projects/integer-chapter</title>
    <updated>2023-01-17T01:46:51Z</updated>
    <id>tag:github.com,2023-01-17:/appdev-projects/integer-chapter</id>
    <link href="https://github.com/appdev-projects/integer-chapter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby Practice&lt;/h1&gt; &#xA;&lt;p&gt;Run your Ruby file by typing &lt;code&gt;ruby &lt;/code&gt; and then the name of the file you want to run in the Terminal.&lt;/p&gt; &#xA;&lt;p&gt;If we want to run &lt;code&gt;integer_math.rb&lt;/code&gt;, we can write the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ruby integer_math.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To re-run this command, you can use the UP and DOWN arrow keys to look at the history of commands you&#39;ve run in a Terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Integer&lt;/h2&gt; &#xA;&lt;h3&gt;integer_math.rb&lt;/h3&gt; &#xA;&lt;p&gt;If you divide the number of days in a regular year by the number of days in a week, what&#39;s the remainder?&lt;/p&gt; &#xA;&lt;p&gt;Your output should be a number; for example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;integer_odd.rb&lt;/h3&gt; &#xA;&lt;p&gt;It should ask the user to enter a number (using &lt;code&gt;gets&lt;/code&gt;) and output &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; if the entered number is odd.&lt;/p&gt; &#xA;&lt;p&gt;Example (&lt;code&gt;13&lt;/code&gt; is the input):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;Enter an odd number:&#34;&#xA;13&#xA;true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example (&lt;code&gt;12&lt;/code&gt; is the input):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;Enter an odd number:&#34;&#xA;12&#xA;false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;integer_birth_year.rb&lt;/h2&gt; &#xA;&lt;p&gt;Ask for a personâ€™s age, and then calculate and display what year they were born in.&lt;/p&gt; &#xA;&lt;p&gt;Input: &lt;code&gt;80&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Key output: &#34;Wow, you were born in 1940. You&#39;re old!&#34;&lt;/p&gt; &#xA;&lt;p&gt;Complete input and output example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;How old are you?&#34;&#xA;80&#xA;&#34;Wow, you were born in 1940. You&#39;re old!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Specs&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click here to see names of each test&lt;/summary&gt; &#xA; &lt;p&gt;integer_math.rb should output &#39;1&#39;&lt;/p&gt; &#xA; &lt;p&gt;integer_odd.rb should output &#39;true&#39; if the entered number is odd&lt;/p&gt; &#xA; &lt;p&gt;integer_odd.rb should output &#39;false&#39; if the entered number is not odd&lt;/p&gt; &#xA; &lt;p&gt;integer_birth_year.rb should output &#39;Wow, you were born in 1940. You&#39;re old!&#39; if the input is 80.&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>appdev-projects/hash-chapter</title>
    <updated>2023-01-17T01:46:51Z</updated>
    <id>tag:github.com,2023-01-17:/appdev-projects/hash-chapter</id>
    <link href="https://github.com/appdev-projects/hash-chapter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby Practice&lt;/h1&gt; &#xA;&lt;p&gt;Run your Ruby file by typing &lt;code&gt;ruby &lt;/code&gt; and then the name of the file you want to run in the Terminal.&lt;/p&gt; &#xA;&lt;p&gt;If we want to run &lt;code&gt;hash_person.rb&lt;/code&gt;, we can write the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ruby hash_person.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To re-run this command, you can use the UP and DOWN arrow keys to look at the history of commands you&#39;ve run in a Terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Hash&lt;/h2&gt; &#xA;&lt;h3&gt;hash_person.rb&lt;/h3&gt; &#xA;&lt;p&gt;Input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Maude 24 Artist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Key output: &lt;code&gt;{ :name =&amp;gt; &#34;Maude&#34;, :age =&amp;gt; 24, :occupation =&amp;gt; &#34;Artist&#34; }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Complete input and output example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;Enter a name, age, and occupation separated by spaces:&#34;&#xA;Maude 24 Artist&#xA;{ :name =&amp;gt; &#34;Maude&#34;, :age =&amp;gt; 24, :occupation =&amp;gt; &#34;Artist&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Make sure the value of the :age key is an Integer&lt;/h6&gt; &#xA;&lt;h3&gt;hash_dig.rb&lt;/h3&gt; &#xA;&lt;p&gt;Write a program that uses the &lt;code&gt;sample_hash&lt;/code&gt; variable and prints the value of key &#34;history&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sample_hash = {&#xA;   :class =&amp;gt; { &#xA;      :student =&amp;gt; { &#xA;         :name =&amp;gt; &#34;Mike&#34;,&#xA;         &#34;marks&#34; =&amp;gt; { &#xA;            &#34;physics&#34; =&amp;gt; 70,&#xA;            &#34;history&#34; =&amp;gt; 80&#xA;         }&#xA;      }&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;hash_find_value.rb&lt;/h3&gt; &#xA;&lt;p&gt;Write a program that: Asks the user for an Integer, then checks to see if that integer is a value of any of the keys in sample_hash. If you find the number, print out &#34;100 is under the key: a.&#34; If you don&#39;t find the number print out &#34;Could not find the integer 100&#34;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;Enter an integer:&#34;&#xA;4&#xA;&#34;Could not find the integer 4&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;hash_list.rb&lt;/h3&gt; &#xA;&lt;p&gt;Given this list of people, print only names of people who are at least 16.&lt;/p&gt; &#xA;&lt;p&gt;Yes, you could just look at it with your eyes and print their names, but imagine that you couldn&#39;t because there are a million items in the list.&lt;/p&gt; &#xA;&lt;p&gt;Use the variable, loops, and conditionals instead.&lt;/p&gt; &#xA;&lt;p&gt;Output something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;Jerry&#34;&#xA;&#34;Sloane&#34;&#xA;&#34;Hurly&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Specs&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click here to see names of each test&lt;/summary&gt; &#xA; &lt;p&gt;hash_person.rb prints Hash of &#39;{:name =&amp;gt; &#34;Osi&#34;, :age =&amp;gt; 24, :occupation =&amp;gt; &#34;Songwriter&#34;}&#39;, when input is &#39;Osi 24 Songwriter&#39;&lt;/p&gt; &#xA; &lt;p&gt;hash_person.rb prints Hash of &#39;{:name =&amp;gt; &#34;Lia&#34;, :age =&amp;gt; 32, :occupation =&amp;gt; &#34;Engineer&#34;}&#39;, when input is &#39;Lia 32 Engineer&#39;&lt;/p&gt; &#xA; &lt;p&gt;hash_find_value.rb prints Hash of &#39;Could not find the integer 4&#39;, when input is &#39;4&#39;&lt;/p&gt; &#xA; &lt;p&gt;hash_find_value.rb prints Hash of &#39;100 is under the key: a.&#39;, when input is &#39;100&#39;&lt;/p&gt; &#xA; &lt;p&gt;hash_find_value.rb prints Hash of &#39;22 is under the key: e.&#39;, when input is &#39;22&#39;&lt;/p&gt; &#xA; &lt;p&gt;hash_find_value.rb prints Hash of &#39;32 is under the key: e.&#39;, when input is &#39;32&#39;&lt;/p&gt; &#xA; &lt;p&gt;hash_dig.rb prints &#39;80&#39; by retriving the value from the Hash&lt;/p&gt; &#xA; &lt;p&gt;hash_list.rb prints &#39;James&#39;, &#39;Yolanda&#39;, &#39;Red&#39;, and &#39;Fatimah&#39; using variables, loops, if statements, and Hash methods&#39;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>