<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-21T01:32:17Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rails/rails-dom-testing</title>
    <updated>2024-05-21T01:32:17Z</updated>
    <id>tag:github.com,2024-05-21:/rails/rails-dom-testing</id>
    <link href="https://github.com/rails/rails-dom-testing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extracting DomAssertions and SelectorAssertions from ActionView.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rails::Dom::Testing&lt;/h1&gt; &#xA;&lt;p&gt;This gem is responsible for comparing HTML doms and asserting that DOM elements are present in Rails applications. Doms are compared via &lt;code&gt;assert_dom_equal&lt;/code&gt; and &lt;code&gt;assert_dom_not_equal&lt;/code&gt;. Elements are asserted via &lt;code&gt;assert_dom&lt;/code&gt;, &lt;code&gt;assert_dom_encoded&lt;/code&gt;, &lt;code&gt;assert_dom_email&lt;/code&gt; and a subset of the dom can be selected with &lt;code&gt;css_select&lt;/code&gt;. The gem is developed for Rails 4.2 and above, and will not work on previous versions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Dom Assertions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;assert_dom_equal &#39;&amp;lt;h1&amp;gt;Lingua França&amp;lt;/h1&amp;gt;&#39;, &#39;&amp;lt;h1&amp;gt;Lingua França&amp;lt;/h1&amp;gt;&#39;&#xA;&#xA;assert_dom_not_equal &#39;&amp;lt;h1&amp;gt;Portuguese&amp;lt;/h1&amp;gt;&#39;, &#39;&amp;lt;h1&amp;gt;Danish&amp;lt;/h1&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Selector Assertions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# implicitly selects from the document_root_element&#xA;css_select &#39;.hello&#39; # =&amp;gt; Nokogiri::XML::NodeSet of elements with hello class&#xA;&#xA;# select from a supplied node. assert_dom asserts elements exist.&#xA;assert_dom document_root_element.at(&#39;.hello&#39;), &#39;.goodbye&#39;&#xA;&#xA;# select from a supplied node. assert_not_dom asserts elements do not exist.&#xA;assert_not_dom document_root_element.at(&#39;.hello&#39;), &#39;.goodbye&#39;&#xA;&#xA;# elements in CDATA encoded sections can also be selected&#xA;assert_dom_encoded &#39;#out-of-your-element&#39;&#xA;&#xA;# assert elements within an html email exists&#xA;assert_dom_email &#39;#you-got-mail&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The documentation in &lt;a href=&#34;https://github.com/rails/rails-dom-testing/raw/master/lib/rails/dom/testing/assertions/selector_assertions.rb&#34;&gt;selector_assertions.rb&lt;/a&gt; goes into a lot more detail of how selector assertions can be used.&lt;/p&gt; &#xA;&lt;h3&gt;HTML versions&lt;/h3&gt; &#xA;&lt;p&gt;By default, assertions will use Nokogiri&#39;s HTML4 parser.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;Rails::Dom::Testing.default_html_version&lt;/code&gt; is set to &lt;code&gt;:html5&lt;/code&gt;, then the assertions will use Nokogiri&#39;s HTML5 parser. (If the HTML5 parser is not available on your platform, then a &lt;code&gt;NotImplementedError&lt;/code&gt; will be raised.)&lt;/p&gt; &#xA;&lt;p&gt;When testing in a Rails application, the parser default can also be set by setting &lt;code&gt;Rails.application.config.dom_testing_default_html_version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some assertions support an &lt;code&gt;html_version:&lt;/code&gt; keyword argument which can override the default for that assertion. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# compare DOMs built with the HTML5 parser&#xA;assert_dom_equal(expected, actual, html_version: :html5)&#xA;&#xA;# compare DOMs built with the HTML4 parser&#xA;assert_dom_not_equal(expected, actual, html_version: :html4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see documentation for individual assertions for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;rails-dom-testing&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install rails-dom-testing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Read more&lt;/h2&gt; &#xA;&lt;p&gt;Under the hood the doms are parsed with Nokogiri, and you&#39;ll generally be working with these two classes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/sparklemotion/nokogiri/Nokogiri/XML/Node&#34;&gt;&lt;code&gt;Nokogiri::XML::Node&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/sparklemotion/nokogiri/Nokogiri/XML/NodeSet&#34;&gt;&lt;code&gt;Nokogiri::XML::NodeSet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about Nokogiri:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nokogiri.org&#34;&gt;Nokogiri&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Rails::Dom::Testing&lt;/h2&gt; &#xA;&lt;p&gt;Rails::Dom::Testing is work of many contributors. You&#39;re encouraged to submit pull requests, propose features and discuss issues.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails-dom-testing/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Rails::Dom::Testing is released under the &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails-dom-testing/main/MIT-LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>evilmartians/evil-seed</title>
    <updated>2024-05-21T01:32:17Z</updated>
    <id>tag:github.com,2024-05-21:/evilmartians/evil-seed</id>
    <link href="https://github.com/evilmartians/evil-seed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Gem for creating partial anonymized dumps of your database using your app model relations.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/evil-seed&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/evil-seed.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/evilmartians/evil-seed&#34;&gt;&lt;img src=&#34;https://travis-ci.org/evilmartians/evil-seed.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cultofmartians.com/tasks/evil-seed.html&#34;&gt;&lt;img src=&#34;http://cultofmartians.com/assets/badges/badge.svg?sanitize=true&#34; alt=&#34;Cult of Martians&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;EvilSeed&lt;/h1&gt; &#xA;&lt;p&gt;EvilSeed is a tool for creating partial anonymized dump of your database based on your app models.&lt;/p&gt; &#xA;&lt;a href=&#34;https://evilmartians.com/&#34;&gt; &lt;img src=&#34;https://evilmartians.com/badges/sponsored-by-evil-martians.svg?sanitize=true&#34; alt=&#34;Sponsored by Evil Martians&#34; width=&#34;236&#34; height=&#34;54&#34;&gt;&lt;/a&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Using production-like data in your staging environment could be very useful, especially for debugging intricate production bugs.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to achieve this is to use production database backups. But that&#39;s not an option for rather large applications for two reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;production dump can be extremely large, and it just can&#39;t be dumped and restored in a reasonable time&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;you should care about sensitive data (anonymization).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;EvilSeed aims to solve these problems.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;evil-seed&#39;, require: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install evil-seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;evil_seed&#39;&#xA;&#xA;EvilSeed.configure do |config|&#xA;  # First, you should specify +root models+ and their +constraints+ to limit the number of dumped records:&#xA;  # This is like Forum.where(featured: true).all&#xA;  config.root(&#39;Forum&#39;, featured: true) do |root|&#xA;    # It&#39;s possible to remove some associations from dumping with pattern of association path to exclude&#xA;    #&#xA;    # Association path is a dot-delimited string of association chain starting from model itself:&#xA;    # example: &#34;forum.users.questions&#34;&#xA;    root.exclude(/\btracking_pixels\b/, &#39;forum.popular_questions&#39;)&#xA;&#xA;    # It&#39;s possible to limit the number of included into dump has_many and has_one records for every association&#xA;    # Note that belongs_to records for all not excluded associations are always dumped to keep referential integrity.&#xA;    root.limit_associations_size(100)&#xA;&#xA;    # Or for certain association only&#xA;    root.limit_associations_size(10, &#39;forum.questions&#39;)&#xA;  end&#xA;&#xA;  # Everything you can pass to +where+ method will work as constraints:&#xA;  config.root(&#39;User&#39;, &#39;created_at &amp;gt; ?&#39;, Time.current.beginning_of_day - 1.day)&#xA;&#xA;  # For some system-wide models you may omit constraints to dump all records&#xA;  config.root(&#34;Role&#34;) do |root|&#xA;    # Exclude everything&#xA;    root.exclude(/.*/)&#xA;  end&#xA;&#xA;  # Transformations allows you to change dumped data e. g. to hide sensitive information&#xA;  config.customize(&#34;User&#34;) do |u|&#xA;    # Reset password for all users to the same for ease of debugging on developer&#39;s machine&#xA;    u[&#34;encrypted_password&#34;] = encrypt(&#34;qwerty&#34;)&#xA;    # Reset or mutate other attributes at your convenience&#xA;    u[&#34;metadata&#34;].merge!(&#34;foo&#34; =&amp;gt; &#34;bar&#34;)&#xA;    u[&#34;created_at&#34;] = Time.current&#xA;    # Please note that there you have only hash of record attributes, not the record itself!&#xA;  end&#xA;&#xA;  # Anonymization is a handy DSL for transformations allowing you to transform model attributes in declarative fashion&#xA;  # Please note that model setters will NOT be called: results of the blocks will be assigned to&#xA;  config.anonymize(&#34;User&#34;) do&#xA;    name  { Faker::Name.name }&#xA;    email { Faker::Internet.email }&#xA;    login { |login| &#34;#{login}-test&#34; }&#xA;  end&#xA;&#xA;  # You can ignore columns for any model. This is specially useful when working&#xA;  # with encrypted columns.&#xA;  #&#xA;  # This will remove the columns even if the model is not a root node and is&#xA;  # dumped via an association.&#xA;  config.ignore_columns(&#34;Profile&#34;, :name)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating dump&lt;/h3&gt; &#xA;&lt;p&gt;Just call the &lt;code&gt;#dump&lt;/code&gt; method and pass a path where you want your SQL dump file to appear!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;evil_seed&#39;&#xA;EvilSeed.dump(&#39;path/to/new_dump.sql&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caveats, tips, and tricks&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify &lt;code&gt;root&lt;/code&gt;s for dictionaries and system-wide models like &lt;code&gt;Role&lt;/code&gt; at the top without constraints and with all associations excluded.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;exclude&lt;/code&gt; aggressively. You will be amazed, how much your app&#39;s models graph is connected. This, in conjunction with the fact that this gem traverses associations in deep-first fashion, sometimes leads to unwanted results: some records will get into dump even if you don&#39;t want them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Look at the resulted dump: there are some useful debug comments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Database compatibility&lt;/h2&gt; &#xA;&lt;p&gt;This gem has been tested against:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PostgreSQL: any version that works with ActiveRecord should work&lt;/li&gt; &#xA; &lt;li&gt;MySQL: any version that works with ActiveRecord should work&lt;/li&gt; &#xA; &lt;li&gt;SQLite: 3.7.11 or newer is required (with support for inserting multiple rows at a time)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FIXME (help wanted)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; associations are traversed in a bit nonintuitive way for end user:&lt;/p&gt; &lt;p&gt;Association path for &lt;code&gt;User.has_and_belongs_to_many :roles&lt;/code&gt; is &lt;code&gt;user.users_roles.role&lt;/code&gt;, but should be &lt;code&gt;user.roles&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test coverage is poor&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Some internal refactoring is required&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Standalone usage&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use it as a standalone application, you can place exerything in a single file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#!/usr/bin/env ruby&#xA;&#xA;require &#39;bundler/inline&#39;&#xA;&#xA;gemfile do&#xA;  source &#39;https://rubygems.org&#39;&#xA;  gem &#39;activerecord&#39;&#xA;  gem &#39;evil-seed&#39;&#xA;  gem &#39;mysql2&#39;&#xA;end&#xA;&#xA;# Describe your database layout with ActiveRecord models.&#xA;# See http://guides.rubyonrails.org/active_record_basics.html&#xA;&#xA;class Category &amp;lt; ActiveRecord::Base&#xA;  has_many :translations, class_name: &#34;Category::Translation&#34;&#xA;end&#xA;&#xA;class Category::Translation &amp;lt; ActiveRecord::Base&#xA;  belongs_to :category, inverse_of: :translations&#xA;end&#xA;&#xA;# Configure evil-seed itself&#xA;EvilSeed.configure do |config|&#xA;  config.root(&#34;Category&#34;, &#34;id &amp;lt; ?&#34;, 1000)&#xA;end&#xA;&#xA;# Connect to your database.&#xA;# See http://guides.rubyonrails.org/configuring.html#configuring-a-database)&#xA;ActiveRecord::Base.establish_connection(ENV.fetch(&#34;DATABASE_URL&#34;))&#xA;&#xA;# Create dump in dump.sql file in the same directory as this script&#xA;EvilSeed.dump(File.join(__dir__, &#34;dump.sql&#34;).to_s)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And launch it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DATABASE_URL=mysql2://user:pass@host/db ruby path/to/your/script.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake test&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and tags, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/palkan/evil-seed&#34;&gt;https://github.com/palkan/evil-seed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>