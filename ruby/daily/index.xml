<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-11T01:32:32Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joeldrapper/phlex</title>
    <updated>2022-08-11T01:32:32Z</updated>
    <id>tag:github.com,2022-08-11:/joeldrapper/phlex</id>
    <link href="https://github.com/joeldrapper/phlex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework for building view components with a Ruby DSL.&lt;/p&gt;&lt;hr&gt;&lt;img alt=&#34;Phlex logo&#34; src=&#34;https://raw.githubusercontent.com/joeldrapper/phlex/main/phlex_logo.png&#34; width=&#34;250&#34;&gt; &#xA;&lt;p&gt;It’s time for a new way to compose views in Ruby, using... ✨&lt;strong&gt;Ruby&lt;/strong&gt;.✨ We don’t need another templating language. With Phlex, you can write small, reusable view components using simple Ruby Objects and templates composed of Ruby blocks.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Phlex is still in early development and should not be used in production yet.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The Road to 1.0&lt;/h3&gt; &#xA;&lt;p&gt;Phlex is licenced under MIT and is being developed in the open by &lt;a href=&#34;https://github.com/joeldrapper&#34;&gt;Joel Drapper&lt;/a&gt;. The plan is to release a stable &lt;code&gt;1.0&lt;/code&gt; version in the next few months.&lt;/p&gt; &#xA;&lt;p&gt;If you want to help out, you can contribute by opening an issue or PR. You can also &lt;a href=&#34;https://savvycal.com/joeldrapper/pair&#34;&gt;book a pairing session&lt;/a&gt; with me. If you work for a company that would benefit from Phlex, I accept &lt;a href=&#34;https://github.com/sponsors/joeldrapper&#34;&gt;sponsorships&lt;/a&gt; through GitHub.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;Basic Component&lt;/h3&gt; &#xA;&lt;p&gt;You can define a component by subclassing &lt;code&gt;Phlex::Component&lt;/code&gt; and defining a &lt;code&gt;template&lt;/code&gt; method where you can build HTML with simple block syntax. Each HTML tag is a method that accepts keyword arguments for its attributes. Text content can be passed as the first positional argument or alternatively, you can open a block to create nested HTML tags.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class NavComponent &amp;lt; Phlex::Component&#xA;  def template&#xA;    nav id: &#34;main_nav&#34; do&#xA;      ul do&#xA;        li { a &#34;Home&#34;, href: &#34;/&#34; }&#xA;        li { a &#34;About&#34;, href: &#34;/about&#34; }&#xA;        li { a &#34;Contact&#34;, href: &#34;/contact&#34; }&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Component Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Components can accept arguments by defining an initializer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MessageComponent &amp;lt; Phlex::Component&#xA;  def initialize(name:)&#xA;    @name = name&#xA;  end&#xA;&#xA;  def template&#xA;    h1 &#34;Hello #{@name}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default initialiser inherited from &lt;code&gt;Phlex::Component&lt;/code&gt; sets each keyword argument to an instance variable, so the above could be re-written to call &lt;code&gt;super&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MessageComponent &amp;lt; Phlex::Component&#xA;  def initialize(name:)&#xA;    super&#xA;  end&#xA;&#xA;  def template&#xA;    h1 &#34;Hello #{@name}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Content&lt;/h3&gt; &#xA;&lt;p&gt;Components, like tags, can accept nested contents as a block given to &lt;code&gt;template&lt;/code&gt;, which they can then yield or pass to another tag.&lt;/p&gt; &#xA;&lt;p&gt;Here the content is passed to a &lt;code&gt;div&lt;/code&gt; tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CardComponent &amp;lt; Phlex::Component&#xA;  def template(&amp;amp;)&#xA;    div class: &#34;rounded drop-shadow p-5&#34;, &amp;amp;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the content is yielded inside a &lt;code&gt;div&lt;/code&gt; tag right after an &lt;code&gt;h1&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CardComponent &amp;lt; Phlex::Component&#xA;  def initialize(title:)&#xA;    super&#xA;  end&#xA;&#xA;  def template(&amp;amp;)&#xA;    div class: &#34;rounded drop-shadow p-5&#34; do&#xA;      h1 @title&#xA;      content(&amp;amp;)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nested components&lt;/h3&gt; &#xA;&lt;p&gt;Components can be nested inside other components too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class NavComponent &amp;lt; Phlex::Component&#xA;  def initialize(links:)&#xA;    super&#xA;  end&#xA;&#xA;  def template&#xA;    nav do&#xA;      ul do&#xA;        @links.each do |label, link|&#xA;          component Nav::ItemComponent, label:, link:&#xA;        end&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class Nav::ItemComponent &amp;lt; Phlex::Component&#xA;  def initialize(label:, link:)&#xA;    super&#xA;  end&#xA;&#xA;  def template&#xA;    li { a label, href: link }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instance variables and methods from the components are accessible deep inside nested components and tag blocks because blocks capture their context for execution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ArticlesComponent &amp;lt; Phlex::Component&#xA;  def initialize(articles:)&#xA;    super&#xA;  end&#xA;&#xA;  def template&#xA;    component CardComponent, title: &#34;Articles&#34; do&#xA;      @articles.each do |article|&#xA;        h2 @article.title&#xA;        text @article.content&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced components with DSLs&lt;/h3&gt; &#xA;&lt;p&gt;Becuase components accept blocks, it’s really easy to define advanced components with their own DSLs. Take, for instance, this table fabricator component that lets you define rows / columns with headers using blocks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;component Table::Fabricator, @articles, layout: :column do |t|&#xA;  t.data &#34;Title&#34; { a _1.title, href: article_path(_1) }&#xA;  t.text_data(&#34;Author&#34;, &amp;amp;:author)&#xA;  t.text_data(&#34;Published&#34;, &amp;amp;:published_at)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;phlex&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install phlex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the Phlex project&#39;s codebases, issue trackers, chat rooms and mailing lists is expected to follow the &lt;a href=&#34;https://github.com/%5BUSERNAME%5D/phlex/raw/master/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Logo design sponsored by &lt;a href=&#34;https://www.logology.co&#34;&gt;Logology&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>karafka/karafka</title>
    <updated>2022-08-11T01:32:32Z</updated>
    <id>tag:github.com,2022-08-11:/karafka/karafka</id>
    <link href="https://github.com/karafka/karafka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby and Rails efficient Kafka processing framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karafka/misc/master/logo/karafka_logotype_transparent2.png&#34; alt=&#34;karafka logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/karafka/karafka/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/karafka/karafka/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/rb/karafka&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/karafka.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.karafka.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karafka/misc/master/slack.svg?sanitize=true&#34; alt=&#34;Join the chat at https://slack.karafka.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About Karafka&lt;/h2&gt; &#xA;&lt;p&gt;Karafka is a Ruby and Rails multi-threaded efficient Kafka processing framework that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports parallel processing in &lt;a href=&#34;https://github.com/karafka/karafka/wiki/Concurrency-and-multithreading&#34;&gt;multiple threads&lt;/a&gt; (also for a &lt;a href=&#34;https://github.com/karafka/karafka/wiki/Pro-Virtual-Partitions&#34;&gt;single topic partition&lt;/a&gt; work)&lt;/li&gt; &#xA; &lt;li&gt;Has &lt;a href=&#34;https://github.com/karafka/karafka/wiki/Active-Job&#34;&gt;ActiveJob backend&lt;/a&gt; support (including &lt;a href=&#34;https://github.com/karafka/karafka/wiki/Pro-Enhanced-Active-Job#ordered-jobs&#34;&gt;ordered jobs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/karafka/karafka/wiki/Integrating-with-Ruby-on-Rails-and-other-frameworks#integrating-with-ruby-on-rails=&#34;&gt;Automatically integrates&lt;/a&gt; with Ruby on Rails&lt;/li&gt; &#xA; &lt;li&gt;Supports in-development &lt;a href=&#34;https://github.com/karafka/karafka/wiki/Auto-reload-of-code-changes-in-development&#34;&gt;code reloading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Is powered by &lt;a href=&#34;https://github.com/edenhill/librdkafka&#34;&gt;librdkafka&lt;/a&gt; (the Apache Kafka C/C++ client library)&lt;/li&gt; &#xA; &lt;li&gt;Has an out-of the box &lt;a href=&#34;https://github.com/karafka/karafka/wiki/Monitoring-and-logging&#34;&gt;StatsD/DataDog monitoring&lt;/a&gt; with a dashboard template.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Define what topics you want to consume with which consumers in karafka.rb&#xA;Karafka::App.routes.draw do&#xA;  topic &#39;system_events&#39; do&#xA;    consumer EventsConsumer&#xA;  end&#xA;end&#xA;&#xA;# And create your consumers, within which your messages will be processed&#xA;class EventsConsumer &amp;lt; ApplicationConsumer&#xA;  # Example that utilizes ActiveRecord#insert_all and Karafka batch processing&#xA;  def consume&#xA;    # Store all of the incoming Kafka events locally in an efficient way&#xA;    Event.insert_all messages.payloads&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Karafka &lt;strong&gt;uses&lt;/strong&gt; threads to handle many messages simultaneously in the same process. It does not require Rails but will integrate tightly with any Ruby on Rails applications to make event processing dead simple.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re entirely new to the subject, you can start with our &#34;Kafka on Rails&#34; articles series, which will get you up and running with the terminology and basic ideas behind using Kafka:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mensfeld.pl/2017/11/kafka-on-rails-using-kafka-with-ruby-on-rails-part-1-kafka-basics-and-its-advantages/&#34;&gt;Kafka on Rails: Using Kafka with Ruby on Rails – Part 1 – Kafka basics and its advantages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mensfeld.pl/2018/01/kafka-on-rails-using-kafka-with-ruby-on-rails-part-2-getting-started-with-ruby-and-kafka/&#34;&gt;Kafka on Rails: Using Kafka with Ruby on Rails – Part 2 – Getting started with Rails and Kafka&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to get started with Kafka and Karafka as fast as possible, then the best idea is to visit our &lt;a href=&#34;https://github.com/karafka/karafka/wiki/Getting-started&#34;&gt;Getting started&lt;/a&gt; guides and the &lt;a href=&#34;https://github.com/karafka/example-apps&#34;&gt;example apps repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also maintain many &lt;a href=&#34;https://github.com/karafka/karafka/tree/master/spec/integrations&#34;&gt;integration specs&lt;/a&gt; illustrating various use-cases and features of the framework.&lt;/p&gt; &#xA;&lt;h3&gt;TL;DR (1 minute from setup to publishing and consuming messages)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;: Kafka running. You can start it by following instructions from &lt;a href=&#34;https://github.com/karafka/karafka/wiki/Setting-up-Kafka&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add and install Karafka:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle add karafka&#xA;&#xA;bundle exec karafka install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Dispatch a message to the example topic using the Rails or Ruby console:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Karafka.producer.produce_sync(topic: &#39;example&#39;, payload: { &#39;ping&#39; =&amp;gt; &#39;pong&#39; }.to_json)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run Karafka server and see the consumption magic happen:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec karafka server&#xA;&#xA;[7616dc24-505a-417f-b87b-6bf8fc2d98c5] Polled 1 message in 1000ms&#xA;[dcf3a8d8-0bd9-433a-8f63-b70a0cdb0732] Consume job for ExampleConsumer on example started&#xA;{&#34;ping&#34;=&amp;gt;&#34;pong&#34;}&#xA;[dcf3a8d8-0bd9-433a-8f63-b70a0cdb0732] Consume job for ExampleConsumer on example finished in 0ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Want to Upgrade? LGPL is not for you? Want to help?&lt;/h2&gt; &#xA;&lt;p&gt;I also sell Karafka Pro subscriptions. It includes a commercial-friendly license, priority support, architecture consultations, and high throughput data processing-related features (virtual partitions, long-running jobs, and more).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;20%&lt;/strong&gt; of the income will be distributed back to other OSS projects that Karafka uses under the hood.&lt;/p&gt; &#xA;&lt;p&gt;Help me provide high-quality open-source software. Please see the Karafka &lt;a href=&#34;https://karafka.io&#34;&gt;homepage&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Karafka has &lt;a href=&#34;https://github.com/karafka/karafka/wiki&#34;&gt;Wiki pages&lt;/a&gt; for almost everything and a pretty decent &lt;a href=&#34;https://github.com/karafka/karafka/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;. It covers the installation, setup, and deployment, along with other useful details on how to run Karafka.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions about using Karafka, feel free to join our &lt;a href=&#34;https://slack.karafka.io&#34;&gt;Slack&lt;/a&gt; channel.&lt;/p&gt; &#xA;&lt;p&gt;Karafka has &lt;a href=&#34;https://github.com/karafka/karafka/wiki/Pro-Support&#34;&gt;priority support&lt;/a&gt; for technical and architectural questions that is part of the Karafka Pro subscription.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/scientist</title>
    <updated>2022-08-11T01:32:32Z</updated>
    <id>tag:github.com,2022-08-11:/github/scientist</id>
    <link href="https://github.com/github/scientist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔬 A Ruby library for carefully refactoring critical paths.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scientist!&lt;/h1&gt; &#xA;&lt;p&gt;A Ruby library for carefully refactoring critical paths. &lt;a href=&#34;https://travis-ci.org/github/scientist&#34;&gt;&lt;img src=&#34;https://travis-ci.org/github/scientist.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/github/scientist?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/github/scientist/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How do I science?&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s pretend you&#39;re changing the way you handle permissions in a large web app. Tests can help guide your refactoring, but you really want to compare the current and refactored behaviors under load.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;scientist&#34;&#xA;&#xA;class MyWidget&#xA;  def allows?(user)&#xA;    experiment = Scientist::Default.new &#34;widget-permissions&#34;&#xA;    experiment.use { model.check_user?(user).valid? } # old way&#xA;    experiment.try { user.can?(:read, model) } # new way&#xA;&#xA;    experiment.run&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wrap a &lt;code&gt;use&lt;/code&gt; block around the code&#39;s original behavior, and wrap &lt;code&gt;try&lt;/code&gt; around the new behavior. &lt;code&gt;experiment.run&lt;/code&gt; will always return whatever the &lt;code&gt;use&lt;/code&gt; block returns, but it does a bunch of stuff behind the scenes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It decides whether or not to run the &lt;code&gt;try&lt;/code&gt; block,&lt;/li&gt; &#xA; &lt;li&gt;Randomizes the order in which &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;try&lt;/code&gt; blocks are run,&lt;/li&gt; &#xA; &lt;li&gt;Measures the durations of all behaviors in seconds,&lt;/li&gt; &#xA; &lt;li&gt;Compares the result of &lt;code&gt;try&lt;/code&gt; to the result of &lt;code&gt;use&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Swallow and record exceptions raised in the &lt;code&gt;try&lt;/code&gt; block when overriding &lt;code&gt;raised&lt;/code&gt;, and&lt;/li&gt; &#xA; &lt;li&gt;Publishes all this information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;use&lt;/code&gt; block is called the &lt;strong&gt;control&lt;/strong&gt;. The &lt;code&gt;try&lt;/code&gt; block is called the &lt;strong&gt;candidate&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Creating an experiment is wordy, but when you include the &lt;code&gt;Scientist&lt;/code&gt; module, the &lt;code&gt;science&lt;/code&gt; helper will instantiate an experiment and call &lt;code&gt;run&lt;/code&gt; for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;scientist&#34;&#xA;&#xA;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def allows?(user)&#xA;    science &#34;widget-permissions&#34; do |experiment|&#xA;      experiment.use { model.check_user(user).valid? } # old way&#xA;      experiment.try { user.can?(:read, model) } # new way&#xA;    end # returns the control value&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t declare any &lt;code&gt;try&lt;/code&gt; blocks, none of the Scientist machinery is invoked and the control value is always returned.&lt;/p&gt; &#xA;&lt;h2&gt;Making science useful&lt;/h2&gt; &#xA;&lt;p&gt;The examples above will run, but they&#39;re not really &lt;em&gt;doing&lt;/em&gt; anything. The &lt;code&gt;try&lt;/code&gt; blocks don&#39;t run yet and none of the results get published. Replace the default experiment implementation to control execution and reporting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;scientist/experiment&#34;&#xA;&#xA;class MyExperiment&#xA;  include Scientist::Experiment&#xA;&#xA;  attr_accessor :name&#xA;&#xA;  def initialize(name)&#xA;    @name = name&#xA;  end&#xA;&#xA;  def enabled?&#xA;    # see &#34;Ramping up experiments&#34; below&#xA;    true&#xA;  end&#xA;&#xA;  def raised(operation, error)&#xA;    # see &#34;In a Scientist callback&#34; below&#xA;    p &#34;Operation &#39;#{operation}&#39; failed with error &#39;#{error.inspect}&#39;&#34;&#xA;    super # will re-raise&#xA;  end&#xA;&#xA;  def publish(result)&#xA;    # see &#34;Publishing results&#34; below&#xA;    p result&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;Scientist::Experiment&lt;/code&gt; is included in a class, it automatically sets it as the default implementation via &lt;code&gt;Scientist::Experiment.set_default&lt;/code&gt;. This &lt;code&gt;set_default&lt;/code&gt; call is skipped if you include &lt;code&gt;Scientist::Experiment&lt;/code&gt; in a module.&lt;/p&gt; &#xA;&lt;p&gt;Now calls to the &lt;code&gt;science&lt;/code&gt; helper will load instances of &lt;code&gt;MyExperiment&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Controlling comparison&lt;/h3&gt; &#xA;&lt;p&gt;Scientist compares control and candidate values using &lt;code&gt;==&lt;/code&gt;. To override this behavior, use &lt;code&gt;compare&lt;/code&gt; to define how to compare observed values instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def users&#xA;    science &#34;users&#34; do |e|&#xA;      e.use { User.all }         # returns User instances&#xA;      e.try { UserService.list } # returns UserService::User instances&#xA;&#xA;      e.compare do |control, candidate|&#xA;        control.map(&amp;amp;:login) == candidate.map(&amp;amp;:login)&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If either the control block or candidate block raises an error, Scientist compares the two observations&#39; classes and messages using &lt;code&gt;==&lt;/code&gt;. To override this behavior, use &lt;code&gt;compare_error&lt;/code&gt; to define how to compare observed errors instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def slug_from_login(login)&#xA;    science &#34;slug_from_login&#34; do |e|&#xA;      e.use { User.slug_from_login login }         # returns String instance or ArgumentError&#xA;      e.try { UserService.slug_from_login login }  # returns String instance or ArgumentError&#xA;&#xA;      compare_error_message_and_class = -&amp;gt; (control, candidate) do&#xA;        control.class == candidate.class &amp;amp;&amp;amp; &#xA;        control.message == candidate.message&#xA;      end&#xA;&#xA;      compare_argument_errors = -&amp;gt; (control, candidate) do&#xA;        control.class == ArgumentError &amp;amp;&amp;amp;&#xA;        candidate.class == ArgumentError &amp;amp;&amp;amp;&#xA;        control.message.start_with?(&#34;Input has invalid characters&#34;) &amp;amp;&amp;amp;&#xA;        candidate.message.start_with?(&#34;Invalid characters in input&#34;) &#xA;      end&#xA;&#xA;      e.compare_error do |control, candidate|&#xA;        compare_error_message_and_class.call(control, candidate) ||&#xA;        compare_argument_errors.call(control, candidate)&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding context&lt;/h3&gt; &#xA;&lt;p&gt;Results aren&#39;t very useful without some way to identify them. Use the &lt;code&gt;context&lt;/code&gt; method to add to or retrieve the context for an experiment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;science &#34;widget-permissions&#34; do |e|&#xA;  e.context :user =&amp;gt; user&#xA;&#xA;  e.use { model.check_user(user).valid? }&#xA;  e.try { user.can?(:read, model) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;context&lt;/code&gt; takes a Symbol-keyed Hash of extra data. The data is available in &lt;code&gt;Experiment#publish&lt;/code&gt; via the &lt;code&gt;context&lt;/code&gt; method. If you&#39;re using the &lt;code&gt;science&lt;/code&gt; helper a lot in a class, you can provide a default context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def allows?(user)&#xA;    science &#34;widget-permissions&#34; do |e|&#xA;      e.context :user =&amp;gt; user&#xA;&#xA;      e.use { model.check_user(user).valid? }&#xA;      e.try { user.can?(:read, model) }&#xA;    end&#xA;  end&#xA;&#xA;  def destroy&#xA;    science &#34;widget-destruction&#34; do |e|&#xA;      e.use { old_scary_destroy }&#xA;      e.try { new_safe_destroy }&#xA;    end&#xA;  end&#xA;&#xA;  def default_scientist_context&#xA;    { :widget =&amp;gt; self }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;widget-permissions&lt;/code&gt; and &lt;code&gt;widget-destruction&lt;/code&gt; experiments will both have a &lt;code&gt;:widget&lt;/code&gt; key in their contexts.&lt;/p&gt; &#xA;&lt;h3&gt;Expensive setup&lt;/h3&gt; &#xA;&lt;p&gt;If an experiment requires expensive setup that should only occur when the experiment is going to be run, define it with the &lt;code&gt;before_run&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Code under test modifies this in-place. We want to copy it for the&#xA;# candidate code, but only when needed:&#xA;value_for_original_code = big_object&#xA;value_for_new_code      = nil&#xA;&#xA;science &#34;expensive-but-worthwhile&#34; do |e|&#xA;  e.before_run do&#xA;    value_for_new_code = big_object.deep_copy&#xA;  end&#xA;  e.use { original_code(value_for_original_code) }&#xA;  e.try { new_code(value_for_new_code) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keeping it clean&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you don&#39;t want to store the full value for later analysis. For example, an experiment may return &lt;code&gt;User&lt;/code&gt; instances, but when researching a mismatch, all you care about is the logins. You can define how to clean these values in an experiment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def users&#xA;    science &#34;users&#34; do |e|&#xA;      e.use { User.all }&#xA;      e.try { UserService.list }&#xA;&#xA;      e.clean do |value|&#xA;        value.map(&amp;amp;:login).sort&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this cleaned value is available in observations in the final published result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyExperiment&#xA;  include Scientist::Experiment&#xA;&#xA;  # ...&#xA;&#xA;  def publish(result)&#xA;    result.control.value         # [&amp;lt;User alice&amp;gt;, &amp;lt;User bob&amp;gt;, &amp;lt;User carol&amp;gt;]&#xA;    result.control.cleaned_value # [&#34;alice&#34;, &#34;bob&#34;, &#34;carol&#34;]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;#clean&lt;/code&gt; method will discard the previous cleaner block if you call it again. If for some reason you need to access the currently configured cleaner block, &lt;code&gt;Scientist::Experiment#cleaner&lt;/code&gt; will return the block without further ado. &lt;em&gt;(This probably won&#39;t come up in normal usage, but comes in handy if you&#39;re writing, say, a custom experiment runner that provides default cleaners.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Ignoring mismatches&lt;/h3&gt; &#xA;&lt;p&gt;During the early stages of an experiment, it&#39;s possible that some of your code will always generate a mismatch for reasons you know and understand but haven&#39;t yet fixed. Instead of these known cases always showing up as mismatches in your metrics or analysis, you can tell an experiment whether or not to ignore a mismatch using the &lt;code&gt;ignore&lt;/code&gt; method. You may include more than one block if needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def admin?(user)&#xA;  science &#34;widget-permissions&#34; do |e|&#xA;    e.use { model.check_user(user).admin? }&#xA;    e.try { user.can?(:admin, model) }&#xA;&#xA;    e.ignore { user.staff? } # user is staff, always an admin in the new system&#xA;    e.ignore do |control, candidate|&#xA;      # new system doesn&#39;t handle unconfirmed users yet:&#xA;      control &amp;amp;&amp;amp; !candidate &amp;amp;&amp;amp; !user.confirmed_email?&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ignore blocks are only called if the &lt;em&gt;values&lt;/em&gt; don&#39;t match. Unless a &lt;code&gt;compare_error&lt;/code&gt; comparator is defined, two cases are considered mismatches: a) one observation raising an exception and the other not, b) observations raising exceptions with different classes or messages.&lt;/p&gt; &#xA;&lt;h3&gt;Enabling/disabling experiments&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you don&#39;t want an experiment to run. Say, disabling a new codepath for anyone who isn&#39;t staff. You can disable an experiment by setting a &lt;code&gt;run_if&lt;/code&gt; block. If this returns &lt;code&gt;false&lt;/code&gt;, the experiment will merely return the control value. Otherwise, it defers to the experiment&#39;s configured &lt;code&gt;enabled?&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class DashboardController&#xA;  include Scientist&#xA;&#xA;  def dashboard_items&#xA;    science &#34;dashboard-items&#34; do |e|&#xA;      # only run this experiment for staff members&#xA;      e.run_if { current_user.staff? }&#xA;      # ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ramping up experiments&lt;/h3&gt; &#xA;&lt;p&gt;As a scientist, you know it&#39;s always important to be able to turn your experiment off, lest it run amok and result in villagers with pitchforks on your doorstep. In order to control whether or not an experiment is enabled, you must include the &lt;code&gt;enabled?&lt;/code&gt; method in your &lt;code&gt;Scientist::Experiment&lt;/code&gt; implementation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyExperiment&#xA;  include Scientist::Experiment&#xA;&#xA;  attr_accessor :name, :percent_enabled&#xA;&#xA;  def initialize(name)&#xA;    @name = name&#xA;    @percent_enabled = 100&#xA;  end&#xA;&#xA;  def enabled?&#xA;    percent_enabled &amp;gt; 0 &amp;amp;&amp;amp; rand(100) &amp;lt; percent_enabled&#xA;  end&#xA;&#xA;  # ...&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code will be invoked for every method with an experiment every time, so be sensitive about its performance. For example, you can store an experiment in the database but wrap it in various levels of caching such as memcache or per-request thread-locals.&lt;/p&gt; &#xA;&lt;h3&gt;Publishing results&lt;/h3&gt; &#xA;&lt;p&gt;What good is science if you can&#39;t publish your results?&lt;/p&gt; &#xA;&lt;p&gt;You must implement the &lt;code&gt;publish(result)&lt;/code&gt; method, and can publish data however you like. For example, timing data can be sent to graphite, and mismatches can be placed in a capped collection in redis for debugging later.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;publish&lt;/code&gt; method is given a &lt;code&gt;Scientist::Result&lt;/code&gt; instance with its associated &lt;code&gt;Scientist::Observation&lt;/code&gt;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyExperiment&#xA;  include Scientist::Experiment&#xA;&#xA;  # ...&#xA;&#xA;  def publish(result)&#xA;&#xA;    # Store the timing for the control value,&#xA;    $statsd.timing &#34;science.#{name}.control&#34;, result.control.duration&#xA;    # for the candidate (only the first, see &#34;Breaking the rules&#34; below,&#xA;    $statsd.timing &#34;science.#{name}.candidate&#34;, result.candidates.first.duration&#xA;&#xA;    # and counts for match/ignore/mismatch:&#xA;    if result.matched?&#xA;      $statsd.increment &#34;science.#{name}.matched&#34;&#xA;    elsif result.ignored?&#xA;      $statsd.increment &#34;science.#{name}.ignored&#34;&#xA;    else&#xA;      $statsd.increment &#34;science.#{name}.mismatched&#34;&#xA;      # Finally, store mismatches in redis so they can be retrieved and examined&#xA;      # later on, for debugging and research.&#xA;      store_mismatch_data(result)&#xA;    end&#xA;  end&#xA;&#xA;  def store_mismatch_data(result)&#xA;    payload = {&#xA;      :name            =&amp;gt; name,&#xA;      :context         =&amp;gt; context,&#xA;      :control         =&amp;gt; observation_payload(result.control),&#xA;      :candidate       =&amp;gt; observation_payload(result.candidates.first),&#xA;      :execution_order =&amp;gt; result.observations.map(&amp;amp;:name)&#xA;    }&#xA;&#xA;    key = &#34;science.#{name}.mismatch&#34;&#xA;    $redis.lpush key, payload&#xA;    $redis.ltrim key, 0, 1000&#xA;  end&#xA;&#xA;  def observation_payload(observation)&#xA;    if observation.raised?&#xA;      {&#xA;        :exception =&amp;gt; observation.exception.class,&#xA;        :message   =&amp;gt; observation.exception.message,&#xA;        :backtrace =&amp;gt; observation.exception.backtrace&#xA;      }&#xA;    else&#xA;      {&#xA;        # see &#34;Keeping it clean&#34; above&#xA;        :value =&amp;gt; observation.cleaned_value&#xA;      }&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;When running your test suite, it&#39;s helpful to know that the experimental results always match. To help with testing, Scientist defines a &lt;code&gt;raise_on_mismatches&lt;/code&gt; class attribute when you include &lt;code&gt;Scientist::Experiment&lt;/code&gt;. Only do this in your test suite!&lt;/p&gt; &#xA;&lt;p&gt;To raise on mismatches:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyExperiment&#xA;  include Scientist::Experiment&#xA;  # ... implementation&#xA;end&#xA;&#xA;MyExperiment.raise_on_mismatches = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scientist will raise a &lt;code&gt;Scientist::Experiment::MismatchError&lt;/code&gt; exception if any observations don&#39;t match.&lt;/p&gt; &#xA;&lt;h4&gt;Custom mismatch errors&lt;/h4&gt; &#xA;&lt;p&gt;To instruct Scientist to raise a custom error instead of the default &lt;code&gt;Scientist::Experiment::MismatchError&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CustomMismatchError &amp;lt; Scientist::Experiment::MismatchError&#xA;  def to_s&#xA;    message = &#34;There was a mismatch! Here&#39;s the diff:&#34;&#xA;&#xA;    diffs = result.candidates.map do |candidate|&#xA;      Diff.new(result.control, candidate)&#xA;    end.join(&#34;\n&#34;)&#xA;&#xA;    &#34;#{message}\n#{diffs}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;science &#34;widget-permissions&#34; do |e|&#xA;  e.use { Report.find(id) }&#xA;  e.try { ReportService.new.fetch(id) }&#xA;&#xA;  e.raise_with CustomMismatchError&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows for pre-processing on mismatch error exception messages.&lt;/p&gt; &#xA;&lt;h3&gt;Handling errors&lt;/h3&gt; &#xA;&lt;h4&gt;In candidate code&lt;/h4&gt; &#xA;&lt;p&gt;Scientist rescues and tracks &lt;em&gt;all&lt;/em&gt; exceptions raised in a &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;use&lt;/code&gt; block, including some where rescuing may cause unexpected behavior (like &lt;code&gt;SystemExit&lt;/code&gt; or &lt;code&gt;ScriptError&lt;/code&gt;). To rescue a more restrictive set of exceptions, modify the &lt;code&gt;RESCUES&lt;/code&gt; list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# default is [Exception]&#xA;Scientist::Observation::RESCUES.replace [StandardError]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Timeout ⏲️&lt;/strong&gt;: If you&#39;re introducing a candidate that could possibly timeout, use caution. ⚠️ While Scientist rescues all exceptions that occur in the candidate block, it &lt;em&gt;does not&lt;/em&gt; protect you from timeouts, as doing so would be complicated. It would likely require running the candidate code in a background job and tracking the time of a request. We feel the cost of this complexity would outweigh the benefit, so make sure that your code doesn&#39;t cause timeouts. This risk can be reduced by running the experiment on a low percentage so that users can (most likely) bypass the experiment by refreshing the page if they hit a timeout. See &lt;a href=&#34;https://raw.githubusercontent.com/github/scientist/main/#ramping-up-experiments&#34;&gt;Ramping up experiments&lt;/a&gt; below for how details on how to set the percentage for your experiment.&lt;/p&gt; &#xA;&lt;h4&gt;In a Scientist callback&lt;/h4&gt; &#xA;&lt;p&gt;If an exception is raised within any of Scientist&#39;s internal helpers, like &lt;code&gt;publish&lt;/code&gt;, &lt;code&gt;compare&lt;/code&gt;, or &lt;code&gt;clean&lt;/code&gt;, the &lt;code&gt;raised&lt;/code&gt; method is called with the symbol name of the internal operation that failed and the exception that was raised. The default behavior of &lt;code&gt;Scientist::Default&lt;/code&gt; is to simply re-raise the exception. Since this halts the experiment entirely, it&#39;s often a better idea to handle this error and continue so the experiment as a whole isn&#39;t canceled entirely:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyExperiment&#xA;  include Scientist::Experiment&#xA;&#xA;  # ...&#xA;&#xA;  def raised(operation, error)&#xA;    InternalErrorTracker.track! &#34;science failure in #{name}: #{operation}&#34;, error&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The operations that may be handled here are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:clean&lt;/code&gt; - an exception is raised in a &lt;code&gt;clean&lt;/code&gt; block&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:compare&lt;/code&gt; - an exception is raised in a &lt;code&gt;compare&lt;/code&gt; block&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:enabled&lt;/code&gt; - an exception is raised in the &lt;code&gt;enabled?&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ignore&lt;/code&gt; - an exception is raised in an &lt;code&gt;ignore&lt;/code&gt; block&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:publish&lt;/code&gt; - an exception is raised in the &lt;code&gt;publish&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:run_if&lt;/code&gt; - an exception is raised in a &lt;code&gt;run_if&lt;/code&gt; block&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Designing an experiment&lt;/h3&gt; &#xA;&lt;p&gt;Because &lt;code&gt;enabled?&lt;/code&gt; and &lt;code&gt;run_if&lt;/code&gt; determine when a candidate runs, it&#39;s impossible to guarantee that it will run every time. For this reason, Scientist is only safe for wrapping methods that aren&#39;t changing data.&lt;/p&gt; &#xA;&lt;p&gt;When using Scientist, we&#39;ve found it most useful to modify both the existing and new systems simultaneously anywhere writes happen, and verify the results at read time with &lt;code&gt;science&lt;/code&gt;. &lt;code&gt;raise_on_mismatches&lt;/code&gt; has also been useful to ensure that the correct data was written during tests, and reviewing published mismatches has helped us find any situations we overlooked with our production data at runtime. When writing to and reading from two systems, it&#39;s also useful to write some data reconciliation scripts to verify and clean up production data alongside any running experiments.&lt;/p&gt; &#xA;&lt;h4&gt;Noise and error rates&lt;/h4&gt; &#xA;&lt;p&gt;Keep in mind that Scientist&#39;s &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt; blocks run sequentially in random order. As such, any data upon which your code depends may change before the second block is invoked, potentially yielding a mismatch between the candidate and control return values. To calibrate your expectations with respect to &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_I_and_type_II_errors&#34;&gt;false negatives&lt;/a&gt; arising from systemic conditions external to your proposed changes, consider starting with an experiment in which both the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt; blocks invoke the control method. Then proceed with introducing a candidate.&lt;/p&gt; &#xA;&lt;h3&gt;Finishing an experiment&lt;/h3&gt; &#xA;&lt;p&gt;As your candidate behavior converges on the controls, you&#39;ll start thinking about removing an experiment and using the new behavior.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If there are any ignore blocks, the candidate behavior is &lt;em&gt;guaranteed&lt;/em&gt; to be different. If this is unacceptable, you&#39;ll need to remove the ignore blocks and resolve any ongoing mismatches in behavior until the observations match perfectly every time.&lt;/li&gt; &#xA; &lt;li&gt;When removing a read-behavior experiment, it&#39;s a good idea to keep any write-side duplication between an old and new system in place until well after the new behavior has been in production, in case you need to roll back.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Breaking the rules&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes scientists just gotta do weird stuff. We understand.&lt;/p&gt; &#xA;&lt;h3&gt;Ignoring results entirely&lt;/h3&gt; &#xA;&lt;p&gt;Science is useful even when all you care about is the timing data or even whether or not a new code path blew up. If you have the ability to incrementally control how often an experiment runs via your &lt;code&gt;enabled?&lt;/code&gt; method, you can use it to silently and carefully test new code paths and ignore the results altogether. You can do this by setting &lt;code&gt;ignore { true }&lt;/code&gt;, or for greater efficiency, &lt;code&gt;compare { true }&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will still log mismatches if any exceptions are raised, but will disregard the values entirely.&lt;/p&gt; &#xA;&lt;h3&gt;Trying more than one thing&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s not usually a good idea to try more than one alternative simultaneously. Behavior isn&#39;t guaranteed to be isolated and reporting + visualization get quite a bit harder. Still, it&#39;s sometimes useful.&lt;/p&gt; &#xA;&lt;p&gt;To try more than one alternative at once, add names to some &lt;code&gt;try&lt;/code&gt; blocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;scientist&#34;&#xA;&#xA;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def allows?(user)&#xA;    science &#34;widget-permissions&#34; do |e|&#xA;      e.use { model.check_user(user).valid? } # old way&#xA;&#xA;      e.try(&#34;api&#34;) { user.can?(:read, model) } # new service API&#xA;      e.try(&#34;raw-sql&#34;) { user.can_sql?(:read, model) } # raw query&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the experiment runs, all candidate behaviors are tested and each candidate observation is compared with the control in turn.&lt;/p&gt; &#xA;&lt;h3&gt;No control, just candidates&lt;/h3&gt; &#xA;&lt;p&gt;Define the candidates with named &lt;code&gt;try&lt;/code&gt; blocks, omit a &lt;code&gt;use&lt;/code&gt;, and pass a candidate name to &lt;code&gt;run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;experiment = MyExperiment.new(&#34;various-ways&#34;) do |e|&#xA;  e.try(&#34;first-way&#34;)  { ... }&#xA;  e.try(&#34;second-way&#34;) { ... }&#xA;end&#xA;&#xA;experiment.run(&#34;second-way&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;science&lt;/code&gt; helper also knows this trick:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;science &#34;various-ways&#34;, run: &#34;first-way&#34; do |e|&#xA;  e.try(&#34;first-way&#34;)  { ... }&#xA;  e.try(&#34;second-way&#34;) { ... }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Providing fake timing data&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re writing tests that depend on specific timing values, you can provide canned durations using the &lt;code&gt;fabricate_durations_for_testing_purposes&lt;/code&gt; method, and Scientist will report these in &lt;code&gt;Scientist::Observation#duration&lt;/code&gt; instead of the actual execution times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;science &#34;absolutely-nothing-suspicious-happening-here&#34; do |e|&#xA;  e.use { ... } # &#34;control&#34;&#xA;  e.try { ... } # &#34;candidate&#34;&#xA;  e.fabricate_durations_for_testing_purposes( &#34;control&#34; =&amp;gt; 1.0, &#34;candidate&#34; =&amp;gt; 0.5 )&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fabricate_durations_for_testing_purposes&lt;/code&gt; takes a Hash of duration values, keyed by behavior names. (By default, Scientist uses &lt;code&gt;&#34;control&#34;&lt;/code&gt; and &lt;code&gt;&#34;candidate&#34;&lt;/code&gt;, but if you override these as shown in &lt;a href=&#34;https://raw.githubusercontent.com/github/scientist/main/#trying-more-than-one-thing&#34;&gt;Trying more than one thing&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/github/scientist/main/#no-control-just-candidates&#34;&gt;No control, just candidates&lt;/a&gt;, use matching names here.) If a name is not provided, the actual execution time will be reported instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Like &lt;code&gt;Scientist::Experiment#cleaner&lt;/code&gt;, this probably won&#39;t come up in normal usage. It&#39;s here to make it easier to test code that extends Scientist.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Without including Scientist&lt;/h3&gt; &#xA;&lt;p&gt;If you need to use Scientist in a place where you aren&#39;t able to include the Scientist module, you can call &lt;code&gt;Scientist.run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Scientist.run &#34;widget-permissions&#34; do |e|&#xA;  e.use { model.check_user(user).valid? }&#xA;  e.try { user.can?(:read, model) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hacking&lt;/h2&gt; &#xA;&lt;p&gt;Be on a Unixy box. Make sure a modern Bundler is available. &lt;code&gt;script/test&lt;/code&gt; runs the unit tests. All development dependencies are installed automatically. Scientist requires Ruby 2.3 or newer.&lt;/p&gt; &#xA;&lt;h2&gt;Wrappers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RealGeeks/lab_tech&#34;&gt;RealGeeks/lab_tech&lt;/a&gt; is a Rails engine for using this library by controlling, storing, and analyzing experiment results with ActiveRecord.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daylerees/scientist&#34;&gt;daylerees/scientist&lt;/a&gt; (PHP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scientistproject/Scientist.net&#34;&gt;scientistproject/scientist.net&lt;/a&gt; (.NET)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joealcorn/laboratory&#34;&gt;joealcorn/laboratory&lt;/a&gt; (Python)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rawls238/Scientist4J&#34;&gt;rawls238/Scientist4J&lt;/a&gt; (Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomiaijo/scientist&#34;&gt;tomiaijo/scientist&lt;/a&gt; (C++)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trello/scientist&#34;&gt;trello/scientist&lt;/a&gt; (node.js)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ziyasal/scientist.js&#34;&gt;ziyasal/scientist.js&lt;/a&gt; (node.js, ES6)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TrueWill/tzientist&#34;&gt;TrueWill/tzientist&lt;/a&gt; (node.js, TypeScript)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TrueWill/paleontologist&#34;&gt;TrueWill/paleontologist&lt;/a&gt; (Deno, TypeScript)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yeller/laboratory&#34;&gt;yeller/laboratory&lt;/a&gt; (Clojure)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lancew/Scientist&#34;&gt;lancew/Scientist&lt;/a&gt; (Perl 5)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lancew/ScientistP6&#34;&gt;lancew/ScientistP6&lt;/a&gt; (Perl 6)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MadcapJake/Test-Lab&#34;&gt;MadcapJake/Test-Lab&lt;/a&gt; (Perl 6)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cwbriones/scientist&#34;&gt;cwbriones/scientist&lt;/a&gt; (Elixir)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/calavera/go-scientist&#34;&gt;calavera/go-scientist&lt;/a&gt; (Go)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jelmersnoeck/experiment&#34;&gt;jelmersnoeck/experiment&lt;/a&gt; (Go)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spoptchev/scientist&#34;&gt;spoptchev/scientist&lt;/a&gt; (Kotlin / Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junkpiano/scientist&#34;&gt;junkpiano/scientist&lt;/a&gt; (Swift)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://serverlessscientist.com/&#34;&gt;serverless scientist&lt;/a&gt; (AWS Lambda)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fightmegg/scientist&#34;&gt;fightmegg/scientist&lt;/a&gt; (TypeScript, Browser / Node.js)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MisterSpex/misterspex-scientist&#34;&gt;MisterSpex/misterspex-scientist&lt;/a&gt; (Java, no dependencies)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jbarnette&#34;&gt;@jbarnette&lt;/a&gt;, &lt;a href=&#34;https://github.com/jesseplusplus&#34;&gt;@jesseplusplus&lt;/a&gt;, &lt;a href=&#34;https://github.com/rick&#34;&gt;@rick&lt;/a&gt;, and &lt;a href=&#34;https://github.com/zerowidth&#34;&gt;@zerowidth&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>