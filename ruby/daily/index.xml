<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-29T01:36:00Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sidekiq-scheduler/sidekiq-scheduler</title>
    <updated>2022-06-29T01:36:00Z</updated>
    <id>tag:github.com,2022-06-29:/sidekiq-scheduler/sidekiq-scheduler</id>
    <link href="https://github.com/sidekiq-scheduler/sidekiq-scheduler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight job scheduler extension for Sidekiq&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sidekiq-scheduler&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://sidekiq-scheduler.github.io/sidekiq-scheduler/&#34;&gt; &lt;img src=&#34;https://sidekiq-scheduler.github.io/sidekiq-scheduler/images/small-logo.svg?sanitize=true&#34; width=&#34;468px&#34; height=&#34;200px&#34; alt=&#34;Sidekiq Scheduler&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://badge.fury.io/rb/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://badge.fury.io/rb/sidekiq-scheduler.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://www.rubydoc.info/github/sidekiq-scheduler/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/yard-docs-blue.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sidekiq-scheduler&lt;/code&gt; is an extension to &lt;a href=&#34;http://github.com/mperham/sidekiq&#34;&gt;Sidekiq&lt;/a&gt; that pushes jobs in a scheduled way, mimicking cron utility.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Current branch contains work of the v4 release, if you are looking for version 2.2.* or 3.*, go to &lt;a href=&#34;https://github.com/sidekiq-scheduler/sidekiq-scheduler/tree/2.2-stable&#34;&gt;2.2-stable branch&lt;/a&gt; / &lt;a href=&#34;https://github.com/sidekiq-scheduler/sidekiq-scheduler/tree/v3-stable&#34;&gt;v3-stable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install sidekiq-scheduler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Hello World&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# hello-scheduler.rb&#xA;&#xA;require &#39;sidekiq-scheduler&#39;&#xA;&#xA;class HelloWorld&#xA;  include Sidekiq::Worker&#xA;&#xA;  def perform&#xA;    puts &#39;Hello world&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/sidekiq.yml&#xA;&#xA;:schedule:&#xA;  hello_world:&#xA;    cron: &#39;0 * * * * *&#39;   # Runs once per minute&#xA;    class: HelloWorld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run sidekiq:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sidekiq -r ./hello-scheduler.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2016-12-10T11:53:08.561Z 6452 TID-ovouhwvm4 INFO: Loading Schedule&#xA;2016-12-10T11:53:08.561Z 6452 TID-ovouhwvm4 INFO: Scheduling HelloWorld {&#34;cron&#34;=&amp;gt;&#34;0 * * * * *&#34;, &#34;class&#34;=&amp;gt;&#34;HelloWorld&#34;}&#xA;2016-12-10T11:53:08.562Z 6452 TID-ovouhwvm4 INFO: Schedules Loaded&#xA;&#xA;2016-12-10T11:54:00.212Z 6452 TID-ovoulivew HelloWorld JID-b35f36a562733fcc5e58444d INFO: start&#xA;Hello world&#xA;2016-12-10T11:54:00.213Z 6452 TID-ovoulivew HelloWorld JID-b35f36a562733fcc5e58444d INFO: done: 0.001 sec&#xA;&#xA;2016-12-10T11:55:00.287Z 6452 TID-ovoulist0 HelloWorld JID-b7e2b244c258f3cd153c2494 INFO: start&#xA;Hello world&#xA;2016-12-10T11:55:00.287Z 6452 TID-ovoulist0 HelloWorld JID-b7e2b244c258f3cd153c2494 INFO: done: 0.001 sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration options&lt;/h2&gt; &#xA;&lt;p&gt;Configuration options are placed inside &lt;code&gt;sidekiq.yml&lt;/code&gt; config file.&lt;/p&gt; &#xA;&lt;p&gt;Available options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;:dynamic: &amp;lt;if true the schedule can be modified in runtime [false by default]&amp;gt;&#xA;:dynamic_every: &amp;lt;if dynamic is true, the schedule is reloaded every interval [5s by default]&amp;gt;&#xA;:enabled: &amp;lt;enables scheduler if true [true by default]&amp;gt;&#xA;:scheduler:&#xA;  :listened_queues_only: &amp;lt;push jobs whose queue is being listened by sidekiq [false by default]&amp;gt;&#xA;:rufus_scheduler_options: &amp;lt;Set custom options for rufus scheduler, like max_work_threads [{} by default]&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schedule configuration&lt;/h2&gt; &#xA;&lt;p&gt;The schedule is configured through the &lt;code&gt;:schedule&lt;/code&gt; config entry in the sidekiq config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;:schedule:&#xA;  CancelAbandonedOrders:&#xA;    cron: &#39;0 */5 * * * *&#39;   # Runs when second = 0, every 5 minutes&#xA;&#xA;  queue_documents_for_indexing:&#xA;    cron: &#39;0 0 * * * *&#39;   # Runs every hour&#xA;&#xA;    # By default the job name will be taken as worker class name.&#xA;    # If you want to have a different job name and class name, provide the &#39;class&#39; option&#xA;    class: QueueDocuments&#xA;&#xA;    queue: slow&#xA;    args: [&#39;*.pdf&#39;]&#xA;    description: &#34;This job queues pdf content for indexing in solr&#34;&#xA;&#xA;    # Enable the `metadata` argument which will pass a Hash containing the schedule metadata&#xA;    # as the last argument of the `perform` method. `false` by default.&#xA;    include_metadata: true&#xA;&#xA;    # Enable / disable a job. All jobs are enabled by default.&#xA;    enabled: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Schedule metadata&lt;/h3&gt; &#xA;&lt;p&gt;You can configure Sidekiq-scheduler to pass an argument with metadata about the scheduling process to the worker&#39;s &lt;code&gt;perform&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;In the configuration file add the following on each worker class entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#xA;  SampleWorker:&#xA;    include_metadata: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On your &lt;code&gt;perform&lt;/code&gt; method, expect an additional argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def perform(args, ..., metadata)&#xA;    # Do something with the metadata&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;metadata&lt;/code&gt; hash contains the following keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  metadata.keys =&amp;gt;&#xA;    [&#xA;      :scheduled_at # The epoch when the job was scheduled to run&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schedule types&lt;/h2&gt; &#xA;&lt;p&gt;Supported types are &lt;code&gt;cron&lt;/code&gt;, &lt;code&gt;every&lt;/code&gt;, &lt;code&gt;interval&lt;/code&gt;, &lt;code&gt;at&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Cron, every, and interval types push jobs into sidekiq in a recurrent manner.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cron&lt;/code&gt; follows the same pattern as cron utility, with seconds resolution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;:schedule:&#xA;  HelloWorld:&#xA;    cron: &#39;0 * * * * *&#39; # Runs when second = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;every&lt;/code&gt; triggers following a given frequency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    every: &#39;45m&#39;    # Runs every 45 minutes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value is parsed by &lt;a href=&#34;https://github.com/floraison/fugit#fugitduration&#34;&gt;&lt;code&gt;Fugit::Duration.parse&lt;/code&gt;&lt;/a&gt;. It understands quite a number of formats, including human-readable ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    every: 45 minutes&#xA;    every: 2 hours and 30 minutes&#xA;    every: 1.5 hours&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;interval&lt;/code&gt; is similar to &lt;code&gt;every&lt;/code&gt;, the difference between them is that &lt;code&gt;interval&lt;/code&gt; type schedules the next execution after the interval has elapsed counting from its last job enqueue.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;every&lt;/code&gt; and &lt;code&gt;interval&lt;/code&gt; count from when the Sidekiq process (re)starts. So &lt;code&gt;every: &#39;48h&#39;&lt;/code&gt; will never run if the Sidekiq process is restarted daily, for example. You can do &lt;code&gt;every: [&#39;48h&#39;, first_in: &#39;0s&#39;]&lt;/code&gt; to make the job run immediately after a restart, and then have the worker check when it was last run.&lt;/p&gt; &#xA;&lt;p&gt;At, and in types push jobs only once. &lt;code&gt;at&lt;/code&gt; schedules in a point in time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    at: &#39;3001/01/01&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify any string that &lt;code&gt;DateTime.parse&lt;/code&gt; and &lt;code&gt;Chronic&lt;/code&gt; understand. To enable Chronic strings, you must add it as a dependency.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;in&lt;/code&gt; triggers after a time duration has elapsed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    in: 1h # pushes a sidekiq job in 1 hour, after start-up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can provide options to &lt;code&gt;every&lt;/code&gt; or &lt;code&gt;cron&lt;/code&gt; via an Array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    every: [&#39;30s&#39;, first_in: &#39;120s&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler&#34;&gt;https://github.com/jmettraux/rufus-scheduler&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Load the schedule from a different file&lt;/h2&gt; &#xA;&lt;p&gt;You can place the schedule configuration in a separate file from &lt;code&gt;config/sidekiq.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# sidekiq_scheduler.yml&#xA;&#xA;clear_leaderboards_contributors:&#xA;  cron: &#39;0 30 6 * * 1&#39;&#xA;  class: ClearLeaderboards&#xA;  queue: low&#xA;  args: contributors&#xA;  description: &#39;This job resets the weekly leaderboard for contributions&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please notice that the &lt;code&gt;schedule&lt;/code&gt; root key is not present in the separate file.&lt;/p&gt; &#xA;&lt;p&gt;To load the schedule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sidekiq&#39;&#xA;require &#39;sidekiq-scheduler&#39;&#xA;&#xA;Sidekiq.configure_server do |config|&#xA;  config.on(:startup) do&#xA;    Sidekiq.schedule = YAML.load_file(File.expand_path(&#39;../../sidekiq_scheduler.yml&#39;, __FILE__))&#xA;    SidekiqScheduler::Scheduler.instance.reload_schedule!&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above code can be placed in an initializer (in &lt;code&gt;config/initializers&lt;/code&gt;) that runs every time the app starts up.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic schedule&lt;/h2&gt; &#xA;&lt;p&gt;The schedule can be modified after startup. To add / update a schedule, you have to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq.set_schedule(&#39;heartbeat&#39;, { &#39;every&#39; =&amp;gt; [&#39;1m&#39;], &#39;class&#39; =&amp;gt; &#39;HeartbeatWorker&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the schedule did not exist it will be created, if it existed it will be updated.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;:dynamic&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt;, schedule changes are loaded every 5 seconds. Use the &lt;code&gt;:dynamic_every&lt;/code&gt; flag for a different interval.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/sidekiq.yml&#xA;:dynamic: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;:dynamic&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt;, you&#39;ll have to reload the schedule manually in sidekiq side:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SidekiqScheduler::Scheduler.instance.reload_schedule!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invoke &lt;code&gt;Sidekiq.get_schedule&lt;/code&gt; to obtain the current schedule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq.get_schedule&#xA;#  =&amp;gt; { &#39;every&#39; =&amp;gt; &#39;1m&#39;, &#39;class&#39; =&amp;gt; &#39;HardWorker&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Time zones&lt;/h2&gt; &#xA;&lt;p&gt;Note that if you use the cron syntax and are not running a Rails app, this will be interpreted in the server time zone.&lt;/p&gt; &#xA;&lt;p&gt;In a Rails app, &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler&#34;&gt;rufus-scheduler&lt;/a&gt; (&amp;gt;= 3.3.3) will use the &lt;code&gt;config.time_zone&lt;/code&gt; specified in Rails.&lt;/p&gt; &#xA;&lt;p&gt;You can explicitly specify the time zone that rufus-scheduler will use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    cron: &#39;0 30 6 * * 1 Europe/Stockholm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also note that &lt;code&gt;config.time_zone&lt;/code&gt; in Rails allows for a shorthand (e.g. &#34;Stockholm&#34;) that rufus-scheduler does not accept. If you write code to set the scheduler time zone from the &lt;code&gt;config.time_zone&lt;/code&gt; value, make sure it&#39;s the right format, e.g. with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::TimeZone.find_tzinfo(Rails.configuration.time_zone).name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes about connection pooling&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re configuring your own Redis connection pool, you need to make sure the size is adequate to be inclusive of both Sidekiq&#39;s own connection pool and Rufus Scheduler&#39;s.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s a minimum of &lt;code&gt;concurrency&lt;/code&gt; + 5 (per the &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Using-Redis#complete-control&#34;&gt;Sidekiq wiki&lt;/a&gt;) + &lt;code&gt;Rufus::Scheduler::MAX_WORK_THREADS&lt;/code&gt; (28 as of this writing; per the &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler#max_work_threads&#34;&gt;Rufus README&lt;/a&gt;), for a total of 58 with the default &lt;code&gt;concurrency&lt;/code&gt; of 25.&lt;/p&gt; &#xA;&lt;p&gt;You can also override the thread pool size in Rufus Scheduler by setting the following in your &lt;code&gt;sidekiq.yml&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;...&#xA;&#xA;rufus_scheduler_options:&#xA;  max_work_threads: 5&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes about running on Multiple Hosts&lt;/h2&gt; &#xA;&lt;p&gt;Under normal conditions, &lt;code&gt;cron&lt;/code&gt; and &lt;code&gt;at&lt;/code&gt; jobs are pushed once regardless of the number of &lt;code&gt;sidekiq-scheduler&lt;/code&gt; running instances, assumming that time deltas between hosts is less than 24 hours.&lt;/p&gt; &#xA;&lt;p&gt;Non-normal conditions that could push a specific job multiple times are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;high cpu load + a high number of jobs scheduled at the same time, like 100 jobs&lt;/li&gt; &#xA; &lt;li&gt;network / redis latency + 28 (see &lt;code&gt;MAX_WORK_THREADS&lt;/code&gt; &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler/raw/master/lib/rufus/scheduler.rb#L41&#34;&gt;https://github.com/jmettraux/rufus-scheduler/blob/master/lib/rufus/scheduler.rb#L41&lt;/a&gt;) or more jobs scheduled within the same network latency window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;every&lt;/code&gt;, &lt;code&gt;interval&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; jobs will be pushed once per host.&lt;/p&gt; &#xA;&lt;h2&gt;Notes on when Sidekiq worker is down&lt;/h2&gt; &#xA;&lt;p&gt;For a &lt;code&gt;cron&lt;/code&gt;/&lt;code&gt;at&lt;/code&gt; (and all other) job to be successfully enqueued, you need at least one sidekiq worker with scheduler to be up at that moment. Handling this is up to you and depends on your application.&lt;/p&gt; &#xA;&lt;p&gt;Possible solutions include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simply ignoring this fact, if you only run frequent periodic jobs, that can tolerate some increased interval&lt;/li&gt; &#xA; &lt;li&gt;Abstaining from deploys/restarts during time when critical jobs are usually scheduled&lt;/li&gt; &#xA; &lt;li&gt;Making your infrequent jobs idempotent (so that they can be enqueued multiple times but still produce result as if was run once) and scheduling them multiple times to reduce likelihood of not being run&lt;/li&gt; &#xA; &lt;li&gt;Zero downtime deploy for sidekiq workers: keep at least one worker up during whole deploy and only restart/shut it down after when new one has started&lt;/li&gt; &#xA; &lt;li&gt;Running scheduler inside your unicorn/rails processes (if you already have zero downtime deploy set up for these)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each option has it&#39;s own pros and cons.&lt;/p&gt; &#xA;&lt;h2&gt;Notes when running multiple Sidekiq processors on the same Redis&lt;/h2&gt; &#xA;&lt;h3&gt;TL;DR&lt;/h3&gt; &#xA;&lt;p&gt;Be &lt;strong&gt;sure&lt;/strong&gt; to include the &lt;code&gt;:enabled: false&lt;/code&gt; top-level key on any additional configurations to avoid any possibility of the &lt;code&gt;schedules&lt;/code&gt; definition being wiped by the second Sidekiq process.&lt;/p&gt; &#xA;&lt;p&gt;To illustrate what we mean:&lt;/p&gt; &#xA;&lt;p&gt;Say you have one process with the schedule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# e.g., config/sidekiq.yml&#xA;&#xA;:queues:&#xA;  - default&#xA;:schedule:&#xA;  do_something_every_minute:&#xA;    class: DoSomethingJob&#xA;    args: matey&#xA;    queue: :scheduler&#xA;    cron: &#39;0 * * * * * America/Los_Angeles&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a separate separate configured process without one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# e.g., config/sidekiq_other.yml&#xA;:queues:&#xA;  - scheduler&#xA;&#xA;## NOTE Disable the Scheduler&#xA;:enabled: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;This gem stores the configured schedule in Redis on boot. It&#39;s used, primarily, to display in the Web Integration, and allow you to interact with that schedule via that integration.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re running multiple Sidekiq processes on the same Redis namespace with different configurations, &lt;strong&gt;you&#39;ll want to explicitly &lt;em&gt;disable&lt;/em&gt; Sidekiq Scheduler&lt;/strong&gt; for the other processes not responsible for the schedule. If you don&#39;t, the last booted Sidekiq processes&#39; schedule will be what is stored in Redis.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/sidekiq-scheduler/sidekiq-scheduler/issues/361&#34;&gt;https://github.com/sidekiq-scheduler/sidekiq-scheduler/issues/361&lt;/a&gt; for a more details.&lt;/p&gt; &#xA;&lt;h2&gt;Sidekiq Web Integration&lt;/h2&gt; &#xA;&lt;p&gt;sidekiq-scheduler provides an extension to the Sidekiq web interface that adds a &lt;code&gt;Recurring Jobs&lt;/code&gt; page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;&#xA;require &#39;sidekiq/web&#39;&#xA;require &#39;sidekiq-scheduler/web&#39;&#xA;&#xA;run Sidekiq::Web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/sidekiq-scheduler/sidekiq-scheduler/raw/master/images/recurring-jobs-ui-tab.png&#34; alt=&#34;Sidekiq Web Integration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ActiveJob integration&lt;/h2&gt; &#xA;&lt;p&gt;When using sidekiq-scheduler with ActiveJob your jobs can just extend &lt;code&gt;ApplicationJob&lt;/code&gt; as usual, without the &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;include&lt;/code&gt; boilerplate. Under the hood Rails will load up the scheduler and include the worker module for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class HelloWorld &amp;lt; ApplicationJob&#xA;  def perform&#xA;    puts &#39;Hello world&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The Spring preloader and Testing your initializer via Rails console&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re pulling in your schedule from a YML file via an initializer as shown, be aware that the Spring application preloader included with Rails will interefere with testing via the Rails console.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spring will not reload initializers&lt;/strong&gt; unless the initializer is changed. Therefore, if you&#39;re making a change to your YML schedule file and reloading Rails console to see the change, Spring will make it seem like your modified schedule is not being reloaded.&lt;/p&gt; &#xA;&lt;p&gt;To see your updated schedule, be sure to reload Spring by stopping it prior to booting the Rails console.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;spring stop&lt;/code&gt; to stop Spring.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://github.com/sidekiq-scheduler/sidekiq-scheduler/issues/35#issuecomment-48067183&#34;&gt;this issue&lt;/a&gt; and &lt;a href=&#34;https://github.com/rails/spring/raw/master/README.md&#34;&gt;Spring&#39;s README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manage tasks from Unicorn/Rails server&lt;/h2&gt; &#xA;&lt;p&gt;If you want start sidekiq-scheduler only from Unicorn/Rails, but not from sidekiq you can have something like this in an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/sidekiq_scheduler.rb&#xA;require &#39;sidekiq&#39;&#xA;require &#39;sidekiq-scheduler&#39;&#xA;&#xA;puts &#34;Sidekiq.server? is #{Sidekiq.server?.inspect}&#34;&#xA;puts &#34;defined?(Rails::Server) is #{defined?(Rails::Server).inspect}&#34;&#xA;puts &#34;defined?(Unicorn) is #{defined?(Unicorn).inspect}&#34;&#xA;&#xA;if Rails.env == &#39;production&#39; &amp;amp;&amp;amp; (defined?(Rails::Server) || defined?(Unicorn))&#xA;  Sidekiq.configure_server do |config|&#xA;&#xA;    config.on(:startup) do&#xA;      Sidekiq.schedule = YAML.load_file(File.expand_path(&#39;../../scheduler.yml&#39;, __FILE__))&#xA;      SidekiqScheduler::Scheduler.instance.reload_schedule!&#xA;    end&#xA;  end&#xA;else&#xA;  SidekiqScheduler::Scheduler.instance.enabled = false&#xA;  puts &#34;SidekiqScheduler::Scheduler.instance.enabled is #{SidekiqScheduler::Scheduler.instance.enabled.inspect}&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copyright 2021 - 2022 Marcelo Lauxen.&lt;/li&gt; &#xA; &lt;li&gt;Copyright 2013 - 2022 Moove-IT.&lt;/li&gt; &#xA; &lt;li&gt;Copyright 2012 Morton Jonuschat.&lt;/li&gt; &#xA; &lt;li&gt;Some parts copyright 2010 Ben VandenBos.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>teamcapybara/capybara</title>
    <updated>2022-06-29T01:36:00Z</updated>
    <id>tag:github.com,2022-06-29:/teamcapybara/capybara</id>
    <link href="https://github.com/teamcapybara/capybara" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Acceptance test framework for web applications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Capybara&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/teamcapybara/capybara&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/teamcapybara/capybara.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/api/projects/github/teamcapybara/capybara&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/teamcapybara/capybara?svg=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/teamcapybara/capybara&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/teamcapybara/capybara.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/teamcapybara/capybara?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/teamcapybara/capybara/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/jnicklas/capybara?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dependabot.com/compatibility-score.html?dependency-name=capybara&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34;&gt;&lt;img src=&#34;https://api.dependabot.com/badges/compatibility_score?dependency-name=capybara&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34; alt=&#34;SemVer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Capybara helps you test web applications by simulating how a real user would interact with your app. It is agnostic about the driver running your tests and comes with Rack::Test and Selenium support built in. WebKit is supported through an external gem.&lt;/p&gt; &#xA;&lt;h2&gt;Support Capybara&lt;/h2&gt; &#xA;&lt;p&gt;If you and/or your company find value in Capybara and would like to contribute financially to its ongoing maintenance and development, please visit &lt;a href=&#34;https://www.patreon.com/capybara&#34;&gt;Patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Need help?&lt;/strong&gt; Ask on the mailing list (please do not open an issue on GitHub): &lt;a href=&#34;http://groups.google.com/group/ruby-capybara&#34;&gt;http://groups.google.com/group/ruby-capybara&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#key-benefits&#34;&gt;Key benefits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-capybara-with-cucumber&#34;&gt;Using Capybara with Cucumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-capybara-with-rspec&#34;&gt;Using Capybara with RSpec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-capybara-with-testunit&#34;&gt;Using Capybara with Test::Unit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-capybara-with-minitest&#34;&gt;Using Capybara with Minitest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-capybara-with-minitestspec&#34;&gt;Using Capybara with Minitest::Spec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#drivers&#34;&gt;Drivers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#selecting-the-driver&#34;&gt;Selecting the Driver&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#racktest&#34;&gt;RackTest&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#selenium&#34;&gt;Selenium&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#apparition&#34;&gt;Apparition&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#the-dsl&#34;&gt;The DSL&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#navigating&#34;&gt;Navigating&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#clicking-links-and-buttons&#34;&gt;Clicking links and buttons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#interacting-with-forms&#34;&gt;Interacting with forms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#querying&#34;&gt;Querying&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#finding&#34;&gt;Finding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#scoping&#34;&gt;Scoping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#working-with-windows&#34;&gt;Working with windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#scripting&#34;&gt;Scripting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#modals&#34;&gt;Modals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#matching&#34;&gt;Matching&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#exactness&#34;&gt;Exactness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#strategy&#34;&gt;Strategy&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#transactions-and-database-setup&#34;&gt;Transactions and database setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#asynchronous-javascript-ajax-and-friends&#34;&gt;Asynchronous JavaScript (Ajax and friends)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-the-dsl-elsewhere&#34;&gt;Using the DSL elsewhere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#calling-remote-servers&#34;&gt;Calling remote servers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-sessions&#34;&gt;Using sessions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#named-sessions&#34;&gt;Named sessions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-sessions-manually&#34;&gt;Using sessions manually&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#xpath-css-and-selectors&#34;&gt;XPath, CSS and selectors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#beware-the-xpath--trap&#34;&gt;Beware the XPath // trap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#configuring-and-adding-drivers&#34;&gt;Configuring and adding drivers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#gotchas&#34;&gt;Gotchas:&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#threadsafe-mode&#34;&gt;&#34;Threadsafe&#34; mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;key-benefits&#34;&gt;&lt;/a&gt;Key benefits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No setup&lt;/strong&gt; necessary for Rails and Rack application. Works out of the box.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive API&lt;/strong&gt; which mimics the language an actual user would use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Switch the backend&lt;/strong&gt; your tests run against from fast headless mode to an actual browser with no changes to your tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful synchronization&lt;/strong&gt; features mean you never have to manually wait for asynchronous processes to complete.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;setup&#34;&gt;&lt;/a&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Capybara requires Ruby 2.7.0 or later. To install, add this line to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;capybara&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the application that you are testing is a Rails app, add this line to your test helper file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/rails&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the application that you are testing is a Rack app, but not Rails, set Capybara.app to your Rack app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.app = MyRackApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to test JavaScript, or if your app interacts with (or is located at) a remote URL, you&#39;ll need to &lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#drivers&#34;&gt;use a different driver&lt;/a&gt;. If using Rails 5.0+, but not using the Rails system tests from 5.1, you&#39;ll probably also want to swap the &#34;server&#34; used to launch your app to Puma in order to match Rails defaults.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.server = :puma # Until your setup is working&#xA;Capybara.server = :puma, { Silent: true } # To clean up your test output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-capybara-with-cucumber&#34;&gt;&lt;/a&gt;Using Capybara with Cucumber&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;cucumber-rails&lt;/code&gt; gem comes with Capybara support built-in. If you are not using Rails, manually load the &lt;code&gt;capybara/cucumber&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/cucumber&#39;&#xA;Capybara.app = MyRackApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the Capybara DSL in your steps, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;When /I sign in/ do&#xA;  within(&#34;#session&#34;) do&#xA;    fill_in &#39;Email&#39;, with: &#39;user@example.com&#39;&#xA;    fill_in &#39;Password&#39;, with: &#39;password&#39;&#xA;  end&#xA;  click_button &#39;Sign in&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can switch to the &lt;code&gt;Capybara.javascript_driver&lt;/code&gt; (&lt;code&gt;:selenium&lt;/code&gt; by default) by tagging scenarios (or features) with &lt;code&gt;@javascript&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@javascript&#xA;Scenario: do something Ajaxy&#xA;  When I click the Ajax link&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also explicit tags for each registered driver set up for you (&lt;code&gt;@selenium&lt;/code&gt;, &lt;code&gt;@rack_test&lt;/code&gt;, etc).&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-capybara-with-rspec&#34;&gt;&lt;/a&gt;Using Capybara with RSpec&lt;/h2&gt; &#xA;&lt;p&gt;Load RSpec 3.5+ support by adding the following line (typically to your &lt;code&gt;spec_helper.rb&lt;/code&gt; file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/rspec&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Rails, put your Capybara specs in &lt;code&gt;spec/features&lt;/code&gt; or &lt;code&gt;spec/system&lt;/code&gt; (only works if &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/v/4-0/docs/directory-structure&#34;&gt;you have it configured in RSpec&lt;/a&gt;) and if you have your Capybara specs in a different directory, then tag the example groups with &lt;code&gt;type: :feature&lt;/code&gt; or &lt;code&gt;type: :system&lt;/code&gt; depending on which type of test you&#39;re writing.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Rails system specs please see &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/system-specs/system-spec#system-specs-driven-by-selenium-chrome-headless&#34;&gt;their documentation&lt;/a&gt; for selecting the driver you wish to use.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using Rails, tag all the example groups in which you want to use Capybara with &lt;code&gt;type: :feature&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can now write your specs like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#34;the signin process&#34;, type: :feature do&#xA;  before :each do&#xA;    User.create(email: &#39;user@example.com&#39;, password: &#39;password&#39;)&#xA;  end&#xA;&#xA;  it &#34;signs me in&#34; do&#xA;    visit &#39;/sessions/new&#39;&#xA;    within(&#34;#session&#34;) do&#xA;      fill_in &#39;Email&#39;, with: &#39;user@example.com&#39;&#xA;      fill_in &#39;Password&#39;, with: &#39;password&#39;&#xA;    end&#xA;    click_button &#39;Sign in&#39;&#xA;    expect(page).to have_content &#39;Success&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;js: true&lt;/code&gt; to switch to the &lt;code&gt;Capybara.javascript_driver&lt;/code&gt; (&lt;code&gt;:selenium&lt;/code&gt; by default), or provide a &lt;code&gt;:driver&lt;/code&gt; option to switch to one specific driver. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;some stuff which requires js&#39;, js: true do&#xA;  it &#39;will use the default js driver&#39;&#xA;  it &#39;will switch to one specific driver&#39;, driver: :apparition&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Capybara also comes with a built in DSL for creating descriptive acceptance tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;feature &#34;Signing in&#34; do&#xA;  background do&#xA;    User.create(email: &#39;user@example.com&#39;, password: &#39;caplin&#39;)&#xA;  end&#xA;&#xA;  scenario &#34;Signing in with correct credentials&#34; do&#xA;    visit &#39;/sessions/new&#39;&#xA;    within(&#34;#session&#34;) do&#xA;      fill_in &#39;Email&#39;, with: &#39;user@example.com&#39;&#xA;      fill_in &#39;Password&#39;, with: &#39;caplin&#39;&#xA;    end&#xA;    click_button &#39;Sign in&#39;&#xA;    expect(page).to have_content &#39;Success&#39;&#xA;  end&#xA;&#xA;  given(:other_user) { User.create(email: &#39;other@example.com&#39;, password: &#39;rous&#39;) }&#xA;&#xA;  scenario &#34;Signing in as another user&#34; do&#xA;    visit &#39;/sessions/new&#39;&#xA;    within(&#34;#session&#34;) do&#xA;      fill_in &#39;Email&#39;, with: other_user.email&#xA;      fill_in &#39;Password&#39;, with: other_user.password&#xA;    end&#xA;    click_button &#39;Sign in&#39;&#xA;    expect(page).to have_content &#39;Invalid email or password&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;feature&lt;/code&gt; is in fact just an alias for &lt;code&gt;describe ..., type: :feature&lt;/code&gt;, &lt;code&gt;background&lt;/code&gt; is an alias for &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;scenario&lt;/code&gt; for &lt;code&gt;it&lt;/code&gt;, and &lt;code&gt;given&lt;/code&gt;/&lt;code&gt;given!&lt;/code&gt; aliases for &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;let!&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Finally, Capybara matchers are also supported in view specs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe &#34;todos/show.html.erb&#34;, type: :view do&#xA;  it &#34;displays the todo title&#34; do&#xA;    assign :todo, Todo.new(title: &#34;Buy milk&#34;)&#xA;&#xA;    render&#xA;&#xA;    expect(rendered).to have_css(&#34;header h1&#34;, text: &#34;Buy milk&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: When you require &#39;capybara/rspec&#39; proxy methods are installed to work around name collisions between Capybara::DSL methods &lt;code&gt;all&lt;/code&gt;/&lt;code&gt;within&lt;/code&gt; and the identically named built-in RSpec matchers. If you opt not to require &#39;capybara/rspec&#39; you can install the proxy methods by requiring &#39;capybara/rspec/matcher_proxies&#39; after requiring RSpec and &#39;capybara/dsl&#39;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-capybara-with-testunit&#34;&gt;&lt;/a&gt;Using Capybara with Test::Unit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using &lt;code&gt;Test::Unit&lt;/code&gt;, define a base class for your Capybara tests like so:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/dsl&#39;&#xA;&#xA;class CapybaraTestCase &amp;lt; Test::Unit::TestCase&#xA;  include Capybara::DSL&#xA;&#xA;  def teardown&#xA;    Capybara.reset_sessions!&#xA;    Capybara.use_default_driver&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-capybara-with-minitest&#34;&gt;&lt;/a&gt;Using Capybara with Minitest&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using Rails system tests please see their documentation for information on selecting the driver you wish to use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using Rails, but not using Rails system tests, add the following code in your &lt;code&gt;test_helper.rb&lt;/code&gt; file to make Capybara available in all test cases deriving from &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/rails&#39;&#xA;require &#39;capybara/minitest&#39;&#xA;&#xA;class ActionDispatch::IntegrationTest&#xA;  # Make the Capybara DSL available in all integration tests&#xA;  include Capybara::DSL&#xA;  # Make `assert_*` methods behave like Minitest assertions&#xA;  include Capybara::Minitest::Assertions&#xA;&#xA;  # Reset sessions and driver between tests&#xA;  teardown do&#xA;    Capybara.reset_sessions!&#xA;    Capybara.use_default_driver&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are not using Rails, define a base class for your Capybara tests like so:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/minitest&#39;&#xA;&#xA;class CapybaraTestCase &amp;lt; Minitest::Test&#xA;  include Capybara::DSL&#xA;  include Capybara::Minitest::Assertions&#xA;&#xA;  def teardown&#xA;    Capybara.reset_sessions!&#xA;    Capybara.use_default_driver&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember to call &lt;code&gt;super&lt;/code&gt; in any subclasses that override &lt;code&gt;teardown&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To switch the driver, set &lt;code&gt;Capybara.current_driver&lt;/code&gt;. For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class BlogTest &amp;lt; ActionDispatch::IntegrationTest&#xA;  setup do&#xA;    Capybara.current_driver = Capybara.javascript_driver # :selenium by default&#xA;  end&#xA;&#xA;  test &#39;shows blog posts&#39; do&#xA;    # ... this test is run with Selenium ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-capybara-with-minitestspec&#34;&gt;&lt;/a&gt;Using Capybara with Minitest::Spec&lt;/h2&gt; &#xA;&lt;p&gt;Follow the above instructions for Minitest and additionally require capybara/minitest/spec&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.must_have_content(&#39;Important!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;drivers&#34;&gt;&lt;/a&gt;Drivers&lt;/h2&gt; &#xA;&lt;p&gt;Capybara uses the same DSL to drive a variety of browser and headless drivers.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;selecting-the-driver&#34;&gt;&lt;/a&gt;Selecting the Driver&lt;/h3&gt; &#xA;&lt;p&gt;By default, Capybara uses the &lt;code&gt;:rack_test&lt;/code&gt; driver, which is fast but limited: it does not support JavaScript, nor is it able to access HTTP resources outside of your Rack application, such as remote APIs and OAuth services. To get around these limitations, you can set up a different default driver for your features. For example if you&#39;d prefer to run everything in Selenium, you could do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.default_driver = :selenium # :selenium_chrome and :selenium_chrome_headless are also registered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, if you are using RSpec or Cucumber (and your app runs correctly without JS), you may instead want to consider leaving the faster &lt;code&gt;:rack_test&lt;/code&gt; as the &lt;strong&gt;default_driver&lt;/strong&gt;, and marking only those tests that require a JavaScript-capable driver using &lt;code&gt;js: true&lt;/code&gt; or &lt;code&gt;@javascript&lt;/code&gt;, respectively. By default, JavaScript tests are run using the &lt;code&gt;:selenium&lt;/code&gt; driver. You can change this by setting &lt;code&gt;Capybara.javascript_driver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also change the driver temporarily (typically in the Before/setup and After/teardown blocks):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.current_driver = :apparition # temporarily select different driver&#xA;# tests here&#xA;Capybara.use_default_driver       # switch back to default driver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: switching the driver creates a new session, so you may not be able to switch in the middle of a test.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;racktest&#34;&gt;&lt;/a&gt;RackTest&lt;/h3&gt; &#xA;&lt;p&gt;RackTest is Capybara&#39;s default driver. It is written in pure Ruby and does not have any support for executing JavaScript. Since the RackTest driver interacts directly with Rack interfaces, it does not require a server to be started. However, this means that if your application is not a Rack application (Rails, Sinatra and most other Ruby frameworks are Rack applications) then you cannot use this driver. Furthermore, you cannot use the RackTest driver to test a remote application, or to access remote URLs (e.g., redirects to external sites, external APIs, or OAuth services) that your application might interact with.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jeroenvandijk/capybara-mechanize&#34;&gt;capybara-mechanize&lt;/a&gt; provides a similar driver that can access remote servers.&lt;/p&gt; &#xA;&lt;p&gt;RackTest can be configured with a set of headers like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.register_driver :rack_test do |app|&#xA;  Capybara::RackTest::Driver.new(app, headers: { &#39;HTTP_USER_AGENT&#39; =&amp;gt; &#39;Capybara&#39; })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the section on adding and configuring drivers.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;selenium&#34;&gt;&lt;/a&gt;Selenium&lt;/h3&gt; &#xA;&lt;p&gt;Capybara supports &lt;a href=&#34;https://www.seleniumhq.org/projects/webdriver/&#34;&gt;Selenium 3.5+ (Webdriver)&lt;/a&gt;. In order to use Selenium, you&#39;ll need to install the &lt;code&gt;selenium-webdriver&lt;/code&gt; gem, and add it to your Gemfile if you&#39;re using bundler.&lt;/p&gt; &#xA;&lt;p&gt;Capybara pre-registers a number of named drivers that use Selenium - they are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;:selenium =&amp;gt; Selenium driving Firefox&lt;/li&gt; &#xA; &lt;li&gt;:selenium_headless =&amp;gt; Selenium driving Firefox in a headless configuration&lt;/li&gt; &#xA; &lt;li&gt;:selenium_chrome =&amp;gt; Selenium driving Chrome&lt;/li&gt; &#xA; &lt;li&gt;:selenium_chrome_headless =&amp;gt; Selenium driving Chrome in a headless configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These should work (with relevant software installation) in a local desktop configuration but you may need to customize them if using in a CI environment where additional options may need to be passed to the browsers. See the section on adding and configuring drivers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: drivers which run the server in a different thread may not share the same transaction as your tests, causing data not to be shared between your test and test server, see &lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#transactions-and-database-setup&#34;&gt;Transactions and database setup&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;apparition&#34;&gt;&lt;/a&gt;Apparition&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/twalpole/apparition&#34;&gt;apparition driver&lt;/a&gt; is a new driver that allows you to run tests using Chrome in a headless or headed configuration. It attempts to provide backwards compatibility with the &lt;a href=&#34;https://github.com/teampoltergeist/poltergeist&#34;&gt;Poltergeist driver API&lt;/a&gt; and &lt;a href=&#34;https://github.com/thoughtbot/capybara-webkit&#34;&gt;capybara-webkit API&lt;/a&gt; while allowing for the use of modern JS/CSS. It uses CDP to communicate with Chrome, thereby obviating the need for chromedriver. This driver is being developed by the current developer of Capybara and will attempt to keep up to date with new Capybara releases. It will probably be moved into the teamcapybara repo once it reaches v1.0.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;the-dsl&#34;&gt;&lt;/a&gt;The DSL&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;A complete reference is available at &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master&#34;&gt;rubydoc.info&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: By default Capybara will only locate visible elements. This is because a real user would not be able to interact with non-visible elements.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All searches in Capybara are &lt;em&gt;case sensitive&lt;/em&gt;. This is because Capybara heavily uses XPath, which doesn&#39;t support case insensitivity.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;navigating&#34;&gt;&lt;/a&gt;Navigating&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;tt&gt;&lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session#visit-instance_method&#34;&gt;visit&lt;/a&gt;&lt;/tt&gt; method to navigate to other pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;visit(&#39;/projects&#39;)&#xA;visit(post_comments_path(post))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The visit method only takes a single parameter, the request method is &lt;strong&gt;always&lt;/strong&gt; GET.&lt;/p&gt; &#xA;&lt;p&gt;You can get the &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session#current_path-instance_method&#34;&gt;current path&lt;/a&gt; of the browsing session, and test it using the &lt;a href=&#34;http://www.rubydoc.info/github/teamcapybara/capybara/master/Capybara/RSpecMatchers#have_current_path-instance_method&#34;&gt;&lt;code&gt;have_current_path&lt;/code&gt;&lt;/a&gt; matcher:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(page).to have_current_path(post_comments_path(post))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also assert the current path by testing the value of &lt;code&gt;current_path&lt;/code&gt; directly. However, using the &lt;code&gt;have_current_path&lt;/code&gt; matcher is safer since it uses Capybara&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#asynchronous-javascript-ajax-and-friends&#34;&gt;waiting behaviour&lt;/a&gt; to ensure that preceding actions (such as a &lt;code&gt;click_link&lt;/code&gt;) have completed.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;clicking-links-and-buttons&#34;&gt;&lt;/a&gt;Clicking links and buttons&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Full reference: &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Actions&#34;&gt;Capybara::Node::Actions&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can interact with the webapp by following links and buttons. Capybara automatically follows any redirects, and submits forms associated with buttons.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;click_link(&#39;id-of-link&#39;)&#xA;click_link(&#39;Link Text&#39;)&#xA;click_button(&#39;Save&#39;)&#xA;click_on(&#39;Link Text&#39;) # clicks on either links or buttons&#xA;click_on(&#39;Button Value&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;interacting-with-forms&#34;&gt;&lt;/a&gt;Interacting with forms&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Full reference: &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Actions&#34;&gt;Capybara::Node::Actions&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are a number of tools for interacting with form elements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;fill_in(&#39;First Name&#39;, with: &#39;John&#39;)&#xA;fill_in(&#39;Password&#39;, with: &#39;Seekrit&#39;)&#xA;fill_in(&#39;Description&#39;, with: &#39;Really Long Text...&#39;)&#xA;choose(&#39;A Radio Button&#39;)&#xA;check(&#39;A Checkbox&#39;)&#xA;uncheck(&#39;A Checkbox&#39;)&#xA;attach_file(&#39;Image&#39;, &#39;/path/to/image.jpg&#39;)&#xA;select(&#39;Option&#39;, from: &#39;Select Box&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;querying&#34;&gt;&lt;/a&gt;Querying&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Full reference: &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Matchers&#34;&gt;Capybara::Node::Matchers&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Capybara has a rich set of options for querying the page for the existence of certain elements, and working with and manipulating those elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.has_selector?(&#39;table tr&#39;)&#xA;page.has_selector?(:xpath, &#39;.//table/tr&#39;)&#xA;&#xA;page.has_xpath?(&#39;.//table/tr&#39;)&#xA;page.has_css?(&#39;table tr.foo&#39;)&#xA;page.has_content?(&#39;foo&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The negative forms like &lt;code&gt;has_no_selector?&lt;/code&gt; are different from &lt;code&gt;not has_selector?&lt;/code&gt;. Read the section on asynchronous JavaScript for an explanation.&lt;/p&gt; &#xA;&lt;p&gt;You can use these with RSpec&#39;s magic matchers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(page).to have_selector(&#39;table tr&#39;)&#xA;expect(page).to have_selector(:xpath, &#39;.//table/tr&#39;)&#xA;&#xA;expect(page).to have_xpath(&#39;.//table/tr&#39;)&#xA;expect(page).to have_css(&#39;table tr.foo&#39;)&#xA;expect(page).to have_content(&#39;foo&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;finding&#34;&gt;&lt;/a&gt;Finding&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Full reference: &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Finders&#34;&gt;Capybara::Node::Finders&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also find specific elements, in order to manipulate them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find_field(&#39;First Name&#39;).value&#xA;find_field(id: &#39;my_field&#39;).value&#xA;find_link(&#39;Hello&#39;, :visible =&amp;gt; :all).visible?&#xA;find_link(class: [&#39;some_class&#39;, &#39;some_other_class&#39;], :visible =&amp;gt; :all).visible?&#xA;&#xA;find_button(&#39;Send&#39;).click&#xA;find_button(value: &#39;1234&#39;).click&#xA;&#xA;find(:xpath, &#34;.//table/tr&#34;).click&#xA;find(&#34;#overlay&#34;).find(&#34;h1&#34;).click&#xA;all(&#39;a&#39;).each { |a| a[:href] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to find elements by additional attributes/properties you can also pass a filter block, which will be checked inside the normal waiting behavior. If you find yourself needing to use this a lot you may be better off adding a &lt;a href=&#34;http://www.rubydoc.info/github/teamcapybara/capybara/Capybara#add_selector-class_method&#34;&gt;custom selector&lt;/a&gt; or &lt;a href=&#34;http://www.rubydoc.info/github/teamcapybara/capybara/Capybara#modify_selector-class_method&#34;&gt;adding a filter to an existing selector&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find_field(&#39;First Name&#39;){ |el| el[&#39;data-xyz&#39;] == &#39;123&#39; }&#xA;find(&#34;#img_loading&#34;){ |img| img[&#39;complete&#39;] == true }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;find&lt;/code&gt; will wait for an element to appear on the page, as explained in the Ajax section. If the element does not appear it will raise an error.&lt;/p&gt; &#xA;&lt;p&gt;These elements all have all the Capybara DSL methods available, so you can restrict them to specific parts of the page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find(&#39;#navigation&#39;).click_link(&#39;Home&#39;)&#xA;expect(find(&#39;#navigation&#39;)).to have_button(&#39;Sign out&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;scoping&#34;&gt;&lt;/a&gt;Scoping&lt;/h3&gt; &#xA;&lt;p&gt;Capybara makes it possible to restrict certain actions, such as interacting with forms or clicking links and buttons, to within a specific area of the page. For this purpose you can use the generic &lt;tt&gt;&lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session#within-instance_method&#34;&gt;within&lt;/a&gt;&lt;/tt&gt; method. Optionally you can specify which kind of selector to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;within(&#34;li#employee&#34;) do&#xA;  fill_in &#39;Name&#39;, with: &#39;Jimmy&#39;&#xA;end&#xA;&#xA;within(:xpath, &#34;.//li[@id=&#39;employee&#39;]&#34;) do&#xA;  fill_in &#39;Name&#39;, with: &#39;Jimmy&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are special methods for restricting the scope to a specific fieldset, identified by either an id or the text of the fieldset&#39;s legend tag, and to a specific table, identified by either id or text of the table&#39;s caption tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;within_fieldset(&#39;Employee&#39;) do&#xA;  fill_in &#39;Name&#39;, with: &#39;Jimmy&#39;&#xA;end&#xA;&#xA;within_table(&#39;Employee&#39;) do&#xA;  fill_in &#39;Name&#39;, with: &#39;Jimmy&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;working-with-windows&#34;&gt;&lt;/a&gt;Working with windows&lt;/h3&gt; &#xA;&lt;p&gt;Capybara provides some methods to ease finding and switching windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;facebook_window = window_opened_by do&#xA;  click_button &#39;Like&#39;&#xA;end&#xA;within_window facebook_window do&#xA;  find(&#39;#login_email&#39;).set(&#39;a@example.com&#39;)&#xA;  find(&#39;#login_password&#39;).set(&#39;qwerty&#39;)&#xA;  click_button &#39;Submit&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;scripting&#34;&gt;&lt;/a&gt;Scripting&lt;/h3&gt; &#xA;&lt;p&gt;In drivers which support it, you can easily execute JavaScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.execute_script(&#34;$(&#39;body&#39;).empty()&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For simple expressions, you can return the result of the script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;result = page.evaluate_script(&#39;4 + 4&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more complicated scripts you&#39;ll need to write them as one expression.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;result = page.evaluate_script(&amp;lt;&amp;lt;~JS, 3, element)&#xA;  (function(n, el){&#xA;    var val = parseInt(el.value, 10);&#xA;    return n+val;&#xA;  })(arguments[0], arguments[1])&#xA;JS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;modals&#34;&gt;&lt;/a&gt;Modals&lt;/h3&gt; &#xA;&lt;p&gt;In drivers which support it, you can accept, dismiss and respond to alerts, confirms and prompts.&lt;/p&gt; &#xA;&lt;p&gt;You can accept or dismiss alert messages by wrapping the code that produces an alert in a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;accept_alert do&#xA;  click_link(&#39;Show Alert&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can accept or dismiss a confirmation by wrapping it in a block, as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dismiss_confirm do&#xA;  click_link(&#39;Show Confirm&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can accept or dismiss prompts as well, and also provide text to fill in for the response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;accept_prompt(with: &#39;Linus Torvalds&#39;) do&#xA;  click_link(&#39;Show Prompt About Linux&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All modal methods return the message that was presented. So, you can access the prompt message by assigning the return to a variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;message = accept_prompt(with: &#39;Linus Torvalds&#39;) do&#xA;  click_link(&#39;Show Prompt About Linux&#39;)&#xA;end&#xA;expect(message).to eq(&#39;Who is the chief architect of Linux?&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;debugging&#34;&gt;&lt;/a&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;It can be useful to take a snapshot of the page as it currently is and take a look at it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;save_and_open_page&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also retrieve the current state of the DOM as a string using &lt;tt&gt;&lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session#html-instance_method&#34;&gt;page.html&lt;/a&gt;&lt;/tt&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;print page.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is mostly useful for debugging. You should avoid testing against the contents of &lt;code&gt;page.html&lt;/code&gt; and use the more expressive finder methods instead.&lt;/p&gt; &#xA;&lt;p&gt;Finally, in drivers that support it, you can save a screenshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.save_screenshot(&#39;screenshot.png&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or have it save and automatically open:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;save_and_open_screenshot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Screenshots are saved to &lt;code&gt;Capybara.save_path&lt;/code&gt;, relative to the app directory. If you have required &lt;code&gt;capybara/rails&lt;/code&gt;, &lt;code&gt;Capybara.save_path&lt;/code&gt; will default to &lt;code&gt;tmp/capybara&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;matching&#34;&gt;&lt;/a&gt;Matching&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to customize how Capybara finds elements. At your disposal are two options, &lt;code&gt;Capybara.exact&lt;/code&gt; and &lt;code&gt;Capybara.match&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;exactness&#34;&gt;&lt;/a&gt;Exactness&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Capybara.exact&lt;/code&gt; and the &lt;code&gt;exact&lt;/code&gt; option work together with the &lt;code&gt;is&lt;/code&gt; expression inside the XPath gem. When &lt;code&gt;exact&lt;/code&gt; is true, all &lt;code&gt;is&lt;/code&gt; expressions match exactly, when it is false, they allow substring matches. Many of the selectors built into Capybara use the &lt;code&gt;is&lt;/code&gt; expression. This way you can specify whether you want to allow substring matches or not. &lt;code&gt;Capybara.exact&lt;/code&gt; is false by default.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;click_link(&#34;Password&#34;) # also matches &#34;Password confirmation&#34;&#xA;Capybara.exact = true&#xA;click_link(&#34;Password&#34;) # does not match &#34;Password confirmation&#34;&#xA;click_link(&#34;Password&#34;, exact: false) # can be overridden&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;strategy&#34;&gt;&lt;/a&gt;Strategy&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;Capybara.match&lt;/code&gt; and the equivalent &lt;code&gt;match&lt;/code&gt; option, you can control how Capybara behaves when multiple elements all match a query. There are currently four different strategies built into Capybara:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;first:&lt;/strong&gt; Just picks the first element that matches.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;one:&lt;/strong&gt; Raises an error if more than one element matches.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;smart:&lt;/strong&gt; If &lt;code&gt;exact&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, raises an error if more than one element matches, just like &lt;code&gt;one&lt;/code&gt;. If &lt;code&gt;exact&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it will first try to find an exact match. An error is raised if more than one element is found. If no element is found, a new search is performed which allows partial matches. If that search returns multiple matches, an error is raised.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;prefer_exact:&lt;/strong&gt; If multiple matches are found, some of which are exact, and some of which are not, then the first exactly matching element is returned.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The default for &lt;code&gt;Capybara.match&lt;/code&gt; is &lt;code&gt;:smart&lt;/code&gt;. To emulate the behaviour in Capybara 2.0.x, set &lt;code&gt;Capybara.match&lt;/code&gt; to &lt;code&gt;:one&lt;/code&gt;. To emulate the behaviour in Capybara 1.x, set &lt;code&gt;Capybara.match&lt;/code&gt; to &lt;code&gt;:prefer_exact&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;transactions-and-database-setup&#34;&gt;&lt;/a&gt;Transactions and database setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Rails 5.1+ &#34;safely&#34; shares the database connection between the app and test threads. Therefore, if using Rails 5.1+ you SHOULD be able to ignore this section.&lt;/p&gt; &#xA;&lt;p&gt;Some Capybara drivers need to run against an actual HTTP server. Capybara takes care of this and starts one for you in the same process as your test, but on another thread. Selenium is one of those drivers, whereas RackTest is not.&lt;/p&gt; &#xA;&lt;p&gt;If you are using a SQL database, it is common to run every test in a transaction, which is rolled back at the end of the test, rspec-rails does this by default out of the box for example. Since transactions are usually not shared across threads, this will cause data you have put into the database in your test code to be invisible to Capybara.&lt;/p&gt; &#xA;&lt;p&gt;Cucumber handles this by using truncation instead of transactions, i.e. they empty out the entire database after each test. You can get the same behaviour by using a gem such as &lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner&#34;&gt;database_cleaner&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;asynchronous-javascript-ajax-and-friends&#34;&gt;&lt;/a&gt;Asynchronous JavaScript (Ajax and friends)&lt;/h2&gt; &#xA;&lt;p&gt;When working with asynchronous JavaScript, you might come across situations where you are attempting to interact with an element which is not yet present on the page. Capybara automatically deals with this by waiting for elements to appear on the page.&lt;/p&gt; &#xA;&lt;p&gt;When issuing instructions to the DSL such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;click_link(&#39;foo&#39;)&#xA;click_link(&#39;bar&#39;)&#xA;expect(page).to have_content(&#39;baz&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If clicking on the &lt;em&gt;foo&lt;/em&gt; link triggers an asynchronous process, such as an Ajax request, which, when complete will add the &lt;em&gt;bar&lt;/em&gt; link to the page, clicking on the &lt;em&gt;bar&lt;/em&gt; link would be expected to fail, since that link doesn&#39;t exist yet. However Capybara is smart enough to retry finding the link for a brief period of time before giving up and throwing an error. The same is true of the next line, which looks for the content &lt;em&gt;baz&lt;/em&gt; on the page; it will retry looking for that content for a brief time. You can adjust how long this period is (the default is 2 seconds):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.default_max_wait_time = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be aware that because of this behaviour, the following two statements are &lt;strong&gt;not&lt;/strong&gt; equivalent, and you should &lt;strong&gt;always&lt;/strong&gt; use the latter!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;!page.has_xpath?(&#39;a&#39;)&#xA;page.has_no_xpath?(&#39;a&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The former would immediately fail because the content has not yet been removed. Only the latter would wait for the asynchronous process to remove the content from the page.&lt;/p&gt; &#xA;&lt;p&gt;Capybara&#39;s RSpec matchers, however, are smart enough to handle either form. The two following statements are functionally equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(page).not_to have_xpath(&#39;a&#39;)&#xA;expect(page).to have_no_xpath(&#39;a&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Capybara&#39;s waiting behaviour is quite advanced, and can deal with situations such as the following line of code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(find(&#39;#sidebar&#39;).find(&#39;h1&#39;)).to have_content(&#39;Something&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even if JavaScript causes &lt;code&gt;#sidebar&lt;/code&gt; to disappear off the page, Capybara will automatically reload it and any elements it contains. So if an AJAX request causes the contents of &lt;code&gt;#sidebar&lt;/code&gt; to change, which would update the text of the &lt;code&gt;h1&lt;/code&gt; to &#34;Something&#34;, and this happened, this test would pass. If you do not want this behaviour, you can set &lt;code&gt;Capybara.automatic_reload&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-the-dsl-elsewhere&#34;&gt;&lt;/a&gt;Using the DSL elsewhere&lt;/h2&gt; &#xA;&lt;p&gt;You can mix the DSL into any context by including &lt;tt&gt;Capybara::DSL&lt;/tt&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/dsl&#39;&#xA;&#xA;Capybara.default_driver = :webkit&#xA;&#xA;module MyModule&#xA;  include Capybara::DSL&#xA;&#xA;  def login!&#xA;    within(:xpath, &#34;.//form[@id=&#39;session&#39;]&#34;) do&#xA;      fill_in &#39;Email&#39;, with: &#39;user@example.com&#39;&#xA;      fill_in &#39;Password&#39;, with: &#39;password&#39;&#xA;    end&#xA;    click_button &#39;Sign in&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables its use in unsupported testing frameworks, and for general-purpose scripting.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;calling-remote-servers&#34;&gt;&lt;/a&gt;Calling remote servers&lt;/h2&gt; &#xA;&lt;p&gt;Normally Capybara expects to be testing an in-process Rack application, but you can also use it to talk to a web server running anywhere on the internet, by setting app_host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.current_driver = :selenium&#xA;Capybara.app_host = &#39;http://www.google.com&#39;&#xA;...&#xA;visit(&#39;/&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the default driver (&lt;code&gt;:rack_test&lt;/code&gt;) does not support running against a remote server. With drivers that support it, you can also visit any URL directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;visit(&#39;http://www.google.com&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default Capybara will try to boot a rack application automatically. You might want to switch off Capybara&#39;s rack server if you are running against a remote application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.run_server = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-sessions&#34;&gt;&lt;/a&gt;Using sessions&lt;/h2&gt; &#xA;&lt;p&gt;Capybara manages named sessions (:default if not specified) allowing multiple sessions using the same driver and test app instance to be interacted with. A new session will be created using the current driver if a session with the given name using the current driver and test app instance is not found.&lt;/p&gt; &#xA;&lt;h3&gt;Named sessions&lt;/h3&gt; &#xA;&lt;p&gt;To perform operations in a different session and then revert to the previous session&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.using_session(&#34;Bob&#39;s session&#34;) do&#xA;   #do something in Bob&#39;s browser session&#xA;end&#xA; #reverts to previous session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To permanently switch the current session to a different session&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.session_name = &#34;some other session&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;using-sessions-manually&#34;&gt;&lt;/a&gt;Using sessions manually&lt;/h3&gt; &#xA;&lt;p&gt;For ultimate control, you can instantiate and use a &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session&#34;&gt;Session&lt;/a&gt; manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara&#39;&#xA;&#xA;session = Capybara::Session.new(:webkit, my_rack_app)&#xA;session.within(&#34;form#session&#34;) do&#xA;  session.fill_in &#39;Email&#39;, with: &#39;user@example.com&#39;&#xA;  session.fill_in &#39;Password&#39;, with: &#39;password&#39;&#xA;end&#xA;session.click_button &#39;Sign in&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;xpath-css-and-selectors&#34;&gt;&lt;/a&gt;XPath, CSS and selectors&lt;/h2&gt; &#xA;&lt;p&gt;Capybara does not try to guess what kind of selector you are going to give it, and will always use CSS by default. If you want to use XPath, you&#39;ll need to do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;within(:xpath, &#39;.//ul/li&#39;) { ... }&#xA;find(:xpath, &#39;.//ul/li&#39;).text&#xA;find(:xpath, &#39;.//li[contains(.//a[@href = &#34;#&#34;]/text(), &#34;foo&#34;)]&#39;).value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can set the default selector to XPath:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.default_selector = :xpath&#xA;find(&#39;.//ul/li&#39;).text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Capybara provides a number of other built-in selector types. The full list, along with applicable filters, can be seen at &lt;a href=&#34;https://www.rubydoc.info/github/teamcapybara/capybara/Capybara/Selector&#34;&gt;built-in selectors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Capybara also allows you to add custom selectors, which can be very useful if you find yourself using the same kinds of selectors very often. The examples below are very simple, and there are many available features not demonstrated. For more in-depth examples please see Capybaras built-in selector definitions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.add_selector(:my_attribute) do&#xA;  xpath { |id| XPath.descendant[XPath.attr(:my_attribute) == id.to_s] }&#xA;end&#xA;&#xA;Capybara.add_selector(:row) do&#xA;  xpath { |num| &#34;.//tbody/tr[#{num}]&#34; }&#xA;end&#xA;&#xA;Capybara.add_selector(:flash_type) do&#xA;  css { |type| &#34;#flash.#{type}&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The block given to xpath must always return an XPath expression as a String, or an XPath expression generated through the XPath gem. You can now use these selectors like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find(:my_attribute, &#39;post_123&#39;) # find element with matching attribute&#xA;find(:row, 3) # find 3rd row in table body&#xA;find(:flash_type, :notice) # find element with id of &#39;flash&#39; and class of &#39;notice&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;beware-the-xpath--trap&#34;&gt;&lt;/a&gt;Beware the XPath // trap&lt;/h2&gt; &#xA;&lt;p&gt;In XPath the expression // means something very specific, and it might not be what you think. Contrary to common belief, // means &#34;anywhere in the document&#34; not &#34;anywhere in the current context&#34;. As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.find(:xpath, &#39;//body&#39;).all(:xpath, &#39;//script&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might expect this to find all script tags in the body, but actually, it finds all script tags in the entire document, not only those in the body! What you&#39;re looking for is the .// expression which means &#34;any descendant of the current node&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.find(:xpath, &#39;//body&#39;).all(:xpath, &#39;.//script&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same thing goes for within:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;within(:xpath, &#39;//body&#39;) do&#xA;  page.find(:xpath, &#39;.//script&#39;)&#xA;  within(:xpath, &#39;.//table/tbody&#39;) do&#xA;  ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;configuring-and-adding-drivers&#34;&gt;&lt;/a&gt;Configuring and adding drivers&lt;/h2&gt; &#xA;&lt;p&gt;Capybara makes it convenient to switch between different drivers. It also exposes an API to tweak those drivers with whatever settings you want, or to add your own drivers. This is how to override the selenium driver configuration to use chrome:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.register_driver :selenium do |app|&#xA;  Capybara::Selenium::Driver.new(app, :browser =&amp;gt; :chrome)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, it&#39;s also possible to give this configuration a different name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Note: Capybara registers this by default&#xA;Capybara.register_driver :selenium_chrome do |app|&#xA;  Capybara::Selenium::Driver.new(app, :browser =&amp;gt; :chrome)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then tests can switch between using different browsers effortlessly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.current_driver = :selenium_chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whatever is returned from the block should conform to the API described by Capybara::Driver::Base, it does not however have to inherit from this class. Gems can use this API to add their own drivers to Capybara.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/Ruby-Bindings&#34;&gt;Selenium wiki&lt;/a&gt; has additional info about how the underlying driver can be configured.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;gotchas&#34;&gt;&lt;/a&gt;Gotchas:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Access to session and request is not possible from the test, Access to response is limited. Some drivers allow access to response headers and HTTP status code, but this kind of functionality is not provided by some drivers, such as Selenium.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access to Rails specific stuff (such as &lt;code&gt;controller&lt;/code&gt;) is unavailable, since we&#39;re not using Rails&#39; integration testing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Freezing time: It&#39;s common practice to mock out the Time so that features that depend on the current Date work as expected. This can be problematic on ruby/platform combinations that don&#39;t support access to a monotonic process clock, since Capybara&#39;s Ajax timing uses the system time, resulting in Capybara never timing out and just hanging when a failure occurs. It&#39;s still possible to use gems which allow you to travel in time, rather than freeze time. One such gem is &lt;a href=&#34;https://github.com/travisjeffery/timecop&#34;&gt;Timecop&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using Rack::Test, beware if attempting to visit absolute URLs. For example, a session might not be shared between visits to &lt;code&gt;posts_path&lt;/code&gt; and &lt;code&gt;posts_url&lt;/code&gt;. If testing an absolute URL in an Action Mailer email, set &lt;code&gt;default_url_options&lt;/code&gt; to match the Rails default of &lt;code&gt;www.example.com&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Server errors will only be raised in the session that initiates the server thread. If you are testing for specific server errors and using multiple sessions make sure to test for the errors using the initial session (usually :default)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If WebMock is enabled, you may encounter a &#34;Too many open files&#34; error. A simple &lt;code&gt;page.find&lt;/code&gt; call may cause thousands of HTTP requests until the timeout occurs. By default, WebMock will cause each of these requests to spawn a new connection. To work around this problem, you may need to &lt;a href=&#34;https://github.com/bblimke/webmock/raw/master/README.md#connecting-on-nethttpstart&#34;&gt;enable WebMock&#39;s &lt;code&gt;net_http_connect_on_start: true&lt;/code&gt; parameter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;threadsafe&#34;&gt;&lt;/a&gt;&#34;Threadsafe&#34; mode&lt;/h2&gt; &#xA;&lt;p&gt;In normal mode most of Capybara&#39;s configuration options are global settings which can cause issues if using multiple sessions and wanting to change a setting for only one of the sessions. To provide support for this type of usage Capybara now provides a &#34;threadsafe&#34; mode which can be enabled by setting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.threadsafe = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This setting can only be changed before any sessions have been created. In &#34;threadsafe&#34; mode the following behaviors of Capybara change&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Most options can now be set on a session. These can either be set at session creation time or after, and default to the global options at the time of session creation. Options which are NOT session specific are &lt;code&gt;app&lt;/code&gt;, &lt;code&gt;reuse_server&lt;/code&gt;, &lt;code&gt;default_driver&lt;/code&gt;, &lt;code&gt;javascript_driver&lt;/code&gt;, and (obviously) &lt;code&gt;threadsafe&lt;/code&gt;. Any drivers and servers registered through &lt;code&gt;register_driver&lt;/code&gt; and &lt;code&gt;register_server&lt;/code&gt; are also global.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;my_session = Capybara::Session.new(:driver, some_app) do |config|&#xA;  config.automatic_label_click = true # only set for my_session&#xA;end&#xA;my_session.config.default_max_wait_time = 10 # only set for my_session&#xA;Capybara.default_max_wait_time = 2 # will not change the default_max_wait in my_session&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;current_driver&lt;/code&gt; and &lt;code&gt;session_name&lt;/code&gt; are thread specific. This means that &lt;code&gt;using_session&lt;/code&gt; and &lt;code&gt;using_driver&lt;/code&gt; also only affect the current thread.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;development&#34;&gt;&lt;/a&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To set up a development environment, simply do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install&#xA;bundle exec rake  # run the test suite with Firefox - requires `geckodriver` to be installed&#xA;bundle exec rake spec_chrome # run the test suite with Chrome - require `chromedriver` to be installed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/teamcapybara/capybara/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for how to send issues and pull requests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>asciidoctor/asciidoctor</title>
    <updated>2022-06-29T01:36:00Z</updated>
    <id>tag:github.com,2022-06-29:/asciidoctor/asciidoctor</id>
    <link href="https://github.com/asciidoctor/asciidoctor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💎 A fast, open source text processor and publishing toolchain, written in Ruby, for converting AsciiDoc content to HTML 5, DocBook 5, and other formats.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Asciidoctor&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://asciidoctor.org&#34;&gt;Asciidoctor&lt;/a&gt; is a fast, open source, Ruby-based text processor for parsing AsciiDoc® into a document model and converting it to output formats such as HTML 5, DocBook 5, manual pages, PDF, EPUB 3, and other formats.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Asciidoctor also has an ecosystem of extensions, converters, build plugins, and tools to help you author and publish content written in &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/#relationship-to-asciidoc&#34;&gt;AsciiDoc&lt;/a&gt;. You can find the documentation for these projects at &lt;a href=&#34;https://docs.asciidoctor.org&#34; class=&#34;bare&#34;&gt;https://docs.asciidoctor.org&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;In addition to running on Ruby, Asciidoctor can be executed on a JVM using &lt;a href=&#34;https://github.com/asciidoctor/asciidoctorj&#34;&gt;AsciidoctorJ&lt;/a&gt; or in any JavaScript environment using &lt;a href=&#34;https://github.com/asciidoctor/asciidoctor.js&#34;&gt;Asciidoctor.js&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This document is also available in the following languages:&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/README-zh_CN.adoc&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/README-de.adoc&#34;&gt;Deutsch&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/README-fr.adoc&#34;&gt;Français&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/README-jp.adoc&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist compact&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    Key documentation&#xA;   &lt;/div&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/&#34;&gt;Asciidoctor Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/asciidoc/latest/&#34;&gt;AsciiDoc Language Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/&#34;&gt;AsciiDoc Syntax Quick Reference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;sponsors&#34;&gt;Sponsors&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;We want to recognize our &lt;a href=&#34;https://asciidoctor.org/supporters&#34;&gt;sponsors&lt;/a&gt; for their commitment to improving the state of technical documentation by supporting this project. Thank you sponsors! Without your generous support, Asciidoctor would not be possible.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can support this project by becoming a sponsor through &lt;a href=&#34;https://opencollective.com/asciidoctor&#34;&gt;OpenCollective&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;asciidoc-processing-and-built-in-converters&#34;&gt;AsciiDoc Processing and Built-in Converters&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;AsciiDoc is the language.&lt;br&gt; Asciidoctor is the processor.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Asciidoctor reads the AsciiDoc source, as shown in the panel on the left in the image below, and converts it to publishable formats, such as HTML 5, as shown rendered in the panel on the right.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://cdn.jsdelivr.net/gh/asciidoctor/asciidoctor/screenshot.png&#34; alt=&#34;Preview of AsciiDoc source and corresponding rendered HTML&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Asciidoctor provides built-in &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/converters/&#34;&gt;converters&lt;/a&gt; for three output formats by default: &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/html-backend/&#34;&gt;HTML 5&lt;/a&gt;, &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/docbook-backend/&#34;&gt;DocBook 5&lt;/a&gt;, and &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/manpage-backend/&#34;&gt;man page&lt;/a&gt; (short for manual page). Additional converters, such as PDF and EPUB 3, are provided by separate gems. Asciidoctor also provides an out-of-the-box HTML experience complete with a &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/html-backend/default-stylesheet/&#34;&gt;default stylesheet&lt;/a&gt; and built-in integrations like Font Awesome (for icons), highlight.js, Rouge, and Pygments (for source highlighting), and MathJax (for STEM processing).&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;asciidoctor-ecosystem&#34;&gt;Asciidoctor Ecosystem&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Although Asciidoctor is written in Ruby, it does not mean you need Ruby to use it. Asciidoctor can be executed on a JVM using &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctorj/latest/&#34;&gt;AsciidoctorJ&lt;/a&gt; or in any JavaScript environment (including the browser) using &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor.js/latest/&#34;&gt;Asciidoctor.js&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Installing an Asciidoctor processor is just the beginning of your publishing experience. Asciidoctor gives you access to a ecosystem of extensions and tools, ranging from add-on converters, to extended syntax, to build plugins, to integrated writing and preview environments:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/diagram-extension/latest/&#34;&gt;Asciidoctor Diagram&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/maven-tools/latest/&#34;&gt;Maven plugin and site module&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/asciidoctor/asciidoctor-gradle-plugin&#34;&gt;Gradle plugin&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/asciidoclet/latest/&#34;&gt;Asciidoclet&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/reveal.js-converter/latest/&#34;&gt;reveal.js converter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/epub3-converter/latest/&#34;&gt;EPUB 3 converter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://intellij-asciidoc-plugin.ahus1.de/docs&#34;&gt;IntelliJ plugin&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/tooling/#web-browser-add-ons-preview-only&#34;&gt;web browser extensions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/asciidoctor&#34;&gt;and more&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Asciidoctor is the successor to AsciiDoc.py. If you’re using AsciiDoc.py, see &lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/migrate/asciidoc-py/&#34;&gt;Migrate from AsciiDoc.py&lt;/a&gt; to learn how to upgrade to Asciidoctor.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Asciidoctor works on Linux, macOS and Windows and requires one of the following implementations of &lt;a href=&#34;https://www.ruby-lang.org&#34;&gt;Ruby&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;CRuby (aka MRI) 2.3 - 3.0&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;JRuby 9.1 - 9.2&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;TruffleRuby (GraalVM)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock caution&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Caution&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;If you’re using a non-English Windows environment, you may bump into an &lt;code&gt;Encoding::UndefinedConversionError&lt;/code&gt; when invoking Asciidoctor. To solve this issue, we recommend changing the active code page in your console to UTF-8:&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;literalblock&#34;&gt; &#xA;        &lt;div class=&#34;content&#34;&gt; &#xA;         &lt;pre&gt;chcp 65001&lt;/pre&gt; &#xA;        &lt;/div&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;Once you make this change, all your Unicode headaches will be behind you. If you’re using an IDE like Eclipse, make sure you set the encoding to UTF-8 there as well. Asciidoctor works best when you use UTF-8 everywhere.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Asciidoctor is packaged and distributed to RubyGems.org as a RubyGem (aka gem) named &lt;a href=&#34;https://rubygems.org/gems/asciidoctor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asciidoctor&lt;/a&gt;. The asciidoctor gem can be installed on all major operating systems using Ruby packaging tools (gem or bundle). Asciidoctor is also distributed as a Docker image, as a package for numerous Linux distributions, and as a package for macOS (via Homebrew and MacPorts).&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;linux-package-managers&#34;&gt;Linux package managers&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The version of Asciidoctor installed by the package manager may not match the latest release of Asciidoctor. Consult the package repository for your distribution to find out which version is packaged per distribution release.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=asciidoctor&#34;&gt;Alpine Linux (asciidoctor)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.archlinux.org/packages/?name=asciidoctor&#34;&gt;Arch Linux (asciidoctor)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://packages.debian.org/sid/asciidoctor&#34;&gt;Debian (asciidoctor)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://apps.fedoraproject.org/packages/rubygem-asciidoctor&#34;&gt;Fedora (asciidoctor)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://software.opensuse.org/package/rubygem-asciidoctor&#34;&gt;OpenSUSE (rubygem-asciidoctor)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://packages.ubuntu.com/search?keywords=asciidoctor&#34;&gt;Ubuntu (asciidoctor)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you want to use a version of Asciidoctor that’s newer than what is installed by the package manager, see the &lt;a href=&#34;https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/#gem-install&#34;&gt;gem installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;apk-alpine-linux&#34;&gt;apk (Alpine Linux)&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;To install the gem on Alpine Linux, open a terminal and type:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;literalblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre&gt;$ sudo apk add asciidoctor&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;pacman-arch-linux&#34;&gt;pacman (Arch Linux)&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;To install the gem on Arch-based distributions, open a terminal and type:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;literalblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre&gt;$ sudo pacman -S asciidoctor&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;apt&#34;&gt;APT&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;On Debian and Debian-based distributions such as Ubuntu, use APT to install Asciidoctor. To install the package, open a terminal and type:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;literalblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre&gt;$ sudo apt-get install -y asciidoctor&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;dnf&#34;&gt;DNF&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;On RPM-based Linux distributions, such as Fedora, CentOS, and RHEL, use the DNF package manager to install Asciidoctor. To install the package, open a terminal and type:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;literalblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre&gt;$ sudo dnf install -y asciidoctor&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;macos&#34;&gt;macOS&lt;/h3&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;homebrew&#34;&gt;Homebrew&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;You can use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;, the macOS package manager, to install Asciidoctor. If you don’t have Homebrew on your computer, complete the &lt;a href=&#34;https://brew.sh&#34;&gt;installation instructions&lt;/a&gt; first.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Once Homebrew is installed, you’re ready to install the &lt;code&gt;asciidoctor&lt;/code&gt; gem. Open a terminal and type:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;literalblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre&gt;$ brew install asciidoctor&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Homebrew installs the &lt;code&gt;asciidoctor&lt;/code&gt; gem into an exclusive prefix that’s independent of system gems.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;macports&#34;&gt;MacPorts&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;You can also use &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;, another package manager for macOS, to install Asciidoctor. If you don’t have MacPorts on your computer, complete the &lt;a href=&#34;https://www.macports.org/install.php&#34;&gt;installation instructions&lt;/a&gt; first.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Once MacPorts is installed, you’re ready to install the &lt;code&gt;asciidoctor&lt;/code&gt; gem via the &lt;a href=&#34;https://ports.macports.org/port/asciidoctor/&#34;&gt;Asciidoctor port&lt;/a&gt;. Open a terminal and type:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;literalblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre&gt;$ sudo port install asciidoctor&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To use Asciidoctor with Windows, you have two options.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;chocolatey&#34;&gt;Chocolatey&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;When you already use &lt;a href=&#34;https://chocolatey.org&#34;&gt;chocolatey&lt;/a&gt; on your machine, you can use:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;literalblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre&gt;choco install ruby&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Then follow &lt;a href=&#34;https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/#gem-install&#34;&gt;gem installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;rubyinstaller&#34;&gt;Rubyinstaller&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Or you use the &lt;a href=&#34;https://rubyinstaller.org/downloads/&#34;&gt;Rubyinstaller&lt;/a&gt;, download the package for your Windows Version and after the installation go ahead with &lt;a href=&#34;https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/#gem-install&#34;&gt;gem installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;gem-install&#34;&gt;gem install&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Before installing Asciidoctor using &lt;code&gt;gem install&lt;/code&gt;, you should set up &lt;a href=&#34;https://rvm.io&#34;&gt;RVM&lt;/a&gt; (or similar) to install Ruby in your home directory (i.e., user space). Then, you can safely use the &lt;code&gt;gem&lt;/code&gt; command to install or update the Asciidoctor gem, or any other gem for that matter. When using RVM, gems are installed in a location isolated from the system. (You should never use the gem command to install system-wide gems).&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Once you’ve installed Ruby using RVM, and you have activated it using &lt;code&gt;rvm use 3.0&lt;/code&gt;, open a terminal and type:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ gem install asciidoctor&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you want to install a pre-release version (e.g., a release candidate), use:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ gem install asciidoctor --pre&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;See &lt;a href=&#34;https://github.com/asciidoctor/docker-asciidoctor&#34;&gt;Installing Asciidoctor using Docker&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;bundler&#34;&gt;Bundler&lt;/h3&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;Create a Gemfile in the root folder of your project (or the current directory)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;asciidoctor&lt;/code&gt; gem to your Gemfile as follows:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;source &#39;https://rubygems.org&#39;&#xA;gem &#39;asciidoctor&#39;&#xA;# or specify the version explicitly&#xA;# gem &#39;asciidoctor&#39;, &#39;2.0.16&#39;&lt;/code&gt;&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Save the Gemfile&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Open a terminal and install the gem using:&lt;/p&gt; &#xA;      &lt;div class=&#34;literalblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;$ bundle&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To upgrade the gem, specify the new version in the Gemfile and run &lt;code&gt;bundle&lt;/code&gt; again. Using &lt;code&gt;bundle update&lt;/code&gt; (without specifying a gem) is &lt;strong&gt;not&lt;/strong&gt; recommended as it will also update other gems, which may not be the desired result.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;upgrade&#34;&gt;Upgrade&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;If you installed Asciidoctor using a package manager, your operating system is probably configured to automatically update packages, in which case you don’t need to update the gem manually.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;apk-alpine-linux-2&#34;&gt;apk (Alpine Linux)&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To upgrade the gem, use:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ sudo apk add -u asciidoctor&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;apt-2&#34;&gt;APT&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To upgrade the gem, use:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ sudo apt-get upgrade -y asciidoctor&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;dnf-2&#34;&gt;DNF&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To upgrade the gem, use:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ sudo dnf update -y asciidoctor&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;homebrew-macos&#34;&gt;Homebrew (macOS)&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To upgrade the gem, use:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ brew update&#xA;$ brew upgrade asciidoctor&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;macports-macos&#34;&gt;MacPorts (macOS)&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To upgrade the gem, use:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ sudo port selfupdate&#xA;$ sudo port upgrade asciidoctor&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;gem-install-2&#34;&gt;gem install&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you previously installed Asciidoctor using the &lt;code&gt;gem&lt;/code&gt; command, you’ll need to manually upgrade Asciidoctor when a new version is released. You can upgrade the gem by typing:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ gem install asciidoctor&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;When you install a new version of the gem using &lt;code&gt;gem install&lt;/code&gt;, you end up with multiple versions installed. Use the following command to remove the old versions:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ gem cleanup asciidoctor&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;If the Asciidoctor gem installed successfully, the &lt;code&gt;asciidoctor&lt;/code&gt; command line interface (CLI) will be available on your PATH. To verify it’s available, run the following in your terminal:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;literalblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;$ asciidoctor --version&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You should see information about the Asciidoctor version and your Ruby environment printed in the terminal.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;literalblock output&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;Asciidoctor 2.0.16 [https://asciidoctor.org]&#xA;Runtime Environment (ruby 3.0.1p64 [x86_64-linux]) (lc:UTF-8 fs:UTF-8 in:UTF-8 ex:UTF-8)&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;command-line-interface-cli&#34;&gt;Command line interface (CLI)&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;code&gt;asciidoctor&lt;/code&gt; command allows you to invoke Asciidoctor from the command line (i.e., a terminal).&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The following command converts the file README.adoc to HTML and saves the result to the file README.html in the same directory. The name of the generated HTML file is derived from the source file by changing its file extension to &lt;code&gt;.html&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ asciidoctor README.adoc&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can control the Asciidoctor processor by adding various flags and switches, which you can learn about using:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ asciidoctor --help&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;For instance, to write the file to a different directory, use:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;literalblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;$ asciidoctor -D output README.adoc&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;code&gt;asciidoctor&lt;/code&gt; &lt;a href=&#34;https://asciidoctor.org/man/asciidoctor&#34;&gt;man page&lt;/a&gt; provides a complete reference of the command line interface.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Refer to the following resources to learn more about how to use the &lt;code&gt;asciidoctor&lt;/code&gt; command.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/cli/&#34;&gt;Process AsciiDoc using the CLI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/cli/options/&#34;&gt;CLI options&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;ruby-api&#34;&gt;Ruby API&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Asciidoctor also provides an API. The API is intended for integration with other Ruby software, such as Rails, GitHub, and GitLab, as well as other languages, such as Java (via AsciidoctorJ) and JavaScript (via Asciidoctor.js).&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To use Asciidoctor in your application, you first need to require the gem:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require &#39;asciidoctor&#39;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can then convert an AsciiDoc source file to an HTML file using:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;Asciidoctor.convert_file &#39;README.adoc&#39;, to_file: true, safe: :safe&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;admonitionblock warning&#34;&gt; &#xA;    &lt;table&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt; &#xA;       &lt;td class=&#34;icon&#34;&gt; &#xA;        &lt;div class=&#34;title&#34;&gt;&#xA;         Warning&#xA;        &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;td class=&#34;content&#34;&gt; When using Asciidoctor via the API, the default safe mode is &lt;code&gt;:secure&lt;/code&gt;. In secure mode, several core features are disabled, including the &lt;code&gt;include&lt;/code&gt; directive. If you want to enable these features, you’ll need to explicitly set the safe mode to &lt;code&gt;:server&lt;/code&gt; (recommended) or &lt;code&gt;:safe&lt;/code&gt;. &lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can also convert an AsciiDoc string to embeddable HTML (for inserting in an HTML page) using:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;content = &#39;_Zen_ in the art of writing https://asciidoctor.org[AsciiDoc].&#39;&#xA;Asciidoctor.convert content, safe: :safe&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you want the full HTML document, enable the &lt;code&gt;header_footer&lt;/code&gt; option as follows:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;content = &#39;_Zen_ in the art of writing https://asciidoctor.org[AsciiDoc].&#39;&#xA;html = Asciidoctor.convert content, header_footer: true, safe: :safe&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you need access to the parsed document, you can split the conversion into discrete steps:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;content = &#39;_Zen_ in the art of writing https://asciidoctor.org[AsciiDoc].&#39;&#xA;document = Asciidoctor.load content, header_footer: true, safe: :safe&#xA;puts document.doctitle&#xA;html = document.convert&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Keep in mind that if you don’t like the output Asciidoctor produces, &lt;em&gt;you can change it!&lt;/em&gt; Asciidoctor supports custom converters that can handle converting from the parsed document to the generated output.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;One easy way to customize the output piecemeal is by using the template converter. The template converter allows you to supply a &lt;a href=&#34;https://github.com/rtomayko/tilt&#34;&gt;Tilt&lt;/a&gt;-supported template file to handle converting any node in the document.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;However you go about it, you &lt;em&gt;can&lt;/em&gt; have 100% control over the output. For more information about how to use the API or to customize the output, see:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/api/&#34;&gt;Process AsciiDoc using the API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/api/options/&#34;&gt;API options&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.asciidoctor.org/asciidoctor/latest/safe-modes/&#34;&gt;Safe modes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;New contributors are always welcome! If you discover errors or omissions in the source code, documentation, or website content, please don’t hesitate to submit an issue or open a pull request with a fix.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Here are some ways &lt;strong&gt;you&lt;/strong&gt; can contribute:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;by using prerelease (alpha, beta or preview) versions&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;by reporting bugs&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;by suggesting new features&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;by writing or editing documentation&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;by writing code with tests — &lt;em&gt;No patch is too small.&lt;/em&gt;&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;fix typos&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;add comments&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;clean up inconsistent whitespace&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;write tests!&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;by refactoring code&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;by fixing &lt;a href=&#34;https://github.com/asciidoctor/asciidoctor/issues&#34;&gt;issues&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;by reviewing patches&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/CONTRIBUTING.adoc&#34;&gt;Contributing&lt;/a&gt; guide provides information on how to create, style, and submit issues, feature requests, code, and documentation to Asciidoctor.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;getting-help&#34;&gt;Getting Help&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Asciidoctor is developed to help you easily write and publish your content. But we can’t do it without your feedback! We encourage you to ask questions and discuss any aspects of the project on the discussion list, on Twitter or in the chat room.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;dlist&#34;&gt; &#xA;   &lt;dl&gt; &#xA;    &lt;dt class=&#34;hdlist1&#34;&gt;&#xA;     Chat (Zulip)&#xA;    &lt;/dt&gt; &#xA;    &lt;dd&gt; &#xA;     &lt;p&gt;&lt;a href=&#34;https://asciidoctor.zulipchat.com&#34; class=&#34;bare&#34;&gt;https://asciidoctor.zulipchat.com&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;/dd&gt; &#xA;    &lt;dt class=&#34;hdlist1&#34;&gt;&#xA;     Discussion list (Nabble)&#xA;    &lt;/dt&gt; &#xA;    &lt;dd&gt; &#xA;     &lt;p&gt;&lt;a href=&#34;https://discuss.asciidoctor.org&#34; class=&#34;bare&#34;&gt;https://discuss.asciidoctor.org&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;/dd&gt; &#xA;    &lt;dt class=&#34;hdlist1&#34;&gt;&#xA;     Twitter&#xA;    &lt;/dt&gt; &#xA;    &lt;dd&gt; &#xA;     &lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/asciidoctor&#34;&gt;@asciidoctor&lt;/a&gt; or search for the &lt;a href=&#34;https://twitter.com/search?f=tweets&amp;amp;q=%23asciidoctor&#34;&gt;#asciidoctor&lt;/a&gt; hashtag&lt;/p&gt; &#xA;    &lt;/dd&gt; &#xA;   &lt;/dl&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The Asciidoctor organization on GitHub hosts the project’s source code, issue tracker, and sub-projects.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;dlist&#34;&gt; &#xA;   &lt;dl&gt; &#xA;    &lt;dt class=&#34;hdlist1&#34;&gt;&#xA;     Source repository (git)&#xA;    &lt;/dt&gt; &#xA;    &lt;dd&gt; &#xA;     &lt;p&gt;&lt;a href=&#34;https://github.com/asciidoctor/asciidoctor&#34; class=&#34;bare&#34;&gt;https://github.com/asciidoctor/asciidoctor&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;/dd&gt; &#xA;    &lt;dt class=&#34;hdlist1&#34;&gt;&#xA;     Issue tracker&#xA;    &lt;/dt&gt; &#xA;    &lt;dd&gt; &#xA;     &lt;p&gt;&lt;a href=&#34;https://github.com/asciidoctor/asciidoctor/issues&#34; class=&#34;bare&#34;&gt;https://github.com/asciidoctor/asciidoctor/issues&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;/dd&gt; &#xA;    &lt;dt class=&#34;hdlist1&#34;&gt;&#xA;     Asciidoctor organization on GitHub&#xA;    &lt;/dt&gt; &#xA;    &lt;dd&gt; &#xA;     &lt;p&gt;&lt;a href=&#34;https://github.com/asciidoctor&#34; class=&#34;bare&#34;&gt;https://github.com/asciidoctor&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;/dd&gt; &#xA;   &lt;/dl&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;code-of-conduct&#34;&gt;Code of Conduct&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The core Asciidoctor project is governed by the &lt;a href=&#34;https://github.com/asciidoctor/.github/raw/HEAD/CODE-OF-CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; for the Asciidoctor community of projects. By participating, you’re agreeing to honor this code. Let’s work together to make this a welcoming, professional, inclusive, and safe environment for everyone.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;versioning-and-release-policy&#34;&gt;Versioning and Release Policy&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This project adheres to semantic versioning (&lt;strong&gt;major.minor.patch&lt;/strong&gt;). Typically, patch releases are only made for the current minor release. However, exceptions are made on a case-by-case basis to address security vulnerabilities and other high-priority issues.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;copyright-and-license&#34;&gt;Copyright and License&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Copyright © 2012-present Dan Allen, Sarah White, Ryan Waldron, and the individual contributors to Asciidoctor. Use of this software is granted under the terms of the MIT License.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;authors&#34;&gt;Authors&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Asciidoctor&lt;/strong&gt; is led by &lt;a href=&#34;https://github.com/mojavelinux&#34;&gt;Dan Allen&lt;/a&gt; and &lt;a href=&#34;https://github.com/graphitefriction&#34;&gt;Sarah White&lt;/a&gt; and has received contributions from &lt;a href=&#34;https://github.com/asciidoctor/asciidoctor/graphs/contributors&#34;&gt;many individuals&lt;/a&gt; in Asciidoctor’s awesome community. The project was initiated in 2012 by &lt;a href=&#34;https://github.com/erebor&#34;&gt;Ryan Waldron&lt;/a&gt; based on a prototype written by &lt;a href=&#34;https://github.com/nickh&#34;&gt;Nick Hengeveld&lt;/a&gt; for the Git website.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;strong&gt;AsciiDoc.py&lt;/strong&gt; was started and maintained by Stuart Rackham from &lt;a href=&#34;https://github.com/asciidoc-py/asciidoc-py2/raw/HEAD/CHANGELOG.txt&#34;&gt;2002 to 2013&lt;/a&gt; and has received contributions from many individuals in the &lt;a href=&#34;https://github.com/asciidoc-py/asciidoc-py2/graphs/contributors&#34;&gt;AsciiDoc.py community&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;trademarks&#34;&gt;Trademarks&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;AsciiDoc® and AsciiDoc Language™ are trademarks of the Eclipse Foundation, Inc.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/CHANGELOG.adoc&#34;&gt;CHANGELOG&lt;/a&gt; for a complete list of changes in older releases.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>