<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T01:33:35Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AlexMKX/mrvpn</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/AlexMKX/mrvpn</id>
    <link href="https://github.com/AlexMKX/mrvpn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-Route VPN&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The MultiRoute VPN&lt;/h1&gt; &#xA;&lt;p&gt;When the internet split into outernet and innernet, it is not enough to have a VPN to reach the outernet. When client vpns the outernet, you don&#39;t have access to some innernet sites and vice versa. The MultiRoute VPN is a tool to solve this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;  graph LR;&#xA;      Clients--&amp;gt;MRVPN;&#xA;      MRVPN--&amp;gt;InnerNet;&#xA;      MRVPN--&amp;gt;OuterNetHost;&#xA;      OuterNetHost--&amp;gt;OuterNet;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Routing decisions&lt;/h2&gt; &#xA;&lt;p&gt;The routing decision is made on DNS and IP information. When the client resolves the DNS name for some host, the request is intercepted by the recursor. Before sending the answer to the client, the recursor decides where the later traffic should go and applies the appropriate routing to the subnet/IP. When packets start flowing, they get routed properly.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes, when complex CNAME chains are used for the hosts, the routing information is applied after the client receives the IP address (ozon.ru is an example). In this case, two possible solutions can be used:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Specify IP in the subnets list.&lt;/li&gt; &#xA; &lt;li&gt;Flush DNS cache and retry the navigation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;The MRVPN is deployed as an ansible role. The 2 hosts are needed for the deployment :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Entry point host, which includes: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;FireZone (the WireGuard solution)&lt;/li&gt; &#xA;   &lt;li&gt;Docker to server everything: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;WireGuard client to the outernet upstream.&lt;/li&gt; &#xA;     &lt;li&gt;IPT Server: the routing decision daemon.&lt;/li&gt; &#xA;     &lt;li&gt;PowerDNS Recursor to handle and hook DNS requests&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Outernet host with WireGuard daemon.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Basic deployment config:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- hosts: localhost&#xA;  tasks:&#xA;    - add_host:&#xA;        name: entry_point_host&#xA;- hosts: entry_point_host&#xA;  roles:&#xA;    - role: mrvpn&#xA;      vars:&#xA;        # The entrypoint hostname for FireZone &#xA;        server_url: &#34;mrvpn.mrvpn.host&#34;&#xA;        # Wireguard client config from outernet host&#xA;        wireguard_config: |&#xA;          [Interface]&#xA;          PrivateKey = ################&#xA;          Address = 10.3.2.16/32&#xA;          DNS = 1.1.1.1, 1.0.0.1&#xA;          PostUp = iptables -t nat -A POSTROUTING -o wg0 -j MASQUERADE&#xA;          PostDown = iptables -t nat -D POSTROUTING -o wg0 -j MASQUERADE&#xA;          &#xA;          [Peer]&#xA;          PublicKey = ################&#xA;          PresharedKey = ################&#xA;          AllowedIPs = 1.0.0.0/8&#xA;          Endpoint = Outernet host ip&#xA;          PersistentKeepalive = 25&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The debian/ubuntu for the entrypoint host&lt;/li&gt; &#xA; &lt;li&gt;Install ansible requirements with: &lt;code&gt;ansible-galaxy install -r requirements.yml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Advanced configuration options:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Firezone admin email&#xA;firezone_admin: &#34;no@email.com&#34;&#xA;# Outernet host subnet where client&#39;s IP addresses will be allocated&#xA;vpn_subnet: &#34;10.8.2.0/24&#34;&#xA;# The IP of the Outernet WireGuard host&#xA;vpn_host: &#34;10.8.2.1&#34;&#xA;# The docker subnet for infrastructure services&#xA;docker_subnet: &#34;10.5.0&#34;&#xA;# Routing table num to handle PBR&#xA;route_table_num: 11&#xA;# Countries which will be routed to the innernet route&#xA;countries:&#xA;  - &#39;RU&#39;&#xA;  - &#39;AM&#39;&#xA;# Pre-defined regexps of the domains to route them to the innernet&#xA;# Note the trailing dot.&#xA;domains:&#xA;  - &#39;^.*\.ru\.$&#39;&#xA;  - &#39;^.*ozon\.travel\.$&#39;&#xA;# Also can be fetched from the url&#xA;domain_lists:&#xA;  - https://raw.githubusercontent.com/AlexMKX/mrvpnconfig/main/domains.txt&#xA;&#xA;&#xA;# Subnets and hosts to be routed to the innernet&#xA;subnets:&#xA;  - &#39;195.34.20.248&#39;&#xA;# Hosts also can be fetched from the url &#xA;subnet_lists:&#xA;  - https://raw.githubusercontent.com/AlexMKX/mrvpnconfig/main/subnets.txt&#xA;&#xA;# Additional firezone config. Probably you want to enable SAML for clients&#xA;firezone_config: |&#xA;  # default[&#39;firezone&#39;][&#39;authentication&#39;][&#39;google&#39;][&#39;enabled&#39;] = false&#xA;  # default[&#39;firezone&#39;][&#39;authentication&#39;][&#39;google&#39;][&#39;client_id&#39;] = nil&#xA;  # default[&#39;firezone&#39;][&#39;authentication&#39;][&#39;google&#39;][&#39;client_secret&#39;] = nil&#xA;  # default[&#39;firezone&#39;][&#39;authentication&#39;][&#39;google&#39;][&#39;redirect_uri&#39;] = nil&#xA;&#xA;# Force FireZone redeploy on each deployment&#xA;firezone_redeploy: False&#xA;&#xA;# Where services will reside&#xA;target_dir: /srv/mrvpn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After role deployment is done, you can find the FireZone credentials in the &lt;code&gt;target_dir/firezone_admin_password&lt;/code&gt; To reset, or, actually, recover admin password - set the firezone_redeploy to True and run role deployment again&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CocoaPods/CocoaPods</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/CocoaPods/CocoaPods</id>
    <link href="https://github.com/CocoaPods/CocoaPods" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Cocoa Dependency Manager.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/CocoaPods/shared_resources/master/assets/cocoapods-banner-readme.png&#34; alt=&#34;CocoaPods Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods: The Cocoa dependency manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/CocoaPods/CocoaPods/Specs&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/cocoapods&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/cocoapods&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/CocoaPods/CocoaPods/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/8f0fe544baf2ae1acc2b/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/CocoaPods/CocoaPods/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/8f0fe544baf2ae1acc2b/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CocoaPods manages dependencies for your Xcode projects.&lt;/p&gt; &#xA;&lt;p&gt;You specify the dependencies for your project in a simple text file: your &lt;code&gt;Podfile&lt;/code&gt;. CocoaPods recursively resolves dependencies between libraries, fetches source code for all dependencies, and creates and maintains an Xcode workspace to build your project. The latest released Xcode versions and the prior version are supported.&lt;/p&gt; &#xA;&lt;p&gt;Installing and updating CocoaPods is very easy. Don&#39;t miss the &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html#installation&#34;&gt;Installation guide&lt;/a&gt; and the &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html&#34;&gt;Getting Started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Goals&lt;/h2&gt; &#xA;&lt;p&gt;CocoaPods aims to improve the engagement with, and discoverability of, third party open-source Cocoa libraries. These project goals influence and drive the design of CocoaPods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and share libraries, and use them in your own projects, without creating extra work for library authors. Integrate non-CocoaPods libraries and hack on your own fork of any CocoaPods library with a simple transparent &lt;code&gt;Podspec&lt;/code&gt; standard.&lt;/li&gt; &#xA; &lt;li&gt;Allow library authors to structure their libraries however they like.&lt;/li&gt; &#xA; &lt;li&gt;Save time for library authors by automating a lot of Xcode work not related to their libraries&#39; functionality.&lt;/li&gt; &#xA; &lt;li&gt;Support any source management system. (Currently supported are &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;svn&lt;/code&gt;, &lt;code&gt;mercurial&lt;/code&gt;, &lt;code&gt;bazaar&lt;/code&gt;, and various types of archives downloaded over HTTP.)&lt;/li&gt; &#xA; &lt;li&gt;Promote a culture of distributed collaboration on pods, but also provide features only possible with a centralised solution to foster a community.&lt;/li&gt; &#xA; &lt;li&gt;Build tools on top of the core Cocoa development system, including those typically deployed to other operating systems, such as web-services.&lt;/li&gt; &#xA; &lt;li&gt;Provide opinionated and automated integration, but make it completely optional. You may manually integrate your CocoaPods dependencies into your Xcode project as you see fit, with or without a workspace.&lt;/li&gt; &#xA; &lt;li&gt;Solve everyday problems for Cocoa and Xcode developers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Lovingly sponsored by a collection of companies, see the footer of &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods.org&lt;/a&gt; for an up-to-date list.&lt;/p&gt; &#xA;&lt;h2&gt;Collaborate&lt;/h2&gt; &#xA;&lt;p&gt;All CocoaPods development happens on GitHub. Contributions make for good karma and we &lt;a href=&#34;https://blog.cocoapods.org/starting-open-source/&#34;&gt;welcome new&lt;/a&gt; contributors with joy. We take contributors seriously, and thus have a contributor &lt;a href=&#34;https://raw.githubusercontent.com/CocoaPods/CocoaPods/master/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Link&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Homepage and search for Pods.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://twitter.com/CocoaPods&#34;&gt;@CocoaPods&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Follow CocoaPods on Twitter to stay up to date.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://blog.cocoapods.org&#34;&gt;Blog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The CocoaPods blog.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://groups.google.com/group/cocoapods&#34;&gt;Mailing List&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Feel free to ask any kind of question.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://guides.cocoapods.org&#34;&gt;Guides&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Everything you want to know about CocoaPods.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;See the changes introduced in each CocoaPods version.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://feeds.cocoapods.org/new-pods.rss&#34;&gt;New Pods RSS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t miss any new Pods.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CocoaPods/CocoaPods/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Find out the standards we hold ourselves to.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Projects&lt;/h2&gt; &#xA;&lt;p&gt;CocoaPods is composed of the following projects:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Project&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/CocoaPods/CocoaPods/Specs&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34;&gt;CocoaPods&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The CocoaPods command line tool.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://guides.cocoapods.org&#34;&gt;guides&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/Core/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/CocoaPods/Core/Specs&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/Core&#34;&gt;CocoaPods Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Support for working with specifications and podfiles.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://guides.cocoapods.org/contributing/components.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/cocoapods-downloader/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/CocoaPods/CocoaPods-Downloader/Spec&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/cocoapods-downloader&#34;&gt;CocoaPods Downloader&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Downloaders for various source types.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.rubydoc.info/gems/cocoapods-downloader&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/Xcodeproj/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/CocoaPods/Xcodeproj/Specs&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/Xcodeproj&#34;&gt;Xcodeproj&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Create and modify Xcode projects from Ruby.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.rubydoc.info/gems/xcodeproj&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://travis-ci.org/CocoaPods/CLAide&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/CocoaPods/CLAide/master.svg?style=flat&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/CLAide&#34;&gt;CLAide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A small command-line interface framework.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.rubydoc.info/gems/claide&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/Molinillo/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/CocoaPods/Molinillo/test&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/Molinillo&#34;&gt;Molinillo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A powerful generic dependency resolver.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.rubydoc.info/gems/molinillo&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/Specs&#34;&gt;Master Repo &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Master repository of specifications.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://guides.cocoapods.org/making/specs-and-specs-repo.html&#34;&gt;guides&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>rails/rails</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/rails/rails</id>
    <link href="https://github.com/rails/rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby on Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Rails&lt;/h1&gt; &#xA;&lt;h2&gt;What&#39;s Rails?&lt;/h2&gt; &#xA;&lt;p&gt;Rails is a web-application framework that includes everything needed to create database-backed web applications according to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Model-view-controller&#34;&gt;Model-View-Controller (MVC)&lt;/a&gt; pattern.&lt;/p&gt; &#xA;&lt;p&gt;Understanding the MVC pattern is key to understanding Rails. MVC divides your application into three layers: Model, View, and Controller, each with a specific responsibility.&lt;/p&gt; &#xA;&lt;h2&gt;Model layer&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;strong&gt;Model layer&lt;/strong&gt;&lt;/em&gt; represents the domain model (such as Account, Product, Person, Post, etc.) and encapsulates the business logic specific to your application. In Rails, database-backed model classes are derived from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activerecord/README.rdoc&#34;&gt;Active Record&lt;/a&gt; allows you to present the data from database rows as objects and embellish these data objects with business logic methods. Although most Rails models are backed by a database, models can also be ordinary Ruby classes, or Ruby classes that implement a set of interfaces as provided by the &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activemodel/README.rdoc&#34;&gt;Active Model&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;h2&gt;View layer&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;strong&gt;View layer&lt;/strong&gt;&lt;/em&gt; is composed of &#34;templates&#34; that are responsible for providing appropriate representations of your application&#39;s resources. Templates can come in a variety of formats, but most view templates are HTML with embedded Ruby code (ERB files). Views are typically rendered to generate a controller response or to generate the body of an email. In Rails, View generation is handled by &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionview/README.rdoc&#34;&gt;Action View&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Controller layer&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;strong&gt;Controller layer&lt;/strong&gt;&lt;/em&gt; is responsible for handling incoming HTTP requests and providing a suitable response. Usually, this means returning HTML, but Rails controllers can also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and manipulate models, and render view templates in order to generate the appropriate HTTP response. In Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and controller classes are derived from &lt;code&gt;ActionController::Base&lt;/code&gt;. Action Dispatch and Action Controller are bundled together in &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionpack/README.rdoc&#34;&gt;Action Pack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Frameworks and libraries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activerecord/README.rdoc&#34;&gt;Active Record&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activemodel/README.rdoc&#34;&gt;Active Model&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionpack/README.rdoc&#34;&gt;Action Pack&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionview/README.rdoc&#34;&gt;Action View&lt;/a&gt; can each be used independently outside Rails.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that, Rails also comes with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionmailer/README.rdoc&#34;&gt;Action Mailer&lt;/a&gt;, a library to generate and send emails&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionmailbox/README.md&#34;&gt;Action Mailbox&lt;/a&gt;, a library to receive emails within a Rails application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activejob/README.md&#34;&gt;Active Job&lt;/a&gt;, a framework for declaring jobs and making them run on a variety of queuing backends&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actioncable/README.md&#34;&gt;Action Cable&lt;/a&gt;, a framework to integrate WebSockets with a Rails application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activestorage/README.md&#34;&gt;Active Storage&lt;/a&gt;, a library to attach cloud and local files to Rails applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actiontext/README.md&#34;&gt;Action Text&lt;/a&gt;, a library to handle rich text content&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activesupport/README.rdoc&#34;&gt;Active Support&lt;/a&gt;, a collection of utility classes and standard library extensions that are useful for Rails, and may also be used independently outside Rails&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Rails at the command prompt if you haven&#39;t yet:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ gem install rails&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;At the command prompt, create a new Rails application:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ rails new myapp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where &#34;myapp&#34; is the application name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directory to &lt;code&gt;myapp&lt;/code&gt; and start the web server:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ cd myapp&#xA; $ bin/rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run with &lt;code&gt;--help&lt;/code&gt; or &lt;code&gt;-h&lt;/code&gt; for options.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;code&gt;http://localhost:3000&lt;/code&gt; and you&#39;ll see the Rails bootscreen with your Rails and Ruby versions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the guidelines to start developing your application. You may find the following resources handy:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/getting_started.html&#34;&gt;Getting Started with Rails&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org&#34;&gt;Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://api.rubyonrails.org&#34;&gt;The API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to contribute to Ruby on Rails! Please check out the &lt;a href=&#34;https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html&#34;&gt;Contributing to Ruby on Rails guide&lt;/a&gt; for guidelines about how to proceed. &lt;a href=&#34;https://contributors.rubyonrails.org&#34;&gt;Join us!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Trying to report a possible security vulnerability in Rails? Please check out our &lt;a href=&#34;https://rubyonrails.org/security&#34;&gt;security policy&lt;/a&gt; for guidelines about how to proceed.&lt;/p&gt; &#xA;&lt;p&gt;Everyone interacting in Rails and its sub-projects&#39; codebases, issue trackers, chat rooms, and mailing lists is expected to follow the Rails &lt;a href=&#34;https://rubyonrails.org/conduct&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Ruby on Rails is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>opf/openproject</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/opf/openproject</id>
    <link href="https://github.com/opf/openproject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenProject is the leading open source project management software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenProject&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/opf/openproject&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/opf/openproject&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/checks-status/opf/openproject/dev&#34; alt=&#34;GitHub branch checks state&#34;&gt; &lt;a href=&#34;https://github.com/opf/openproject/actions/workflows/test-core.yml&#34;&gt;&lt;img src=&#34;https://github.com/opf/openproject/actions/workflows/test-core.yml/badge.svg?branch=dev&#34; alt=&#34;Github Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenProject is a web-based project management software. Its key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#project-planning&#34;&gt;Project planning and scheduling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#product-management&#34;&gt;Product roadmap and release planning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#task-management&#34;&gt;Task management and team collaboration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#agile-scrum&#34;&gt;Agile and Scrum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#time-tracking&#34;&gt;Time tracking, cost reporting and budgeting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#bug-tracking&#34;&gt;Bug tracking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/docs/user-guide/wysiwyg/&#34;&gt;Wikis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/docs/user-guide/forums/&#34;&gt;Forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/docs/user-guide/meetings/&#34;&gt;Meeting agendas and meeting minutes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More information and screenshots can be found on our &lt;a href=&#34;https://www.openproject.org&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to run an instance of OpenProject in production (or for evaluation), refer to our in-depth &lt;a href=&#34;https://www.openproject.org/download-and-installation/&#34;&gt;installation guides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;You found a bug? Please &lt;a href=&#34;https://www.openproject.org/docs/development/report-a-bug/&#34;&gt;report it&lt;/a&gt; to our &lt;a href=&#34;https://community.openproject.com/projects/openproject&#34;&gt;OpenProject community&lt;/a&gt;. Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;OpenProject is supported by its community members, both companies and individuals.&lt;/p&gt; &#xA;&lt;p&gt;We are always looking for new members to our community, so if you are interested in improving OpenProject we would be glad to welcome and support you getting into the code. There are guides as well, e.g. a &lt;a href=&#34;https://www.openproject.org/development/setting-up-development-environment/&#34;&gt;Quick Start for Developers&lt;/a&gt;, but don&#39;t hesitate to simply &lt;a href=&#34;https://www.openproject.org/contact-us&#34;&gt;contact us&lt;/a&gt; if you have questions.&lt;/p&gt; &#xA;&lt;p&gt;Working on OpenProject comes with the satisfaction of working on a widely used open source application.&lt;/p&gt; &#xA;&lt;p&gt;Also, if you do not want to be limited to working on open source in your free time, OpenProject GmbH, the company contributing to the OpenProject development, &lt;a href=&#34;https://www.openproject.org/career/&#34;&gt;is hiring&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Here you can find our &lt;a href=&#34;https://www.openproject.org/contact-us&#34;&gt;contact information&lt;/a&gt;. If you are interested in development or have general questions, feel free to also join our &lt;a href=&#34;https://community.openproject.org/projects/openproject/forums&#34;&gt;community discussion forums&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security / responsible disclosure&lt;/h2&gt; &#xA;&lt;p&gt;We take security very seriously at OpenProject. We value any kind of feedback that will keep our community secure. If you happen to come across a security issue we urge you to disclose it to us privately to allow our users and community enough time to upgrade. Security issues will always take precedence over anything else in the pipeline.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to disclose a security vulnerability, &lt;a href=&#34;https://raw.githubusercontent.com/opf/openproject/dev/docs/development/security/README.md&#34;&gt;please see this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenProject is licensed under the terms of the GNU General Public License version 3. See &lt;a href=&#34;https://raw.githubusercontent.com/opf/openproject/dev/COPYRIGHT&#34;&gt;COPYRIGHT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/opf/openproject/dev/LICENSE&#34;&gt;LICENSE&lt;/a&gt; files for details.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;h3&gt;Icons&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to Vincent Le Moign and his fabulous Minicons icons on &lt;a href=&#34;http://www.webalys.com/minicons/icons-free-pack.php&#34;&gt;webalys.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Lato Font&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to Łukasz Dziedzic (aka &#34;tyPoland&#34;) for his &#39;Lato&#39; font.&lt;/p&gt; &#xA;&lt;h3&gt;OpenProject icon font&lt;/h3&gt; &#xA;&lt;p&gt;Published and created by the OpenProject Foundation (OPF) under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt; with icons from the following sources &lt;a href=&#34;http://www.webalys.com/minicons&#34;&gt;Minicons Free Vector Icons Pack&lt;/a&gt; and &lt;a href=&#34;http://www.webalys.com/design-interface-application-framework.php&#34;&gt;User Interface Design framework&lt;/a&gt; both by webalys&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Creative Commons License&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenProject Icon Font by the OpenProject Foundation (OPF) is licensed under Creative Commons Attribution 3.0 Unported License and Free for both personal and commercial use. You can copy, adapt, remix, distribute or transmit it.&lt;/p&gt; &#xA;&lt;p&gt;Under this condition: provide a mention of the &#34;OpenProject Foundation&#34; and a link back to OpenProject &lt;a href=&#34;http://www.openproject.org&#34;&gt;www.openproject.org&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zammad/zammad</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/zammad/zammad</id>
    <link href="https://github.com/zammad/zammad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zammad is a web based open source helpdesk/customer support system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Zammad&lt;/h1&gt; &#xA;&lt;p&gt;Zammad is a web based open source helpdesk/customer support system with many features to manage customer communication via several channels like telephone, facebook, twitter, chat and e-mails. It is distributed under version 3 of the GNU AFFERO General Public License (GNU AGPLv3).&lt;/p&gt; &#xA;&lt;p&gt;Do you receive many e-mails and want to answer them with a team of agents?&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re going to love Zammad!&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CI: &lt;img src=&#34;https://github.com/zammad/zammad/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build Docker images: &lt;img src=&#34;https://github.com/zammad/zammad/workflows/build-docker-compose-images/badge.svg?sanitize=true&#34; alt=&#34;build-docker-compose-images&#34;&gt; &lt;img src=&#34;https://github.com/zammad/zammad/workflows/build-docker-image/badge.svg?sanitize=true&#34; alt=&#34;build-docker-image&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code: &lt;a href=&#34;https://codeclimate.com/github/zammad/zammad&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/zammad/zammad/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docs: &lt;a href=&#34;https://docs.zammad.org&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/zammad/badge/&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issues: &lt;a href=&#34;https://github.com/zammad/zammad/issues&#34; title=&#34;Percentage of issues still open&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/open/zammad/zammad.svg?sanitize=true&#34; alt=&#34;Percentage of issues still open&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zammad/zammad/issues?q=is%3Aissue+is%3Aclosed&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/zammad/zammad.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download DEB/RPM: &lt;a href=&#34;https://packager.io/gh/zammad/zammad#stable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Branch-stable-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packager.io/gh/zammad/zammad#develop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Branch-develop-lightgrey.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docker multi container image: &lt;a href=&#34;https://hub.docker.com/r/zammad/zammad-docker-compose&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-stable-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docker single container image: &lt;a href=&#34;https://hub.docker.com/r/zammad/zammad/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-develop-lightgrey.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vagrant: &lt;a href=&#34;https://github.com/zammad/zammad-vagrant&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-develop-lightgrey.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;License: &lt;a href=&#34;https://github.com/zammad/zammad/raw/develop/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%203.0-brightgreen.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing &amp;amp; Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.zammad.org&#34;&gt;https://docs.zammad.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zammad.org/screenshots&#34;&gt;https://zammad.org/screenshots&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;REST API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.zammad.org/en/latest/api/intro.html&#34;&gt;https://docs.zammad.org/en/latest/api/intro.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zammad.org/participate&#34;&gt;https://zammad.org/participate&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks! ❤️ ❤️ ❤️&lt;/p&gt; &#xA;&lt;p&gt;Your Zammad Team&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kilimchoi/engineering-blogs</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/kilimchoi/engineering-blogs</id>
    <link href="https://github.com/kilimchoi/engineering-blogs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A curated list of engineering blogs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Software Engineering Blogs &lt;a href=&#34;https://github.com/sindresorhus/awesome&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt; &lt;sup&gt;Special thanks to:&lt;/sup&gt; &lt;a href=&#34;https://doppler.com/?utm_campaign=github_repo&amp;amp;utm_medium=referral&amp;amp;utm_content=engblogs&amp;amp;utm_source=github&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA; &lt;div&gt;&#xA;  &lt;a href=&#34;https://doppler.com/?utm_campaign=github_repo&amp;amp;utm_medium=referral&amp;amp;utm_content=engblogs&amp;amp;utm_source=github&#34;&gt; &lt;img src=&#34;https://dashboard.doppler.com/imgs/logo-long.svg?sanitize=true&#34; width=&#34;230&#34; alt=&#34;Doppler&#34;&gt; &lt;/a&gt;&#xA; &lt;/div&gt;&#xA; &lt;a href=&#34;https://doppler.com/?utm_campaign=github_repo&amp;amp;utm_medium=referral&amp;amp;utm_content=engblogs&amp;amp;utm_source=github&#34;&gt; &lt;b&gt;All your environment variables, in one place&lt;/b&gt; &#xA;  &lt;div&gt; &#xA;   &lt;sub&gt;Stop struggling with scattered API keys, hacking together home-brewed tools,&lt;/sub&gt; &#xA;   &lt;br&gt; &#xA;   &lt;sup&gt;and avoiding access controls. Keep your team and servers in sync with Doppler.&lt;/sup&gt; &#xA;  &lt;/div&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#companies-1&#34;&gt;Companies&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#-companies&#34;&gt;#&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#a-companies&#34;&gt;A&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#b-companies&#34;&gt;B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#c-companies&#34;&gt;C&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#d-companies&#34;&gt;D&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#e-companies&#34;&gt;E&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#f-companies&#34;&gt;F&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#g-companies&#34;&gt;G&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#h-companies&#34;&gt;H&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#i-companies&#34;&gt;I&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#j-companies&#34;&gt;J&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#k-companies&#34;&gt;K&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#l-companies&#34;&gt;L&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#m-companies&#34;&gt;M&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#n-companies&#34;&gt;N&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#o-companies&#34;&gt;O&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#p-companies&#34;&gt;P&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#q-companies&#34;&gt;Q&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#r-companies&#34;&gt;R&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#s-companies&#34;&gt;S&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#t-companies&#34;&gt;T&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#u-companies&#34;&gt;U&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#v-companies&#34;&gt;V&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#w-companies&#34;&gt;W&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#x-companies&#34;&gt;X&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#y-companies&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#z-companies&#34;&gt;Z&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#individualsgroup-contributors-1&#34;&gt;Individuals/Group Contributors&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#-individuals&#34;&gt;#&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#a-individuals&#34;&gt;A&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#b-individuals&#34;&gt;B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#c-individuals&#34;&gt;C&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#d-individuals&#34;&gt;D&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#e-individuals&#34;&gt;E&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#f-individuals&#34;&gt;F&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#g-individuals&#34;&gt;G&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#h-individuals&#34;&gt;H&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#i-individuals&#34;&gt;I&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#j-individuals&#34;&gt;J&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#k-individuals&#34;&gt;K&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#l-individuals&#34;&gt;L&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#m-individuals&#34;&gt;M&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#n-individuals&#34;&gt;N&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#o-individuals&#34;&gt;O&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#p-individuals&#34;&gt;P&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#q-individuals&#34;&gt;Q&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#r-individuals&#34;&gt;R&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#s-individuals&#34;&gt;S&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#t-individuals&#34;&gt;T&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#u-individuals&#34;&gt;U&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#v-individuals&#34;&gt;V&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#w-individuals&#34;&gt;W&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#x-individuals&#34;&gt;X&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#y-individuals&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#z-individuals&#34;&gt;Z&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#productstechnologies-1&#34;&gt;Products/Technologies&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#-technologies&#34;&gt;#&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#a-technologies&#34;&gt;A&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#b-technologies&#34;&gt;B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#c-technologies&#34;&gt;C&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#d-technologies&#34;&gt;D&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#e-technologies&#34;&gt;E&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#f-technologies&#34;&gt;F&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#g-technologies&#34;&gt;G&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#h-technologies&#34;&gt;H&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#i-technologies&#34;&gt;I&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#j-technologies&#34;&gt;J&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#k-technologies&#34;&gt;K&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#l-technologies&#34;&gt;L&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#m-technologies&#34;&gt;M&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#n-technologies&#34;&gt;N&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#o-technologies&#34;&gt;O&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#p-technologies&#34;&gt;P&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#q-technologies&#34;&gt;Q&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#r-technologies&#34;&gt;R&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#s-technologies&#34;&gt;S&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#t-technologies&#34;&gt;T&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#u-technologies&#34;&gt;U&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#v-technologies&#34;&gt;V&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#w-technologies&#34;&gt;W&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#x-technologies&#34;&gt;X&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#y-technologies&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/#z-technologies&#34;&gt;Z&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Companies&lt;/h3&gt; &#xA;&lt;h4&gt;# companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;500px &lt;a href=&#34;https://developers.500px.com/&#34;&gt;https://developers.500px.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;8th Light &lt;a href=&#34;https://8thlight.com/blog/&#34;&gt;https://8thlight.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;99designs &lt;a href=&#34;https://99designs.com/tech-blog/&#34;&gt;https://99designs.com/tech-blog/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;A companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AdRoll &lt;a href=&#34;http://tech.adroll.com/blog/&#34;&gt;http://tech.adroll.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Addepar &lt;a href=&#34;https://medium.com/build-addepar&#34;&gt;https://medium.com/build-addepar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Affinity &lt;a href=&#34;https://build.affinity.co/&#34;&gt;https://build.affinity.co/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Airbrake &lt;a href=&#34;https://airbrake.io/blog/&#34;&gt;https://airbrake.io/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AirPair &lt;a href=&#34;https://www.airpair.com/software-experts&#34;&gt;https://www.airpair.com/software-experts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Advanced Web Machinery &lt;a href=&#34;https://advancedweb.hu/&#34;&gt;https://advancedweb.hu/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Airbnb &lt;a href=&#34;https://medium.com/airbnb-engineering&#34;&gt;https://medium.com/airbnb-engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Airtame &lt;a href=&#34;https://airtame.engineering&#34;&gt;https://airtame.engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Algolia &lt;a href=&#34;https://blog.algolia.com/&#34;&gt;https://blog.algolia.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Allegro.tech &lt;a href=&#34;https://allegro.tech&#34;&gt;https://allegro.tech&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Appnexus &lt;a href=&#34;https://techblog.appnexus.com/&#34;&gt;https://techblog.appnexus.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arkency &lt;a href=&#34;http://blog.arkency.com/&#34;&gt;http://blog.arkency.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Artsy &lt;a href=&#34;http://artsy.github.io/&#34;&gt;http://artsy.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Asana &lt;a href=&#34;https://blog.asana.com/category/eng/&#34;&gt;https://blog.asana.com/category/eng/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Atlassian &lt;a href=&#34;https://developer.atlassian.com/blog/&#34;&gt;https://developer.atlassian.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Atomic Object &lt;a href=&#34;https://spin.atomicobject.com/&#34;&gt;https://spin.atomicobject.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Auth0 &lt;a href=&#34;https://auth0.com/blog/&#34;&gt;https://auth0.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Avenue Code &lt;a href=&#34;http://blog.avenuecode.com/&#34;&gt;http://blog.avenuecode.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AWS &lt;a href=&#34;https://aws.amazon.com/blogs/aws/&#34;&gt;https://aws.amazon.com/blogs/aws/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Azavea &lt;a href=&#34;https://www.azavea.com/blog/category/software-development/&#34;&gt;https://www.azavea.com/blog/category/software-development/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;B companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Babbel &lt;a href=&#34;https://bytes.babbel.com/en/&#34;&gt;https://bytes.babbel.com/en/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Backtrace &lt;a href=&#34;https://backtrace.io/blog/&#34;&gt;https://backtrace.io/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Badoo &lt;a href=&#34;https://techblog.badoo.com/&#34;&gt;https://techblog.badoo.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Baidu Research &lt;a href=&#34;http://research.baidu.com/Blog&#34;&gt;http://research.baidu.com/Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bandcamp &lt;a href=&#34;https://bandcamptech.wordpress.com/&#34;&gt;https://bandcamptech.wordpress.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Base Lab &lt;a href=&#34;https://lab.getbase.com/category/engineering/&#34;&gt;https://lab.getbase.com/category/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bazaarvoice &lt;a href=&#34;https://blog.developer.bazaarvoice.com/&#34;&gt;https://blog.developer.bazaarvoice.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BBC &lt;a href=&#34;https://medium.com/bbc-design-engineering/&#34;&gt;https://medium.com/bbc-design-engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Benchling &lt;a href=&#34;https://benchling.engineering/&#34;&gt;https://benchling.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BenefitFocus &lt;a href=&#34;https://www.benefitfocus.com/blogs/design-engineering&#34;&gt;https://www.benefitfocus.com/blogs/design-engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bigcommerce &lt;a href=&#34;http://www.bigeng.io/&#34;&gt;http://www.bigeng.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Binary Studio &lt;a href=&#34;https://binary-studio.com/blog/&#34;&gt;https://binary-studio.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bitly &lt;a href=&#34;http://word.bitly.com/&#34;&gt;http://word.bitly.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BitTorrent &lt;a href=&#34;http://engineering.bittorrent.com/&#34;&gt;http://engineering.bittorrent.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BlaBlaCar &lt;a href=&#34;http://blablatech.com/blog/&#34;&gt;http://blablatech.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BlackRock &lt;a href=&#34;http://rockthecode.io/&#34;&gt;http://rockthecode.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blender &lt;a href=&#34;https://code.blender.org/&#34;&gt;https://code.blender.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blogfoster &lt;a href=&#34;http://engineering.blogfoster.com/&#34;&gt;http://engineering.blogfoster.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Booking.com &lt;a href=&#34;https://blog.booking.com/&#34;&gt;https://blog.booking.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Boxever &lt;a href=&#34;http://www.boxever.com/blog/&#34;&gt;http://www.boxever.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Brandwatch &lt;a href=&#34;http://engineering.brandwatch.com/&#34;&gt;http://engineering.brandwatch.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Buzzfeed &lt;a href=&#34;https://www.buzzfeed.com/techblog&#34;&gt;https://www.buzzfeed.com/techblog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;C companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Canva &lt;a href=&#34;https://engineering.canva.com&#34;&gt;https://engineering.canva.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Capgemini &lt;a href=&#34;https://capgemini.github.io/&#34;&gt;https://capgemini.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CenturyLink &lt;a href=&#34;https://www.ctl.io/developers/blog&#34;&gt;https://www.ctl.io/developers/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cerner &lt;a href=&#34;http://engineering.cerner.com/&#34;&gt;http://engineering.cerner.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chaps &lt;a href=&#34;https://blog.chaps.io/&#34;&gt;https://blog.chaps.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chartbeat &lt;a href=&#34;http://engineering.chartbeat.com/&#34;&gt;http://engineering.chartbeat.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chef &lt;a href=&#34;https://blog.chef.io&#34;&gt;https://blog.chef.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clever &lt;a href=&#34;https://engineering.clever.com/&#34;&gt;https://engineering.clever.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CleverTap &lt;a href=&#34;https://clevertap.com/blog/tag/engineering/&#34;&gt;https://clevertap.com/blog/tag/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CloudBees &lt;a href=&#34;https://www.previous.cloudbees.com/blog&#34;&gt;https://www.previous.cloudbees.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cloudera &lt;a href=&#34;https://blog.cloudera.com/&#34;&gt;https://blog.cloudera.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cloudflare &lt;a href=&#34;https://blog.cloudflare.com/&#34;&gt;https://blog.cloudflare.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CockroachDB &lt;a href=&#34;https://www.cockroachlabs.com/blog/&#34;&gt;https://www.cockroachlabs.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code Better &lt;a href=&#34;http://codebetter.com/&#34;&gt;http://codebetter.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Codelitt &lt;a href=&#34;https://www.codelitt.com/blog/&#34;&gt;https://www.codelitt.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Codemancers &lt;a href=&#34;https://crypt.codemancers.com/&#34;&gt;https://crypt.codemancers.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Codementor &lt;a href=&#34;https://www.codementor.io/tutorial&#34;&gt;https://www.codementor.io/tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CodeName One &lt;a href=&#34;http://www.codenameone.com/blog.html&#34;&gt;http://www.codenameone.com/blog.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Codeship &lt;a href=&#34;https://blog.codeship.com/&#34;&gt;https://blog.codeship.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Coinbase &lt;a href=&#34;https://engineering.coinbase.com/&#34;&gt;https://engineering.coinbase.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Collective Idea &lt;a href=&#34;https://collectiveidea.com/blog&#34;&gt;https://collectiveidea.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commercetools &lt;a href=&#34;https://techblog.commercetools.com/&#34;&gt;https://techblog.commercetools.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Condé Nast &lt;a href=&#34;https://technology.condenast.com/&#34;&gt;https://technology.condenast.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Confluent &lt;a href=&#34;https://www.confluent.io/blog&#34;&gt;https://www.confluent.io/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Convox &lt;a href=&#34;https://convox.com/blog&#34;&gt;https://convox.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Coolblue &lt;a href=&#34;http://devblog.coolblue.nl/&#34;&gt;http://devblog.coolblue.nl/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Credit Karma &lt;a href=&#34;https://engineering.creditkarma.com/&#34;&gt;https://engineering.creditkarma.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Criteo &lt;a href=&#34;https://medium.com/criteo-labs&#34;&gt;https://medium.com/criteo-labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Crowdfire &lt;a href=&#34;https://crowdfire.engineering/&#34;&gt;https://crowdfire.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CSC - IT Center For Science - Cloud Team &lt;a href=&#34;https://cloud.blog.csc.fi/&#34;&gt;https://cloud.blog.csc.fi/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Curalate &lt;a href=&#34;http://engineering.curalate.com/&#34;&gt;http://engineering.curalate.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;D companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data Artisans &lt;a href=&#34;https://data-artisans.com/blog/&#34;&gt;https://data-artisans.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Databricks &lt;a href=&#34;https://databricks.com/blog&#34;&gt;https://databricks.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DataFox &lt;a href=&#34;http://eng.datafox.co/&#34;&gt;http://eng.datafox.co/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deezer &lt;a href=&#34;https://deezer.io/&#34;&gt;https://deezer.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DeferPanic &lt;a href=&#34;https://deferpanic.com/blog/&#34;&gt;https://deferpanic.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deliveroo &lt;a href=&#34;https://deliveroo.engineering/&#34;&gt;https://deliveroo.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DigitalOcean &lt;a href=&#34;https://blog.digitalocean.com/tag/engineering/&#34;&gt;https://blog.digitalocean.com/tag/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord &lt;a href=&#34;https://blog.discordapp.com/&#34;&gt;https://blog.discordapp.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docker &lt;a href=&#34;https://blog.docker.com/&#34;&gt;https://blog.docker.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DoorDash &lt;a href=&#34;https://blog.doordash.com/tagged/engineering&#34;&gt;https://blog.doordash.com/tagged/engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Doximity &lt;a href=&#34;https://engineering.doximity.com&#34;&gt;https://engineering.doximity.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Drivy &lt;a href=&#34;https://drivy.engineering/&#34;&gt;https://drivy.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dropbox &lt;a href=&#34;https://blogs.dropbox.com/tech/&#34;&gt;https://blogs.dropbox.com/tech/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;E companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ebay &lt;a href=&#34;https://www.ebayinc.com/stories/blogs/tech/&#34;&gt;https://www.ebayinc.com/stories/blogs/tech/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;eFounders &lt;a href=&#34;https://medium.com/unexpected-token&#34;&gt;https://medium.com/unexpected-token&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eharmony &lt;a href=&#34;http://www.eharmony.com/engineering/&#34;&gt;http://www.eharmony.com/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elastic &lt;a href=&#34;https://www.elastic.co/blog/category/engineering&#34;&gt;https://www.elastic.co/blog/category/engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Engine Yard &lt;a href=&#34;https://blog.engineyard.com/&#34;&gt;https://blog.engineyard.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Entelo &lt;a href=&#34;https://sourcecode.entelo.com/&#34;&gt;https://sourcecode.entelo.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Envato &lt;a href=&#34;https://webuild.envato.com/&#34;&gt;https://webuild.envato.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Envoy &lt;a href=&#34;https://envoy.engineering/&#34;&gt;https://envoy.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Erlang Solutions &lt;a href=&#34;https://www.erlang-solutions.com/blog.html&#34;&gt;https://www.erlang-solutions.com/blog.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Etsy &lt;a href=&#34;https://codeascraft.com/&#34;&gt;https://codeascraft.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eventbrite &lt;a href=&#34;https://www.eventbrite.com/engineering/&#34;&gt;https://www.eventbrite.com/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Evernote &lt;a href=&#34;https://evernote.com/blog/&#34;&gt;https://evernote.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Evil Martians &lt;a href=&#34;https://evilmartians.com/chronicles/&#34;&gt;https://evilmartians.com/chronicles/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Expedia &lt;a href=&#34;https://medium.com/expedia-group-tech&#34;&gt;https://medium.com/expedia-group-tech&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;F companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Facebook &lt;a href=&#34;https://code.facebook.com/posts/&#34;&gt;https://code.facebook.com/posts/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Facebook AI Research &lt;a href=&#34;https://engineering.fb.com/category/ai-research/&#34;&gt;https://engineering.fb.com/category/ai-research/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Faraday &lt;a href=&#34;http://blog.faraday.io/&#34;&gt;http://blog.faraday.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Feedzai &lt;a href=&#34;https://medium.com/feedzaitech&#34;&gt;https://medium.com/feedzaitech&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fiftythree &lt;a href=&#34;http://making.fiftythree.com/&#34;&gt;http://making.fiftythree.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Findmypast &lt;a href=&#34;http://tech.findmypast.com/&#34;&gt;http://tech.findmypast.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Finn.no &lt;a href=&#34;http://tech.finn.no/&#34;&gt;http://tech.finn.no/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firmafon &lt;a href=&#34;https://dev.firmafon.dk/blog/&#34;&gt;https://dev.firmafon.dk/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Flickr &lt;a href=&#34;http://code.flickr.net/&#34;&gt;http://code.flickr.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Flipboard &lt;a href=&#34;http://engineering.flipboard.com/&#34;&gt;http://engineering.flipboard.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Foursquare &lt;a href=&#34;https://engineering.foursquare.com/&#34;&gt;https://engineering.foursquare.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Freeletics &lt;a href=&#34;https://freeletics.engineering/&#34;&gt;https://freeletics.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Funding Circle &lt;a href=&#34;https://engineering.fundingcircle.com/&#34;&gt;https://engineering.fundingcircle.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Future Processing &lt;a href=&#34;https://www.future-processing.pl/technical-blog/&#34;&gt;https://www.future-processing.pl/technical-blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fynd &lt;a href=&#34;http://gofynd.io/blog&#34;&gt;http://gofynd.io/blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;G companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Galois &lt;a href=&#34;https://galois.com/blog/&#34;&gt;https://galois.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GameChanger &lt;a href=&#34;http://tech.gc.com/&#34;&gt;http://tech.gc.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Geoblink &lt;a href=&#34;https://tech.geoblink.com&#34;&gt;https://tech.geoblink.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gilt &lt;a href=&#34;http://tech.gilt.com&#34;&gt;http://tech.gilt.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GIPHY &lt;a href=&#34;https://engineering.giphy.com/&#34;&gt;https://engineering.giphy.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub &lt;a href=&#34;https://githubengineering.com/&#34;&gt;https://githubengineering.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub Old &lt;a href=&#34;https://github.com/blog/category/engineering&#34;&gt;https://github.com/blog/category/engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GoCardless &lt;a href=&#34;https://gocardless.com/blog/tagged/engineering/&#34;&gt;https://gocardless.com/blog/tagged/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Good Eggs &lt;a href=&#34;https://team.goodeggs.com&#34;&gt;https://team.goodeggs.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Online Security &lt;a href=&#34;https://security.googleblog.com/&#34;&gt;https://security.googleblog.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Research &lt;a href=&#34;https://research.googleblog.com/&#34;&gt;https://research.googleblog.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GoSquared &lt;a href=&#34;https://engineering.gosquared.com/&#34;&gt;https://engineering.gosquared.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GO-JEK &lt;a href=&#34;https://blog.gojekengineering.com/&#34;&gt;https://blog.gojekengineering.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grab &lt;a href=&#34;http://engineering.grab.com/&#34;&gt;http://engineering.grab.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grafana &lt;a href=&#34;https://grafana.com/blog/&#34;&gt;https://grafana.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grammarly &lt;a href=&#34;https://tech.grammarly.com/blog/index.html&#34;&gt;https://tech.grammarly.com/blog/index.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Graphcool &lt;a href=&#34;https://blog.graph.cool/&#34;&gt;https://blog.graph.cool/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grofers &lt;a href=&#34;https://lambda.grofers.com/&#34;&gt;https://lambda.grofers.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grouper &lt;a href=&#34;http://blog.joingrouper.com/&#34;&gt;http://blog.joingrouper.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Groupon &lt;a href=&#34;https://engineering.groupon.com/&#34;&gt;https://engineering.groupon.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Guardian &lt;a href=&#34;https://www.theguardian.com/info/developer-blog&#34;&gt;https://www.theguardian.com/info/developer-blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gusto &lt;a href=&#34;http://engineering.gusto.com/&#34;&gt;http://engineering.gusto.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;H companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HackerEarth &lt;a href=&#34;http://engineering.hackerearth.com/&#34;&gt;http://engineering.hackerearth.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haptik &lt;a href=&#34;https://haptik.ai/tech/&#34;&gt;https://haptik.ai/tech/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Harry&#39;s &lt;a href=&#34;http://engineering.harrys.com/&#34;&gt;http://engineering.harrys.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HashiCorp &lt;a href=&#34;https://www.hashicorp.com/blog/&#34;&gt;https://www.hashicorp.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hashnode &lt;a href=&#34;https://engineering.hashnode.com/&#34;&gt;https://engineering.hashnode.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hashrocket &lt;a href=&#34;https://hashrocket.com/blog&#34;&gt;https://hashrocket.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hasura &lt;a href=&#34;https://blog.hasura.io/&#34;&gt;https://blog.hasura.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haus &lt;a href=&#34;https://engineering.haus.com&#34;&gt;https://engineering.haus.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Heap &lt;a href=&#34;https://heap.engineering/&#34;&gt;https://heap.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helpshift &lt;a href=&#34;https://medium.com/helpshift-engineering/&#34;&gt;https://medium.com/helpshift-engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HERE &lt;a href=&#34;https://developer.here.com/blog&#34;&gt;https://developer.here.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Heroku &lt;a href=&#34;https://blog.heroku.com/engineering&#34;&gt;https://blog.heroku.com/engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HireArt &lt;a href=&#34;http://code.hireart.com/&#34;&gt;http://code.hireart.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HomeAway &lt;a href=&#34;https://tech.homeaway.com/&#34;&gt;https://tech.homeaway.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Honeybadger &lt;a href=&#34;http://blog.honeybadger.io/&#34;&gt;http://blog.honeybadger.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hootsuite &lt;a href=&#34;http://code.hootsuite.com/&#34;&gt;http://code.hootsuite.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hostinger &lt;a href=&#34;https://www.hostinger.com/blog/engineering/&#34;&gt;https://www.hostinger.com/blog/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Housing.com &lt;a href=&#34;https://medium.com/engineering-housing&#34;&gt;https://medium.com/engineering-housing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HubSpot &lt;a href=&#34;http://product.hubspot.com/blog/topic/engineering&#34;&gt;http://product.hubspot.com/blog/topic/engineering&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;I companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IBM developerWorks &lt;a href=&#34;https://developer.ibm.com/dwblog/&#34;&gt;https://developer.ibm.com/dwblog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IFTTT &lt;a href=&#34;http://engineering.ifttt.com/&#34;&gt;http://engineering.ifttt.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IMVU &lt;a href=&#34;https://engineering.imvu.com/&#34;&gt;https://engineering.imvu.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Imaginea &lt;a href=&#34;https://blog.imaginea.com/&#34;&gt;https://blog.imaginea.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Imgur &lt;a href=&#34;https://blog.imgur.com/category/eng/&#34;&gt;https://blog.imgur.com/category/eng/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Indeed &lt;a href=&#34;http://engineering.indeedblog.com/blog/&#34;&gt;http://engineering.indeedblog.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Instacart &lt;a href=&#34;https://tech.instacart.com/&#34;&gt;https://tech.instacart.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Instagram &lt;a href=&#34;https://engineering.instagram.com/&#34;&gt;https://engineering.instagram.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intel &lt;a href=&#34;https://software.intel.com/en-us/blogs/&#34;&gt;https://software.intel.com/en-us/blogs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intent HQ &lt;a href=&#34;http://engineering.intenthq.com/&#34;&gt;http://engineering.intenthq.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intent Media &lt;a href=&#34;http://intentmedia.com/blog/&#34;&gt;http://intentmedia.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intercom &lt;a href=&#34;https://engineering.intercom.io/&#34;&gt;https://engineering.intercom.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intuit &lt;a href=&#34;https://quickbooks-engineering.intuit.com/&#34;&gt;https://quickbooks-engineering.intuit.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;InVision &lt;a href=&#34;http://engineering.invisionapp.com/&#34;&gt;http://engineering.invisionapp.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;J companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jane Street &lt;a href=&#34;https://blogs.janestreet.com/category/ocaml/&#34;&gt;https://blogs.janestreet.com/category/ocaml/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jet Technology &lt;a href=&#34;https://tech.jet.com/&#34;&gt;https://tech.jet.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jobandtalent &lt;a href=&#34;https://jobandtalent.engineering/&#34;&gt;https://jobandtalent.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JobTeaser &lt;a href=&#34;https://medium.com/jobteaser-dev-team/&#34;&gt;https://medium.com/jobteaser-dev-team/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jolly Good Code &lt;a href=&#34;https://jollygoodcode.github.io/&#34;&gt;https://jollygoodcode.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Just Eat &lt;a href=&#34;https://tech.just-eat.com/&#34;&gt;https://tech.just-eat.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;K companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Khan Academy &lt;a href=&#34;http://engineering.khanacademy.org&#34;&gt;http://engineering.khanacademy.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kickstarter &lt;a href=&#34;https://www.kickstarter.com/backing-and-hacking&#34;&gt;https://www.kickstarter.com/backing-and-hacking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;King &lt;a href=&#34;https://techblog.king.com/&#34;&gt;https://techblog.king.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kinvolk &lt;a href=&#34;https://kinvolk.io/blog/&#34;&gt;https://kinvolk.io/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kogan.com &lt;a href=&#34;https://devblog.kogan.com/&#34;&gt;https://devblog.kogan.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kolosek &lt;a href=&#34;https://kolosek.com/blog/&#34;&gt;https://kolosek.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;L companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Latacora &lt;a href=&#34;https://latacora.singles/&#34;&gt;https://latacora.singles/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Laterooms &lt;a href=&#34;http://engineering.laterooms.com/&#34;&gt;http://engineering.laterooms.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LendingHome &lt;a href=&#34;https://tech.lendinghome.com/&#34;&gt;https://tech.lendinghome.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LINE &lt;a href=&#34;https://engineering.linecorp.com/en/blog&#34;&gt;https://engineering.linecorp.com/en/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LinkedIn &lt;a href=&#34;https://engineering.linkedin.com/blog&#34;&gt;https://engineering.linkedin.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LiveChat &lt;a href=&#34;https://developers.livechatinc.com/blog/&#34;&gt;https://developers.livechatinc.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LiveRamp &lt;a href=&#34;https://liveramp.com/engineering/&#34;&gt;https://liveramp.com/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Localytics &lt;a href=&#34;http://eng.localytics.com/&#34;&gt;http://eng.localytics.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lyft &lt;a href=&#34;https://eng.lyft.com/&#34;&gt;https://eng.lyft.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;M companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Made Tech &lt;a href=&#34;https://www.madetech.com/blog&#34;&gt;https://www.madetech.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mallow Tech &lt;a href=&#34;http://blog.mallow-tech.com/&#34;&gt;http://blog.mallow-tech.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mandrill &lt;a href=&#34;http://blog.mandrill.com/&#34;&gt;http://blog.mandrill.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MapTiler &lt;a href=&#34;https://www.maptiler.com/blog/&#34;&gt;https://www.maptiler.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Medallia &lt;a href=&#34;http://engineering.medallia.com/blog/&#34;&gt;http://engineering.medallia.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Medium &lt;a href=&#34;https://medium.com/medium-eng&#34;&gt;https://medium.com/medium-eng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MemSQL &lt;a href=&#34;http://blog.memsql.com/content/engineering/&#34;&gt;http://blog.memsql.com/content/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mesosphere &lt;a href=&#34;https://mesosphere.com/blog/&#34;&gt;https://mesosphere.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Python Engineering &lt;a href=&#34;https://blogs.msdn.microsoft.com/pythonengineering/&#34;&gt;https://blogs.msdn.microsoft.com/pythonengineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mixmax &lt;a href=&#34;https://engineering.mixmax.com/&#34;&gt;https://engineering.mixmax.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mixpanel &lt;a href=&#34;https://code.mixpanel.com/&#34;&gt;https://code.mixpanel.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MongoDB &lt;a href=&#34;https://engineering.mongodb.com/&#34;&gt;https://engineering.mongodb.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Monsanto &lt;a href=&#34;http://engineering.monsanto.com/&#34;&gt;http://engineering.monsanto.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Moove-it &lt;a href=&#34;https://blog.moove-it.com/&#34;&gt;https://blog.moove-it.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mozilla Automation Team &lt;a href=&#34;https://planet.mozilla.org/ateam/&#34;&gt;https://planet.mozilla.org/ateam/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mozilla Hacks &lt;a href=&#34;https://hacks.mozilla.org/&#34;&gt;https://hacks.mozilla.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mozilla Release Engineering &lt;a href=&#34;https://planet.mozilla.org/releng/&#34;&gt;https://planet.mozilla.org/releng/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Myntra &lt;a href=&#34;https://medium.com/myntra-engineering&#34;&gt;https://medium.com/myntra-engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Myntra Data Science &lt;a href=&#34;https://medium.com/myntra-engineering/tagged/data-science&#34;&gt;https://medium.com/myntra-engineering/tagged/data-science&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;N companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Netflix &lt;a href=&#34;https://medium.com/netflix-techblog&#34;&gt;https://medium.com/netflix-techblog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;New York Times &lt;a href=&#34;https://open.blogs.nytimes.com&#34;&gt;https://open.blogs.nytimes.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nextdoor &lt;a href=&#34;https://engblog.nextdoor.com/&#34;&gt;https://engblog.nextdoor.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nordic APIs &lt;a href=&#34;https://nordicapis.com/blog/&#34;&gt;https://nordicapis.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Novoda &lt;a href=&#34;https://www.novoda.com/blog/&#34;&gt;https://www.novoda.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NPR Apps &lt;a href=&#34;http://blog.apps.npr.org/&#34;&gt;http://blog.apps.npr.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nvidia &lt;a href=&#34;https://blogs.nvidia.com/&#34;&gt;https://blogs.nvidia.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;O companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OCTO Technology &lt;a href=&#34;https://blog.octo.com/en/&#34;&gt;https://blog.octo.com/en/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Okta &lt;a href=&#34;https://developer.okta.com/blog/&#34;&gt;https://developer.okta.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OLX &lt;a href=&#34;https://tech.olx.com/&#34;&gt;https://tech.olx.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OmniTI &lt;a href=&#34;https://omniti.com/seeds/stop-collaborate-and-listen-notify&#34;&gt;https://omniti.com/seeds/stop-collaborate-and-listen-notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenDNS &lt;a href=&#34;https://engineering.opendns.com/&#34;&gt;https://engineering.opendns.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenTable &lt;a href=&#34;http://tech.opentable.com/&#34;&gt;http://tech.opentable.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenTable UK &lt;a href=&#34;http://tech.opentable.co.uk/&#34;&gt;http://tech.opentable.co.uk/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Oursky &lt;a href=&#34;https://code.oursky.com/&#34;&gt;https://code.oursky.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Oyster &lt;a href=&#34;http://tech.oyster.com/&#34;&gt;http://tech.oyster.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Opensooq &lt;a href=&#34;http://engineering.opensooq.com/&#34;&gt;http://engineering.opensooq.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;P companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Panorama Education &lt;a href=&#34;http://engineering.panoramaed.com/&#34;&gt;http://engineering.panoramaed.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paperless Post &lt;a href=&#34;https://www.paperlesspost.com/blog/teams/tech/&#34;&gt;https://www.paperlesspost.com/blog/teams/tech/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paypal &lt;a href=&#34;https://www.paypal-engineering.com/&#34;&gt;https://www.paypal-engineering.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Periscope Data &lt;a href=&#34;https://www.periscopedata.com/blog&#34;&gt;https://www.periscopedata.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PicCollage &lt;a href=&#34;https://tech.pic-collage.com/&#34;&gt;https://tech.pic-collage.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pinterest &lt;a href=&#34;https://medium.com/@Pinterest_Engineering&#34;&gt;https://medium.com/@Pinterest_Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pivotal &lt;a href=&#34;https://engineering.pivotal.io&#34;&gt;https://engineering.pivotal.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pluralsight &lt;a href=&#34;https://www.pluralsight.com/guides&#34;&gt;https://www.pluralsight.com/guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Postman &lt;a href=&#34;https://medium.com/better-practices&#34;&gt;https://medium.com/better-practices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Postmark &lt;a href=&#34;https://postmarkapp.com/blog&#34;&gt;https://postmarkapp.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Postmates &lt;a href=&#34;https://blog.postmates.com/tagged/engineering&#34;&gt;https://blog.postmates.com/tagged/engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prezi &lt;a href=&#34;https://medium.com/prezi-engineering&#34;&gt;https://medium.com/prezi-engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prolific Interactive &lt;a href=&#34;http://blog.prolificinteractive.com/category/development/&#34;&gt;http://blog.prolificinteractive.com/category/development/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PubNub: &lt;a href=&#34;https://www.pubnub.com/blog/&#34;&gt;https://www.pubnub.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PullReview &lt;a href=&#34;http://blog.8thcolor.com/&#34;&gt;http://blog.8thcolor.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pusher &lt;a href=&#34;https://making.pusher.com/&#34;&gt;https://making.pusher.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Q companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quora &lt;a href=&#34;https://engineering.quora.com/&#34;&gt;https://engineering.quora.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;R companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Raizlabs &lt;a href=&#34;https://www.raizlabs.com/dev/&#34;&gt;https://www.raizlabs.com/dev/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RapidAPI &lt;a href=&#34;http://blog.rapidapi.com/&#34;&gt;http://blog.rapidapi.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;REA Group &lt;a href=&#34;https://www.rea-group.com/category/tech/&#34;&gt;https://www.rea-group.com/category/tech/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Realm.io &lt;a href=&#34;https://realm.io/news/&#34;&gt;https://realm.io/news/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Redbubble &lt;a href=&#34;http://artplustech.com/&#34;&gt;http://artplustech.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Redino &lt;a href=&#34;http://redino.net/blog/&#34;&gt;http://redino.net/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Red Hat &lt;a href=&#34;https://developers.redhat.com/blog/&#34;&gt;https://developers.redhat.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Remind &lt;a href=&#34;http://engineering.remind.com/&#34;&gt;http://engineering.remind.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RetailMeNot &lt;a href=&#34;https://medium.com/retailmenot-engineering/&#34;&gt;https://medium.com/retailmenot-engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rightscale &lt;a href=&#34;http://eng.rightscale.com/&#34;&gt;http://eng.rightscale.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Riot Games &lt;a href=&#34;https://engineering.riotgames.com/&#34;&gt;https://engineering.riotgames.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RisingStack &lt;a href=&#34;https://blog.risingstack.com/&#34;&gt;https://blog.risingstack.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Robert Elder Software &lt;a href=&#34;http://blog.robertelder.org/&#34;&gt;http://blog.robertelder.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RoseHosting &lt;a href=&#34;https://www.rosehosting.com/blog/&#34;&gt;https://www.rosehosting.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Runtastic &lt;a href=&#34;https://www.runtastic.com/blog/en/category/tech/&#34;&gt;https://www.runtastic.com/blog/en/category/tech/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;S companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Salesforce &lt;a href=&#34;https://developer.salesforce.com/blogs/engineering/&#34;&gt;https://developer.salesforce.com/blogs/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Schibsted Tech Polska &lt;a href=&#34;http://www.schibsted.pl/blog/&#34;&gt;http://www.schibsted.pl/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scrapinghub &lt;a href=&#34;https://blog.scrapinghub.com/&#34;&gt;https://blog.scrapinghub.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scrunch &lt;a href=&#34;https://tech.scrunch.com/blog/&#34;&gt;https://tech.scrunch.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Secret Escapes &lt;a href=&#34;http://tech.secretescapes.com/&#34;&gt;http://tech.secretescapes.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Segment &lt;a href=&#34;https://segment.com/blog/categories/engineering/&#34;&gt;https://segment.com/blog/categories/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Semantics3 &lt;a href=&#34;https://engineering.semantics3.com&#34;&gt;https://engineering.semantics3.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Semaphore CI Community &lt;a href=&#34;https://semaphoreci.com/community&#34;&gt;https://semaphoreci.com/community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Semaphore CI Engineering &lt;a href=&#34;http://semaphoreci.com/blog/tags/engineering.html&#34;&gt;http://semaphoreci.com/blog/tags/engineering.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sensible &lt;a href=&#34;http://blog.sensible.io/&#34;&gt;http://blog.sensible.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Serverless &lt;a href=&#34;https://serverless.com/blog/&#34;&gt;https://serverless.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Settled &lt;a href=&#34;https://engineroom.settled.co.uk/&#34;&gt;https://engineroom.settled.co.uk/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shape Security &lt;a href=&#34;http://engineering.shapesecurity.com/&#34;&gt;http://engineering.shapesecurity.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sharethis &lt;a href=&#34;https://www.sharethis.com/category/engineering/&#34;&gt;https://www.sharethis.com/category/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shazam &lt;a href=&#34;https://blog.shazam.com/&#34;&gt;https://blog.shazam.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shopify &lt;a href=&#34;https://engineering.shopify.com&#34;&gt;https://engineering.shopify.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ShowMax &lt;a href=&#34;https://tech.showmax.com&#34;&gt;https://tech.showmax.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shyp &lt;a href=&#34;https://medium.com/shyp-engineering&#34;&gt;https://medium.com/shyp-engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sift Science &lt;a href=&#34;https://blog.siftscience.com/?category=Engineering&#34;&gt;https://blog.siftscience.com/?category=Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simple &lt;a href=&#34;https://www.simple.com/engineering&#34;&gt;https://www.simple.com/engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SitePoint &lt;a href=&#34;https://sitepoint.com&#34;&gt;https://sitepoint.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sky Betting &amp;amp; Gaming &lt;a href=&#34;http://engineering.skybettingandgaming.com/&#34;&gt;http://engineering.skybettingandgaming.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Skyscanner &lt;a href=&#34;http://codevoyagers.com/&#34;&gt;http://codevoyagers.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slack &lt;a href=&#34;https://slack.engineering/&#34;&gt;https://slack.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SlideShare &lt;a href=&#34;https://engineering.linkedin.com/blog/topic/slideshare&#34;&gt;https://engineering.linkedin.com/blog/topic/slideshare&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Small Improvements &lt;a href=&#34;https://tech.small-improvements.com/&#34;&gt;https://tech.small-improvements.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SmartRecruiters &lt;a href=&#34;https://up.smartrecruiters.com&#34;&gt;https://up.smartrecruiters.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Snyk &lt;a href=&#34;https://snyk.io/blog&#34;&gt;https://snyk.io/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Songkick &lt;a href=&#34;https://devblog.songkick.com/&#34;&gt;https://devblog.songkick.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Soshace &lt;a href=&#34;https://blog.soshace.com/en/&#34;&gt;https://blog.soshace.com/en/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Soundcloud &lt;a href=&#34;https://developers.soundcloud.com/blog/&#34;&gt;https://developers.soundcloud.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SourceClear &lt;a href=&#34;https://blog.sourceclear.com/&#34;&gt;https://blog.sourceclear.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Speedledger &lt;a href=&#34;http://engineering.speedledger.com/&#34;&gt;http://engineering.speedledger.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Spotify &lt;a href=&#34;https://labs.spotify.com/&#34;&gt;https://labs.spotify.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sqreen &lt;a href=&#34;https://blog.sqreen.io/&#34;&gt;https://blog.sqreen.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Square &lt;a href=&#34;https://corner.squareup.com/&#34;&gt;https://corner.squareup.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Squarespace &lt;a href=&#34;https://engineering.squarespace.com/&#34;&gt;https://engineering.squarespace.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stack Overflow &lt;a href=&#34;https://stackoverflow.blog/engineering/&#34;&gt;https://stackoverflow.blog/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stackshare &lt;a href=&#34;https://stackshare.io/feed&#34;&gt;https://stackshare.io/feed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stitch Fix &lt;a href=&#34;http://multithreaded.stitchfix.com/blog/&#34;&gt;http://multithreaded.stitchfix.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stormpath &lt;a href=&#34;https://stormpath.com/blog/&#34;&gt;https://stormpath.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Strava &lt;a href=&#34;https://medium.com/strava-engineering/&#34;&gt;https://medium.com/strava-engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stride &lt;a href=&#34;https://blog.stridenyc.com/&#34;&gt;https://blog.stridenyc.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stripe &lt;a href=&#34;https://stripe.com/blog&#34;&gt;https://stripe.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SurveyMonkey &lt;a href=&#34;https://engineering.surveymonkey.com/&#34;&gt;https://engineering.surveymonkey.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swiggy &lt;a href=&#34;https://bytes.swiggy.com/&#34;&gt;https://bytes.swiggy.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;T companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Takipi &lt;a href=&#34;http://blog.takipi.com/&#34;&gt;http://blog.takipi.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Target &lt;a href=&#34;https://target.github.io/&#34;&gt;https://target.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TaskRabbit &lt;a href=&#34;http://tech.taskrabbit.com/&#34;&gt;http://tech.taskrabbit.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Teamwork &lt;a href=&#34;https://engineroom.teamwork.com/&#34;&gt;https://engineroom.teamwork.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Teespring &lt;a href=&#34;http://teespring.engineering/&#34;&gt;http://teespring.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;theScore &lt;a href=&#34;http://techblog.thescore.com/&#34;&gt;http://techblog.thescore.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Thoughtbot &lt;a href=&#34;https://robots.thoughtbot.com/&#34;&gt;https://robots.thoughtbot.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ThoughtWorks &lt;a href=&#34;https://www.thoughtworks.com/insights&#34;&gt;https://www.thoughtworks.com/insights&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Thumbtack &lt;a href=&#34;https://www.thumbtack.com/engineering/&#34;&gt;https://www.thumbtack.com/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ticketmaster &lt;a href=&#34;https://tech.ticketmaster.com/&#34;&gt;https://tech.ticketmaster.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Timescale &lt;a href=&#34;https://blog.timescale.com/&#34;&gt;https://blog.timescale.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tinder &lt;a href=&#34;https://tech.gotinder.com/&#34;&gt;https://tech.gotinder.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Toptal &lt;a href=&#34;https://www.toptal.com/blog/&#34;&gt;https://www.toptal.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TrackMaven &lt;a href=&#34;http://engineroom.trackmaven.com/&#34;&gt;http://engineroom.trackmaven.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Transferwise &lt;a href=&#34;http://tech.transferwise.com/&#34;&gt;http://tech.transferwise.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Trello &lt;a href=&#34;https://tech.trello.com/&#34;&gt;https://tech.trello.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TripAdvisor &lt;a href=&#34;http://engineering.tripadvisor.com/&#34;&gt;http://engineering.tripadvisor.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Trivago &lt;a href=&#34;http://tech.trivago.com/&#34;&gt;http://tech.trivago.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TrueCar &lt;a href=&#34;https://www.drivenbycode.com/&#34;&gt;https://www.drivenbycode.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tumblr &lt;a href=&#34;https://engineering.tumblr.com/&#34;&gt;https://engineering.tumblr.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twilio &lt;a href=&#34;https://www.twilio.com/blog/&#34;&gt;https://www.twilio.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter &lt;a href=&#34;https://blog.twitter.com/engineering&#34;&gt;https://blog.twitter.com/engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitch &lt;a href=&#34;https://blog.twitch.tv/tagged/engineering&#34;&gt;https://blog.twitch.tv/tagged/engineering&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;U companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uber &lt;a href=&#34;http://eng.uber.com/&#34;&gt;http://eng.uber.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Universe &lt;a href=&#34;https://engineering.universe.com&#34;&gt;https://engineering.universe.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Upday &lt;a href=&#34;https://upday.github.io/&#34;&gt;https://upday.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;UpGrad &lt;a href=&#34;https://engineering.upgrad.com&#34;&gt;https://engineering.upgrad.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;V companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vena Solutions &lt;a href=&#34;https://engineering.vena.io/&#34;&gt;https://engineering.vena.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Venmo &lt;a href=&#34;http://blog.venmo.com/?category=Engineering&#34;&gt;http://blog.venmo.com/?category=Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VersionEye &lt;a href=&#34;https://blog.versioneye.com/&#34;&gt;https://blog.versioneye.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vevo &lt;a href=&#34;http://blog.vevo.com/&#34;&gt;http://blog.vevo.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Viget &lt;a href=&#34;https://www.viget.com/articles/category/code#articles&#34;&gt;https://www.viget.com/articles/category/code#articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vine &lt;a href=&#34;http://engineering.vine.co/&#34;&gt;http://engineering.vine.co/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vinted &lt;a href=&#34;http://engineering.vinted.com/&#34;&gt;http://engineering.vinted.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VNGRS &lt;a href=&#34;http://blog.vngrs.com/&#34;&gt;http://blog.vngrs.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VTS &lt;a href=&#34;https://buildingvts.com/&#34;&gt;https://buildingvts.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;W companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WalmartLabs &lt;a href=&#34;https://medium.com/walmartlabs/&#34;&gt;https://medium.com/walmartlabs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wattpad &lt;a href=&#34;http://engineering.wattpad.com/&#34;&gt;http://engineering.wattpad.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wayfair &lt;a href=&#34;http://engineering.wayfair.com/&#34;&gt;http://engineering.wayfair.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wealthfront &lt;a href=&#34;http://eng.wealthfront.com/&#34;&gt;http://eng.wealthfront.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;We Are Wizards &lt;a href=&#34;https://blog.wearewizards.io/&#34;&gt;https://blog.wearewizards.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WebEngage &lt;a href=&#34;http://engineering.webengage.com/&#34;&gt;http://engineering.webengage.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wemake.services &lt;a href=&#34;https://medium.com/wemake-services&#34;&gt;https://medium.com/wemake-services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WePay &lt;a href=&#34;https://wecode.wepay.com/&#34;&gt;https://wecode.wepay.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wimdu &lt;a href=&#34;http://tech.wimdu.com/&#34;&gt;http://tech.wimdu.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wingify &lt;a href=&#34;http://engineering.wingify.com/&#34;&gt;http://engineering.wingify.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wolox &lt;a href=&#34;https://medium.com/@WoloxEngineering/&#34;&gt;https://medium.com/@WoloxEngineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wombat Security Technologies &lt;a href=&#34;http://development.wombatsecurity.com/&#34;&gt;http://development.wombatsecurity.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wonga Technology &lt;a href=&#34;http://tech.wonga.com/&#34;&gt;http://tech.wonga.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WyeWorks &lt;a href=&#34;https://wyeworks.com/blog/&#34;&gt;https://wyeworks.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;X companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;XING &lt;a href=&#34;https://tech.xing.com/&#34;&gt;https://tech.xing.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xmartlabs &lt;a href=&#34;https://blog.xmartlabs.com/&#34;&gt;https://blog.xmartlabs.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Y companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Yahoo &lt;a href=&#34;https://yahooeng.tumblr.com/&#34;&gt;https://yahooeng.tumblr.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Yammer &lt;a href=&#34;https://medium.com/yammer-engineering&#34;&gt;https://medium.com/yammer-engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Yelp &lt;a href=&#34;https://engineeringblog.yelp.com/&#34;&gt;https://engineeringblog.yelp.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YLD! &lt;a href=&#34;https://blog.yld.io&#34;&gt;https://blog.yld.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Z companies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zalando &lt;a href=&#34;https://tech.zalando.com/blog/&#34;&gt;https://tech.zalando.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zapier &lt;a href=&#34;https://zapier.com/engineering/&#34;&gt;https://zapier.com/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ZeeMee &lt;a href=&#34;https://zeemee.engineering/&#34;&gt;https://zeemee.engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zendesk &lt;a href=&#34;https://medium.com/zendesk-engineering&#34;&gt;https://medium.com/zendesk-engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zendesk(old) &lt;a href=&#34;https://developer.zendesk.com/blog&#34;&gt;https://developer.zendesk.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zenefits &lt;a href=&#34;https://engineering.zenefits.com/posts/&#34;&gt;https://engineering.zenefits.com/posts/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zillow &lt;a href=&#34;https://www.zillow.com/engineering/&#34;&gt;https://www.zillow.com/engineering/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zomato &lt;a href=&#34;https://engineering.zomato.com/&#34;&gt;https://engineering.zomato.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zoosk &lt;a href=&#34;https://about.zoosk.com/en/engineering-blog/&#34;&gt;https://about.zoosk.com/en/engineering-blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zulily &lt;a href=&#34;https://engineering.zulily.com/&#34;&gt;https://engineering.zulily.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zumba &lt;a href=&#34;http://tech.zumba.com/&#34;&gt;http://tech.zumba.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zynga &lt;a href=&#34;https://www.zynga.com/blogs/engineering&#34;&gt;https://www.zynga.com/blogs/engineering&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Individuals/Group Contributors&lt;/h3&gt; &#xA;&lt;h4&gt;# individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0xADADA &lt;a href=&#34;https://0xadada.pub/&#34;&gt;https://0xadada.pub/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;A individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Aaron Patterson &lt;a href=&#34;http://tenderlovemaking.com/&#34;&gt;http://tenderlovemaking.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Abhinaba Basu &lt;a href=&#34;https://blogs.msdn.com/b/abhinaba/&#34;&gt;https://blogs.msdn.com/b/abhinaba/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Abu Ashraf Masnun &lt;a href=&#34;http://masnun.com/&#34;&gt;http://masnun.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adam Bard &lt;a href=&#34;https://adambard.com/blog/&#34;&gt;https://adambard.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adam Leventhal &lt;a href=&#34;http://dtrace.org/blogs/ahl/&#34;&gt;http://dtrace.org/blogs/ahl/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adam Tuliper &lt;a href=&#34;http://www.adamtuliper.com/&#34;&gt;http://www.adamtuliper.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Addy Osmani &lt;a href=&#34;https://addyosmani.com/blog/&#34;&gt;https://addyosmani.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adrian Colyer &lt;a href=&#34;https://blog.acolyer.org/&#34;&gt;https://blog.acolyer.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alan Storm &lt;a href=&#34;http://alanstorm.com/&#34;&gt;http://alanstorm.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alex Rogozhnikov &lt;a href=&#34;https://arogozhnikov.github.io/&#34;&gt;https://arogozhnikov.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alex Russell &lt;a href=&#34;https://infrequently.org/&#34;&gt;https://infrequently.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Allison Kaptur &lt;a href=&#34;http://akaptur.com/&#34;&gt;http://akaptur.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Amit Merchant &lt;a href=&#34;https://www.amitmerchant.com/&#34;&gt;https://www.amitmerchant.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Anders Aarvik &lt;a href=&#34;http://aarvik.dk/&#34;&gt;http://aarvik.dk/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andreas Schuster &lt;a href=&#34;https://computer.forensikblog.de/en/&#34;&gt;https://computer.forensikblog.de/en/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrew Bancroft &lt;a href=&#34;http://www.andrewcbancroft.com/&#34;&gt;http://www.andrewcbancroft.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrew Brampton &lt;a href=&#34;https://blog.bramp.net/&#34;&gt;https://blog.bramp.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrew Ray &lt;a href=&#34;https://blog.andrewray.me/&#34;&gt;https://blog.andrewray.me/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrey Akinshin &lt;a href=&#34;http://aakinshin.net/blog/&#34;&gt;http://aakinshin.net/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Antirez &lt;a href=&#34;http://antirez.com/latest/0&#34;&gt;http://antirez.com/latest/0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ariejan de Vroom &lt;a href=&#34;https://ariejan.net/&#34;&gt;https://ariejan.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ariya Hidayat &lt;a href=&#34;https://ariya.io/&#34;&gt;https://ariya.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Armin Ronacher &lt;a href=&#34;http://lucumr.pocoo.org/&#34;&gt;http://lucumr.pocoo.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Axel Rauschmayer &lt;a href=&#34;http://www.2ality.com/&#34;&gt;http://www.2ality.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;B individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bad Concurrency &lt;a href=&#34;http://bad-concurrency.blogspot.com/&#34;&gt;http://bad-concurrency.blogspot.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Barry Warsaw &lt;a href=&#34;https://www.wefearchange.org/&#34;&gt;https://www.wefearchange.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bartlomiej Filipek &lt;a href=&#34;http://www.bfilipek.com/&#34;&gt;http://www.bfilipek.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ben McCormick &lt;a href=&#34;https://benmccormick.org/&#34;&gt;https://benmccormick.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bill the Lizard &lt;a href=&#34;http://www.billthelizard.com/&#34;&gt;http://www.billthelizard.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bjørn Johansen &lt;a href=&#34;https://bjornjohansen.no/&#34;&gt;https://bjornjohansen.no/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blake Erickson &lt;a href=&#34;https://blog.blakeerickson.com/&#34;&gt;https://blog.blakeerickson.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blundell&#39;s Android Tutorials &lt;a href=&#34;http://blog.blundellapps.co.uk&#34;&gt;http://blog.blundellapps.co.uk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bohops &lt;a href=&#34;https://bohops.com/&#34;&gt;https://bohops.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Brandon Rhodes &lt;a href=&#34;http://rhodesmill.org/brandon/&#34;&gt;http://rhodesmill.org/brandon/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Brendan Eich &lt;a href=&#34;https://brendaneich.com/&#34;&gt;https://brendaneich.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Brendan Gregg &lt;a href=&#34;http://www.brendangregg.com/blog/&#34;&gt;http://www.brendangregg.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Brujo Benavides &lt;a href=&#34;https://medium.com/@elbrujohalcon&#34;&gt;https://medium.com/@elbrujohalcon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bryan Cantrill &lt;a href=&#34;http://dtrace.org/blogs/bmc/&#34;&gt;http://dtrace.org/blogs/bmc/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;C individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carlos Becker &lt;a href=&#34;https://carlosbecker.com&#34;&gt;https://carlosbecker.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chen Hui Jing &lt;a href=&#34;https://www.chenhuijing.com/blog/&#34;&gt;https://www.chenhuijing.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chien Tran &lt;a href=&#34;http://thelazylog.com/&#34;&gt;http://thelazylog.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chris Hager &lt;a href=&#34;https://www.metachris.com/blog/&#34;&gt;https://www.metachris.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chris Wellons &lt;a href=&#34;http://nullprogram.com/&#34;&gt;http://nullprogram.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clay McLeod &lt;a href=&#34;http://blog.claymcleod.io/&#34;&gt;http://blog.claymcleod.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cocoa Is My Girlfriend &lt;a href=&#34;http://www.cimgf.com/&#34;&gt;http://www.cimgf.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code with style! &lt;a href=&#34;https://codewithstyle.info/&#34;&gt;https://codewithstyle.info/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Codrops &lt;a href=&#34;https://tympanus.net/codrops/&#34;&gt;https://tympanus.net/codrops/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;D individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Daily JS &lt;a href=&#34;https://medium.com/dailyjs&#34;&gt;https://medium.com/dailyjs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Daily Tech Video &lt;a href=&#34;http://dailytechvideo.com/&#34;&gt;http://dailytechvideo.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dan Luu &lt;a href=&#34;https://danluu.com/&#34;&gt;https://danluu.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Daniel Doubrovkine (dB.) &lt;a href=&#34;http://code.dblock.org/&#34;&gt;http://code.dblock.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Daniel Schmidt &lt;a href=&#34;https://medium.com/@dschmidt1992&#34;&gt;https://medium.com/@dschmidt1992&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dave Atchley &lt;a href=&#34;http://www.datchley.name/&#34;&gt;http://www.datchley.name/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dave Beazley &lt;a href=&#34;http://www.dabeaz.com/blog.html&#34;&gt;http://www.dabeaz.com/blog.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dave Cheney &lt;a href=&#34;https://dave.cheney.net/&#34;&gt;https://dave.cheney.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;David Walsh &lt;a href=&#34;https://davidwalsh.name/&#34;&gt;https://davidwalsh.name/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dean Hume &lt;a href=&#34;http://deanhume.com/&#34;&gt;http://deanhume.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deborah Digges &lt;a href=&#34;http://deborah-digges.github.io/&#34;&gt;http://deborah-digges.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dennis Felsing &lt;a href=&#34;https://hookrace.net/&#34;&gt;https://hookrace.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dennis Yurichev &lt;a href=&#34;https://yurichev.com/blog/&#34;&gt;https://yurichev.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dereuromark &lt;a href=&#34;http://www.dereuromark.de/&#34;&gt;http://www.dereuromark.de/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discover Meteor &lt;a href=&#34;https://www.discovermeteor.com/blog&#34;&gt;https://www.discovermeteor.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Domenico Luciani &lt;a href=&#34;https://domenicoluciani.com&#34;&gt;https://domenicoluciani.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dot Dev (.dev) &lt;a href=&#34;https://dotdev.co&#34;&gt;https://dotdev.co&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dragan Djuric &lt;a href=&#34;http://dragan.rocks&#34;&gt;http://dragan.rocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dragan Gaic &lt;a href=&#34;http://www.gajotres.net/&#34;&gt;http://www.gajotres.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Drew DeVault &lt;a href=&#34;https://drewdevault.com/&#34;&gt;https://drewdevault.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;E individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edan Kwan &lt;a href=&#34;http://blog.edankwan.com/&#34;&gt;http://blog.edankwan.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eddie Smith &lt;a href=&#34;http://www.practicallyefficient.com/&#34;&gt;http://www.practicallyefficient.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edgar Aroutiounian &lt;a href=&#34;https://hyegar.com/&#34;&gt;https://hyegar.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edward Faulkner &lt;a href=&#34;https://eaf4.com/&#34;&gt;https://eaf4.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elegant Code &lt;a href=&#34;http://elegantcode.com/&#34;&gt;http://elegantcode.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eli Bendersky &lt;a href=&#34;http://eli.thegreenplace.net/&#34;&gt;http://eli.thegreenplace.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eric Elliot &lt;a href=&#34;https://medium.com/javascript-scene/&#34;&gt;https://medium.com/javascript-scene/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eric Lippert &lt;a href=&#34;https://ericlippert.com/&#34;&gt;https://ericlippert.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Erik Runyon &lt;a href=&#34;https://erikrunyon.com/&#34;&gt;https://erikrunyon.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Evan Hahn &lt;a href=&#34;http://evanhahn.com/&#34;&gt;http://evanhahn.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Evan Jones &lt;a href=&#34;http://www.evanjones.ca/chronological.html&#34;&gt;http://www.evanjones.ca/chronological.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Evan Miller &lt;a href=&#34;http://www.evanmiller.org/&#34;&gt;http://www.evanmiller.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Evan Tahler &lt;a href=&#34;https://blog.evantahler.com/&#34;&gt;https://blog.evantahler.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;F individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fabrizio Branca &lt;a href=&#34;http://fbrnc.net/&#34;&gt;http://fbrnc.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Federico Cargnelutti &lt;a href=&#34;https://blog.fedecarg.com/&#34;&gt;https://blog.fedecarg.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Federico Tomassetti &lt;a href=&#34;https://tomassetti.me/&#34;&gt;https://tomassetti.me/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Filippo Valsorda &lt;a href=&#34;https://blog.filippo.io/&#34;&gt;https://blog.filippo.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Freek Van der Herten &lt;a href=&#34;https://murze.be/&#34;&gt;https://murze.be/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;G individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gleb Bahmutov &lt;a href=&#34;https://glebbahmutov.com/blog/&#34;&gt;https://glebbahmutov.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Glenn Engstrand &lt;a href=&#34;http://glennengstrand.info&#34;&gt;http://glennengstrand.info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Graham King &lt;a href=&#34;https://www.darkcoding.net/&#34;&gt;https://www.darkcoding.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grzegorz Gajos &lt;a href=&#34;http://ggajos.com/&#34;&gt;http://ggajos.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Guido van Rossum &lt;a href=&#34;http://neopythonic.blogspot.com/&#34;&gt;http://neopythonic.blogspot.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Guilherme Rodrigues &lt;a href=&#34;https://firstdoit.com/&#34;&gt;https://firstdoit.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;H individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hayden James &lt;a href=&#34;https://haydenjames.io/&#34;&gt;https://haydenjames.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Henrik Lau Eriksson &lt;a href=&#34;https://conductofcode.io/&#34;&gt;https://conductofcode.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Henrik Warne &lt;a href=&#34;https://henrikwarne.com/&#34;&gt;https://henrikwarne.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;High Scalability &lt;a href=&#34;http://highscalability.com/&#34;&gt;http://highscalability.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Huon Wilson &lt;a href=&#34;http://huonw.github.io/&#34;&gt;http://huonw.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hypriot &lt;a href=&#34;http://blog.hypriot.com/&#34;&gt;http://blog.hypriot.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;I individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ian Hummel &lt;a href=&#34;https://themodernlife.github.io/&#34;&gt;https://themodernlife.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ian Sommerville &lt;a href=&#34;http://iansommerville.com/systems-software-and-technology/&#34;&gt;http://iansommerville.com/systems-software-and-technology/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Idontgetoutmuch&#39;s Weblog &lt;a href=&#34;https://idontgetoutmuch.wordpress.com/&#34;&gt;https://idontgetoutmuch.wordpress.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ievgen Kuzminov &lt;a href=&#34;http://stdout.in/&#34;&gt;http://stdout.in/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ilija Eftimov &lt;a href=&#34;http://ieftimov.com/&#34;&gt;http://ieftimov.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ilya Grigorik &lt;a href=&#34;https://www.igvita.com/&#34;&gt;https://www.igvita.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Itamar Turner-Trauring &lt;a href=&#34;https://codewithoutrules.com&#34;&gt;https://codewithoutrules.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ivan Ursul &lt;a href=&#34;https://ivanursul.com/&#34;&gt;https://ivanursul.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;J individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jacopo Tarantino &lt;a href=&#34;https://jack.ofspades.com/&#34;&gt;https://jack.ofspades.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jake Trent &lt;a href=&#34;https://jaketrent.com&#34;&gt;https://jaketrent.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jake Wharton &lt;a href=&#34;http://jakewharton.com/blog&#34;&gt;http://jakewharton.com/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jake Yesbeck &lt;a href=&#34;http://jakeyesbeck.com/&#34;&gt;http://jakeyesbeck.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;James Hague &lt;a href=&#34;http://prog21.dadgum.com/&#34;&gt;http://prog21.dadgum.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;James Long &lt;a href=&#34;http://jlongster.com/archive&#34;&gt;http://jlongster.com/archive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jamis Buck &lt;a href=&#34;http://weblog.jamisbuck.org/&#34;&gt;http://weblog.jamisbuck.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jan Lelis &lt;a href=&#34;https://idiosyncratic-ruby.com/&#34;&gt;https://idiosyncratic-ruby.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jay Fields &lt;a href=&#34;http://blog.jayfields.com&#34;&gt;http://blog.jayfields.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jeff Atwood &lt;a href=&#34;https://blog.codinghorror.com/&#34;&gt;https://blog.codinghorror.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jeff Preshing &lt;a href=&#34;http://preshing.com/&#34;&gt;http://preshing.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jeremy Kun &lt;a href=&#34;https://jeremykun.com/&#34;&gt;https://jeremykun.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jerry Gamblin &lt;a href=&#34;https://jerrygamblin.com/&#34;&gt;https://jerrygamblin.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jesal Gadhia &lt;a href=&#34;https://jes.al/&#34;&gt;https://jes.al/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jessie Frazelle &lt;a href=&#34;https://blog.jessfraz.com/&#34;&gt;https://blog.jessfraz.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jesus Castello &lt;a href=&#34;http://www.blackbytes.info/&#34;&gt;http://www.blackbytes.info/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Joe Armstrong &lt;a href=&#34;https://joearms.github.io/&#34;&gt;https://joearms.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Joe Nelson &lt;a href=&#34;https://begriffs.com/&#34;&gt;https://begriffs.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Joel Spolsky &lt;a href=&#34;https://www.joelonsoftware.com/&#34;&gt;https://www.joelonsoftware.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Johannes Brodwall &lt;a href=&#34;http://johannesbrodwall.com/&#34;&gt;http://johannesbrodwall.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;John Resig &lt;a href=&#34;https://johnresig.com/category/blog/&#34;&gt;https://johnresig.com/category/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;John Wittenauer &lt;a href=&#34;http://www.johnwittenauer.net/&#34;&gt;http://www.johnwittenauer.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jon Kensy &lt;a href=&#34;http://www.jonkensy.com/&#34;&gt;http://www.jonkensy.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jon Skeet &lt;a href=&#34;https://codeblog.jonskeet.uk/&#34;&gt;https://codeblog.jonskeet.uk/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jonas Plum &lt;a href=&#34;https://blog.cugu.eu/&#34;&gt;https://blog.cugu.eu/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jonathan Dekhtiar &lt;a href=&#34;http://www.born2data.com/&#34;&gt;http://www.born2data.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jonathan Snook &lt;a href=&#34;https://snook.ca/&#34;&gt;https://snook.ca/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Josh Haberman &lt;a href=&#34;http://blog.reverberate.org/&#34;&gt;http://blog.reverberate.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Josh Sherman &lt;a href=&#34;https://joshtronic.com/&#34;&gt;https://joshtronic.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Juan Treminio &lt;a href=&#34;https://jtreminio.com&#34;&gt;https://jtreminio.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Julia Evans &lt;a href=&#34;https://jvns.ca/&#34;&gt;https://jvns.ca/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Junior Grossi &lt;a href=&#34;https://blog.jgrossi.com/&#34;&gt;https://blog.jgrossi.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Justin Weiss &lt;a href=&#34;https://www.justinweiss.com/articles/archives/&#34;&gt;https://www.justinweiss.com/articles/archives/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Juri Strumpflohner &lt;a href=&#34;https://juristr.com/blog/&#34;&gt;https://juristr.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;K individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;K. Harrison &lt;a href=&#34;https://useyourloaf.com/&#34;&gt;https://useyourloaf.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kai Hendry &lt;a href=&#34;https://hendry.iki.fi/&#34;&gt;https://hendry.iki.fi/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kevin Burke &lt;a href=&#34;https://kev.inburke.com/&#34;&gt;https://kev.inburke.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kirill Shevchenko &lt;a href=&#34;https://medium.com/@kirill_shevch&#34;&gt;https://medium.com/@kirill_shevch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kyle Kingsbury &lt;a href=&#34;https://aphyr.com/&#34;&gt;https://aphyr.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;L individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lambda the Ultimate &lt;a href=&#34;http://lambda-the-ultimate.org/&#34;&gt;http://lambda-the-ultimate.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Larry Land &lt;a href=&#34;https://lg.io/&#34;&gt;https://lg.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lazarus Lazaridis &lt;a href=&#34;https://iridakos.com&#34;&gt;https://iridakos.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lea Verou &lt;a href=&#34;http://lea.verou.me/&#34;&gt;http://lea.verou.me/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lerner Consulting Blog &lt;a href=&#34;http://blog.lerner.co.il/&#34;&gt;http://blog.lerner.co.il/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Life Plus Linux &lt;a href=&#34;http://lifepluslinux.blogspot.in/&#34;&gt;http://lifepluslinux.blogspot.in/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LiveOverflow &lt;a href=&#34;https://liveoverflow.com/blog/index.html&#34;&gt;https://liveoverflow.com/blog/index.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Luciano Mammino &lt;a href=&#34;https://loige.co/&#34;&gt;https://loige.co/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;M individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manu Sporny &lt;a href=&#34;http://manu.sporny.org/&#34;&gt;http://manu.sporny.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Marc Plano-Lesay &lt;a href=&#34;https://enoent.fr&#34;&gt;https://enoent.fr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Marcelo Rinesi &lt;a href=&#34;https://blog.rinesi.com/&#34;&gt;https://blog.rinesi.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Marco Pivetta &lt;a href=&#34;http://ocramius.github.io/&#34;&gt;http://ocramius.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Marek Majkowski &lt;a href=&#34;https://idea.popcount.org/&#34;&gt;https://idea.popcount.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mark Seaborn &lt;a href=&#34;http://lackingrhoticity.blogspot.de/&#34;&gt;http://lackingrhoticity.blogspot.de/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Martin Fowler &lt;a href=&#34;https://martinfowler.com/&#34;&gt;https://martinfowler.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mary Rose Cook &lt;a href=&#34;https://maryrosecook.com/blog/&#34;&gt;https://maryrosecook.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matt Aimonetti &lt;a href=&#34;https://matt.aimonetti.net/&#34;&gt;https://matt.aimonetti.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matt Cutts &lt;a href=&#34;https://www.mattcutts.com/blog/&#34;&gt;https://www.mattcutts.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matt Might &lt;a href=&#34;http://matt.might.net/articles/&#34;&gt;http://matt.might.net/articles/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matt Warren &lt;a href=&#34;http://mattwarren.org/&#34;&gt;http://mattwarren.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matthew Green &lt;a href=&#34;https://blog.cryptographyengineering.com/&#34;&gt;https://blog.cryptographyengineering.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Michael Crump &lt;a href=&#34;https://michaelcrump.net/&#34;&gt;https://michaelcrump.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Michaël Gallego &lt;a href=&#34;http://www.michaelgallego.fr/articles/&#34;&gt;http://www.michaelgallego.fr/articles/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Michael Herman &lt;a href=&#34;http://mherman.org/&#34;&gt;http://mherman.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Miguel Quinones &lt;a href=&#34;https://www.miqu.me/&#34;&gt;https://www.miqu.me/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mike Ash &lt;a href=&#34;https://www.mikeash.com/pyblog/&#34;&gt;https://www.mikeash.com/pyblog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mike Fogus &lt;a href=&#34;http://blog.fogus.me/&#34;&gt;http://blog.fogus.me/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Milosz Galazka &lt;a href=&#34;https://blog.sleeplessbeastie.eu/&#34;&gt;https://blog.sleeplessbeastie.eu/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Miro Cupak &lt;a href=&#34;https://mirocupak.com/&#34;&gt;https://mirocupak.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Monica Dinculescu &lt;a href=&#34;https://meowni.ca/&#34;&gt;https://meowni.ca/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Monstermuffin &lt;a href=&#34;https://blog.monstermuffin.org/&#34;&gt;https://blog.monstermuffin.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mykhailo Kozik &lt;a href=&#34;http://mishadoff.com/&#34;&gt;http://mishadoff.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;N individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Natasha Murashev &lt;a href=&#34;https://natashatherobot.com&#34;&gt;https://natashatherobot.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nelson Elhage &lt;a href=&#34;https://blog.nelhage.com/&#34;&gt;https://blog.nelhage.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nic Raboy &lt;a href=&#34;https://www.thepolyglotdeveloper.com/blog/&#34;&gt;https://www.thepolyglotdeveloper.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nick Craver &lt;a href=&#34;https://nickcraver.com/blog/&#34;&gt;https://nickcraver.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nick Desaulniers &lt;a href=&#34;https://nickdesaulniers.github.io/&#34;&gt;https://nickdesaulniers.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nick Galbreath &lt;a href=&#34;http://www.client9.com/&#34;&gt;http://www.client9.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nicolas Liochon &lt;a href=&#34;http://blog.thislongrun.com/&#34;&gt;http://blog.thislongrun.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nicolai Parlog (CodeFX) &lt;a href=&#34;http://codefx.org&#34;&gt;http://codefx.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nikola Brežnjak &lt;a href=&#34;http://www.nikola-breznjak.com/blog/&#34;&gt;http://www.nikola-breznjak.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nikolay Nemshilov &lt;a href=&#34;http://nikolay.rocks/&#34;&gt;http://nikolay.rocks/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NSHipster &lt;a href=&#34;http://nshipster.com/&#34;&gt;http://nshipster.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nate Berkopec &lt;a href=&#34;http://www.nateberkopec.com/&#34;&gt;http://www.nateberkopec.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;O individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ofer Zelig &lt;a href=&#34;https://fullstack.info&#34;&gt;https://fullstack.info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ole Begemann &lt;a href=&#34;https://oleb.net/blog/&#34;&gt;https://oleb.net/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Oona Räisänen &lt;a href=&#34;http://www.windytan.com/&#34;&gt;http://www.windytan.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;P individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pamela Fox &lt;a href=&#34;http://blog.pamelafox.org/&#34;&gt;http://blog.pamelafox.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pat Shaughnessy &lt;a href=&#34;http://patshaughnessy.net/&#34;&gt;http://patshaughnessy.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paul Graham &lt;a href=&#34;http://www.paulgraham.com/articles.html&#34;&gt;http://www.paulgraham.com/articles.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paul Irish &lt;a href=&#34;https://www.paulirish.com/&#34;&gt;https://www.paulirish.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paul Lewis &lt;a href=&#34;https://aerotwist.com/blog/&#34;&gt;https://aerotwist.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paweł Chudzik &lt;a href=&#34;https://blog.pchudzik.com/&#34;&gt;https://blog.pchudzik.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Peter Norvig &lt;a href=&#34;http://norvig.com/&#34;&gt;http://norvig.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Peter Steinberger &lt;a href=&#34;http://petersteinberger.com/&#34;&gt;http://petersteinberger.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Peteris Krumins &lt;a href=&#34;http://www.catonmat.net/blog/&#34;&gt;http://www.catonmat.net/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Petr Mitrichev &lt;a href=&#34;http://petr-mitrichev.blogspot.com/&#34;&gt;http://petr-mitrichev.blogspot.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Philip Walton &lt;a href=&#34;https://philipwalton.com/&#34;&gt;https://philipwalton.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Philipp Oppermann &lt;a href=&#34;https://os.phil-opp.com/&#34;&gt;https://os.phil-opp.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pony Foo &lt;a href=&#34;https://ponyfoo.com/&#34;&gt;https://ponyfoo.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Piotr Pasich &lt;a href=&#34;http://piotrpasich.com/&#34;&gt;http://piotrpasich.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Piotr Wittchen &lt;a href=&#34;http://blog.wittchen.biz.pl/&#34;&gt;http://blog.wittchen.biz.pl/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;R individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rachel Kroll &lt;a href=&#34;https://rachelbythebay.com/w/&#34;&gt;https://rachelbythebay.com/w/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Radek Pazdera &lt;a href=&#34;http://radek.io&#34;&gt;http://radek.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Radim Řehůřek &lt;a href=&#34;https://radimrehurek.com/blog/&#34;&gt;https://radimrehurek.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ramon Fried &lt;a href=&#34;https://nativeguru.wordpress.com/&#34;&gt;https://nativeguru.wordpress.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ray Wenderlich &lt;a href=&#34;https://www.raywenderlich.com/&#34;&gt;https://www.raywenderlich.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Raymond Chen &lt;a href=&#34;https://blogs.msdn.microsoft.com/oldnewthing/&#34;&gt;https://blogs.msdn.microsoft.com/oldnewthing/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Raymond Hettinger &lt;a href=&#34;https://rhettinger.wordpress.com/&#34;&gt;https://rhettinger.wordpress.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ReactJS News &lt;a href=&#34;https://reactjsnews.com&#34;&gt;https://reactjsnews.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Real Python &lt;a href=&#34;https://realpython.com/blog/&#34;&gt;https://realpython.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reginald Braithwaite &lt;a href=&#34;http://raganwald.com/#essays&#34;&gt;http://raganwald.com/#essays&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Regular Geek &lt;a href=&#34;http://regulargeek.com/&#34;&gt;http://regulargeek.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rob Allen &lt;a href=&#34;https://akrabat.com/&#34;&gt;https://akrabat.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Robert C. Martin &lt;a href=&#34;http://blog.cleancoder.com/&#34;&gt;http://blog.cleancoder.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Robin Ward &lt;a href=&#34;https://eviltrout.com/&#34;&gt;https://eviltrout.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Robin Wilson &lt;a href=&#34;http://blog.rtwilson.com/&#34;&gt;http://blog.rtwilson.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rudy Huyn &lt;a href=&#34;http://www.rudyhuyn.com/blog/&#34;&gt;http://www.rudyhuyn.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rudolf Olah &lt;a href=&#34;https://neverfriday.com/blog/&#34;&gt;https://neverfriday.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruslan Spivak &lt;a href=&#34;https://ruslanspivak.com/&#34;&gt;https://ruslanspivak.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;S individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sakib Sami &lt;a href=&#34;https://www.sakib.ninja&#34;&gt;https://www.sakib.ninja&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sam Saffron &lt;a href=&#34;https://samsaffron.com/&#34;&gt;https://samsaffron.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sergey Zhuk &lt;a href=&#34;http://sergeyzhuk.me/&#34;&gt;http://sergeyzhuk.me/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Schakko &lt;a href=&#34;https://schakko.de&#34;&gt;https://schakko.de&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scott Hanselman &lt;a href=&#34;http://www.hanselman.com/blog/&#34;&gt;http://www.hanselman.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scott Johnson &lt;a href=&#34;http://www.fuzzyblog.io/blog/&#34;&gt;http://www.fuzzyblog.io/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simon Reimler &lt;a href=&#34;https://devdactic.com/devblog/&#34;&gt;https://devdactic.com/devblog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Srinivas Tamada &lt;a href=&#34;https://www.9lessons.info/&#34;&gt;https://www.9lessons.info/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stack Abuse &lt;a href=&#34;http://www.stackabuse.com/&#34;&gt;http://www.stackabuse.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stanko Tadić &lt;a href=&#34;https://muffinman.io&#34;&gt;https://muffinman.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stefan Parker &lt;a href=&#34;http://codebeforethehorse.tumblr.com/&#34;&gt;http://codebeforethehorse.tumblr.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stephen Colebourne &lt;a href=&#34;http://blog.joda.org/&#34;&gt;http://blog.joda.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Steve Bellovin &lt;a href=&#34;https://www.cs.columbia.edu/~smb/blog/control/&#34;&gt;https://www.cs.columbia.edu/~smb/blog/control/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Steve Yegge &lt;a href=&#34;https://steve-yegge.blogspot.com/&#34;&gt;https://steve-yegge.blogspot.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sudhagar &lt;a href=&#34;http://sudhagar.com/&#34;&gt;http://sudhagar.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swizec Teller &lt;a href=&#34;https://swizec.com/blog/&#34;&gt;https://swizec.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;T individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tania Rascia &lt;a href=&#34;https://tania.dev/&#34;&gt;https://tania.dev/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tero Parviainen &lt;a href=&#34;http://teropa.info/&#34;&gt;http://teropa.info/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;That Thing In Swift &lt;a href=&#34;https://thatthinginswift.com/&#34;&gt;https://thatthinginswift.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Coded Self &lt;a href=&#34;http://www.thecodedself.com&#34;&gt;http://www.thecodedself.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Daily WTF &lt;a href=&#34;http://thedailywtf.com/&#34;&gt;http://thedailywtf.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Thomas Young &lt;a href=&#34;http://upcoder.com&#34;&gt;http://upcoder.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tikhon Jelvis &lt;a href=&#34;http://jelv.is/blog/&#34;&gt;http://jelv.is/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Todd Motto &lt;a href=&#34;https://toddmotto.com/&#34;&gt;https://toddmotto.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;T.J. Maher &lt;a href=&#34;http://adventuresinautomation.blogspot.com/&#34;&gt;http://adventuresinautomation.blogspot.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;U individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Una Kravets &lt;a href=&#34;https://una.im/&#34;&gt;https://una.im/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Undocumented Matlab &lt;a href=&#34;http://undocumentedmatlab.com/&#34;&gt;http://undocumentedmatlab.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;V individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vanilla Java &lt;a href=&#34;http://vanillajava.blogspot.com/&#34;&gt;http://vanillajava.blogspot.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vlad Mihalcea &lt;a href=&#34;https://vladmihalcea.com/&#34;&gt;https://vladmihalcea.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;W individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wilfred Hughes &lt;a href=&#34;http://www.wilfred.me.uk/&#34;&gt;http://www.wilfred.me.uk/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;William Kennedy &lt;a href=&#34;https://www.goinggo.net/&#34;&gt;https://www.goinggo.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wojtek Gawroński &lt;a href=&#34;http://www.afronski.pl/&#34;&gt;http://www.afronski.pl/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Y individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Yegor Bugayenko &lt;a href=&#34;http://www.yegor256.com/&#34;&gt;http://www.yegor256.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Yifan Lu &lt;a href=&#34;http://yifan.lu/&#34;&gt;http://yifan.lu/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Z individuals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zach Holman &lt;a href=&#34;https://zachholman.com/&#34;&gt;https://zachholman.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zolmeister &lt;a href=&#34;https://zolmeister.com/&#34;&gt;https://zolmeister.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Products/Technologies&lt;/h3&gt; &#xA;&lt;h4&gt;A technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android &lt;a href=&#34;https://android-developers.blogspot.com/&#34;&gt;https://android-developers.blogspot.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Atom.io &lt;a href=&#34;http://blog.atom.io/&#34;&gt;http://blog.atom.io/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;B technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bootstrap.com &lt;a href=&#34;https://blog.getbootstrap.com/&#34;&gt;https://blog.getbootstrap.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;C technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Crystal &lt;a href=&#34;https://crystal-lang.org/&#34;&gt;https://crystal-lang.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;G technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go &lt;a href=&#34;https://blog.golang.org/&#34;&gt;https://blog.golang.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;I technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IPFS &lt;a href=&#34;https://ipfs.io/blog/&#34;&gt;https://ipfs.io/blog/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;J technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;jOOQ &lt;a href=&#34;https://blog.jooq.org/&#34;&gt;https://blog.jooq.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;K technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Klipse &lt;a href=&#34;http://blog.klipse.tech/&#34;&gt;http://blog.klipse.tech/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kotlin &lt;a href=&#34;https://blog.jetbrains.com/kotlin/&#34;&gt;https://blog.jetbrains.com/kotlin/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;L technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Laravel &lt;a href=&#34;https://laravel-news.com/blog/&#34;&gt;https://laravel-news.com/blog/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;M technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft Edge &lt;a href=&#34;https://blogs.windows.com/msedgedev/&#34;&gt;https://blogs.windows.com/msedgedev/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;N technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/&#34;&gt;https://blogs.msdn.microsoft.com/dotnet/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;R technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React &lt;a href=&#34;https://reactjs.org/blog/&#34;&gt;https://reactjs.org/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;React Native &lt;a href=&#34;http://facebook.github.io/react-native/blog/&#34;&gt;http://facebook.github.io/react-native/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Red &lt;a href=&#34;http://www.red-lang.org&#34;&gt;http://www.red-lang.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RocksDB &lt;a href=&#34;http://rocksdb.org/blog&#34;&gt;http://rocksdb.org/blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust &lt;a href=&#34;https://blog.rust-lang.org/&#34;&gt;https://blog.rust-lang.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;S technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sketch &lt;a href=&#34;https://blog.sketchapp.com/&#34;&gt;https://blog.sketchapp.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swift &lt;a href=&#34;https://developer.apple.com/swift/blog/&#34;&gt;https://developer.apple.com/swift/blog/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;V technologies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertabelo &lt;a href=&#34;http://www.vertabelo.com/blog&#34;&gt;http://www.vertabelo.com/blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;RSS feeds&lt;/h1&gt; &#xA;&lt;p&gt;You can find an opml file to import rss feeds here: &lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/engineering_blogs.opml&#34;&gt;engineering_blogs.opml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions welcome! Read the &lt;a href=&#34;https://raw.githubusercontent.com/kilimchoi/engineering-blogs/master/contributing.md&#34;&gt;contribution guidelines&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Licensed under a &lt;a rel=&#34;license&#34; href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>forem/forem</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/forem/forem</id>
    <link href="https://github.com/forem/forem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;For empowering community 🌱&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;h1&gt;Forem 🌱&lt;/h1&gt; &#xA; &lt;strong&gt;For Empowering Community&lt;/strong&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://app.travis-ci.com/github/forem/forem&#34;&gt; &lt;img src=&#34;https://api.travis-ci.com/forem/forem.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/w/forem/forem&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;a href=&#34;https://github.com/forem/forem/issues?q=is%3Aissue+is%3Aopen+label%3A%22ready+for+dev%22&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/forem/forem/ready for dev&#34; alt=&#34;GitHub issues ready for dev&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/forem/forem&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/setup-automated-blue?logo=gitpod&#34; alt=&#34;GitPod badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Welcome to the &lt;a href=&#34;https://forem.com&#34;&gt;Forem&lt;/a&gt; codebase, the platform that powers &lt;a href=&#34;https://dev.to&#34;&gt;dev.to&lt;/a&gt;. We are so excited to have you. With your help, we can build out Forem’s usability, scalability, and stability to better serve our communities.&lt;/p&gt; &#xA;&lt;h2&gt;What is Forem?&lt;/h2&gt; &#xA;&lt;p&gt;Forem is open source software for building communities. Communities for your peers, customers, fanbases, families, friends, and any other time and space where people need to come together to be part of a collective. &lt;a href=&#34;https://dev.to/devteam/for-empowering-community-2k6h&#34;&gt;See our announcement post&lt;/a&gt; for a high-level overview of what Forem is.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.to&#34;&gt;dev.to&lt;/a&gt; (or just DEV) is hosted by Forem. It is a community of software developers who write articles, take part in discussions, and build their professional profiles. We value supportive and constructive dialogue in the pursuit of great code and career growth for all members. The ecosystem spans from beginner to advanced developers, and all are welcome to find their place within our community. ❤️&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#what-is-forem&#34;&gt;What is Forem?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#local&#34;&gt;Local&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#containers&#34;&gt;Containers&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#installation-documentation&#34;&gt;Installation Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#developer-documentation&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#core-team&#34;&gt;Core team&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#vulnerability-disclosure&#34;&gt;Vulnerability disclosure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;For a place to have open discussions on features, voice your ideas, or get help with general questions please visit our community at &lt;a href=&#34;https://forem.dev/&#34;&gt;forem.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to contribute to Forem! Please check out the &lt;a href=&#34;https://developers.forem.com/contributing-guide/forem&#34;&gt;Contributing to Forem guide&lt;/a&gt; for guidelines about how to proceed.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This section provides a high-level quick start guide. If you&#39;re looking for a more thorough installation guide (for example &lt;a href=&#34;https://developers.forem.com/getting-started/installation/mac&#34;&gt;with macOS&lt;/a&gt;, you&#39;ll want to refer to our complete &lt;a href=&#34;https://developers.forem.com/&#34;&gt;Developer Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We run on a &lt;a href=&#34;https://rubyonrails.org/&#34;&gt;Rails&lt;/a&gt; backend, and we are currently transitioning to a &lt;a href=&#34;https://preactjs.com/&#34;&gt;Preact&lt;/a&gt;-first frontend.&lt;/p&gt; &#xA;&lt;p&gt;A more complete overview of our stack is available in &lt;a href=&#34;https://developers.forem.com/technical-overview/stack&#34;&gt;our docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To &lt;strong&gt;launch Forem in Gitpod&lt;/strong&gt;, navigate to &lt;a href=&#34;https://gitpod.io/#https://github.com/%7Byour_github_username%7D/forem&#34;&gt;https://gitpod.io/#https://github.com/{your_github_username}/forem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;Local&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;Ruby&lt;/a&gt;: we recommend using &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; to install the Ruby version listed on the badge.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt; 1.x: please refer to their &lt;a href=&#34;https://classic.yarnpkg.com/en/docs/install&#34;&gt;installation guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; 11 or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://imagemagick.org/&#34;&gt;ImageMagick&lt;/a&gt;: please refer to ImageMagick&#39;s &lt;a href=&#34;https://imagemagick.org/script/download.php&#34;&gt;installation instructions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; 4 or higher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Containers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containers/libpod&#34;&gt;Podman&lt;/a&gt; 1.9.2 or higher&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containers/podman-compose&#34;&gt;Podman Compose&lt;/a&gt; 0.1.5 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;OS X&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;Docker Desktop for Mac&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Please see our installation guides, such as the &lt;a href=&#34;https://developers.forem.com/getting-started/installation/mac&#34;&gt;one for macOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developer Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.forem.com&#34;&gt;Check out our dedicated docs page for more technical documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Core team&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/ben&#34;&gt;@benhalpern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/jess&#34;&gt;@jessleenyc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/peter&#34;&gt;@peterkimfrank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/maestromac&#34;&gt;@maestromac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/andy&#34;&gt;@zhao-andy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/lightalloy&#34;&gt;@lightalloy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.to/joshpuetz&#34;&gt;@joshpuetz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/juliannatetreault&#34;&gt;@juliannatetreault&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/ridhwana&#34;&gt;@ridhwana&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/fdoxyz&#34;&gt;@fdoxyz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/msarit&#34;&gt;@msarit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/jdoss&#34;&gt;@jdoss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/coffeecraftcode&#34;&gt;@cmgorton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/andygeorge&#34;&gt;@andygeorge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/phannon716&#34;&gt;@phannon716&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/s_aitchison&#34;&gt;@s_aitchison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/rt4914&#34;&gt;@rt4914&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/jeremyf&#34;&gt;@jeremyf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/dscottS3&#34;&gt;@dscottS3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/asheren&#34;&gt;@asheren&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Vulnerability disclosure&lt;/h2&gt; &#xA;&lt;p&gt;Forem is the open source software which powers &lt;a href=&#34;https://dev.to&#34;&gt;DEV&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We welcome security research on DEV under the terms of our &lt;a href=&#34;https://dev.to/security&#34;&gt;vulnerability disclosure policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to the &lt;a href=&#34;https://github.com/twitter/twemoji&#34;&gt;Twemoji project&lt;/a&gt; for the usage of their emojis.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; file in our repository for the full text.&lt;/p&gt; &#xA;&lt;p&gt;Like many open source projects, we require that contributors provide us with a Contributor License Agreement (CLA). By submitting code to the Forem project, you are granting us a right to use that code under the terms of the CLA.&lt;/p&gt; &#xA;&lt;p&gt;Our version of the CLA was adapted from the Microsoft Contributor License Agreement, which they generously made available to the public domain under Creative Commons CC0 1.0 Universal.&lt;/p&gt; &#xA;&lt;p&gt;Any questions, please refer to our &lt;a href=&#34;https://developers.forem.com/licensing/&#34;&gt;license FAQ&lt;/a&gt; doc or email &lt;a href=&#34;mailto:yo@dev.to&#34;&gt;yo@dev.to&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Sloan, the sloth mascot&#34; width=&#34;250px&#34; src=&#34;https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/31047/af153cd6-9994-4a68-83f4-8ddf3e13f0bf.jpg&#34;&gt; &lt;br&gt; &lt;strong&gt;Happy Coding&lt;/strong&gt; ❤️ &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#Table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mileszs/wicked_pdf</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/mileszs/wicked_pdf</id>
    <link href="https://github.com/mileszs/wicked_pdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PDF generator (from HTML) plugin for Ruby on Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wicked PDF &lt;a href=&#34;http://badge.fury.io/rb/wicked_pdf&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/wicked_pdf.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mileszs/wicked_pdf/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/mileszs/wicked_pdf/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/mileszs/wicked_pdf&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/mileszs/wicked_pdf/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/mileszs/wicked_pdf&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/mileszs/wicked_pdf/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;A PDF generation plugin for Ruby on Rails&lt;/h2&gt; &#xA;&lt;p&gt;Wicked PDF uses the shell utility &lt;a href=&#34;http://wkhtmltopdf.org&#34;&gt;wkhtmltopdf&lt;/a&gt; to serve a PDF file to a user from HTML. In other words, rather than dealing with a PDF generation DSL of some sort, you simply write an HTML view as you would normally, then let Wicked PDF take care of the hard stuff.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Wicked PDF has been verified to work on Ruby versions 2.2 through 2.6; Rails 4 through 6.1&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Add this to your Gemfile and run &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;wicked_pdf&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create the initializer with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails generate wicked_pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also need to add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Mime::Type.register &#34;application/pdf&#34;, :pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to &lt;code&gt;config/initializers/mime_types.rb&lt;/code&gt; in older versions of Rails.&lt;/p&gt; &#xA;&lt;p&gt;Because &lt;code&gt;wicked_pdf&lt;/code&gt; is a wrapper for &lt;a href=&#34;http://wkhtmltopdf.org/&#34;&gt;wkhtmltopdf&lt;/a&gt;, you&#39;ll need to install that, too.&lt;/p&gt; &#xA;&lt;p&gt;The simplest way to install all of the binaries on most Linux or OSX systems is through the gem &lt;a href=&#34;https://github.com/zakird/wkhtmltopdf_binary_gem&#34;&gt;wkhtmltopdf-binary&lt;/a&gt;. Builds for other systems are available &lt;a href=&#34;https://wkhtmltopdf.org/downloads.html&#34;&gt;here&lt;/a&gt; To install that gem, add this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;wkhtmltopdf-binary&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To your Gemfile and run &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This gem currently installs version 0.12.x of &lt;code&gt;wkhtmltopdf&lt;/code&gt;. Some of the options listed below are specific 0.9 or below, and others are for 0.12 and up.&lt;/p&gt; &#xA;&lt;p&gt;You can see what flags are supported for the current version in &lt;a href=&#34;https://wkhtmltopdf.org/usage/wkhtmltopdf.txt&#34;&gt;wkhtmltopdf&#39;s auto-generated manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your wkhtmltopdf executable is not on your webserver&#39;s path, you can configure it in an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;WickedPdf.config = {&#xA;  exe_path: &#39;/usr/local/bin/wkhtmltopdf&#39;,&#xA;  enable_local_file_access: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about &lt;code&gt;wkhtmltopdf&lt;/code&gt;, see the project&#39;s &lt;a href=&#34;http://wkhtmltopdf.org/&#34;&gt;homepage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ThingsController &amp;lt; ApplicationController&#xA;  def show&#xA;    respond_to do |format|&#xA;      format.html&#xA;      format.pdf do&#xA;        render pdf: &#34;file_name&#34;   # Excluding &#34;.pdf&#34; extension.&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage Conditions - Important!&lt;/h3&gt; &#xA;&lt;p&gt;The wkhtmltopdf binary is run outside of your Rails application; therefore, your normal layouts will not work. If you plan to use any CSS, JavaScript, or image files, you must modify your layout so that you provide an absolute reference to these files. The best option for Rails without the asset pipeline is to use the &lt;code&gt;wicked_pdf_stylesheet_link_tag&lt;/code&gt;, &lt;code&gt;wicked_pdf_image_tag&lt;/code&gt;, and &lt;code&gt;wicked_pdf_javascript_include_tag&lt;/code&gt; helpers or to go straight to a CDN (Content Delivery Network) for popular libraries such as jQuery.&lt;/p&gt; &#xA;&lt;h4&gt;wicked_pdf helpers&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;meta charset=&#39;utf-8&#39; /&amp;gt;&#xA;    &amp;lt;%= wicked_pdf_stylesheet_link_tag &#34;pdf&#34; -%&amp;gt;&#xA;    &amp;lt;%= wicked_pdf_javascript_include_tag &#34;number_pages&#34; %&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body onload=&#39;number_pages&#39;&amp;gt;&#xA;    &amp;lt;div id=&#34;header&#34;&amp;gt;&#xA;      &amp;lt;%= wicked_pdf_image_tag &#39;mysite.jpg&#39; %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div id=&#34;content&#34;&amp;gt;&#xA;      &amp;lt;%= yield %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using wicked_pdf_helpers with asset pipeline raises &lt;code&gt;Asset names passed to helpers should not include the &#34;/assets/&#34; prefix.&lt;/code&gt; error. To work around this, you can use &lt;code&gt;wicked_pdf_asset_base64&lt;/code&gt; with the normal Rails helpers, but be aware that this will base64 encode your content and inline it in the page. This is very quick for small assets, but large ones can take a long time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;meta charset=&#39;utf-8&#39; /&amp;gt;&#xA;    &amp;lt;%= stylesheet_link_tag wicked_pdf_asset_base64(&#34;pdf&#34;) %&amp;gt;&#xA;    &amp;lt;%= javascript_include_tag wicked_pdf_asset_base64(&#34;number_pages&#34;) %&amp;gt;&#xA;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body onload=&#39;number_pages&#39;&amp;gt;&#xA;    &amp;lt;div id=&#34;header&#34;&amp;gt;&#xA;      &amp;lt;%= image_tag wicked_pdf_asset_base64(&#39;mysite.jpg&#39;) %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div id=&#34;content&#34;&amp;gt;&#xA;      &amp;lt;%= yield %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Webpacker usage&lt;/h4&gt; &#xA;&lt;p&gt;wicked_pdf supports webpack assets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;wicked_pdf_stylesheet_pack_tag&lt;/code&gt; for stylesheets&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;wicked_pdf_javascript_pack_tag&lt;/code&gt; for javascripts&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;wicked_pdf_asset_pack_path&lt;/code&gt; to access an asset directly, for example: &lt;code&gt;image_tag wicked_pdf_asset_pack_path(&#34;media/images/foobar.png&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Asset pipeline usage&lt;/h4&gt; &#xA;&lt;p&gt;It is best to precompile assets used in PDF views. This will help avoid issues when it comes to deploying, as Rails serves asset files differently between development and production (&lt;code&gt;config.assets.compile = false&lt;/code&gt;), which can make it look like your PDFs work in development, but fail to load assets in production.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;config.assets.precompile += [&#39;blueprint/screen.css&#39;, &#39;pdf.css&#39;, &#39;jquery.ui.datepicker.js&#39;, &#39;pdf.js&#39;, ...etc...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CDN reference&lt;/h4&gt; &#xA;&lt;p&gt;In this case, you can use that standard Rails helpers and point to the current CDN for whichever framework you are using. For jQuery, it would look somethng like this, given the current versions at the time of this writing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;%= javascript_include_tag &#34;http://code.jquery.com/jquery-1.10.0.min.js&#34; %&amp;gt;&#xA;    &amp;lt;%= javascript_include_tag &#34;http://code.jquery.com/ui/1.10.3/jquery-ui.min.js&#34; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced Usage with all available options&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: Certain options are only supported in specific versions of wkhtmltopdf.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ThingsController &amp;lt; ApplicationController&#xA;  def show&#xA;    respond_to do |format|&#xA;      format.html&#xA;      format.pdf do&#xA;        render pdf:                            &#39;file_name&#39;,&#xA;               disposition:                    &#39;attachment&#39;,                 # default &#39;inline&#39;&#xA;               template:                       &#39;things/show&#39;,&#xA;               locals:                         {foo: @bar},&#xA;               file:                           &#34;#{Rails.root}/files/foo.erb&#34;,&#xA;               inline:                         &#39;&amp;lt;!doctype html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;INLINE HTML&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;,&#xA;               layout:                         &#39;pdf&#39;,                        # for a pdf.pdf.erb file&#xA;               wkhtmltopdf:                    &#39;/usr/local/bin/wkhtmltopdf&#39;, # path to binary&#xA;               show_as_html:                   params.key?(&#39;debug&#39;),         # allow debugging based on url param&#xA;               orientation:                    &#39;Landscape&#39;,                  # default Portrait&#xA;               page_size:                      &#39;A4, Letter, ...&#39;,            # default A4&#xA;               page_height:                    NUMBER,&#xA;               page_width:                     NUMBER,&#xA;               save_to_file:                   Rails.root.join(&#39;pdfs&#39;, &#34;#{filename}.pdf&#34;),&#xA;               save_only:                      false,                        # depends on :save_to_file being set first&#xA;               default_protocol:               &#39;http&#39;,&#xA;               proxy:                          &#39;TEXT&#39;,&#xA;               basic_auth:                     false                         # when true username &amp;amp; password are automatically sent from session&#xA;               username:                       &#39;TEXT&#39;,&#xA;               password:                       &#39;TEXT&#39;,&#xA;               title:                          &#39;Alternate Title&#39;,            # otherwise first page title is used&#xA;               cover:                          &#39;URL, Pathname, or raw HTML string&#39;,&#xA;               dpi:                            &#39;dpi&#39;,&#xA;               encoding:                       &#39;TEXT&#39;,&#xA;               user_style_sheet:               &#39;URL&#39;,&#xA;               cookie:                         [&#39;_session_id SESSION_ID&#39;], # could be an array or a single string in a &#39;name value&#39; format&#xA;               post:                           [&#39;query QUERY_PARAM&#39;],      # could be an array or a single string in a &#39;name value&#39; format&#xA;               redirect_delay:                 NUMBER,&#xA;               javascript_delay:               NUMBER,&#xA;               window_status:                  &#39;TEXT&#39;,                     # wait to render until some JS sets window.status to the given string&#xA;               image_quality:                  NUMBER,&#xA;               no_pdf_compression:             true,&#xA;               zoom:                           FLOAT,&#xA;               page_offset:                    NUMBER,&#xA;               book:                           true,&#xA;               default_header:                 true,&#xA;               disable_javascript:             false,&#xA;               grayscale:                      true,&#xA;               lowquality:                     true,&#xA;               enable_plugins:                 true,&#xA;               disable_internal_links:         true,&#xA;               disable_external_links:         true,&#xA;               keep_relative_links:            true,&#xA;               print_media_type:               true,&#xA;&#xA;               # define as true the key &#39;disable_local_file_access&#39; or &#39;enable_local_file_access&#39;, not both&#xA;               disable_local_file_access:      true,&#xA;               enable_local_file_access:       false,                     # must be true when using wkhtmltopdf &amp;gt; 0.12.6&#xA;&#xA;               disable_smart_shrinking:        true,&#xA;               use_xserver:                    true,&#xA;               background:                     false,                     # background needs to be true to enable background colors to render&#xA;               no_background:                  true,&#xA;               no_stop_slow_scripts:           false,&#xA;               viewport_size:                  &#39;TEXT&#39;,                    # available only with use_xserver or patched QT&#xA;               extra:                          &#39;&#39;,                        # directly inserted into the command to wkhtmltopdf&#xA;               raise_on_all_errors:            nil,                       # raise error for any stderr output.  Such as missing media, image assets&#xA;               log_level:                      &#39;info&#39;,                    # Available values: none, error, warn, or info - only available with wkhtmltopdf 0.12.5+&#xA;               quiet:                          false,                     # `false` is same as `log_level: &#39;info&#39;`, `true` is same as `log_level: &#39;none&#39;`&#xA;               outline: {   outline:           true,&#xA;                            outline_depth:     LEVEL },&#xA;               margin:  {   top:               SIZE,                     # default 10 (mm)&#xA;                            bottom:            SIZE,&#xA;                            left:              SIZE,&#xA;                            right:             SIZE },&#xA;               header:  {   html: {            template: &#39;users/header&#39;,          # use :template OR :url&#xA;                                               layout:   &#39;pdf_plain&#39;,             # optional, use &#39;pdf_plain&#39; for a pdf_plain.html.pdf.erb file, defaults to main layout&#xA;                                               url:      &#39;www.example.com&#39;,&#xA;                                               locals:   { foo: @bar }},&#xA;                            center:            &#39;TEXT&#39;,&#xA;                            font_name:         &#39;NAME&#39;,&#xA;                            font_size:         SIZE,&#xA;                            left:              &#39;TEXT&#39;,&#xA;                            right:             &#39;TEXT&#39;,&#xA;                            spacing:           REAL,&#xA;                            line:              true,&#xA;                            content:           &#39;HTML CONTENT ALREADY RENDERED&#39;}, # optionally you can pass plain html already rendered (useful if using pdf_from_string)&#xA;               footer:  {   html: {   template:&#39;shared/footer&#39;,         # use :template OR :url&#xA;                                      layout:  &#39;pdf_plain.html&#39;,        # optional, use &#39;pdf_plain&#39; for a pdf_plain.html.pdf.erb file, defaults to main layout&#xA;                                      url:     &#39;www.example.com&#39;,&#xA;                                      locals:  { foo: @bar }},&#xA;                            center:            &#39;TEXT&#39;,&#xA;                            font_name:         &#39;NAME&#39;,&#xA;                            font_size:         SIZE,&#xA;                            left:              &#39;TEXT&#39;,&#xA;                            right:             &#39;TEXT&#39;,&#xA;                            spacing:           REAL,&#xA;                            line:              true,&#xA;                            content:           &#39;HTML CONTENT ALREADY RENDERED&#39;}, # optionally you can pass plain html already rendered (useful if using pdf_from_string)&#xA;               toc:     {   font_name:         &#34;NAME&#34;,&#xA;                            depth:             LEVEL,&#xA;                            header_text:       &#34;TEXT&#34;,&#xA;                            header_fs:         SIZE,&#xA;                            text_size_shrink:  0.8,&#xA;                            l1_font_size:      SIZE,&#xA;                            l2_font_size:      SIZE,&#xA;                            l3_font_size:      SIZE,&#xA;                            l4_font_size:      SIZE,&#xA;                            l5_font_size:      SIZE,&#xA;                            l6_font_size:      SIZE,&#xA;                            l7_font_size:      SIZE,&#xA;                            level_indentation: NUM,&#xA;                            l1_indentation:    NUM,&#xA;                            l2_indentation:    NUM,&#xA;                            l3_indentation:    NUM,&#xA;                            l4_indentation:    NUM,&#xA;                            l5_indentation:    NUM,&#xA;                            l6_indentation:    NUM,&#xA;                            l7_indentation:    NUM,&#xA;                            no_dots:           true,&#xA;                            disable_dotted_lines:  true,&#xA;                            disable_links:     true,&#xA;                            disable_toc_links: true,&#xA;                            disable_back_links:true,&#xA;                            xsl_style_sheet:   &#39;file.xsl&#39;}, # optional XSLT stylesheet to use for styling table of contents&#xA;               progress: proc { |output| puts output } # proc called when console output changes&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, it will render without a layout (layout: false) and the template for the current controller and action.&lt;/p&gt; &#xA;&lt;h4&gt;wkhtmltopdf Binary Options&lt;/h4&gt; &#xA;&lt;p&gt;Some of the options above are being passed to &lt;code&gt;wkhtmltopdf&lt;/code&gt; binary. They can be used to control the options used in Webkit rendering before generating the PDF.&lt;/p&gt; &#xA;&lt;p&gt;Examples of those options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;print_media_type: true        # Passes `--print-media-type`&#xA;no_background: true           # Passes `--no-background`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see the complete list of options under &#34;Global Options&#34; in wkhtmltopdf usage &lt;a href=&#34;http://wkhtmltopdf.org/usage/wkhtmltopdf.txt&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Super Advanced Usage&lt;/h3&gt; &#xA;&lt;p&gt;If you need to just create a pdf and not display it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# create a pdf from a string&#xA;pdf = WickedPdf.new.pdf_from_string(&#39;&amp;lt;h1&amp;gt;Hello There!&amp;lt;/h1&amp;gt;&#39;)&#xA;&#xA;# create a pdf file from a html file without converting it to string&#xA;# Path must be absolute path&#xA;pdf = WickedPdf.new.pdf_from_html_file(&#39;/your/absolute/path/here&#39;)&#xA;&#xA;# create a pdf from a URL&#xA;pdf = WickedPdf.new.pdf_from_url(&#39;https://github.com/mileszs/wicked_pdf&#39;)&#xA;&#xA;# create a pdf from string using templates, layouts and content option for header or footer&#xA;pdf = WickedPdf.new.pdf_from_string(&#xA;  render_to_string(&#39;templates/pdf&#39;, layout: &#39;pdfs/layout_pdf.html&#39;),&#xA;  footer: {&#xA;    content: render_to_string(&#xA;  &#x9;&#x9;&#39;templates/footer&#39;,&#xA;  &#x9;&#x9;layout: &#39;pdfs/layout_pdf.html&#39;&#xA;  &#x9;)&#xA;  }&#xA;)&#xA;&#xA;# It is possible to use footer/header templates without a layout, in that case you need to provide a valid HTML document&#xA;pdf = WickedPdf.new.pdf_from_string(&#xA;  render_to_string(&#39;templates/full_pdf_template&#39;),&#xA;  header: {&#xA;    content: render_to_string(&#39;templates/full_header_template&#39;)&#xA;  }&#xA;)&#xA;&#xA;# or from your controller, using views &amp;amp; templates and all wicked_pdf options as normal&#xA;pdf = render_to_string pdf: &#34;some_file_name&#34;, template: &#34;templates/pdf&#34;, encoding: &#34;UTF-8&#34;&#xA;&#xA;# then save to a file&#xA;save_path = Rails.root.join(&#39;pdfs&#39;,&#39;filename.pdf&#39;)&#xA;File.open(save_path, &#39;wb&#39;) do |file|&#xA;  file &amp;lt;&amp;lt; pdf&#xA;end&#xA;&#xA;# you can also track progress on your PDF generation, such as when using it from within a Resque job&#xA;class PdfJob&#xA;  def perform&#xA;    blk = proc { |output|&#xA;      match = output.match(/\[.+\] Page (?&amp;lt;current_page&amp;gt;\d+) of (?&amp;lt;total_pages&amp;gt;\d+)/)&#xA;      if match&#xA;        current_page = match[:current_page].to_i&#xA;        total_pages = match[:total_pages].to_i&#xA;        message = &#34;Generated #{current_page} of #{total_pages} pages&#34;&#xA;        at current_page, total_pages, message&#xA;      end&#xA;    }&#xA;    WickedPdf.new.pdf_from_string(html, progress: blk)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to display utf encoded characters, add this to your pdf views or layouts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta charset=&#34;utf-8&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to return a PDF in a controller with Rails in API mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pdf_html = ActionController::Base.new.render_to_string(template: &#39;controller_name/action_name&#39;, layout: &#39;pdf&#39;)&#xA;pdf = WickedPdf.new.pdf_from_string(pdf_html)&#xA;send_data pdf, filename: &#39;file.pdf&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Page Breaks&lt;/h3&gt; &#xA;&lt;p&gt;You can control page breaks with CSS.&lt;/p&gt; &#xA;&lt;p&gt;Add a few styles like this to your stylesheet or page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div.alwaysbreak { page-break-before: always; }&#xA;div.nobreak:before { clear:both; }&#xA;div.nobreak { page-break-inside: avoid; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Page Numbering&lt;/h3&gt; &#xA;&lt;p&gt;A bit of javascript can help you number your pages. Create a template or header/footer file with this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;script&amp;gt;&#xA;      function number_pages() {&#xA;        var vars={};&#xA;        var x=document.location.search.substring(1).split(&#39;&amp;amp;&#39;);&#xA;        for(var i in x) {var z=x[i].split(&#39;=&#39;,2);vars[z[0]] = decodeURIComponent(z[1]);}&#xA;        var x=[&#39;frompage&#39;,&#39;topage&#39;,&#39;page&#39;,&#39;webpage&#39;,&#39;section&#39;,&#39;subsection&#39;,&#39;subsubsection&#39;];&#xA;        for(var i in x) {&#xA;          var y = document.getElementsByClassName(x[i]);&#xA;          for(var j=0; j&amp;lt;y.length; ++j) y[j].textContent = vars[x[i]];&#xA;        }&#xA;      }&#xA;    &amp;lt;/script&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body onload=&#34;number_pages()&#34;&amp;gt;&#xA;    Page &amp;lt;span class=&#34;page&#34;&amp;gt;&amp;lt;/span&amp;gt; of &amp;lt;span class=&#34;topage&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anything with a class listed in &#34;var x&#34; above will be auto-filled at render time.&lt;/p&gt; &#xA;&lt;p&gt;If you do not have explicit page breaks (and therefore do not have any &#34;page&#34; class), you can also use wkhtmltopdf&#39;s built in page number generation by setting one of the headers to &#34;[page]&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;render pdf: &#39;filename&#39;, header: { right: &#39;[page] of [topage]&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can put your default configuration, applied to all pdf&#39;s at &#34;wicked_pdf.rb&#34; initializer.&lt;/p&gt; &#xA;&lt;h3&gt;Rack Middleware&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to have WickedPdf automatically generate PDF views for all (or nearly all) pages by appending .pdf to the URL, add the following to your Rails app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in application.rb (Rails3) or environment.rb (Rails2)&#xA;require &#39;wicked_pdf&#39;&#xA;config.middleware.use WickedPdf::Middleware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to turn on or off the middleware for certain URLs, use the &lt;code&gt;:only&lt;/code&gt; or &lt;code&gt;:except&lt;/code&gt; conditions like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# conditions can be plain strings or regular expressions, and you can supply only one or an array&#xA;config.middleware.use WickedPdf::Middleware, {}, only: &#39;/invoice&#39;&#xA;config.middleware.use WickedPdf::Middleware, {}, except: [ %r[^/admin], &#39;/secret&#39;, %r[^/people/\d] ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the standard &lt;code&gt;render pdf: &#39;some_pdf&#39;&lt;/code&gt; in your app, you will want to exclude those actions from the middleware.&lt;/p&gt; &#xA;&lt;h3&gt;Include in an email as an attachment&lt;/h3&gt; &#xA;&lt;p&gt;To include a rendered pdf file in an email you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;attachments[&#39;attachment.pdf&#39;] = WickedPdf.new.pdf_from_string(&#xA;  render_to_string(&#39;link_to_view.pdf.erb&#39;, layout: &#39;pdf&#39;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will render the pdf to a string and include it in the email. This is very slow so make sure you schedule your email delivery in a job.&lt;/p&gt; &#xA;&lt;h3&gt;Further Reading&lt;/h3&gt; &#xA;&lt;p&gt;Mike Ackerman&#39;s post &lt;a href=&#34;https://www.viget.com/articles/how-to-create-pdfs-in-rails&#34;&gt;How To Create PDFs in Rails&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Andreas Happe&#39;s post &lt;a href=&#34;http://www.snikt.net/blog/2012/04/26/wicked-pdf/&#34;&gt;Generating PDFs from Ruby on Rails&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;JESii&#39;s post &lt;a href=&#34;http://www.nubyrubyrailstales.com/2013/06/wickedpdf-wkhtmltopdf-and-herokua.html&#34;&gt;WickedPDF, wkhtmltopdf, and Heroku...a tricky combination&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Berislav Babic&#39;s post &lt;a href=&#34;http://berislavbabic.com/send-pdf-attachments-from-rails-with-wickedpdf-and-actionmailer/&#34;&gt;Send PDF attachments from Rails with WickedPdf and ActionMailer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Corsego&#39;s 2021 post &lt;a href=&#34;https://blog.corsego.com/gem-wicked-pdf&#34;&gt;Complete guide to generating PDFs with gem wicked_pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PDFTron&#39;s post &lt;a href=&#34;https://www.pdftron.com/blog/rails/how-to-generate-pdf-with-ruby-on-rails/&#34;&gt;How to Generate PDFs With Ruby on Rails&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;StackOverflow &lt;a href=&#34;http://stackoverflow.com/questions/tagged/wicked-pdf&#34;&gt;questions with the tag &#34;wicked-pdf&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Screencasts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SupeRails Screencast [EN]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/tFvtwEmW-GE&#34;&gt;&lt;img src=&#34;https://i3.ytimg.com/vi/tFvtwEmW-GE/hqdefault.jpg&#34; alt=&#34;Ruby on Rails #17 generate, save, send PDFs with gem wicked_pdf&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;codigofacilito Screencast [ES]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/jeWM_gusmJc&#34;&gt;&lt;img src=&#34;https://i3.ytimg.com/vi/jeWM_gusmJc/hqdefault.jpg&#34; alt=&#34;Generar PDF con Ruby on Rails - Tutorial&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Now you can use a debug param on the URL that shows you the content of the pdf in plain html to design it faster.&lt;/p&gt; &#xA;&lt;p&gt;First of all you must configure the render parameter &lt;code&gt;show_as_html: params.key?(&#39;debug&#39;)&lt;/code&gt; and then just use it like you normally would but add &#34;debug&#34; as a GET param in the URL:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:3001/CONTROLLER/X.pdf?debug&#34;&gt;http://localhost:3001/CONTROLLER/X.pdf?debug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;However, the wicked_pdf_* helpers will use file:/// paths for assets when using :show_as_html, and your browser&#39;s cross-domain safety feature will kick in, and not render them. To get around this, you can load your assets like so in your templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;%= params.key?(&#39;debug&#39;) ? image_tag(&#39;foo&#39;) : wicked_pdf_image_tag(&#39;foo&#39;) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Gotchas&lt;/h4&gt; &#xA;&lt;p&gt;If one image from your HTML cannot be found (relative or wrong path for example), others images with right paths &lt;strong&gt;may not&lt;/strong&gt; be displayed in the output PDF as well (it seems to be an issue with wkhtmltopdf).&lt;/p&gt; &#xA;&lt;p&gt;wkhtmltopdf may render at different resolutions on different platforms. For example, Linux prints at 75 dpi (native for WebKit) while on Windows it&#39;s at the desktop&#39;s DPI (which is normally 96 dpi). &lt;a href=&#34;https://github.com/wkhtmltopdf/wkhtmltopdf/issues/2184&#34;&gt;Use &lt;code&gt;:zoom =&amp;gt; 0.78125&lt;/code&gt;&lt;/a&gt; (75/96) to match Linux rendering to Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Security considerations&lt;/h3&gt; &#xA;&lt;p&gt;WickedPdf renders page content on the server by saving HTML and assets to temporary files on disk, then executing &lt;code&gt;wkhtmltopdf&lt;/code&gt; to convert that HTML to a PDF file.&lt;/p&gt; &#xA;&lt;p&gt;It is highly recommended if you allow user-generated HTML/CSS/JS to be converted to PDF, you sanitize it first, or at least disallow requesting content from internal IP addresses and hostnames.&lt;/p&gt; &#xA;&lt;p&gt;For example, these could potentially leak internal AWS metadata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;iframe src=&#34;http://169.254.169.254/latest/meta-data/&#34;&amp;gt;&amp;lt;/iframe&amp;gt;&#xA;&amp;lt;object data=&#34;http://169.254.169.254/latest/meta-data/&#34; type=&#34;text/html&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thank you to Adam Gold from &lt;a href=&#34;https://snyk.io&#34;&gt;Snyk&lt;/a&gt; for reporting this. We are considering adding host allow &amp;amp; block lists and/or potentially HTML element sanitizing. Please open an issue or PR to help us out with this.&lt;/p&gt; &#xA;&lt;h3&gt;Inspiration&lt;/h3&gt; &#xA;&lt;p&gt;You may have noticed: this plugin is heavily inspired by the PrinceXML plugin &lt;a href=&#34;http://github.com/mbleigh/princely/tree/master&#34;&gt;princely&lt;/a&gt;. PrinceXML&#39;s cost was prohibitive for me. So, with a little help from some friends (thanks &lt;a href=&#34;http://github.com/jqr&#34;&gt;jqr&lt;/a&gt;), I tracked down wkhtmltopdf, and here we are.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Run the test suite and check the output (&lt;code&gt;rake&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Add tests for your feature or fix (please)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Awesome Peoples&lt;/h3&gt; &#xA;&lt;p&gt;Also, thanks to &lt;a href=&#34;https://github.com/Unixmonkey&#34;&gt;unixmonkey&lt;/a&gt;, &lt;a href=&#34;http://github.com/galdomedia&#34;&gt;galdomedia&lt;/a&gt;, &lt;a href=&#34;http://github.com/jcrisp&#34;&gt;jcrisp&lt;/a&gt;, &lt;a href=&#34;http://github.com/lleirborras&#34;&gt;lleirborras&lt;/a&gt;, &lt;a href=&#34;http://github.com/tiennou&#34;&gt;tiennou&lt;/a&gt;, and everyone else for all their hard work and patience with my delays in merging in their enhancements.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elastic/logstash</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/elastic/logstash</id>
    <link href="https://github.com/elastic/logstash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Logstash - transport and process your logs, events, or other data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Logstash&lt;/h1&gt; &#xA;&lt;p&gt;Logstash is part of the &lt;a href=&#34;https://www.elastic.co/products&#34;&gt;Elastic Stack&lt;/a&gt; along with Beats, Elasticsearch and Kibana. Logstash is a server-side data processing pipeline that ingests data from a multitude of sources simultaneously, transforms it, and then sends it to your favorite &#34;stash.&#34; (Ours is Elasticsearch, naturally.). Logstash has over 200 plugins, and you can write your own very easily as well.&lt;/p&gt; &#xA;&lt;p&gt;For more info, see &lt;a href=&#34;https://www.elastic.co/products/logstash&#34;&gt;https://www.elastic.co/products/logstash&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation and Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can find the documentation and getting started guides for Logstash on the &lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html&#34;&gt;elastic.co site&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For information about building the documentation, see the README in &lt;a href=&#34;https://github.com/elastic/docs&#34;&gt;https://github.com/elastic/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;You can download officially released Logstash binaries, as well as debian/rpm packages for the supported platforms, from &lt;a href=&#34;https://www.elastic.co/downloads/logstash&#34;&gt;downloads page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need Help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discuss.elastic.co/c/logstash&#34;&gt;Logstash Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/index.html&#34;&gt;Logstash Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webchat.freenode.net/?channels=logstash&#34;&gt;#logstash on freenode IRC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/products/logstash&#34;&gt;Logstash Product Information&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/subscriptions&#34;&gt;Elastic Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Logstash Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Logstash plugins are hosted in separate repositories under the &lt;a href=&#34;https://github.com/logstash-plugins&#34;&gt;logstash-plugins&lt;/a&gt; github organization. Each plugin is a self-contained Ruby gem which gets published to RubyGems.org.&lt;/p&gt; &#xA;&lt;h3&gt;Writing your own Plugin&lt;/h3&gt; &#xA;&lt;p&gt;Logstash is known for its extensibility. There are hundreds of plugins for Logstash and you can write your own very easily! For more info on developing and testing these plugins, please see the &lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/contributing-to-logstash.html&#34;&gt;working with plugins section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Plugin Issues and Pull Requests&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please open new issues and pull requests for plugins under its own repository&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, if you have to report an issue/enhancement for the Elasticsearch output, please do so &lt;a href=&#34;https://github.com/logstash-plugins/logstash-output-elasticsearch/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Logstash core will continue to exist under this repository and all related issues and pull requests can be submitted here.&lt;/p&gt; &#xA;&lt;h2&gt;Developing Logstash Core&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install JDK version 11 or 17. Make sure to set the &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable to the path to your JDK installation directory. For example &lt;code&gt;set JAVA_HOME=&amp;lt;JDK_PATH&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install JRuby 9.2.x It is recommended to use a Ruby version manager such as &lt;a href=&#34;https://rvm.io/&#34;&gt;RVM&lt;/a&gt; or &lt;a href=&#34;https://github.com/sstephenson/rbenv&#34;&gt;rbenv&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;rake&lt;/code&gt; and &lt;code&gt;bundler&lt;/code&gt; tool using &lt;code&gt;gem install rake&lt;/code&gt; and &lt;code&gt;gem install bundler&lt;/code&gt; respectively.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RVM install (optional)&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to use rvm (ruby version manager) to manage Ruby versions on your machine, follow these directions. In the Logstash folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3&#xA;\curl -sSL https://get.rvm.io | bash -s stable --ruby=$(cat .ruby-version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Check Ruby version&lt;/h3&gt; &#xA;&lt;p&gt;Before you proceed, please check your ruby version by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ruby -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The printed version should be the same as in the &lt;code&gt;.ruby-version&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Building Logstash&lt;/h3&gt; &#xA;&lt;p&gt;The Logstash project includes the source code for all of Logstash, including the Elastic-Licensed X-Pack features and functions; to run Logstash from source using only the OSS-licensed code, export the &lt;code&gt;OSS&lt;/code&gt; environment variable with a value of &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export OSS=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set up the location of the source code to build&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export LOGSTASH_SOURCE=1&#xA;export LOGSTASH_PATH=/YOUR/LOGSTASH/DIRECTORY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run Logstash from the repo you must first bootstrap the environment:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can then use &lt;code&gt;bin/logstash&lt;/code&gt; to start Logstash, but there are no plugins installed. To install default plugins, you can run:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake plugin:install-default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the 80+ default plugins which makes Logstash ready to connect to multiple data sources, perform transformations and send the results to Elasticsearch and other destinations.&lt;/p&gt; &#xA;&lt;p&gt;To verify your environment, run the following to send your first event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin/logstash -e &#39;input { stdin { } } output { stdout {} }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should start Logstash with stdin input waiting for you to enter an event&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hello world&#xA;2016-11-11T01:22:14.405+0000 0.0.0.0 hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advanced: Drip Launcher&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ninjudd/drip&#34;&gt;Drip&lt;/a&gt; is a tool that solves the slow JVM startup problem while developing Logstash. The drip script is intended to be a drop-in replacement for the java command. We recommend using drip during development, in particular for running tests. Using drip, the first invocation of a command will not be faster but the subsequent commands will be swift.&lt;/p&gt; &#xA;&lt;p&gt;To tell logstash to use drip, set the environment variable &lt;code&gt;JAVACMD=`which drip`&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example (but see the &lt;em&gt;Testing&lt;/em&gt; section below before running rspec for the first time):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JAVACMD=`which drip` bin/rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caveats&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Drip does not work with STDIN. You cannot use drip for running configs which use the stdin plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Building Logstash Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To build the Logstash Reference (open source content only) on your local machine, clone the following repos:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/logstash&#34;&gt;logstash&lt;/a&gt; - contains main docs about core features&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/logstash-docs&#34;&gt;logstash-docs&lt;/a&gt; - contains generated plugin docs&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/docs&#34;&gt;docs&lt;/a&gt; - contains doc build files&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have the same branch checked out in &lt;code&gt;logstash&lt;/code&gt; and &lt;code&gt;logstash-docs&lt;/code&gt;. Check out &lt;code&gt;master&lt;/code&gt; in the &lt;code&gt;docs&lt;/code&gt; repo.&lt;/p&gt; &#xA;&lt;p&gt;Run the doc build script from within the &lt;code&gt;docs&lt;/code&gt; repo. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build_docs.pl --doc ../logstash/docs/index.asciidoc --chunk=1 -open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Most of the unit tests in Logstash are written using &lt;a href=&#34;http://rspec.info/&#34;&gt;rspec&lt;/a&gt; for the Ruby parts. For the Java parts, we use junit. For testing you can use the &lt;em&gt;test&lt;/em&gt; &lt;code&gt;rake&lt;/code&gt; tasks and the &lt;code&gt;bin/rspec&lt;/code&gt; command, see instructions below:&lt;/p&gt; &#xA;&lt;h3&gt;Core tests&lt;/h3&gt; &#xA;&lt;p&gt;1- To run the core tests you can use the Gradle task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use the &lt;code&gt;rspec&lt;/code&gt; tool to run all tests or run a specific test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/rspec&#xA;bin/rspec spec/foo/bar_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that before running the &lt;code&gt;rspec&lt;/code&gt; command for the first time you need to set up the RSpec test dependencies by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2- To run the subset of tests covering the Java codebase only run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew javaTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3- To execute the complete test-suite including the integration tests run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4- To execute a single Ruby test run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SPEC_OPTS=&#34;-fd -P logstash-core/spec/logstash/api/commands/default_metadata_spec.rb&#34; ./gradlew :logstash-core:rubyTests --tests org.logstash.RSpecTests    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;5- To execute single spec for integration test, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew integrationTests -PrubyIntegrationSpecs=specs/slowlog_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes you might find a change to a piece of Logstash code causes a test to hang. These can be hard to debug.&lt;/p&gt; &#xA;&lt;p&gt;If you set &lt;code&gt;LS_JAVA_OPTS=&#34;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&#34;&lt;/code&gt; you can connect to a running Logstash with your IDEs debugger which can be a great way of finding the issue.&lt;/p&gt; &#xA;&lt;h3&gt;Plugins tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the tests of all currently installed plugins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake test:plugins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the default set of plugins included in the logstash package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake test:install-default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Note that if a plugin is installed using the plugin manager &lt;code&gt;bin/logstash-plugin install ...&lt;/code&gt; do not forget to also install the plugins development dependencies using the following command after the plugin installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/logstash-plugin install --development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Artifacts&lt;/h2&gt; &#xA;&lt;p&gt;Built artifacts will be placed in the &lt;code&gt;LS_HOME/build&lt;/code&gt; directory, and will create the directory if it is not already present.&lt;/p&gt; &#xA;&lt;p&gt;You can build a Logstash snapshot package as tarball or zip file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew assembleTarDistribution&#xA;./gradlew assembleZipDistribution&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OSS-only artifacts can similarly be built with their own gradle tasks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew assembleOssTarDistribution&#xA;./gradlew assembleOssZipDistribution&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build .rpm and .deb, but the &lt;a href=&#34;https://github.com/jordansissel/fpm&#34;&gt;fpm&lt;/a&gt; tool is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake artifact:rpm&#xA;rake artifact:deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake artifact:rpm_oss&#xA;rake artifact:deb_oss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using a Custom JRuby Distribution&lt;/h2&gt; &#xA;&lt;p&gt;If you want the build to use a custom JRuby you can do so by setting a path to a custom JRuby distribution&#39;s source root via the &lt;code&gt;custom.jruby.path&lt;/code&gt; Gradle property.&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew clean test -Pcustom.jruby.path=&#34;/path/to/jruby&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Community: If a newbie has a bad time, it&#39;s a bug.&lt;/li&gt; &#xA; &lt;li&gt;Software: Make it work, then make it right, then make it fast.&lt;/li&gt; &#xA; &lt;li&gt;Technology: If it doesn&#39;t do a thing today, we can make it do it tomorrow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcome: ideas, patches, documentation, bug reports, complaints, and even something you drew up on a napkin.&lt;/p&gt; &#xA;&lt;p&gt;Programming is not a required skill. Whatever you&#39;ve seen about open source and maintainers or community members saying &#34;send patches or die&#34; - you will not see that here.&lt;/p&gt; &#xA;&lt;p&gt;It is more important to me that you are able to contribute.&lt;/p&gt; &#xA;&lt;p&gt;For more information about contributing, see the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/logstash/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rubocop/rubocop</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/rubocop/rubocop</id>
    <link href="https://github.com/rubocop/rubocop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby static code analyzer and formatter, based on the community Ruby style guide.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/logo/rubo-logo-horizontal.png&#34; alt=&#34;RuboCop Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-rubocop-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/rubocop&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rubocop.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/rubocop/rubocop/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/rubocop/rubocop/tree/master.svg?style=svg&#34; alt=&#34;CircleCI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rubocop/rubocop/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/rubocop/rubocop/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rubocop/rubocop/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/d2d67f728e88ea84ac69/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rubocop/rubocop/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/d2d67f728e88ea84ac69/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/wJjWvGRDmm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Role models are important. &lt;br&gt; -- Officer Alex J. Murphy / RoboCop&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;RuboCop&lt;/strong&gt; is a Ruby static code analyzer (a.k.a. &lt;code&gt;linter&lt;/code&gt;) and code formatter. Out of the box it will enforce many of the guidelines outlined in the community &lt;a href=&#34;https://rubystyle.guide&#34;&gt;Ruby Style Guide&lt;/a&gt;. Apart from reporting the problems discovered in your code, RuboCop can also automatically fix many of them for you.&lt;/p&gt; &#xA;&lt;p&gt;RuboCop is extremely flexible and most aspects of its behavior can be tweaked via various &lt;a href=&#34;https://github.com/rubocop/rubocop/raw/master/config/default.yml&#34;&gt;configuration options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/#open-collective-backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backers/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/#open-collective-sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsors/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-rubocop?utm_source=rubygems-rubocop&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://tidelift.com/badges/package/rubygems/rubocop&#34; alt=&#34;Tidelift&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Working on RuboCop is often fun, but it also requires a great deal of time and energy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please consider &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/#funding&#34;&gt;financially supporting its ongoing development&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;RuboCop&lt;/strong&gt;&#39;s installation is pretty standard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gem install rubocop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d rather install RuboCop using &lt;code&gt;bundler&lt;/code&gt;, add a line for it in your &lt;code&gt;Gemfile&lt;/code&gt; (but set the &lt;code&gt;require&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;, as it is a standalone tool):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;gem &#39;rubocop&#39;, require: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RuboCop is stable between major versions, both in terms of API and cop configuration. We aim to ease the maintenance of RuboCop extensions and the upgrades between RuboCop releases. All big changes are reserved for major releases. To prevent an unwanted RuboCop update you might want to use a conservative version lock in your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;gem &#39;rubocop&#39;, &#39;~&amp;gt; 1.30&#39;, require: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.rubocop.org/rubocop/versioning.html&#34;&gt;our versioning policy&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Just type &lt;code&gt;rubocop&lt;/code&gt; in a Ruby project&#39;s folder and watch the magic happen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd my/cool/ruby/project&#xA;$ rubocop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can read a lot more about RuboCop in its &lt;a href=&#34;https://docs.rubocop.org&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;RuboCop officially supports the following runtime Ruby implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MRI 2.6+&lt;/li&gt; &#xA; &lt;li&gt;JRuby 9.3+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Targets Ruby 2.0+ code analysis.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.rubocop.org/rubocop/compatibility.html&#34;&gt;compatibility documentation&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Readme Badge&lt;/h2&gt; &#xA;&lt;p&gt;If you use RuboCop in your project, you can include one of these badges in your readme to let people know that your code is written following the community Ruby Style Guide.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-rubocop-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubystyle.guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-community-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here are the Markdown snippets for the two badges:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Ruby Style Guide](https://img.shields.io/badge/code_style-rubocop-brightgreen.svg)](https://github.com/rubocop/rubocop)&#xA;&#xA;[![Ruby Style Guide](https://img.shields.io/badge/code_style-community-brightgreen.svg)](https://rubystyle.guide)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a list of RuboCop&#39;s core developers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov&#34;&gt;Bozhidar Batsov&lt;/a&gt; (author &amp;amp; head maintainer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonas054&#34;&gt;Jonas Arvidsson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yujinakayama&#34;&gt;Yuji Nakayama&lt;/a&gt; (retired)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edzhelyov&#34;&gt;Evgeni Dzhelyov&lt;/a&gt; (retired)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/drenmi&#34;&gt;Ted Johansson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pocke&#34;&gt;Masataka Kuwabara&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koic&#34;&gt;Koichi Ito&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/darhazer&#34;&gt;Maxim Krizhanovski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bquorning&#34;&gt;Benjamin Quorning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcandre&#34;&gt;Marc-André Lafortune&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dvandersluis&#34;&gt;Daniel Vandersluis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.rubocop.org/rubocop/about/team.html&#34;&gt;team page&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Logo&lt;/h2&gt; &#xA;&lt;p&gt;RuboCop&#39;s logo was created by &lt;a href=&#34;https://www.chadomoto.com/&#34;&gt;Dimiter Petrov&lt;/a&gt;. You can find the logo in various formats &lt;a href=&#34;https://github.com/rubocop/rubocop/tree/master/logo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The logo is licensed under a &lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/deed.en_GB&#34;&gt;Creative Commons Attribution-NonCommercial 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/rubocop/rubocop/graphs/contributors&#34;&gt;list&lt;/a&gt; of all the people who have contributed to the development of RuboCop.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m extremely grateful to each and every one of them!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to RuboCop, please take the time to go through our short &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Converting more of the Ruby Style Guide into RuboCop cops is our top priority right now. Writing a new cop is a great way to dive into RuboCop!&lt;/p&gt; &#xA;&lt;p&gt;Of course, bug reports and suggestions for improvements are always welcome. GitHub pull requests are even better! :-)&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;While RuboCop is free software and will always be, the project would benefit immensely from some funding. Raising a monthly budget of a couple of thousand dollars would make it possible to pay people to work on certain complex features, fund other development related stuff (e.g. hardware, conference trips) and so on. Raising a monthly budget of over $5000 would open the possibility of someone working full-time on the project which would speed up the pace of development significantly.&lt;/p&gt; &#xA;&lt;p&gt;We welcome both individual and corporate sponsors! We also offer a wide array of funding channels to account for your preferences (although currently &lt;a href=&#34;https://opencollective.com/rubocop&#34;&gt;Open Collective&lt;/a&gt; is our preferred funding platform).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you&#39;re working in a company that&#39;s making significant use of RuboCop we&#39;d appreciate it if you suggest to your company to become a RuboCop sponsor.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can support the development of RuboCop via &lt;a href=&#34;https://github.com/sponsors/bbatsov&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;Patreon&lt;/a&gt;, &lt;a href=&#34;https://paypal.me/bbatsov&#34;&gt;PayPal&lt;/a&gt;, &lt;a href=&#34;https://opencollective.com/rubocop&#34;&gt;Open Collective&lt;/a&gt; and &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-rubocop?utm_source=rubygems-rubocop&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;Tidelift&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If doing a sponsorship in the form of donation is problematic for your company from an accounting standpoint, we&#39;d recommend the use of Tidelift, where you can get a support-like subscription instead.&lt;/p&gt; &#xA;&lt;h3&gt;Open Collective Backers&lt;/h3&gt; &#xA;&lt;p&gt;Support us with a monthly donation and help us continue our activities. [&lt;a href=&#34;https://opencollective.com/rubocop#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/rubocop/backer/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/backer/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/backer/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open Collective Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Become a sponsor and get your logo on our README on GitHub with a link to your site. [&lt;a href=&#34;https://opencollective.com/rubocop#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/rubocop/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/rubocop/sponsor/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/rubocop/sponsor/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;RuboCop&#39;s changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2022 Bozhidar Batsov. See &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; for further details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ruby-grape/grape</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/ruby-grape/grape</id>
    <link href="https://github.com/ruby-grape/grape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opinionated framework for creating REST-like APIs in Ruby.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/grape.png&#34; alt=&#34;grape logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/grape&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/grape.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ruby-grape/grape/actions&#34;&gt;&lt;img src=&#34;https://github.com/ruby-grape/grape/workflows/test/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/ruby-grape/grape&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/ruby-grape/grape.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/ruby-grape/grape?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/ruby-grape/grape/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inch-ci.org/github/ruby-grape/grape&#34;&gt;&lt;img src=&#34;https://inch-ci.org/github/ruby-grape/grape.svg?sanitize=true&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/ruby-grape/grape?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/ruby-grape/grape.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/ruby-grape/grape&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#what-is-grape&#34;&gt;What is Grape?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#stable-release&#34;&gt;Stable Release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#project-resources&#34;&gt;Project Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#grape-for-enterprise&#34;&gt;Grape for Enterprise&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#basic-usage&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#mounting&#34;&gt;Mounting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#all&#34;&gt;All&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rack&#34;&gt;Rack&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#activerecord-without-rails&#34;&gt;ActiveRecord without Rails&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails-4&#34;&gt;Rails 4&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails-5&#34;&gt;Rails 5+&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#alongside-sinatra-or-other-frameworks&#34;&gt;Alongside Sinatra (or other frameworks)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails&#34;&gt;Rails&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails--52&#34;&gt;Rails &amp;lt; 5.2&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails-60&#34;&gt;Rails 6.0&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#modules&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#remounting&#34;&gt;Remounting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#mount-configuration&#34;&gt;Mount Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#versioning&#34;&gt;Versioning&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#path&#34;&gt;Path&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#accept-version-header&#34;&gt;Accept-Version Header&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#param&#34;&gt;Param&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#describing-methods&#34;&gt;Describing Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#parameters&#34;&gt;Parameters&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#params-class&#34;&gt;Params Class&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#declared&#34;&gt;Declared&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#include-parent-namespaces&#34;&gt;Include Parent Namespaces&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#include-missing&#34;&gt;Include Missing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#parameter-validation-and-coercion&#34;&gt;Parameter Validation and Coercion&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#supported-parameter-types&#34;&gt;Supported Parameter Types&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#integerfixnum-and-coercions&#34;&gt;Integer/Fixnum and Coercions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#custom-types-and-coercions&#34;&gt;Custom Types and Coercions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#multipart-file-parameters&#34;&gt;Multipart File Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#first-class-json-types&#34;&gt;First-Class JSON Types&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#multiple-allowed-types&#34;&gt;Multiple Allowed Types&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#validation-of-nested-parameters&#34;&gt;Validation of Nested Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#dependent-parameters&#34;&gt;Dependent Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#group-options&#34;&gt;Group Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#renaming&#34;&gt;Renaming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#built-in-validators&#34;&gt;Built-in Validators&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#allow_blank&#34;&gt;allow_blank&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#values&#34;&gt;values&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#except_values&#34;&gt;except_values&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#same_as&#34;&gt;same_as&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#regexp&#34;&gt;regexp&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#mutually_exclusive&#34;&gt;mutually_exclusive&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#exactly_one_of&#34;&gt;exactly_one_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#at_least_one_of&#34;&gt;at_least_one_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#all_or_none_of&#34;&gt;all_or_none_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#nested-mutually_exclusive-exactly_one_of-at_least_one_of-all_or_none_of&#34;&gt;Nested mutually_exclusive, exactly_one_of, at_least_one_of, all_or_none_of&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#namespace-validation-and-coercion&#34;&gt;Namespace Validation and Coercion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#custom-validators&#34;&gt;Custom Validators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#validation-errors&#34;&gt;Validation Errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#i18n&#34;&gt;I18n&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#custom-validation-messages&#34;&gt;Custom Validation messages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#presence-allow_blank-values-regexp&#34;&gt;presence, allow_blank, values, regexp&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#same_as-1&#34;&gt;same_as&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#all_or_none_of-1&#34;&gt;all_or_none_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#mutually_exclusive-1&#34;&gt;mutually_exclusive&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#exactly_one_of-1&#34;&gt;exactly_one_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#at_least_one_of-1&#34;&gt;at_least_one_of&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#coerce&#34;&gt;Coerce&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#with-lambdas&#34;&gt;With Lambdas&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#pass-symbols-for-i18n-translations&#34;&gt;Pass symbols for i18n translations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#overriding-attribute-names&#34;&gt;Overriding Attribute Names&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#with-default&#34;&gt;With Default&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#headers&#34;&gt;Headers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#request&#34;&gt;Request&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#header-case-handling&#34;&gt;Header Case Handling&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#response&#34;&gt;Response&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#routes&#34;&gt;Routes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#helpers&#34;&gt;Helpers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#path-helpers&#34;&gt;Path Helpers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#parameter-documentation&#34;&gt;Parameter Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#cookies&#34;&gt;Cookies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#http-status-code&#34;&gt;HTTP Status Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#redirecting&#34;&gt;Redirecting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#recognizing-path&#34;&gt;Recognizing Path&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#allowed-methods&#34;&gt;Allowed Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#raising-exceptions&#34;&gt;Raising Exceptions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#default-error-http-status-code&#34;&gt;Default Error HTTP Status Code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#handling-404&#34;&gt;Handling 404&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#exception-handling&#34;&gt;Exception Handling&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rescuing-exceptions-inside-namespaces&#34;&gt;Rescuing exceptions inside namespaces&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#unrescuable-exceptions&#34;&gt;Unrescuable Exceptions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#exceptions-that-should-be-rescued-explicitly&#34;&gt;Exceptions that should be rescued explicitly&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails-3x&#34;&gt;Rails 3.x&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#api-formats&#34;&gt;API Formats&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#jsonp&#34;&gt;JSONP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#cors&#34;&gt;CORS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#content-type&#34;&gt;Content-type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#api-data-formats&#34;&gt;API Data Formats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#json-and-xml-processors&#34;&gt;JSON and XML Processors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#restful-model-representations&#34;&gt;RESTful Model Representations&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#grape-entities&#34;&gt;Grape Entities&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#hypermedia-and-roar&#34;&gt;Hypermedia and Roar&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rabl&#34;&gt;Rabl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#active-model-serializers&#34;&gt;Active Model Serializers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#sending-raw-or-no-data&#34;&gt;Sending Raw or No Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#authentication&#34;&gt;Authentication&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#basic-and-digest-auth&#34;&gt;Basic and Digest Auth&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#register-custom-middleware-for-authentication&#34;&gt;Register custom middleware for authentication&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#describing-and-inspecting-an-api&#34;&gt;Describing and Inspecting an API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#current-route-and-endpoint&#34;&gt;Current Route and Endpoint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#before-after-and-finally&#34;&gt;Before, After and Finally&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#anchoring&#34;&gt;Anchoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#using-custom-middleware&#34;&gt;Using Custom Middleware&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#grape-middleware&#34;&gt;Grape Middleware&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rails-middleware&#34;&gt;Rails Middleware&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#remote-ip&#34;&gt;Remote IP&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#writing-tests&#34;&gt;Writing Tests&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#writing-tests-with-rack&#34;&gt;Writing Tests with Rack&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rspec&#34;&gt;RSpec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#airborne&#34;&gt;Airborne&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#minitest&#34;&gt;MiniTest&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#writing-tests-with-rails&#34;&gt;Writing Tests with Rails&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#rspec-1&#34;&gt;RSpec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#minitest-1&#34;&gt;MiniTest&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#stubbing-helpers&#34;&gt;Stubbing Helpers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#reloading-api-changes-in-development&#34;&gt;Reloading API Changes in Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#reloading-in-rack-applications&#34;&gt;Reloading in Rack Applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#reloading-in-rails-applications&#34;&gt;Reloading in Rails Applications&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#performance-monitoring&#34;&gt;Performance Monitoring&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#active-support-instrumentation&#34;&gt;Active Support Instrumentation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#endpoint_rungrape&#34;&gt;endpoint_run.grape&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#endpoint_rendergrape&#34;&gt;endpoint_render.grape&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#endpoint_run_filtersgrape&#34;&gt;endpoint_run_filters.grape&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#endpoint_run_validatorsgrape&#34;&gt;endpoint_run_validators.grape&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#format_responsegrape&#34;&gt;format_response.grape&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#monitoring-products&#34;&gt;Monitoring Products&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#contributing-to-grape&#34;&gt;Contributing to Grape&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is Grape?&lt;/h2&gt; &#xA;&lt;p&gt;Grape is a REST-like API framework for Ruby. It&#39;s designed to run on Rack or complement existing web application frameworks such as Rails and Sinatra by providing a simple DSL to easily develop RESTful APIs. It has built-in support for common conventions, including multiple formats, subdomain/prefix restriction, content negotiation, versioning and much more.&lt;/p&gt; &#xA;&lt;h2&gt;Stable Release&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;re reading the documentation for the next release of Grape, which should be &lt;strong&gt;1.7.0&lt;/strong&gt;. Please read &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/UPGRADING.md&#34;&gt;UPGRADING&lt;/a&gt; when upgrading from a previous version. The current stable release is &lt;a href=&#34;https://github.com/ruby-grape/grape/raw/v1.6.2/README.md&#34;&gt;1.6.2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ruby-grape.org&#34;&gt;Grape Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/gems/grape&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Need help? Try &lt;a href=&#34;http://groups.google.com/group/ruby-grape&#34;&gt;Grape Google Group&lt;/a&gt; or &lt;a href=&#34;https://gitter.im/ruby-grape/grape&#34;&gt;Gitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/grapeframework&#34;&gt;Follow us on Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Grape for Enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of Grape are working with Tidelift to deliver commercial support and maintenance. Save time, reduce risk, and improve code health, while paying the maintainers of Grape. Click &lt;a href=&#34;https://tidelift.com/subscription/request-a-demo?utm_source=rubygems-grape&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;In 2020, we plan to use the money towards gathering Grape contributors for dinner in New York City.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Ruby 2.4 or newer is required.&lt;/p&gt; &#xA;&lt;p&gt;Grape is available as a gem, to install it run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle add grape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Grape APIs are Rack applications that are created by subclassing &lt;code&gt;Grape::API&lt;/code&gt;. Below is a simple example showing some of the more common features of Grape in the context of recreating parts of the Twitter API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Twitter&#xA;  class API &amp;lt; Grape::API&#xA;    version &#39;v1&#39;, using: :header, vendor: &#39;twitter&#39;&#xA;    format :json&#xA;    prefix :api&#xA;&#xA;    helpers do&#xA;      def current_user&#xA;        @current_user ||= User.authorize!(env)&#xA;      end&#xA;&#xA;      def authenticate!&#xA;        error!(&#39;401 Unauthorized&#39;, 401) unless current_user&#xA;      end&#xA;    end&#xA;&#xA;    resource :statuses do&#xA;      desc &#39;Return a public timeline.&#39;&#xA;      get :public_timeline do&#xA;        Status.limit(20)&#xA;      end&#xA;&#xA;      desc &#39;Return a personal timeline.&#39;&#xA;      get :home_timeline do&#xA;        authenticate!&#xA;        current_user.statuses.limit(20)&#xA;      end&#xA;&#xA;      desc &#39;Return a status.&#39;&#xA;      params do&#xA;        requires :id, type: Integer, desc: &#39;Status ID.&#39;&#xA;      end&#xA;      route_param :id do&#xA;        get do&#xA;          Status.find(params[:id])&#xA;        end&#xA;      end&#xA;&#xA;      desc &#39;Create a status.&#39;&#xA;      params do&#xA;        requires :status, type: String, desc: &#39;Your status.&#39;&#xA;      end&#xA;      post do&#xA;        authenticate!&#xA;        Status.create!({&#xA;          user: current_user,&#xA;          text: params[:status]&#xA;        })&#xA;      end&#xA;&#xA;      desc &#39;Update a status.&#39;&#xA;      params do&#xA;        requires :id, type: String, desc: &#39;Status ID.&#39;&#xA;        requires :status, type: String, desc: &#39;Your status.&#39;&#xA;      end&#xA;      put &#39;:id&#39; do&#xA;        authenticate!&#xA;        current_user.statuses.find(params[:id]).update({&#xA;          user: current_user,&#xA;          text: params[:status]&#xA;        })&#xA;      end&#xA;&#xA;      desc &#39;Delete a status.&#39;&#xA;      params do&#xA;        requires :id, type: String, desc: &#39;Status ID.&#39;&#xA;      end&#xA;      delete &#39;:id&#39; do&#xA;        authenticate!&#xA;        current_user.statuses.find(params[:id]).destroy&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mounting&lt;/h2&gt; &#xA;&lt;h3&gt;All&lt;/h3&gt; &#xA;&lt;p&gt;By default Grape will compile the routes on the first route, it is possible to pre-load routes using the &lt;code&gt;compile!&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Twitter::API.compile!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be added to your &lt;code&gt;config.ru&lt;/code&gt; (if using rackup), &lt;code&gt;application.rb&lt;/code&gt; (if using rails), or any file that loads your server.&lt;/p&gt; &#xA;&lt;h3&gt;Rack&lt;/h3&gt; &#xA;&lt;p&gt;The above sample creates a Rack application that can be run from a rackup &lt;code&gt;config.ru&lt;/code&gt; file with &lt;code&gt;rackup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;run Twitter::API&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(With pre-loading you can use)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Twitter::API.compile!&#xA;run Twitter::API&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And would respond to the following routes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /api/statuses/public_timeline&#xA;GET /api/statuses/home_timeline&#xA;GET /api/statuses/:id&#xA;POST /api/statuses&#xA;PUT /api/statuses/:id&#xA;DELETE /api/statuses/:id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grape will also automatically respond to HEAD and OPTIONS for all GET, and just OPTIONS for all other routes.&lt;/p&gt; &#xA;&lt;h3&gt;ActiveRecord without Rails&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use ActiveRecord within Grape, you will need to make sure that ActiveRecord&#39;s connection pool is handled correctly.&lt;/p&gt; &#xA;&lt;h4&gt;Rails 4&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to achieve that is by using ActiveRecord&#39;s &lt;code&gt;ConnectionManagement&lt;/code&gt; middleware in your &lt;code&gt;config.ru&lt;/code&gt; before mounting Grape, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use ActiveRecord::ConnectionAdapters::ConnectionManagement&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rails 5+&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/jhollinger/otr-activerecord&#34;&gt;otr-activerecord&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use OTR::ActiveRecord::ConnectionManagement&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Alongside Sinatra (or other frameworks)&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to mount Grape alongside another Rack framework such as Sinatra, you can do so easily using &lt;code&gt;Rack::Cascade&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Example config.ru&#xA;&#xA;require &#39;sinatra&#39;&#xA;require &#39;grape&#39;&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  get :hello do&#xA;    { hello: &#39;world&#39; }&#xA;  end&#xA;end&#xA;&#xA;class Web &amp;lt; Sinatra::Base&#xA;  get &#39;/&#39; do&#xA;    &#39;Hello world.&#39;&#xA;  end&#xA;end&#xA;&#xA;use Rack::Session::Cookie&#xA;run Rack::Cascade.new [Web, API]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that order of loading apps using &lt;code&gt;Rack::Cascade&lt;/code&gt; matters. The grape application must be last if you want to raise custom 404 errors from grape (such as &lt;code&gt;error!(&#39;Not Found&#39;,404)&lt;/code&gt;). If the grape application is not last and returns 404 or 405 response, &lt;a href=&#34;https://www.rubydoc.info/gems/rack/Rack/Cascade&#34;&gt;cascade utilizes that as a signal to try the next app&lt;/a&gt;. This may lead to undesirable behavior showing the &lt;a href=&#34;https://github.com/ruby-grape/grape/issues/1515&#34;&gt;wrong 404 page from the wrong app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rails&lt;/h3&gt; &#xA;&lt;p&gt;Place API files into &lt;code&gt;app/api&lt;/code&gt;. Rails expects a subdirectory that matches the name of the Ruby module and a file name that matches the name of the class. In our example, the file name location and directory for &lt;code&gt;Twitter::API&lt;/code&gt; should be &lt;code&gt;app/api/twitter/api.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;config/routes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mount Twitter::API =&amp;gt; &#39;/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rails &amp;lt; 5.2&lt;/h4&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;application.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.paths.add File.join(&#39;app&#39;, &#39;api&#39;), glob: File.join(&#39;**&#39;, &#39;*.rb&#39;)&#xA;config.autoload_paths += Dir[Rails.root.join(&#39;app&#39;, &#39;api&#39;, &#39;*&#39;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#reloading-api-changes-in-development&#34;&gt;below&lt;/a&gt; for additional code that enables reloading of API changes in development.&lt;/p&gt; &#xA;&lt;h4&gt;Rails 6.0&lt;/h4&gt; &#xA;&lt;p&gt;For Rails versions greater than 6.0.0.beta2, &lt;code&gt;Zeitwerk&lt;/code&gt; autoloader is the default for CRuby. By default &lt;code&gt;Zeitwerk&lt;/code&gt; inflects &lt;code&gt;api&lt;/code&gt; as &lt;code&gt;Api&lt;/code&gt; instead of &lt;code&gt;API&lt;/code&gt;. To make our example work, you need to uncomment the lines at the bottom of &lt;code&gt;config/initializers/inflections.rb&lt;/code&gt;, and add &lt;code&gt;API&lt;/code&gt; as an acronym:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::Inflector.inflections(:en) do |inflect|&#xA;  inflect.acronym &#39;API&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;p&gt;You can mount multiple API implementations inside another one. These don&#39;t have to be different versions, but may be components of the same API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  mount Twitter::APIv1&#xA;  mount Twitter::APIv2&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also mount on a path, which is similar to using &lt;code&gt;prefix&lt;/code&gt; inside the mounted API itself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  mount Twitter::APIv1 =&amp;gt; &#39;/v1&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind such declarations as &lt;code&gt;before/after/rescue_from&lt;/code&gt; must be placed before &lt;code&gt;mount&lt;/code&gt; in a case where they should be inherited.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  before do&#xA;    header &#39;X-Base-Header&#39;, &#39;will be defined for all APIs that are mounted below&#39;&#xA;  end&#xA;&#xA;  mount Twitter::Users&#xA;  mount Twitter::Search&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Remounting&lt;/h2&gt; &#xA;&lt;p&gt;You can mount the same endpoints in two different locations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Voting::API &amp;lt; Grape::API&#xA;  namespace &#39;votes&#39; do&#xA;    get do&#xA;      # Your logic&#xA;    end&#xA;&#xA;    post do&#xA;      # Your logic&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class Post::API &amp;lt; Grape::API&#xA;  mount Voting::API&#xA;end&#xA;&#xA;class Comment::API &amp;lt; Grape::API&#xA;  mount Voting::API&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming that the post and comment endpoints are mounted in &lt;code&gt;/posts&lt;/code&gt; and &lt;code&gt;/comments&lt;/code&gt;, you should now be able to do &lt;code&gt;get /posts/votes&lt;/code&gt;, &lt;code&gt;post /posts/votes&lt;/code&gt;, &lt;code&gt;get /comments/votes&lt;/code&gt; and &lt;code&gt;post /comments/votes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mount Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can configure remountable endpoints to change how they behave according to where they are mounted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Voting::API &amp;lt; Grape::API&#xA;  namespace &#39;votes&#39; do&#xA;    desc &#34;Vote for your #{configuration[:votable]}&#34;&#xA;    get do&#xA;      # Your logic&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class Post::API &amp;lt; Grape::API&#xA;  mount Voting::API, with: { votable: &#39;posts&#39; }&#xA;end&#xA;&#xA;class Comment::API &amp;lt; Grape::API&#xA;  mount Voting::API, with: { votable: &#39;comments&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you&#39;re passing a hash as the first parameter to &lt;code&gt;mount&lt;/code&gt;, you will need to explicitly put &lt;code&gt;()&lt;/code&gt; around parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# good&#xA;mount({ ::Some::Api =&amp;gt; &#39;/some/api&#39; }, with: { condition: true })&#xA;&#xA;# bad&#xA;mount ::Some::Api =&amp;gt; &#39;/some/api&#39;, with: { condition: true }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access &lt;code&gt;configuration&lt;/code&gt; on the class (to use as dynamic attributes), inside blocks (like namespace)&lt;/p&gt; &#xA;&lt;p&gt;If you want logic happening given on an &lt;code&gt;configuration&lt;/code&gt;, you can use the helper &lt;code&gt;given&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ConditionalEndpoint::API &amp;lt; Grape::API&#xA;  given configuration[:some_setting] do&#xA;    get &#39;mount_this_endpoint_conditionally&#39; do&#xA;      configuration[:configurable_response]&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a block of logic running every time an endpoint is mounted (within which you can access the &lt;code&gt;configuration&lt;/code&gt; Hash)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ConditionalEndpoint::API &amp;lt; Grape::API&#xA;  mounted do&#xA;    YourLogger.info &#34;This API was mounted at: #{Time.now}&#34;&#xA;&#xA;    get configuration[:endpoint_name] do&#xA;      configuration[:configurable_response]&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complex results can be achieved by using &lt;code&gt;mounted&lt;/code&gt; as an expression within which the &lt;code&gt;configuration&lt;/code&gt; is already evaluated as a Hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ExpressionEndpointAPI &amp;lt; Grape::API&#xA;  get(mounted { configuration[:route_name] || &#39;default_name&#39; }) do&#xA;    # some logic&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class BasicAPI &amp;lt; Grape::API&#xA;  desc &#39;Statuses index&#39; do&#xA;    params: mounted { configuration[:entity] || API::Entities::Status }.documentation&#xA;  end&#xA;  params do&#xA;    requires :all, using: mounted { configuration[:entity] || API::Entities::Status }.documentation&#xA;  end&#xA;  get &#39;/statuses&#39; do&#xA;    statuses = Status.all&#xA;    type = current_user.admin? ? :full : :default&#xA;    present statuses, with: mounted { configuration[:entity] || API::Entities::Status }, type: type&#xA;  end&#xA;end&#xA;&#xA;class V1 &amp;lt; Grape::API&#xA;  version &#39;v1&#39;&#xA;  mount BasicAPI, with: { entity: mounted { configuration[:entity] || API::Enitities::Status } }&#xA;end&#xA;&#xA;class V2 &amp;lt; Grape::API&#xA;  version &#39;v2&#39;&#xA;  mount BasicAPI, with: { entity: mounted { configuration[:entity] || API::Enitities::V2::Status } }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;There are four strategies in which clients can reach your API&#39;s endpoints: &lt;code&gt;:path&lt;/code&gt;, &lt;code&gt;:header&lt;/code&gt;, &lt;code&gt;:accept_version_header&lt;/code&gt; and &lt;code&gt;:param&lt;/code&gt;. The default strategy is &lt;code&gt;:path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Path&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using this versioning strategy, clients should pass the desired version in the URL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:9292/v1/statuses/public_timeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Header&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :header, vendor: &#39;twitter&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, Grape only supports versioned media types in the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vnd.vendor-and-or-resource-v1234+format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basically all tokens between the final &lt;code&gt;-&lt;/code&gt; and the &lt;code&gt;+&lt;/code&gt; will be interpreted as the version.&lt;/p&gt; &#xA;&lt;p&gt;Using this versioning strategy, clients should pass the desired version in the HTTP &lt;code&gt;Accept&lt;/code&gt; head.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -H Accept:application/vnd.twitter-v1+json http://localhost:9292/statuses/public_timeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the first matching version is used when no &lt;code&gt;Accept&lt;/code&gt; header is supplied. This behavior is similar to routing in Rails. To circumvent this default behavior, one could use the &lt;code&gt;:strict&lt;/code&gt; option. When this option is set to &lt;code&gt;true&lt;/code&gt;, a &lt;code&gt;406 Not Acceptable&lt;/code&gt; error is returned when no correct &lt;code&gt;Accept&lt;/code&gt; header is supplied.&lt;/p&gt; &#xA;&lt;p&gt;When an invalid &lt;code&gt;Accept&lt;/code&gt; header is supplied, a &lt;code&gt;406 Not Acceptable&lt;/code&gt; error is returned if the &lt;code&gt;:cascade&lt;/code&gt; option is set to &lt;code&gt;false&lt;/code&gt;. Otherwise a &lt;code&gt;404 Not Found&lt;/code&gt; error is returned by Rack if no other route matches.&lt;/p&gt; &#xA;&lt;h3&gt;Accept-Version Header&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :accept_version_header&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using this versioning strategy, clients should pass the desired version in the HTTP &lt;code&gt;Accept-Version&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -H &#34;Accept-Version:v1&#34; http://localhost:9292/statuses/public_timeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the first matching version is used when no &lt;code&gt;Accept-Version&lt;/code&gt; header is supplied. This behavior is similar to routing in Rails. To circumvent this default behavior, one could use the &lt;code&gt;:strict&lt;/code&gt; option. When this option is set to &lt;code&gt;true&lt;/code&gt;, a &lt;code&gt;406 Not Acceptable&lt;/code&gt; error is returned when no correct &lt;code&gt;Accept&lt;/code&gt; header is supplied and the &lt;code&gt;:cascade&lt;/code&gt; option is set to &lt;code&gt;false&lt;/code&gt;. Otherwise a &lt;code&gt;404 Not Found&lt;/code&gt; error is returned by Rack if no other route matches.&lt;/p&gt; &#xA;&lt;h3&gt;Param&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :param&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using this versioning strategy, clients should pass the desired version as a request parameter, either in the URL query string or in the request body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:9292/statuses/public_timeline?apiver=v1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default name for the query parameter is &#39;apiver&#39; but can be specified using the &lt;code&gt;:parameter&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :param, parameter: &#39;v&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:9292/statuses/public_timeline?v=v1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Describing Methods&lt;/h2&gt; &#xA;&lt;p&gt;You can add a description to API methods and namespaces. The description would be used by &lt;a href=&#34;https://github.com/ruby-grape/grape-swagger&#34;&gt;grape-swagger&lt;/a&gt; to generate swagger compliant documentation.&lt;/p&gt; &#xA;&lt;p&gt;Note: Description block is only for documentation and won&#39;t affects API behavior.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &#39;Returns your public timeline.&#39; do&#xA;  summary &#39;summary&#39;&#xA;  detail &#39;more details&#39;&#xA;  params  API::Entities::Status.documentation&#xA;  success API::Entities::Entity&#xA;  failure [[401, &#39;Unauthorized&#39;, &#39;Entities::Error&#39;]]&#xA;  named &#39;My named route&#39;&#xA;  headers XAuthToken: {&#xA;            description: &#39;Validates your identity&#39;,&#xA;            required: true&#xA;          },&#xA;          XOptionalHeader: {&#xA;            description: &#39;Not really needed&#39;,&#xA;            required: false&#xA;          }&#xA;  hidden false&#xA;  deprecated false&#xA;  is_array true&#xA;  nickname &#39;nickname&#39;&#xA;  produces [&#39;application/json&#39;]&#xA;  consumes [&#39;application/json&#39;]&#xA;  tags [&#39;tag1&#39;, &#39;tag2&#39;]&#xA;end&#xA;get :public_timeline do&#xA;  Status.limit(20)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;detail&lt;/code&gt;: A more enhanced description&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;params&lt;/code&gt;: Define parameters directly from an &lt;code&gt;Entity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;success&lt;/code&gt;: (former entity) The &lt;code&gt;Entity&lt;/code&gt; to be used to present by default this route&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;failure&lt;/code&gt;: (former http_codes) A definition of the used failure HTTP Codes and Entities&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;named&lt;/code&gt;: A helper to give a route a name and find it with this name in the documentation Hash&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;headers&lt;/code&gt;: A definition of the used Headers&lt;/li&gt; &#xA; &lt;li&gt;Other options can be found in &lt;a href=&#34;https://github.com/ruby-grape/grape-swagger&#34;&gt;grape-swagger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Grape.configure&lt;/code&gt; to set up global settings at load time. Currently the configurable settings are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;param_builder&lt;/code&gt;: Sets the &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#parameters&#34;&gt;Parameter Builder&lt;/a&gt;, defaults to &lt;code&gt;Grape::Extensions::ActiveSupport::HashWithIndifferentAccess::ParamBuilder&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To change a setting value make sure that at some point during load time the following code runs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Grape.configure do |config|&#xA;  config.setting = value&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, for the &lt;code&gt;param_builder&lt;/code&gt;, the following code could run in an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Grape.configure do |config|&#xA;  config.param_builder = Grape::Extensions::Hashie::Mash::ParamBuilder&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also configure a single API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;API.configure do |config|&#xA;  config[key] = value&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will be available inside the API with &lt;code&gt;configuration&lt;/code&gt;, as if it were &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#mount-configuration&#34;&gt;mount configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Request parameters are available through the &lt;code&gt;params&lt;/code&gt; hash object. This includes &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; parameters, along with any named parameters you specify in your route strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get :public_timeline do&#xA;  Status.order(params[:sort_by])&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parameters are automatically populated from the request body on &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; for form input, JSON and XML content-types.&lt;/p&gt; &#xA;&lt;p&gt;The request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -d &#39;{&#34;text&#34;: &#34;140 characters&#34;}&#39; &#39;http://localhost:9292/statuses&#39; -H Content-Type:application/json -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Grape endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post &#39;/statuses&#39; do&#xA;  Status.create!(text: params[:text])&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multipart POSTs and PUTs are supported as well.&lt;/p&gt; &#xA;&lt;p&gt;The request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --form image_file=&#39;@image.jpg;type=image/jpg&#39; http://localhost:9292/upload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Grape endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post &#39;upload&#39; do&#xA;  # file in params[:image_file]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the case of conflict between either of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;route string parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; parameters&lt;/li&gt; &#xA; &lt;li&gt;the contents of the request body on &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Route string parameters will have precedence.&lt;/p&gt; &#xA;&lt;h3&gt;Params Class&lt;/h3&gt; &#xA;&lt;p&gt;By default parameters are available as &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;. This can be changed to, for example, Ruby &lt;code&gt;Hash&lt;/code&gt; or &lt;code&gt;Hashie::Mash&lt;/code&gt; for the entire API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  include Grape::Extensions::Hashie::Mash::ParamBuilder&#xA;&#xA;  params do&#xA;    optional :color, type: String&#xA;  end&#xA;  get do&#xA;    params.color # instead of params[:color]&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The class can also be overridden on individual parameter blocks using &lt;code&gt;build_with&lt;/code&gt; as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  build_with Grape::Extensions::Hash::ParamBuilder&#xA;  optional :color, type: String&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or globally with the &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &lt;code&gt;Grape.configure.param_builder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the example above, &lt;code&gt;params[&#34;color&#34;]&lt;/code&gt; will return &lt;code&gt;nil&lt;/code&gt; since &lt;code&gt;params&lt;/code&gt; is a plain &lt;code&gt;Hash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available parameter builders are &lt;code&gt;Grape::Extensions::Hash::ParamBuilder&lt;/code&gt;, &lt;code&gt;Grape::Extensions::ActiveSupport::HashWithIndifferentAccess::ParamBuilder&lt;/code&gt; and &lt;code&gt;Grape::Extensions::Hashie::Mash::ParamBuilder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Declared&lt;/h3&gt; &#xA;&lt;p&gt;Grape allows you to access only the parameters that have been declared by your &lt;code&gt;params&lt;/code&gt; block. It will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filter out the params that have been passed, but are not allowed.&lt;/li&gt; &#xA; &lt;li&gt;Include any optional params that are declared but not passed.&lt;/li&gt; &#xA; &lt;li&gt;Perform any parameter renaming on the resulting hash.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consider the following API endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;post &#39;users/signup&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not specify any parameters, &lt;code&gt;declared&lt;/code&gt; will return an empty hash.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{&#34;user&#34;: {&#34;first_name&#34;:&#34;first name&#34;, &#34;last_name&#34;: &#34;last name&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once we add parameters requirements, grape will start returning only the declared parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;params do&#xA;  optional :user, type: Hash do&#xA;    optional :first_name, type: String&#xA;    optional :last_name, type: String&#xA;  end&#xA;end&#xA;&#xA;post &#39;users/signup&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{&#34;user&#34;: {&#34;first_name&#34;:&#34;first name&#34;, &#34;last_name&#34;: &#34;last name&#34;, &#34;random&#34;: &#34;never shown&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;,&#xA;      &#34;last_name&#34;: &#34;last name&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Missing params that are declared as type &lt;code&gt;Hash&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; will be included.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;params do&#xA;  optional :user, type: Hash do&#xA;    optional :first_name, type: String&#xA;    optional :last_name, type: String&#xA;  end&#xA;  optional :widgets, type: Array&#xA;end&#xA;&#xA;post &#39;users/signup&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: null,&#xA;      &#34;last_name&#34;: null&#xA;    },&#xA;    &#34;widgets&#34;: []&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The returned hash is an &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;#declared&lt;/code&gt; method is not available to &lt;code&gt;before&lt;/code&gt; filters, as those are evaluated prior to parameter coercion.&lt;/p&gt; &#xA;&lt;h3&gt;Include Parent Namespaces&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;declared(params)&lt;/code&gt; includes parameters that were defined in all parent namespaces. If you want to return only parameters from your current namespace, you can set &lt;code&gt;include_parent_namespaces&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;namespace :parent do&#xA;  params do&#xA;    requires :parent_name, type: String&#xA;  end&#xA;&#xA;  namespace &#39;:parent_name&#39; do&#xA;    params do&#xA;      requires :child_name, type: String&#xA;    end&#xA;    get &#39;:child_name&#39; do&#xA;      {&#xA;        &#39;without_parent_namespaces&#39; =&amp;gt; declared(params, include_parent_namespaces: false),&#xA;        &#39;with_parent_namespaces&#39; =&amp;gt; declared(params, include_parent_namespaces: true),&#xA;      }&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET -H &#34;Content-Type: application/json&#34; localhost:9292/parent/foo/bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;without_parent_namespaces&#34;: {&#xA;    &#34;child_name&#34;: &#34;bar&#34;&#xA;  },&#xA;  &#34;with_parent_namespaces&#34;: {&#xA;    &#34;parent_name&#34;: &#34;foo&#34;,&#xA;    &#34;child_name&#34;: &#34;bar&#34;&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Include Missing&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;declared(params)&lt;/code&gt; includes parameters that have &lt;code&gt;nil&lt;/code&gt; values. If you want to return only the parameters that are not &lt;code&gt;nil&lt;/code&gt;, you can use the &lt;code&gt;include_missing&lt;/code&gt; option. By default, &lt;code&gt;include_missing&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. Consider the following API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;params do&#xA;  requires :user, type: Hash do&#xA;    requires :first_name, type: String&#xA;    optional :last_name, type: String&#xA;  end&#xA;end&#xA;&#xA;post &#39;users/signup&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params, include_missing: false) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{&#34;user&#34;: {&#34;first_name&#34;:&#34;first name&#34;, &#34;random&#34;: &#34;never shown&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with include_missing:false&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with include_missing:true&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;,&#xA;      &#34;last_name&#34;: null&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also works on nested hashes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;&#xA;params do&#xA;  requires :user, type: Hash do&#xA;    requires :first_name, type: String&#xA;    optional :last_name, type: String&#xA;    requires :address, type: Hash do&#xA;      requires :city, type: String&#xA;      optional :region, type: String&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;post &#39;users/signup&#39; do&#xA;  { &#39;declared_params&#39; =&amp;gt; declared(params, include_missing: false) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{&#34;user&#34;: {&#34;first_name&#34;:&#34;first name&#34;, &#34;random&#34;: &#34;never shown&#34;, &#34;address&#34;: { &#34;city&#34;: &#34;SF&#34;}}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with include_missing:false&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;,&#xA;      &#34;address&#34;: {&#xA;        &#34;city&#34;: &#34;SF&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with include_missing:true&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;,&#xA;      &#34;last_name&#34;: null,&#xA;      &#34;address&#34;: {&#xA;        &#34;city&#34;: &#34;Zurich&#34;,&#xA;        &#34;region&#34;: null&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that an attribute with a &lt;code&gt;nil&lt;/code&gt; value is not considered &lt;em&gt;missing&lt;/em&gt; and will also be returned when &lt;code&gt;include_missing&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; localhost:9292/users/signup -d &#39;{&#34;user&#34;: {&#34;first_name&#34;:&#34;first name&#34;, &#34;last_name&#34;: null, &#34;address&#34;: { &#34;city&#34;: &#34;SF&#34;}}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response with include_missing:false&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;declared_params&#34;: {&#xA;    &#34;user&#34;: {&#xA;      &#34;first_name&#34;: &#34;first name&#34;,&#xA;      &#34;last_name&#34;: null,&#xA;      &#34;address&#34;: { &#34;city&#34;: &#34;SF&#34;}&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameter Validation and Coercion&lt;/h2&gt; &#xA;&lt;p&gt;You can define validations and coercion options for your parameters using a &lt;code&gt;params&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :id, type: Integer&#xA;  optional :text, type: String, regexp: /\A[a-z]+\z/&#xA;  group :media, type: Hash do&#xA;    requires :url&#xA;  end&#xA;  optional :audio, type: Hash do&#xA;    requires :format, type: Symbol, values: [:mp3, :wav, :aac, :ogg], default: :mp3&#xA;  end&#xA;  mutually_exclusive :media, :audio&#xA;end&#xA;put &#39;:id&#39; do&#xA;  # params[:id] is an Integer&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a type is specified an implicit validation is done after the coercion to ensure the output type is the one declared.&lt;/p&gt; &#xA;&lt;p&gt;Optional parameters can have a default value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :color, type: String, default: &#39;blue&#39;&#xA;  optional :random_number, type: Integer, default: -&amp;gt; { Random.rand(1..100) }&#xA;  optional :non_random_number, type: Integer, default:  Random.rand(1..100)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default values are eagerly evaluated. Above &lt;code&gt;:non_random_number&lt;/code&gt; will evaluate to the same number for each call to the endpoint of this &lt;code&gt;params&lt;/code&gt; block. To have the default evaluate lazily with each request use a lambda, like &lt;code&gt;:random_number&lt;/code&gt; above.&lt;/p&gt; &#xA;&lt;p&gt;Note that default values will be passed through to any validation options specified. The following example will always fail if &lt;code&gt;:color&lt;/code&gt; is not explicitly provided.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :color, type: String, default: &#39;blue&#39;, values: [&#39;red&#39;, &#39;green&#39;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The correct implementation is to ensure the default value passes all validations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :color, type: String, default: &#39;blue&#39;, values: [&#39;blue&#39;, &#39;red&#39;, &#39;green&#39;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported Parameter Types&lt;/h3&gt; &#xA;&lt;p&gt;The following are all valid types, supported out of the box by Grape:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integer&lt;/li&gt; &#xA; &lt;li&gt;Float&lt;/li&gt; &#xA; &lt;li&gt;BigDecimal&lt;/li&gt; &#xA; &lt;li&gt;Numeric&lt;/li&gt; &#xA; &lt;li&gt;Date&lt;/li&gt; &#xA; &lt;li&gt;DateTime&lt;/li&gt; &#xA; &lt;li&gt;Time&lt;/li&gt; &#xA; &lt;li&gt;Boolean&lt;/li&gt; &#xA; &lt;li&gt;String&lt;/li&gt; &#xA; &lt;li&gt;Symbol&lt;/li&gt; &#xA; &lt;li&gt;Rack::Multipart::UploadedFile (alias &lt;code&gt;File&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;JSON&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integer/Fixnum and Coercions&lt;/h3&gt; &#xA;&lt;p&gt;Please be aware that the behavior differs between Ruby 2.4 and earlier versions. In Ruby 2.4, values consisting of numbers are converted to Integer, but in earlier versions it will be treated as Fixnum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :integers, type: Hash do&#xA;    requires :int, coerce: Integer&#xA;  end&#xA;end&#xA;get &#39;/int&#39; do&#xA;  params[:integers][:int].class&#xA;end&#xA;&#xA;...&#xA;&#xA;get &#39;/int&#39; integers: { int: &#39;45&#39; }&#xA;  #=&amp;gt; Integer in ruby 2.4&#xA;  #=&amp;gt; Fixnum in earlier ruby versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Types and Coercions&lt;/h3&gt; &#xA;&lt;p&gt;Aside from the default set of supported types listed above, any class can be used as a type as long as an explicit coercion method is supplied. If the type implements a class-level &lt;code&gt;parse&lt;/code&gt; method, Grape will use it automatically. This method must take one string argument and return an instance of the correct type, or return an instance of &lt;code&gt;Grape::Types::InvalidValue&lt;/code&gt; which optionally accepts a message to be returned in the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Color&#xA;  attr_reader :value&#xA;  def initialize(color)&#xA;    @value = color&#xA;  end&#xA;&#xA;  def self.parse(value)&#xA;    return new(value) if %w[blue red green]).include?(value)&#xA;&#xA;    Grape::Types::InvalidValue.new(&#39;Unsupported color&#39;)&#xA;  end&#xA;end&#xA;&#xA;params do&#xA;  requires :color, type: Color, default: Color.new(&#39;blue&#39;)&#xA;  requires :more_colors, type: Array[Color] # Collections work&#xA;  optional :unique_colors, type: Set[Color] # Duplicates discarded&#xA;end&#xA;&#xA;get &#39;/stuff&#39; do&#xA;  # params[:color] is already a Color.&#xA;  params[:color].value&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, a custom coercion method may be supplied for any type of parameter using &lt;code&gt;coerce_with&lt;/code&gt;. Any class or object may be given that implements a &lt;code&gt;parse&lt;/code&gt; or &lt;code&gt;call&lt;/code&gt; method, in that order of precedence. The method must accept a single string parameter, and the return value must match the given &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :passwd, type: String, coerce_with: Base64.method(:decode64)&#xA;  requires :loud_color, type: Color, coerce_with: -&amp;gt;(c) { Color.parse(c.downcase) }&#xA;&#xA;  requires :obj, type: Hash, coerce_with: JSON do&#xA;    requires :words, type: Array[String], coerce_with: -&amp;gt;(val) { val.split(/\s+/) }&#xA;    optional :time, type: Time, coerce_with: Chronic&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, a &lt;code&gt;nil&lt;/code&gt; value will call the custom coercion method, while a missing parameter will not.&lt;/p&gt; &#xA;&lt;p&gt;Example of use of &lt;code&gt;coerce_with&lt;/code&gt; with a lambda (a class with a &lt;code&gt;parse&lt;/code&gt; method could also have been used) It will parse a string and return an Array of Integers, matching the &lt;code&gt;Array[Integer]&lt;/code&gt; &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :values, type: Array[Integer], coerce_with: -&amp;gt;(val) { val.split(/\s+/).map(&amp;amp;:to_i) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grape will assert that coerced values match the given &lt;code&gt;type&lt;/code&gt;, and will reject the request if they do not. To override this behaviour, custom types may implement a &lt;code&gt;parsed?&lt;/code&gt; method that should accept a single argument and return &lt;code&gt;true&lt;/code&gt; if the value passes type validation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SecureUri&#xA;  def self.parse(value)&#xA;    URI.parse value&#xA;  end&#xA;&#xA;  def self.parsed?(value)&#xA;    value.is_a? URI::HTTPS&#xA;  end&#xA;end&#xA;&#xA;params do&#xA;  requires :secure_uri, type: SecureUri&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multipart File Parameters&lt;/h3&gt; &#xA;&lt;p&gt;Grape makes use of &lt;code&gt;Rack::Request&lt;/code&gt;&#39;s built-in support for multipart file parameters. Such parameters can be declared with &lt;code&gt;type: File&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :avatar, type: File&#xA;end&#xA;post &#39;/&#39; do&#xA;  params[:avatar][:filename] # =&amp;gt; &#39;avatar.png&#39;&#xA;  params[:avatar][:type] # =&amp;gt; &#39;image/png&#39;&#xA;  params[:avatar][:tempfile] # =&amp;gt; #&amp;lt;File&amp;gt;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;First-Class &lt;code&gt;JSON&lt;/code&gt; Types&lt;/h3&gt; &#xA;&lt;p&gt;Grape supports complex parameters given as JSON-formatted strings using the special &lt;code&gt;type: JSON&lt;/code&gt; declaration. JSON objects and arrays of objects are accepted equally, with nested validation rules applied to all objects in either case:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :json, type: JSON do&#xA;    requires :int, type: Integer, values: [1, 2, 3]&#xA;  end&#xA;end&#xA;get &#39;/&#39; do&#xA;  params[:json].inspect&#xA;end&#xA;&#xA;client.get(&#39;/&#39;, json: &#39;{&#34;int&#34;:1}&#39;) # =&amp;gt; &#34;{:int=&amp;gt;1}&#34;&#xA;client.get(&#39;/&#39;, json: &#39;[{&#34;int&#34;:&#34;1&#34;}]&#39;) # =&amp;gt; &#34;[{:int=&amp;gt;1}]&#34;&#xA;&#xA;client.get(&#39;/&#39;, json: &#39;{&#34;int&#34;:4}&#39;) # =&amp;gt; HTTP 400&#xA;client.get(&#39;/&#39;, json: &#39;[{&#34;int&#34;:4}]&#39;) # =&amp;gt; HTTP 400&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally &lt;code&gt;type: Array[JSON]&lt;/code&gt; may be used, which explicitly marks the parameter as an array of objects. If a single object is supplied it will be wrapped.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :json, type: Array[JSON] do&#xA;    requires :int, type: Integer&#xA;  end&#xA;end&#xA;get &#39;/&#39; do&#xA;  params[:json].each { |obj| ... } # always works&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For stricter control over the type of JSON structure which may be supplied, use &lt;code&gt;type: Array, coerce_with: JSON&lt;/code&gt; or &lt;code&gt;type: Hash, coerce_with: JSON&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Allowed Types&lt;/h3&gt; &#xA;&lt;p&gt;Variant-type parameters can be declared using the &lt;code&gt;types&lt;/code&gt; option rather than &lt;code&gt;type&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :status_code, types: [Integer, String, Array[Integer, String]]&#xA;end&#xA;get &#39;/&#39; do&#xA;  params[:status_code].inspect&#xA;end&#xA;&#xA;client.get(&#39;/&#39;, status_code: &#39;OK_GOOD&#39;) # =&amp;gt; &#34;OK_GOOD&#34;&#xA;client.get(&#39;/&#39;, status_code: 300) # =&amp;gt; 300&#xA;client.get(&#39;/&#39;, status_code: %w(404 NOT FOUND)) # =&amp;gt; [404, &#34;NOT&#34;, &#34;FOUND&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a special case, variant-member-type collections may also be declared, by passing a &lt;code&gt;Set&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; with more than one member to &lt;code&gt;type&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :status_codes, type: Array[Integer,String]&#xA;end&#xA;get &#39;/&#39; do&#xA;  params[:status_codes].inspect&#xA;end&#xA;&#xA;client.get(&#39;/&#39;, status_codes: %w(1 two)) # =&amp;gt; [1, &#34;two&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Validation of Nested Parameters&lt;/h3&gt; &#xA;&lt;p&gt;Parameters can be nested using &lt;code&gt;group&lt;/code&gt; or by calling &lt;code&gt;requires&lt;/code&gt; or &lt;code&gt;optional&lt;/code&gt; with a block. In the &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#parameter-validation-and-coercion&#34;&gt;above example&lt;/a&gt;, this means &lt;code&gt;params[:media][:url]&lt;/code&gt; is required along with &lt;code&gt;params[:id]&lt;/code&gt;, and &lt;code&gt;params[:audio][:format]&lt;/code&gt; is required only if &lt;code&gt;params[:audio]&lt;/code&gt; is present. With a block, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;optional&lt;/code&gt; accept an additional option &lt;code&gt;type&lt;/code&gt; which can be either &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Hash&lt;/code&gt;, and defaults to &lt;code&gt;Array&lt;/code&gt;. Depending on the value, the nested parameters will be treated either as values of a hash or as values of hashes in an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :preferences, type: Array do&#xA;    requires :key&#xA;    requires :value&#xA;  end&#xA;&#xA;  requires :name, type: Hash do&#xA;    requires :first_name&#xA;    requires :last_name&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependent Parameters&lt;/h3&gt; &#xA;&lt;p&gt;Suppose some of your parameters are only relevant if another parameter is given; Grape allows you to express this relationship through the &lt;code&gt;given&lt;/code&gt; method in your parameters block, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :shelf_id, type: Integer&#xA;  given :shelf_id do&#xA;    requires :bin_id, type: Integer&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above Grape will use &lt;code&gt;blank?&lt;/code&gt; to check whether the &lt;code&gt;shelf_id&lt;/code&gt; param is present.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;given&lt;/code&gt; also takes a &lt;code&gt;Proc&lt;/code&gt; with custom code. Below, the param &lt;code&gt;description&lt;/code&gt; is required only if the value of &lt;code&gt;category&lt;/code&gt; is equal &lt;code&gt;foo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :category&#xA;  given category: -&amp;gt;(val) { val == &#39;foo&#39; } do&#xA;    requires :description&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can rename parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :category, as: :type&#xA;  given type: -&amp;gt;(val) { val == &#39;foo&#39; } do&#xA;    requires :description&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: param in &lt;code&gt;given&lt;/code&gt; should be the renamed one. In the example, it should be &lt;code&gt;type&lt;/code&gt;, not &lt;code&gt;category&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Group Options&lt;/h3&gt; &#xA;&lt;p&gt;Parameters options can be grouped. It can be useful if you want to extract common validation or types for several parameters. The example below presents a typical case when parameters share common options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :first_name, type: String, regexp: /w+/, desc: &#39;First name&#39;&#xA;  requires :middle_name, type: String, regexp: /w+/, desc: &#39;Middle name&#39;&#xA;  requires :last_name, type: String, regexp: /w+/, desc: &#39;Last name&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grape allows you to present the same logic through the &lt;code&gt;with&lt;/code&gt; method in your parameters block, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  with(type: String, regexp: /w+/) do&#xA;    requires :first_name, desc: &#39;First name&#39;&#xA;    requires :middle_name, desc: &#39;Middle name&#39;&#xA;    requires :last_name, desc: &#39;Last name&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Renaming&lt;/h3&gt; &#xA;&lt;p&gt;You can rename parameters using &lt;code&gt;as&lt;/code&gt;, which can be useful when refactoring existing APIs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;resource :users do&#xA;  params do&#xA;    requires :email_address, as: :email&#xA;    requires :password&#xA;  end&#xA;  post do&#xA;    User.create!(declared(params)) # User takes email and password&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value passed to &lt;code&gt;as&lt;/code&gt; will be the key when calling &lt;code&gt;params&lt;/code&gt; or &lt;code&gt;declared(params)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Built-in Validators&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;allow_blank&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be defined as &lt;code&gt;allow_blank&lt;/code&gt;, ensuring that they contain a value. By default, &lt;code&gt;requires&lt;/code&gt; only validates that a parameter was sent in the request, regardless its value. With &lt;code&gt;allow_blank: false&lt;/code&gt;, empty values or whitespace only values are invalid.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;allow_blank&lt;/code&gt; can be combined with both &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;optional&lt;/code&gt;. If the parameter is required, it has to contain a value. If it&#39;s optional, it&#39;s possible to not send it in the request, but if it&#39;s being sent, it has to have some value, and not an empty string/only whitespaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :username, allow_blank: false&#xA;  optional :first_name, allow_blank: false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;values&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be restricted to a specific set of values with the &lt;code&gt;:values&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :status, type: Symbol, values: [:not_started, :processing, :done]&#xA;  optional :numbers, type: Array[Integer], default: 1, values: [1, 2, 3, 5, 8]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supplying a range to the &lt;code&gt;:values&lt;/code&gt; option ensures that the parameter is (or parameters are) included in that range (using &lt;code&gt;Range#include?&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :latitude, type: Float, values: -90.0..+90.0&#xA;  requires :longitude, type: Float, values: -180.0..+180.0&#xA;  optional :letters, type: Array[String], values: &#39;a&#39;..&#39;z&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;em&gt;both&lt;/em&gt; range endpoints have to be a &lt;code&gt;#kind_of?&lt;/code&gt; your &lt;code&gt;:type&lt;/code&gt; option (if you don&#39;t supply the &lt;code&gt;:type&lt;/code&gt; option, it will be guessed to be equal to the class of the range&#39;s first endpoint). So the following is invalid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :invalid1, type: Float, values: 0..10 # 0.kind_of?(Float) =&amp;gt; false&#xA;  optional :invalid2, values: 0..10.0 # 10.0.kind_of?(0.class) =&amp;gt; false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:values&lt;/code&gt; option can also be supplied with a &lt;code&gt;Proc&lt;/code&gt;, evaluated lazily with each request. If the Proc has arity zero (i.e. it takes no arguments) it is expected to return either a list or a range which will then be used to validate the parameter.&lt;/p&gt; &#xA;&lt;p&gt;For example, given a status model you may want to restrict by hashtags that you have previously defined in the &lt;code&gt;HashTag&lt;/code&gt; model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :hashtag, type: String, values: -&amp;gt; { Hashtag.all.map(&amp;amp;:tag) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, a Proc with arity one (i.e. taking one argument) can be used to explicitly validate each parameter value. In that case, the Proc is expected to return a truthy value if the parameter value is valid. The parameter will be considered invalid if the Proc returns a falsy value or if it raises a StandardError.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :number, type: Integer, values: -&amp;gt;(v) { v.even? &amp;amp;&amp;amp; v &amp;lt; 25 }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While Procs are convenient for single cases, consider using &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#custom-validators&#34;&gt;Custom Validators&lt;/a&gt; in cases where a validation is used more than once.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#allow_blank&#34;&gt;allow_blank&lt;/a&gt; validator applies while using &lt;code&gt;:values&lt;/code&gt;. In the following example the absence of &lt;code&gt;:allow_blank&lt;/code&gt; does not prevent &lt;code&gt;:state&lt;/code&gt; from receiving blank values because &lt;code&gt;:allow_blank&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :state, type: Symbol, values: [:active, :inactive]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;except_values&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be restricted from having a specific set of values with the &lt;code&gt;:except_values&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;except_values&lt;/code&gt; validator behaves similarly to the &lt;code&gt;values&lt;/code&gt; validator in that it accepts either an Array, a Range, or a Proc. Unlike the &lt;code&gt;values&lt;/code&gt; validator, however, &lt;code&gt;except_values&lt;/code&gt; only accepts Procs with arity zero.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :browser, except_values: [ &#39;ie6&#39;, &#39;ie7&#39;, &#39;ie8&#39; ]&#xA;  requires :port, except_values: { value: 0..1024, message: &#39;is not allowed&#39; }&#xA;  requires :hashtag, except_values: -&amp;gt; { Hashtag.FORBIDDEN_LIST }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;same_as&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;code&gt;same_as&lt;/code&gt; option can be given to ensure that values of parameters match.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :password&#xA;  requires :password_confirmation, same_as: :password&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;regexp&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be restricted to match a specific regular expression with the &lt;code&gt;:regexp&lt;/code&gt; option. If the value does not match the regular expression an error will be returned. Note that this is true for both &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;optional&lt;/code&gt; parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :email, regexp: /.+@.+/&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The validator will pass if the parameter was sent without value. To ensure that the parameter contains a value, use &lt;code&gt;allow_blank: false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :email, allow_blank: false, regexp: /.+@.+/&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;mutually_exclusive&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be defined as &lt;code&gt;mutually_exclusive&lt;/code&gt;, ensuring that they aren&#39;t present at the same time in a request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  mutually_exclusive :beer, :wine&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple sets can be defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  mutually_exclusive :beer, :wine&#xA;  optional :scotch&#xA;  optional :aquavit&#xA;  mutually_exclusive :scotch, :aquavit&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Never define mutually exclusive sets with any required params. Two mutually exclusive required params will mean params are never valid, thus making the endpoint useless. One required param mutually exclusive with an optional param will mean the latter is never valid.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;exactly_one_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be defined as &#39;exactly_one_of&#39;, ensuring that exactly one parameter gets selected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  exactly_one_of :beer, :wine&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that using &lt;code&gt;:default&lt;/code&gt; with &lt;code&gt;mutually_exclusive&lt;/code&gt; will cause multiple parameters to always have a default value and raise a &lt;code&gt;Grape::Exceptions::Validation&lt;/code&gt; mutually exclusive exception.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;at_least_one_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be defined as &#39;at_least_one_of&#39;, ensuring that at least one parameter gets selected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  at_least_one_of :beer, :wine, :juice&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;all_or_none_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Parameters can be defined as &#39;all_or_none_of&#39;, ensuring that all or none of parameters gets selected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  all_or_none_of :beer, :wine, :juice&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nested &lt;code&gt;mutually_exclusive&lt;/code&gt;, &lt;code&gt;exactly_one_of&lt;/code&gt;, &lt;code&gt;at_least_one_of&lt;/code&gt;, &lt;code&gt;all_or_none_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;All of these methods can be used at any nested level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :food, type: Hash do&#xA;    optional :meat&#xA;    optional :fish&#xA;    optional :rice&#xA;    at_least_one_of :meat, :fish, :rice&#xA;  end&#xA;  group :drink, type: Hash do&#xA;    optional :beer&#xA;    optional :wine&#xA;    optional :juice&#xA;    exactly_one_of :beer, :wine, :juice&#xA;  end&#xA;  optional :dessert, type: Hash do&#xA;    optional :cake&#xA;    optional :icecream&#xA;    mutually_exclusive :cake, :icecream&#xA;  end&#xA;  optional :recipe, type: Hash do&#xA;    optional :oil&#xA;    optional :meat&#xA;    all_or_none_of :oil, :meat&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Namespace Validation and Coercion&lt;/h3&gt; &#xA;&lt;p&gt;Namespaces allow parameter definitions and apply to every method within the namespace.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :statuses do&#xA;  params do&#xA;    requires :user_id, type: Integer, desc: &#39;A user ID.&#39;&#xA;  end&#xA;  namespace &#39;:user_id&#39; do&#xA;    desc &#34;Retrieve a user&#39;s status.&#34;&#xA;    params do&#xA;      requires :status_id, type: Integer, desc: &#39;A status ID.&#39;&#xA;    end&#xA;    get &#39;:status_id&#39; do&#xA;      User.find(params[:user_id]).statuses.find(params[:status_id])&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;namespace&lt;/code&gt; method has a number of aliases, including: &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;resource&lt;/code&gt;, &lt;code&gt;resources&lt;/code&gt;, and &lt;code&gt;segment&lt;/code&gt;. Use whichever reads the best for your API.&lt;/p&gt; &#xA;&lt;p&gt;You can conveniently define a route parameter as a namespace using &lt;code&gt;route_param&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :statuses do&#xA;  route_param :id do&#xA;    desc &#39;Returns all replies for a status.&#39;&#xA;    get &#39;replies&#39; do&#xA;      Status.find(params[:id]).replies&#xA;    end&#xA;    desc &#39;Returns a status.&#39;&#xA;    get do&#xA;      Status.find(params[:id])&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define a route parameter type by passing to &lt;code&gt;route_param&lt;/code&gt;&#39;s options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :arithmetic do&#xA;  route_param :n, type: Integer do&#xA;    desc &#39;Returns in power&#39;&#xA;    get &#39;power&#39; do&#xA;      params[:n] ** params[:n]&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Validators&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AlphaNumeric &amp;lt; Grape::Validations::Validators::Base&#xA;  def validate_param!(attr_name, params)&#xA;    unless params[attr_name] =~ /\A[[:alnum:]]+\z/&#xA;      fail Grape::Exceptions::Validation, params: [@scope.full_name(attr_name)], message: &#39;must consist of alpha-numeric characters&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :text, alpha_numeric: true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create custom classes that take parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Length &amp;lt; Grape::Validations::Validators::Base&#xA;  def validate_param!(attr_name, params)&#xA;    unless params[attr_name].length &amp;lt;= @option&#xA;      fail Grape::Exceptions::Validation, params: [@scope.full_name(attr_name)], message: &#34;must be at the most #{@option} characters long&#34;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :text, length: 140&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create custom validation that use request to validate the attribute. For example if you want to have parameters that are available to only admins, you can do the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Admin &amp;lt; Grape::Validations::Validators::Base&#xA;  def validate(request)&#xA;    # return if the param we are checking was not in request&#xA;    # @attrs is a list containing the attribute we are currently validating&#xA;    # in our sample case this method once will get called with&#xA;    # @attrs being [:admin_field] and once with @attrs being [:admin_false_field]&#xA;    return unless request.params.key?(@attrs.first)&#xA;    # check if admin flag is set to true&#xA;    return unless @option&#xA;    # check if user is admin or not&#xA;    # as an example get a token from request and check if it&#39;s admin or not&#xA;    fail Grape::Exceptions::Validation, params: @attrs, message: &#39;Can not set admin-only field.&#39; unless request.headers[&#39;X-Access-Token&#39;] == &#39;admin&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use it in your endpoint definition as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :admin_field, type: String, admin: true&#xA;  optional :non_admin_field, type: String&#xA;  optional :admin_false_field, type: String, admin: false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every validation will have its own instance of the validator, which means that the validator can have a state.&lt;/p&gt; &#xA;&lt;h3&gt;Validation Errors&lt;/h3&gt; &#xA;&lt;p&gt;Validation and coercion errors are collected and an exception of type &lt;code&gt;Grape::Exceptions::ValidationErrors&lt;/code&gt; is raised. If the exception goes uncaught it will respond with a status of 400 and an error message. The validation errors are grouped by parameter name and can be accessed via &lt;code&gt;Grape::Exceptions::ValidationErrors#errors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default response from a &lt;code&gt;Grape::Exceptions::ValidationErrors&lt;/code&gt; is a humanly readable string, such as &#34;beer, wine are mutually exclusive&#34;, in the following example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  exactly_one_of :beer, :wine, :juice&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can rescue a &lt;code&gt;Grape::Exceptions::ValidationErrors&lt;/code&gt; and respond with a custom response or turn the response into well-formatted JSON for a JSON API that separates individual parameters and the corresponding error messages. The following &lt;code&gt;rescue_from&lt;/code&gt; example produces &lt;code&gt;[{&#34;params&#34;:[&#34;beer&#34;,&#34;wine&#34;],&#34;messages&#34;:[&#34;are mutually exclusive&#34;]}]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;subject.rescue_from Grape::Exceptions::ValidationErrors do |e|&#xA;  error! e, 400&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Grape::Exceptions::ValidationErrors#full_messages&lt;/code&gt; returns the validation messages as an array. &lt;code&gt;Grape::Exceptions::ValidationErrors#message&lt;/code&gt; joins the messages to one string.&lt;/p&gt; &#xA;&lt;p&gt;For responding with an array of validation messages, you can use &lt;code&gt;Grape::Exceptions::ValidationErrors#full_messages&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;format :json&#xA;subject.rescue_from Grape::Exceptions::ValidationErrors do |e|&#xA;  error!({ messages: e.full_messages }, 400)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grape returns all validation and coercion errors found by default. To skip all subsequent validation checks when a specific param is found invalid, use &lt;code&gt;fail_fast: true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following example will not check if &lt;code&gt;:wine&lt;/code&gt; is present unless it finds &lt;code&gt;:beer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  required :beer, fail_fast: true&#xA;  required :wine&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result of empty params would be a single &lt;code&gt;Grape::Exceptions::ValidationErrors&lt;/code&gt; error.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, no regular expression test will be performed if &lt;code&gt;:blah&lt;/code&gt; is blank in the following example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  required :blah, allow_blank: false, regexp: /blah/, fail_fast: true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;I18n&lt;/h3&gt; &#xA;&lt;p&gt;Grape supports I18n for parameter-related error messages, but will fallback to English if translations for the default locale have not been provided. See &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/lib/grape/locale/en.yml&#34;&gt;en.yml&lt;/a&gt; for message keys.&lt;/p&gt; &#xA;&lt;p&gt;In case your app enforces available locales only and :en is not included in your available locales, Grape cannot fall back to English and will return the translation key for the error message. To avoid this behaviour, either provide a translation for your default locale or add :en to your available locales.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Validation messages&lt;/h3&gt; &#xA;&lt;p&gt;Grape supports custom validation messages for parameter-related and coerce-related error messages.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;presence&lt;/code&gt;, &lt;code&gt;allow_blank&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt;, &lt;code&gt;regexp&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :name, values: { value: 1..10, message: &#39;not in range from 1 to 10&#39; }, allow_blank: { value: false, message: &#39;cannot be blank&#39; }, regexp: { value: /^[a-z]+$/, message: &#39;format is invalid&#39; }, message: &#39;is required&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;same_as&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :password&#xA;  requires :password_confirmation, same_as: { value: :password, message: &#39;not match&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;all_or_none_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  all_or_none_of :beer, :wine, :juice, message: &#34;all params are required or none is required&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;mutually_exclusive&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  mutually_exclusive :beer, :wine, :juice, message: &#34;are mutually exclusive cannot pass both params&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;exactly_one_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  exactly_one_of :beer, :wine, :juice, message: { exactly_one: &#34;are missing, exactly one parameter is required&#34;, mutual_exclusion: &#34;are mutually exclusive, exactly one parameter is required&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;at_least_one_of&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :beer&#xA;  optional :wine&#xA;  optional :juice&#xA;  at_least_one_of :beer, :wine, :juice, message: &#34;are missing, please specify at least one param&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Coerce&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :int, type: { value: Integer, message: &#34;type cast is invalid&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;With Lambdas&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :name, values: { value: -&amp;gt; { (1..10).to_a }, message: &#39;not in range from 1 to 10&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Pass symbols for i18n translations&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can pass a symbol if you want i18n translations for your custom validation messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :name, message: :name_required&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# en.yml&#xA;&#xA;en:&#xA;  grape:&#xA;    errors:&#xA;      format: ! &#39;%{attributes} %{message}&#39;&#xA;      messages:&#xA;        name_required: &#39;must be present&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Overriding Attribute Names&lt;/h4&gt; &#xA;&lt;p&gt;You can also override attribute names.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# en.yml&#xA;&#xA;en:&#xA;  grape:&#xA;    errors:&#xA;      format: ! &#39;%{attributes} %{message}&#39;&#xA;      messages:&#xA;        name_required: &#39;must be present&#39;&#xA;      attributes:&#xA;        name: &#39;Oops! Name&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will produce &#39;Oops! Name must be present&#39;&lt;/p&gt; &#xA;&lt;h4&gt;With Default&lt;/h4&gt; &#xA;&lt;p&gt;You cannot set a custom message option for Default as it requires interpolation &lt;code&gt;%{option1}: %{value1} is incompatible with %{option2}: %{value2}&lt;/code&gt;. You can change the default error message for Default by changing the &lt;code&gt;incompatible_option_values&lt;/code&gt; message key inside &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/lib/grape/locale/en.yml&#34;&gt;en.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  requires :name, values: { value: -&amp;gt; { (1..10).to_a }, message: &#39;not in range from 1 to 10&#39; }, default: 5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Headers&lt;/h2&gt; &#xA;&lt;h3&gt;Request&lt;/h3&gt; &#xA;&lt;p&gt;Request headers are available through the &lt;code&gt;headers&lt;/code&gt; helper or from &lt;code&gt;env&lt;/code&gt; in their original form.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get do&#xA;  error!(&#39;Unauthorized&#39;, 401) unless headers[&#39;Secret-Password&#39;] == &#39;swordfish&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get do&#xA;  error!(&#39;Unauthorized&#39;, 401) unless env[&#39;HTTP_SECRET_PASSWORD&#39;] == &#39;swordfish&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Header Case Handling&lt;/h4&gt; &#xA;&lt;p&gt;The above example may have been requested as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -H &#34;secret_PassWord: swordfish&#34; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The header name will have been normalized for you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the &lt;code&gt;header&lt;/code&gt; helper names will be coerced into a capitalized kebab case.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;env&lt;/code&gt; collection they appear in all uppercase, in snake case, and prefixed with &#39;HTTP_&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The header name will have been normalized per HTTP standards defined in &lt;a href=&#34;https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2&#34;&gt;RFC2616 Section 4.2&lt;/a&gt; regardless of what is being sent by a client.&lt;/p&gt; &#xA;&lt;h3&gt;Response&lt;/h3&gt; &#xA;&lt;p&gt;You can set a response header with &lt;code&gt;header&lt;/code&gt; inside an API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;header &#39;X-Robots-Tag&#39;, &#39;noindex&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When raising &lt;code&gt;error!&lt;/code&gt;, pass additional headers as arguments. Additional headers will be merged with headers set before &lt;code&gt;error!&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error! &#39;Unauthorized&#39;, 401, &#39;X-Error-Detail&#39; =&amp;gt; &#39;Invalid token.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Routes&lt;/h2&gt; &#xA;&lt;p&gt;To define routes you can use the &lt;code&gt;route&lt;/code&gt; method or the shorthands for the HTTP verbs. To define a route that accepts any route set to &lt;code&gt;:any&lt;/code&gt;. Parts of the path that are denoted with a colon will be interpreted as route parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;route :get, &#39;status&#39; do&#xA;end&#xA;&#xA;# is the same as&#xA;&#xA;get &#39;status&#39; do&#xA;end&#xA;&#xA;# is the same as&#xA;&#xA;get :status do&#xA;end&#xA;&#xA;# is NOT the same as&#xA;&#xA;get &#39;:status&#39; do # this makes params[:status] available&#xA;end&#xA;&#xA;# This will make both params[:status_id] and params[:id] available&#xA;&#xA;get &#39;statuses/:status_id/reviews/:id&#39; do&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To declare a namespace that prefixes all routes within, use the &lt;code&gt;namespace&lt;/code&gt; method. &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;resource&lt;/code&gt;, &lt;code&gt;resources&lt;/code&gt; and &lt;code&gt;segment&lt;/code&gt; are aliases to this method. Any endpoints within will share their parent context as well as any configuration done in the namespace context.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;route_param&lt;/code&gt; method is a convenient method for defining a parameter route segment. If you define a type, it will add a validation for this parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;route_param :id, type: Integer do&#xA;  get &#39;status&#39; do&#xA;  end&#xA;end&#xA;&#xA;# is the same as&#xA;&#xA;namespace &#39;:id&#39; do&#xA;  params do&#xA;    requires :id, type: Integer&#xA;  end&#xA;&#xA;  get &#39;status&#39; do&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can define requirements for your named route parameters using regular expressions on namespace or endpoint. The route will match only if all requirements are met.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;:id&#39;, requirements: { id: /[0-9]*/ } do&#xA;  Status.find(params[:id])&#xA;end&#xA;&#xA;namespace :outer, requirements: { id: /[0-9]*/ } do&#xA;  get :id do&#xA;  end&#xA;&#xA;  get &#39;:id/edit&#39; do&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;p&gt;You can define helper methods that your endpoints can use with the &lt;code&gt;helpers&lt;/code&gt; macro by either giving a block or an array of modules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module StatusHelpers&#xA;  def user_info(user)&#xA;    &#34;#{user} has statused #{user.statuses} status(s)&#34;&#xA;  end&#xA;end&#xA;&#xA;module HttpCodesHelpers&#xA;  def unauthorized&#xA;    401&#xA;  end&#xA;end&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  # define helpers with a block&#xA;  helpers do&#xA;    def current_user&#xA;      User.find(params[:user_id])&#xA;    end&#xA;  end&#xA;&#xA;  # or mix in an array of modules&#xA;  helpers StatusHelpers, HttpCodesHelpers&#xA;&#xA;  before do&#xA;    error!(&#39;Access Denied&#39;, unauthorized) unless current_user&#xA;  end&#xA;&#xA;  get &#39;info&#39; do&#xA;    # helpers available in your endpoint and filters&#xA;    user_info(current_user)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define reusable &lt;code&gt;params&lt;/code&gt; using &lt;code&gt;helpers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  helpers do&#xA;    params :pagination do&#xA;      optional :page, type: Integer&#xA;      optional :per_page, type: Integer&#xA;    end&#xA;  end&#xA;&#xA;  desc &#39;Get collection&#39;&#xA;  params do&#xA;    use :pagination # aliases: includes, use_scope&#xA;  end&#xA;  get do&#xA;    Collection.page(params[:page]).per(params[:per_page])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define reusable &lt;code&gt;params&lt;/code&gt; using shared helpers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module SharedParams&#xA;  extend Grape::API::Helpers&#xA;&#xA;  params :period do&#xA;    optional :start_date&#xA;    optional :end_date&#xA;  end&#xA;&#xA;  params :pagination do&#xA;    optional :page, type: Integer&#xA;    optional :per_page, type: Integer&#xA;  end&#xA;end&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  helpers SharedParams&#xA;&#xA;  desc &#39;Get collection.&#39;&#xA;  params do&#xA;    use :period, :pagination&#xA;  end&#xA;&#xA;  get do&#xA;    Collection&#xA;      .from(params[:start_date])&#xA;      .to(params[:end_date])&#xA;      .page(params[:page])&#xA;      .per(params[:per_page])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Helpers support blocks that can help set default values. The following API can return a collection sorted by &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;created_at&lt;/code&gt; in &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt; order.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module SharedParams&#xA;  extend Grape::API::Helpers&#xA;&#xA;  params :order do |options|&#xA;    optional :order_by, type: Symbol, values: options[:order_by], default: options[:default_order_by]&#xA;    optional :order, type: Symbol, values: %i(asc desc), default: options[:default_order]&#xA;  end&#xA;end&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  helpers SharedParams&#xA;&#xA;  desc &#39;Get a sorted collection.&#39;&#xA;  params do&#xA;    use :order, order_by: %i(id created_at), default_order_by: :created_at, default_order: :asc&#xA;  end&#xA;&#xA;  get do&#xA;    Collection.send(params[:order], params[:order_by])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Path Helpers&lt;/h2&gt; &#xA;&lt;p&gt;If you need methods for generating paths inside your endpoints, please see the &lt;a href=&#34;https://github.com/reprah/grape-route-helpers&#34;&gt;grape-route-helpers&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;h2&gt;Parameter Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can attach additional documentation to &lt;code&gt;params&lt;/code&gt; using a &lt;code&gt;documentation&lt;/code&gt; hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params do&#xA;  optional :first_name, type: String, documentation: { example: &#39;Jim&#39; }&#xA;  requires :last_name, type: String, documentation: { example: &#39;Smith&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If documentation isn&#39;t needed (for instance, it is an internal API), documentation can be disabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  do_not_document!&#xA;&#xA;  # endpoints...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, Grape won&#39;t create objects related to documentation which are retained in RAM forever.&lt;/p&gt; &#xA;&lt;h2&gt;Cookies&lt;/h2&gt; &#xA;&lt;p&gt;You can set, get and delete your cookies very simply using &lt;code&gt;cookies&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;status_count&#39; do&#xA;    cookies[:status_count] ||= 0&#xA;    cookies[:status_count] += 1&#xA;    { status_count: cookies[:status_count] }&#xA;  end&#xA;&#xA;  delete &#39;status_count&#39; do&#xA;    { status_count: cookies.delete(:status_count) }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a hash-based syntax to set more than one value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cookies[:status_count] = {&#xA;  value: 0,&#xA;  expires: Time.tomorrow,&#xA;  domain: &#39;.twitter.com&#39;,&#xA;  path: &#39;/&#39;&#xA;}&#xA;&#xA;cookies[:status_count][:value] +=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delete a cookie with &lt;code&gt;delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cookies.delete :status_count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify an optional path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cookies.delete :status_count, path: &#39;/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTTP Status Code&lt;/h2&gt; &#xA;&lt;p&gt;By default Grape returns a 201 for &lt;code&gt;POST&lt;/code&gt;-Requests, 204 for &lt;code&gt;DELETE&lt;/code&gt;-Requests that don&#39;t return any content, and 200 status code for all other Requests. You can use &lt;code&gt;status&lt;/code&gt; to query and set the actual HTTP Status Code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post do&#xA;  status 202&#xA;&#xA;  if status == 200&#xA;     # do some thing&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use one of status codes symbols that are provided by &lt;a href=&#34;http://www.rubydoc.info/github/rack/rack/Rack/Utils#HTTP_STATUS_CODES-constant&#34;&gt;Rack utils&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post do&#xA;  status :no_content&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Redirecting&lt;/h2&gt; &#xA;&lt;p&gt;You can redirect to a new url temporarily (302) or permanently (301).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redirect &#39;/statuses&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redirect &#39;/statuses&#39;, permanent: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recognizing Path&lt;/h2&gt; &#xA;&lt;p&gt;You can recognize the endpoint matched with given path.&lt;/p&gt; &#xA;&lt;p&gt;This API returns an instance of &lt;code&gt;Grape::Endpoint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/statuses&#39; do&#xA;  end&#xA;end&#xA;&#xA;API.recognize_path &#39;/statuses&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Allowed Methods&lt;/h2&gt; &#xA;&lt;p&gt;When you add a &lt;code&gt;GET&lt;/code&gt; route for a resource, a route for the &lt;code&gt;HEAD&lt;/code&gt; method will also be added automatically. You can disable this behavior with &lt;code&gt;do_not_route_head!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  do_not_route_head!&#xA;&#xA;  get &#39;/example&#39; do&#xA;    # only responds to GET&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you add a route for a resource, a route for the &lt;code&gt;OPTIONS&lt;/code&gt; method will also be added. The response to an OPTIONS request will include an &#34;Allow&#34; header listing the supported methods. If the resource has &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; callbacks they will be executed, but no other callbacks will run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/rt_count&#39; do&#xA;    { rt_count: current_user.rt_count }&#xA;  end&#xA;&#xA;  params do&#xA;    requires :value, type: Integer, desc: &#39;Value to add to the rt count.&#39;&#xA;  end&#xA;  put &#39;/rt_count&#39; do&#xA;    current_user.rt_count += params[:value].to_i&#xA;    { rt_count: current_user.rt_count }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -v -X OPTIONS http://localhost:3000/rt_count&#xA;&#xA;&amp;gt; OPTIONS /rt_count HTTP/1.1&#xA;&amp;gt;&#xA;&amp;lt; HTTP/1.1 204 No Content&#xA;&amp;lt; Allow: OPTIONS, GET, PUT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can disable this behavior with &lt;code&gt;do_not_route_options!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If a request for a resource is made with an unsupported HTTP method, an HTTP 405 (Method Not Allowed) response will be returned. If the resource has &lt;code&gt;before&lt;/code&gt; callbacks they will be executed, but no other callbacks will run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -X DELETE -v http://localhost:3000/rt_count/&#xA;&#xA;&amp;gt; DELETE /rt_count/ HTTP/1.1&#xA;&amp;gt; Host: localhost:3000&#xA;&amp;gt;&#xA;&amp;lt; HTTP/1.1 405 Method Not Allowed&#xA;&amp;lt; Allow: OPTIONS, GET, PUT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Raising Exceptions&lt;/h2&gt; &#xA;&lt;p&gt;You can abort the execution of an API method by raising errors with &lt;code&gt;error!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error! &#39;Access Denied&#39;, 401&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anything that responds to &lt;code&gt;#to_s&lt;/code&gt; can be given as a first argument to &lt;code&gt;error!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error! :not_found, 404&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also return JSON formatted objects by raising error! and passing a hash instead of a message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error!({ error: &#39;unexpected error&#39;, detail: &#39;missing widget&#39; }, 500)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set additional headers for the response. They will be merged with headers set before &lt;code&gt;error!&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error!(&#39;Something went wrong&#39;, 500, &#39;X-Error-Detail&#39; =&amp;gt; &#39;Invalid token.&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can present documented errors with a Grape entity using the the &lt;a href=&#34;https://github.com/ruby-grape/grape-entity&#34;&gt;grape-entity&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module API&#xA;  class Error &amp;lt; Grape::Entity&#xA;    expose :code&#xA;    expose :message&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following example specifies the entity to use in the &lt;code&gt;http_codes&lt;/code&gt; definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &#39;My Route&#39; do&#xA; failure [[408, &#39;Unauthorized&#39;, API::Error]]&#xA;end&#xA;error!({ message: &#39;Unauthorized&#39; }, 408)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following example specifies the presented entity explicitly in the error message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &#39;My Route&#39; do&#xA; failure [[408, &#39;Unauthorized&#39;]]&#xA;end&#xA;error!({ message: &#39;Unauthorized&#39;, with: API::Error }, 408)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Error HTTP Status Code&lt;/h3&gt; &#xA;&lt;p&gt;By default Grape returns a 500 status code from &lt;code&gt;error!&lt;/code&gt;. You can change this with &lt;code&gt;default_error_status&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  default_error_status 400&#xA;  get &#39;/example&#39; do&#xA;    error! &#39;This should have http status code 400&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling 404&lt;/h3&gt; &#xA;&lt;p&gt;For Grape to handle all the 404s for your API, it can be useful to use a catch-all. In its simplest form, it can be like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;route :any, &#39;*path&#39; do&#xA;  error! # or something else&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is very crucial to &lt;strong&gt;define this endpoint at the very end of your API&lt;/strong&gt;, as it literally accepts every request.&lt;/p&gt; &#xA;&lt;h2&gt;Exception Handling&lt;/h2&gt; &#xA;&lt;p&gt;Grape can be told to rescue all &lt;code&gt;StandardError&lt;/code&gt; exceptions and return them in the API format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from :all&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This mimics &lt;a href=&#34;https://ruby-doc.org/core/StandardError.html&#34;&gt;default &lt;code&gt;rescue&lt;/code&gt; behaviour&lt;/a&gt; when an exception type is not provided. Any other exception should be rescued explicitly, see &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/#exceptions-that-should-be-rescued-explicitly&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Grape can also rescue from all exceptions and still use the built-in exception handing. This will give the same behavior as &lt;code&gt;rescue_from :all&lt;/code&gt; with the addition that Grape will use the exception handling defined by all Exception classes that inherit &lt;code&gt;Grape::Exceptions::Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The intent of this setting is to provide a simple way to cover the most common exceptions and return any unexpected exceptions in the API format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from :grape_exceptions&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also rescue specific exceptions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from ArgumentError, UserDefinedError&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case &lt;code&gt;UserDefinedError&lt;/code&gt; must be inherited from &lt;code&gt;StandardError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notice that you could combine these two approaches (rescuing custom errors takes precedence). For example, it&#39;s useful for handling all exceptions except Grape validation errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from Grape::Exceptions::ValidationErrors do |e|&#xA;    error!(e, 400)&#xA;  end&#xA;&#xA;  rescue_from :all&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The error format will match the request format. See &#34;Content-Types&#34; below.&lt;/p&gt; &#xA;&lt;p&gt;Custom error formatters for existing and additional types can be defined with a proc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  error_formatter :txt, -&amp;gt;(message, backtrace, options, env, original_exception) {&#xA;    &#34;error: #{message} from #{backtrace}&#34;&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a module or class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module CustomFormatter&#xA;  def self.call(message, backtrace, options, env, original_exception)&#xA;    { message: message, backtrace: backtrace }&#xA;  end&#xA;end&#xA;&#xA;class Twitter::API &amp;lt; Grape::API&#xA;  error_formatter :custom, CustomFormatter&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can rescue all exceptions with a code block. The &lt;code&gt;error!&lt;/code&gt; wrapper automatically sets the default error code and content-type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from :all do |e|&#xA;    error!(&#34;rescued from #{e.class.name}&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can set the format, status code and headers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;  rescue_from :all do |e|&#xA;    error!({ error: &#39;Server error.&#39; }, 500, { &#39;Content-Type&#39; =&amp;gt; &#39;text/error&#39; })&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also rescue all exceptions with a code block and handle the Rack response at the lowest level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from :all do |e|&#xA;    Rack::Response.new([ e.message ], 500, { &#39;Content-type&#39; =&amp;gt; &#39;text/error&#39; })&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or rescue specific exceptions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from ArgumentError do |e|&#xA;    error!(&#34;ArgumentError: #{e.message}&#34;)&#xA;  end&#xA;&#xA;  rescue_from NoMethodError do |e|&#xA;    error!(&#34;NoMethodError: #{e.message}&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;rescue_from&lt;/code&gt; will rescue the exceptions listed and all their subclasses.&lt;/p&gt; &#xA;&lt;p&gt;Assume you have the following exception classes defined.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module APIErrors&#xA;  class ParentError &amp;lt; StandardError; end&#xA;  class ChildError &amp;lt; ParentError; end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then the following &lt;code&gt;rescue_from&lt;/code&gt; clause will rescue exceptions of type &lt;code&gt;APIErrors::ParentError&lt;/code&gt; and its subclasses (in this case &lt;code&gt;APIErrors::ChildError&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rescue_from APIErrors::ParentError do |e|&#xA;    error!({&#xA;      error: &#34;#{e.class} error&#34;,&#xA;      message: e.message&#xA;    }, e.status)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To only rescue the base exception class, set &lt;code&gt;rescue_subclasses: false&lt;/code&gt;. The code below will rescue exceptions of type &lt;code&gt;RuntimeError&lt;/code&gt; but &lt;em&gt;not&lt;/em&gt; its subclasses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rescue_from RuntimeError, rescue_subclasses: false do |e|&#xA;    error!({&#xA;      status: e.status,&#xA;      message: e.message,&#xA;      errors: e.errors&#xA;    }, e.status)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Helpers are also available inside &lt;code&gt;rescue_from&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;  helpers do&#xA;    def server_error!&#xA;      error!({ error: &#39;Server error.&#39; }, 500, { &#39;Content-Type&#39; =&amp;gt; &#39;text/error&#39; })&#xA;    end&#xA;  end&#xA;&#xA;  rescue_from :all do |e|&#xA;    server_error!&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;rescue_from&lt;/code&gt; handler must return a &lt;code&gt;Rack::Response&lt;/code&gt; object, call &lt;code&gt;error!&lt;/code&gt;, or raise an exception (either the original exception or another custom one). The exception raised in &lt;code&gt;rescue_from&lt;/code&gt; will be handled outside Grape. For example, if you mount Grape in Rails, the exception will be handle by &lt;a href=&#34;https://guides.rubyonrails.org/action_controller_overview.html#rescue&#34;&gt;Rails Action Controller&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternately, use the &lt;code&gt;with&lt;/code&gt; option in &lt;code&gt;rescue_from&lt;/code&gt; to specify a method or a &lt;code&gt;proc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;  helpers do&#xA;    def server_error!&#xA;      error!({ error: &#39;Server error.&#39; }, 500, { &#39;Content-Type&#39; =&amp;gt; &#39;text/error&#39; })&#xA;    end&#xA;  end&#xA;&#xA;  rescue_from :all,          with: :server_error!&#xA;  rescue_from ArgumentError, with: -&amp;gt; { Rack::Response.new(&#39;rescued with a method&#39;, 400) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside the &lt;code&gt;rescue_from&lt;/code&gt; block, the environment of the original controller method(&lt;code&gt;.self&lt;/code&gt; receiver) is accessible through the &lt;code&gt;#context&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from :all do |e|&#xA;    user_id = context.params[:user_id]&#xA;    error!(&#34;error for #{user_id}&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rescuing exceptions inside namespaces&lt;/h4&gt; &#xA;&lt;p&gt;You could put &lt;code&gt;rescue_from&lt;/code&gt; clauses inside a namespace and they will take precedence over ones defined in the root scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  rescue_from ArgumentError do |e|&#xA;    error!(&#34;outer&#34;)&#xA;  end&#xA;&#xA;  namespace :statuses do&#xA;    rescue_from ArgumentError do |e|&#xA;      error!(&#34;inner&#34;)&#xA;    end&#xA;    get do&#xA;      raise ArgumentError.new&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here &lt;code&gt;&#39;inner&#39;&lt;/code&gt; will be result of handling occurred &lt;code&gt;ArgumentError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Unrescuable Exceptions&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Grape::Exceptions::InvalidVersionHeader&lt;/code&gt;, which is raised when the version in the request header doesn&#39;t match the currently evaluated version for the endpoint, will &lt;em&gt;never&lt;/em&gt; be rescued from a &lt;code&gt;rescue_from&lt;/code&gt; block (even a &lt;code&gt;rescue_from :all&lt;/code&gt;) This is because Grape relies on Rack to catch that error and try the next versioned-route for cases where there exist identical Grape endpoints with different versions.&lt;/p&gt; &#xA;&lt;h4&gt;Exceptions that should be rescued explicitly&lt;/h4&gt; &#xA;&lt;p&gt;Any exception that is not subclass of &lt;code&gt;StandardError&lt;/code&gt; should be rescued explicitly. Usually it is not a case for an application logic as such errors point to problems in Ruby runtime. This is following &lt;a href=&#34;https://ruby-doc.org/core/Exception.html&#34;&gt;standard recommendations for exceptions handling&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rails 3.x&lt;/h3&gt; &#xA;&lt;p&gt;When mounted inside containers, such as Rails 3.x, errors such as &#34;404 Not Found&#34; or &#34;406 Not Acceptable&#34; will likely be handled and rendered by Rails handlers. For instance, accessing a nonexistent route &#34;/api/foo&#34; raises a 404, which inside rails will ultimately be translated to an &lt;code&gt;ActionController::RoutingError&lt;/code&gt;, which most likely will get rendered to a HTML error page.&lt;/p&gt; &#xA;&lt;p&gt;Most APIs will enjoy preventing downstream handlers from handling errors. You may set the &lt;code&gt;:cascade&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; for the entire API or separately on specific &lt;code&gt;version&lt;/code&gt; definitions, which will remove the &lt;code&gt;X-Cascade: true&lt;/code&gt; header from API responses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cascade false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;version &#39;v1&#39;, using: :header, vendor: &#39;twitter&#39;, cascade: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Grape::API&lt;/code&gt; provides a &lt;code&gt;logger&lt;/code&gt; method which by default will return an instance of the &lt;code&gt;Logger&lt;/code&gt; class from Ruby&#39;s standard library.&lt;/p&gt; &#xA;&lt;p&gt;To log messages from within an endpoint, you need to define a helper to make the logger available in the endpoint context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  helpers do&#xA;    def logger&#xA;      API.logger&#xA;    end&#xA;  end&#xA;  post &#39;/statuses&#39; do&#xA;    logger.info &#34;#{current_user} has statused&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the logger level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  self.logger.level = Logger::INFO&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set your own logger.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyLogger&#xA;  def warning(message)&#xA;    puts &#34;this is a warning: #{message}&#34;&#xA;  end&#xA;end&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  logger MyLogger.new&#xA;  helpers do&#xA;    def logger&#xA;      API.logger&#xA;    end&#xA;  end&#xA;  get &#39;/statuses&#39; do&#xA;    logger.warning &#34;#{current_user} has statused&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For similar to Rails request logging try the &lt;a href=&#34;https://github.com/aserafin/grape_logging&#34;&gt;grape_logging&lt;/a&gt; or &lt;a href=&#34;https://github.com/ridiculous/grape-middleware-logger&#34;&gt;grape-middleware-logger&lt;/a&gt; gems.&lt;/p&gt; &#xA;&lt;h2&gt;API Formats&lt;/h2&gt; &#xA;&lt;p&gt;Your API can declare which content-types to support by using &lt;code&gt;content_type&lt;/code&gt;. If you do not specify any, Grape will support &lt;em&gt;XML&lt;/em&gt;, &lt;em&gt;JSON&lt;/em&gt;, &lt;em&gt;BINARY&lt;/em&gt;, and &lt;em&gt;TXT&lt;/em&gt; content-types. The default format is &lt;code&gt;:txt&lt;/code&gt;; you can change this with &lt;code&gt;default_format&lt;/code&gt;. Essentially, the two APIs below are equivalent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  # no content_type declarations, so Grape uses the defaults&#xA;end&#xA;&#xA;class Twitter::API &amp;lt; Grape::API&#xA;  # the following declarations are equivalent to the defaults&#xA;&#xA;  content_type :xml, &#39;application/xml&#39;&#xA;  content_type :json, &#39;application/json&#39;&#xA;  content_type :binary, &#39;application/octet-stream&#39;&#xA;  content_type :txt, &#39;text/plain&#39;&#xA;&#xA;  default_format :txt&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you declare any &lt;code&gt;content_type&lt;/code&gt; whatsoever, the Grape defaults will be overridden. For example, the following API will only support the &lt;code&gt;:xml&lt;/code&gt; and &lt;code&gt;:rss&lt;/code&gt; content-types, but not &lt;code&gt;:txt&lt;/code&gt;, &lt;code&gt;:json&lt;/code&gt;, or &lt;code&gt;:binary&lt;/code&gt;. Importantly, this means the &lt;code&gt;:txt&lt;/code&gt; default format is not supported! So, make sure to set a new &lt;code&gt;default_format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  content_type :xml, &#39;application/xml&#39;&#xA;  content_type :rss, &#39;application/xml+rss&#39;&#xA;&#xA;  default_format :xml&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Serialization takes place automatically. For example, you do not have to call &lt;code&gt;to_json&lt;/code&gt; in each JSON API endpoint implementation. The response format (and thus the automatic serialization) is determined in the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the file extension, if specified. If the file is .json, choose the JSON format.&lt;/li&gt; &#xA; &lt;li&gt;Use the value of the &lt;code&gt;format&lt;/code&gt; parameter in the query string, if specified.&lt;/li&gt; &#xA; &lt;li&gt;Use the format set by the &lt;code&gt;format&lt;/code&gt; option, if specified.&lt;/li&gt; &#xA; &lt;li&gt;Attempt to find an acceptable format from the &lt;code&gt;Accept&lt;/code&gt; header.&lt;/li&gt; &#xA; &lt;li&gt;Use the default format, if specified by the &lt;code&gt;default_format&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Default to &lt;code&gt;:txt&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, consider the following API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MultipleFormatAPI &amp;lt; Grape::API&#xA;  content_type :xml, &#39;application/xml&#39;&#xA;  content_type :json, &#39;application/json&#39;&#xA;&#xA;  default_format :json&#xA;&#xA;  get :hello do&#xA;    { hello: &#39;world&#39; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello&lt;/code&gt; (with an &lt;code&gt;Accept: */*&lt;/code&gt; header) does not have an extension or a &lt;code&gt;format&lt;/code&gt; parameter, so it will respond with JSON (the default format).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xml&lt;/code&gt; has a recognized extension, so it will respond with XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello?format=xml&lt;/code&gt; has a recognized &lt;code&gt;format&lt;/code&gt; parameter, so it will respond with XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xml?format=json&lt;/code&gt; has a recognized extension (which takes precedence over the &lt;code&gt;format&lt;/code&gt; parameter), so it will respond with XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xls&lt;/code&gt; (with an &lt;code&gt;Accept: */*&lt;/code&gt; header) has an extension, but that extension is not recognized, so it will respond with JSON (the default format).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xls&lt;/code&gt; with an &lt;code&gt;Accept: application/xml&lt;/code&gt; header has an unrecognized extension, but the &lt;code&gt;Accept&lt;/code&gt; header corresponds to a recognized format, so it will respond with XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xls&lt;/code&gt; with an &lt;code&gt;Accept: text/plain&lt;/code&gt; header has an unrecognized extension &lt;em&gt;and&lt;/em&gt; an unrecognized &lt;code&gt;Accept&lt;/code&gt; header, so it will respond with JSON (the default format).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can override this process explicitly by specifying &lt;code&gt;env[&#39;api.format&#39;]&lt;/code&gt; in the API itself. For example, the following API will let you upload arbitrary files and return their contents as an attachment with the correct MIME type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  post &#39;attachment&#39; do&#xA;    filename = params[:file][:filename]&#xA;    content_type MIME::Types.type_for(filename)[0].to_s&#xA;    env[&#39;api.format&#39;] = :binary # there&#39;s no formatter for :binary, data will be returned &#34;as is&#34;&#xA;    header &#39;Content-Disposition&#39;, &#34;attachment; filename*=UTF-8&#39;&#39;#{CGI.escape(filename)}&#34;&#xA;    params[:file][:tempfile].read&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can have your API only respond to a single format with &lt;code&gt;format&lt;/code&gt;. If you use this, the API will &lt;strong&gt;not&lt;/strong&gt; respond to file extensions other than specified in &lt;code&gt;format&lt;/code&gt;. For example, consider the following API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SingleFormatAPI &amp;lt; Grape::API&#xA;  format :json&#xA;&#xA;  get :hello do&#xA;    { hello: &#39;world&#39; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello&lt;/code&gt; will respond with JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.json&lt;/code&gt; will respond with JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello.xml&lt;/code&gt;, &lt;code&gt;GET /hello.foobar&lt;/code&gt;, or &lt;em&gt;any&lt;/em&gt; other extension will respond with an HTTP 404 error code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello?format=xml&lt;/code&gt; will respond with an HTTP 406 error code, because the XML format specified by the request parameter is not supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /hello&lt;/code&gt; with an &lt;code&gt;Accept: application/xml&lt;/code&gt; header will still respond with JSON, since it could not negotiate a recognized content-type from the headers and JSON is the effective default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The formats apply to parsing, too. The following API will only respond to the JSON content-type and will not parse any other input than &lt;code&gt;application/json&lt;/code&gt;, &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;, &lt;code&gt;multipart/form-data&lt;/code&gt;, &lt;code&gt;multipart/related&lt;/code&gt; and &lt;code&gt;multipart/mixed&lt;/code&gt;. All other requests will fail with an HTTP 406 error code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the content-type is omitted, Grape will return a 406 error code unless &lt;code&gt;default_format&lt;/code&gt; is specified. The following API will try to parse any data without a content-type using a JSON parser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;  default_format :json&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you combine &lt;code&gt;format&lt;/code&gt; with &lt;code&gt;rescue_from :all&lt;/code&gt;, errors will be rendered using the same format. If you do not want this behavior, set the default error formatter with &lt;code&gt;default_error_formatter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  format :json&#xA;  content_type :txt, &#39;text/plain&#39;&#xA;  default_error_formatter :txt&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom formatters for existing and additional types can be defined with a proc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::API &amp;lt; Grape::API&#xA;  content_type :xls, &#39;application/vnd.ms-excel&#39;&#xA;  formatter :xls, -&amp;gt;(object, env) { object.to_xls }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a module or class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module XlsFormatter&#xA;  def self.call(object, env)&#xA;    object.to_xls&#xA;  end&#xA;end&#xA;&#xA;class Twitter::API &amp;lt; Grape::API&#xA;  content_type :xls, &#39;application/vnd.ms-excel&#39;&#xA;  formatter :xls, XlsFormatter&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Built-in formatters are the following.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:json&lt;/code&gt;: use object&#39;s &lt;code&gt;to_json&lt;/code&gt; when available, otherwise call &lt;code&gt;MultiJson.dump&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:xml&lt;/code&gt;: use object&#39;s &lt;code&gt;to_xml&lt;/code&gt; when available, usually via &lt;code&gt;MultiXml&lt;/code&gt;, otherwise call &lt;code&gt;to_s&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:txt&lt;/code&gt;: use object&#39;s &lt;code&gt;to_txt&lt;/code&gt; when available, otherwise &lt;code&gt;to_s&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:serializable_hash&lt;/code&gt;: use object&#39;s &lt;code&gt;serializable_hash&lt;/code&gt; when available, otherwise fallback to &lt;code&gt;:json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:binary&lt;/code&gt;: data will be returned &#34;as is&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a body is present in a request to an API, with a Content-Type header value that is of an unsupported type a &#34;415 Unsupported Media Type&#34; error code will be returned by Grape.&lt;/p&gt; &#xA;&lt;p&gt;Response statuses that indicate no content as defined by &lt;a href=&#34;https://github.com/rack&#34;&gt;Rack&lt;/a&gt; &lt;a href=&#34;https://github.com/rack/rack/raw/master/lib/rack/utils.rb#L567&#34;&gt;here&lt;/a&gt; will bypass serialization and the body entity - though there should be none - will not be modified.&lt;/p&gt; &#xA;&lt;h3&gt;JSONP&lt;/h3&gt; &#xA;&lt;p&gt;Grape supports JSONP via &lt;a href=&#34;https://github.com/rack/rack-contrib&#34;&gt;Rack::JSONP&lt;/a&gt;, part of the &lt;a href=&#34;https://github.com/rack/rack-contrib&#34;&gt;rack-contrib&lt;/a&gt; gem. Add &lt;code&gt;rack-contrib&lt;/code&gt; to your &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rack/contrib&#39;&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  use Rack::JSONP&#xA;  format :json&#xA;  get &#39;/&#39; do&#xA;    &#39;Hello World&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CORS&lt;/h3&gt; &#xA;&lt;p&gt;Grape supports CORS via &lt;a href=&#34;https://github.com/cyu/rack-cors&#34;&gt;Rack::CORS&lt;/a&gt;, part of the &lt;a href=&#34;https://github.com/cyu/rack-cors&#34;&gt;rack-cors&lt;/a&gt; gem. Add &lt;code&gt;rack-cors&lt;/code&gt; to your &lt;code&gt;Gemfile&lt;/code&gt;, then use the middleware in your config.ru file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rack/cors&#39;&#xA;&#xA;use Rack::Cors do&#xA;  allow do&#xA;    origins &#39;*&#39;&#xA;    resource &#39;*&#39;, headers: :any, methods: :get&#xA;  end&#xA;end&#xA;&#xA;run Twitter::API&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Content-type&lt;/h2&gt; &#xA;&lt;p&gt;Content-type is set by the formatter. You can override the content-type of the response at runtime by setting the &lt;code&gt;Content-Type&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/home_timeline_js&#39; do&#xA;    content_type &#39;application/javascript&#39;&#xA;    &#34;var statuses = ...;&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API Data Formats&lt;/h2&gt; &#xA;&lt;p&gt;Grape accepts and parses input data sent with the POST and PUT methods as described in the Parameters section above. It also supports custom data formats. You must declare additional content-types via &lt;code&gt;content_type&lt;/code&gt; and optionally supply a parser via &lt;code&gt;parser&lt;/code&gt; unless a parser is already available within Grape to enable a custom format. Such a parser can be a function or a class.&lt;/p&gt; &#xA;&lt;p&gt;With a parser, parsed data is available &#34;as-is&#34; in &lt;code&gt;env[&#39;api.request.body&#39;]&lt;/code&gt;. Without a parser, data is available &#34;as-is&#34; and in &lt;code&gt;env[&#39;api.request.input&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following example is a trivial parser that will assign any input with the &#34;text/custom&#34; content-type to &lt;code&gt;:value&lt;/code&gt;. The parameter will be available via &lt;code&gt;params[:value]&lt;/code&gt; inside the API call.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module CustomParser&#xA;  def self.call(object, env)&#xA;    { value: object.to_s }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;content_type :txt, &#39;text/plain&#39;&#xA;content_type :custom, &#39;text/custom&#39;&#xA;parser :custom, CustomParser&#xA;&#xA;put &#39;value&#39; do&#xA;  params[:value]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can invoke the above API as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X PUT -d &#39;data&#39; &#39;http://localhost:9292/value&#39; -H Content-Type:text/custom -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can disable parsing for a content-type with &lt;code&gt;nil&lt;/code&gt;. For example, &lt;code&gt;parser :json, nil&lt;/code&gt; will disable JSON parsing altogether. The request data is then available as-is in &lt;code&gt;env[&#39;api.request.body&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;JSON and XML Processors&lt;/h2&gt; &#xA;&lt;p&gt;Grape uses &lt;code&gt;JSON&lt;/code&gt; and &lt;code&gt;ActiveSupport::XmlMini&lt;/code&gt; for JSON and XML parsing by default. It also detects and supports &lt;a href=&#34;https://github.com/intridea/multi_json&#34;&gt;multi_json&lt;/a&gt; and &lt;a href=&#34;https://github.com/sferik/multi_xml&#34;&gt;multi_xml&lt;/a&gt;. Adding those gems to your Gemfile and requiring them will enable them and allow you to swap the JSON and XML back-ends.&lt;/p&gt; &#xA;&lt;h2&gt;RESTful Model Representations&lt;/h2&gt; &#xA;&lt;p&gt;Grape supports a range of ways to present your data with some help from a generic &lt;code&gt;present&lt;/code&gt; method, which accepts two arguments: the object to be presented and the options associated with it. The options hash may include &lt;code&gt;:with&lt;/code&gt;, which defines the entity to expose.&lt;/p&gt; &#xA;&lt;h3&gt;Grape Entities&lt;/h3&gt; &#xA;&lt;p&gt;Add the &lt;a href=&#34;https://github.com/ruby-grape/grape-entity&#34;&gt;grape-entity&lt;/a&gt; gem to your Gemfile. Please refer to the &lt;a href=&#34;https://github.com/ruby-grape/grape-entity/raw/master/README.md&#34;&gt;grape-entity documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;The following example exposes statuses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module API&#xA;  module Entities&#xA;    class Status &amp;lt; Grape::Entity&#xA;      expose :user_name&#xA;      expose :text, documentation: { type: &#39;string&#39;, desc: &#39;Status update text.&#39; }&#xA;      expose :ip, if: { type: :full }&#xA;      expose :user_type, :user_id, if: -&amp;gt;(status, options) { status.user.public? }&#xA;      expose :digest do |status, options|&#xA;        Digest::MD5.hexdigest(status.txt)&#xA;      end&#xA;      expose :replies, using: API::Status, as: :replies&#xA;    end&#xA;  end&#xA;&#xA;  class Statuses &amp;lt; Grape::API&#xA;    version &#39;v1&#39;&#xA;&#xA;    desc &#39;Statuses index&#39; do&#xA;      params: API::Entities::Status.documentation&#xA;    end&#xA;    get &#39;/statuses&#39; do&#xA;      statuses = Status.all&#xA;      type = current_user.admin? ? :full : :default&#xA;      present statuses, with: API::Entities::Status, type: type&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use entity documentation directly in the params block with &lt;code&gt;using: Entity.documentation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module API&#xA;  class Statuses &amp;lt; Grape::API&#xA;    version &#39;v1&#39;&#xA;&#xA;    desc &#39;Create a status&#39;&#xA;    params do&#xA;      requires :all, except: [:ip], using: API::Entities::Status.documentation.except(:id)&#xA;    end&#xA;    post &#39;/status&#39; do&#xA;      Status.create! params&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can present with multiple entities using an optional Symbol argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  get &#39;/statuses&#39; do&#xA;    statuses = Status.all.page(1).per(20)&#xA;    present :total_page, 10&#xA;    present :per_page, 20&#xA;    present :statuses, statuses, with: API::Entities::Status&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The response will be&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  {&#xA;    total_page: 10,&#xA;    per_page: 20,&#xA;    statuses: []&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to separately organizing entities, it may be useful to put them as namespaced classes underneath the model they represent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Status&#xA;  def entity&#xA;    Entity.new(self)&#xA;  end&#xA;&#xA;  class Entity &amp;lt; Grape::Entity&#xA;    expose :text, :user_id&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you organize your entities this way, Grape will automatically detect the &lt;code&gt;Entity&lt;/code&gt; class and use it to present your models. In this example, if you added &lt;code&gt;present Status.new&lt;/code&gt; to your endpoint, Grape will automatically detect that there is a &lt;code&gt;Status::Entity&lt;/code&gt; class and use that as the representative entity. This can still be overridden by using the &lt;code&gt;:with&lt;/code&gt; option or an explicit &lt;code&gt;represents&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;You can present &lt;code&gt;hash&lt;/code&gt; with &lt;code&gt;Grape::Presenters::Presenter&lt;/code&gt; to keep things consistent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/users&#39; do&#xA;  present { id: 10, name: :dgz }, with: Grape::Presenters::Presenter&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The response will be&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{&#xA;  id:   10,&#xA;  name: &#39;dgz&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It has the same result with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/users&#39; do&#xA;  present :id, 10&#xA;  present :name, :dgz&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hypermedia and Roar&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/apotonick/roar&#34;&gt;Roar&lt;/a&gt; to render HAL or Collection+JSON with the help of &lt;a href=&#34;https://github.com/ruby-grape/grape-roar&#34;&gt;grape-roar&lt;/a&gt;, which defines a custom JSON formatter and enables presenting entities with Grape&#39;s &lt;code&gt;present&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;h3&gt;Rabl&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/nesquena/rabl&#34;&gt;Rabl&lt;/a&gt; templates with the help of the &lt;a href=&#34;https://github.com/ruby-grape/grape-rabl&#34;&gt;grape-rabl&lt;/a&gt; gem, which defines a custom Grape Rabl formatter.&lt;/p&gt; &#xA;&lt;h3&gt;Active Model Serializers&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/rails-api/active_model_serializers&#34;&gt;Active Model Serializers&lt;/a&gt; serializers with the help of the &lt;a href=&#34;https://github.com/jrhe/grape-active_model_serializers&#34;&gt;grape-active_model_serializers&lt;/a&gt; gem, which defines a custom Grape AMS formatter.&lt;/p&gt; &#xA;&lt;h2&gt;Sending Raw or No Data&lt;/h2&gt; &#xA;&lt;p&gt;In general, use the binary format to send raw data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/file&#39; do&#xA;    content_type &#39;application/octet-stream&#39;&#xA;    File.binread &#39;file.bin&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the response body explicitly with &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    content_type &#39;text/plain&#39;&#xA;    body &#39;Hello World&#39;&#xA;    # return value ignored&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;body false&lt;/code&gt; to return &lt;code&gt;204 No Content&lt;/code&gt; without any data or content-type.&lt;/p&gt; &#xA;&lt;p&gt;You can also set the response to a file with &lt;code&gt;sendfile&lt;/code&gt;. This works with the &lt;a href=&#34;https://www.rubydoc.info/gems/rack/Rack/Sendfile&#34;&gt;Rack::Sendfile&lt;/a&gt; middleware to optimally send the file through your web server software.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    sendfile &#39;/path/to/file&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To stream a file in chunks use &lt;code&gt;stream&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    stream &#39;/path/to/file&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to stream non-file data use the &lt;code&gt;stream&lt;/code&gt; method and a &lt;code&gt;Stream&lt;/code&gt; object. This is an object that responds to &lt;code&gt;each&lt;/code&gt; and yields for each chunk to send to the client. Each chunk will be sent as it is yielded instead of waiting for all of the content to be available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyStream&#xA;  def each&#xA;    yield &#39;part 1&#39;&#xA;    yield &#39;part 2&#39;&#xA;    yield &#39;part 3&#39;&#xA;  end&#xA;end&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    stream MyStream.new&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;h3&gt;Basic and Digest Auth&lt;/h3&gt; &#xA;&lt;p&gt;Grape has built-in Basic and Digest authentication (the given &lt;code&gt;block&lt;/code&gt; is executed in the context of the current &lt;code&gt;Endpoint&lt;/code&gt;). Authentication applies to the current namespace and any children, but not parents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;http_basic do |username, password|&#xA;  # verify user&#39;s password here&#xA;  # IMPORTANT: make sure you use a comparison method which isn&#39;t prone to a timing attack&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Digest auth supports clear-text passwords and password hashes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;http_digest({ realm: &#39;Test Api&#39;, opaque: &#39;app secret&#39; }) do |username|&#xA;  # lookup the user&#39;s password here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;http_digest(realm: { realm: &#39;Test Api&#39;, opaque: &#39;app secret&#39;, passwords_hashed: true }) do |username|&#xA;  # lookup the user&#39;s password hash here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Register custom middleware for authentication&lt;/h3&gt; &#xA;&lt;p&gt;Grape can use custom Middleware for authentication. How to implement these Middleware have a look at &lt;code&gt;Rack::Auth::Basic&lt;/code&gt; or similar implementations.&lt;/p&gt; &#xA;&lt;p&gt;For registering a Middleware you need the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;label&lt;/code&gt; - the name for your authenticator to use it later&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MiddlewareClass&lt;/code&gt; - the MiddlewareClass to use for authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;option_lookup_proc&lt;/code&gt; - A Proc with one Argument to lookup the options at runtime (return value is an &lt;code&gt;Array&lt;/code&gt; as Parameter for the Middleware).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;Grape::Middleware::Auth::Strategies.add(:my_auth, AuthMiddleware, -&amp;gt;(options) { [options[:realm]] } )&#xA;&#xA;&#xA;auth :my_auth, { realm: &#39;Test Api&#39;} do |credentials|&#xA;  # lookup the user&#39;s password here&#xA;  { &#39;user1&#39; =&amp;gt; &#39;password1&#39; }[username]&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/doorkeeper-gem/doorkeeper&#34;&gt;Doorkeeper&lt;/a&gt;, &lt;a href=&#34;https://github.com/opperator/warden-oauth2&#34;&gt;warden-oauth2&lt;/a&gt; or &lt;a href=&#34;https://github.com/nov/rack-oauth2&#34;&gt;rack-oauth2&lt;/a&gt; for OAuth2 support.&lt;/p&gt; &#xA;&lt;p&gt;You can access the controller params, headers, and helpers through the context with the &lt;code&gt;#context&lt;/code&gt; method inside any auth middleware inherited from &lt;code&gt;Grape::Middleware::Auth::Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Describing and Inspecting an API&lt;/h2&gt; &#xA;&lt;p&gt;Grape routes can be reflected at runtime. This can notably be useful for generating documentation.&lt;/p&gt; &#xA;&lt;p&gt;Grape exposes arrays of API versions and compiled routes. Each route contains a &lt;code&gt;route_prefix&lt;/code&gt;, &lt;code&gt;route_version&lt;/code&gt;, &lt;code&gt;route_namespace&lt;/code&gt;, &lt;code&gt;route_method&lt;/code&gt;, &lt;code&gt;route_path&lt;/code&gt; and &lt;code&gt;route_params&lt;/code&gt;. You can add custom route settings to the route metadata with &lt;code&gt;route_setting&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class TwitterAPI &amp;lt; Grape::API&#xA;  version &#39;v1&#39;&#xA;  desc &#39;Includes custom settings.&#39;&#xA;  route_setting :custom, key: &#39;value&#39;&#xA;  get do&#xA;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examine the routes at runtime.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;TwitterAPI::versions # yields [ &#39;v1&#39;, &#39;v2&#39; ]&#xA;TwitterAPI::routes # yields an array of Grape::Route objects&#xA;TwitterAPI::routes[0].version # =&amp;gt; &#39;v1&#39;&#xA;TwitterAPI::routes[0].description # =&amp;gt; &#39;Includes custom settings.&#39;&#xA;TwitterAPI::routes[0].settings[:custom] # =&amp;gt; { key: &#39;value&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;Route#route_xyz&lt;/code&gt; methods have been deprecated since 0.15.0.&lt;/p&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;Route#xyz&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;Note that difference of &lt;code&gt;Route#options&lt;/code&gt; and &lt;code&gt;Route#settings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; can be referred from your route, it should be set by specifing key and value on verb methods such as &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt;. The &lt;code&gt;settings&lt;/code&gt; can also be referred from your route, but it should be set by specifing key and value on &lt;code&gt;route_setting&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Current Route and Endpoint&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to retrieve the information about the current route from within an API call with &lt;code&gt;route&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyAPI &amp;lt; Grape::API&#xA;  desc &#39;Returns a description of a parameter.&#39;&#xA;  params do&#xA;    requires :id, type: Integer, desc: &#39;Identity.&#39;&#xA;  end&#xA;  get &#39;params/:id&#39; do&#xA;    route.route_params[params[:id]] # yields the parameter description&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The current endpoint responding to the request is &lt;code&gt;self&lt;/code&gt; within the API block or &lt;code&gt;env[&#39;api.endpoint&#39;]&lt;/code&gt; elsewhere. The endpoint has some interesting properties, such as &lt;code&gt;source&lt;/code&gt; which gives you access to the original code block of the API implementation. This can be particularly useful for building a logger middleware.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApiLogger &amp;lt; Grape::Middleware::Base&#xA;  def before&#xA;    file = env[&#39;api.endpoint&#39;].source.source_location[0]&#xA;    line = env[&#39;api.endpoint&#39;].source.source_location[1]&#xA;    logger.debug &#34;[api] #{file}:#{line}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Before, After and Finally&lt;/h2&gt; &#xA;&lt;p&gt;Blocks can be executed before or after every API call, using &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;before_validation&lt;/code&gt; and &lt;code&gt;after_validation&lt;/code&gt;. If the API fails the &lt;code&gt;after&lt;/code&gt; call will not be triggered, if you need code to execute for sure use the &lt;code&gt;finally&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before and after callbacks execute in the following order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;before&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;before_validation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;validations&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;after_validation&lt;/code&gt; (upon successful validation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;the API call&lt;/em&gt; (upon successful validation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;after&lt;/code&gt; (upon successful validation and API call)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;finally&lt;/code&gt; (always)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Steps 4, 5 and 6 only happen if validation succeeds.&lt;/p&gt; &#xA;&lt;p&gt;If a request for a resource is made with an unsupported HTTP method (returning HTTP 405) only &lt;code&gt;before&lt;/code&gt; callbacks will be executed. The remaining callbacks will be bypassed.&lt;/p&gt; &#xA;&lt;p&gt;If a request for a resource is made that triggers the built-in &lt;code&gt;OPTIONS&lt;/code&gt; handler, only &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; callbacks will be executed. The remaining callbacks will be bypassed.&lt;/p&gt; &#xA;&lt;p&gt;For example, using a simple &lt;code&gt;before&lt;/code&gt; block to set a header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  header &#39;X-Robots-Tag&#39;, &#39;noindex&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can ensure a block of code runs after every request (including failures) with &lt;code&gt;finally&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;finally do&#xA;  # this code will run after every request (successful or failed)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Namespaces&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Callbacks apply to each API call within and below the current namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyAPI &amp;lt; Grape::API&#xA;  get &#39;/&#39; do&#xA;    &#34;root - #{@blah}&#34;&#xA;  end&#xA;&#xA;  namespace :foo do&#xA;    before do&#xA;      @blah = &#39;blah&#39;&#xA;    end&#xA;&#xA;    get &#39;/&#39; do&#xA;      &#34;root - foo - #{@blah}&#34;&#xA;    end&#xA;&#xA;    namespace :bar do&#xA;      get &#39;/&#39; do&#xA;        &#34;root - foo - bar - #{@blah}&#34;&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The behavior is then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /           # &#39;root - &#39;&#xA;GET /foo        # &#39;root - foo - blah&#39;&#xA;GET /foo/bar    # &#39;root - foo - bar - blah&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Params on a &lt;code&gt;namespace&lt;/code&gt; (or whichever alias you are using) will also be available when using &lt;code&gt;before_validation&lt;/code&gt; or &lt;code&gt;after_validation&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyAPI &amp;lt; Grape::API&#xA;  params do&#xA;    requires :blah, type: Integer&#xA;  end&#xA;  resource &#39;:blah&#39; do&#xA;    after_validation do&#xA;      # if we reach this point validations will have passed&#xA;      @blah = declared(params, include_missing: false)[:blah]&#xA;    end&#xA;&#xA;    get &#39;/&#39; do&#xA;      @blah.class&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The behavior is then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /123        # &#39;Integer&#39;&#xA;GET /foo        # 400 error - &#39;blah is invalid&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Versioning&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a callback is defined within a version block, it&#39;s only called for the routes defined in that block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Test &amp;lt; Grape::API&#xA;  resource :foo do&#xA;    version &#39;v1&#39;, :using =&amp;gt; :path do&#xA;      before do&#xA;        @output ||= &#39;v1-&#39;&#xA;      end&#xA;      get &#39;/&#39; do&#xA;        @output += &#39;hello&#39;&#xA;      end&#xA;    end&#xA;&#xA;    version &#39;v2&#39;, :using =&amp;gt; :path do&#xA;      before do&#xA;        @output ||= &#39;v2-&#39;&#xA;      end&#xA;      get &#39;/&#39; do&#xA;        @output += &#39;hello&#39;&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The behavior is then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /foo/v1       # &#39;v1-hello&#39;&#xA;GET /foo/v2       # &#39;v2-hello&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Altering Responses&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;present&lt;/code&gt; in any callback allows you to add data to a response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyAPI &amp;lt; Grape::API&#xA;  format :json&#xA;&#xA;  after_validation do&#xA;    present :name, params[:name] if params[:name]&#xA;  end&#xA;&#xA;  get &#39;/greeting&#39; do&#xA;    present :greeting, &#39;Hello!&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The behavior is then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /greeting              # {&#34;greeting&#34;:&#34;Hello!&#34;}&#xA;GET /greeting?name=Alan    # {&#34;name&#34;:&#34;Alan&#34;,&#34;greeting&#34;:&#34;Hello!&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of altering a response, you can also terminate and rewrite it from any callback using &lt;code&gt;error!&lt;/code&gt;, including &lt;code&gt;after&lt;/code&gt;. This will cause all subsequent steps in the process to not be called. &lt;strong&gt;This includes the actual api call and any callbacks&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Anchoring&lt;/h2&gt; &#xA;&lt;p&gt;Grape by default anchors all request paths, which means that the request URL should match from start to end to match, otherwise a &lt;code&gt;404 Not Found&lt;/code&gt; is returned. However, this is sometimes not what you want, because it is not always known upfront what can be expected from the call. This is because Rack-mount by default anchors requests to match from the start to the end, or not at all. Rails solves this problem by using a &lt;code&gt;anchor: false&lt;/code&gt; option in your routes. In Grape this option can be used as well when a method is defined.&lt;/p&gt; &#xA;&lt;p&gt;For instance when your API needs to get part of an URL, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class TwitterAPI &amp;lt; Grape::API&#xA;  namespace :statuses do&#xA;    get &#39;/(*:status)&#39;, anchor: false do&#xA;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will match all paths starting with &#39;/statuses/&#39;. There is one caveat though: the &lt;code&gt;params[:status]&lt;/code&gt; parameter only holds the first part of the request url. Luckily this can be circumvented by using the described above syntax for path specification and using the &lt;code&gt;PATH_INFO&lt;/code&gt; Rack environment variable, using &lt;code&gt;env[&#39;PATH_INFO&#39;]&lt;/code&gt;. This will hold everything that comes after the &#39;/statuses/&#39; part.&lt;/p&gt; &#xA;&lt;h2&gt;Using Custom Middleware&lt;/h2&gt; &#xA;&lt;h3&gt;Grape Middleware&lt;/h3&gt; &#xA;&lt;p&gt;You can make a custom middleware by using &lt;code&gt;Grape::Middleware::Base&lt;/code&gt;. It&#39;s inherited from some grape official middlewares in fact.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can write a middleware to log application exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class LoggingError &amp;lt; Grape::Middleware::Base&#xA;  def after&#xA;    return unless @app_response &amp;amp;&amp;amp; @app_response[0] == 500&#xA;    env[&#39;rack.logger&#39;].error(&#34;Raised error on #{env[&#39;PATH_INFO&#39;]}&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your middleware can overwrite application response as follows, except error case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Overwriter &amp;lt; Grape::Middleware::Base&#xA;  def after&#xA;    [200, { &#39;Content-Type&#39; =&amp;gt; &#39;text/plain&#39; }, [&#39;Overwritten.&#39;]]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add your custom middleware with &lt;code&gt;use&lt;/code&gt;, that push the middleware onto the stack, and you can also control where the middleware is inserted using &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;insert_before&lt;/code&gt; and &lt;code&gt;insert_after&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CustomOverwriter &amp;lt; Grape::Middleware::Base&#xA;  def after&#xA;    [200, { &#39;Content-Type&#39; =&amp;gt; &#39;text/plain&#39; }, [@options[:message]]]&#xA;  end&#xA;end&#xA;&#xA;&#xA;class API &amp;lt; Grape::API&#xA;  use Overwriter&#xA;  insert_before Overwriter, CustomOverwriter, message: &#39;Overwritten again.&#39;&#xA;  insert 0, CustomOverwriter, message: &#39;Overwrites all other middleware.&#39;&#xA;&#xA;  get &#39;/&#39; do&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access the controller params, headers, and helpers through the context with the &lt;code&gt;#context&lt;/code&gt; method inside any middleware inherited from &lt;code&gt;Grape::Middleware::Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rails Middleware&lt;/h3&gt; &#xA;&lt;p&gt;Note that when you&#39;re using Grape mounted on Rails you don&#39;t have to use Rails middleware because it&#39;s already included into your middleware stack. You only have to implement the helpers to access the specific &lt;code&gt;env&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;If you are using a custom application that is inherited from &lt;code&gt;Rails::Application&lt;/code&gt; and need to insert a new middleware among the ones initiated via Rails, you will need to register it manually in your custom application class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Company::Application &amp;lt; Rails::Application&#xA;  config.middleware.insert_before(Rack::Attack, Middleware::ApiLogger)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remote IP&lt;/h3&gt; &#xA;&lt;p&gt;By default you can access remote IP with &lt;code&gt;request.ip&lt;/code&gt;. This is the remote IP address implemented by Rack. Sometimes it is desirable to get the remote IP &lt;a href=&#34;http://stackoverflow.com/questions/10997005/whats-the-difference-between-request-remote-ip-and-request-ip-in-rails&#34;&gt;Rails-style&lt;/a&gt; with &lt;code&gt;ActionDispatch::RemoteIp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#39;actionpack&#39;&lt;/code&gt; to your Gemfile and &lt;code&gt;require &#39;action_dispatch/middleware/remote_ip.rb&#39;&lt;/code&gt;. Use the middleware in your API and expose a &lt;code&gt;client_ip&lt;/code&gt; helper. See &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionDispatch/RemoteIp.html&#34;&gt;this documentation&lt;/a&gt; for additional options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class API &amp;lt; Grape::API&#xA;  use ActionDispatch::RemoteIp&#xA;&#xA;  helpers do&#xA;    def client_ip&#xA;      env[&#39;action_dispatch.remote_ip&#39;].to_s&#xA;    end&#xA;  end&#xA;&#xA;  get :remote_ip do&#xA;    { ip: client_ip }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Writing Tests&lt;/h2&gt; &#xA;&lt;h3&gt;Writing Tests with Rack&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;rack-test&lt;/code&gt; and define your API as &lt;code&gt;app&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;RSpec&lt;/h4&gt; &#xA;&lt;p&gt;You can test a Grape API with RSpec by making HTTP requests and examining the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;&#xA;describe Twitter::API do&#xA;  include Rack::Test::Methods&#xA;&#xA;  def app&#xA;    Twitter::API&#xA;  end&#xA;&#xA;  context &#39;GET /api/statuses/public_timeline&#39; do&#xA;    it &#39;returns an empty array of statuses&#39; do&#xA;      get &#39;/api/statuses/public_timeline&#39;&#xA;      expect(last_response.status).to eq(200)&#xA;      expect(JSON.parse(last_response.body)).to eq []&#xA;    end&#xA;  end&#xA;  context &#39;GET /api/statuses/:id&#39; do&#xA;    it &#39;returns a status by id&#39; do&#xA;      status = Status.create!&#xA;      get &#34;/api/statuses/#{status.id}&#34;&#xA;      expect(last_response.body).to eq status.to_json&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s no standard way of sending arrays of objects via an HTTP GET, so POST JSON data and specify the correct content-type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe Twitter::API do&#xA;  context &#39;POST /api/statuses&#39; do&#xA;    it &#39;creates many statuses&#39; do&#xA;      statuses = [{ text: &#39;...&#39; }, { text: &#39;...&#39;}]&#xA;      post &#39;/api/statuses&#39;, statuses.to_json, &#39;CONTENT_TYPE&#39; =&amp;gt; &#39;application/json&#39;&#xA;      expect(last_response.body).to eq 201&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Airborne&lt;/h4&gt; &#xA;&lt;p&gt;You can test with other RSpec-based frameworks, including &lt;a href=&#34;https://github.com/brooklynDev/airborne&#34;&gt;Airborne&lt;/a&gt;, which uses &lt;code&gt;rack-test&lt;/code&gt; to make requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;airborne&#39;&#xA;&#xA;Airborne.configure do |config|&#xA;  config.rack_app = Twitter::API&#xA;end&#xA;&#xA;describe Twitter::API do&#xA;  context &#39;GET /api/statuses/:id&#39; do&#xA;    it &#39;returns a status by id&#39; do&#xA;      status = Status.create!&#xA;      get &#34;/api/statuses/#{status.id}&#34;&#xA;      expect_json(status.as_json)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MiniTest&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;test_helper&#39;&#xA;&#xA;class Twitter::APITest &amp;lt; MiniTest::Test&#xA;  include Rack::Test::Methods&#xA;&#xA;  def app&#xA;    Twitter::API&#xA;  end&#xA;&#xA;  def test_get_api_statuses_public_timeline_returns_an_empty_array_of_statuses&#xA;    get &#39;/api/statuses/public_timeline&#39;&#xA;    assert last_response.ok?&#xA;    assert_equal [], JSON.parse(last_response.body)&#xA;  end&#xA;&#xA;  def test_get_api_statuses_id_returns_a_status_by_id&#xA;    status = Status.create!&#xA;    get &#34;/api/statuses/#{status.id}&#34;&#xA;    assert_equal status.to_json, last_response.body&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Writing Tests with Rails&lt;/h3&gt; &#xA;&lt;h4&gt;RSpec&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe Twitter::API do&#xA;  context &#39;GET /api/statuses/public_timeline&#39; do&#xA;    it &#39;returns an empty array of statuses&#39; do&#xA;      get &#39;/api/statuses/public_timeline&#39;&#xA;      expect(response.status).to eq(200)&#xA;      expect(JSON.parse(response.body)).to eq []&#xA;    end&#xA;  end&#xA;  context &#39;GET /api/statuses/:id&#39; do&#xA;    it &#39;returns a status by id&#39; do&#xA;      status = Status.create!&#xA;      get &#34;/api/statuses/#{status.id}&#34;&#xA;      expect(response.body).to eq status.to_json&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Rails, HTTP request tests would go into the &lt;code&gt;spec/requests&lt;/code&gt; group. You may want your API code to go into &lt;code&gt;app/api&lt;/code&gt; - you can match that layout under &lt;code&gt;spec&lt;/code&gt; by adding the following in &lt;code&gt;spec/rails_helper.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.include RSpec::Rails::RequestExampleGroup, type: :request, file_path: /spec\/api/&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MiniTest&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Twitter::APITest &amp;lt; ActiveSupport::TestCase&#xA;  include Rack::Test::Methods&#xA;&#xA;  def app&#xA;    Rails.application&#xA;  end&#xA;&#xA;  test &#39;GET /api/statuses/public_timeline returns an empty array of statuses&#39; do&#xA;    get &#39;/api/statuses/public_timeline&#39;&#xA;    assert last_response.ok?&#xA;    assert_equal [], JSON.parse(last_response.body)&#xA;  end&#xA;&#xA;  test &#39;GET /api/statuses/:id returns a status by id&#39; do&#xA;    status = Status.create!&#xA;    get &#34;/api/statuses/#{status.id}&#34;&#xA;    assert_equal status.to_json, last_response.body&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stubbing Helpers&lt;/h3&gt; &#xA;&lt;p&gt;Because helpers are mixed in based on the context when an endpoint is defined, it can be difficult to stub or mock them for testing. The &lt;code&gt;Grape::Endpoint.before_each&lt;/code&gt; method can help by allowing you to define behavior on the endpoint that will run before every request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;an endpoint that needs helpers stubbed&#39; do&#xA;  before do&#xA;    Grape::Endpoint.before_each do |endpoint|&#xA;      allow(endpoint).to receive(:helper_name).and_return(&#39;desired_value&#39;)&#xA;    end&#xA;  end&#xA;&#xA;  after do&#xA;    Grape::Endpoint.before_each nil&#xA;  end&#xA;&#xA;  it &#39;stubs the helper&#39; do&#xA;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reloading API Changes in Development&lt;/h2&gt; &#xA;&lt;h3&gt;Reloading in Rack Applications&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/AlexYankee/grape-reload&#34;&gt;grape-reload&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Reloading in Rails Applications&lt;/h3&gt; &#xA;&lt;p&gt;Add API paths to &lt;code&gt;config/application.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Auto-load API and its subdirectories&#xA;config.paths.add File.join(&#39;app&#39;, &#39;api&#39;), glob: File.join(&#39;**&#39;, &#39;*.rb&#39;)&#xA;config.autoload_paths += Dir[Rails.root.join(&#39;app&#39;, &#39;api&#39;, &#39;*&#39;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create &lt;code&gt;config/initializers/reload_api.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if Rails.env.development?&#xA;  ActiveSupport::Dependencies.explicitly_unloadable_constants &amp;lt;&amp;lt; &#39;Twitter::API&#39;&#xA;&#xA;  api_files = Dir[Rails.root.join(&#39;app&#39;, &#39;api&#39;, &#39;**&#39;, &#39;*.rb&#39;)]&#xA;  api_reloader = ActiveSupport::FileUpdateChecker.new(api_files) do&#xA;    Rails.application.reload_routes!&#xA;  end&#xA;  ActionDispatch::Callbacks.to_prepare do&#xA;    api_reloader.execute_if_updated&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Rails &amp;gt;= 5.1.4, change this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActionDispatch::Callbacks.to_prepare do&#xA;  api_reloader.execute_if_updated&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::Reloader.to_prepare do&#xA;  api_reloader.execute_if_updated&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://stackoverflow.com/questions/3282655/ruby-on-rails-3-reload-lib-directory-for-each-request/4368838#4368838&#34;&gt;StackOverflow #3282655&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Performance Monitoring&lt;/h2&gt; &#xA;&lt;h3&gt;Active Support Instrumentation&lt;/h3&gt; &#xA;&lt;p&gt;Grape has built-in support for &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveSupport/Notifications.html&#34;&gt;ActiveSupport::Notifications&lt;/a&gt; which provides simple hook points to instrument key parts of your application.&lt;/p&gt; &#xA;&lt;p&gt;The following are currently supported:&lt;/p&gt; &#xA;&lt;h4&gt;endpoint_run.grape&lt;/h4&gt; &#xA;&lt;p&gt;The main execution of an endpoint, includes filters and rendering.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;endpoint&lt;/em&gt; - The endpoint instance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;endpoint_render.grape&lt;/h4&gt; &#xA;&lt;p&gt;The execution of the main content block of the endpoint.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;endpoint&lt;/em&gt; - The endpoint instance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;endpoint_run_filters.grape&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;endpoint&lt;/em&gt; - The endpoint instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;filters&lt;/em&gt; - The filters being executed&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;type&lt;/em&gt; - The type of filters (before, before_validation, after_validation, after)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;endpoint_run_validators.grape&lt;/h4&gt; &#xA;&lt;p&gt;The execution of validators.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;endpoint&lt;/em&gt; - The endpoint instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;validators&lt;/em&gt; - The validators being executed&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;request&lt;/em&gt; - The request being validated&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;format_response.grape&lt;/h4&gt; &#xA;&lt;p&gt;Serialization or template rendering.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;env&lt;/em&gt; - The request environment&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;formatter&lt;/em&gt; - The formatter object (e.g., &lt;code&gt;Grape::Formatter::Json&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveSupport/Notifications.html&#34;&gt;ActiveSupport::Notifications documentation&lt;/a&gt; for information on how to subscribe to these events.&lt;/p&gt; &#xA;&lt;h3&gt;Monitoring Products&lt;/h3&gt; &#xA;&lt;p&gt;Grape integrates with following third-party tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;New Relic&lt;/strong&gt; - &lt;a href=&#34;https://docs.newrelic.com/docs/agents/ruby-agent/frameworks/grape-instrumentation&#34;&gt;built-in support&lt;/a&gt; from v3.10.0 of the official &lt;a href=&#34;https://github.com/newrelic/rpm&#34;&gt;newrelic_rpm&lt;/a&gt; gem, also &lt;a href=&#34;https://github.com/xinminlabs/newrelic-grape&#34;&gt;newrelic-grape&lt;/a&gt; gem&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Librato Metrics&lt;/strong&gt; - &lt;a href=&#34;https://github.com/seanmoon/grape-librato&#34;&gt;grape-librato&lt;/a&gt; gem&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.skylight.io/&#34;&gt;Skylight&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&#34;https://github.com/skylightio/skylight-ruby&#34;&gt;skylight&lt;/a&gt; gem, &lt;a href=&#34;https://docs.skylight.io/grape/&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.appsignal.com&#34;&gt;AppSignal&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&#34;https://github.com/appsignal/appsignal-ruby&#34;&gt;appsignal-ruby&lt;/a&gt; gem, &lt;a href=&#34;http://docs.appsignal.com/getting-started/supported-frameworks.html#grape&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.elastic.co/products/apm&#34;&gt;ElasticAPM&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&#34;https://github.com/elastic/apm-agent-ruby&#34;&gt;elastic-apm&lt;/a&gt; gem, &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/ruby/3.x/getting-started-rack.html#getting-started-grape&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.datadoghq.com/tracing/&#34;&gt;Datadog APM&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&#34;https://github.com/datadog/dd-trace-rb&#34;&gt;ddtrace&lt;/a&gt; gem, &lt;a href=&#34;https://docs.datadoghq.com/tracing/setup_overview/setup/ruby/#grape&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Grape&lt;/h2&gt; &#xA;&lt;p&gt;Grape is work of hundreds of contributors. You&#39;re encouraged to submit pull requests, propose features and discuss issues.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/SECURITY.md&#34;&gt;SECURITY&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/ruby-grape/grape/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2010-2020 Michael Bleigh, Intridea Inc. and Contributors.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gollum/gollum</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/gollum/gollum</id>
    <link href="https://github.com/gollum/gollum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, Git-powered wiki with a sweet API and local frontend.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gollum -- A git-based Wiki&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/gollum&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/gollum.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/gollum/gollum/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://www.codetriage.com/gollum/gollum&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/gollum/gollum/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dometto-cuttingedge.herokuapp.com/github/gollum/gollum/info&#34;&gt;&lt;img src=&#34;https://dometto-cuttingedge.herokuapp.com/github/gollum/gollum/svg&#34; alt=&#34;Cutting Edge Dependency Status&#34; title=&#34;Cutting Edge Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/gollumwiki/gollum&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/gollumwiki/gollum&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/gollum/gollum/wiki&#34;&gt;wiki&lt;/a&gt; for extensive documentation, along with &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Screenshots&#34;&gt;screenshots&lt;/a&gt; of Gollum&#39;s features.&lt;/p&gt; &#xA;&lt;h2&gt;DESCRIPTION&lt;/h2&gt; &#xA;&lt;p&gt;Gollum is a simple wiki system built on top of Git. A Gollum Wiki is simply a git repository of a specific nature:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A Gollum repository&#39;s contents are human-editable text or markup files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pages may be organized into directories any way you choose.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other content can also be included, for example images, PDFs and headers/footers for your pages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gollum pages:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;May be written in a variety of &lt;a href=&#34;https://raw.githubusercontent.com/gollum/gollum/master/#markups&#34;&gt;markups&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Can be edited with your favourite editor (changes will be visible after committing) or with the built-in web interface.&lt;/li&gt; &#xA;   &lt;li&gt;Can be displayed in all versions, reverted, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gollum strives to be &lt;a href=&#34;https://github.com/gollum/gollum/wiki/5.0-release-notes#compatibility-option&#34;&gt;compatible&lt;/a&gt; with &lt;a href=&#34;https://docs.github.com/en/communities/documenting-your-project-with-wikis/about-wikis&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://docs.gitlab.com/ee/user/project/wiki/#create-or-edit-wiki-pages-locally&#34;&gt;GitLab&lt;/a&gt; wikis.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Just clone your GitHub/GitLab wiki and view and edit it locally!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gollum supports advanced functionality like:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/gollum/gollum/wiki#plantuml-diagrams&#34;&gt;UML diagrams&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/gollum/gollum/wiki/BibTeX-and-Citations&#34;&gt;BibTeX and Citation support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Annotations using &lt;a href=&#34;https://github.com/gollum/gollum/wiki#criticmarkup-annotations&#34;&gt;CriticMarkup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Mathematics via &lt;a href=&#34;https://github.com/gollum/gollum/wiki#mathematics&#34;&gt;MathJax&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/gollum/gollum/wiki/Standard-Macros&#34;&gt;Macros&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/gollum/gollum/wiki#redirects&#34;&gt;Redirects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/gollum/gollum/wiki/5.0-release-notes#rss-feed&#34;&gt;RSS Feed&lt;/a&gt; of latest changes&lt;/li&gt; &#xA;   &lt;li&gt;...and &lt;a href=&#34;https://github.com/gollum/gollum/wiki&#34;&gt;more&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SYSTEM REQUIREMENTS&lt;/h3&gt; &#xA;&lt;p&gt;Gollum runs on Unix-like systems using its default &lt;a href=&#34;https://github.com/gollum/rugged_adapter&#34;&gt;adapter&lt;/a&gt; for &lt;a href=&#34;https://github.com/libgit2/rugged&#34;&gt;rugged&lt;/a&gt;. You can also run Gollum on &lt;a href=&#34;https://github.com/jruby/jruby&#34;&gt;JRuby&lt;/a&gt; via its &lt;a href=&#34;https://github.com/repotag/gollum-lib_rjgit_adapter&#34;&gt;adapter&lt;/a&gt; for &lt;a href=&#34;https://github.com/repotag/rjgit/&#34;&gt;RJGit&lt;/a&gt;. On Windows, Gollum runs only on JRuby.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALLATION&lt;/h2&gt; &#xA;&lt;h3&gt;As a Ruby Gem&lt;/h3&gt; &#xA;&lt;p&gt;Ruby is best installed either via &lt;a href=&#34;https://rvm.io/&#34;&gt;RVM&lt;/a&gt; or a package manager of choice. Then simply: &lt;code&gt;gem install gollum&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Installation examples for individual systems can be seen &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Installation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run, simply:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run: &lt;code&gt;gollum /path/to/wiki&lt;/code&gt; where &lt;code&gt;/path/to/wiki&lt;/code&gt; is an initialized Git repository.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;http://localhost:4567&lt;/code&gt; in your browser.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Via Docker&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Gollum-via-Docker&#34;&gt;here&lt;/a&gt; for instructions on how to run Gollum via Docker.&lt;/p&gt; &#xA;&lt;h3&gt;Misc&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/gollum/gollum/master/#running-from-source&#34;&gt;below&lt;/a&gt; for information on running Gollum from source, as a Rack app, and more.&lt;/p&gt; &#xA;&lt;h2&gt;MARKUPS&lt;/h2&gt; &#xA;&lt;p&gt;Gollum allows using different markup languages on different wiki pages. It presently ships with support for the following markups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax&#34;&gt;Markdown&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/gollum/gollum/master/#Markdown-flavors&#34;&gt;below&lt;/a&gt; for more information on Markdown flavors)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rdoc.sourceforge.net/&#34;&gt;RDoc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can easily activate support for other markups by installing additional renderers (any that are supported by &lt;a href=&#34;https://github.com/github/markup&#34;&gt;github-markup&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/&#34;&gt;AsciiDoc&lt;/a&gt; -- &lt;code&gt;gem install asciidoctor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.wikicreole.org/wiki/CheatSheet&#34;&gt;Creole&lt;/a&gt; -- &lt;code&gt;gem install creole&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;MediaWiki&lt;/a&gt; -- &lt;code&gt;gem install wikicloth&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://orgmode.org/worg/dev/org-syntax.html&#34;&gt;Org&lt;/a&gt; -- &lt;code&gt;gem install org-ruby&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://perldoc.perl.org/perlpod.html&#34;&gt;Pod&lt;/a&gt; -- requires Perl &amp;gt;= 5.10 (the &lt;code&gt;perl&lt;/code&gt; command must be available on your command line) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lower versions should install &lt;code&gt;Pod::Simple&lt;/code&gt; from CPAN.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html&#34;&gt;ReStructuredText&lt;/a&gt; -- requires python &amp;gt;= 3 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that Gollum will also need you to install &lt;code&gt;docutils&lt;/code&gt; for python&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://redcloth.org/hobix.com/textile/quick.html&#34;&gt;Textile&lt;/a&gt; -- &lt;code&gt;gem install RedCloth&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Markdown flavors&lt;/h3&gt; &#xA;&lt;p&gt;By default, Gollum ships with the &lt;code&gt;kramdown&lt;/code&gt; gem to render Markdown. However, you can use any &lt;a href=&#34;https://github.com/github/markup/raw/master/lib/github/markup/markdown.rb&#34;&gt;Markdown renderer supported by github-markup&lt;/a&gt;. This includes &lt;a href=&#34;https://commonmark.org/&#34;&gt;CommonMark&lt;/a&gt; support via the &lt;code&gt;commonmarker&lt;/code&gt; gem. The first installed renderer from the list will be used (e.g., &lt;code&gt;redcarpet&lt;/code&gt; will NOT be used if &lt;code&gt;github/markdown&lt;/code&gt; is installed). Just &lt;code&gt;gem install&lt;/code&gt; the renderer of your choice.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Custom-rendering-gems&#34;&gt;here&lt;/a&gt; for instructions on how to use custom rendering gems and set custom options.&lt;/p&gt; &#xA;&lt;h2&gt;RUNNING FROM SOURCE&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/gollum/gollum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd gollum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[sudo] bundle install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bundle exec bin/gollum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;http://localhost:4567&lt;/code&gt; in your browser.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Rack&lt;/h3&gt; &#xA;&lt;p&gt;Gollum can also be run with any &lt;a href=&#34;https://github.com/rack/rack#supported-web-servers&#34;&gt;rack-compatible web server&lt;/a&gt;. More on that &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Gollum-via-Rack&#34;&gt;over here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rack, with an authentication server&lt;/h3&gt; &#xA;&lt;p&gt;Gollum can also be run alongside a CAS (Central Authentication Service) SSO (single sign-on) server. With a bit of tweaking, this adds basic user-support to Gollum. To see an example and an explanation, navigate &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Gollum-via-Rack-and-CAS-SSO&#34;&gt;over here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Service&lt;/h3&gt; &#xA;&lt;p&gt;Gollum can also be run as a service. More on that &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Gollum-as-a-service&#34;&gt;over here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;CONFIGURATION&lt;/h2&gt; &#xA;&lt;p&gt;Gollum comes with the following command line options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Arguments&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--host&lt;/td&gt; &#xA;   &lt;td&gt;[HOST]&lt;/td&gt; &#xA;   &lt;td&gt;Specify the hostname or IP address to listen on. Default: &#39;0.0.0.0&#39;.&lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--port&lt;/td&gt; &#xA;   &lt;td&gt;[PORT]&lt;/td&gt; &#xA;   &lt;td&gt;Specify the port to bind Gollum with. Default: &lt;code&gt;4567&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--config&lt;/td&gt; &#xA;   &lt;td&gt;[FILE]&lt;/td&gt; &#xA;   &lt;td&gt;Specify path to Gollum&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/gollum/gollum/master/#Config-file&#34;&gt;configuration file&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--ref&lt;/td&gt; &#xA;   &lt;td&gt;[REF]&lt;/td&gt; &#xA;   &lt;td&gt;Specify the git branch to serve. Default: &lt;code&gt;master&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--bare&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Tell Gollum that the git repository should be treated as bare.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--adapter&lt;/td&gt; &#xA;   &lt;td&gt;[ADAPTER]&lt;/td&gt; &#xA;   &lt;td&gt;Launch Gollum using a specific git adapter. Default: &lt;code&gt;rugged&lt;/code&gt;.&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--base-path&lt;/td&gt; &#xA;   &lt;td&gt;[PATH]&lt;/td&gt; &#xA;   &lt;td&gt;Specify the leading portion of all Gollum URLs (path info). Setting this to &lt;code&gt;/wiki&lt;/code&gt; will make the wiki accessible under &lt;code&gt;http://localhost:4567/wiki/&lt;/code&gt;. Default: &lt;code&gt;/&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--page-file-dir&lt;/td&gt; &#xA;   &lt;td&gt;[PATH]&lt;/td&gt; &#xA;   &lt;td&gt;Specify the subdirectory for all pages. If set, Gollum will only serve pages from this directory and its subdirectories. Default: repository root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--static, --no-static&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Use static assets. Defaults to false in development/test, true in production/staging.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--assets&lt;/td&gt; &#xA;   &lt;td&gt;[PATH]&lt;/td&gt; &#xA;   &lt;td&gt;Set the path to look for static assets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--css&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Tell Gollum to inject custom CSS into each page. Uses &lt;code&gt;custom.css&lt;/code&gt; from wiki root.&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--js&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Tell Gollum to inject custom JS into each page. Uses &lt;code&gt;custom.js&lt;/code&gt; from wiki root.&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--no-edit&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Disable the feature of editing pages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--local-time&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Use the browser&#39;s local timezone instead of the server&#39;s for displaying dates. Default: false.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--follow-renames, --no-follow-renames&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Follow pages across renames in the History view. Default: true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--allow-uploads&lt;/td&gt; &#xA;   &lt;td&gt;[MODE]&lt;/td&gt; &#xA;   &lt;td&gt;Enable file uploads. If set to &lt;code&gt;dir&lt;/code&gt;, Gollum will store all uploads in the &lt;code&gt;/uploads/&lt;/code&gt; directory in repository root. If set to &lt;code&gt;page&lt;/code&gt;, Gollum will store each upload at the currently edited page.&lt;sup&gt;4&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--mathjax&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Enables MathJax (renders mathematical equations). By default, uses the &lt;code&gt;TeX-AMS-MML_HTMLorMML&lt;/code&gt; config with the &lt;code&gt;autoload-all&lt;/code&gt; extension.&lt;sup&gt;5&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--critic-markup&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Enable support for annotations using &lt;a href=&#34;http://criticmarkup.com/&#34;&gt;CriticMarkup&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--irb&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Launch Gollum in &#34;console mode&#34;, with a &lt;a href=&#34;https://github.com/gollum/gollum-lib/&#34;&gt;predefined API&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--h1-title&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Tell Gollum to use the first &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; as page title.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--no-display-metadata&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Do not render metadata tables in pages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--user-icons&lt;/td&gt; &#xA;   &lt;td&gt;[MODE]&lt;/td&gt; &#xA;   &lt;td&gt;Tell Gollum to use specific user icons for history view. Can be set to &lt;code&gt;gravatar&lt;/code&gt;, &lt;code&gt;identicon&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. Default: &lt;code&gt;none&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--mathjax-config&lt;/td&gt; &#xA;   &lt;td&gt;[FILE]&lt;/td&gt; &#xA;   &lt;td&gt;Specify path to a custom MathJax configuration. If not specified, uses the &lt;code&gt;mathjax.config.js&lt;/code&gt; file from repository root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--template-dir&lt;/td&gt; &#xA;   &lt;td&gt;[PATH]&lt;/td&gt; &#xA;   &lt;td&gt;Specify custom mustache template directory. Only overrides templates that exist in this directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--template-page&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Use _Template in root as a template for new pages. Must be committed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--emoji&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Parse and interpret emoji tags (e.g. &lt;code&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/code&gt;) except when the leading colon is backslashed (e.g. &lt;code&gt;\&lt;span&gt;❤️&lt;/span&gt;&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--default-keybind&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Set the default keybinding for the editor. Can be set to &lt;code&gt;vim&lt;/code&gt;, or &lt;code&gt;emacs&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--lenient-tag-lookup&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Internal links resolve case-insensitively, will treat spaces as hyphens, and will match the first page found with a certain filename, anywhere in the repository. Provides compatibility with Gollum 4.x.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--help&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Display the list of options on the command line.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--version&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Display the current version of Gollum.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--versions&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Display the current version of Gollum and auxiliary gems.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;code&gt;0.0.0.0&lt;/code&gt; IP address allows remote access. Should you wish for Gollum to turn into a personal Wiki, use &lt;code&gt;127.0.0.1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Before using &lt;code&gt;--adapter&lt;/code&gt;, you should probably read &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Git-adapters&#34;&gt;this&lt;/a&gt; first.&lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;--css&lt;/code&gt; or &lt;code&gt;--js&lt;/code&gt; is used, respective files must be committed to your git repository or you will get a 302 redirect to the create a page.&lt;/li&gt; &#xA; &lt;li&gt;Files can be uploaded simply by dragging and dropping them onto the editor&#39;s text area when &lt;code&gt;--allow-uploads&lt;/code&gt; is used.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Config file&lt;/h3&gt; &#xA;&lt;p&gt;When &lt;code&gt;--config&lt;/code&gt; option is used, certain inner parts of Gollum can be customized. This is used throughout our wiki for certain user-level alterations, among which &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Formats-and-extensions&#34;&gt;customizing supported markups&lt;/a&gt; will probably stand out.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;All of the mentioned alterations work both for Gollum&#39;s config file (&lt;code&gt;config.rb&lt;/code&gt;) and Rack&#39;s config file (&lt;code&gt;config.ru&lt;/code&gt;).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CONTRIBUTING&lt;/h2&gt; &#xA;&lt;p&gt;Please consider helping out! See &lt;a href=&#34;https://raw.githubusercontent.com/gollum/gollum/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for information on how to submit issues, and how to start hacking on gollum.&lt;/p&gt; &#xA;&lt;h2&gt;THANKS TO&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://saucelabs.com&#34;&gt;&lt;img src=&#34;https://opensource.saucelabs.com/images/opensauce/powered-by-saucelabs-badge-gray.png?sanitize=true&#34; alt=&#34;Testing Powered By SauceLabs&#34; title=&#34;Testing Powered By SauceLabs&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>heartcombo/devise</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/heartcombo/devise</id>
    <link href="https://github.com/heartcombo/devise" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible authentication solution for Rails with Warden.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/heartcombo/devise/main/devise.png&#34; alt=&#34;Devise Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codeclimate.com/github/heartcombo/devise&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/heartcombo/devise.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Devise is a flexible authentication solution for Rails based on Warden. It:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is Rack based;&lt;/li&gt; &#xA; &lt;li&gt;Is a complete MVC solution based on Rails engines;&lt;/li&gt; &#xA; &lt;li&gt;Allows you to have multiple models signed in at the same time;&lt;/li&gt; &#xA; &lt;li&gt;Is based on a modularity concept: use only what you really need.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s composed of 10 modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/DatabaseAuthenticatable&#34;&gt;Database Authenticatable&lt;/a&gt;: hashes and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Omniauthable&#34;&gt;Omniauthable&lt;/a&gt;: adds OmniAuth (&lt;a href=&#34;https://github.com/omniauth/omniauth&#34;&gt;https://github.com/omniauth/omniauth&lt;/a&gt;) support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Confirmable&#34;&gt;Confirmable&lt;/a&gt;: sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Recoverable&#34;&gt;Recoverable&lt;/a&gt;: resets the user password and sends reset instructions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Registerable&#34;&gt;Registerable&lt;/a&gt;: handles signing up users through a registration process, also allowing them to edit and destroy their account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Rememberable&#34;&gt;Rememberable&lt;/a&gt;: manages generating and clearing a token for remembering the user from a saved cookie.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Trackable&#34;&gt;Trackable&lt;/a&gt;: tracks sign in count, timestamps and IP address.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Timeoutable&#34;&gt;Timeoutable&lt;/a&gt;: expires sessions that have not been active in a specified period of time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Validatable&#34;&gt;Validatable&lt;/a&gt;: provides validations of email and password. It&#39;s optional and can be customized, so you&#39;re able to define your own validations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Lockable&#34;&gt;Lockable&lt;/a&gt;: locks an account after a specified number of failed sign-in attempts. Can unlock via email or after a specified time period.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- TOC depthFrom:1 depthTo:6 withLinks:1 orderedList:0 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#information&#34;&gt;Information&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#the-devise-wiki&#34;&gt;The Devise wiki&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#bug-reports&#34;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#stackoverflow-and-mailing-list&#34;&gt;StackOverflow and Mailing List&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#rdocs&#34;&gt;RDocs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#example-applications&#34;&gt;Example applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#starting-with-rails&#34;&gt;Starting with Rails?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#controller-filters-and-helpers&#34;&gt;Controller filters and helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-models&#34;&gt;Configuring Models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#strong-parameters&#34;&gt;Strong Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-views&#34;&gt;Configuring views&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-controllers&#34;&gt;Configuring controllers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-routes&#34;&gt;Configuring routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#i18n&#34;&gt;I18n&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#test-helpers&#34;&gt;Test helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#controller-tests&#34;&gt;Controller tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#integration-tests&#34;&gt;Integration tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#omniauth&#34;&gt;OmniAuth&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-multiple-models&#34;&gt;Configuring multiple models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#activejob-integration&#34;&gt;ActiveJob Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#password-reset-tokens-and-rails-logs&#34;&gt;Password reset tokens and Rails logs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#other-orms&#34;&gt;Other ORMs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#rails-api-mode&#34;&gt;Rails API mode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#additional-information&#34;&gt;Additional information&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#warden&#34;&gt;Warden&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;h3&gt;The Devise wiki&lt;/h3&gt; &#xA;&lt;p&gt;The Devise Wiki has lots of additional information about Devise including many &#34;how-to&#34; articles and answers to the most frequently asked questions. Please browse the Wiki after finishing this README:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki&#34;&gt;https://github.com/heartcombo/devise/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Bug reports&lt;/h3&gt; &#xA;&lt;p&gt;If you discover a problem with Devise, we would like to know about it. However, we ask that you please review these guidelines before submitting a bug report:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Bug-reports&#34;&gt;https://github.com/heartcombo/devise/wiki/Bug-reports&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have discovered a security related bug, please do &lt;em&gt;NOT&lt;/em&gt; use the GitHub issue tracker. Send an email to &lt;a href=&#34;mailto:heartcombo@googlegroups.com&#34;&gt;heartcombo@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;StackOverflow and Mailing List&lt;/h3&gt; &#xA;&lt;p&gt;If you have any questions, comments, or concerns, please use StackOverflow instead of the GitHub issue tracker:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/devise&#34;&gt;http://stackoverflow.com/questions/tagged/devise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The deprecated mailing list can still be read on&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/plataformatec-devise&#34;&gt;https://groups.google.com/group/plataformatec-devise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;RDocs&lt;/h3&gt; &#xA;&lt;p&gt;You can view the Devise documentation in RDoc format here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rubydoc.info/github/heartcombo/devise/main/frames&#34;&gt;http://rubydoc.info/github/heartcombo/devise/main/frames&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you need to use Devise with previous versions of Rails, you can always run &#34;gem server&#34; from the command line after you install the gem to access the old documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Example applications&lt;/h3&gt; &#xA;&lt;p&gt;There are a few example applications available on GitHub that demonstrate various features of Devise with different versions of Rails. You can view them here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Example-Applications&#34;&gt;https://github.com/heartcombo/devise/wiki/Example-Applications&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Our community has created a number of extensions that add functionality above and beyond what is included with Devise. You can view a list of available extensions and add your own here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Extensions&#34;&gt;https://github.com/heartcombo/devise/wiki/Extensions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We hope that you will consider contributing to Devise. Please read this short overview for some information about how to get started:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Contributing&#34;&gt;https://github.com/heartcombo/devise/wiki/Contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will usually want to write tests for your changes. To run the test suite, go into Devise&#39;s top-level directory and run &lt;code&gt;bundle install&lt;/code&gt; and &lt;code&gt;bin/test&lt;/code&gt;. Devise works with multiple Ruby and Rails versions, and ActiveRecord and Mongoid ORMs, which means you can run the test suite with some modifiers: &lt;code&gt;DEVISE_ORM&lt;/code&gt; and &lt;code&gt;BUNDLE_GEMFILE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;DEVISE_ORM&lt;/h3&gt; &#xA;&lt;p&gt;Since Devise supports both Mongoid and ActiveRecord, we rely on this variable to run specific code for each ORM. The default value of &lt;code&gt;DEVISE_ORM&lt;/code&gt; is &lt;code&gt;active_record&lt;/code&gt;. To run the tests for Mongoid, you can pass &lt;code&gt;mongoid&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DEVISE_ORM=mongoid bin/test&#xA;&#xA;==&amp;gt; Devise.orm = :mongoid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When running the tests for Mongoid, you will need to have a MongoDB server (version 2.0 or newer) running on your system.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the command output will show the variable value being used.&lt;/p&gt; &#xA;&lt;h3&gt;BUNDLE_GEMFILE&lt;/h3&gt; &#xA;&lt;p&gt;We can use this variable to tell bundler what Gemfile it should use (instead of the one in the current directory). Inside the &lt;a href=&#34;https://github.com/heartcombo/devise/tree/main/gemfiles&#34;&gt;gemfiles&lt;/a&gt; directory, we have one for each version of Rails we support. When you send us a pull request, it may happen that the test suite breaks using some of them. If that&#39;s the case, you can simulate the same environment using the &lt;code&gt;BUNDLE_GEMFILE&lt;/code&gt; variable. For example, if the tests broke using Ruby 2.4.2 and Rails 4.1, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rbenv shell 2.4.2 # or rvm use 2.4.2&#xA;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bundle install&#xA;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also combine both of them if the tests broke for Mongoid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bundle install&#xA;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable DEVISE_ORM=mongoid bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;Devise uses &lt;a href=&#34;https://github.com/seattlerb/minitest&#34;&gt;Mini Test&lt;/a&gt; as test framework.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running all tests:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running tests for an specific file:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test test/models/trackable_test.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running a specific test given a regex:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test test/models/trackable_test.rb:16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Starting with Rails?&lt;/h2&gt; &#xA;&lt;p&gt;If you are building your first Rails application, we recommend you &lt;em&gt;do not&lt;/em&gt; use Devise. Devise requires a good understanding of the Rails Framework. In such cases, we advise you to start a simple authentication system from scratch. Here&#39;s a few resources that should help you get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Michael Hartl&#39;s online book: &lt;a href=&#34;https://www.railstutorial.org/book/modeling_users&#34;&gt;https://www.railstutorial.org/book/modeling_users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ryan Bates&#39; Railscasts: &lt;a href=&#34;http://railscasts.com/episodes/250-authentication-from-scratch&#34;&gt;http://railscasts.com/episodes/250-authentication-from-scratch&lt;/a&gt; and &lt;a href=&#34;http://railscasts.com/episodes/250-authentication-from-scratch-revised&#34;&gt;http://railscasts.com/episodes/250-authentication-from-scratch-revised&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Codecademy&#39;s Ruby on Rails: Authentication and Authorization: &lt;a href=&#34;https://www.codecademy.com/learn/rails-auth&#34;&gt;https://www.codecademy.com/learn/rails-auth&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have solidified your understanding of Rails and authentication mechanisms, we assure you Devise will be very pleasant to work with. &lt;span&gt;😃&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Devise 4.0 works with Rails 4.1 onwards. Add the following line to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;devise&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next, you need to run the generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, a number of instructions will appear in the console. Among these instructions, you&#39;ll need to set up the default URL options for the Devise mailer in each environment. Here is a possible configuration for &lt;code&gt;config/environments/development.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generator will install an initializer which describes ALL of Devise&#39;s configuration options. It is &lt;em&gt;imperative&lt;/em&gt; that you take a look at it. When you are done, you are ready to add Devise to any of your models using the generator.&lt;/p&gt; &#xA;&lt;p&gt;In the following command you will replace &lt;code&gt;MODEL&lt;/code&gt; with the class name used for the application’s users (it’s frequently &lt;code&gt;User&lt;/code&gt; but could also be &lt;code&gt;Admin&lt;/code&gt;). This will create a model (if one does not exist) and configure it with the default Devise modules. The generator also configures your &lt;code&gt;config/routes.rb&lt;/code&gt; file to point to the Devise controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise MODEL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, check the MODEL for any additional configuration options you might want to add, such as confirmable or lockable. If you add an option, be sure to inspect the migration file (created by the generator if your ORM supports them) and uncomment the appropriate section. For example, if you add the confirmable option in the model, you&#39;ll need to uncomment the Confirmable section in the migration.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;rails db:migrate&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You should restart your application after changing Devise&#39;s configuration options (this includes stopping spring). Otherwise, you will run into strange errors, for example, users being unable to login and route helpers being undefined.&lt;/p&gt; &#xA;&lt;h3&gt;Controller filters and helpers&lt;/h3&gt; &#xA;&lt;p&gt;Devise will create some helpers to use inside your controllers and views. To set up a controller with user authentication, just add this before_action (assuming your devise model is &#39;User&#39;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before_action :authenticate_user!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Rails 5, note that &lt;code&gt;protect_from_forgery&lt;/code&gt; is no longer prepended to the &lt;code&gt;before_action&lt;/code&gt; chain, so if you have set &lt;code&gt;authenticate_user&lt;/code&gt; before &lt;code&gt;protect_from_forgery&lt;/code&gt;, your request will result in &#34;Can&#39;t verify CSRF token authenticity.&#34; To resolve this, either change the order in which you call them, or use &lt;code&gt;protect_from_forgery prepend: true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your devise model is something other than User, replace &#34;_user&#34; with &#34;_yourmodel&#34;. The same logic applies to the instructions below.&lt;/p&gt; &#xA;&lt;p&gt;To verify if a user is signed in, use the following helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user_signed_in?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the current signed-in user, this helper is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;current_user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access the session for this scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user_session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After signing in a user, confirming the account or updating the password, Devise will look for a scoped root path to redirect to. For instance, when using a &lt;code&gt;:user&lt;/code&gt; resource, the &lt;code&gt;user_root_path&lt;/code&gt; will be used if it exists; otherwise, the default &lt;code&gt;root_path&lt;/code&gt; will be used. This means that you need to set the root inside your routes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;root to: &#39;home#index&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also override &lt;code&gt;after_sign_in_path_for&lt;/code&gt; and &lt;code&gt;after_sign_out_path_for&lt;/code&gt; to customize your redirect hooks.&lt;/p&gt; &#xA;&lt;p&gt;Notice that if your Devise model is called &lt;code&gt;Member&lt;/code&gt; instead of &lt;code&gt;User&lt;/code&gt;, for example, then the helpers available are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before_action :authenticate_member!&#xA;&#xA;member_signed_in?&#xA;&#xA;current_member&#xA;&#xA;member_session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Models&lt;/h3&gt; &#xA;&lt;p&gt;The Devise method in your models also accepts some options to configure its modules. For example, you can choose the cost of the hashing algorithm with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise :database_authenticatable, :registerable, :confirmable, :recoverable, stretches: 13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides &lt;code&gt;:stretches&lt;/code&gt;, you can define &lt;code&gt;:pepper&lt;/code&gt;, &lt;code&gt;:encryptor&lt;/code&gt;, &lt;code&gt;:confirm_within&lt;/code&gt;, &lt;code&gt;:remember_for&lt;/code&gt;, &lt;code&gt;:timeout_in&lt;/code&gt;, &lt;code&gt;:unlock_in&lt;/code&gt; among other options. For more details, see the initializer file that was created when you invoked the &#34;devise:install&#34; generator described above. This file is usually located at &lt;code&gt;/config/initializers/devise.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Strong Parameters&lt;/h3&gt; &#xA;&lt;p&gt;The Parameter Sanitizer API has changed for Devise 4 &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For previous Devise versions see &lt;a href=&#34;https://github.com/heartcombo/devise/tree/3-stable#strong-parameters&#34;&gt;https://github.com/heartcombo/devise/tree/3-stable#strong-parameters&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you customize your own views, you may end up adding new attributes to forms. Rails 4 moved the parameter sanitization from the model to the controller, causing Devise to handle this concern at the controller as well.&lt;/p&gt; &#xA;&lt;p&gt;There are just three actions in Devise that allow any set of parameters to be passed down to the model, therefore requiring sanitization. Their names and default permitted parameters are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sign_in&lt;/code&gt; (&lt;code&gt;Devise::SessionsController#create&lt;/code&gt;) - Permits only the authentication keys (like &lt;code&gt;email&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sign_up&lt;/code&gt; (&lt;code&gt;Devise::RegistrationsController#create&lt;/code&gt;) - Permits authentication keys plus &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;password_confirmation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;account_update&lt;/code&gt; (&lt;code&gt;Devise::RegistrationsController#update&lt;/code&gt;) - Permits authentication keys plus &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;password_confirmation&lt;/code&gt; and &lt;code&gt;current_password&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In case you want to permit additional parameters (the lazy way™), you can do so using a simple before action in your &lt;code&gt;ApplicationController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  before_action :configure_permitted_parameters, if: :devise_controller?&#xA;&#xA;  protected&#xA;&#xA;  def configure_permitted_parameters&#xA;    devise_parameter_sanitizer.permit(:sign_up, keys: [:username])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above works for any additional fields where the parameters are simple scalar types. If you have nested attributes (say you&#39;re using &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;), then you will need to tell devise about those nestings and types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  before_action :configure_permitted_parameters, if: :devise_controller?&#xA;&#xA;  protected&#xA;&#xA;  def configure_permitted_parameters&#xA;    devise_parameter_sanitizer.permit(:sign_up, keys: [:first_name, :last_name, address_attributes: [:country, :state, :city, :area, :postal_code]])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Devise allows you to completely change Devise defaults or invoke custom behavior by passing a block:&lt;/p&gt; &#xA;&lt;p&gt;To permit simple scalar values for username and email, use this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def configure_permitted_parameters&#xA;  devise_parameter_sanitizer.permit(:sign_in) do |user_params|&#xA;    user_params.permit(:username, :email)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have some checkboxes that express the roles a user may take on registration, the browser will send those selected checkboxes as an array. An array is not one of Strong Parameters&#39; permitted scalars, so we need to configure Devise in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def configure_permitted_parameters&#xA;  devise_parameter_sanitizer.permit(:sign_up) do |user_params|&#xA;    user_params.permit({ roles: [] }, :email, :password, :password_confirmation)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the list of permitted scalars, and how to declare permitted keys in nested hashes and arrays, see&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rails/strong_parameters#nested-parameters&#34;&gt;https://github.com/rails/strong_parameters#nested-parameters&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have multiple Devise models, you may want to set up a different parameter sanitizer per model. In this case, we recommend inheriting from &lt;code&gt;Devise::ParameterSanitizer&lt;/code&gt; and adding your own logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User::ParameterSanitizer &amp;lt; Devise::ParameterSanitizer&#xA;  def initialize(*)&#xA;    super&#xA;    permit(:sign_up, keys: [:username, :email])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then configure your controllers to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  protected&#xA;&#xA;  def devise_parameter_sanitizer&#xA;    if resource_class == User&#xA;      User::ParameterSanitizer.new(User, :user, params)&#xA;    else&#xA;      super # Use the default one&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above overrides the permitted parameters for the user to be both &lt;code&gt;:username&lt;/code&gt; and &lt;code&gt;:email&lt;/code&gt;. The non-lazy way to configure parameters would be by defining the before filter above in a custom controller. We detail how to configure and customize controllers in some sections below.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring views&lt;/h3&gt; &#xA;&lt;p&gt;We built Devise to help you quickly develop an application that uses authentication. However, we don&#39;t want to be in your way when you need to customize it.&lt;/p&gt; &#xA;&lt;p&gt;Since Devise is an engine, all its views are packaged inside the gem. These views will help you get started, but after some time you may want to change them. If this is the case, you just need to invoke the following generator, and it will copy all views to your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:views&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have more than one Devise model in your application (such as &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Admin&lt;/code&gt;), you will notice that Devise uses the same views for all models. Fortunately, Devise offers an easy way to customize views. All you need to do is set &lt;code&gt;config.scoped_views = true&lt;/code&gt; inside the &lt;code&gt;config/initializers/devise.rb&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;After doing so, you will be able to have views based on the role like &lt;code&gt;users/sessions/new&lt;/code&gt; and &lt;code&gt;admins/sessions/new&lt;/code&gt;. If no view is found within the scope, Devise will use the default view at &lt;code&gt;devise/sessions/new&lt;/code&gt;. You can also use the generator to generate scoped views:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:views users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to generate only a few sets of views, like the ones for the &lt;code&gt;registerable&lt;/code&gt; and &lt;code&gt;confirmable&lt;/code&gt; module, you can pass a list of modules to the generator with the &lt;code&gt;-v&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:views -v registrations confirmations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring controllers&lt;/h3&gt; &#xA;&lt;p&gt;If the customization at the views level is not enough, you can customize each controller by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your custom controllers using the generator which requires a scope:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:controllers [scope]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you specify &lt;code&gt;users&lt;/code&gt; as the scope, controllers will be created in &lt;code&gt;app/controllers/users/&lt;/code&gt;. And the sessions controller will look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController&#xA;  # GET /resource/sign_in&#xA;  # def new&#xA;  #   super&#xA;  # end&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Use the -c flag to specify a controller, for example: &lt;code&gt;rails generate devise:controllers users -c=sessions&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tell the router to use this controller:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_for :users, controllers: { sessions: &#39;users/sessions&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the views from &lt;code&gt;devise/sessions&lt;/code&gt; to &lt;code&gt;users/sessions&lt;/code&gt;. Since the controller was changed, it won&#39;t use the default views located in &lt;code&gt;devise/sessions&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, change or extend the desired controller actions.&lt;/p&gt; &lt;p&gt;You can completely override a controller action:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController&#xA;  def create&#xA;    # custom sign-in code&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or you can simply add new behavior to it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController&#xA;  def create&#xA;    super do |resource|&#xA;      BackgroundWorker.trigger(resource)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful for triggering background jobs or logging events during certain actions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Remember that Devise uses flash messages to let users know if sign in was successful or unsuccessful. Devise expects your application to call &lt;code&gt;flash[:notice]&lt;/code&gt; and &lt;code&gt;flash[:alert]&lt;/code&gt; as appropriate. Do not print the entire flash hash, print only specific keys. In some circumstances, Devise adds a &lt;code&gt;:timedout&lt;/code&gt; key to the flash hash, which is not meant for display. Remove this key from the hash if you intend to print the entire hash.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring routes&lt;/h3&gt; &#xA;&lt;p&gt;Devise also ships with default routes. If you need to customize them, you should probably be able to do it through the devise_for method. It accepts several options like :class_name, :path_prefix and so on, including the possibility to change path names for I18n:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_for :users, path: &#39;auth&#39;, path_names: { sign_in: &#39;login&#39;, sign_out: &#39;logout&#39;, password: &#39;secret&#39;, confirmation: &#39;verification&#39;, unlock: &#39;unblock&#39;, registration: &#39;register&#39;, sign_up: &#39;cmon_let_me_in&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to check &lt;code&gt;devise_for&lt;/code&gt; &lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/ActionDispatch/Routing/Mapper%3Adevise_for&#34;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;If you have the need for more deep customization, for instance to also allow &#34;/sign_in&#34; besides &#34;/users/sign_in&#34;, all you need to do is create your routes normally and wrap them in a &lt;code&gt;devise_scope&lt;/code&gt; block in the router:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_scope :user do&#xA;  get &#39;sign_in&#39;, to: &#39;devise/sessions#new&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, you tell Devise to use the scope &lt;code&gt;:user&lt;/code&gt; when &#34;/sign_in&#34; is accessed. Notice &lt;code&gt;devise_scope&lt;/code&gt; is also aliased as &lt;code&gt;as&lt;/code&gt; in your router.&lt;/p&gt; &#xA;&lt;p&gt;Please note: You will still need to add &lt;code&gt;devise_for&lt;/code&gt; in your routes in order to use helper methods such as &lt;code&gt;current_user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_for :users, skip: :all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;I18n&lt;/h3&gt; &#xA;&lt;p&gt;Devise uses flash messages with I18n, in conjunction with the flash keys :notice and :alert. To customize your app, you can set up your locale file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  devise:&#xA;    sessions:&#xA;      signed_in: &#39;Signed in successfully.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create distinct messages based on the resource you&#39;ve configured using the singular name given in routes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  devise:&#xA;    sessions:&#xA;      user:&#xA;        signed_in: &#39;Welcome user, you are signed in.&#39;&#xA;      admin:&#xA;        signed_in: &#39;Hello admin!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Devise mailer uses a similar pattern to create subject messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  devise:&#xA;    mailer:&#xA;      confirmation_instructions:&#xA;        subject: &#39;Hello everybody!&#39;&#xA;        user_subject: &#39;Hello User! Please confirm your email&#39;&#xA;      reset_password_instructions:&#xA;        subject: &#39;Reset instructions&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at our locale file to check all available messages. You may also be interested in one of the many translations that are available on our wiki:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/I18n&#34;&gt;https://github.com/heartcombo/devise/wiki/I18n&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Caution: Devise Controllers inherit from ApplicationController. If your app uses multiple locales, you should be sure to set I18n.locale in ApplicationController.&lt;/p&gt; &#xA;&lt;h3&gt;Test helpers&lt;/h3&gt; &#xA;&lt;p&gt;Devise includes some test helpers for controller and integration tests. In order to use them, you need to include the respective module in your test cases/specs.&lt;/p&gt; &#xA;&lt;h3&gt;Controller tests&lt;/h3&gt; &#xA;&lt;p&gt;Controller tests require that you include &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt; on your test case or its parent &lt;code&gt;ActionController::TestCase&lt;/code&gt; superclass. For Rails versions prior to 5, include &lt;code&gt;Devise::Test::ControllerHelpers&lt;/code&gt; instead, since the superclass for controller tests was changed to ActionDispatch::IntegrationTest (for more details, see the &lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#integration-tests&#34;&gt;Integration tests&lt;/a&gt; section).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsControllerTest &amp;lt; ActionController::TestCase&#xA;  include Devise::Test::IntegrationHelpers # Rails &amp;gt;= 5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsControllerTest &amp;lt; ActionController::TestCase&#xA;  include Devise::Test::ControllerHelpers # Rails &amp;lt; 5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using RSpec, you can put the following inside a file named &lt;code&gt;spec/support/devise.rb&lt;/code&gt; or in your &lt;code&gt;spec/spec_helper.rb&lt;/code&gt; (or &lt;code&gt;spec/rails_helper.rb&lt;/code&gt; if you are using &lt;code&gt;rspec-rails&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.include Devise::Test::ControllerHelpers, type: :controller&#xA;  config.include Devise::Test::ControllerHelpers, type: :view&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just be sure that this inclusion is made &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;require &#39;rspec/rails&#39;&lt;/code&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;Now you are ready to use the &lt;code&gt;sign_in&lt;/code&gt; and &lt;code&gt;sign_out&lt;/code&gt; methods on your controller tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sign_in @user&#xA;sign_in @user, scope: :admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are testing Devise internal controllers or a controller that inherits from Devise&#39;s, you need to tell Devise which mapping should be used before a request. This is necessary because Devise gets this information from the router, but since controller tests do not pass through the router, it needs to be stated explicitly. For example, if you are testing the user scope, simply use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;test &#39;GET new&#39; do&#xA;  # Mimic the router behavior of setting the Devise scope through the env.&#xA;  @request.env[&#39;devise.mapping&#39;] = Devise.mappings[:user]&#xA;&#xA;  # Use the sign_in helper to sign in a fixture `User` record.&#xA;  sign_in users(:alice)&#xA;&#xA;  get :new&#xA;&#xA;  # assert something&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration tests&lt;/h3&gt; &#xA;&lt;p&gt;Integration test helpers are available by including the &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsTests &amp;lt; ActionDispatch::IntegrationTest&#xA;  include Devise::Test::IntegrationHelpers&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use the following &lt;code&gt;sign_in&lt;/code&gt; and &lt;code&gt;sign_out&lt;/code&gt; methods in your integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sign_in users(:bob)&#xA;sign_in users(:bob), scope: :admin&#xA;&#xA;sign_out :user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSpec users can include the &lt;code&gt;IntegrationHelpers&lt;/code&gt; module on their &lt;code&gt;:feature&lt;/code&gt; specs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.include Devise::Test::IntegrationHelpers, type: :feature&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike controller tests, integration tests do not need to supply the &lt;code&gt;devise.mapping&lt;/code&gt; &lt;code&gt;env&lt;/code&gt; value, as the mapping can be inferred by the routes that are executed in your tests.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about testing your Rails 3 - Rails 4 controllers with RSpec in the wiki:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Test-controllers-with-Rails-(and-RSpec)&#34;&gt;https://github.com/heartcombo/devise/wiki/How-To:-Test-controllers-with-Rails-(and-RSpec)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;OmniAuth&lt;/h3&gt; &#xA;&lt;p&gt;Devise comes with OmniAuth support out of the box to authenticate with other providers. To use it, simply specify your OmniAuth configuration in &lt;code&gt;config/initializers/devise.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.omniauth :github, &#39;APP_ID&#39;, &#39;APP_SECRET&#39;, scope: &#39;user,public_repo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read more about OmniAuth support in the wiki:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview&#34;&gt;https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuring multiple models&lt;/h3&gt; &#xA;&lt;p&gt;Devise allows you to set up as many Devise models as you want. If you want to have an Admin model with just authentication and timeout features, in addition to the User model above, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Create a migration with the required fields&#xA;create_table :admins do |t|&#xA;  t.string :email&#xA;  t.string :encrypted_password&#xA;  t.timestamps null: false&#xA;end&#xA;&#xA;# Inside your Admin model&#xA;devise :database_authenticatable, :timeoutable&#xA;&#xA;# Inside your routes&#xA;devise_for :admins&#xA;&#xA;# Inside your protected controller&#xA;before_action :authenticate_admin!&#xA;&#xA;# Inside your controllers and views&#xA;admin_signed_in?&#xA;current_admin&#xA;admin_session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can simply run the Devise generator.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that those models will have completely different routes. They &lt;strong&gt;do not&lt;/strong&gt; and &lt;strong&gt;cannot&lt;/strong&gt; share the same controller for sign in, sign out and so on. In case you want to have different roles sharing the same actions, we recommend that you use a role-based approach, by either providing a role column or using a dedicated gem for authorization.&lt;/p&gt; &#xA;&lt;h3&gt;ActiveJob Integration&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Rails 4.2 and ActiveJob to deliver ActionMailer messages in the background through a queuing back-end, you can send Devise emails through your existing queue by overriding the &lt;code&gt;send_devise_notification&lt;/code&gt; method in your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def send_devise_notification(notification, *args)&#xA;  devise_mailer.send(notification, self, *args).deliver_later&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Password reset tokens and Rails logs&lt;/h3&gt; &#xA;&lt;p&gt;If you enable the &lt;a href=&#34;http://rubydoc.info/github/heartcombo/devise/main/Devise/Models/Recoverable&#34;&gt;Recoverable&lt;/a&gt; module, note that a stolen password reset token could give an attacker access to your application. Devise takes effort to generate random, secure tokens, and stores only token digests in the database, never plaintext. However the default logging behavior in Rails can cause plaintext tokens to leak into log files:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Action Mailer logs the entire contents of all outgoing emails to the DEBUG level. Password reset tokens delivered to users in email will be leaked.&lt;/li&gt; &#xA; &lt;li&gt;Active Job logs all arguments to every enqueued job at the INFO level. If you configure Devise to use &lt;code&gt;deliver_later&lt;/code&gt; to send password reset emails, password reset tokens will be leaked.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Rails sets the production logger level to INFO by default. Consider changing your production logger level to WARN if you wish to prevent tokens from being leaked into your logs. In &lt;code&gt;config/environments/production.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.log_level = :warn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other ORMs&lt;/h3&gt; &#xA;&lt;p&gt;Devise supports ActiveRecord (default) and Mongoid. To select another ORM, simply require it in the initializer file.&lt;/p&gt; &#xA;&lt;h3&gt;Rails API Mode&lt;/h3&gt; &#xA;&lt;p&gt;Rails 5+ has a built-in &lt;a href=&#34;https://edgeguides.rubyonrails.org/api_app.html&#34;&gt;API Mode&lt;/a&gt; which optimizes Rails for use as an API (only). Devise is &lt;em&gt;somewhat&lt;/em&gt; able to handle applications that are built in this mode without additional modifications in the sense that it should not raise exceptions and the like. But some issues may still arise during &lt;code&gt;development&lt;/code&gt;/&lt;code&gt;testing&lt;/code&gt;, as we still don&#39;t know the full extent of this compatibility. (For more information, see &lt;a href=&#34;https://github.com/heartcombo/devise/issues/4947/&#34;&gt;issue #4947&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Supported Authentication Strategies&lt;/h4&gt; &#xA;&lt;p&gt;API-only applications don&#39;t support browser-based authentication via cookies, which is devise&#39;s default. Yet, devise can still provide authentication out of the box in those cases with the &lt;code&gt;http_authenticatable&lt;/code&gt; strategy, which uses HTTP Basic Auth and authenticates the user on each request. (For more info, see this wiki article for &lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Use-HTTP-Basic-Authentication&#34;&gt;How To: Use HTTP Basic Authentication&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;The devise default for HTTP Auth is disabled, so it will need to be enabled in the devise initializer for the database strategy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.http_authenticatable = [:database]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This restriction does not limit you from implementing custom warden strategies, either in your application or via gem-based extensions for devise. A common authentication strategy for APIs is token-based authentication. For more information on extending devise to support this type of authentication and others, see the wiki article for &lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Simple-Token-Authentication-Example#alternatives&#34;&gt;Simple Token Authentication Examples and alternatives&lt;/a&gt; or this blog post on &lt;a href=&#34;http://blog.plataformatec.com.br/2019/01/custom-authentication-methods-with-devise/&#34;&gt;Custom authentication methods with Devise&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;API Mode changes the order of the middleware stack, and this can cause problems for &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt;. This problem usually surfaces as an &lt;code&gt;undefined method `[]=&#39; for nil:NilClass&lt;/code&gt; error when using integration test helpers, such as &lt;code&gt;#sign_in&lt;/code&gt;. The solution is simply to reorder the middlewares by adding the following to test.rb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Cookies&#xA;Rails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Session::CookieStore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a deeper understanding of this, review &lt;a href=&#34;https://github.com/heartcombo/devise/issues/4696&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally be mindful that without views supported, some email-based flows from Confirmable, Recoverable and Lockable are not supported directly at this time.&lt;/p&gt; &#xA;&lt;h2&gt;Additional information&lt;/h2&gt; &#xA;&lt;h3&gt;Warden&lt;/h3&gt; &#xA;&lt;p&gt;Devise is based on Warden, which is a general Rack authentication framework created by Daniel Neighman. We encourage you to read more about Warden here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wardencommunity/warden&#34;&gt;https://github.com/wardencommunity/warden&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;We have a long list of valued contributors. Check them all at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/graphs/contributors&#34;&gt;https://github.com/heartcombo/devise/graphs/contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License. Copyright 2020 Rafael França, Leonardo Tegon, Carlos Antônio da Silva. Copyright 2009-2019 Plataformatec.&lt;/p&gt; &#xA;&lt;p&gt;The Devise logo is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>moove-it/sidekiq-scheduler</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/moove-it/sidekiq-scheduler</id>
    <link href="https://github.com/moove-it/sidekiq-scheduler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight job scheduler extension for Sidekiq&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sidekiq-scheduler&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://moove-it.github.io/sidekiq-scheduler/&#34;&gt; &lt;img src=&#34;https://moove-it.github.io/sidekiq-scheduler/images/small-logo.svg?sanitize=true&#34; width=&#34;468px&#34; height=&#34;200px&#34; alt=&#34;Sidekiq Scheduler&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://badge.fury.io/rb/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://badge.fury.io/rb/sidekiq-scheduler.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/moove-it/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://codeclimate.com/github/moove-it/sidekiq-scheduler/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/moove-it/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://api.travis-ci.org/moove-it/sidekiq-scheduler.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/moove-it/sidekiq-scheduler?branch=master&#34;&gt; &lt;img src=&#34;https://coveralls.io/repos/moove-it/sidekiq-scheduler/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://inch-ci.org/github/moove-it/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://inch-ci.org/github/moove-it/sidekiq-scheduler.svg?branch=master&#34; alt=&#34;Documentation Coverage&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://www.rubydoc.info/github/moove-it/sidekiq-scheduler&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/yard-docs-blue.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sidekiq-scheduler&lt;/code&gt; is an extension to &lt;a href=&#34;http://github.com/mperham/sidekiq&#34;&gt;Sidekiq&lt;/a&gt; that pushes jobs in a scheduled way, mimicking cron utility.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Current branch contains work of the V4 release, if you are looking for version 2.2.* or 3.*, go to &lt;a href=&#34;https://github.com/moove-it/sidekiq-scheduler/tree/2.2-stable&#34;&gt;2.2-stable branch&lt;/a&gt; / &lt;a href=&#34;https://github.com/moove-it/sidekiq-scheduler/tree/v3-stable&#34;&gt;v3-stable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install sidekiq-scheduler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Hello World&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# hello-scheduler.rb&#xA;&#xA;require &#39;sidekiq-scheduler&#39;&#xA;&#xA;class HelloWorld&#xA;  include Sidekiq::Worker&#xA;&#xA;  def perform&#xA;    puts &#39;Hello world&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/sidekiq.yml&#xA;&#xA;:schedule:&#xA;  hello_world:&#xA;    cron: &#39;0 * * * * *&#39;   # Runs once per minute&#xA;    class: HelloWorld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run sidekiq:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sidekiq -r ./hello-scheduler.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2016-12-10T11:53:08.561Z 6452 TID-ovouhwvm4 INFO: Loading Schedule&#xA;2016-12-10T11:53:08.561Z 6452 TID-ovouhwvm4 INFO: Scheduling HelloWorld {&#34;cron&#34;=&amp;gt;&#34;0 * * * * *&#34;, &#34;class&#34;=&amp;gt;&#34;HelloWorld&#34;}&#xA;2016-12-10T11:53:08.562Z 6452 TID-ovouhwvm4 INFO: Schedules Loaded&#xA;&#xA;2016-12-10T11:54:00.212Z 6452 TID-ovoulivew HelloWorld JID-b35f36a562733fcc5e58444d INFO: start&#xA;Hello world&#xA;2016-12-10T11:54:00.213Z 6452 TID-ovoulivew HelloWorld JID-b35f36a562733fcc5e58444d INFO: done: 0.001 sec&#xA;&#xA;2016-12-10T11:55:00.287Z 6452 TID-ovoulist0 HelloWorld JID-b7e2b244c258f3cd153c2494 INFO: start&#xA;Hello world&#xA;2016-12-10T11:55:00.287Z 6452 TID-ovoulist0 HelloWorld JID-b7e2b244c258f3cd153c2494 INFO: done: 0.001 sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration options&lt;/h2&gt; &#xA;&lt;p&gt;Configuration options are placed inside &lt;code&gt;sidekiq.yml&lt;/code&gt; config file.&lt;/p&gt; &#xA;&lt;p&gt;Available options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;:dynamic: &amp;lt;if true the schedule can be modified in runtime [false by default]&amp;gt;&#xA;:dynamic_every: &amp;lt;if dynamic is true, the schedule is reloaded every interval [5s by default]&amp;gt;&#xA;:enabled: &amp;lt;enables scheduler if true [true by default]&amp;gt;&#xA;:scheduler:&#xA;  :listened_queues_only: &amp;lt;push jobs whose queue is being listened by sidekiq [false by default]&amp;gt;&#xA;:rufus_scheduler_options: &amp;lt;Set custom options for rufus scheduler, like max_work_threads [{} by default]&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schedule configuration&lt;/h2&gt; &#xA;&lt;p&gt;The schedule is configured through the &lt;code&gt;:schedule&lt;/code&gt; config entry in the sidekiq config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;:schedule:&#xA;  CancelAbandonedOrders:&#xA;    cron: &#39;0 */5 * * * *&#39;   # Runs when second = 0, every 5 minutes&#xA;&#xA;  queue_documents_for_indexing:&#xA;    cron: &#39;0 0 * * * *&#39;   # Runs every hour&#xA;&#xA;    # By default the job name will be taken as worker class name.&#xA;    # If you want to have a different job name and class name, provide the &#39;class&#39; option&#xA;    class: QueueDocuments&#xA;&#xA;    queue: slow&#xA;    args: [&#39;*.pdf&#39;]&#xA;    description: &#34;This job queues pdf content for indexing in solr&#34;&#xA;&#xA;    # Enable the `metadata` argument which will pass a Hash containing the schedule metadata&#xA;    # as the last argument of the `perform` method. `false` by default.&#xA;    include_metadata: true&#xA;&#xA;    # Enable / disable a job. All jobs are enabled by default.&#xA;    enabled: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Schedule metadata&lt;/h3&gt; &#xA;&lt;p&gt;You can configure Sidekiq-scheduler to pass an argument with metadata about the scheduling process to the worker&#39;s &lt;code&gt;perform&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;In the configuration file add the following on each worker class entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#xA;  SampleWorker:&#xA;    include_metadata: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On your &lt;code&gt;perform&lt;/code&gt; method, expect an additional argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def perform(args, ..., metadata)&#xA;    # Do something with the metadata&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;metadata&lt;/code&gt; hash contains the following keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  metadata.keys =&amp;gt;&#xA;    [&#xA;      :scheduled_at # The epoch when the job was scheduled to run&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schedule types&lt;/h2&gt; &#xA;&lt;p&gt;Supported types are &lt;code&gt;cron&lt;/code&gt;, &lt;code&gt;every&lt;/code&gt;, &lt;code&gt;interval&lt;/code&gt;, &lt;code&gt;at&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Cron, every, and interval types push jobs into sidekiq in a recurrent manner.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cron&lt;/code&gt; follows the same pattern as cron utility, with seconds resolution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;:schedule:&#xA;  HelloWorld:&#xA;    cron: &#39;0 * * * * *&#39; # Runs when second = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;every&lt;/code&gt; triggers following a given frequency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    every: &#39;45m&#39;    # Runs every 45 minutes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value is parsed by &lt;a href=&#34;https://github.com/floraison/fugit#fugitduration&#34;&gt;&lt;code&gt;Fugit::Duration.parse&lt;/code&gt;&lt;/a&gt;. It understands quite a number of formats, including human-readable ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    every: 45 minutes&#xA;    every: 2 hours and 30 minutes&#xA;    every: 1.5 hours&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;interval&lt;/code&gt; is similar to &lt;code&gt;every&lt;/code&gt;, the difference between them is that &lt;code&gt;interval&lt;/code&gt; type schedules the next execution after the interval has elapsed counting from its last job enqueue.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;every&lt;/code&gt; and &lt;code&gt;interval&lt;/code&gt; count from when the Sidekiq process (re)starts. So &lt;code&gt;every: &#39;48h&#39;&lt;/code&gt; will never run if the Sidekiq process is restarted daily, for example. You can do &lt;code&gt;every: [&#39;48h&#39;, first_in: &#39;0s&#39;]&lt;/code&gt; to make the job run immediately after a restart, and then have the worker check when it was last run.&lt;/p&gt; &#xA;&lt;p&gt;At, and in types push jobs only once. &lt;code&gt;at&lt;/code&gt; schedules in a point in time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    at: &#39;3001/01/01&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify any string that &lt;code&gt;DateTime.parse&lt;/code&gt; and &lt;code&gt;Chronic&lt;/code&gt; understand. To enable Chronic strings, you must add it as a dependency.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;in&lt;/code&gt; triggers after a time duration has elapsed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    in: 1h # pushes a sidekiq job in 1 hour, after start-up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can provide options to &lt;code&gt;every&lt;/code&gt; or &lt;code&gt;cron&lt;/code&gt; via an Array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    every: [&#39;30s&#39;, first_in: &#39;120s&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler&#34;&gt;https://github.com/jmettraux/rufus-scheduler&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Load the schedule from a different file&lt;/h2&gt; &#xA;&lt;p&gt;You can place the schedule configuration in a separate file from &lt;code&gt;config/sidekiq.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# sidekiq_scheduler.yml&#xA;&#xA;clear_leaderboards_contributors:&#xA;  cron: &#39;0 30 6 * * 1&#39;&#xA;  class: ClearLeaderboards&#xA;  queue: low&#xA;  args: contributors&#xA;  description: &#39;This job resets the weekly leaderboard for contributions&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please notice that the &lt;code&gt;schedule&lt;/code&gt; root key is not present in the separate file.&lt;/p&gt; &#xA;&lt;p&gt;To load the schedule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sidekiq&#39;&#xA;require &#39;sidekiq-scheduler&#39;&#xA;&#xA;Sidekiq.configure_server do |config|&#xA;  config.on(:startup) do&#xA;    Sidekiq.schedule = YAML.load_file(File.expand_path(&#39;../../sidekiq_scheduler.yml&#39;, __FILE__))&#xA;    SidekiqScheduler::Scheduler.instance.reload_schedule!&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above code can be placed in an initializer (in &lt;code&gt;config/initializers&lt;/code&gt;) that runs every time the app starts up.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic schedule&lt;/h2&gt; &#xA;&lt;p&gt;The schedule can be modified after startup. To add / update a schedule, you have to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq.set_schedule(&#39;heartbeat&#39;, { &#39;every&#39; =&amp;gt; [&#39;1m&#39;], &#39;class&#39; =&amp;gt; &#39;HeartbeatWorker&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the schedule did not exist it will be created, if it existed it will be updated.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;:dynamic&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt;, schedule changes are loaded every 5 seconds. Use the &lt;code&gt;:dynamic_every&lt;/code&gt; flag for a different interval.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/sidekiq.yml&#xA;:dynamic: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;:dynamic&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt;, you&#39;ll have to reload the schedule manually in sidekiq side:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SidekiqScheduler::Scheduler.instance.reload_schedule!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invoke &lt;code&gt;Sidekiq.get_schedule&lt;/code&gt; to obtain the current schedule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq.get_schedule&#xA;#  =&amp;gt; { &#39;every&#39; =&amp;gt; &#39;1m&#39;, &#39;class&#39; =&amp;gt; &#39;HardWorker&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Time zones&lt;/h2&gt; &#xA;&lt;p&gt;Note that if you use the cron syntax and are not running a Rails app, this will be interpreted in the server time zone.&lt;/p&gt; &#xA;&lt;p&gt;In a Rails app, &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler&#34;&gt;rufus-scheduler&lt;/a&gt; (&amp;gt;= 3.3.3) will use the &lt;code&gt;config.time_zone&lt;/code&gt; specified in Rails.&lt;/p&gt; &#xA;&lt;p&gt;You can explicitly specify the time zone that rufus-scheduler will use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    cron: &#39;0 30 6 * * 1 Europe/Stockholm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also note that &lt;code&gt;config.time_zone&lt;/code&gt; in Rails allows for a shorthand (e.g. &#34;Stockholm&#34;) that rufus-scheduler does not accept. If you write code to set the scheduler time zone from the &lt;code&gt;config.time_zone&lt;/code&gt; value, make sure it&#39;s the right format, e.g. with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::TimeZone.find_tzinfo(Rails.configuration.time_zone).name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes about connection pooling&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re configuring your own Redis connection pool, you need to make sure the size is adequate to be inclusive of both Sidekiq&#39;s own connection pool and Rufus Scheduler&#39;s.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s a minimum of &lt;code&gt;concurrency&lt;/code&gt; + 5 (per the &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Using-Redis#complete-control&#34;&gt;Sidekiq wiki&lt;/a&gt;) + &lt;code&gt;Rufus::Scheduler::MAX_WORK_THREADS&lt;/code&gt; (28 as of this writing; per the &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler#max_work_threads&#34;&gt;Rufus README&lt;/a&gt;), for a total of 58 with the default &lt;code&gt;concurrency&lt;/code&gt; of 25.&lt;/p&gt; &#xA;&lt;p&gt;You can also override the thread pool size in Rufus Scheduler by setting the following in your &lt;code&gt;sidekiq.yml&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;...&#xA;&#xA;rufus_scheduler_options:&#xA;  max_work_threads: 5&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes about running on Multiple Hosts&lt;/h2&gt; &#xA;&lt;p&gt;Under normal conditions, &lt;code&gt;cron&lt;/code&gt; and &lt;code&gt;at&lt;/code&gt; jobs are pushed once regardless of the number of &lt;code&gt;sidekiq-scheduler&lt;/code&gt; running instances, assumming that time deltas between hosts is less than 24 hours.&lt;/p&gt; &#xA;&lt;p&gt;Non-normal conditions that could push a specific job multiple times are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;high cpu load + a high number of jobs scheduled at the same time, like 100 jobs&lt;/li&gt; &#xA; &lt;li&gt;network / redis latency + 28 (see &lt;code&gt;MAX_WORK_THREADS&lt;/code&gt; &lt;a href=&#34;https://github.com/jmettraux/rufus-scheduler/raw/master/lib/rufus/scheduler.rb#L41&#34;&gt;https://github.com/jmettraux/rufus-scheduler/blob/master/lib/rufus/scheduler.rb#L41&lt;/a&gt;) or more jobs scheduled within the same network latency window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;every&lt;/code&gt;, &lt;code&gt;interval&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; jobs will be pushed once per host.&lt;/p&gt; &#xA;&lt;h2&gt;Notes on when Sidekiq worker is down&lt;/h2&gt; &#xA;&lt;p&gt;For a &lt;code&gt;cron&lt;/code&gt;/&lt;code&gt;at&lt;/code&gt; (and all other) job to be successfully enqueued, you need at least one sidekiq worker with scheduler to be up at that moment. Handling this is up to you and depends on your application.&lt;/p&gt; &#xA;&lt;p&gt;Possible solutions include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simply ignoring this fact, if you only run frequent periodic jobs, that can tolerate some increased interval&lt;/li&gt; &#xA; &lt;li&gt;Abstaining from deploys/restarts during time when critical jobs are usually scheduled&lt;/li&gt; &#xA; &lt;li&gt;Making your infrequent jobs idempotent (so that they can be enqueued multiple times but still produce result as if was run once) and scheduling them multiple times to reduce likelihood of not being run&lt;/li&gt; &#xA; &lt;li&gt;Zero downtime deploy for sidekiq workers: keep at least one worker up during whole deploy and only restart/shut it down after when new one has started&lt;/li&gt; &#xA; &lt;li&gt;Running scheduler inside your unicorn/rails processes (if you already have zero downtime deploy set up for these)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each option has it&#39;s own pros and cons.&lt;/p&gt; &#xA;&lt;h2&gt;Notes when running multiple Sidekiq processors on the same Redis&lt;/h2&gt; &#xA;&lt;h3&gt;TL;DR&lt;/h3&gt; &#xA;&lt;p&gt;Be &lt;strong&gt;sure&lt;/strong&gt; to include the &lt;code&gt;:enabled: false&lt;/code&gt; top-level key on any additional configurations to avoid any possibility of the &lt;code&gt;schedules&lt;/code&gt; definition being wiped by the second Sidekiq process.&lt;/p&gt; &#xA;&lt;p&gt;To illustrate what we mean:&lt;/p&gt; &#xA;&lt;p&gt;Say you have one process with the schedule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# e.g., config/sidekiq.yml&#xA;&#xA;:queues:&#xA;  - default&#xA;:schedule:&#xA;  do_something_every_minute:&#xA;    class: DoSomethingJob&#xA;    args: matey&#xA;    queue: :scheduler&#xA;    cron: &#39;0 * * * * * America/Los_Angeles&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a separate separate configured process without one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# e.g., config/sidekiq_other.yml&#xA;:queues:&#xA;  - scheduler&#xA;&#xA;## NOTE Disable the Scheduler&#xA;:enabled: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;This gem stores the configured schedule in Redis on boot. It&#39;s used, primarily, to display in the Web Integration, and allow you to interact with that schedule via that integration.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re running multiple Sidekiq processes on the same Redis namespace with different configurations, &lt;strong&gt;you&#39;ll want to explicitly &lt;em&gt;disable&lt;/em&gt; Sidekiq Scheduler&lt;/strong&gt; for the other processes not responsible for the schedule. If you don&#39;t, the last booted Sidekiq processes&#39; schedule will be what is stored in Redis.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/moove-it/sidekiq-scheduler/issues/361&#34;&gt;https://github.com/moove-it/sidekiq-scheduler/issues/361&lt;/a&gt; for a more details.&lt;/p&gt; &#xA;&lt;h2&gt;Sidekiq Web Integration&lt;/h2&gt; &#xA;&lt;p&gt;sidekiq-scheduler provides an extension to the Sidekiq web interface that adds a &lt;code&gt;Recurring Jobs&lt;/code&gt; page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;&#xA;require &#39;sidekiq/web&#39;&#xA;require &#39;sidekiq-scheduler/web&#39;&#xA;&#xA;run Sidekiq::Web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/moove-it/sidekiq-scheduler/raw/master/images/recurring-jobs-ui-tab.png&#34; alt=&#34;Sidekiq Web Integration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ActiveJob integration&lt;/h2&gt; &#xA;&lt;p&gt;When using sidekiq-scheduler with ActiveJob your jobs can just extend &lt;code&gt;ApplicationJob&lt;/code&gt; as usual, without the &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;include&lt;/code&gt; boilerplate. Under the hood Rails will load up the scheduler and include the worker module for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class HelloWorld &amp;lt; ApplicationJob&#xA;  def perform&#xA;    puts &#39;Hello world&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The Spring preloader and Testing your initializer via Rails console&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re pulling in your schedule from a YML file via an initializer as shown, be aware that the Spring application preloader included with Rails will interefere with testing via the Rails console.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spring will not reload initializers&lt;/strong&gt; unless the initializer is changed. Therefore, if you&#39;re making a change to your YML schedule file and reloading Rails console to see the change, Spring will make it seem like your modified schedule is not being reloaded.&lt;/p&gt; &#xA;&lt;p&gt;To see your updated schedule, be sure to reload Spring by stopping it prior to booting the Rails console.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;spring stop&lt;/code&gt; to stop Spring.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://github.com/Moove-it/sidekiq-scheduler/issues/35#issuecomment-48067183&#34;&gt;this issue&lt;/a&gt; and &lt;a href=&#34;https://github.com/rails/spring/raw/master/README.md&#34;&gt;Spring&#39;s README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manage tasks from Unicorn/Rails server&lt;/h2&gt; &#xA;&lt;p&gt;If you want start sidekiq-scheduler only from Unicorn/Rails, but not from sidekiq you can have something like this in an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/sidekiq_scheduler.rb&#xA;require &#39;sidekiq&#39;&#xA;require &#39;sidekiq-scheduler&#39;&#xA;&#xA;puts &#34;Sidekiq.server? is #{Sidekiq.server?.inspect}&#34;&#xA;puts &#34;defined?(Rails::Server) is #{defined?(Rails::Server).inspect}&#34;&#xA;puts &#34;defined?(Unicorn) is #{defined?(Unicorn).inspect}&#34;&#xA;&#xA;if Rails.env == &#39;production&#39; &amp;amp;&amp;amp; (defined?(Rails::Server) || defined?(Unicorn))&#xA;  Sidekiq.configure_server do |config|&#xA;&#xA;    config.on(:startup) do&#xA;      Sidekiq.schedule = YAML.load_file(File.expand_path(&#39;../../scheduler.yml&#39;, __FILE__))&#xA;      SidekiqScheduler::Scheduler.instance.reload_schedule!&#xA;    end&#xA;  end&#xA;else&#xA;  SidekiqScheduler::Scheduler.instance.enabled = false&#xA;  puts &#34;SidekiqScheduler::Scheduler.instance.enabled is #{SidekiqScheduler::Scheduler.instance.enabled.inspect}&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copyright 2021 - 2022 Marcelo Lauxen.&lt;/li&gt; &#xA; &lt;li&gt;Copyright 2013 - 2022 Moove-IT.&lt;/li&gt; &#xA; &lt;li&gt;Copyright 2012 Morton Jonuschat.&lt;/li&gt; &#xA; &lt;li&gt;Some parts copyright 2010 Ben VandenBos.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>lewagon/setup</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/lewagon/setup</id>
    <link href="https://github.com/lewagon/setup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Setup instructions for Le Wagon&#39;s students on their first day of Web Development Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;In Chinese?&lt;/h2&gt; &#xA;&lt;p&gt;如果你在参加中文课程，请打开&lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/README.cn.md&#34;&gt;中文设置指南&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;¿En Español?&lt;/h2&gt; &#xA;&lt;p&gt;Haga clic en &lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/README.es.md&#34;&gt;este enlace&lt;/a&gt; para acceder a la versión en español de la configuración.&lt;/p&gt; &#xA;&lt;h2&gt;En Français ?&lt;/h2&gt; &#xA;&lt;p&gt;Clique sur &lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/README.fr.md&#34;&gt;ce lien&lt;/a&gt; pour accéder à la version française du setup.&lt;/p&gt; &#xA;&lt;h2&gt;In English&lt;/h2&gt; &#xA;&lt;p&gt;Setup guides for &lt;a href=&#34;https://www.lewagon.com&#34;&gt;Le Wagon&lt;/a&gt; Web Development course. Please choose your operating system (OS):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/macos.md&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lewagon/setup/master/images/apple_logo.png&#34; alt=&#34;macOS&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/windows.md&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lewagon/setup/master/images/windows_logo.png&#34; alt=&#34;Windows&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lewagon/setup/master/ubuntu.md&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lewagon/setup/master/images/linux_logo.png&#34; alt=&#34;Ubuntu&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>luggit/react-native-config</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/luggit/react-native-config</id>
    <link href="https://github.com/luggit/react-native-config" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bring some 12 factor love to your mobile apps!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Config variables for React Native apps&lt;/h1&gt; &#xA;&lt;p&gt;Module to expose config variables to your javascript code in React Native, supporting iOS, Android and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Bring some &lt;a href=&#34;http://12factor.net/config&#34;&gt;12 factor&lt;/a&gt; love to your mobile apps!&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Create a new file &lt;code&gt;.env&lt;/code&gt; in the root of your React Native app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;API_URL=https://myapi.com&#xA;GOOGLE_MAPS_API_KEY=abcdefgh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then access variables defined there from your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Config from &#34;react-native-config&#34;;&#xA;&#xA;Config.API_URL; // &#39;https://myapi.com&#39;&#xA;Config.GOOGLE_MAPS_API_KEY; // &#39;abcdefgh&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind this module doesn&#39;t obfuscate or encrypt secrets for packaging, so &lt;strong&gt;do not store sensitive keys in &lt;code&gt;.env&lt;/code&gt;&lt;/strong&gt;. It&#39;s &lt;a href=&#34;https://rammic.github.io/2015/07/28/hiding-secrets-in-android-apps/&#34;&gt;basically impossible to prevent users from reverse engineering mobile app secrets&lt;/a&gt;, so design your app (and APIs) with that in mind.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ yarn add react-native-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Link the library:&lt;/p&gt; &#xA;&lt;p&gt;(Note: For React Native 0.60 or greater, &lt;a href=&#34;https://reactnative.dev/blog/2019/07/03/version-60#native-modules-are-now-autolinked&#34;&gt;autolinking&lt;/a&gt; is available)&lt;/p&gt; &#xA;&lt;p&gt;(Note: For Windows, this module supports autolinking when used with &lt;code&gt;react-native-windows@0.63&lt;/code&gt; or later. For earlier versions you need to manually link the module.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ react-native link react-native-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if cocoapods are used in the project then pod has to be installed as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(cd ios; pod install)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Manual Link (iOS)&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;In XCode, in the project navigator, right click &lt;code&gt;Libraries&lt;/code&gt; ➜ &lt;code&gt;Add Files to [your project&#39;s name]&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Go to &lt;code&gt;node_modules&lt;/code&gt; ➜ &lt;code&gt;react-native-config&lt;/code&gt; and add &lt;code&gt;ReactNativeConfig.xcodeproj&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Expand the &lt;code&gt;ReactNativeConfig.xcodeproj&lt;/code&gt; ➜ &lt;code&gt;Products&lt;/code&gt; folder&lt;/li&gt; &#xA;   &lt;li&gt;In the project navigator, select your project. Add &lt;code&gt;libReactNativeConfig.a&lt;/code&gt; to your project&#39;s &lt;code&gt;Build Phases&lt;/code&gt; ➜ &lt;code&gt;Link Binary With Libraries&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;And go the Build Settings tab. Make sure All is toggled on (instead of Basic)&lt;/li&gt; &#xA;   &lt;li&gt;Look for Header Search Paths and add &lt;code&gt;$(SRCROOT)/../node_modules/react-native-config/ios/**&lt;/code&gt; as &lt;code&gt;non-recursive&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Manual Link (Android)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;android/settings.gradle&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+ include &#39;:react-native-config&#39;&#xA;+ project(&#39;:react-native-config&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-config/android&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;android/app/build.gradle&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;dependencies {&#xA;&#x9;implementation &#34;com.facebook.react:react-native:+&#34;  // From node_modules&#xA;+&#x9;implementation project(&#39;:react-native-config&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;MainApplication.java&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+ import com.lugg.ReactNativeConfig.ReactNativeConfigPackage;&#xA;&#xA;@Override&#xA;protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&#xA;&#x9;   return Arrays.asList(&#xA;       &#x9;&#x9;new MainReactPackage()&#xA;+      &#x9;&#x9;new ReactNativeConfigPackage()&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Manual Link (Windows)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;windows/myapp.sln&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add the &lt;code&gt;RNCConfig&lt;/code&gt; project to your solution.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Open the solution in Visual Studio 2019&lt;/li&gt; &#xA;   &lt;li&gt;Right-click Solution icon in Solution Explorer &amp;gt; Add &amp;gt; Existing Project&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;if using &lt;code&gt;react-native-windows@0.62&lt;/code&gt; or later select &lt;code&gt;node_modules\react-native-config\windows\RNCConfig\RNCConfig.vcxproj&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;if using &lt;code&gt;react-native-windows@0.61&lt;/code&gt; select &lt;code&gt;node_modules\react-native-config\windows\RNCConfig61\RNCConfig61.vcxproj&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;windows/myapp/myapp.vcxproj&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add a reference to &lt;code&gt;RNCConfig&lt;/code&gt; to your main application project. From Visual Studio 2019:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Right-click main application project &amp;gt; Add &amp;gt; Reference...&lt;br&gt; Check &lt;code&gt;RNCConfig&lt;/code&gt; from Solution Projects.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;pch.h&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add &lt;code&gt;#include &#34;winrt/RNCConfig.h&#34;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;app.cpp&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add &lt;code&gt;PackageProviders().Append(winrt::RNCConfig::ReactPackageProvider());&lt;/code&gt; before &lt;code&gt;InitializeComponent();&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extra step for Android&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll also need to manually apply a plugin to your app, from &lt;code&gt;android/app/build.gradle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 2nd line, add a new apply:&#xA;apply from: project(&#39;:react-native-config&#39;).projectDir.getPath() + &#34;/dotenv.gradle&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Advanced Android Setup&lt;/h4&gt; &#xA;&lt;p&gt;In &lt;code&gt;android/app/build.gradle&lt;/code&gt;, if you use &lt;code&gt;applicationIdSuffix&lt;/code&gt; or &lt;code&gt;applicationId&lt;/code&gt; that is different from the package name indicated in &lt;code&gt;AndroidManifest.xml&lt;/code&gt; in &lt;code&gt;&amp;lt;manifest package=&#34;...&#34;&amp;gt;&lt;/code&gt; tag, for example, to support different build variants: Add this in &lt;code&gt;android/app/build.gradle&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;defaultConfig {&#xA;    ...&#xA;    resValue &#34;string&#34;, &#34;build_config_package&#34;, &#34;YOUR_PACKAGE_NAME_IN_ANDROIDMANIFEST_XML&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Native Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Config variables set in &lt;code&gt;.env&lt;/code&gt; are available to your Java classes via &lt;code&gt;BuildConfig&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public HttpURLConnection getApiClient() {&#xA;    URL url = new URL(BuildConfig.API_URL);&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also read them from your Gradle configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;defaultConfig {&#xA;    applicationId project.env.get(&#34;APP_ID&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use them to configure libraries in &lt;code&gt;AndroidManifest.xml&lt;/code&gt; and others:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;meta-data&#xA;  android:name=&#34;com.google.android.geo.API_KEY&#34;&#xA;  android:value=&#34;@string/GOOGLE_MAPS_API_KEY&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All variables are strings, so you may need to cast them. For instance, in Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;versionCode project.env.get(&#34;VERSION_CODE&#34;).toInteger()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once again, remember variables stored in &lt;code&gt;.env&lt;/code&gt; are published with your code, so &lt;strong&gt;DO NOT put anything sensitive there like your app &lt;code&gt;signingConfigs&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Read variables declared in &lt;code&gt;.env&lt;/code&gt; from your Obj-C classes like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// import header&#xA;#import &#34;ReactNativeConfig.h&#34;&#xA;&#xA;// then read individual keys like:&#xA;NSString *apiUrl = [ReactNativeConfig envFor:@&#34;API_URL&#34;];&#xA;&#xA;// or just fetch the whole config&#xA;NSDictionary *config = [ReactNativeConfig env];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;You can access variables declared in &lt;code&gt;.env&lt;/code&gt; from C++ in your App project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string api_key = ReactNativeConfig::API_KEY;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, you can access those values in other project by adding reference to the &lt;code&gt;RNCConfig&lt;/code&gt; as described in the manual linking section.&lt;/p&gt; &#xA;&lt;h3&gt;Availability in Build settings and Info.plist&lt;/h3&gt; &#xA;&lt;p&gt;With one extra step environment values can be exposed to &#34;Info.plist&#34; and Build settings in the native project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;click on the file tree and create new file of type XCConfig &lt;img src=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/readme-pics/1.ios_new_file.png&#34; alt=&#34;img&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/readme-pics/2.ios_file_type.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;save it under &lt;code&gt;ios&lt;/code&gt; folder as &#34;Config.xcconfig&#34; with the following content:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include? &#34;tmp.xcconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;add the following to your &#34;.gitignore&#34;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# react-native-config codegen&#xA;ios/tmp.xcconfig&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;go to project settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;apply config to your configurations &lt;img src=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/readme-pics/3.ios_apply_config.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;em&gt;Edit scheme...&lt;/em&gt; -&amp;gt; &lt;em&gt;Build&lt;/em&gt; -&amp;gt; &lt;em&gt;Pre-actions&lt;/em&gt;, click &lt;em&gt;+&lt;/em&gt; and select &lt;em&gt;New Run Script Action&lt;/em&gt;. Paste below code which will generate &#34;tmp.xcconfig&#34; before each build exposing values to Build Settings and Info.plist. Make sure to select your target under &lt;em&gt;Provide build settings from&lt;/em&gt;, so &lt;code&gt;$SRCROOT&lt;/code&gt; environment variables is available to the script. (Note that this snippet has to be placed after &#34;cp ... ${PROJECT_DIR}/../.env&#34; if &lt;a href=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/#ios-multi-scheme&#34;&gt;approach explained below&lt;/a&gt; is used).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;${SRCROOT}/../node_modules/react-native-config/ios/ReactNativeConfig/BuildXCConfig.rb&#34; &#34;${SRCROOT}/..&#34; &#34;${SRCROOT}/tmp.xcconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/readme-pics/4.ios_pre_actions.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can now access your env variables in the Info.plist, for example &lt;code&gt;$(MY_ENV_VARIABLE)&lt;/code&gt;. If you face issues accessing variables, please open a new issue and provide as much details as possible so above steps can be improved.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;App Extensions&lt;/h4&gt; &#xA;&lt;p&gt;Add dependency to &lt;code&gt;react-native-config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target &#39;ShareExtension&#39; do&#xA;  platform :ios, &#39;9.0&#39;&#xA;&#xA;  pod &#39;react-native-config&#39;, :path =&amp;gt; &#39;../node_modules/react-native-config&#39;&#xA;&#xA;  # For extensions without React dependencies&#xA;  pod &#39;react-native-config/Extension&#39;, :path =&amp;gt; &#39;../node_modules/react-native-config&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Different environments&lt;/h3&gt; &#xA;&lt;p&gt;Save config for different environments in different files: &lt;code&gt;.env.staging&lt;/code&gt;, &lt;code&gt;.env.production&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;By default react-native-config will read from &lt;code&gt;.env&lt;/code&gt;, but you can change it when building or releasing your app.&lt;/p&gt; &#xA;&lt;p&gt;The simplest approach is to tell it what file to read with an environment variable, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ENVFILE=.env.staging react-native run-ios           # bash&#xA;$ SET ENVFILE=.env.staging &amp;amp;&amp;amp; react-native run-ios    # windows&#xA;$ env:ENVFILE=&#34;.env.staging&#34;; react-native run-ios    # powershell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also works for &lt;code&gt;run-android&lt;/code&gt;. Alternatively, there are platform-specific options below.&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;The same environment variable can be used to assemble releases with a different config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd android &amp;amp;&amp;amp; ENVFILE=.env.staging ./gradlew assembleRelease&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can define a map in &lt;code&gt;build.gradle&lt;/code&gt; associating builds with env files. Do it before the &lt;code&gt;apply from&lt;/code&gt; call, and use build cases in lowercase, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;project.ext.envConfigFiles = [&#xA;    debug: &#34;.env.development&#34;,&#xA;    release: &#34;.env.production&#34;,&#xA;    anothercustombuild: &#34;.env&#34;,&#xA;]&#xA;&#xA;apply from: project(&#39;:react-native-config&#39;).projectDir.getPath() + &#34;/dotenv.gradle&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also note that besides requiring lowercase, the matching is done with &lt;code&gt;buildFlavor.startsWith&lt;/code&gt;, so a build named &lt;code&gt;debugProd&lt;/code&gt; could match the &lt;code&gt;debug&lt;/code&gt; case, above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;ios-multi-scheme&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;The basic idea in iOS is to have one scheme per environment file, so you can easily alternate between them.&lt;/p&gt; &#xA;&lt;p&gt;Start by creating a new scheme:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the Xcode menu, go to Product &amp;gt; Scheme &amp;gt; Edit Scheme&lt;/li&gt; &#xA; &lt;li&gt;Click Duplicate Scheme on the bottom&lt;/li&gt; &#xA; &lt;li&gt;Give it a proper name on the top left. For instance: &#34;Myapp (staging)&#34;&lt;/li&gt; &#xA; &lt;li&gt;Make sure the &#34;Shared&#34; checkbox is checked so the scheme is added to your version control system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then edit the newly created scheme to make it use a different env file. From the same &#34;manage scheme&#34; window:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expand the &#34;Build&#34; settings on left&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Pre-actions&#34;, and under the plus sign select &#34;New Run Script Action&#34;&lt;/li&gt; &#xA; &lt;li&gt;Where it says &#34;Type a script or drag a script file&#34;, type: &lt;pre&gt;&lt;code&gt;cp &#34;${PROJECT_DIR}/../.env.staging&#34; &#34;${PROJECT_DIR}/../.env&#34;  # replace .env.staging for your file&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also ensure that &#34;Provide build settings from&#34;, just above the script, has a value selected so that PROJECT_DIR is set.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you have separated build configurations, you may easily set the different envfiles per configuration by adding these lines into the end of Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ENVFILES = {&#xA;  &#39;Debug&#39; =&amp;gt; &#39;$(PODS_ROOT)/../../.env.debug&#39;,&#xA;  &#39;Release&#39; =&amp;gt; &#39;$(PODS_ROOT)/../../.env.production&#39;,&#xA;}&#xA;post_install do |installer|&#xA;  installer.pods_project.targets.each do |target|&#xA;    target.build_configurations.each do |config|&#xA;      if target.name == &#39;react-native-config&#39;&#xA;        config.build_settings[&#39;ENVFILE&#39;] = ENVFILES[config.name]&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you have flipper enabled in your Podfile, you must move the &lt;code&gt;flipper_post_install&lt;/code&gt; into the newely added hook since Podfile doesn&#39;t allow multiple &lt;code&gt;post_install&lt;/code&gt; hooks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  target &#39;MyApp&#39; do&#xA;    # ...&#xA;    use_flipper!&#xA;-   post_install do |installer|&#xA;-     flipper_post_install(installer)&#xA;-   end&#xA;  end&#xA;&#xA;  post_install do |installer|&#xA;+   flipper_post_install(installer)&#xA;&#xA;    installer.pods_project.targets.each do |target|&#xA;      target.build_configurations.each do |config|&#xA;        if target.name == &#39;react-native-config&#39;&#xA;          config.build_settings[&#39;ENVFILE&#39;] = ENVFILES[config.name]&#xA;        end&#xA;      end&#xA;    end&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Problems with Proguard&lt;/h3&gt; &#xA;&lt;p&gt;When Proguard is enabled (which it is by default for Android release builds), it can rename the &lt;code&gt;BuildConfig&lt;/code&gt; Java class in the minification process and prevent React Native Config from referencing it. To avoid this, add an exception to &lt;code&gt;android/app/proguard-rules.pro&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keep class com.mypackage.BuildConfig { *; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;com.mypackage&lt;/code&gt; should match the &lt;code&gt;package&lt;/code&gt; value in your &lt;code&gt;app/src/main/AndroidManifest.xml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If using Dexguard, the shrinking phase will remove resources it thinks are unused. It is necessary to add an exception to preserve the build config package name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keepresources string/build_config_package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TypeError: _reactNativeConfig.default.getConstants is not a function&lt;/h3&gt; &#xA;&lt;p&gt;This error stems from &lt;code&gt;.env&lt;/code&gt; file being malformed. Accepted formats are listed here &lt;a href=&#34;https://regex101.com/r/cbm5Tp/1&#34;&gt;https://regex101.com/r/cbm5Tp/1&lt;/a&gt;. Common causes are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Missing the .env file entirely&lt;/li&gt; &#xA; &lt;li&gt;Rogue space anywhere, example: in front of env variable: &lt;code&gt; MY_ENV=&#39;foo&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Since &lt;code&gt;react-native-config&lt;/code&gt; contains native code, it cannot be run in a node.js environment (Jest, Mocha). &lt;a href=&#34;https://github.com/CureApp/react-native-config-node&#34;&gt;react-native-config-node&lt;/a&gt; provides a way to mock &lt;code&gt;react-native-config&lt;/code&gt; for use in test runners - exactly as it is used in the actual app.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, &lt;a href=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/example/&#34;&gt;the Example app&lt;/a&gt; supports running automatic tests by using &lt;a href=&#34;https://github.com/microsoft/WinAppDriver&#34;&gt;WinAppDriver&lt;/a&gt;. In the Example app folder run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;yarn appium&#xA;yarn test:windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jest&lt;/h3&gt; &#xA;&lt;p&gt;For mocking the &lt;code&gt;Config.FOO_BAR&lt;/code&gt; usage, create a mock at &lt;code&gt;__mocks__/react-native-config.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// __mocks__/react-native-config.js&#xA;export default {&#xA;  FOO_BAR: &#39;baz&#39;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Meta&lt;/h2&gt; &#xA;&lt;p&gt;Created by Pedro Belo at &lt;a href=&#34;https://lugg.com/&#34;&gt;Lugg&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>activeadmin/activeadmin</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/activeadmin/activeadmin</id>
    <link href="https://github.com/activeadmin/activeadmin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The administration framework for Ruby on Rails applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Active Admin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://activeadmin.info&#34;&gt;Active Admin&lt;/a&gt; is a Ruby on Rails framework for creating elegant backends for website administration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/activeadmin&#34;&gt;&lt;img src=&#34;http://img.shields.io/gem/v/activeadmin.svg?sanitize=true&#34; alt=&#34;Version         &#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/activeadmin/activeadmin/actions&#34;&gt;&lt;img src=&#34;https://github.com/activeadmin/activeadmin/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;Github Actions  &#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/activeadmin/activeadmin/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/779e407d22bacff19733/test_coverage&#34; alt=&#34;Coverage        &#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-activeadmin?utm_source=rubygems-activeadmin&amp;amp;utm_medium=readme&#34;&gt;&lt;img src=&#34;https://tidelift.com/badges/github/activeadmin/activeadmin&#34; alt=&#34;Tidelift        &#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/activeadmin/activeadmin&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/activeadmin/activeadmin.svg?branch=master&#34; alt=&#34;Inch CI         &#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable developers to quickly create good-looking administration interfaces.&lt;/li&gt; &#xA; &lt;li&gt;Build a DSL for developers and an interface for businesses.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that developers can easily customize every nook and cranny.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;http://activeadmin.info/0-installation.html&#34;&gt;the docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Try the &lt;a href=&#34;http://demo.activeadmin.info/admin&#34;&gt;live demo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/activeadmin/activeadmin/wiki&#34;&gt;wiki&lt;/a&gt; includes links to tutorials, articles and sample projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;For enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Active Admin for enterprise is available via the Tidelift subscription. &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-activeadmin?utm_source=rubygems-activeadmin&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&#34;&gt;Learn More&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/activeadmin&#34;&gt;StackOverflow&lt;/a&gt; for help requests and how-to questions.&lt;/p&gt; &#xA;&lt;p&gt;Please open GitHub issues for bugs and enhancements only, not general help requests. Please search previous issues (and Google and StackOverflow) before creating a new issue.&lt;/p&gt; &#xA;&lt;p&gt;Google Groups, IRC #activeadmin and Gitter are not actively monitored.&lt;/p&gt; &#xA;&lt;h2&gt;Want to contribute?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute through code or documentation, the &lt;a href=&#34;https://github.com/activeadmin/activeadmin/raw/master/CONTRIBUTING.md&#34;&gt;Contributing guide is the best place to start&lt;/a&gt;. If you have questions, feel free to ask.&lt;/p&gt; &#xA;&lt;h2&gt;Want to support us?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to support us financially, you can &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-activeadmin?utm_source=rubygems-activeadmin&amp;amp;utm_medium=referral&amp;amp;utm_campaign=github&amp;amp;utm_content=support&#34;&gt;help fund the project through a Tidelift subscription&lt;/a&gt;. By buying a Tidelift subscription you make sure your whole dependency stack is properly maintained, while also getting a comprehensive view of outdated dependencies, new releases, security alerts, and licensing compatibility issues.&lt;/p&gt; &#xA;&lt;p&gt;You can also support us with a weekly tip via &lt;a href=&#34;https://liberapay.com/Active-Admin/donate&#34;&gt;Liberapay&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, we have an &lt;a href=&#34;https://opencollective.com/activeadmin&#34;&gt;Open Collective&lt;/a&gt; where you can become a backer or sponsor for the project, and also submit expenses to it.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;We try not to reinvent the wheel, so Active Admin is built with other open source projects:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/activeadmin/arbre&#34;&gt;Arbre&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ruby -&amp;gt; HTML, just like that.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/plataformatec/devise&#34;&gt;Devise&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Powerful, extensible user authentication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/justinfrench/formtastic&#34;&gt;Formtastic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Rails form builder plugin with semantically rich and accessible markup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/activeadmin/inherited_resources&#34;&gt;Inherited Resources&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simplifies controllers with pre-built RESTful controller actions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kaminari/kaminari&#34;&gt;Kaminari&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Elegant pagination for any sort of collection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/activerecord-hackery/ransack&#34;&gt;Ransack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides a simple search API to query your data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Security contact information&lt;/h2&gt; &#xA;&lt;p&gt;Please use the Tidelift security contact to &lt;a href=&#34;https://tidelift.com/security&#34;&gt;report a security vulnerability&lt;/a&gt;. Tidelift will coordinate the fix and disclosure.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/gregbell&#34;&gt;Greg Bell&lt;/a&gt; for creating and sharing this project with the open source community.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/activeadmin/activeadmin/graphs/contributors&#34;&gt;all the people that ever contributed through code&lt;/a&gt; or other means such as bug reports, issue triaging, feature suggestions, code snippet tips, Slack discussions and so on.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-activeadmin?utm_source=rubygems-activeadmin&amp;amp;utm_medium=readme&#34;&gt;Tidelift&lt;/a&gt; and all our Tidelift subscribers.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://opencollective.com/activeadmin#contributors&#34;&gt;Open Collective&lt;/a&gt; and all our Open Collective contributors.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>faker-ruby/faker</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/faker-ruby/faker</id>
    <link href="https://github.com/faker-ruby/faker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for generating fake data such as names, addresses, and phone numbers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36028424/40263395-4318481e-5b44-11e8-92e5-3dcc1ce169b3.png&#34; alt=&#34;logotype a happy-07&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Faker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/faker-ruby/faker/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/faker-ruby/faker/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/faker&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/faker.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inch-ci.org/github/faker-ruby/faker&#34;&gt;&lt;img src=&#34;https://inch-ci.org/github/faker-ruby/faker.svg?branch=master&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/stympy/faker/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/ef54c7f9df86e965d64b/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/stympy/faker/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/ef54c7f9df86e965d64b/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dependabot.com/compatibility-score.html?dependency-name=faker&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34;&gt;&lt;img src=&#34;https://api.dependabot.com/badges/compatibility_score?dependency-name=faker&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34; alt=&#34;SemVer compatibility&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This gem is a port of &lt;a href=&#34;https://metacpan.org/pod/Data::Faker&#34;&gt;Perl&#39;s Data::Faker library&lt;/a&gt; that generates fake data.&lt;/p&gt; &#xA;&lt;p&gt;It comes in very handy for taking screenshots (taking screenshots for my project, &lt;a href=&#34;http://catchthebest.com/&#34;&gt;Catch the Best&lt;/a&gt; was the original impetus for the creation of this gem), having real-looking test data, and having your database populated with more than one or two records while you&#39;re doing development.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#faker&#34;&gt;Faker&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#note&#34;&gt;NOTE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#cli&#34;&gt;CLI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#ensuring-unique-values&#34;&gt;Ensuring unique values&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#deterministic-random&#34;&gt;Deterministic Random&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#generators&#34;&gt;Generators&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#default&#34;&gt;Default&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#blockchain&#34;&gt;Blockchain&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#books&#34;&gt;Books&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#fantasy&#34;&gt;Fantasy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#creature&#34;&gt;Creature&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#games&#34;&gt;Games&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#japanese-media&#34;&gt;Japanese Media&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#movies&#34;&gt;Movies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#music&#34;&gt;Music&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#quotes&#34;&gt;Quotes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#sports&#34;&gt;Sports&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#tv-shows&#34;&gt;Tv Shows&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NOTE&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;While Faker generates data at random, returned values are not guaranteed to be unique by default. You must explicitly specify when you require unique values, see &lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#ensuring-unique-values&#34;&gt;details&lt;/a&gt;. Values also can be deterministic if you use the deterministic feature, see &lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#deterministic-random&#34;&gt;details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;This is the &lt;code&gt;master&lt;/code&gt; branch of Faker and may contain changes that are not yet released. Please refer the README of your version for the available methods. List of all versions is &lt;a href=&#34;https://github.com/stympy/faker/releases&#34;&gt;available here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install faker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: if you are getting a &lt;code&gt;uninitialized constant Faker::[some_class]&lt;/code&gt; error, your version of the gem is behind the one documented here. To make sure that your gem is the one documented here, change the line in your Gemfile to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;faker&#39;, :git =&amp;gt; &#39;https://github.com/faker-ruby/faker.git&#39;, :branch =&amp;gt; &#39;master&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;faker&#39;&#xA;&#xA;Faker::Name.name      #=&amp;gt; &#34;Christophe Bartell&#34;&#xA;&#xA;Faker::Internet.email #=&amp;gt; &#34;kirsten.greenholt@corkeryfisher.info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;Instructions are available in the &lt;a href=&#34;https://github.com/faker-ruby/faker-bot&#34;&gt;faker-bot README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Ensuring unique values&lt;/h3&gt; &#xA;&lt;p&gt;Prefix your method call with &lt;code&gt;unique&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Name.unique.name # This will return a unique name every time it is called&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If too many unique values are requested from a generator that has a limited number of potential values, a &lt;code&gt;Faker::UniqueGenerator::RetryLimitExceeded&lt;/code&gt; exception may be raised. It is possible to clear the record of unique values that have been returned, for example between tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Name.unique.clear # Clears used values for Faker::Name&#xA;Faker::UniqueGenerator.clear # Clears used values for all generators&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also can give some already used values to the unique generator if you have collisions with the generated data (i.e: using FactoryBot with random and manually set values).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Usage:&#xA;# Faker::&amp;lt;generator&amp;gt;.unique.exclude(method, arguments, list)&#xA;&#xA;# Add &#39;azerty&#39; and &#39;wxcvbn&#39; to the string generator with 6 char length&#xA;Faker::Lorem.unique.exclude :string, [number: 6], %w[azerty wxcvbn]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deterministic Random&lt;/h3&gt; &#xA;&lt;p&gt;Faker supports seeding of its pseudo-random number generator (PRNG) to provide deterministic output of repeated method calls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Config.random = Random.new(42)&#xA;Faker::Company.bs #=&amp;gt; &#34;seize collaborative mindshare&#34;&#xA;Faker::Company.bs #=&amp;gt; &#34;engage strategic platforms&#34;&#xA;Faker::Config.random = Random.new(42)&#xA;Faker::Company.bs #=&amp;gt; &#34;seize collaborative mindshare&#34;&#xA;Faker::Company.bs #=&amp;gt; &#34;engage strategic platforms&#34;&#xA;&#xA;Faker::Config.random = nil # seeds the PRNG using default entropy sources&#xA;Faker::Config.random.seed #=&amp;gt; 185180369676275068918401850258677722187&#xA;Faker::Company.bs #=&amp;gt; &#34;cultivate viral synergies&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generators&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Some of the generators below aren&#39;t released yet. If you want to use them, change the line in your gemfile to:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;faker&#39;, :git =&amp;gt; &#39;https://github.com/faker-ruby/faker.git&#39;, :branch =&amp;gt; &#39;master&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/address.md&#34;&gt;Faker::Address&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/alphanumeric.md&#34;&gt;Faker::Alphanumeric&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/ancient.md&#34;&gt;Faker::Ancient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/app.md&#34;&gt;Faker::App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/appliance.md&#34;&gt;Faker::Appliance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/artist.md&#34;&gt;Faker::Artist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/avatar.md&#34;&gt;Faker::Avatar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/bank.md&#34;&gt;Faker::Bank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/barcode.md&#34;&gt;Faker::Barcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/beer.md&#34;&gt;Faker::Beer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/blood.md&#34;&gt;Faker::Blood&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/boolean.md&#34;&gt;Faker::Boolean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/bossa_nova.md&#34;&gt;Faker::BossaNova&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/business.md&#34;&gt;Faker::Business&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/camera.md&#34;&gt;Faker::Camera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/cannabis.md&#34;&gt;Faker::Cannabis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/chile_rut.md&#34;&gt;Faker::ChileRut&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/chuck_norris.md&#34;&gt;Faker::ChuckNorris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/code.md&#34;&gt;Faker::Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/coffee.md&#34;&gt;Faker::Coffee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/coin.md&#34;&gt;Faker::Coin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/color.md&#34;&gt;Faker::Color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/commerce.md&#34;&gt;Faker::Commerce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/company.md&#34;&gt;Faker::Company&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/compass.md&#34;&gt;Faker::Compass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/computer.md&#34;&gt;Faker::Computer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/construction.md&#34;&gt;Faker::Construction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/cosmere.md&#34;&gt;Faker::Cosmere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/crypto.md&#34;&gt;Faker::Crypto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/crypto_coin.md&#34;&gt;Faker::CryptoCoin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/currency.md&#34;&gt;Faker::Currency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/date.md&#34;&gt;Faker::Date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/dc_comics.md&#34;&gt;Faker::DcComics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/demographic.md&#34;&gt;Faker::Demographic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/dessert.md&#34;&gt;Faker::Dessert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/device.md&#34;&gt;Faker::Device&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/driving_licence.md&#34;&gt;Faker::DrivingLicence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/drone/drone.md&#34;&gt;Faker::Drone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/educator.md&#34;&gt;Faker::Educator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/electrical_components.md&#34;&gt;Faker::ElectricalComponents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/emotion.md&#34;&gt;Faker::Emotion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/esport.md&#34;&gt;Faker::Esport&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/file.md&#34;&gt;Faker::File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/fillmurray.md&#34;&gt;Faker::Fillmurray&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/finance.md&#34;&gt;Faker::Finance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/food.md&#34;&gt;Faker::Food&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/funny_name.md&#34;&gt;Faker::FunnyName&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/gender.md&#34;&gt;Faker::Gender&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/greek_philosophers.md&#34;&gt;Faker::GreekPhilosophers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/hacker.md&#34;&gt;Faker::Hacker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/hipster.md&#34;&gt;Faker::Hipster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/hobby.md&#34;&gt;Faker::Hobby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/house.md&#34;&gt;Faker::House&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/id_number.md&#34;&gt;Faker::IDNumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/industry_segments.md&#34;&gt;Faker::IndustrySegments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/internet.md&#34;&gt;Faker::Internet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/invoice.md&#34;&gt;Faker::Invoice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/job.md&#34;&gt;Faker::Job&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/json.md&#34;&gt;Faker::Json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/kpop.md&#34;&gt;Faker::Kpop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/lorem.md&#34;&gt;Faker::Lorem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/lorem_flickr.md&#34;&gt;Faker::LoremFlickr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/lorem_pixel.md&#34;&gt;Faker::LoremPixel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/markdown.md&#34;&gt;Faker::Markdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/marketing.md&#34;&gt;Faker::Marketing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/measurement.md&#34;&gt;Faker::Measurement&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/military.md&#34;&gt;Faker::Military&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/mountain.md&#34;&gt;Faker::Mountain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/name.md&#34;&gt;Faker::Name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/nation.md&#34;&gt;Faker::Nation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/nato_phonetic_alphabet.md&#34;&gt;Faker::NatoPhoneticAlphabet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/national_health_service.md&#34;&gt;Faker::NationalHealthService&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/number.md&#34;&gt;Faker::Number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/omniauth.md&#34;&gt;Faker::Omniauth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/phone_number.md&#34;&gt;Faker::PhoneNumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/placeholdit.md&#34;&gt;Faker::Placeholdit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/programming_language.md&#34;&gt;Faker::ProgrammingLanguage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/relationship.md&#34;&gt;Faker::Relationship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/restaurant.md&#34;&gt;Faker::Restaurant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/science.md&#34;&gt;Faker::Science&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/slack_emoji.md&#34;&gt;Faker::SlackEmoji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/source.md&#34;&gt;Faker::Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/south_africa.md&#34;&gt;Faker::SouthAfrica&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/space.md&#34;&gt;Faker::Space&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/string.md&#34;&gt;Faker::String&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/stripe.md&#34;&gt;Faker::Stripe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/subscription.md&#34;&gt;Faker::Subscription&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/superhero.md&#34;&gt;Faker::Superhero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/tea.md&#34;&gt;Faker::Tea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/team.md&#34;&gt;Faker::Team&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/time.md&#34;&gt;Faker::Time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/twitter.md&#34;&gt;Faker::Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/types.md&#34;&gt;Faker::Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/university.md&#34;&gt;Faker::University&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/vehicle.md&#34;&gt;Faker::Vehicle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/verbs.md&#34;&gt;Faker::Verbs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/world_cup.md&#34;&gt;Faker::WorldCup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Blockchain&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/aeternity.md&#34;&gt;Faker::Blockchain::Aeternity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/bitcoin.md&#34;&gt;Faker::Blockchain::Bitcoin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/ethereum.md&#34;&gt;Faker::Blockchain::Ethereum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/tezos.md&#34;&gt;Faker::Blockchain::Tezos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/book.md&#34;&gt;Faker::Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/culture_series.md&#34;&gt;Faker::Books::CultureSeries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/dune.md&#34;&gt;Faker::Books::Dune&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/lovecraft.md&#34;&gt;Faker::Books::Lovecraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/the_kingkiller_chronicle.md&#34;&gt;Faker::Books::TheKingkillerChronicle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fantasy&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/fantasy/tolkien.md&#34;&gt;Faker::Fantasy::Tolkien&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Creature&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/animal.md&#34;&gt;Faker::Creature::Animal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/bird.md&#34;&gt;Faker::Creature::Bird&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/cat.md&#34;&gt;Faker::Creature::Cat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/dog.md&#34;&gt;Faker::Creature::Dog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/horse.md&#34;&gt;Faker::Creature::Horse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Games&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/game.md&#34;&gt;Faker::Game&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/clash_of_clans.md&#34;&gt;Faker::Games::ClashOfClans&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/dnd.md&#34;&gt;Faker::Games::DnD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/dota.md&#34;&gt;Faker::Games::Dota&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/elder_scrolls.md&#34;&gt;Faker::Games::ElderScrolls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/fallout.md&#34;&gt;Faker::Games::Fallout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/half_life.md&#34;&gt;Faker::Games::HalfLife&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/heroes.md&#34;&gt;Faker::Games::Heroes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/heroes_of_the_storm.md&#34;&gt;Faker::Games::HeroesOfTheStorm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/league_of_legends.md&#34;&gt;Faker::Games::LeagueOfLegends&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/minecraft.md&#34;&gt;Faker::Games::Minecraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/myst.md&#34;&gt;Faker::Games::Myst&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/overwatch.md&#34;&gt;Faker::Games::Overwatch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/pokemon.md&#34;&gt;Faker::Games::Pokemon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/sonic_the_hedgehog.md&#34;&gt;Faker::Games::SonicTheHedgehog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/street_fighter.md&#34;&gt;Faker::Games::StreetFighter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/super_mario.md&#34;&gt;Faker::Games::SuperMario&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/super_smash_bros.md&#34;&gt;Faker::Games::SuperSmashBros&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/touhou.md&#34;&gt;Faker::Games::Touhou&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/warhammer_fantasy.md&#34;&gt;Faker::Games::WarhammerFantasy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/witcher.md&#34;&gt;Faker::Games::Witcher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/world_of_warcraft.md&#34;&gt;Faker::Games::WorldOfWarcraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/zelda.md&#34;&gt;Faker::Games::Zelda&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Japanese Media&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/dragon_ball.md&#34;&gt;Faker::JapaneseMedia::DragonBall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/one_piece.md&#34;&gt;Faker::JapaneseMedia::OnePiece&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/studio_ghibli.md&#34;&gt;Faker::JapaneseMedia::StudioGhibli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/sword_art_online.md&#34;&gt;Faker::JapaneseMedia::SwordArtOnline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/naruto.md&#34;&gt;Faker::JapaneseMedia::Naruto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/doraemon.md&#34;&gt;Faker::JapaneseMedia::Doraemon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/conan.md&#34;&gt;Faker::JapaneseMedia::Conan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/fullmetal_alchemist_brotherhood.md&#34;&gt;Faker::JapaneseMedia::FmaBrotherhood&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Movies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/movie.md&#34;&gt;Faker::Movie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/back_to_the_future.md&#34;&gt;Faker::Movies::BackToTheFuture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/departed.md&#34;&gt;Faker::Movies::Departed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/ghostbusters.md&#34;&gt;Faker::Movies::Ghostbusters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/harry_potter.md&#34;&gt;Faker::Movies::HarryPotter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/hitchhikers_guide_to_the_galaxy.md&#34;&gt;Faker::Movies::HitchhikersGuideToTheGalaxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/hobbit.md&#34;&gt;Faker::Movies::Hobbit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/how_to_train_your_dragon.md&#34;&gt;Faker::Movies::HowToTrainYourDragon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/lebowski.md&#34;&gt;Faker::Movies::Lebowski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/lord_of_the_rings.md&#34;&gt;Faker::Movies::LordOfTheRings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/princess_bride.md&#34;&gt;Faker::Movies::PrincessBride&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/star_wars.md&#34;&gt;Faker::Movies::StarWars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/tron.md&#34;&gt;Faker::Movies::TRON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/v_for_vendetta.md&#34;&gt;Faker::Movies::VForVendetta&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Music&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/music.md&#34;&gt;Faker::Music&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/grateful_dead.md&#34;&gt;Faker::Music::GratefulDead&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/hiphop.md&#34;&gt;Faker::Music::Hiphop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/opera.md&#34;&gt;Faker::Music::Opera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/pearl_jam.md&#34;&gt;Faker::Music::PearlJam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/phish.md&#34;&gt;Faker::Music::Phish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/prince.md&#34;&gt;Faker::Music::Prince&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/rock_band.md&#34;&gt;Faker::Music::RockBand&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/rush.md&#34;&gt;Faker::Music::Rush&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/umphreys_mcgee.md&#34;&gt;Faker::Music::UmphreysMcgee&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quotes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/quote.md&#34;&gt;Faker::Quote&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/chiquito.md&#34;&gt;Faker::Quotes::Chiquito&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/rajnikanth.md&#34;&gt;Faker::Quotes::Rajnikanth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/shakespeare.md&#34;&gt;Faker::Quotes::Shakespeare&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sports&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/sports/basketball.md&#34;&gt;Faker::Sports::Basketball&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/sports/football.md&#34;&gt;Faker::Sports::Football&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tv Shows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/aqua_teen_hunger_force.md&#34;&gt;Faker::TvShows::AquaTeenHungerForce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/big_bang_theory.md&#34;&gt;Faker::TvShows::BigBangTheory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/bojack_horseman.md&#34;&gt;Faker::TvShows::BojackHorseman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/breaking_bad.md&#34;&gt;Faker::TvShows::BreakingBad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/brooklyn_nine_nine.md&#34;&gt;Faker::TvShows::BrooklynNineNine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/buffy.md&#34;&gt;Faker::TvShows::Buffy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/community.md&#34;&gt;Faker::TvShows::Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/dr_who.md&#34;&gt;Faker::TvShows::DrWho&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/dumb_and_dumber.md&#34;&gt;Faker::TvShows::DumbAndDumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/family_guy.md&#34;&gt;Faker::TvShows::FamilyGuy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/final_space.md&#34;&gt;Faker::TvShows::FinalSpace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/friends.md&#34;&gt;Faker::TvShows::Friends&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/game_of_thrones.md&#34;&gt;Faker::TvShows::GameOfThrones&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/hey_arnold.md&#34;&gt;Faker::TvShows::HeyArnold&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/how_i_met_your_mother.md&#34;&gt;Faker::TvShows::HowIMetYourMother&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/michael_scott.md&#34;&gt;Faker::TvShows::MichaelScott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/new_girl.md&#34;&gt;Faker::TvShows::NewGirl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/parks_and_rec.md&#34;&gt;Faker::TvShows::ParksAndRec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/rick_and_morty.md&#34;&gt;Faker::TvShows::RickAndMorty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/rupaul.md&#34;&gt;Faker::TvShows::RuPaul&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/seinfeld.md&#34;&gt;Faker::TvShows::Seinfeld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/silicon_valley.md&#34;&gt;Faker::TvShows::SiliconValley&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/simpsons.md&#34;&gt;Faker::TvShows::Simpsons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/south_park.md&#34;&gt;Faker::TvShows::SouthPark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/star_trek.md&#34;&gt;Faker::TvShows::StarTrek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/stargate.md&#34;&gt;Faker::TvShows::Stargate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/stranger_things.md&#34;&gt;Faker::TvShows::StrangerThings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/suits.md&#34;&gt;Faker::TvShows::Suits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/supernatural.md&#34;&gt;Faker::TvShows::Supernatural&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_expanse.md&#34;&gt;Faker::TvShows::TheExpanse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_fresh_prince_of_bel_air.md&#34;&gt;Faker::TvShows::TheFreshPrinceOfBelAir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_it_crowd.md&#34;&gt;Faker::TvShows::TheITCrowd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_thick_of_it.md&#34;&gt;Faker::TvShows::TheThickOfIt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/twin_peaks.md&#34;&gt;Faker::TvShows::TwinPeaks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/venture_bros.md&#34;&gt;Faker::TvShows::VentureBros&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Since you may want to make addresses and other types of data look different depending on where in the world you are (US postal codes vs. UK postal codes, for example), Faker uses the I18n gem to store strings (like state names) and formats (US postal codes are NNNNN while UK postal codes are AAN NAA), allowing you to get different formats by switching locales. Just set the locale you want as shown below, and Faker will take care of the rest.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Config.locale = &#39;es&#39;&#xA;# or&#xA;Faker::Config.locale = :es&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your locale doesn&#39;t already exist, create it in the &lt;code&gt;lib/locales&lt;/code&gt; directory and you can then override or add elements to suit your needs. See more about how to use locales &lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/lib/locales/README.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en-au-ocker:&#xA;  faker:&#xA;    name:&#xA;      # Existing faker field, new data&#xA;      first_name:&#xA;        - Charlotte&#xA;        - Ava&#xA;        - Chloe&#xA;        - Emily&#xA;&#xA;      # New faker fields&#xA;      ocker_first_name:&#xA;        - Bazza&#xA;        - Bluey&#xA;        - Davo&#xA;        - Johno&#xA;        - Shano&#xA;        - Shazza&#xA;      region:&#xA;        - South East Queensland&#xA;        - Wide Bay Burnett&#xA;        - Margaret River&#xA;        - Port Pirie&#xA;        - Gippsland&#xA;        - Elizabeth&#xA;        - Barossa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/stympy/faker/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Comments and feedback are welcome. Send an email to Benjamin Curtis via the &lt;a href=&#34;http://groups.google.com/group/ruby-faker&#34;&gt;google group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also join our &lt;a href=&#34;https://discord.gg/RMumTwB&#34;&gt;discord channel&lt;/a&gt; to discuss anything regarding improvements or feature requests.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is free to use under the terms of the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chef/omnibus</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/chef/omnibus</id>
    <link href="https://github.com/chef/omnibus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily create full-stack installers for your project across a variety of platforms.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chef/omnibus/main/lib/omnibus/assets/README-logo.png&#34; alt=&#34;Omnibus Icon&#34;&gt; Omnibus&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/omnibus&#34;&gt;&lt;img src=&#34;http://img.shields.io/gem/v/omnibus.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/chef-oss/chef-omnibus-master-verify&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/446fd6049a9a5eeab50112aba117d3b7670ec085acb91f78dd.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Umbrella Project&lt;/strong&gt;: &lt;a href=&#34;https://github.com/chef/chef-oss-practices/raw/master/projects/chef-foundation.md&#34;&gt;Chef Foundation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project State&lt;/strong&gt;: &lt;a href=&#34;https://github.com/chef/chef-oss-practices/raw/master/repo-management/repo-states.md#active&#34;&gt;Active&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Issues &lt;a href=&#34;https://github.com/chef/chef-oss-practices/raw/master/repo-management/repo-states.md&#34;&gt;Response Time Maximum&lt;/a&gt;&lt;/strong&gt;: 14 days&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pull Request &lt;a href=&#34;https://github.com/chef/chef-oss-practices/raw/master/repo-management/repo-states.md&#34;&gt;Response Time Maximum&lt;/a&gt;&lt;/strong&gt;: 14 days&lt;/p&gt; &#xA;&lt;p&gt;Easily create full-stack installers for your project across a variety of platforms.&lt;/p&gt; &#xA;&lt;p&gt;Seth Chisamore and Christopher Maier of CHEF gave an introductory talk on Omnibus at ChefConf 2013, entitled &lt;strong&gt;Eat the Whole Bowl: Building a Full-Stack Installer with Omnibus&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/schisamo/eat-the-whole-bowl-building-a-full-stack-installer-with-omnibus&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project is managed by the CHEF Release Engineering team. For more information on the Release Engineering team&#39;s contribution, triage, and release process, please consult the &lt;a href=&#34;https://docs.google.com/a/opscode.com/document/d/1oJB0vZb_3bl7_ZU2YMDBkMFdL-EWplW1BJv_FXTUOzg/edit&#34;&gt;CHEF Release Engineering OSS Management Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Omnibus is designed to run with a minimal set of prerequisites. You will need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 2.6+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Omnibus provides both a DSL for defining Omnibus projects for your software, as well as a command-line tool for generating installer artifacts from that definition.&lt;/p&gt; &#xA;&lt;p&gt;To get started, install Omnibus locally on your workstation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install omnibus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now create an Omnibus project in your current directory by using the project generator feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ omnibus new $MY_PROJECT_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a complete project skeleton in the directory &lt;code&gt;omnibus-$MY_PROJECT_NAME&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default this will make a directory called &lt;code&gt;omnibus-$MY_PROJECT_NAME&lt;/code&gt; assuming you&#39;re keeping your omnibus config separate from the repo. However, keeping it &lt;em&gt;in&lt;/em&gt; your repo is a common practice, so feel to rename this directory to &lt;code&gt;omnibus&lt;/code&gt; and place it in the top level of your projects source repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd omnibus-$MY_PROJECT_NAME&#xA;$ bundle install --binstubs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details can be found in the generated project&#39;s README file.&lt;/p&gt; &#xA;&lt;p&gt;Omnibus determines the platform for which to build an installer based on &lt;strong&gt;the platform it is currently running on&lt;/strong&gt;. That is, you can only generate a &lt;code&gt;.deb&lt;/code&gt; file on a Debian-based system. To alleviate this caveat, the generated project includes a &lt;a href=&#34;http://kitchen.ci&#34;&gt;Test Kitchen&lt;/a&gt; setup suitable for generating a series of Omnibus projects.&lt;/p&gt; &#xA;&lt;h2&gt;More documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chef/omnibus/main/docs/Building%20on%20Debian.md&#34;&gt;Building on Debian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chef/omnibus/main/docs/Building%20on%20OSX.md&#34;&gt;Building on OSX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chef/omnibus/main/docs/Building%20on%20RHEL.md&#34;&gt;Building on RHEL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chef/omnibus/main/docs/Building%20on%20Windows.md&#34;&gt;Building on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chef/omnibus/main/docs/Build%20Cache.md&#34;&gt;Build Cache&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration DSL&lt;/h2&gt; &#xA;&lt;p&gt;Though the template project will build, it will not do anything exciting. For that, you need to use the Omnibus DSL to define the specifics of your application.&lt;/p&gt; &#xA;&lt;h3&gt;Config&lt;/h3&gt; &#xA;&lt;p&gt;If present, Omnibus will use a top-level configuration file named &lt;code&gt;omnibus.rb&lt;/code&gt; at the root of your repository. This file is loaded at runtime and includes a number of configuration tunables. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Build locally (instead of /var)&#xA;# -------------------------------&#xA;base_dir &#39;./local&#39;&#xA;&#xA;# Disable git caching&#xA;# ------------------------------&#xA;use_git_caching false&#xA;&#xA;# Enable S3 asset caching&#xA;# ------------------------------&#xA;use_s3_caching true&#xA;s3_bucket      ENV[&#39;S3_BUCKET&#39;]&#xA;&#xA;# There are three ways to authenticate to the S3 bucket&#xA;&#xA;# 1. set `s3_access_key` and `s3_secret_key`&#xA;s3_access_key  ENV[&#39;S3_ACCESS_KEY&#39;]&#xA;s3_secret_key  ENV[&#39;S3_SECRET_KEY&#39;]&#xA;&#xA;# 2. set `s3_profile` to use an AWS profile in the Shared Credentials files&#xA;#s3_profile    ENV[&#39;S3_PROFILE&#39;]&#xA;&#xA;# 3. set `s3_iam_role_arn` to use an AWS IAM role&#xA;#s3_iam_role_arn    ENV[&#39;S3_IAM_ROLE_ARN&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, please see the &lt;a href=&#34;http://www.rubydoc.info/github/chef/omnibus/Omnibus/Config&#34;&gt;&lt;code&gt;Config&lt;/code&gt; documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can tell Omnibus to load a different configuration file by passing the &lt;code&gt;--config&lt;/code&gt; option to any command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/omnibus --config /path/to/config.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you can override a specific configuration option at the command line using the &lt;code&gt;--override&lt;/code&gt; flag. This takes ultimate precedence over any configuration file values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/omnibus --override use_git_caching:false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Projects&lt;/h3&gt; &#xA;&lt;p&gt;A Project DSL file defines your actual application; this is the thing you are creating a full-stack installer for in the first place. It provides a means to define the dependencies of the project (again, as specified in Software DSL definition files), as well as ways to set installer package metadata.&lt;/p&gt; &#xA;&lt;p&gt;All project definitions must be in the &lt;code&gt;config/projects&lt;/code&gt; directory of your Omnibus repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;name            &#34;chef-full&#34;&#xA;maintainer      &#34;YOUR NAME&#34;&#xA;homepage        &#34;http://yoursite.com&#34;&#xA;&#xA;install_dir     &#34;/opt/chef&#34;&#xA;build_version   &#34;0.10.8&#34;&#xA;build_iteration 4&#xA;&#xA;dependency &#34;chef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some DSL methods available include:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;DSL Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The name of the project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;install_dir&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The desired install location of the package&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;build_version&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The package version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;build_iteration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The package iteration number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;dependency&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An Omnibus software-defined component to include in this package&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;package&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Invoke a packager-specific DSL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;compress&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Invoke a compressor-specific DSL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;By default a timestamp is appended to the build_version. You can turn this behavior off by setting &lt;code&gt;append_timestamp&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your &lt;code&gt;omnibus.rb&lt;/code&gt; or using &lt;code&gt;--override append_timestamp:false&lt;/code&gt; at the command line.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see the &lt;a href=&#34;http://www.rubydoc.info/github/chef/omnibus/Omnibus/Project&#34;&gt;&lt;code&gt;Project&lt;/code&gt; documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Software&lt;/h3&gt; &#xA;&lt;p&gt;Omnibus &#34;software&#34; files define individual software components that go into making your overall package. They are the building blocks of your application. The Software DSL provides a way to define where to retrieve the software sources, how to build them, and what dependencies they have. These dependencies are also defined in their own Software DSL files, thus forming the basis for a dependency-aware build ordering.&lt;/p&gt; &#xA;&lt;p&gt;All Software definitions should go in the &lt;code&gt;config/software&lt;/code&gt; directory of your Omnibus project repository.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;name &#34;ruby&#34;&#xA;default_version &#34;1.9.2-p290&#34;&#xA;source url: &#34;http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-#{version}.tar.gz&#34;,&#xA;       md5: &#34;604da71839a6ae02b5b5b5e1b792d5eb&#34;&#xA;&#xA;dependency &#34;zlib&#34;&#xA;dependency &#34;ncurses&#34;&#xA;dependency &#34;openssl&#34;&#xA;&#xA;relative_path &#34;ruby-#{version}&#34;&#xA;&#xA;build do&#xA;  command &#34;./configure&#34;&#xA;  command &#34;make&#34;&#xA;  command &#34;make install&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some of the DSL methods available include:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;DSL Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The name of the software component (this should come first)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;default_version&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The version of the software component&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Directions to the location of the source&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;dependency&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An Omnibus software-defined component that this software depends on&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;relative_path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The relative path of the extracted tarball&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The build instructions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more DSL methods, please consult the &lt;a href=&#34;http://rubydoc.info/github/chef/omnibus/Omnibus/Software&#34;&gt;&lt;code&gt;Software&lt;/code&gt; documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, there are a number of DSL methods available inside the &lt;code&gt;build&lt;/code&gt; block:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;DSL Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute a single shell command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;make&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run make (with or without args), using gmake when appropriate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;patch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apply a patch from disk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;workers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The maximum number of builders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;windows_safe_path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Format the path to be safe for shelling out on Windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;go&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute the code as the embedded Go&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ruby&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute the code as the embedded Ruby&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gem&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute the code as the embedded Rubygems&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;bundle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute the code as the embedded Bundler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;rake&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute the code as the embedded Rake gem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute Ruby block at build time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;erb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Render the given ERB template&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;mkdir&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create the given directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;touch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create the given empty file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove the given file or directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;strip&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Strip symbols from binaries on a given file or directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copy a to b&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move a to b&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;link&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Link a to b&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copy all files from a to b, removing any union files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more DSL methods, please consult the &lt;a href=&#34;http://rubydoc.info/github/chef/omnibus/Omnibus/Builder&#34;&gt;&lt;code&gt;Builder&lt;/code&gt; documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can support building multiple versions of the same software in the same software definition file using the &lt;code&gt;version&lt;/code&gt; method and giving a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;name &#34;ruby&#34;&#xA;default_version &#34;1.9.2-p290&#34;&#xA;&#xA;version &#34;1.9.2-p290&#34; do&#xA;  source url: &#34;http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-#{version}.tar.gz&#34;,&#xA;         md5: &#34;604da71839a6ae02b5b5b5e1b792d5eb&#34;&#xA;end&#xA;&#xA;version &#34;2.1.1&#34; do&#xA;  source url: &#34;http://ftp.ruby-lang.org/pub/ruby/2.1/ruby-#{version}.tar.gz&#34;,&#xA;         md5: &#34;e57fdbb8ed56e70c43f39c79da1654b2&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the software definitions are simply ruby code, you can conditionally execute anything by wrapping it with pure Ruby that tests for the version number.&lt;/p&gt; &#xA;&lt;h4&gt;Sharing software definitions&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to share organization-wide software is via bundler and Rubygems. For an example software repository, look at Chef&#39;s &lt;a href=&#34;https://github.com/chef/omnibus-software&#34;&gt;omnibus-software&lt;/a&gt;. For more information, please see the &lt;a href=&#34;http://guides.rubygems.org/publishing/&#34;&gt;Rubygems documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended you use bundler to pull down these gems (as bundler also permits pulling software directly from GitHub):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;my-company-omnibus-software&#39;&#xA;gem &#39;omnibus-software&#39;, github: &#39;my-company/omnibus-software&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the name of the software to the list of &lt;code&gt;software_gems&lt;/code&gt; in your Omnibus config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;software_gems %w(my-company-omnibus-software omnibus-software)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also specify local paths on disk (but be warned this may make sharing the project among teams difficult):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;local_software_dirs %w(/path/to/software /other/path/to/software)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For all of these paths, &lt;strong&gt;order matters&lt;/strong&gt;, so it is possible to depend on local software version while still retaining a remote software repo. Given the above example, Omnibus will search for a software definition named &lt;code&gt;foo&lt;/code&gt; in this order:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$PWD/config/software/foo.rb&#xA;/path/to/software/config/software/foo.rb&#xA;/other/path/to/software/config/software/foo.rb&#xA;/Users/sethvargo/.gems/.../my-company-omnibus-software/config/software/foo.rb&#xA;/Users/sethvargo/.gems/.../omnibus-software/config/software/foo.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first instance of &lt;code&gt;foo.rb&lt;/code&gt; that is encountered will be used. Please note that &lt;strong&gt;local&lt;/strong&gt; (vendored) softare definitions take precedence!&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve created your package and software definitions you can build with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./bin/omnibus build $MY_PACKAGE_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However there are several caveats to be aware of:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You will almost certainly want to uncomment the &lt;code&gt;base_dir&lt;/code&gt; in &lt;code&gt;omnibus.rb&lt;/code&gt;, or at the very least change &lt;code&gt;cache_dir&lt;/code&gt; and &lt;code&gt;build_dir&lt;/code&gt; as otherwise it&#39;ll try to use &lt;code&gt;/var/cache/omnibus&lt;/code&gt; and &lt;code&gt;/opt/$MY_PROJECT_NAME&lt;/code&gt;, requiring root.&lt;/li&gt; &#xA; &lt;li&gt;The default configuration created for you references a lot of things that are in the default config that come from the &lt;code&gt;omnibus-software&lt;/code&gt; gem. So you want to use those you&#39;ll need to either uncomment it in the &lt;code&gt;Gemfile&lt;/code&gt;, or fork it, and then reference your own&lt;/li&gt; &#xA; &lt;li&gt;If this is a ruby project and you want binstubs in &lt;code&gt;/opt/$project/bin&lt;/code&gt;, you will either need to use &lt;a href=&#34;https://github.com/chef/appbundler&#34;&gt;appbundler&lt;/a&gt;, or you will need to have a post install step to create those binstubs. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Side note, appbundler requires that you include your Gemfile and gemspec in your gem.&lt;/li&gt; &#xA;   &lt;li&gt;Also, needs to be in your Gemfile for you to use it, as it also must be in the resulting gem.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you specify an override of the version of the &lt;code&gt;ruby&lt;/code&gt;, you will also need to override &lt;code&gt;rubygems&lt;/code&gt; and &lt;code&gt;bundler&lt;/code&gt; to match the versions in that version of &lt;code&gt;ruby&lt;/code&gt; or you&#39;ll get failures around bundler version mismatches.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The build command above will of course build on your local host thus being specific to the OS and base system you are on. But the skeleten setup by &lt;code&gt;omnibus new&lt;/code&gt; already setup kitchen for you so that it&#39;s easy to build for a variety of OSes, See the &lt;code&gt;README.md&lt;/code&gt; in your generated omnibus directory for details.&lt;/p&gt; &#xA;&lt;h2&gt;Version Manifest&lt;/h2&gt; &#xA;&lt;p&gt;Git-based software definitions may specify branches as their default_version. In this case, the exact git revision to use will be determined at build-time unless a project override (see below) or external version manifest is used. To generate a version manifest use the &lt;code&gt;omnibus manifest&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;omnibus manifest PROJECT -l warn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will output a JSON-formatted manifest containing the resolved version of every software definition.&lt;/p&gt; &#xA;&lt;h2&gt;Whitelisting Libraries&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes a platform has libraries that need to be whitelisted so the healthcheck can pass. The whitelist found in the &lt;a href=&#34;https://github.com/chef/omnibus/raw/master/lib/omnibus/health_check.rb&#34;&gt;healthcheck&lt;/a&gt; code comprises the minimal required for successful builds on supported platforms.&lt;/p&gt; &#xA;&lt;p&gt;To add your own whitelisted library, simply add a regex to your software definition in your omnibus project as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;whitelist_file /libpcrecpp\.so\..+/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is typically a good idea to add a conditional to whitelist based on the specific platform that requires it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Warning: You should only add libraries to the whitelist that are guaranteed to be on the system you install to; if a library comes from a non-default package you should instead build it into the package.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;STATUS: &lt;em&gt;EXPERIMENTAL&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;omnibus changelog generate&lt;/code&gt; will generate a changelog for an omnibus project. This command currently assumes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A version-manifest.json file is checked into the project root&lt;/li&gt; &#xA; &lt;li&gt;The project is a git repository&lt;/li&gt; &#xA; &lt;li&gt;Each version is tagged with a SemVer compliant annotated tag&lt;/li&gt; &#xA; &lt;li&gt;Any git-based sources are checked out at ../COMPONENT_NAME&lt;/li&gt; &#xA; &lt;li&gt;Any commit message line prepended with ChangeLog-Entry: should be added to the changelog&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These assumptions &lt;em&gt;will&lt;/em&gt; change as we determine what works best for a number of our projects.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;h3&gt;Overrides&lt;/h3&gt; &#xA;&lt;p&gt;The project definitions can override specific software dependencies by passing in &lt;code&gt;override&lt;/code&gt; to use the correct version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;name &#34;chef-full&#34;&#xA;# &amp;lt;snip&amp;gt;&#xA;&#xA;# This will override the default version of &#34;chef&#34;&#xA;override :chef, version: &#34;2.1.1&#34;&#xA;&#xA;dependency &#34;chef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The overridden version must be defined in the associated software!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;By default, Omnibus will log at the &lt;code&gt;warn&lt;/code&gt; level. You can override this by passing the &lt;code&gt;--log-level&lt;/code&gt; flag to your Omnibus call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/omnibus build &amp;lt;project&amp;gt; --log-level info # or &#34;debug&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Git caching&lt;/h3&gt; &#xA;&lt;p&gt;by default, Omnibus caches compiled software definitions, so n+1 Omnibus project builds are much faster. This functionality can be disabled by adding the following to your &lt;code&gt;omnibus.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_git_caching false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For information on contributing to this project see &lt;a href=&#34;https://github.com/chef/chef/raw/master/CONTRIBUTING.md&#34;&gt;https://github.com/chef/chef/blob/master/CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Copyright 2012-2016 Chef Software, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>heartcombo/simple_form</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/heartcombo/simple_form</id>
    <link href="https://github.com/heartcombo/simple_form" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Forms made easy for Rails! It&#39;s tied to a simple DSL, with no opinion on markup.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/heartcombo/simple_form/master/simple_form.png&#34; alt=&#34;Simple Form Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rails forms made easy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; aims to be as flexible as possible while helping you with powerful components to create your forms. The basic goal of &lt;strong&gt;Simple Form&lt;/strong&gt; is to not touch your way of defining the layout, letting you find the better design for your eyes. Most of the DSL was inherited from Formtastic, which we are thankful for and should make you feel right at home.&lt;/p&gt; &#xA;&lt;p&gt;INFO: This README refers to &lt;strong&gt;Simple Form&lt;/strong&gt; 5.0. For older releases, check the related branch for your version.&lt;/p&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#bootstrap-5&#34;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#zurb-foundation-5&#34;&gt;Zurb Foundation 5&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#country-select&#34;&gt;Country Select&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#stripping-away-all-wrapper-divs&#34;&gt;Stripping away all wrapper divs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#collections&#34;&gt;Collections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#priority&#34;&gt;Priority&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#associations&#34;&gt;Associations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#buttons&#34;&gt;Buttons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#wrapping-rails-form-helpers&#34;&gt;Wrapping Rails Form Helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#extra-helpers&#34;&gt;Extra helpers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#simple-fields-for&#34;&gt;Simple Fields For&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#collection-radio-buttons&#34;&gt;Collection Radio Buttons&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#collection-check-boxes&#34;&gt;Collection Check Boxes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#available-input-types-and-defaults-for-each-column-type&#34;&gt;Available input types and defaults for each column type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#custom-inputs&#34;&gt;Custom inputs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#custom-form-builder&#34;&gt;Custom form builder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#i18n&#34;&gt;I18n&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#the-wrappers-api&#34;&gt;The wrappers API&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#custom-components&#34;&gt;Custom Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#html-5-notice&#34;&gt;HTML 5 Notice&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#using-non-active-record-objects&#34;&gt;Using non Active Record objects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#information&#34;&gt;Information&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#rdocs&#34;&gt;RDocs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#supported-ruby--rails-versions&#34;&gt;Supported Ruby / Rails versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#bug-reports&#34;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;simple_form&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following command to install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;rails generate simple_form:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bootstrap 5&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; can be easily integrated with &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap 5&lt;/a&gt;. Use the &lt;code&gt;bootstrap&lt;/code&gt; option in the install generator, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;rails generate simple_form:install --bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add an initializer that configures &lt;strong&gt;Simple Form&lt;/strong&gt; wrappers for Bootstrap 5&#39;s &lt;a href=&#34;https://getbootstrap.com/docs/5.0/forms/overview/&#34;&gt;form controls&lt;/a&gt;. You have to be sure that you added a copy of the &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; assets on your application.&lt;/p&gt; &#xA;&lt;p&gt;For more information see the generator output, our &lt;a href=&#34;https://github.com/heartcombo/simple_form-bootstrap&#34;&gt;example application code&lt;/a&gt; and &lt;a href=&#34;https://simple-form-bootstrap.herokuapp.com/&#34;&gt;the live example app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Zurb Foundation 5&lt;/h3&gt; &#xA;&lt;p&gt;To generate wrappers that are compatible with &lt;a href=&#34;http://foundation.zurb.com/&#34;&gt;Zurb Foundation 5&lt;/a&gt;, pass the &lt;code&gt;foundation&lt;/code&gt; option to the generator, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;rails generate simple_form:install --foundation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the Foundation wrapper does not support the &lt;code&gt;:hint&lt;/code&gt; option by default. In order to enable hints, please uncomment the appropriate line in &lt;code&gt;config/initializers/simple_form_foundation.rb&lt;/code&gt;. You will need to provide your own CSS styles for hints.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;http://foundation.zurb.com/docs/applications.html&#34;&gt;instructions on how to install Foundation in a Rails app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Country Select&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the country select, you will need the &lt;a href=&#34;https://rubygems.org/gems/country_select&#34;&gt;country_select gem&lt;/a&gt;, add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;country_select&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use the gem you can easily override this behaviour by mapping the country inputs to something else, with a line like this in your &lt;code&gt;simple_form.rb&lt;/code&gt; initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.input_mappings = { /country/ =&amp;gt; :string }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; was designed to be customized as you need to. Basically it&#39;s a stack of components that are invoked to create a complete html input for you, which by default contains label, hints, errors and the input itself. It does not aim to create a lot of different logic from the default Rails form helpers, as they do a great job by themselves. Instead, &lt;strong&gt;Simple Form&lt;/strong&gt; acts as a DSL and just maps your input type (retrieved from the column definition in the database) to a specific helper method.&lt;/p&gt; &#xA;&lt;p&gt;To start using &lt;strong&gt;Simple Form&lt;/strong&gt; you just have to use the helper it provides:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username %&amp;gt;&#xA;  &amp;lt;%= f.input :password %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate an entire form with labels for user name and password as well, and render errors by default when you render the form with invalid data (after submitting for example).&lt;/p&gt; &#xA;&lt;p&gt;You can overwrite the default label by passing it to the input method. You can also add a hint, an error, or even a placeholder. For boolean inputs, you can add an inline label as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, label: &#39;Your username please&#39;, error: &#39;Username is mandatory, please specify one&#39; %&amp;gt;&#xA;  &amp;lt;%= f.input :password, hint: &#39;No special characters.&#39; %&amp;gt;&#xA;  &amp;lt;%= f.input :email, placeholder: &#39;user@domain.com&#39; %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, inline_label: &#39;Yes, remember me&#39; %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In some cases you may want to disable labels, hints or errors. Or you may want to configure the html of any of them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, label_html: { class: &#39;my_class&#39; }, hint_html: { class: &#39;hint_class&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, hint: false, error_html: { id: &#39;password_error&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password_confirmation, label: false %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to pass any html attribute straight to the input, by using the &lt;code&gt;:input_html&lt;/code&gt; option, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, input_html: { class: &#39;special&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, input_html: { maxlength: 20 } %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, input_html: { value: &#39;1&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to pass the same options to all inputs in the form (for example, a default class), you can use the &lt;code&gt;:defaults&lt;/code&gt; option in &lt;code&gt;simple_form_for&lt;/code&gt;. Specific options in &lt;code&gt;input&lt;/code&gt; call will overwrite the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user, defaults: { input_html: { class: &#39;default_class&#39; } } do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, input_html: { class: &#39;special&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, input_html: { maxlength: 20 } %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, input_html: { value: &#39;1&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;strong&gt;Simple Form&lt;/strong&gt; generates a wrapper div around your label and input by default, you can pass any html attribute to that wrapper as well using the &lt;code&gt;:wrapper_html&lt;/code&gt; option, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, wrapper_html: { class: &#39;username&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, wrapper_html: { id: &#39;password&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, wrapper_html: { class: &#39;options&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Required fields are marked with an * prepended to their labels.&lt;/p&gt; &#xA;&lt;p&gt;By default all inputs are required. When the form object includes &lt;code&gt;ActiveModel::Validations&lt;/code&gt; (which, for example, happens with Active Record models), fields are required only when there is &lt;code&gt;presence&lt;/code&gt; validation. Otherwise, &lt;strong&gt;Simple Form&lt;/strong&gt; will mark fields as optional. For performance reasons, this detection is skipped on validations that make use of conditional options, such as &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And of course, the &lt;code&gt;required&lt;/code&gt; property of any input can be overwritten as needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name, required: false %&amp;gt;&#xA;  &amp;lt;%= f.input :username %&amp;gt;&#xA;  &amp;lt;%= f.input :password %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;Simple Form&lt;/strong&gt; will look at the column type in the database and use an appropriate input for the column. For example, a column created with type &lt;code&gt;:text&lt;/code&gt; in the database will use a &lt;code&gt;textarea&lt;/code&gt; input by default. See the section &lt;a href=&#34;https://github.com/heartcombo/simple_form#available-input-types-and-defaults-for-each-column-type&#34;&gt;Available input types and defaults for each column type&lt;/a&gt; for a complete list of defaults.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also lets you overwrite the default input type it creates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username %&amp;gt;&#xA;  &amp;lt;%= f.input :password %&amp;gt;&#xA;  &amp;lt;%= f.input :description, as: :text %&amp;gt;&#xA;  &amp;lt;%= f.input :accepts,     as: :radio_buttons %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So instead of a checkbox for the &lt;em&gt;accepts&lt;/em&gt; attribute, you&#39;ll have a pair of radio buttons with yes/no labels and a textarea instead of a text field for the description. You can also render boolean attributes using &lt;code&gt;as: :select&lt;/code&gt; to show a dropdown.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to give the &lt;code&gt;:disabled&lt;/code&gt; option to &lt;strong&gt;Simple Form&lt;/strong&gt;, and it&#39;ll automatically mark the wrapper as disabled with a CSS class, so you can style labels, hints and other components inside the wrapper as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, disabled: true, hint: &#39;You cannot change your username.&#39; %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; inputs accept the same options as their corresponding input type helper in Rails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :date_of_birth, as: :date, start_year: Date.today.year - 90,&#xA;                              end_year: Date.today.year - 12, discard_day: true,&#xA;                              order: [:month, :year] %&amp;gt;&#xA;  &amp;lt;%= f.input :accepts, as: :boolean, checked_value: true, unchecked_value: false %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also allows you to use label, hint, input_field, error and full_error helpers (please take a look at the rdocs for each method for more info):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.label :username %&amp;gt;&#xA;  &amp;lt;%= f.input_field :username %&amp;gt;&#xA;  &amp;lt;%= f.hint &#39;No special characters, please!&#39; %&amp;gt;&#xA;  &amp;lt;%= f.error :username, id: &#39;user_name_error&#39; %&amp;gt;&#xA;  &amp;lt;%= f.full_error :token %&amp;gt;&#xA;  &amp;lt;%= f.submit &#39;Save&#39; %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any extra option passed to these methods will be rendered as html option.&lt;/p&gt; &#xA;&lt;h3&gt;Stripping away all wrapper divs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also allows you to strip away all the div wrappers around the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field that is generated with the usual &lt;code&gt;f.input&lt;/code&gt;. The easiest way to achieve this is to use &lt;code&gt;f.input_field&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;simple_form_for @user do |f|&#xA;  f.input_field :name&#xA;  f.input_field :remember_me, as: :boolean&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form&amp;gt;&#xA;  ...&#xA;  &amp;lt;input class=&#34;string required&#34; id=&#34;user_name&#34; maxlength=&#34;255&#34; name=&#34;user[name]&#34; size=&#34;255&#34; type=&#34;text&#34;&amp;gt;&#xA;  &amp;lt;input name=&#34;user[remember_me]&#34; type=&#34;hidden&#34; value=&#34;0&#34;&amp;gt;&#xA;  &amp;lt;label class=&#34;checkbox&#34;&amp;gt;&#xA;    &amp;lt;input class=&#34;boolean optional&#34; id=&#34;user_published&#34; name=&#34;user[remember_me]&#34; type=&#34;checkbox&#34; value=&#34;1&#34;&amp;gt;&#xA;  &amp;lt;/label&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For check boxes and radio buttons you can remove the label changing &lt;code&gt;boolean_style&lt;/code&gt; from default value &lt;code&gt;:nested&lt;/code&gt; to &lt;code&gt;:inline&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;simple_form_for @user do |f|&#xA;  f.input_field :name&#xA;  f.input_field :remember_me, as: :boolean, boolean_style: :inline&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form&amp;gt;&#xA;  ...&#xA;  &amp;lt;input class=&#34;string required&#34; id=&#34;user_name&#34; maxlength=&#34;255&#34; name=&#34;user[name]&#34; size=&#34;255&#34; type=&#34;text&#34;&amp;gt;&#xA;  &amp;lt;input name=&#34;user[remember_me]&#34; type=&#34;hidden&#34; value=&#34;0&#34;&amp;gt;&#xA;  &amp;lt;input class=&#34;boolean optional&#34; id=&#34;user_remember_me&#34; name=&#34;user[remember_me]&#34; type=&#34;checkbox&#34; value=&#34;1&#34;&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view the actual RDocs for this, check them out here - &lt;a href=&#34;http://rubydoc.info/github/heartcombo/simple_form/master/SimpleForm/FormBuilder:input_field&#34;&gt;http://rubydoc.info/github/heartcombo/simple_form/master/SimpleForm/FormBuilder:input_field&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Collections&lt;/h3&gt; &#xA;&lt;p&gt;And what if you want to create a select containing the age from 18 to 60 in your form? You can do it overriding the &lt;code&gt;:collection&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :user %&amp;gt;&#xA;  &amp;lt;%= f.input :age, collection: 18..60 %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Collections can be arrays or ranges, and when a &lt;code&gt;:collection&lt;/code&gt; is given the &lt;code&gt;:select&lt;/code&gt; input will be rendered by default, so we don&#39;t need to pass the &lt;code&gt;as: :select&lt;/code&gt; option. Other types of collection are &lt;code&gt;:radio_buttons&lt;/code&gt; and &lt;code&gt;:check_boxes&lt;/code&gt;. Those are added by &lt;strong&gt;Simple Form&lt;/strong&gt; to Rails set of form helpers (read Extra Helpers section below for more information).&lt;/p&gt; &#xA;&lt;p&gt;Collection inputs accept two other options beside collections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;label_method&lt;/em&gt; =&amp;gt; the label method to be applied to the collection to retrieve the label (use this instead of the &lt;code&gt;text_method&lt;/code&gt; option in &lt;code&gt;collection_select&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;value_method&lt;/em&gt; =&amp;gt; the value method to be applied to the collection to retrieve the value&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Those methods are useful to manipulate the given collection. Both of these options also accept lambda/procs in case you want to calculate the value or label in a special way eg. custom translation. You can also define a &lt;code&gt;to_label&lt;/code&gt; method on your model as &lt;strong&gt;Simple Form&lt;/strong&gt; will search for and use &lt;code&gt;:to_label&lt;/code&gt; as a &lt;code&gt;:label_method&lt;/code&gt; first if it is found.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;Simple Form&lt;/strong&gt; will use the first item from an array as the label and the second one as the value. If you want to change this behavior you must make it explicit, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :gender, as: :radio_buttons, collection: [[&#39;0&#39;, &#39;female&#39;], [&#39;1&#39;, &#39;male&#39;]], label_method: :second, value_method: :first %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All other options given are sent straight to the underlying Rails helper(s): &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select&#34;&gt;&lt;code&gt;collection_select&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_check_boxes&#34;&gt;&lt;code&gt;collection_check_boxes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_radio_buttons&#34;&gt;&lt;code&gt;collection_radio_buttons&lt;/code&gt;&lt;/a&gt;. For example, you can pass &lt;code&gt;prompt&lt;/code&gt; and &lt;code&gt;selected&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :age, collection: 18..60, prompt: &#34;Select your age&#34;, selected: 21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may also be useful to explicitly pass a value to the optional &lt;code&gt;:selected&lt;/code&gt; like above, especially if passing a collection of nested objects.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to create grouped collection selects, that will use the html &lt;em&gt;optgroup&lt;/em&gt; tags, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :country_id, collection: @continents, as: :grouped_select, group_method: :countries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grouped collection inputs accept the same &lt;code&gt;:label_method&lt;/code&gt; and &lt;code&gt;:value_method&lt;/code&gt; options, which will be used to retrieve label/value attributes for the &lt;code&gt;option&lt;/code&gt; tags. Besides that, you can give:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;group_method&lt;/em&gt; =&amp;gt; the method to be called on the given collection to generate the options for each group (required)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;group_label_method&lt;/em&gt; =&amp;gt; the label method to be applied on the given collection to retrieve the label for the &lt;em&gt;optgroup&lt;/em&gt; (&lt;strong&gt;Simple Form&lt;/strong&gt; will attempt to guess the best one the same way it does with &lt;code&gt;:label_method&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Priority&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also supports &lt;code&gt;:time_zone&lt;/code&gt; and &lt;code&gt;:country&lt;/code&gt;. When using such helpers, you can give &lt;code&gt;:priority&lt;/code&gt; as an option to select which time zones and/or countries should be given higher priority:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :residence_country, priority: [ &#34;Brazil&#34; ]&#xA;f.input :time_zone, priority: /US/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those values can also be configured with a default value to be used on the site through the &lt;code&gt;SimpleForm.country_priority&lt;/code&gt; and &lt;code&gt;SimpleForm.time_zone_priority&lt;/code&gt; helpers.&lt;/p&gt; &#xA;&lt;p&gt;Note: While using &lt;code&gt;country_select&lt;/code&gt; if you want to restrict to only a subset of countries for a specific drop down then you may use the &lt;code&gt;:collection&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :shipping_country, priority: [ &#34;Brazil&#34; ], collection: [ &#34;Australia&#34;, &#34;Brazil&#34;, &#34;New Zealand&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Associations&lt;/h3&gt; &#xA;&lt;p&gt;To deal with associations, &lt;strong&gt;Simple Form&lt;/strong&gt; can generate select inputs, a series of radios buttons or checkboxes. Lets see how it works: imagine you have a user model that belongs to a company and &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; roles. The structure would be something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  belongs_to :company&#xA;  has_and_belongs_to_many :roles&#xA;end&#xA;&#xA;class Company &amp;lt; ActiveRecord::Base&#xA;  has_many :users&#xA;end&#xA;&#xA;class Role &amp;lt; ActiveRecord::Base&#xA;  has_and_belongs_to_many :users&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we have the user form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name %&amp;gt;&#xA;  &amp;lt;%= f.association :company %&amp;gt;&#xA;  &amp;lt;%= f.association :roles %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple enough, right? This is going to render a &lt;code&gt;:select&lt;/code&gt; input for choosing the &lt;code&gt;:company&lt;/code&gt;, and another &lt;code&gt;:select&lt;/code&gt; input with &lt;code&gt;:multiple&lt;/code&gt; option for the &lt;code&gt;:roles&lt;/code&gt;. You can, of course, change it to use radio buttons and checkboxes as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.association :company, as: :radio_buttons&#xA;f.association :roles,   as: :check_boxes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The association helper just invokes &lt;code&gt;input&lt;/code&gt; under the hood, so all options available to &lt;code&gt;:select&lt;/code&gt;, &lt;code&gt;:radio_buttons&lt;/code&gt; and &lt;code&gt;:check_boxes&lt;/code&gt; are also available to association. Additionally, you can specify the collection by hand, all together with the prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.association :company, collection: Company.active.order(:name), prompt: &#34;Choose a Company&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you want to declare different labels and values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.association :company, label_method: :company_name, value_method: :id, include_blank: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the association helper is currently only tested with Active Record. It currently does not work well with Mongoid and depending on the ORM you&#39;re using your mileage may vary.&lt;/p&gt; &#xA;&lt;h3&gt;Buttons&lt;/h3&gt; &#xA;&lt;p&gt;All web forms need buttons, right? &lt;strong&gt;Simple Form&lt;/strong&gt; wraps them in the DSL, acting like a proxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will simply call submit. You choose to use it or not, it&#39;s just a question of taste.&lt;/p&gt; &#xA;&lt;p&gt;The button method also accepts optional parameters, that are delegated to the underlying submit call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.button :submit, &#34;Custom Button Text&#34;, class: &#34;my-button&#34; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element, use the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.button :button, &#34;Custom Button Text&#34; %&amp;gt;&#xA;&#xA;&amp;lt;%= f.button :button do %&amp;gt;&#xA;  Custom Button Text&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wrapping Rails Form Helpers&lt;/h3&gt; &#xA;&lt;p&gt;Say you wanted to use a rails form helper but still wrap it in &lt;strong&gt;Simple Form&lt;/strong&gt; goodness? You can, by calling input with a block like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.input :role do %&amp;gt;&#xA;  &amp;lt;%= f.select :role, Role.all.map { |r| [r.name, r.id, { class: r.company.id }] }, include_blank: true %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example, we&#39;re taking advantage of Rails 3&#39;s select method that allows us to pass in a hash of additional attributes for each option.&lt;/p&gt; &#xA;&lt;h3&gt;Extra helpers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also comes with some extra helpers you can use inside rails default forms without relying on &lt;code&gt;simple_form_for&lt;/code&gt; helper. They are listed below.&lt;/p&gt; &#xA;&lt;h4&gt;Simple Fields For&lt;/h4&gt; &#xA;&lt;p&gt;Wrapper to use &lt;strong&gt;Simple Form&lt;/strong&gt; inside a default rails form. It works in the same way that the &lt;code&gt;fields_for&lt;/code&gt; Rails helper, but change the builder to use the &lt;code&gt;SimpleForm::FormBuilder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.simple_fields_for :posts do |posts_form|&#xA;    # Here you have all simple_form methods available&#xA;    posts_form.input :title&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Collection Radio Buttons&lt;/h4&gt; &#xA;&lt;p&gt;Creates a collection of radio inputs with labels associated (same API as &lt;code&gt;collection_select&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.collection_radio_buttons :options, [[true, &#39;Yes&#39;], [false, &#39;No&#39;]], :first, :last&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input id=&#34;user_options_true&#34; name=&#34;user[options]&#34; type=&#34;radio&#34; value=&#34;true&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_radio_buttons&#34; for=&#34;user_options_true&#34;&amp;gt;Yes&amp;lt;/label&amp;gt;&#xA;&amp;lt;input id=&#34;user_options_false&#34; name=&#34;user[options]&#34; type=&#34;radio&#34; value=&#34;false&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_radio_buttons&#34; for=&#34;user_options_false&#34;&amp;gt;No&amp;lt;/label&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Collection Check Boxes&lt;/h4&gt; &#xA;&lt;p&gt;Creates a collection of checkboxes with labels associated (same API as &lt;code&gt;collection_select&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.collection_check_boxes :options, [[true, &#39;Yes&#39;], [false, &#39;No&#39;]], :first, :last&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input name=&#34;user[options][]&#34; type=&#34;hidden&#34; value=&#34;&#34; /&amp;gt;&#xA;&amp;lt;input id=&#34;user_options_true&#34; name=&#34;user[options][]&#34; type=&#34;checkbox&#34; value=&#34;true&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_check_box&#34; for=&#34;user_options_true&#34;&amp;gt;Yes&amp;lt;/label&amp;gt;&#xA;&amp;lt;input name=&#34;user[options][]&#34; type=&#34;hidden&#34; value=&#34;&#34; /&amp;gt;&#xA;&amp;lt;input id=&#34;user_options_false&#34; name=&#34;user[options][]&#34; type=&#34;checkbox&#34; value=&#34;false&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_check_box&#34; for=&#34;user_options_false&#34;&amp;gt;No&amp;lt;/label&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this with associations in your model, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.collection_check_boxes :role_ids, Role.all, :id, :name # using :roles here is not going to work.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add a CSS class to the label item, you can use the &lt;code&gt;item_label_class&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.collection_check_boxes :role_ids, Role.all, :id, :name, item_label_class: &#39;my-custom-class&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available input types and defaults for each column type&lt;/h2&gt; &#xA;&lt;p&gt;The following table shows the html element you will get for each attribute according to its database definition. These defaults can be changed by specifying the helper method in the column &lt;code&gt;Mapping&lt;/code&gt; as the &lt;code&gt;as:&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mapping&lt;/th&gt; &#xA;   &lt;th&gt;Generated HTML Element&lt;/th&gt; &#xA;   &lt;th&gt;Database Column Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=checkbox]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=text]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;citext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=text]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;citext&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=email]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /email/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=url]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /url/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=tel]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /phone/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;password&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=password]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /password/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;search&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=search]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=text]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=color]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hstore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hstore&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;json&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonb&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=file]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; responding to file methods&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hidden&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=hidden]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=number]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=number]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=number]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;range&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=range]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime/timestamp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;date&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;date select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;date&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;time select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to&lt;/code&gt;/&lt;code&gt;has_many&lt;/code&gt;/&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; associations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;radio_buttons&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;collection of &lt;code&gt;input[type=radio]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to&lt;/code&gt; associations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;check_boxes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;collection of &lt;code&gt;input[type=checkbox]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many&lt;/code&gt;/&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; associations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;country&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt; (countries as options)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /country/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time_zone&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt; (timezones as options)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /time_zone/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom inputs&lt;/h2&gt; &#xA;&lt;p&gt;It is very easy to add custom inputs to &lt;strong&gt;Simple Form&lt;/strong&gt;. For instance, if you want to add a custom input that extends the string one, you just need to add this file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/currency_input.rb&#xA;class CurrencyInput &amp;lt; SimpleForm::Inputs::Base&#xA;  def input(wrapper_options)&#xA;    merged_input_options = merge_wrapper_options(input_html_options, wrapper_options)&#xA;&#xA;    &#34;$ #{@builder.text_field(attribute_name, merged_input_options)}&#34;.html_safe&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use it in your views:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :money, as: :currency&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, you may have to create the &lt;code&gt;app/inputs/&lt;/code&gt; directory and restart your webserver.&lt;/p&gt; &#xA;&lt;p&gt;You can also redefine existing &lt;strong&gt;Simple Form&lt;/strong&gt; inputs by creating a new class with the same name. For instance, if you want to wrap date/time/datetime in a div, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/date_time_input.rb&#xA;class DateTimeInput &amp;lt; SimpleForm::Inputs::DateTimeInput&#xA;  def input(wrapper_options)&#xA;    template.content_tag(:div, super)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to add a class to all the select fields you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/collection_select_input.rb&#xA;class CollectionSelectInput &amp;lt; SimpleForm::Inputs::CollectionSelectInput&#xA;  def input_html_classes&#xA;    super.push(&#39;chosen&#39;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If needed, you can namespace your custom inputs in a module and tell &lt;strong&gt;Simple Form&lt;/strong&gt; to look for their definitions in this module. This can avoid conflicts with other form libraries (like Formtastic) that look up the global context to find inputs definition too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/custom_inputs/numeric_input&#xA;module CustomInputs&#xA;  class NumericInput &amp;lt; SimpleForm::Inputs::NumericInput&#xA;    def input_html_classes&#xA;      super.push(&#39;no-spinner&#39;)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in the &lt;strong&gt;SimpleForm&lt;/strong&gt; initializer :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/simple_form.rb&#xA;config.custom_inputs_namespaces &amp;lt;&amp;lt; &#34;CustomInputs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom form builder&lt;/h2&gt; &#xA;&lt;p&gt;You can create a custom form builder that uses &lt;strong&gt;Simple Form&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create a helper method that calls &lt;code&gt;simple_form_for&lt;/code&gt; with a custom builder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def custom_form_for(object, *args, &amp;amp;block)&#xA;  options = args.extract_options!&#xA;  simple_form_for(object, *(args &amp;lt;&amp;lt; options.merge(builder: CustomFormBuilder)), &amp;amp;block)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a form builder class that inherits from &lt;code&gt;SimpleForm::FormBuilder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CustomFormBuilder &amp;lt; SimpleForm::FormBuilder&#xA;  def input(attribute_name, options = {}, &amp;amp;block)&#xA;    super(attribute_name, options.merge(label: false), &amp;amp;block)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;I18n&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; uses all power of I18n API to lookup labels, hints, prompts and placeholders. To customize your forms you can create a locale file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      user:&#xA;        username: &#39;User name&#39;&#xA;        password: &#39;Password&#39;&#xA;    hints:&#xA;      user:&#xA;        username: &#39;User name to sign in.&#39;&#xA;        password: &#39;No special characters, please.&#39;&#xA;    placeholders:&#xA;      user:&#xA;        username: &#39;Your username&#39;&#xA;        password: &#39;****&#39;&#xA;    include_blanks:&#xA;      user:&#xA;        age: &#39;Rather not say&#39;&#xA;    prompts:&#xA;      user:&#xA;        role: &#39;Select your role&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And your forms will use this information to render the components for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also lets you be more specific, separating lookups through actions. Let&#39;s say you want a different label for new and edit actions, the locale file would be something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      user:&#xA;        username: &#39;User name&#39;&#xA;        password: &#39;Password&#39;&#xA;        edit:&#xA;          username: &#39;Change user name&#39;&#xA;          password: &#39;Change password&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way &lt;strong&gt;Simple Form&lt;/strong&gt; will figure out the right translation for you, based on the action being rendered. And to be a little bit DRYer with your locale file, you can specify defaults for all models under the &#39;defaults&#39; key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      defaults:&#xA;        username: &#39;User name&#39;&#xA;        password: &#39;Password&#39;&#xA;        new:&#xA;          username: &#39;Choose a user name&#39;&#xA;    hints:&#xA;      defaults:&#xA;        username: &#39;User name to sign in.&#39;&#xA;        password: &#39;No special characters, please.&#39;&#xA;    placeholders:&#xA;      defaults:&#xA;        username: &#39;Your username&#39;&#xA;        password: &#39;****&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; will always look for a default attribute translation under the &#34;defaults&#34; key if no specific is found inside the model key.&lt;/p&gt; &#xA;&lt;p&gt;In addition, &lt;strong&gt;Simple Form&lt;/strong&gt; will fallback to default &lt;code&gt;human_attribute_name&lt;/code&gt; from Rails when no other translation is found for labels. Finally, you can also overwrite any label, hint or placeholder inside your view, just by passing the option manually. This way the I18n lookup will be skipped.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;:prompt&lt;/code&gt; and &lt;code&gt;:include_blank&lt;/code&gt; the I18n lookup is optional and to enable it is necessary to pass &lt;code&gt;:translate&lt;/code&gt; as value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :role, prompt: :translate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also has support for translating options in collection helpers. For instance, given a User with a &lt;code&gt;:role&lt;/code&gt; attribute, you might want to create a select box showing translated labels that would post either &lt;code&gt;:admin&lt;/code&gt; or &lt;code&gt;:editor&lt;/code&gt; as value. With &lt;strong&gt;Simple Form&lt;/strong&gt; you could create an input like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :role, collection: [:admin, :editor]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;strong&gt;Simple Form&lt;/strong&gt; will try a lookup like this in your locale file, to find the right labels to show:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    options:&#xA;      user:&#xA;        role:&#xA;          admin: &#39;Administrator&#39;&#xA;          editor: &#39;Editor&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;defaults&lt;/code&gt; key as you would do with labels, hints and placeholders. It is important to notice that &lt;strong&gt;Simple Form&lt;/strong&gt; will only do the lookup for options if you give a collection composed of symbols only. This is to avoid constant lookups to I18n.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also possible to translate buttons, using Rails&#39; built-in I18n support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  helpers:&#xA;    submit:&#xA;      user:&#xA;        create: &#34;Add %{model}&#34;&#xA;        update: &#34;Save Changes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are other options that can be configured through I18n API, such as required text and boolean. Be sure to check our locale file or the one copied to your application after you run &lt;code&gt;rails generate simple_form:install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It should be noted that translations for labels, hints and placeholders for a namespaced model, e.g. &lt;code&gt;Admin::User&lt;/code&gt;, should be placed under &lt;code&gt;admin_user&lt;/code&gt;, not under &lt;code&gt;admin/user&lt;/code&gt;. This is different from how translations for namespaced model and attribute names are defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  activerecord:&#xA;    models:&#xA;        admin/user: User&#xA;    attributes:&#xA;        admin/user:&#xA;            name: Name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They should be placed under &lt;code&gt;admin/user&lt;/code&gt;. Form labels, hints and placeholders for those attributes, though, should be placed under &lt;code&gt;admin_user&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;        admin_user:&#xA;            name: Name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This difference exists because &lt;strong&gt;Simple Form&lt;/strong&gt; relies on &lt;code&gt;object_name&lt;/code&gt; provided by Rails&#39; FormBuilder to determine the translation path for a given object instead of &lt;code&gt;i18n_key&lt;/code&gt; from the object itself. Thus, similarly, if a form for an &lt;code&gt;Admin::User&lt;/code&gt; object is defined by calling &lt;code&gt;simple_form_for @admin_user, as: :some_user&lt;/code&gt;, &lt;strong&gt;Simple Form&lt;/strong&gt; will look for translations under &lt;code&gt;some_user&lt;/code&gt; instead of &lt;code&gt;admin_user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When translating &lt;code&gt;simple_fields_for&lt;/code&gt; attributes be sure to use the same name you pass to it, e.g. &lt;code&gt;simple_fields_for :posts&lt;/code&gt; should be placed under &lt;code&gt;posts&lt;/code&gt; not &lt;code&gt;post&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      posts:&#xA;        title: &#39;Post title&#39;&#xA;    hints:&#xA;      posts:&#xA;        title: &#39;A good title&#39;&#xA;    placeholders:&#xA;      posts:&#xA;        title: &#39;Once upon a time...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; has several configuration options. You can read and change them in the initializer created by &lt;strong&gt;Simple Form&lt;/strong&gt;, so if you haven&#39;t executed the command below yet, please do:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rails generate simple_form:install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The wrappers API&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;strong&gt;Simple Form&lt;/strong&gt; you can configure how your components will be rendered using the wrappers API. The syntax looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers tag: :div, class: :input,&#xA;                error_class: :field_with_errors,&#xA;                valid_class: :field_without_errors do |b|&#xA;&#xA;  # Form extensions&#xA;  b.use :html5&#xA;  b.optional :pattern&#xA;  b.use :maxlength&#xA;  b.use :placeholder&#xA;  b.use :readonly&#xA;&#xA;  # Form components&#xA;  b.use :label_input&#xA;  b.use :hint,  wrap_with: { tag: :span, class: :hint }&#xA;  b.use :error, wrap_with: { tag: :span, class: :error }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;Form components&lt;/em&gt; will generate the form tags like labels, inputs, hints or errors contents. The available components are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;:label         # The &amp;lt;label&amp;gt; tag alone&#xA;:input         # The &amp;lt;input&amp;gt; tag alone&#xA;:label_input   # The &amp;lt;label&amp;gt; and the &amp;lt;input&amp;gt; tags&#xA;:hint          # The hint for the input&#xA;:error         # The error for the input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;Form extensions&lt;/em&gt; are used to generate some attributes or perform some lookups on the model to add extra information to your components.&lt;/p&gt; &#xA;&lt;p&gt;You can create new &lt;em&gt;Form components&lt;/em&gt; using the wrappers API as in the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;  b.wrapper tag: :div, class: &#39;separator&#39; do |component|&#xA;    component.use :hint,  wrap_with: { tag: :span, class: :hint }&#xA;    component.use :error, wrap_with: { tag: :span, class: :error }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will wrap the hint and error components within a &lt;code&gt;div&lt;/code&gt; tag using the class &lt;code&gt;&#39;separator&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can customize &lt;em&gt;Form components&lt;/em&gt; passing options to them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers do |b|&#xA;  b.use :label_input, class: &#39;label-input-class&#39;, error_class: &#39;is-invalid&#39;, valid_class: &#39;is-valid&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the input and label classes to &lt;code&gt;&#39;label-input-class&#39;&lt;/code&gt; and will set the class &lt;code&gt;&#39;is-invalid&#39;&lt;/code&gt; if the input has errors and &lt;code&gt;&#39;is-valid&#39;&lt;/code&gt; if the input is valid.&lt;/p&gt; &#xA;&lt;p&gt;If you want to customize the custom &lt;em&gt;Form components&lt;/em&gt; on demand you can give it a name like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;  b.wrapper :my_wrapper, tag: :div, class: &#39;separator&#39;, html: { id: &#39;my_wrapper_id&#39; } do |component|&#xA;    component.use :hint,  wrap_with: { tag: :span, class: :hint }&#xA;    component.use :error, wrap_with: { tag: :span, class: :error }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and now you can pass options to your &lt;code&gt;input&lt;/code&gt; calls to customize the &lt;code&gt;:my_wrapper&lt;/code&gt; &lt;em&gt;Form component&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Completely turns off the custom wrapper&#xA;f.input :name, my_wrapper: false&#xA;&#xA;# Configure the html&#xA;f.input :name, my_wrapper_html: { id: &#39;special_id&#39; }&#xA;&#xA;# Configure the tag&#xA;f.input :name, my_wrapper_tag: :p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define more than one wrapper and pick one to render in a specific form or input. To define another wrapper you have to give it a name, as the follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers :small do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use it in this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Specifying to whole form&#xA;simple_form_for @user, wrapper: :small do |f|&#xA;  f.input :name&#xA;end&#xA;&#xA;# Specifying to one input&#xA;simple_form_for @user do |f|&#xA;  f.input :name, wrapper: :small&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also allows you to use optional elements. For instance, let&#39;s suppose you want to use hints or placeholders, but you don&#39;t want them to be generated automatically. You can set their default values to &lt;code&gt;false&lt;/code&gt; or use the &lt;code&gt;optional&lt;/code&gt; method. Is preferable to use the &lt;code&gt;optional&lt;/code&gt; syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers placeholder: false do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;  b.wrapper tag: :div, class: &#39;separator&#39; do |component|&#xA;    component.optional :hint, wrap_with: { tag: :span, class: :hint }&#xA;    component.use :error, wrap_with: { tag: :span, class: :error }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By setting it as &lt;code&gt;optional&lt;/code&gt;, a hint will only be generated when &lt;code&gt;hint: true&lt;/code&gt; is explicitly used. The same for placeholder.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to give the option &lt;code&gt;:unless_blank&lt;/code&gt; to the wrapper if you want to render it only when the content is present.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  b.wrapper tag: :span, class: &#39;hint&#39;, unless_blank: true do |component|&#xA;    component.optional :hint&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Components&lt;/h2&gt; &#xA;&lt;p&gt;When you use custom wrappers, you might also be looking for a way to add custom components to your wrapper. The default components are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;:label         # The &amp;lt;label&amp;gt; tag alone&#xA;:input         # The &amp;lt;input&amp;gt; tag alone&#xA;:label_input   # The &amp;lt;label&amp;gt; and the &amp;lt;input&amp;gt; tags&#xA;:hint          # The hint for the input&#xA;:error         # The error for the input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A custom component might be interesting for you if your views look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @blog do |f| %&amp;gt;&#xA;  &amp;lt;div class=&#34;row&#34;&amp;gt;&#xA;    &amp;lt;div class=&#34;span1 number&#34;&amp;gt;&#xA;      1&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div class=&#34;span8&#34;&amp;gt;&#xA;      &amp;lt;%= f.input :title %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;  &amp;lt;div class=&#34;row&#34;&amp;gt;&#xA;    &amp;lt;div class=&#34;span1 number&#34;&amp;gt;&#xA;      2&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div class=&#34;span8&#34;&amp;gt;&#xA;      &amp;lt;%= f.input :body, as: :text %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A cleaner method to create your views would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @blog, wrapper: :with_numbers do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :title, number: 1 %&amp;gt;&#xA;  &amp;lt;%= f.input :body, as: :text, number: 2 %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the number option on the input, first, tells to Simple Form the place where the components will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/simple_form.rb&#xA;Dir[Rails.root.join(&#39;lib/components/**/*.rb&#39;)].each { |f| require f }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new component within the path specified above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/components/numbers_component.rb&#xA;module NumbersComponent&#xA;  # To avoid deprecation warning, you need to make the wrapper_options explicit&#xA;  # even when they won&#39;t be used.&#xA;  def number(wrapper_options = nil)&#xA;    @number ||= begin&#xA;      options[:number].to_s.html_safe if options[:number].present?&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;SimpleForm.include_component(NumbersComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, add a new wrapper to the config/initializers/simple_form.rb file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers :with_numbers, tag: &#39;div&#39;, class: &#39;row&#39;, error_class: &#39;error&#39; do |b|&#xA;  b.use :html5&#xA;  b.use :number, wrap_with: { tag: &#39;div&#39;, class: &#39;span1 number&#39; }&#xA;  b.wrapper tag: &#39;div&#39;, class: &#39;span8&#39; do |ba|&#xA;    ba.use :placeholder&#xA;    ba.use :label&#xA;    ba.use :input&#xA;    ba.use :error, wrap_with: { tag: &#39;span&#39;, class: &#39;help-inline&#39; }&#xA;    ba.use :hint,  wrap_with: { tag: &#39;p&#39;, class: &#39;help-block&#39; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTML 5 Notice&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;Simple Form&lt;/strong&gt; will generate input field types and attributes that are supported in HTML5, but are considered invalid HTML for older document types such as HTML4 or XHTML1.0. The HTML5 extensions include the new field types such as email, number, search, url, tel, and the new attributes such as required, autofocus, maxlength, min, max, step.&lt;/p&gt; &#xA;&lt;p&gt;Most browsers will not care, but some of the newer ones - in particular Chrome 10+ - use the required attribute to force a value into an input and will prevent form submission without it. Depending on the design of the application this may or may not be desired. In many cases it can break existing UI&#39;s.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to disable all HTML 5 extensions in &lt;strong&gt;Simple Form&lt;/strong&gt; by removing the &lt;code&gt;html5&lt;/code&gt; component from the wrapper used to render the inputs.&lt;/p&gt; &#xA;&lt;p&gt;For example, change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers tag: :div do |b|&#xA;  b.use :html5&#xA;&#xA;  b.use :label_input&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers tag: :div do |b|&#xA;  b.use :label_input&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to have all other HTML 5 features, such as the new field types, you can disable only the browser validation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleForm.browser_validations = false # default is true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option adds a new &lt;code&gt;novalidate&lt;/code&gt; property to the form, instructing it to skip all HTML 5 validation. The inputs will still be generated with the required and other attributes, that might help you to use some generic javascript validation.&lt;/p&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;novalidate&lt;/code&gt; to a specific form by setting the option on the form itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for(resource, html: { novalidate: true }) do |form| %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please notice that none of the configurations above will disable the &lt;code&gt;placeholder&lt;/code&gt; component, which is an HTML 5 feature. We believe most of the newest browsers are handling this attribute just fine, and if they aren&#39;t, any plugin you use would take care of applying the placeholder. In any case, you can disable it if you really want to, by removing the placeholder component from the components list in the &lt;strong&gt;Simple Form&lt;/strong&gt; configuration file.&lt;/p&gt; &#xA;&lt;p&gt;HTML 5 date / time inputs are not generated by &lt;strong&gt;Simple Form&lt;/strong&gt; by default, so using &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; or &lt;code&gt;datetime&lt;/code&gt; will all generate select boxes using normal Rails helpers. We believe browsers are not totally ready for these yet, but you can easily opt-in on a per-input basis by passing the html5 option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.input :expires_at, as: :date, html5: true %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using non Active Record objects&lt;/h3&gt; &#xA;&lt;p&gt;There are few ways to build forms with objects that don&#39;t inherit from Active Record, as follows:&lt;/p&gt; &#xA;&lt;p&gt;You can include the module &lt;code&gt;ActiveModel::Model&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  include ActiveModel::Model&#xA;&#xA;  attr_accessor :id, :name&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Presenters or Decorators that inherit from &lt;code&gt;SimpleDelegator&lt;/code&gt; you can delegate it to the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class UserPresenter &amp;lt; SimpleDelegator&#xA;  # Without that, Simple Form will consider the user model as the object.&#xA;  def to_model&#xA;    self&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define all methods required by the helpers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  extend ActiveModel::Naming&#xA;&#xA;  attr_accessor :id, :name&#xA;&#xA;  def to_model&#xA;    self&#xA;  end&#xA;&#xA;  def to_key&#xA;    id&#xA;  end&#xA;&#xA;  def persisted?&#xA;    false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your object doesn&#39;t implement those methods, you must make explicit it when you are building the form&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  attr_accessor :id, :name&#xA;&#xA;  # The only method required to use the f.submit helper.&#xA;  def persisted?&#xA;    false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for(@user, as: :user, method: :post, url: users_path) do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name %&amp;gt;&#xA;  &amp;lt;%= f.submit &#39;New user&#39; %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;h3&gt;RDocs&lt;/h3&gt; &#xA;&lt;p&gt;You can view the &lt;strong&gt;Simple Form&lt;/strong&gt; documentation in RDoc format here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rubydoc.info/github/heartcombo/simple_form/master/frames&#34;&gt;http://rubydoc.info/github/heartcombo/simple_form/master/frames&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported Ruby / Rails versions&lt;/h3&gt; &#xA;&lt;p&gt;We intend to maintain support for all Ruby / Rails versions that haven&#39;t reached end-of-life.&lt;/p&gt; &#xA;&lt;p&gt;For more information about specific versions please check &lt;a href=&#34;https://www.ruby-lang.org/en/downloads/branches/&#34;&gt;Ruby&lt;/a&gt; and &lt;a href=&#34;https://guides.rubyonrails.org/maintenance_policy.html&#34;&gt;Rails&lt;/a&gt; maintenance policies, and our test matrix.&lt;/p&gt; &#xA;&lt;h3&gt;Bug reports&lt;/h3&gt; &#xA;&lt;p&gt;If you discover any bugs, feel free to create an issue on GitHub. Please add as much information as possible to help us in fixing the potential bug. We also encourage you to help even more by forking and sending us a pull request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/simple_form/issues&#34;&gt;https://github.com/heartcombo/simple_form/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have discovered a security related bug, please do NOT use the GitHub issue tracker. Send an e-mail to &lt;a href=&#34;mailto:heartcombo@googlegroups.com&#34;&gt;heartcombo@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carlos Antonio da Silva (&lt;a href=&#34;https://github.com/carlosantoniodasilva&#34;&gt;https://github.com/carlosantoniodasilva&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Rafael Mendonça França (&lt;a href=&#34;https://github.com/rafaelfranca&#34;&gt;https://github.com/rafaelfranca&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Felipe Renan (&lt;a href=&#34;https://github.com/feliperenan&#34;&gt;https://github.com/feliperenan&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/simple_form&#34;&gt;&lt;img src=&#34;https://fury-badge.herokuapp.com/rb/simple_form.png&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/heartcombo/simple_form&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/heartcombo/simple_form.png&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/heartcombo/simple_form&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/heartcombo/simple_form.png&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License. Copyright 2020 Rafael França, Carlos Antônio da Silva. Copyright 2009-2019 Plataformatec.&lt;/p&gt; &#xA;&lt;p&gt;The Simple Form logo is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/shopify-cli</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/Shopify/shopify-cli</id>
    <link href="https://github.com/Shopify/shopify-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shopify CLI helps you build against the Shopify platform faster.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Shopify/shopify-cli/main/assets/logo.png&#34; width=&#34;150&#34;&gt; &#xA; &lt;h1&gt;Shopify CLI&lt;/h1&gt; &#xA; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://github.com/shopify/shopify-cli/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Shopify&#34;&gt;&lt;/a&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/v/release/shopify/shopify-cli?include_prereleases&amp;amp;style=flat-square&#34; alt=&#34;Latest Version&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/forks/shopify/shopify-cli?style=flat-square&#34; alt=&#34;GitHub forks&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/stars/shopify/shopify-cli?style=flat-square&#34; alt=&#34;GitHub stars&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/commit-activity/w/shopify/shopify-cli?style=flat-square&#34; alt=&#34;Commit Activity&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/contributors/shopify/shopify-cli?style=flat-square&#34; alt=&#34;Contributors&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/commits-since/shopify/shopify-cli/latest?style=flat-square&#34; alt=&#34;Latest Commits&#34;&gt; &#xA; &lt;a href=&#34;http://twitter.com/ShopifyDevs&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ShopifyDevs?style=flat-square&#34; alt=&#34;Twitter Followers&#34;&gt;&lt;/a&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Powered%20by-Ruby-red&#34; alt=&#34;Powered by Ruby&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Shopify CLI helps you build Shopify themes and apps. Use Shopify CLI to automate and enhance your local development workflow.&lt;/p&gt; &#xA;&lt;p&gt;Shopify CLI is available as a gem and can be run and installed on Mac, Linux and Windows systems.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-cli/main/docs/users/installation.md&#34;&gt;installation steps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing 👩‍💻&lt;/h2&gt; &#xA;&lt;p&gt;Shopify CLI is an &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-cli/main/LICENSE&#34;&gt;open source tool&lt;/a&gt; and everyone is welcome to help the community by &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-cli/main/docs/README.md&#34;&gt;contributing&lt;/a&gt; to the project.&lt;/p&gt; &#xA;&lt;h2&gt;Help 🖐&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter issues using the CLI or have feedback you&#39;d like to share with us, below are some options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Shopify/shopify-cli/issues&#34;&gt;Open a GitHub issue&lt;/a&gt; - To report bugs or request new features, open an issue in the Shopify CLI repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://community.shopify.com/&#34;&gt;Shopify Community Forums&lt;/a&gt; - Visit our forums to connect with the community and learn more about Shopify CLI development.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>TheOdinProject/theodinproject</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/TheOdinProject/theodinproject</id>
    <link href="https://github.com/TheOdinProject/theodinproject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main Website for The Odin Project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Odin Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.theodinproject.com/&#34;&gt;The Odin Project&lt;/a&gt; (TOP) is an open-source curriculum for learning full-stack web development. Our mission is to provide a comprehensive curriculum to learn web development for free. We help users learn the skills and build the impressive portfolio of projects they need to get hired as a web developer.&lt;/p&gt; &#xA;&lt;p&gt;Some of the topics we cover include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA; &lt;li&gt;Ruby on Rails&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;HTML and CSS&lt;/li&gt; &#xA; &lt;li&gt;Javascript&lt;/li&gt; &#xA; &lt;li&gt;Node&lt;/li&gt; &#xA; &lt;li&gt;React&lt;/li&gt; &#xA; &lt;li&gt;How to go about getting a job in the industry&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo contains the TOP app which pulls in lesson content as well as front-end and back-end code. To see the actual lesson content that gets pulled in, please go to the &lt;a href=&#34;https://github.com/TheOdinProject/curriculum&#34;&gt;TOP curriculum repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our community can be found on the &lt;a href=&#34;https://discord.gg/fbFCkYabZB&#34;&gt;TOP Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.circleci.com/pipelines/github/TheOdinProject/theodinproject&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/TheOdinProject/theodinproject.svg?style=svg&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Odin Project depends on open-source contributions to improve, grow, and thrive. We welcome contributors of all experience levels and backgrounds to help maintain this awesome curriculum and community. If you would like to contribute to our curriculum, be sure to thoroughly read our &lt;a href=&#34;https://github.com/TheOdinProject/theodinproject/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Significant Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eriktrautman&#34;&gt;Erik Trautman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/afshinator&#34;&gt;Afshin Moktari&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gorchov&#34;&gt;Josh Gorchov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zkay&#34;&gt;Joe Sawyer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mach1010&#34;&gt;Bill Walker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ngehani&#34;&gt;Neil Gehani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/Iawhite76&#34;&gt;Ian White&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/dominathan&#34;&gt;Nathan Hall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/AbbyJonesDev&#34;&gt;Abby Jones&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KevinMulhern&#34;&gt;Kevin Mulhern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arku&#34;&gt;Arun Kumar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codyloyd&#34;&gt;Cody Loyd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CouchofTomato&#34;&gt;Austin Mason&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/I3uckwheat&#34;&gt;Briggs Elsperger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/105ron&#34;&gt;Rhys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leosoaivan&#34;&gt;L. P. Soai-Van&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mindovermiles262&#34;&gt;Andy Duss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adachiu&#34;&gt;Ada Chiu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marvingay&#34;&gt;Marvin Gay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rlmoser99&#34;&gt;Rachel Moser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CatQueenCodes&#34;&gt;Grace Schwartz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twalton83&#34;&gt;Tatiana Walton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kashura&#34;&gt;Valera Kushnir&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;http://www.github.com/eriktrautman&#34;&gt;Erik Trautman&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github-changelog-generator/github-changelog-generator</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/github-changelog-generator/github-changelog-generator</id>
    <link href="https://github.com/github-changelog-generator/github-changelog-generator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically generate change log from your tags, issues, labels and pull requests on GitHub.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/github_changelog_generator&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/github_changelog_generator.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/github-changelog-generator/github-changelog-generator&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/github-changelog-generator/github-changelog-generator.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/github-changelog-generator/github-changelog-generator&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/github-changelog-generator/github-changelog-generator.svg?sanitize=true&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/github-changelog-generator/chat?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/github-changelog-generator/chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/github-changelog-generator/chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;github-changelog-generator &lt;img src=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/images/logo.jpg&#34; alt=&#34;GitHub Logo&#34;&gt;&lt;/h1&gt; &#xA;&lt;!--&#xA;To update TOC, please run:&#xA;&gt; doctoc ./README.md --github&#xA; --&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#changelog-generation-has-never-been-so-easy&#34;&gt;Changelog generation has never been so easy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#whats-the-point-of-a-changelog&#34;&gt;&lt;em&gt;What’s the point of a changelog?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#why-should-i-care&#34;&gt;&lt;em&gt;Why should I care?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#running-with-cli&#34;&gt;Running with CLI:&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#running-with-docker&#34;&gt;Running with Docker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#output-example&#34;&gt;Output example&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#params&#34;&gt;Params&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#params-file&#34;&gt;Params File&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#github-token&#34;&gt;GitHub token&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#migrating-from-a-manual-changelog&#34;&gt;Migrating from a manual changelog&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#rake-task&#34;&gt;Rake task&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#features-and-advantages-of-this-project&#34;&gt;Features and advantages of this project&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#using-the-summary-section-feature&#34;&gt;Using the summary section feature&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#alternatives&#34;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#projects-using-this-library&#34;&gt;Projects using this library&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#practical-use-cases&#34;&gt;Practical Use Cases&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#creating-github-release-notes&#34;&gt;Creating Github Release Notes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#am-i-missing-some-essential-feature&#34;&gt;Am I missing some essential feature?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#contact-us&#34;&gt;Contact us&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h3&gt;Changelog generation has never been so easy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fully automated changelog generation&lt;/strong&gt; - This gem generates a changelog file based on &lt;strong&gt;tags&lt;/strong&gt;, &lt;strong&gt;issues&lt;/strong&gt; and merged &lt;strong&gt;pull requests&lt;/strong&gt; (and splits them into separate lists according to labels) from &lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;) GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Since you don&#39;t have to fill your &lt;code&gt;CHANGELOG.md&lt;/code&gt; manually now: just run the script, relax and take a cup of &lt;span&gt;☕&lt;/span&gt; before your next release! &lt;span&gt;🎉&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;What’s the point of a changelog?&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To make it easier for users and contributors to see precisely what notable changes have been made between each release (or version) of the project.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;Why should I care?&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Because software tools are for &lt;em&gt;people&lt;/em&gt;. &#34;Changelogs make it easier for users and contributors to see precisely what notable changes have been made between each release (or version) of the project.&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;➡&lt;/span&gt; &lt;em&gt;&lt;a href=&#34;https://keepachangelog.com&#34;&gt;https://keepachangelog.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;GitHub Changelog Generator is a &lt;a href=&#34;https://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt; program, distributed as a RubyGem. The Ruby language homepage has an &lt;a href=&#34;https://www.ruby-lang.org/en/documentation/installation/&#34;&gt;Installation page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install the gem like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install github_changelog_generator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on your system, you &lt;em&gt;may&lt;/em&gt; need to run the shell as an Administrator (Windows), or use &lt;code&gt;sudo gem install github_changelog_generator&lt;/code&gt; (Linux).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Running with CLI:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;   github_changelog_generator -u github_project_namespace -p github_project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(where the project namespace is &lt;em&gt;likely&lt;/em&gt; your username if it&#39;s a project you own, but it could also be the namespace of the project)&lt;/p&gt; &#xA;&lt;h3&gt;Running with Docker&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker&lt;/a&gt; is an alternative to installing Ruby and the gem.&lt;/p&gt; &#xA;&lt;p&gt;Example invocation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -it --rm -v &#34;$(pwd)&#34;:/usr/local/src/your-app githubchangeloggenerator/github-changelog-generator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For GitHub Enterprise repos, specify &lt;em&gt;both&lt;/em&gt; &lt;code&gt;--github-site&lt;/code&gt; and &lt;code&gt;--github-api&lt;/code&gt; options:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ github_changelog_generator --github-site=&#34;https://github.yoursite.com&#34; \&#xA;                            --github-api=&#34;https://github.yoursite.com/api/v3/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This generates a &lt;code&gt;CHANGELOG.md&lt;/code&gt;, with pretty Markdown formatting.&lt;/p&gt; &#xA;&lt;h2&gt;Output example&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Look at &lt;strong&gt;&lt;a href=&#34;https://github.com/github-changelog-generator/Github-Changelog-Generator/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/strong&gt; for this project&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/skywinder/ActionSheetPicker-3.0/raw/develop/CHANGELOG.md&#34;&gt;ActionSheetPicker-3.0/CHANGELOG.md&lt;/a&gt; was generated by command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ github_changelog_generator -u github-changelog-generator -p ActionSheetPicker-3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In general, it looks like this:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h2&gt;&lt;a href=&#34;https://github.com/github-changelog-generator/Github-Changelog-Generator/tree/1.2.5&#34;&gt;1.2.5&lt;/a&gt; (2015-01-15)&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/github-changelog-generator/Github-Changelog-Generator/compare/1.2.4...1.2.5&#34;&gt;Full Changelog&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Implemented enhancements:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Use milestone to specify in which version bug was fixed &lt;a href=&#34;https://github.com/github-changelog-generator/Github-Changelog-Generator/issues/22&#34;&gt;#22&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Fixed bugs:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Error when trying to generate log for repo without tags &lt;a href=&#34;https://github.com/github-changelog-generator/Github-Changelog-Generator/issues/32&#34;&gt;#32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Merged pull requests:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;PrettyPrint class is included using lowercase &#39;pp&#39; &lt;a href=&#34;https://github.com/github-changelog-generator/Github-Changelog-Generator/pull/43&#34;&gt;#43&lt;/a&gt; (&lt;a href=&#34;https://github.com/schwing&#34;&gt;schwing&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;support enterprise github via command line options &lt;a href=&#34;https://github.com/github-changelog-generator/Github-Changelog-Generator/pull/42&#34;&gt;#42&lt;/a&gt; (&lt;a href=&#34;https://github.com/glenlovett&#34;&gt;glenlovett&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Params&lt;/h3&gt; &#xA;&lt;p&gt;Print help for all command-line options to learn more details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ github_changelog_generator --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details about params, read the Wiki page: &lt;a href=&#34;https://github.com/github-changelog-generator/github-changelog-generator/wiki/Advanced-change-log-generation-examples&#34;&gt;&lt;strong&gt;Advanced changelog generation examples&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Params File&lt;/h3&gt; &#xA;&lt;p&gt;In your project root, you can put a params file named &lt;code&gt;.github_changelog_generator&lt;/code&gt; to override default params:&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;unreleased=false&#xA;future-release=5.0.0&#xA;since-tag=1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub token&lt;/h3&gt; &#xA;&lt;p&gt;GitHub only allows &lt;strong&gt;50 unauthenticated requests per hour&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, it&#39;s recommended to run this script with authentication by using a &lt;strong&gt;token&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/settings/tokens/new?description=GitHub%20Changelog%20Generator%20token&#34;&gt;Generate a token here&lt;/a&gt; - you only need &#34;repo&#34; scope for private repositories&lt;/li&gt; &#xA; &lt;li&gt;Either: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run the script with &lt;code&gt;--token &amp;lt;your-40-digit-token&amp;gt;&lt;/code&gt;; &lt;strong&gt;OR&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Set the &lt;code&gt;CHANGELOG_GITHUB_TOKEN&lt;/code&gt; environment variable to your 40 digit token&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can set an environment variable by running the following command at the prompt, or by adding it to your shell profile (e.g., &lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt;, etc):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export CHANGELOG_GITHUB_TOKEN=&#34;«your-40-digit-github-token»&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, if you get a message like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;API rate limit exceeded for github_username.&#xA;See: https://developer.github.com/v3/#rate-limiting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s time to create this token! (Or, wait an hour for GitHub to reset your unauthenticated request limit.)&lt;/p&gt; &#xA;&lt;h2&gt;Migrating from a manual changelog&lt;/h2&gt; &#xA;&lt;p&gt;Knowing how dedicated you are to your project, you probably haven&#39;t been waiting for &lt;code&gt;github-changelog-generator&lt;/code&gt; to keep a changelog. But you probably don&#39;t want your project&#39;s open issues and PRs for all past features listed in your historic changelog, either.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s where &lt;code&gt;--base &amp;lt;your-manual-changelog.md&amp;gt;&lt;/code&gt; comes in handy! This option lets append your old manual changelog to the end of the generated entries.&lt;/p&gt; &#xA;&lt;p&gt;If you have a &lt;code&gt;HISTORY.md&lt;/code&gt; file in your project, it will automatically be picked as the static historical changelog and appended.&lt;/p&gt; &#xA;&lt;h3&gt;Rake task&lt;/h3&gt; &#xA;&lt;p&gt;You love &lt;code&gt;rake&lt;/code&gt;? We do, too! So, we&#39;ve made it even easier for you: we&#39;ve provided a &lt;code&gt;rake&lt;/code&gt; task library for your changelog generation.&lt;/p&gt; &#xA;&lt;p&gt;Configure the task in your &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;github_changelog_generator/task&#39;&#xA;&#xA;GitHubChangelogGenerator::RakeTask.new :changelog do |config|&#xA;  config.user = &#39;username&#39;&#xA;  config.project = &#39;project-name&#39;&#xA;  config.since_tag = &#39;0.1.14&#39;&#xA;  config.future_release = &#39;0.2.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All command-line options can be passed to the &lt;code&gt;rake&lt;/code&gt; task as &lt;code&gt;config&lt;/code&gt; parameters. And since you&#39;re naming the &lt;code&gt;rake&lt;/code&gt; task yourself, you can create as many as you want.&lt;/p&gt; &#xA;&lt;p&gt;You can look for params names from the &lt;a href=&#34;https://github.com/github-changelog-generator/github-changelog-generator/raw/master/lib/github_changelog_generator/parser.rb&#34;&gt;parser source code (#setup_parser)&lt;/a&gt;. For example, to translate the bugs label to Portuguese, instead of setting &lt;code&gt;config.bugs_label&lt;/code&gt;, you have to set &lt;code&gt;config.bug_prefix&lt;/code&gt;, and so on.&lt;/p&gt; &#xA;&lt;h2&gt;Features and advantages of this project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate canonical, neat changelog file, with default sections that follow &lt;a href=&#34;http://keepachangelog.com&#34;&gt;basic changelog guidelines&lt;/a&gt; &lt;span&gt;💎&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optionally generate &lt;strong&gt;Unreleased&lt;/strong&gt; changes (closed issues that have not released yet) &lt;span&gt;💫&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GitHub Enterprise support&lt;/strong&gt; via command line options! &lt;span&gt;🏭&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flexible format &lt;strong&gt;customization&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Customize&lt;/strong&gt; issues that &lt;strong&gt;should be added&lt;/strong&gt; to changelog &lt;span&gt;✳&lt;/span&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Custom date formats&lt;/strong&gt; supported (but keep &lt;a href=&#34;http://xkcd.com/1179/&#34;&gt;ISO 8601&lt;/a&gt; in mind!) &lt;span&gt;📅&lt;/span&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Manually specify the version that fixed an issue (for cases when the issue&#39;s Closed date doesn&#39;t match) by giving the issue&#39;s &lt;code&gt;milestone&lt;/code&gt; the same name as the tag of version &lt;span&gt;📌&lt;/span&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Automatically &lt;strong&gt;exclude specific issues&lt;/strong&gt; that are irrelevant to your changelog (by default, any issue labeled &lt;code&gt;question&lt;/code&gt;, &lt;code&gt;duplicate&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, or &lt;code&gt;wontfix&lt;/code&gt;) &lt;span&gt;✂&lt;/span&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Distinguish&lt;/strong&gt; issues &lt;strong&gt;by labels&lt;/strong&gt;. &lt;span&gt;🔎&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Merged pull requests (all merged pull-requests) &lt;span&gt;🔀&lt;/span&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Bug fixes (issues labeled &lt;code&gt;bug&lt;/code&gt;) &lt;span&gt;🪲&lt;/span&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Enhancements (issues labeled &lt;code&gt;enhancement&lt;/code&gt;) &lt;span&gt;🌟&lt;/span&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Issues (closed issues with no labels) &lt;span&gt;🚱&lt;/span&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Manually include or exclude issues by labels &lt;span&gt;🔧&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Customize lots more! Tweak the changelog to fit your preferences &lt;span&gt;🎩&lt;/span&gt; (&lt;em&gt;See &lt;code&gt;github_changelog_generator --help&lt;/code&gt; for details)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using the summary section feature&lt;/h3&gt; &#xA;&lt;p&gt;For each version, you can add a &lt;em&gt;release summary&lt;/em&gt; with text, images, gif animations, etc, and show new features and notes clearly to the user. This is done using GitHub metadata.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: adding the release summary for v1.0.0:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new GitHub Issue&lt;/li&gt; &#xA; &lt;li&gt;In the Issue&#39;s &lt;em&gt;Description&lt;/em&gt; field, add your release summary content&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;![image](https://user-images.githubusercontent.com/12690315/45935880-006a8200-bfeb-11e8-958e-ff742ae66b96.png)&#xA;&#xA;Hello, World! &lt;span&gt;🎉&lt;/span&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Set the Issue Label &lt;code&gt;release-summary&lt;/code&gt; and add it to the GitHub Milestone &lt;code&gt;v1.0.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Close the Issue and execute &lt;code&gt;github-changelog-generator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The result looks like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h2&gt;&lt;a href=&#34;https://github.com/github-changelog-generator/github-changelog-generator/tree/1.0.0&#34;&gt;v1.0.0&lt;/a&gt; (2014-11-07)&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/github-changelog-generator/github-changelog-generator/compare/0.1.0...1.0.0&#34;&gt;Full Changelog&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/45935880-006a8200-bfeb-11e8-958e-ff742ae66b96.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Hello, World! &lt;span&gt;🎉&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Implemented enhancements:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Add some features&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Alternatives&lt;/h3&gt; &#xA;&lt;p&gt;Here is a &lt;a href=&#34;https://github.com/github-changelog-generator/Github-Changelog-Generator/wiki/Alternatives&#34;&gt;wikipage list of alternatives&lt;/a&gt; that I found. But none satisfied my requirements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you know other projects, feel free to edit this Wiki page!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Projects using this library&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/github-changelog-generator/Github-Changelog-Generator/wiki/Projects-using-Github-Changelog-Generator&#34;&gt;wikipage list of projects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve used this project in a live app, please let me know! Nothing makes me happier than seeing someone else take my work and go wild with it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you are using &lt;code&gt;github_changelog_generator&lt;/code&gt; to generate your project&#39;s changelog, or know of other projects using it, please &lt;a href=&#34;https://github.com/github-changelog-generator/github-changelog-generator/wiki/Projects-using-Github-Changelog-Generator&#34;&gt;add it to this list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Practical Use Cases&lt;/h2&gt; &#xA;&lt;h3&gt;Creating Github Release Notes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;github_changelog_generator&lt;/code&gt; can be used in combination with the &lt;a href=&#34;https://cli.github.com/&#34;&gt;github cli&lt;/a&gt; to create release notes. Use the &lt;code&gt;--since-tag&lt;/code&gt; and &lt;code&gt;--output&lt;/code&gt; options of &lt;code&gt;github_changelog_generator&lt;/code&gt; to create a changelog for the current release and store the results in a file. In the example below, version &lt;code&gt;2.0.0&lt;/code&gt; is the current release and version &lt;code&gt;1.0.0&lt;/code&gt; is the previous release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p build&#xA;github_changelog_generator \&#xA;  --since-tag 1.0.0 \&#xA;  --output build/changelog.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use the &lt;a href=&#34;https://cli.github.com/manual/gh_release_create&#34;&gt;release create&lt;/a&gt; feature of the github cli to create a new github release&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gh release create 2.0.0 \&#xA;  --notes-file build/changelog.md \&#xA;  --title 2.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Am I missing some essential feature?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nothing is impossible!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open an &lt;a href=&#34;https://github.com/github-changelog-generator/Github-Changelog-Generator/issues/new/choose&#34;&gt;issue&lt;/a&gt; and let&#39;s make the generator better together!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Bug reports, feature requests, patches, and well-wishes are always welcome.&lt;/em&gt; &lt;span&gt;❗&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;I already use GitHub Releases. Why do I need this?&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GitHub Releases is a very good thing. And it&#39;s very good practice to maintain it. (Not a lot of people are using it yet!) &lt;span&gt;㊗&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;BTW: I would like to support GitHub Releases in &lt;a href=&#34;https://github.com/github-changelog-generator/github-changelog-generator/issues/56&#34;&gt;next releases&lt;/a&gt; ;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m not trying to compare the quality of handwritten and auto-generated logs. That said....&lt;/p&gt; &#xA;&lt;p&gt;An auto-generated changelog really helps, even if you manually fill in the release notes!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;My Ruby version is very old, can I use this?&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When your Ruby is old, and you don&#39;t want to upgrade, and you want to control which libraries you use, you can use Bundler.&lt;/p&gt; &#xA;&lt;p&gt;In a Gemfile, perhaps in a non-deployed &lt;code&gt;:development&lt;/code&gt; group, add this gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development do&#xA;  gem &#39;github_changelog_generator&#39;, require: false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can keep back dependencies like rack, which currently is only compatible with Ruby &amp;gt;= 2.2.2. So, use an older version for your app by adding a line like this to the Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;rack&#39;, &#39;~&amp;gt; 1.6&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, you can keep on using github_changelog_generator, even if you can&#39;t get the latest version of Ruby installed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Windows: 1.14.x wants to create a file on an invalid path. Why?&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Windows: &lt;a href=&#34;https://github.com/github-changelog-generator/github-changelog-generator/issues/458&#34;&gt;v1.14.0 introduced a bug where it attempts to create /tmp/github_changelog-logger.log... which isn&#39;t a valid path on Windows and thus fails&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Workaround: Create a &lt;code&gt;C:\tmp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Would you like to contribute to this project? &lt;a href=&#34;https://raw.githubusercontent.com/github-changelog-generator/github-changelog-generator/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; has all the details on how to do that.&lt;/p&gt; &#xA;&lt;h2&gt;Contact us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/github-changelog-generator/chat?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;Join the chat at gitter : github-changelog-generator&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GitHub Changelog Generator is released under the &lt;a href=&#34;http://www.opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chatwoot/chatwoot</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/chatwoot/chatwoot</id>
    <link href="https://github.com/chatwoot/chatwoot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source customer engagement suite, an alternative to Intercom, Zendesk, Salesforce Service Cloud etc. 🔥💬&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://s3.us-west-2.amazonaws.com/gh-assets.chatwoot.com/brand.svg?sanitize=true&#34; alt=&#34;Woot-logo&#34; width=&#34;240&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;Customer engagement suite, an open-source alternative to Intercom, Zendesk, Salesforce Service Cloud etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&#34; alt=&#34;Deploy to Heroku&#34;&gt; &lt;img width=&#34;150&#34; alt=&#34;Deploy&#34; src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt; &lt;img width=&#34;200&#34; alt=&#34;Deploy to DO&#34; src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://codeclimate.com/github/chatwoot/chatwoot/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/80f9e1a7c72d186289ad/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/circleci/build/github/chatwoot/chatwoot&#34; alt=&#34;CircleCI Badge&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/chatwoot/chatwoot/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/chatwoot/chatwoot&#34; alt=&#34;Docker Pull Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/chatwoot/chatwoot/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/chatwoot/chatwoot&#34; alt=&#34;Docker Build Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/chatwoot/chatwoot&#34; alt=&#34;Commits-per-month&#34;&gt; &lt;a title=&#34;Crowdin&#34; target=&#34;_self&#34; href=&#34;https://chatwoot.crowdin.com/chatwoot&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/e/37ced7eba411064bd792feb3b7a28b16/localized.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/cJXdrwS&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/647412545203994635&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huntr.dev/bounties/disclose&#34;&gt;&lt;img src=&#34;https://cdn.huntr.dev/huntr_security_badge_mono.svg?sanitize=true&#34; alt=&#34;Huntr&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://status.chatwoot.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fuptime.json&#34; alt=&#34;uptime&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://status.chatwoot.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fresponse-time.json&#34; alt=&#34;response time&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;img src=&#34;https://chatwoot-public-assets.s3.amazonaws.com/github/screenshot.png&#34; width=&#34;100%&#34; alt=&#34;Chat dashboard&#34;&gt; &#xA;&lt;p&gt;Chatwoot is an open-source, self-hosted customer engagement suite. Chatwoot lets you view and manage your customer data, communicate with them irrespective of which medium they use, and re-engage them based on their profile.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Chatwoot supports the following conversation channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: Talk to your customers using our live chat widget and make use of our SDK to identify a user and provide contextual support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Facebook&lt;/strong&gt;: Connect your Facebook pages and start replying to the direct messages to your page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instagram&lt;/strong&gt;: Connect your Instagram profile and start replying to the direct messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: Connect your Twitter profiles and reply to direct messages or the tweets where you are mentioned.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Telegram&lt;/strong&gt;: Connect your Telegram bot and reply to your customers right from a single dashboard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WhatsApp&lt;/strong&gt;: Connect your WhatsApp business account and manage the conversation in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Line&lt;/strong&gt;: Connect your Line account and manage the conversations in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SMS&lt;/strong&gt;: Connect your Twilio SMS account and reply to the SMS queries in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Channel&lt;/strong&gt;: Build custom communication channels using our API channel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt;: Forward all your email queries to Chatwoot and view it in our integrated dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And more.&lt;/p&gt; &#xA;&lt;p&gt;Other features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CRM&lt;/strong&gt;: Save all your customer information right inside Chatwoot, use contact notes to log emails, phone calls, or meeting notes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom Attributes&lt;/strong&gt;: Define custom attribute attributes to store information about a contact or a conversation and extend the product to match your workflow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shared multi-brand inboxes&lt;/strong&gt;: Manage multiple brands or pages using a shared inbox.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Private notes&lt;/strong&gt;: Use @mentions and private notes to communicate internally about a conversation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Canned responses (Saved replies)&lt;/strong&gt;: Improve the response rate by adding saved replies for frequently asked questions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversation Labels&lt;/strong&gt;: Use conversation labels to create custom workflows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto assignment&lt;/strong&gt;: Chatwoot intelligently assigns a ticket to the agents who have access to the inbox depending on their availability and load.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversation continuity&lt;/strong&gt;: If the user has provided an email address through the chat widget, Chatwoot will send an email to the customer under the agent name so that the user can continue the conversation over the email.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-lingual support&lt;/strong&gt;: Chatwoot supports 10+ languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful API &amp;amp; Webhooks&lt;/strong&gt;: Extend the capability of the software using Chatwoot’s webhooks and APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt;: Chatwoot natively integrates with Slack right now. Manage your conversations in Slack without logging into the dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation is available at &lt;a href=&#34;https://www.chatwoot.com/help-center&#34;&gt;chatwoot.com/help-center&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translation process&lt;/h2&gt; &#xA;&lt;p&gt;The translation process for Chatwoot web and mobile app is managed at &lt;a href=&#34;https://translate.chatwoot.com&#34;&gt;https://translate.chatwoot.com&lt;/a&gt; using Crowdin. Please read the &lt;a href=&#34;https://www.chatwoot.com/docs/contributing/translating-chatwoot-to-your-language&#34;&gt;translation guide&lt;/a&gt; for contributing to Chatwoot.&lt;/p&gt; &#xA;&lt;h2&gt;Branching model&lt;/h2&gt; &#xA;&lt;p&gt;We use the &lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;git-flow&lt;/a&gt; branching model. The base branch is &lt;code&gt;develop&lt;/code&gt;. If you are looking for a stable version, please use the &lt;code&gt;master&lt;/code&gt; or tags labelled as &lt;code&gt;v1.x.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;h3&gt;Heroku one-click deploy&lt;/h3&gt; &#xA;&lt;p&gt;Deploying Chatwoot to Heroku is a breeze. It&#39;s as simple as clicking this button:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow this &lt;a href=&#34;https://www.chatwoot.com/docs/environment-variables&#34;&gt;link&lt;/a&gt; to understand setting the correct environment variables for the app to work with all the features. There might be breakages if you do not set the relevant environment variables.&lt;/p&gt; &#xA;&lt;h3&gt;DigitalOcean 1-Click Kubernetes deployment&lt;/h3&gt; &#xA;&lt;p&gt;Chatwoot now supports 1-Click deployment to DigitalOcean as a kubernetes app.&lt;/p&gt; &#xA;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt; &lt;img width=&#34;200&#34; alt=&#34;Deploy to DO&#34; src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Other deployment options&lt;/h3&gt; &#xA;&lt;p&gt;For other supported options, checkout our &lt;a href=&#34;https://chatwoot.com/deploy&#34;&gt;deployment page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Looking to report a vulnerability? Please refer our &lt;a href=&#34;https://raw.githubusercontent.com/chatwoot/chatwoot/develop/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Community? Questions? Support ?&lt;/h2&gt; &#xA;&lt;p&gt;If you need help or just want to hang out, come, say hi on our &lt;a href=&#34;https://discord.gg/cJXdrwS&#34;&gt;Discord&lt;/a&gt; server.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to all these &lt;a href=&#34;https://www.chatwoot.com/docs/contributors&#34;&gt;wonderful people&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chatwoot/chatwoot/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/chatwoot/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Chatwoot&lt;/em&gt; © 2017-2022, Chatwoot Inc - Released under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fluent/fluentd</title>
    <updated>2022-06-01T01:33:35Z</updated>
    <id>tag:github.com,2022-06-01:/fluent/fluentd</id>
    <link href="https://github.com/fluent/fluentd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fluentd: Unified Logging Layer (project under CNCF)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fluentd: Open-Source Log Collector&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluent/fluentd/actions/workflows/linux-test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/fluent/fluentd/actions/workflows/linux-test.yaml/badge.svg?branch=master&#34; alt=&#34;Testing on Ubuntu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fluent/fluentd/actions/workflows/windows-test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/fluent/fluentd/actions/workflows/windows-test.yaml/badge.svg?branch=master&#34; alt=&#34;Testing on Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fluent/fluentd/actions/workflows/macos-test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/fluent/fluentd/actions/workflows/macos-test.yaml/badge.svg?branch=master&#34; alt=&#34;Testing on macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.drone.io/fluent/fluentd&#34;&gt;&lt;img src=&#34;https://cloud.drone.io/api/badges/fluent/fluentd/status.svg?branch=master&#34; alt=&#34;Testing on Arm64&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/fluent/fluentd&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/fluent/fluentd/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/1189&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/1189/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.fluentd.org/&#34;&gt;Fluentd&lt;/a&gt; collects events from various data sources and writes them to files, RDBMS, NoSQL, IaaS, SaaS, Hadoop and so on. Fluentd helps you unify your logging infrastructure (Learn more about the &lt;a href=&#34;https://www.fluentd.org/blog/unified-logging-layer&#34;&gt;Unified Logging Layer&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://www.fluentd.org/images/fluentd-architecture.png&#34; width=&#34;500px&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install fluentd&#xA;$ fluentd -s conf&#xA;$ fluentd -c conf/fluent.conf &amp;amp;&#xA;$ echo &#39;{&#34;json&#34;:&#34;message&#34;}&#39; | fluent-cat debug.test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Branch&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;master: For v1 development.&lt;/li&gt; &#xA; &lt;li&gt;v0.12: For v0.12. This is deprecated version. we already stopped supporting (See &lt;a href=&#34;https://www.fluentd.org/blog/drop-schedule-announcement-in-2019&#34;&gt;https://www.fluentd.org/blog/drop-schedule-announcement-in-2019&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 2.4 or later&lt;/li&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;git&lt;/code&gt; should be in &lt;code&gt;PATH&lt;/code&gt;. On Windows, you can use &lt;code&gt;Github for Windows&lt;/code&gt; and &lt;code&gt;GitShell&lt;/code&gt; for easy setup.&lt;/p&gt; &#xA;&lt;h3&gt;Install dependent gems&lt;/h3&gt; &#xA;&lt;p&gt;Use bundler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install bundler&#xA;$ bundle install --path vendor/bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run test&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run specified test via &lt;code&gt;TEST&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec rake test TEST=test/test_specified_path.rb&#xA;$ bundle exec rake test TEST=test/test_*.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More Information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://www.fluentd.org/&#34;&gt;https://www.fluentd.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation: &lt;a href=&#34;https://docs.fluentd.org/&#34;&gt;https://docs.fluentd.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Project repository: &lt;a href=&#34;https://github.com/fluent&#34;&gt;https://github.com/fluent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discussion: &lt;a href=&#34;https://github.com/fluent/fluentd/discussions&#34;&gt;https://github.com/fluent/fluentd/discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slack / Community: &lt;a href=&#34;https://slack.fluentd.org&#34;&gt;https://slack.fluentd.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Newsletters: &lt;a href=&#34;https://www.fluentd.org/newsletter&#34;&gt;https://www.fluentd.org/newsletter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Author: &lt;a href=&#34;https://github.com/frsyuki&#34;&gt;Sadayuki Furuhashi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copyright: 2011-2021 Fluentd Authors&lt;/li&gt; &#xA; &lt;li&gt;License: Apache License, Version 2.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;A third party security audit was performed by Cure53, you can see the full report &lt;a href=&#34;https://raw.githubusercontent.com/fluent/fluentd/master/docs/SECURITY_AUDIT.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/fluent/fluentd/master/SECURITY.md&#34;&gt;SECURITY&lt;/a&gt; to contact us about vulnerability.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors:&lt;/h2&gt; &#xA;&lt;p&gt;Patches contributed by &lt;a href=&#34;https://github.com/fluent/fluentd/contributors&#34;&gt;great developers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluent/fluentd&#34;&gt;&lt;img src=&#34;https://ga-beacon.appspot.com/UA-24890265-6/fluent/fluentd&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>