<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-11T01:40:30Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rails/execjs</title>
    <updated>2023-09-11T01:40:30Z</updated>
    <id>tag:github.com,2023-09-11:/rails/execjs</id>
    <link href="https://github.com/rails/execjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run JavaScript code from Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ExecJS&lt;/h1&gt; &#xA;&lt;p&gt;ExecJS lets you run JavaScript code from Ruby. It automatically picks the best runtime available to evaluate your JavaScript program, then returns the result to you as a Ruby object.&lt;/p&gt; &#xA;&lt;p&gt;ExecJS supports these runtimes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cowboyd/therubyrhino&#34;&gt;therubyrhino&lt;/a&gt; - Mozilla Rhino embedded within JRuby&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/judofyr/duktape.rb&#34;&gt;Duktape.rb&lt;/a&gt; - Duktape JavaScript interpreter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Apple JavaScriptCore - Included with Mac OS X&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/9bbdkx3k.aspx&#34;&gt;Microsoft Windows Script Host&lt;/a&gt; (JScript)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.google.com/p/v8/&#34;&gt;Google V8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubyjs/mini_racer&#34;&gt;mini_racer&lt;/a&gt; - Google V8 embedded within Ruby&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.graalvm.org/javascript/&#34;&gt;GraalVM JavaScript&lt;/a&gt; - used on TruffleRuby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A short example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;execjs&#34;&#xA;ExecJS.eval &#34;&#39;red yellow blue&#39;.split(&#39; &#39;)&#34;&#xA;# =&amp;gt; [&#34;red&#34;, &#34;yellow&#34;, &#34;blue&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A longer example, demonstrating how to invoke the CoffeeScript compiler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;execjs&#34;&#xA;require &#34;open-uri&#34;&#xA;source = open(&#34;http://coffeescript.org/extras/coffee-script.js&#34;).read&#xA;&#xA;context = ExecJS.compile(source)&#xA;context.call(&#34;CoffeeScript.compile&#34;, &#34;square = (x) -&amp;gt; x * x&#34;, bare: true)&#xA;# =&amp;gt; &#34;var square;\nsquare = function(x) {\n  return x * x;\n};&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install execjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why can&#39;t I use CommonJS &lt;code&gt;require()&lt;/code&gt; inside ExecJS?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;ExecJS provides a lowest common denominator interface to any JavaScript runtime. Use ExecJS when it doesn&#39;t matter which JavaScript interpreter your code runs in. If you want to access the Node API, you should check another library like &lt;a href=&#34;https://github.com/cowboyd/commonjs.rb&#34;&gt;commonjs.rb&lt;/a&gt; designed to provide a consistent interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why can&#39;t I use &lt;code&gt;setTimeout&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For similar reasons as modules, not all runtimes guarantee a full JavaScript event loop. So &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt; and other timers are not defined.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why can&#39;t I use ES5 features?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some runtimes like Node will implement many of the latest ES5 features. However older stock runtimes like JSC on OSX and JScript on Windows may not. You should only count on ES3 features being available. Prefer feature checking these APIs rather than hard coding support for specific runtimes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Can ExecJS be used to sandbox scripts?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;No, ExecJS shouldn&#39;t be used for any security related sandboxing. Since runtimes are automatically detected, each runtime has different sandboxing properties. You shouldn&#39;t use &lt;code&gt;ExecJS.eval&lt;/code&gt; on any inputs you wouldn&#39;t feel comfortable Ruby &lt;code&gt;eval()&lt;/code&gt;ing.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to ExecJS&lt;/h2&gt; &#xA;&lt;p&gt;ExecJS is work of dozens of contributors. You&#39;re encouraged to submit pull requests, propose features and discuss issues.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rails/execjs/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ExecJS is released under the &lt;a href=&#34;https://raw.githubusercontent.com/rails/execjs/master/MIT-LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jlecour/munin_resque</title>
    <updated>2023-09-11T01:40:30Z</updated>
    <id>tag:github.com,2023-09-11:/jlecour/munin_resque</id>
    <link href="https://github.com/jlecour/munin_resque" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A few munin plugins for Resque, written in Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;You can install those plugins wherever you want.&lt;/p&gt; &#xA;&lt;p&gt;On my Debian systems, Munin plugins are stored in &lt;code&gt;/usr/share/munin/plugins&lt;/code&gt;. I&#39;ve installed those in my home directory and it works well.&lt;/p&gt; &#xA;&lt;h1&gt;Plugins&lt;/h1&gt; &#xA;&lt;p&gt;At the top of the plugins, the load path is altered to search for helper files in the same directory as the plugin, and in the standard plugin directory (if the &lt;code&gt;MUNIN_LIBDIR&lt;/code&gt; environment variable is set).&lt;/p&gt; &#xA;&lt;h2&gt;resque_queues&lt;/h2&gt; &#xA;&lt;p&gt;A graph with a line for the total number of pending jobs, and a line for each queue.&lt;/p&gt; &#xA;&lt;h2&gt;resque_workers&lt;/h2&gt; &#xA;&lt;p&gt;A graph with the total number of workers and the number of active (busy) workers.&lt;/p&gt; &#xA;&lt;p&gt;There are 2 levels :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;warning = 1.5 x workers&lt;/li&gt; &#xA; &lt;li&gt;critical = 3 x workers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the moment, those thresholds are not configurable in plugin settings.&lt;/p&gt; &#xA;&lt;h1&gt;Helper files&lt;/h1&gt; &#xA;&lt;h2&gt;plugin.rb&lt;/h2&gt; &#xA;&lt;p&gt;This file has the same purpose as &lt;code&gt;plugin.sh&lt;/code&gt; but for Ruby scripts.&lt;/p&gt; &#xA;&lt;h2&gt;resque.rb&lt;/h2&gt; &#xA;&lt;p&gt;It provides a simple &lt;code&gt;stats&lt;/code&gt; method, that returns a nested hash from &lt;code&gt;Resque::Server&lt;/code&gt; web app.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>oven-sh/homebrew-bun</title>
    <updated>2023-09-11T01:40:30Z</updated>
    <id>tag:github.com,2023-09-11:/oven-sh/homebrew-bun</id>
    <link href="https://github.com/oven-sh/homebrew-bun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Homebrew tap for Bun&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;homebrew-bun&lt;/h1&gt; &#xA;&lt;p&gt;This is the official &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; tap for &lt;a href=&#34;https://bun.sh/&#34;&gt;Bun&lt;/a&gt;. You can use it to install Bun on MacOS and Linux using Homebrew.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;To install Bun with Homebrew, aka. &lt;code&gt;brew&lt;/code&gt;, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap oven-sh/bun&#xA;brew install bun&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to install a specific release, you can include the version in the command. You can also view the list of releases &lt;a href=&#34;https://github.com/oven-sh/bun/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install bun@1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrade&lt;/h2&gt; &#xA;&lt;p&gt;To upgrade, it is recommended that you run the &lt;code&gt;brew upgrade&lt;/code&gt; command. However, you can also run &lt;code&gt;bun upgrade&lt;/code&gt; as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew upgrade bun&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;If you want to uninstall Bun, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew uninstall bun&#xA;brew untap oven-sh/bun&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>