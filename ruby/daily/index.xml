<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-20T01:32:04Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jnunemaker/httparty</title>
    <updated>2022-07-20T01:32:04Z</updated>
    <id>tag:github.com,2022-07-20:/jnunemaker/httparty</id>
    <link href="https://github.com/jnunemaker/httparty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üéâ Makes http fun again!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;httparty&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/jnunemaker/httparty&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jnunemaker/httparty.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Makes http fun again! Ain&#39;t no party like a httparty, because a httparty don&#39;t stop.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install httparty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 2.3.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;multi_xml&lt;/li&gt; &#xA; &lt;li&gt;You like to party!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Use the class methods to get down to business quickly&#xA;response = HTTParty.get(&#39;http://api.stackexchange.com/2.2/questions?site=stackoverflow&#39;)&#xA;&#xA;puts response.body, response.code, response.message, response.headers.inspect&#xA;&#xA;# Or wrap things up in your own class&#xA;class StackExchange&#xA;  include HTTParty&#xA;  base_uri &#39;api.stackexchange.com&#39;&#xA;&#xA;  def initialize(service, page)&#xA;    @options = { query: { site: service, page: page } }&#xA;  end&#xA;&#xA;  def questions&#xA;    self.class.get(&#34;/2.2/questions&#34;, @options)&#xA;  end&#xA;&#xA;  def users&#xA;    self.class.get(&#34;/2.2/users&#34;, @options)&#xA;  end&#xA;end&#xA;&#xA;stack_exchange = StackExchange.new(&#34;stackoverflow&#34;, 1)&#xA;puts stack_exchange.questions&#xA;puts stack_exchange.users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://github.com/jnunemaker/httparty/tree/master/examples&#34;&gt;examples directory&lt;/a&gt; for even more goodies.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Interface&lt;/h2&gt; &#xA;&lt;p&gt;httparty also includes the executable &lt;code&gt;httparty&lt;/code&gt; which can be used to query web services and examine the resulting output. By default it will output the response as a pretty-printed Ruby object (useful for grokking the structure of output). This can also be overridden to output formatted XML or JSON. Execute &lt;code&gt;httparty --help&lt;/code&gt; for all the options. Below is an example of how easy it is.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;httparty &#34;https://api.stackexchange.com/2.2/questions?site=stackoverflow&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help and Docs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jnunemaker/httparty/tree/master/docs&#34;&gt;Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jnunemaker/httparty/discussions&#34;&gt;https://github.com/jnunemaker/httparty/discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rubydoc.info/github/jnunemaker/httparty&#34;&gt;https://www.rubydoc.info/github/jnunemaker/httparty&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the project.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bundle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bundle exec rake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make your feature addition or bug fix.&lt;/li&gt; &#xA; &lt;li&gt;Add tests for it. This is important so I don&#39;t break it in a future version unintentionally.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bundle exec rake&lt;/code&gt; (No, REALLY :))&lt;/li&gt; &#xA; &lt;li&gt;Commit, do not mess with rakefile, version, or history. (if you want to have your own version, that is fine but bump version in a commit by itself in another branch so I can ignore when I pull)&lt;/li&gt; &#xA; &lt;li&gt;Send me a pull request. Bonus points for topic branches.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/packwerk</title>
    <updated>2022-07-20T01:32:04Z</updated>
    <id>tag:github.com,2022-07-20:/Shopify/packwerk</id>
    <link href="https://github.com/Shopify/packwerk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Good things come in small packages.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Packwerk &lt;a href=&#34;https://github.com/Shopify/packwerk/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/Shopify/packwerk/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;‚ö†Ô∏è While Shopify is actively using &lt;code&gt;packwerk&lt;/code&gt;, we consider it feature complete.&lt;/h3&gt; &#xA;&lt;p&gt;We are keeping &lt;code&gt;packwerk&lt;/code&gt; compatible with current versions of Ruby and Rails, but will accept feature requests only in rare cases. Please submit bug fixes though!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;I know who you are and because of that I know what you do.&#34; This knowledge is a dependency that raises the cost of change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;-- &lt;em&gt;Sandi Metz, Practical Object-Oriented Design in Ruby&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Packwerk is a Ruby gem used to enforce boundaries and modularize Rails applications.&lt;/p&gt; &#xA;&lt;p&gt;Packwerk can be used to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Combine groups of files into packages&lt;/li&gt; &#xA; &lt;li&gt;Define package-level constant visibility (i.e. have publicly accessible constants)&lt;/li&gt; &#xA; &lt;li&gt;Enforce privacy (inbound) and dependency (outbound) boundaries between packages&lt;/li&gt; &#xA; &lt;li&gt;Help existing codebases to become more modular without obstructing development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Packwerk needs &lt;a href=&#34;https://github.com/fxn/zeitwerk&#34;&gt;Zeitwerk&lt;/a&gt; enabled, which comes with Rails 6.&lt;/p&gt; &#xA;&lt;p&gt;Packwerk supports MRI versions 2.6 and above.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Watch a &lt;a href=&#34;https://www.youtube.com/watch?v=NwqlyBAxVpQ&amp;amp;feature=youtu.be&#34;&gt;1-minute video demo&lt;/a&gt; on how Packwerk works.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NwqlyBAxVpQ&amp;amp;feature=youtu.be&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Shopify/packwerk/main/static/packwerk-check-demo.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add this line to your application&#39;s Gemfile:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;packwerk&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install the gem&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install packwerk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bundle binstub packwerk&lt;/code&gt; to generate the binstub&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/packwerk init&lt;/code&gt; to generate the configuration files&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/packwerk/main/USAGE.md&#34;&gt;USAGE.md&lt;/a&gt; for usage once Packwerk is installed on your project.&lt;/p&gt; &#xA;&lt;h2&gt;Pronunciation&lt;/h2&gt; &#xA;&lt;p&gt;&#34;Packwerk&#34; is pronounced &lt;a href=&#34;https://cdn.shopify.com/s/files/1/0258/7469/files/packwerk.mp3&#34;&gt;[Ààpakv…õ Åk]&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;p&gt;Various third parties have built tooling on top of packwerk. Here&#39;s a selection of some that might prove useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bellroy/graphwerk&#34;&gt;https://github.com/bellroy/graphwerk&lt;/a&gt; draws a graph of your package dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gusto/packwerk-vscode&#34;&gt;https://github.com/Gusto/packwerk-vscode&lt;/a&gt; integrates packwerk into Visual Studio Code so you can see violations right in your editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gusto/stimpack&#34;&gt;https://github.com/Gusto/stimpack&lt;/a&gt; sets up Rails autoloading, as well as &lt;code&gt;rspec&lt;/code&gt; and &lt;code&gt;FactoryBot&lt;/code&gt; integration, for packages arranged in a flat list. Stimpack is quite convenient, but for autoloading we recommend to use &lt;code&gt;Rails::Engine&lt;/code&gt;s instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BigRails/danger-packwerk&#34;&gt;https://github.com/BigRails/danger-packwerk&lt;/a&gt; integrates packwerk with &lt;a href=&#34;https://danger.systems&#34;&gt;danger.systems&lt;/a&gt; to provide packwerk feedback as Github inline PR comments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake test&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;With Ruby being a very dynamic language, static analysis tools such as Packwerk are bound to have limitations. To reduce the impact of those limitations, Packwerk is designed to avoid false positives (reporting references as violations that are actually fine) at any cost, and we pay the cost by accepting a small number of false negatives (failing to report actual violations).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Packwerk can only resolve references to constants that are defined in code loaded by the application&#39;s Zeitwerk autoloader. This is because we rely on &lt;a href=&#34;https://github.com/fxn/zeitwerk#file-structure&#34;&gt;Zeitwerk&#39;s conventions&lt;/a&gt;, and code that is loaded differently (like through an explicit &lt;code&gt;require&lt;/code&gt;) often doesn&#39;t follow these conventions.&lt;/li&gt; &#xA; &lt;li&gt;Method calls and objects passed around the application are completely ignored. Packwerk only cares about static constant references. That said, if you want Packwerk to analyze parameters of a method, you can use &lt;a href=&#34;https://sorbet.org/&#34;&gt;Sorbet&lt;/a&gt; to define a type signature. Sorbet signatures are pure Ruby code and use constants to express types, and Packwerk understands that.&lt;/li&gt; &#xA; &lt;li&gt;Support for custom Zeitwerk configuration is limited. If &lt;a href=&#34;https://guides.rubyonrails.org/autoloading_and_reloading_constants.html#customizing-inflections&#34;&gt;custom ActiveSupport inflections&lt;/a&gt; are used, Packwerk will understand that and everything is fine. However, if Zeitwerk is directly configured with &lt;a href=&#34;https://github.com/fxn/zeitwerk#inflection&#34;&gt;custom Zeitwerk inflections&lt;/a&gt; or to &lt;a href=&#34;https://github.com/fxn/zeitwerk#collapsing-directories&#34;&gt;collapse directories&lt;/a&gt;, &lt;em&gt;Packwerk will get confused and produce false positives&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/Shopify/packwerk&#34;&gt;https://github.com/Shopify/packwerk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read and follow the guidelines in &lt;a href=&#34;https://github.com/Shopify/packwerk/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/cli-ui</title>
    <updated>2022-07-20T01:32:04Z</updated>
    <id>tag:github.com,2022-07-20:/Shopify/cli-ui</id>
    <link href="https://github.com/Shopify/cli-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terminal user interface library&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;CLI UI&lt;/h2&gt; &#xA;&lt;p&gt;CLI UI is a small framework for generating nice command-line user interfaces&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/Shopify/cli-ui/master/CLI/UI&#34;&gt;Master Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/gems/cli-ui/&#34;&gt;Documentation of the Rubygems version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubygems.org/gems/cli-ui&#34;&gt;Rubygems&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install cli-ui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or add the following to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;cli-ui&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your code, simply add a &lt;code&gt;require &#39;cli/ui&#39;&lt;/code&gt;. Most options assume &lt;code&gt;CLI::UI::StdoutRouter.enable&lt;/code&gt; has been called.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;This may not be an exhaustive list. Please check our &lt;a href=&#34;http://www.rubydoc.info/github/Shopify/cli-ui/main/CLI/UI&#34;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Nested framing&lt;/h3&gt; &#xA;&lt;p&gt;To handle content flow (see example below)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CLI::UI::StdoutRouter.enable&#xA;CLI::UI::Frame.open(&#39;Frame 1&#39;) do&#xA;  CLI::UI::Frame.open(&#39;Frame 2&#39;) { puts &#34;inside frame 2&#34; }&#xA;  puts &#34;inside frame 1&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3074765/33799861-cb5dcb5c-dd01-11e7-977e-6fad38cee08c.png&#34; alt=&#34;Nested Framing&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Interactive Prompts&lt;/h3&gt; &#xA;&lt;p&gt;Prompt user with options and ask them to choose. Can answer using arrow keys, vim bindings (&lt;code&gt;j&lt;/code&gt;/&lt;code&gt;k&lt;/code&gt;), or numbers (or y/n for yes/no questions).&lt;/p&gt; &#xA;&lt;p&gt;For large numbers of options, using &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt;, or &lt;code&gt;G&lt;/code&gt; will toggle &#34;line select&#34; mode which allows numbers greater than 9 to be typed and &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;/&lt;/code&gt; will allow the user to filter options using a free-form text input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CLI::UI.ask(&#39;What language/framework do you use?&#39;, options: %w(rails go ruby python))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can also assign callbacks to each option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CLI::UI::Prompt.ask(&#39;What language/framework do you use?&#39;) do |handler|&#xA;  handler.option(&#39;rails&#39;)  { |selection| selection }&#xA;  handler.option(&#39;go&#39;)     { |selection| selection }&#xA;  handler.option(&#39;ruby&#39;)   { |selection| selection }&#xA;  handler.option(&#39;python&#39;) { |selection| selection }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Note that the two examples provided above are identical in functionality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3074765/33797984-0ebb5e64-dcdf-11e7-9e7e-7204f279cece.gif&#34; alt=&#34;Interactive Prompt&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Free form text prompts&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CLI::UI.ask(&#39;Is CLI UI Awesome?&#39;, default: &#39;It is great!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3074765/33799822-47f23302-dd01-11e7-82f3-9072a5a5f611.png&#34; alt=&#34;Free form text prompt&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Spinner groups&lt;/h3&gt; &#xA;&lt;p&gt;Handle many multi-threaded processes while suppressing output unless there is an issue. Can update title to show state.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CLI::UI::SpinGroup.new do |spin_group|&#xA;  spin_group.add(&#39;Title&#39;)   { |spinner| sleep 3.0 }&#xA;  spin_group.add(&#39;Title 2&#39;) { |spinner| sleep 3.0; spinner.update_title(&#39;New Title&#39;); sleep 3.0 }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3074765/33798295-d94fd822-dce3-11e7-819b-43e5502d490e.gif&#34; alt=&#34;Spinner Group&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Text Color formatting&lt;/h3&gt; &#xA;&lt;p&gt;e.g. &lt;code&gt;{{red:Red}} {{green:Green}}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts CLI::UI.fmt &#34;{{red:Red}} {{green:Green}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3074765/33799827-6d0721a2-dd01-11e7-9ab5-c3d455264afe.png&#34; alt=&#34;Text Format&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Symbol/Glyph Formatting&lt;/h3&gt; &#xA;&lt;p&gt;e.g. &lt;code&gt;{{*}}&lt;/code&gt; =&amp;gt; a yellow ‚≠ë&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts CLI::UI.fmt &#34;{{*}} {{v}} {{?}} {{x}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3074765/33799847-9ec03fd0-dd01-11e7-93f7-5f5cc540e61e.png&#34; alt=&#34;Symbol Formatting&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Status Widget&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CLI::UI::Spinner.spin(&#34;building packages: {{@widget/status:1:2:3:4}}&#34;) do |spinner|&#xA;  # spinner.update_title(...)&#xA;  sleep(3)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1284/61405142-11042580-a8a7-11e9-9885-46ba44c46358.gif&#34; alt=&#34;Status Widget&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Progress Bar&lt;/h3&gt; &#xA;&lt;p&gt;Show progress of a process or operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CLI::UI::Progress.progress do |bar|&#xA;  100.times do&#xA;    bar.tick&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3074765/33799794-cc4c940e-dd00-11e7-9bdc-90f77ec9167c.gif&#34; alt=&#34;Progress Bar&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Frame Styles&lt;/h3&gt; &#xA;&lt;p&gt;Modify the appearance of CLI::UI both globally and on an individual frame level.&lt;/p&gt; &#xA;&lt;p&gt;To set the default style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CLI::UI.frame_style = :box&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To style an individual frame:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CLI::UI.frame(&#39;New Style!&#39;, frame_style: :bracket) { puts &#39;It&#39;s pretty cool!&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default style - &lt;code&gt;:box&lt;/code&gt; - is what has been used up until now. The other style - &lt;code&gt;:bracket&lt;/code&gt; - looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CLI::UI.frame_style = :bracket&#xA;CLI::UI::StdoutRouter.enable&#xA;CLI::UI::Frame.open(&#39;Frame 1&#39;) do&#xA;  CLI::UI::Frame.open(&#39;Frame 2&#39;) { puts &#34;inside frame 2&#34; }&#xA;  puts &#34;inside frame 1&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/315948/65287373-9a82de80-db08-11e9-94fb-20f4b7561c07.png&#34; alt=&#34;Frame Style&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following code makes use of nested-framing, multi-threaded spinners, formatted text, and more.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;cli/ui&#39;&#xA;&#xA;CLI::UI::StdoutRouter.enable&#xA;&#xA;CLI::UI::Frame.open(&#39;{{*}} {{bold:a}}&#39;, color: :green) do&#xA;  CLI::UI::Frame.open(&#39;{{i}} b&#39;, color: :magenta) do&#xA;    CLI::UI::Frame.open(&#39;{{?}} c&#39;, color: :cyan) do&#xA;      CLI::UI::SpinGroup.new do |sg|&#xA;        sg.add(&#39;wow&#39;) do |spinner|&#xA;          sleep(2.5)&#xA;          spinner.update_title(&#39;second round!&#39;)&#xA;          sleep (1.0)&#xA;        end&#xA;        sg.add(&#39;such spin&#39;) { sleep(1.6) }&#xA;        sg.add(&#39;many glyph&#39;) { sleep(2.0) }&#xA;      end&#xA;    end&#xA;  end&#xA;  CLI::UI::Frame.divider(&#39;{{v}} lol&#39;)&#xA;  puts CLI::UI.fmt &#39;{{info:words}} {{red:oh no!}} {{green:success!}}&#39;&#xA;  CLI::UI::SpinGroup.new do |sg|&#xA;    sg.add(&#39;more spins&#39;) { sleep(0.5) ; raise &#39;oh no&#39; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3074765/33797758-7a54c7cc-dcdb-11e7-918e-a47c9689f068.gif&#34; alt=&#34;Example Output&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run tests using &lt;code&gt;bundle exec rake test&lt;/code&gt;. All code should be tested.&lt;/li&gt; &#xA; &lt;li&gt;No code, outside of development and tests needs, should use dependencies. This is a self contained library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/Shopify/cli-ui&#34;&gt;https://github.com/Shopify/cli-ui&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code is available as open source under the terms of the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>