<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-27T01:34:49Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rubysec/ruby-advisory-db</title>
    <updated>2022-06-27T01:34:49Z</updated>
    <id>tag:github.com,2022-06-27:/rubysec/ruby-advisory-db</id>
    <link href="https://github.com/rubysec/ruby-advisory-db" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A database of vulnerable Ruby Gems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby Advisory Database&lt;/h1&gt; &#xA;&lt;p&gt;The Ruby Advisory Database is a community effort to compile all security advisories that are relevant to Ruby libraries.&lt;/p&gt; &#xA;&lt;p&gt;You can check your own Gemfile.locks against this database by using &lt;a href=&#34;https://github.com/rubysec/bundler-audit&#34;&gt;bundler-audit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support Ruby security!&lt;/h2&gt; &#xA;&lt;p&gt;Do you know about a vulnerability that isn&#39;t listed in this database? Open an issue or submit a PR.&lt;/p&gt; &#xA;&lt;h2&gt;Directory Structure&lt;/h2&gt; &#xA;&lt;p&gt;The database is a list of directories that match the names of Ruby libraries on &lt;a href=&#34;https://rubygems.org/&#34;&gt;rubygems.org&lt;/a&gt;. Within each directory are one or more advisory files for the Ruby library. These advisory files are named using the advisories&#39; &lt;a href=&#34;https://cve.mitre.org/&#34;&gt;CVE&lt;/a&gt; identifier number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gems/:&#xA;  actionpack/:&#xA;    CVE-2014-0130.yml  CVE-2014-7818.yml  CVE-2014-7829.yml  CVE-2015-7576.yml&#xA;    CVE-2015-7581.yml  CVE-2016-0751.yml  CVE-2016-0752.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Format&lt;/h2&gt; &#xA;&lt;p&gt;Each advisory file contains the advisory information in &lt;a href=&#34;http://www.yaml.org/&#34;&gt;YAML&lt;/a&gt; format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;gem: examplegem&#xA;cve: 2013-0156&#xA;date: 2013-05-01&#xA;url: https://github.com/rubysec/ruby-advisory-db/issues/123456&#xA;title: |&#xA;  Ruby on Rails params_parser.rb Action Pack Type Casting Parameter Parsing&#xA;  Remote Code Execution&#xA;&#xA;description: |&#xA;  Ruby on Rails contains a flaw in params_parser.rb of the Action Pack.&#xA;  The issue is triggered when a type casting error occurs during the parsing&#xA;  of parameters. This may allow a remote attacker to potentially execute&#xA;  arbitrary code.&#xA;&#xA;cvss_v2: 10.0&#xA;cvss_v3: 9.8&#xA;&#xA;patched_versions:&#xA;  - ~&amp;gt; 2.3.15&#xA;  - ~&amp;gt; 3.0.19&#xA;  - ~&amp;gt; 3.1.10&#xA;  - &#34;&amp;gt;= 3.2.11&#34;&#xA;unaffected_versions:&#xA;  - ~&amp;gt; 2.4.3&#xA;&#xA;related:&#xA;  cve:&#xA;    - 2013-1234567&#xA;    - 2013-1234568&#xA;  url:&#xA;    - https://github.com/rubysec/ruby-advisory-db/issues/123457&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Schema&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gem&lt;/code&gt; [String] (required): Name of the affected gem.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;library&lt;/code&gt; [String] (optional): Name of the ruby library which the affected gem belongs to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;framework&lt;/code&gt; [String] (optional): Name of the framework which the affected gem belongs to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;platform&lt;/code&gt; [String] (optional): If this vulnerability is platform-specific, name of platform this vulnerability affects (e.g. jruby)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cve&lt;/code&gt; [String] (optional): Common Vulnerabilities and Exposures (CVE) ID.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;osvdb&lt;/code&gt; [Integer] (optional): Open Sourced Vulnerability Database (OSVDB) ID.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghsa&lt;/code&gt; [String] (optional): GitHub Security Advisory (GHSA) ID.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt; [String] (required): The URL to the full advisory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;title&lt;/code&gt; [String] (required): The title of the advisory or individual vulnerability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;date&lt;/code&gt; [Date] (required): The public disclosure date of the advisory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt; [String] (required): One or more paragraphs describing the vulnerability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cvss_v2&lt;/code&gt; [Float] (optional): The &lt;a href=&#34;https://www.first.org/cvss/v2/guide&#34;&gt;CVSSv2&lt;/a&gt; score for the vulnerability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cvss_v3&lt;/code&gt; [Float] (optional): The &lt;a href=&#34;https://www.first.org/cvss/user-guide&#34;&gt;CVSSv3&lt;/a&gt; score for the vulnerability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unaffected_versions&lt;/code&gt; [Array&amp;lt;String&amp;gt;] (optional): The version requirements for the unaffected versions of the Ruby library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;patched_versions&lt;/code&gt; [Array&amp;lt;String&amp;gt;] (optional): The version requirements for the patched versions of the Ruby library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;related&lt;/code&gt; [Hash&amp;lt;Array&amp;lt;String&amp;gt;&amp;gt;] (optional): Sometimes an advisory references many urls and other identifiers. Supported keys: &lt;code&gt;cve&lt;/code&gt;, &lt;code&gt;ghsa&lt;/code&gt;, &lt;code&gt;osvdb&lt;/code&gt;, and &lt;code&gt;url&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;notes&lt;/code&gt; [String] (optional): Internal notes regarding the vulnerability&#39;s inclusion in this database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Prior to submitting a pull request, run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub Advisory Sync&lt;/h3&gt; &#xA;&lt;p&gt;There is a script that will create initial yaml files for RubyGem advisories which are in the &lt;a href=&#34;https://developer.github.com/v4/object/securityadvisory/&#34;&gt;GitHub Security Advisory API&lt;/a&gt;, but are not already in this dataset. This script can be periodically run to ensure this repo has all the data that is present in the GitHub Advisory data.&lt;/p&gt; &#xA;&lt;p&gt;The GitHub Advisory API requires a token to access it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It can be a completely scopeless token (recommended); it does not require any permissions at all.&lt;/li&gt; &#xA; &lt;li&gt;Get yours at &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;https://github.com/settings/tokens&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run the GitHub Advisory sync, start by executing the rake task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GH_API_TOKEN=&amp;lt;your GitHub API Token&amp;gt; bundle exec rake sync_github_advisories&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The rake task will write yaml files for any missing advisories.&lt;/li&gt; &#xA; &lt;li&gt;Those files must be further edited. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fill in &lt;code&gt;cvss_v3&lt;/code&gt; field by following the CVE link and getting it from page&lt;/li&gt; &#xA;   &lt;li&gt;Fill in &lt;code&gt;patched_versions&lt;/code&gt; field, using the comments at the bottom of the file&lt;/li&gt; &#xA;   &lt;li&gt;Fill in &lt;code&gt;unaffected_versions&lt;/code&gt;, optional, if there are unaffected_versions&lt;/li&gt; &#xA;   &lt;li&gt;delete the GitHub data at the bottom of the yaml file&lt;/li&gt; &#xA;   &lt;li&gt;double check all the data, commit it, and make a PR &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;em&gt;The GitHub Advisory data is structured opposite of RubySec unfortunately: GitHub identifies version range which are vulnerable; RubySec identifies version ranges which are not vulnerable. This is why some manual work to translate is needed.&lt;/em&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/rubysec/ruby-advisory-db/raw/master/CONTRIBUTORS.md&#34;&gt;CONTRIBUTORS.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This database also includes data from the &lt;a href=&#34;http://www.osvdb.org/&#34;&gt;Open Sourced Vulnerability Database&lt;/a&gt; developed by the Open Security Foundation (OSF) and its contributors.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cloudfoundry/haproxy-boshrelease</title>
    <updated>2022-06-27T01:34:49Z</updated>
    <id>tag:github.com,2022-06-27:/cloudfoundry/haproxy-boshrelease</id>
    <link href="https://github.com/cloudfoundry/haproxy-boshrelease" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A BOSH release for haproxy (based on cf-release&#39;s haproxy job)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BOSH Release for haproxy&lt;/h1&gt; &#xA;&lt;p&gt;Questions? Pop in our &lt;a href=&#34;https://cloudfoundry.slack.com/messages/haproxy-boshrelease/&#34;&gt;slack channel&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;This BOSH release is an attempt to get a more customizable/secure haproxy release than what is provided in &lt;a href=&#34;https://github.com/cloudfoundry/cf-release&#34;&gt;cf-release&lt;/a&gt;. It allows users to blacklist internal-only domains, preventing potential Host header spoofing from allowing unauthorized access of internal APIs. It also allows for better control over haproxy&#39;s timeouts, for greater resiliency under heavy load.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To deploy this BOSH release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/cloudfoundry-community/haproxy-boshrelease.git&#xA;cd haproxy-boshrelease&#xA;&#xA;export BOSH_ENVIRONMENT=&amp;lt;alias&amp;gt;&#xA;export BOSH_DEPLOYMENT=haproxy&#xA;bosh2 deploy manifests/haproxy.yml \&#xA;  -v haproxy-backend-port=80 \&#xA;  -v &#34;haproxy-backend-servers=[10.10.10.10,10.10.10.11]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make alterations to the deployment you can use the &lt;code&gt;bosh2 deploy [-o operator-file.yml]&lt;/code&gt; flag to provide &lt;a href=&#34;https://bosh.io/docs/cli-ops-files.html&#34;&gt;operations files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternately you can build a manifest using &lt;code&gt;templates/make_manifest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can either use the templates + examples provided to merge this in with an existing CloudFoundry deployment, or create a new deployment using this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make_manifest &amp;lt;aws-ec2|warden&amp;gt; &amp;lt;comma-separated-list-of-router-servers&amp;gt; &amp;lt;additional_templates&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;make_manifest&lt;/code&gt; requires &lt;a href=&#34;https://github.com/geofffranks/spruce&#34;&gt;spruce v1.8.9&lt;/a&gt; or newer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Example for bare bones bosh-lite haproxy release on warden&#xA;templates/make_manifest warden 10.244.0.22&#xA;bosh deploy&#xA;&#xA;# Example for using keepalive with haproxy on warden:&#xA;KEEPALIVED_VIP=10.244.50.2 templates/make_manifest warden 10.244.0.22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to contribute back to this via a pull request on a feature branch! Once merged, we&#39;ll cut a new final release for you.&lt;/p&gt; &#xA;&lt;h3&gt;Unit Tests and Linting&lt;/h3&gt; &#xA;&lt;p&gt;If you change any erb logic in the jobs directory please add a corresponding test to &lt;code&gt;spec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run these tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd haproxy_boshrelease&#xA;bundle install&#xA;bundle exec rake spec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run lint with rubocop&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd haproxy_boshrelease&#xA;bundle install&#xA;bundle exec rake lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To watch the tests while developing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd haproxy_boshrelease&#xA;bundle install&#xA;bundle exec guard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PRs will be automatically tested by &lt;a href=&#34;https://concourse.cfi.sapcloud.io/teams/main/pipelines/haproxy-boshrelease&#34;&gt;https://concourse.cfi.sapcloud.io/teams/main/pipelines/haproxy-boshrelease&lt;/a&gt; once a maintainer has labelled the PR with the &lt;code&gt;approved&lt;/code&gt; label&lt;/p&gt; &#xA;&lt;h3&gt;Acceptance tests&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/cloudfoundry/haproxy-boshrelease/master/acceptance-tests/README.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-4-rails-routing-basics-readme</title>
    <updated>2022-06-27T01:34:49Z</updated>
    <id>tag:github.com,2022-06-27:/learn-co-curriculum/phase-4-rails-routing-basics-readme</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-rails-routing-basics-readme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rails Routing Basics&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understand the flow of data in a Rails app&lt;/li&gt; &#xA; &lt;li&gt;Map routes to controller actions&lt;/li&gt; &#xA; &lt;li&gt;Generate a controller&lt;/li&gt; &#xA; &lt;li&gt;Send JSON data as a response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Fork and clone this repo, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle install&#xA;$ rails db:migrate db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download all the dependencies for our app and set up the database.&lt;/p&gt; &#xA;&lt;!-- ## Video Walkthrough --&gt; &#xA;&lt;!-- &amp;lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ebA14bJAT88?rel=0&amp;amp;showinfo=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&amp;lt;/iframe&gt; --&gt; &#xA;&lt;h2&gt;Routing&lt;/h2&gt; &#xA;&lt;p&gt;How does your application know what code to run when it receives a request? This is where routing comes in.&lt;/p&gt; &#xA;&lt;p&gt;Before we dive into the code and routing configurations, it helps to know how HTTP works at a high level. Below is the flow that takes place when a user attempts to go to a page on a Rails application:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A client sends a request to the server (this could be: a user entering a URL in a browser; a JavaScript application using &lt;code&gt;fetch&lt;/code&gt;; etc)&lt;/li&gt; &#xA; &lt;li&gt;That request is sent to the server where the application&#39;s router interprets the request and sends a message to the controller mapped to that route&lt;/li&gt; &#xA; &lt;li&gt;The controller uses the model to access data from the database&lt;/li&gt; &#xA; &lt;li&gt;The controller then uses that data to render a view (HTML or JSON)&lt;/li&gt; &#xA; &lt;li&gt;The server returns an HTTP response, which contains the HTML or JSON data&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Creating a Route&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s try this out in our application. We&#39;ll continue using our Cheese Shop app as an example. Our goal will be to create an endpoint for our application that will return a list of all our cheeses as JSON data.&lt;/p&gt; &#xA;&lt;p&gt;To begin, start up the Rails server with &lt;code&gt;rails s&lt;/code&gt; and go to &lt;a href=&#34;http://localhost:3000/cheeses&#34;&gt;&lt;code&gt;http://localhost:3000/cheeses&lt;/code&gt;&lt;/a&gt;. As you will see, this throws a routing error: &lt;code&gt;No route matches [GET] &#34;/cheeses&#34;&lt;/code&gt;. To fix this, we&#39;ll need to add a route.&lt;/p&gt; &#xA;&lt;p&gt;Start by opening the &lt;code&gt;config/routes.rb&lt;/code&gt; file and adding the following route inside of the &lt;code&gt;draw&lt;/code&gt; block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;get &#39;cheeses&#39;, to: &#39;cheeses#index&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s look at the components that make up this route code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP verb&lt;/strong&gt;: in this case we&#39;re using the &lt;code&gt;get&lt;/code&gt; HTTP verb.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Path&lt;/strong&gt;: &lt;code&gt;&#39;cheeses&#39;&lt;/code&gt; represents the path in the URL bar that the route will be mapped to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Controller Action&lt;/strong&gt;: &lt;code&gt;&#39;cheeses#index&#39;&lt;/code&gt; tells the Rails routing system that this route should be passed through the &lt;code&gt;CheesesController&lt;/code&gt;&#39;s &lt;code&gt;index&lt;/code&gt; action. If the term &lt;code&gt;action&lt;/code&gt; sounds foreign, actions are just Rails-speak for an instance method in a controller. So in the &lt;code&gt;CheesesController&lt;/code&gt; will be a method called &lt;code&gt;index&lt;/code&gt; that gets called when a user goes to &lt;code&gt;/cheeses&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now go back to &lt;a href=&#34;http://localhost:3000/cheeses&#34;&gt;&lt;code&gt;http://localhost:3000/cheeses&lt;/code&gt;&lt;/a&gt;, and refresh the page. You should now see that the error message has changed. It&#39;s no longer complaining about not having a route; it should now say: &lt;code&gt;uninitialized constant CheesesController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s fix this by creating a new controller for our cheeses. You can generate a controller using a Rails generator, just like with a model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails g controller Cheeses --no-test-framework&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice the naming convention we&#39;re following: for a &lt;code&gt;Cheese&lt;/code&gt; model, we need a &lt;code&gt;Cheeses&lt;/code&gt; controller. &lt;strong&gt;Model names are always singular, and controller names are plural&lt;/strong&gt;. These conventions are important to keep in mind!&lt;/p&gt; &#xA;&lt;p&gt;This will create a blank controller file &lt;code&gt;/app/controllers/cheese_controller.rb&lt;/code&gt; that we can use to map to the routing file. Since there are a number of methods built into the Rails controller system, you will also want the controller to inherit from the application controller. The new file should have code that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class CheesesController &amp;lt; ApplicationController&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The standard naming convention for controllers is the name of the controller followed by the word &lt;code&gt;Controller&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you refresh the browser now, you will see a new error: &lt;code&gt;The action &#39;index&#39; could not be found for CheesesController&lt;/code&gt;. This means that it found our controller (woot!) but couldn&#39;t find the action &lt;code&gt;index&lt;/code&gt; in that controller (womp womp).&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re making good progress (even though we&#39;re using EDD - error driven development), and it&#39;s good to see each of the errors so that when you encounter these in your real world projects you will know how to fix them. This current error is fixed by adding the following method in the &lt;code&gt;CheesesController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;def index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this method, our goal is to send back a list of all our cheeses as JSON data. To help accomplish our goal, let&#39;s do a bit of debugging in our controller action using &lt;code&gt;byebug&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;def index&#xA;  byebug&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you haven&#39;t encountered &lt;code&gt;byebug&lt;/code&gt; before, it&#39;s a way to add &lt;em&gt;breakpoints&lt;/em&gt; to our Rails code so we can &lt;em&gt;pause the execution of our code&lt;/em&gt; and experiment. It functions similarly to &lt;code&gt;binding.pry&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://localhost:3000/cheeses&#34;&gt;&lt;code&gt;http://localhost:3000/cheeses&lt;/code&gt;&lt;/a&gt; in the browser again, and check your terminal: you should be in the &lt;code&gt;byebug&lt;/code&gt; session now! That means you have access to everything that&#39;s available inside our controller and can try out the code we need to return our list of cheeses.&lt;/p&gt; &#xA;&lt;p&gt;From your &lt;code&gt;byebug&lt;/code&gt; session, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;cheeses = Cheese.all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new &lt;code&gt;cheeses&lt;/code&gt; variable with all the cheese data from the database!&lt;/p&gt; &#xA;&lt;p&gt;To see how to return a response with this cheese data, you can also run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;render json: cheeses&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling the &lt;code&gt;render&lt;/code&gt; method with the &lt;code&gt;json:&lt;/code&gt; option will produce a JSON-formatted string of data which the controller can then use as the body of the response being sent back to the client. If we pass an Active Record object (in this case, our &lt;code&gt;cheeses&lt;/code&gt; variable) to this render method, it will be &lt;em&gt;serialized&lt;/em&gt; as JSON data based on the attributes of the object.&lt;/p&gt; &#xA;&lt;p&gt;To exit &lt;code&gt;byebug&lt;/code&gt; gracefully, type &lt;code&gt;continue&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt; and hit enter.&lt;/p&gt; &#xA;&lt;p&gt;Now that we&#39;ve seen how that code will run in &lt;code&gt;byebug&lt;/code&gt;, let&#39;s add it to the controller action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;def index&#xA;  cheeses = Cheese.all&#xA;  render json: cheeses&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://localhost:3000/cheeses&#34;&gt;&lt;code&gt;http://localhost:3000/cheeses&lt;/code&gt;&lt;/a&gt; in the browser one more time. Now you should see the JSON data being returned!&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;You should now have a firm understanding of how to implement basic routing in your application for static pages. Try experimenting by adding more routes and controller actions, and see what other responses you can set up by changing how you are accessing data from the database (like using the &lt;code&gt;.order&lt;/code&gt; or &lt;code&gt;.limit&lt;/code&gt; methods from Active Record).&lt;/p&gt; &#xA;&lt;h2&gt;Check For Understanding&lt;/h2&gt; &#xA;&lt;p&gt;Before you move on, make sure you can answer the following questions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When an HTTP request is made to a Rails app, what is the sequence of events that happens to return the response?&lt;/li&gt; &#xA; &lt;li&gt;What three components make up a route in Rails?&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/routing.html&#34;&gt;Rails Routing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>