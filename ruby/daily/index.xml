<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-19T01:38:52Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>guillaumebriday/modern-datatables</title>
    <updated>2024-02-19T01:38:52Z</updated>
    <id>tag:github.com,2024-02-19:/guillaumebriday/modern-datatables</id>
    <link href="https://github.com/guillaumebriday/modern-datatables" rel="alternate"></link>
    <summary type="html">&lt;p&gt;They are many ways to build reactive web interfaces but do we really need to add the complexity of JavaScript frameworks like Vue.js or React?&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Modern datatables&lt;/h1&gt; &#xA;&lt;h2&gt;Concept Overview&lt;/h2&gt; &#xA;&lt;p&gt;This project shows how to build a &lt;strong&gt;modern&lt;/strong&gt; real life application with in two different ways.&lt;/p&gt; &#xA;&lt;p&gt;They are many ways to build &lt;strong&gt;reactive&lt;/strong&gt; web interfaces but do we really need to add the complexity of JavaScript frameworks like &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; or &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;p&gt;These tools are very powerful but the complexity they add to a full-stack developer&#39;s workflow is &lt;strong&gt;INSANE&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In this repo, you&#39;ll find two apps:&lt;/p&gt; &#xA;&lt;p&gt;ðŸ‘‰ One is build with &lt;a href=&#34;https://rubyonrails.org/&#34;&gt;Rails&lt;/a&gt; and &lt;a href=&#34;https://hotwire.dev/&#34;&gt;Hotwire&lt;/a&gt; aka NEW MAGIC.&lt;/p&gt; &#xA;&lt;p&gt;ðŸ‘‰ The other with Rails as a backend API and Vue.js as a full static SPA in the frontend.&lt;/p&gt; &#xA;&lt;p&gt;They have the exact same features and level of responsiveness.&lt;/p&gt; &#xA;&lt;p&gt;ðŸ‘‰ Here is a blog post with some details of how it works under the hood: &lt;a href=&#34;https://guillaumebriday.fr/hotwire-reactive-search-form-without-javascript&#34;&gt;https://guillaumebriday.fr/hotwire-reactive-search-form-without-javascript&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ðŸ‘‰ You can already use &lt;a href=&#34;https://www.stimulus-components.com/docs/stimulus-rails-autosave&#34;&gt;Stimulus Rails Autosave&lt;/a&gt; to auto-submit your forms with Stimulus without writing a single line of custom JavaScript.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Both example are available online ðŸ¥³:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rails-hotwire.guillaumebriday.fr&#34;&gt;https://rails-hotwire.guillaumebriday.fr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rails-vuejs.guillaumebriday.fr&#34;&gt;https://rails-vuejs.guillaumebriday.fr&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;More and more developers come back from building dedicated SPAs and just want to use the power of Vue or React in a classic Backend application.&lt;/p&gt; &#xA;&lt;p&gt;Many projects help you in multiples frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hotwire.dev/&#34;&gt;Hotwire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://laravel-livewire.com/&#34;&gt;Laravel Livewire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bigskysoftware/htmx&#34;&gt;htmx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inertiajs.com/&#34;&gt;Inertiajs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.stimulusreflex.com/&#34;&gt;Stimulus Reflex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phoenixframework/phoenix_live_view&#34;&gt;Phoenix Live_View&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/turbolinks/turbolinks&#34;&gt;Turbolinks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re still perplex about this old school approach, you should watch this video from Sam Stephenson:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SWEts0rlezA&#34;&gt;Turbolinks 5: I Canâ€™t Believe Itâ€™s Not Native! &lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Do not hesitate to contribute to the project by adapting or adding features ! Bug reports or pull requests are welcome.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is released under the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>basecamp/campfire-bot-kit</title>
    <updated>2024-02-19T01:38:52Z</updated>
    <id>tag:github.com,2024-02-19:/basecamp/campfire-bot-kit</id>
    <link href="https://github.com/basecamp/campfire-bot-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Campfire Bot Kit&lt;/h1&gt; &#xA;&lt;p&gt;Creating a Campfire bot is as simple as replying to a request with either text or an image. This reply will be posted directly into the room from which the bot was either mentioned or pinged. Alternatively, you can have your bot post to a room on it&#39;s own accord by using the bot-specific URLs that are listed in Campfire in the bot section.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains a simple Ruby bot that can be used as a starting point for your own bot.&lt;/p&gt; &#xA;&lt;h2&gt;Developing with Ruby&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need a working Ruby environment to build the example bot. We recomend using &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; to install and manage your Ruby versions.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using macOS, you can install rbenv using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install rbenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installation instructions for other platforms are available on the &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv GitHub page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you have rbenv installed, you can install the required Ruby version by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rbenv install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The sample bot&lt;/h2&gt; &#xA;&lt;p&gt;Our sample actually implements two bots, so we can demonstrate both text and image responses. We&#39;ve defined two endpoints, one for each bot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/hello&lt;/code&gt; responds to its messages with a text greeting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/cat&lt;/code&gt; responds to any messages it receives with a random cat image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;/hello&lt;/code&gt; endpoint also shows how to access the content of the message that was sent to the bot.&lt;/p&gt; &#xA;&lt;h2&gt;How Campfire bots work&lt;/h2&gt; &#xA;&lt;p&gt;Campfire bots can receive and respond to messages sent by other users, and they can also post messages to rooms on their own accord.&lt;/p&gt; &#xA;&lt;h3&gt;Receiving and responding to messages&lt;/h3&gt; &#xA;&lt;p&gt;When a user mentions or pings a bot, Campfire sends a POST request to the bot&#39;s webhook URL. That request includes a JSON payload with the details of the message content, the room is was sent from, and the user who sent it.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of a valid message payload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;room&#34;: {&#xA;    &#34;id&#34;: 23,&#xA;    &#34;name&#34;: &#34;All Talk&#34;&#xA;  },&#xA;  &#34;user&#34;: {&#xA;    &#34;id&#34;: 42,&#xA;    &#34;name&#34;: &#34;Kevin&#34;&#xA;  },&#xA;  &#34;message&#34;: {&#xA;    &#34;id&#34;: 100,&#xA;    &#34;body&#34;: {&#xA;      &#34;html&#34;: &#34;&amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;&#34;,&#xA;      &#34;plain&#34;: &#34;hello&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The bot should return a successful HTTP status code to acknowledge that it received the message. It can also include a response, which will be posted to the room the message was sent from.&lt;/p&gt; &#xA;&lt;p&gt;To respond with a text message, simply return the text. This is what the &lt;code&gt;/hello&lt;/code&gt; endpoint does in our example bot.&lt;/p&gt; &#xA;&lt;p&gt;To respond with an attachment, like an image, return its content, and make sure to set the &lt;code&gt;Content-Type&lt;/code&gt; header to the appropriate MIME type. This is what our &lt;code&gt;/cat&lt;/code&gt; endpoint does.&lt;/p&gt; &#xA;&lt;h3&gt;Posting messages to rooms&lt;/h3&gt; &#xA;&lt;p&gt;To send messages to a room that aren&#39;t in response to a message, make an HTTP request to the bot&#39;s room-specific URL. Each bot gets unique URLs for every room that it&#39;s a member of. The authentication token is included in the URL, so all you need to do is make the request.&lt;/p&gt; &#xA;&lt;p&gt;To send a text message, make a POST request to the room&#39;s URL with the message in the request body. To send an attachment, use a &lt;code&gt;multipart/form-data&lt;/code&gt; request with the attachment as the &lt;code&gt;attachment&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;p&gt;In the bot section of the Campfire UI you&#39;ll see example &lt;code&gt;curl&lt;/code&gt; commands for sending to each room in both text and attachment format.&lt;/p&gt; &#xA;&lt;h2&gt;Deploying your bot&lt;/h2&gt; &#xA;&lt;p&gt;You can deploy the sample bot to try it out. We&#39;ve added some &lt;a href=&#34;https://kamal-deploy.org&#34;&gt;Kamal&lt;/a&gt; configuration to the repo, so all that&#39;s left to do is provide the details of your server and Docker registry credentials. You can use an existing server to deploy to, or you can create one with a cloud provider like Digital Ocean or Hetzner.&lt;/p&gt; &#xA;&lt;p&gt;Most of the deployment details will go into the &lt;code&gt;config/deploy.yml&lt;/code&gt; file. The regsitry credentials should be kept separate though, to make sure they don&#39;t end up in the repository; those can be added to a &lt;code&gt;.env&lt;/code&gt; file instead.&lt;/p&gt; &#xA;&lt;p&gt;For a typical setup, the steps you&#39;ll need to do are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add your server&#39;s IP address or DNS name to the &lt;code&gt;servers&lt;/code&gt; section of &lt;code&gt;config/deploy.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put your Docker username in the &lt;code&gt;registry&lt;/code&gt; section. If you&#39;re using a registry other than Docker Hub, you&#39;ll need to add the registry&#39;s URL as well.&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file to hold your registry password. You can use an access token here if you have one. Your &lt;code&gt;.env&lt;/code&gt; file should look something like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;KAMAL_REGISTRY_PASSWORD=yourpassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now run &lt;code&gt;kamal setup&lt;/code&gt; to set up your server. Each time you want to deploy your bot, just run &lt;code&gt;kamal deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your particular setup you might need some other configuration. For example, to use a different port, or to use a user other than &lt;code&gt;root&lt;/code&gt; to connect. You can find all the available options in the &lt;a href=&#34;https://kamal-deploy.org/docs/configuration&#34;&gt;Kamal documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once your bot has been deployed, add it to your Campfire instance. In the bot section of the Campfire UI you can give your bot a name, and set its webhook URL to be an endpoint of your bot (like &lt;code&gt;http://mybot.example.com/cats&lt;/code&gt;). Then try sending a message to your bot to see it respond.&lt;/p&gt; &#xA;&lt;h2&gt;Exploring other examples&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/basecamp/campfire-bot-kit/main/examples&#34;&gt;examples&lt;/a&gt; directory for some more examples that use different language, libraries or frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Share your bots!&lt;/h2&gt; &#xA;&lt;p&gt;If you create a bot that you think others might find useful, we&#39;d love to see it! Feel free to open a pull request to add it to a &lt;code&gt;community&lt;/code&gt; directory in this repo so we can include it for others to use.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Campfire Bot Kit is licensed under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;Campfire itself uses a commercial license: &lt;a href=&#34;https://once.com/license&#34;&gt;https://once.com/license&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>goshippo/shippo-ruby-client</title>
    <updated>2024-02-19T01:38:52Z</updated>
    <id>tag:github.com,2024-02-19:/goshippo/shippo-ruby-client</id>
    <link href="https://github.com/goshippo/shippo-ruby-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shipping API Ruby library (USPS, FedEx, UPS and more)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shippo API â€“ Ruby Wrapper for Shippo API&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;span&gt;âš &lt;/span&gt; &lt;strong&gt;Shippo no longer actively maintains this library&lt;/strong&gt; &lt;br&gt; However, you can use it as a starting point and update it for your needs and future changes to our APIs.&lt;br&gt; You can use our &lt;a href=&#34;https://docs.goshippo.com/shippoapi/public-api/&#34;&gt;Open API Specification&lt;/a&gt; to build your own library using tools like the &lt;a href=&#34;https://openapi-generator.tech/&#34;&gt;OpenAPI Generator&lt;/a&gt; and &lt;a href=&#34;https://swagger.io/tools/swagger-codegen/&#34;&gt;Swagger Codegen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/goshippo/shippo-ruby-client&#34;&gt;&lt;img src=&#34;https://travis-ci.org/goshippo/shippo-ruby-client.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/goshippo/shippo-ruby-client&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/goshippo/shippo-ruby-client/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/goshippo/shippo-ruby-client/coverage&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/goshippo/shippo-ruby-client/badges/coverage.svg?refresh=1&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/goshippo/shippo-ruby-client&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/goshippo/shippo-ruby-client/badges/issue_count.svg?refresh=1&#34; alt=&#34;Issue Count&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shippo is a shipping API that connects you with &lt;a href=&#34;https://goshippo.com/carriers/&#34;&gt;multiple shipping carriers&lt;/a&gt; (such as USPS, UPS, DHL, Canada Post, Australia Post, UberRUSH and many others) through one interface.&lt;/p&gt; &#xA;&lt;p&gt;Print a shipping label in 10 mins using our default USPS and DHL Express accounts. No need to register for a carrier account to get started.&lt;/p&gt; &#xA;&lt;p&gt;You will need to &lt;a href=&#34;https://goshippo.com/&#34;&gt;register for a Shippo account&lt;/a&gt; to use the Shippo API. It&#39;s free to sign up, free to use the API. Only pay to print a live label, test labels are free.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This library is distributed as a ruby gem, therefore you can install it via adding the following line to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;shippo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to use the latest version of the library, just point your Gemfile to our github repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;shippo&#39;, git: &#39;https://github.com/goshippo/shippo-ruby-client&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can install the gem using the &lt;code&gt;gem&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install shippo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: examples below use the gem &lt;code&gt;awesome_print&lt;/code&gt; to dump formatted objects and hashes to STDOUT. To be able to use the examples verbatum, please ensure you have this gem installed, or run: &lt;code&gt;gem install awesome_print --no-rdoc --no-ri&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Below we demonstrate the most basic usage of the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;shippo&#39;&#xA;&#xA;# Setup your API token&#xA;Shippo::API.token = &#39;aff988f77afa0fdfdfadf&#39;  # not an actual valid token&#xA;&#xA;# Setup query parameter hash&#xA;params   = {  async:          false,&#xA;              address_from:   {&#xA;                name:           &#39;Mr Hippo&#39;,&#xA;                company:        &#39;Shippo&#39;,&#xA;                street1:        &#39;215 Clayton St.&#39;,&#xA;                street2:        &#39;&#39;,&#xA;                city:           &#39;San Francisco&#39;,&#xA;                state:          &#39;CA&#39;,&#xA;                zip:            &#39;94117&#39;,&#xA;                country:        &#39;US&#39;,&#xA;                phone:          &#39;+1 555 341 9393&#39; },&#xA;              address_to:     {&#xA;                name:           &#39;Mrs Hippo&#34;&#39;,&#xA;                company:        &#39;San Diego Zoo&#39;,&#xA;                street1:        &#39;2920 Zoo Drive&#39;,&#xA;                city:           &#39;San Diego&#39;,&#xA;                state:          &#39;CA&#39;,&#xA;                zip:            &#39;92101&#39;,&#xA;                country:        &#39;US&#39;,&#xA;                phone:          &#39;+1 555 341 9393&#39;,&#xA;                email:          &#39;hippo@goshippo.com&#39; },&#xA;              parcels:         {&#xA;                length:        5,&#xA;                width:         2,&#xA;                height:        5,&#xA;                distance_unit: :in,&#xA;                weight:        2,&#xA;                mass_unit:     :lb }&#xA;}&#xA;&#xA;# Make our API call&#xA;@shipment = Shippo::Shipment.create(params)&#xA;@shipment.success?&#xA;# =&amp;gt; true&#xA;@shipment.status&#xA;# =&amp;gt; &#39;SUCCESS&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s take a quick look at what the &lt;code&gt;Shipment&lt;/code&gt; object looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;awesome_print&#39;&#xA;ap @shipment&#xA;# {&#xA;#   &#34;carrier_accounts&#34;    =&amp;gt; [],&#xA;#   &#34;address_from&#34;        =&amp;gt; {&#xA;#     &#34;name&#34;    =&amp;gt; &#34;Mr Hippo&#34;,&#xA;#     &#34;company&#34; =&amp;gt; &#34;Shippo&#34;,&#xA;#     &#34;street1&#34; =&amp;gt; &#34;215 Clayton St.&#34;,&#xA;#     &#34;street2&#34; =&amp;gt; &#34;&#34;,&#xA;#     &#34;city&#34;    =&amp;gt; &#34;San Francisco&#34;,&#xA;#     &#34;state&#34;   =&amp;gt; &#34;CA&#34;,&#xA;#     &#34;zip&#34;     =&amp;gt; &#34;94117&#34;,&#xA;#     &#34;country&#34; =&amp;gt; &#34;US&#34;,&#xA;#     &#34;phone&#34;   =&amp;gt; &#34;+1 555 341 9393&#34;&#xA;#   },&#xA;#   &#34;address_to&#34;          =&amp;gt; { ... },   # omitted for brevity&#xA;#   &#34;address_return&#34;      =&amp;gt; { ... },&#xA;#   &#34;parcels&#34;             =&amp;gt; [{&#xA;#     &#34;length&#34;        =&amp;gt; 5,&#xA;#     &#34;width&#34;         =&amp;gt; 2,&#xA;#     &#34;height&#34;        =&amp;gt; 5,&#xA;#     &#34;distance_unit&#34; =&amp;gt; in,&#xA;#     &#34;weight&#34;        =&amp;gt; 2,&#xA;#     &#34;mass_unit&#34;     =&amp;gt; lb,&#xA;#   }],&#xA;#   &#34;shipment_date&#34;       =&amp;gt; &#34;2016-07-06T20:33:02.211Z&#34;,&#xA;#   &#34;customs_declaration&#34; =&amp;gt; nil,&#xA;#   &#34;extra&#34;               =&amp;gt; {&#xA;#     &#34;insurance&#34;   =&amp;gt; {&#xA;#       &#34;amount&#34;    =&amp;gt; 10,&#xA;#       &#34;currency&#34;  =&amp;gt; &#34;USD&#34;,&#xA;#       &#34;content&#34;   =&amp;gt; &#34;&#34;,&#xA;#       &#34;provider&#34;  =&amp;gt; &#34;FEDEX&#34;&#xA;#     },&#xA;#     &#34;is_return&#34;   =&amp;gt; false,&#xA;#     &#34;reference_1&#34; =&amp;gt; &#34;&#34;,&#xA;#     &#34;reference_2&#34; =&amp;gt; &#34;&#34;,&#xA;#   },&#xA;#   &#34;messages&#34;            =&amp;gt; [ ... ],&#xA;#   &#34;rates&#34;               =&amp;gt; [ ... ]&#xA;# }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;List Handling&lt;/h4&gt; &#xA;&lt;p&gt;In the case when the API returns a hash with one of the hash values being an array of entities, and if the corresponding key can be mapped into one of the existing API models, then each of the members of the array is coerced from a hash into an object of the model&#39;s type.&lt;/p&gt; &#xA;&lt;p&gt;In the example below we are showing the result of such transformation where &lt;code&gt;rates&lt;/code&gt; contains a list of fully constructed objects of type &lt;code&gt;Shippo::Rate&lt;/code&gt; after being coerced from a hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ap @shipment.rates.first&#xA;# =&amp;gt;&#xA;# { &#xA;#   &#34;shipment&#34;            =&amp;gt; &#34;20f25e44b16b4051b6dd910cb66fd27b&#34;,&#xA;#   &#34;attributes&#34;          =&amp;gt; [],&#xA;#   &#34;amount&#34;              =&amp;gt; &#34;8.51&#34;,&#xA;#   &#34;currency&#34;            =&amp;gt; &#34;USD&#34;,&#xA;#   &#34;amount_local&#34;        =&amp;gt; &#34;8.51&#34;,&#xA;#   &#34;currency_local&#34;      =&amp;gt; &#34;USD&#34;,&#xA;#   &#34;provider&#34;            =&amp;gt; &#34;FedEx&#34;,&#xA;#   &#34;provider_image_75&#34;   =&amp;gt; &#34;https://shippo-static.s3.amazonaws.com/providers/75/FedEx.png&#34;,&#xA;#   &#34;provider_image_200&#34;  =&amp;gt; &#34;https://shippo-static.s3.amazonaws.com/providers/200/FedEx.png&#34;,&#xA;#   &#34;servicelevel&#34;        =&amp;gt; {&#xA;#     &#34;name&#34;  =&amp;gt; &#34;Ground&#34;,&#xA;#     &#34;token&#34; =&amp;gt; &#34;fedex_ground&#34;,&#xA;#     &#34;terms&#34; =&amp;gt; &#34;&#34;&#xA;#   }&#xA;#   &#34;days&#34;                =&amp;gt; 2,&#xA;#   &#34;arrives_by&#34;          =&amp;gt; nil,&#xA;#   &#34;duration_terms&#34;      =&amp;gt; &#34;&#34;,&#xA;#   &#34;messages&#34;            =&amp;gt; [],&#xA;#   &#34;carrier_account&#34;     =&amp;gt; &#34;4b1940bc69524163b669asd361842db&#34;,&#xA;#   &#34;test&#34;                =&amp;gt; true&#xA;# }&#xA;@shipment.rates.first.owner&#xA;# â¤· unittest@gmail.com&#xA;@shipment.rates.first.class&#xA;# â¤· Shippo::Rate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;List Endpoints&lt;/h4&gt; &#xA;&lt;p&gt;You can retrieve a list of objects for many endpoints (e.g. Transactions, Shipments). The API will return a paginated list of objects, usually sorted by creation date. Retrieving a list of your last Transactions can be done as follows, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@transactions = Shippo::Transaction.all()&#xA;@transactions&#xA;# =&amp;gt;&#xA;# {&#xA;#   &#34;count&#34;     =&amp;gt; 3055,&#xA;#   &#34;next&#34;      =&amp;gt; &#34;https://api.goshippo.com/v1/transactions/?page=2&#34;,&#xA;#   &#34;previous&#34;  =&amp;gt; nil,&#xA;#   &#34;results&#34;   =&amp;gt; [ ... list of Transaction objects ... ]&#xA;# }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Resource ID and Other Object Fields&lt;/h4&gt; &#xA;&lt;p&gt;Shippo API returns several generalized fields for each valid resource, that being with &#39;object_&#39; â€“ for example, &lt;code&gt;object_id&lt;/code&gt;, &lt;code&gt;object_owner&lt;/code&gt;, etc. In this library we move these fields out of the main model, and into an instance of &lt;code&gt;Shippo::API::ApiObject&lt;/code&gt;. However the fields can still be accessed on the main model via generated accessors.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately Shippo API also returns &lt;code&gt;object_id&lt;/code&gt;, which in Ruby has a special meaning: it&#39;s the pointer address of any object. Overwriting this field causes all sorts of issues.&lt;/p&gt; &#xA;&lt;p&gt;For this reason we are mapping &lt;code&gt;object_id&lt;/code&gt; to &lt;code&gt;resource_id&lt;/code&gt;, as soon as the hash is passed in to initialize &lt;code&gt;ApiObject&lt;/code&gt;. This way &lt;code&gt;object_id&lt;/code&gt; continues to be used as a ruby internal field, and can be accessed as expected:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In the example below, &lt;code&gt;object_id&lt;/code&gt; does not refer to any API field, and is a ruby internal field.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@shipment.object_id    # this is the Ruby object pointer&#xA;# â¤· 70206221831520  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access the &lt;code&gt;&#34;object_id&#34;&lt;/code&gt; field retrieved with the API, see the following session that highlights many ways of accessing &lt;code&gt;object_id&lt;/code&gt; field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@shipment.resource_id  # this is the API id (note: deprecated accessor)&#xA;# â¤· 20f25e44b16b4051b6dd910cb66fd27b&#xA;@shipment.object.id    # which is actually just this&#xA;# â¤· 20f25e44b16b4051b6dd910cb66fd27b&#xA;@shipment.id           # but it can also be accessed this way too&#xA;# â¤· 20f25e44b16b4051b6dd910cb66fd27b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, here is how we access the rest of the &lt;code&gt;object_&lt;/code&gt; fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@shipment.object.owner    # this is whether &#39;object_owner&#39; is stored&#xA;# â¤· valued_customer@gmail.com&#xA;@shipment.object_owner    # deprecated accessor method&#xA;# â¤· valued_customer@gmail.com&#xA;@shipment.owner           # forwarded alias to #object.owner&#xA;# â¤· valued_customer@gmail.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the fully constructed &lt;code&gt;ApiObject&lt;/code&gt; instance, attached to our &lt;code&gt;@shipment&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ap @shipment.object&#xA;# {&#xA;#   :created  =&amp;gt; 2016-07-06 20:44:47 UTC,&#xA;#   :updated  =&amp;gt; 2016-07-06 20:44:47 UTC,&#xA;#   :owner    =&amp;gt; &#34;valued_customer@gmail.com&#34;,&#xA;#   :id       =&amp;gt; &#34;20f25e44b16b4051b6dd910cb66fd27b&#34;&#xA;# }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Validation&lt;/h4&gt; &#xA;&lt;p&gt;In general this gem does not currently perform validation, &lt;em&gt;except&lt;/em&gt; in the cases when enumerations are used. The gem automatically converts a response containing keys matching one of the known categories (such as &lt;code&gt;Shippo::API::Category::Status&lt;/code&gt; and it&#39;s value into one of the constants, such as &lt;code&gt;SUCCESS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using Provided Example File&lt;/h3&gt; &#xA;&lt;p&gt;Look at &lt;code&gt;bin/example&lt;/code&gt; for more code sample.&lt;/p&gt; &#xA;&lt;p&gt;You can actually run this file, but first you should set your API token in the environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export SHIPPO_TOKEN=&#34;&amp;lt;your token here&amp;gt;&#34;&#xA;bin/example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: this environment variable is only used by the included &lt;code&gt;bin/example&lt;/code&gt; script, and is not automatically used by the underlying client library.&lt;/p&gt; &#xA;&lt;h2&gt;Gem Versioning Notes&lt;/h2&gt; &#xA;&lt;p&gt;Version 3 and up of this library works with Ruby 2.2 and later, and is not backwards compatible. &lt;strong&gt;Version 1.0.4&lt;/strong&gt; of this library is the last version supporting ruby 1.8 and 1.9.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Version 3 brings potential backwards incompatibility issues. Please be prepared to update your usages (if necessary) when you migrate.&lt;/p&gt; &#xA;&lt;h3&gt;If you are still using Ruby 1.8 or 1.9&lt;/h3&gt; &#xA;&lt;p&gt;If you are still using an older version of Ruby, please make sure to use the last 1.X version of this library, which is currently the &lt;a href=&#34;https://github.com/goshippo/shippo-ruby-client/tree/v1.0.4&#34;&gt;tag v1.0.4&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://goshippo.com/docs&#34;&gt;https://goshippo.com/docs&lt;/a&gt; for up-to-date documentation.&lt;/p&gt; &#xA;&lt;p&gt;For Ruby class documentation, please run the following rake task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install&#xA;bundle exec rake doc:read # preview documentation in the browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This task will generate documentation using &lt;a href=&#34;http://yardoc.org/&#34;&gt;Yard&lt;/a&gt; and then open the browser with the generated index.html.&lt;/p&gt; &#xA;&lt;h2&gt;About Shippo&lt;/h2&gt; &#xA;&lt;p&gt;Connect with multiple different carriers, get discounted shipping labels, track parcels, and much more with just one integration. You can use your own carrier accounts or take advantage of our discounted rates with the USPS and DHL Express. Using Shippo makes it easy to deal with multiple carrier integrations, rate shopping, tracking and other parts of the shipping workflow. We provide the API and dashboard for all your shipping needs.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Features&lt;/h2&gt; &#xA;&lt;p&gt;The Shippo API provides in depth support of carrier and shipping functionalities. Here are just some of the features we support through the API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shipping rates &amp;amp; labels&lt;/li&gt; &#xA; &lt;li&gt;Tracking for any shipment with just the tracking number&lt;/li&gt; &#xA; &lt;li&gt;Batch label generation&lt;/li&gt; &#xA; &lt;li&gt;Multi-piece shipments&lt;/li&gt; &#xA; &lt;li&gt;Manifests and SCAN forms&lt;/li&gt; &#xA; &lt;li&gt;Customs declaration and commercial invoicing&lt;/li&gt; &#xA; &lt;li&gt;Address verification&lt;/li&gt; &#xA; &lt;li&gt;Signature and adult signature confirmation&lt;/li&gt; &#xA; &lt;li&gt;Consolidator support including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DHL eCommerce&lt;/li&gt; &#xA;   &lt;li&gt;UPS Mail Innovations&lt;/li&gt; &#xA;   &lt;li&gt;FedEx Smartpost&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Additional services: cash-on-delivery, certified mail, delivery confirmation, and more.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>