<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-07T01:35:10Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/ApplicationInsights-Ruby</title>
    <updated>2025-07-07T01:35:10Z</updated>
    <id>tag:github.com,2025-07-07:/microsoft/ApplicationInsights-Ruby</id>
    <link href="https://github.com/microsoft/ApplicationInsights-Ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microsoft Application Insights SDK for Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Application Insights SDK for Ruby&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/application_insights&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/application_insights.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/Microsoft/ApplicationInsights-Ruby&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Microsoft/ApplicationInsights-Ruby.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write. -- &lt;cite&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;Ruby - Official Site&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This project extends the Application Insights API surface to support Ruby. &lt;a href=&#34;http://azure.microsoft.com/en-us/services/application-insights/&#34;&gt;Application Insights&lt;/a&gt; is a service that allows developers to keep their application available, performing and succeeding. This Ruby gem will allow you to send telemetry of various kinds (event, trace, exception, etc.) to the Application Insights service where they can be visualized in the Azure Portal.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This SDK is NOT maintained or supported by Microsoft even though we&#39;ve contributed to it in the past. Note that Azure Monitor only provides support when using the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-monitor/app/platforms#unsupported-community-sdks&#34;&gt;supported SDKs&lt;/a&gt;. Weâ€™re constantly assessing opportunities to expand our support for other languages, so follow our &lt;a href=&#34;https://github.com/microsoft/ApplicationInsights-Announcements/issues&#34;&gt;GitHub Announcements&lt;/a&gt; page to receive the latest SDK news.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Ruby 1.9.3 and above are currently supported by this gem.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the latest release you can use &lt;em&gt;gem&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install application_insights&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, you can send telemetry to Application Insights. Here are a few samples.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: before you can send data to you will need an instrumentation key. Please see the &lt;a href=&#34;https://github.com/Microsoft/AppInsights-Home/wiki#getting-an-application-insights-instrumentation-key&#34;&gt;Getting an Application Insights Instrumentation Key&lt;/a&gt; section for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Sending a simple event telemetry item&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;application_insights&#39;&#xA;tc = ApplicationInsights::TelemetryClient.new &#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;&#xA;tc.track_event &#39;My event&#39;&#xA;tc.flush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending an event telemetry item with custom properties and measurements&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;application_insights&#39;&#xA;tc = ApplicationInsights::TelemetryClient.new &#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;&#xA;tc.track_event &#39;My event&#39;, :properties =&amp;gt; { &#39;custom property&#39; =&amp;gt; &#39;some value&#39; }, :measurements =&amp;gt; { &#39;custom metric&#39; =&amp;gt; 13 }&#xA;tc.flush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending a trace telemetry item with custom properties&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;application_insights&#39;&#xA;tc = ApplicationInsights::TelemetryClient.new &#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;&#xA;tc.track_trace &#39;My trace statement&#39;, ApplicationInsights::Channel::Contracts::SeverityLevel::INFORMATION, :properties =&amp;gt; { &#39;custom property&#39; =&amp;gt; &#39;some value&#39; }&#xA;tc.flush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending a metric telemetry item (without and with optional values)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;application_insights&#39;&#xA;tc = ApplicationInsights::TelemetryClient.new &#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;&#xA;tc.track_metric &#39;My metric&#39;, 42&#xA;# with all optional values set&#xA;tc.track_metric &#39;My metric&#39;, 42, :kind =&amp;gt; ApplicationInsights::Channel::Contracts::DataPointType::AGGREGATION, :count =&amp;gt; 3, :min =&amp;gt; 1, :max =&amp;gt; 100, :std_dev =&amp;gt; 10, :properties =&amp;gt; { &#39;custom property&#39; =&amp;gt; &#39;some value&#39; }&#xA;tc.flush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending an exception telemetry item with custom properties and measurements&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;application_insights&#39;&#xA;tc = ApplicationInsights::TelemetryClient.new &#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;&#xA;begin&#xA;  raise ArgumentError, &#39;Something has gone wrong!&#39;&#xA;rescue =&amp;gt; e&#xA;  tc.track_exception e&#xA;end&#xA;tc.flush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring context for a telemetry client instance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;application_insights&#39;&#xA;tc = ApplicationInsights::TelemetryClient.new &#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;&#xA;tc.context.application.ver = &#39;1.2.3&#39;&#xA;tc.context.device.id = &#39;My current device&#39;&#xA;tc.context.device.oem_name = &#39;Asus&#39;&#xA;tc.context.device.model = &#39;X31A&#39;&#xA;tc.context.device.type = &#34;Other&#34;&#xA;tc.context.user.id = &#39;santa@northpole.net&#39;&#xA;tc.track_trace &#39;My trace with context&#39;&#xA;tc.flush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring synchronous (default) channel properties&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;application_insights&#39;&#xA;tc = ApplicationInsights::TelemetryClient.new&#xA;# flush telemetry if we have 10 or more telemetry items in our queue&#xA;tc.channel.queue.max_queue_length = 10&#xA;# send telemetry to the service in batches of 5&#xA;tc.channel.sender.send_buffer_size = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring an asynchronous channel instead of the synchronous default&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;application_insights&#39;&#xA;sender = ApplicationInsights::Channel::AsynchronousSender.new&#xA;queue = ApplicationInsights::Channel::AsynchronousQueue.new sender&#xA;channel = ApplicationInsights::Channel::TelemetryChannel.new nil, queue&#xA;tc = ApplicationInsights::TelemetryClient.new &#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;, channel&#xA;# Note: the event will be sent on a separate thread; if the app finishes before&#xA;#       the thread finishes, the data is lost&#xA;tc.track_event &#39;My event&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring asynchronous channel properties&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;application_insights&#39;&#xA;sender = ApplicationInsights::Channel::AsynchronousSender.new&#xA;queue = ApplicationInsights::Channel::AsynchronousQueue.new sender&#xA;channel = ApplicationInsights::Channel::TelemetryChannel.new nil, queue&#xA;tc = ApplicationInsights::TelemetryClient.new &#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;, channel&#xA;# flush telemetry if we have 10 or more telemetry items in our queue&#xA;tc.channel.queue.max_queue_length = 10&#xA;# send telemetry to the service in batches of 5&#xA;tc.channel.sender.send_buffer_size = 5&#xA;# the background worker thread will be active for 5 seconds before it shuts down. if&#xA;# during this time items are picked up from the queue, the timer is reset.&#xA;tc.channel.sender.send_time = 5&#xA;# the background worker thread will poll the queue every 0.5 seconds for new items&#xA;tc.channel.sender.send_interval = 0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collecting unhandled exceptions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;application_insights&#39;&#xA;# setup unhandled exception handler&#xA;ApplicationInsights::UnhandledException.collect(&#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;)&#xA;# raise an exception and this would be send to Application Insights Service&#xA;raise Exception, &#39;Boom!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collecting requests for rack applications&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# set up the TrackRequest middleware in the rackup (config.ru) file&#xA;require &#39;application_insights&#39;&#xA;use ApplicationInsights::Rack::TrackRequest, &#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;, &amp;lt;buffer size&amp;gt;&#xA;# For rails, suggest to set up this middleware in application.rb so that unhandled exceptions from controllers are also collected&#xA;config.middleware.use &#39;ApplicationInsights::Rack::TrackRequest&#39;, &#39;&amp;lt;YOUR INSTRUMENTATION KEY GOES HERE&amp;gt;&#39;, &amp;lt;buffer size&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rerieving the Request-Id value from ApplicationInsights&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# from time to time you may need to access a request&#39;s id from within your app&#xA;application_insights_request_id = request.env[&#39;ApplicationInsights.request.id&#39;]&#xA;&#xA;# this can be used for a number of different purposes, including telemetry correlation&#xA;uri = URI(&#39;http://api.example.com/search/?q=test&#39;)&#xA;&#xA;req = Net::HTTP::Get.new(uri)&#xA;req[&#39;Request-Id&#39;] = &#34;#{application_insights_request_id}1&#34; if application_insights_request_id&#xA;&#xA;Net::HTTP.start(uri.hostname, uri.port) { |http| http.request(req) }&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>