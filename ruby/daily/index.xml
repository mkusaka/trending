<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-02T01:38:04Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pry/pry</title>
    <updated>2022-10-02T01:38:04Z</updated>
    <id>tag:github.com,2022-10-02:/pry/pry</id>
    <link href="https://github.com/pry/pry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A runtime developer console and IRB alternative with powerful introspection capabilities.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pry&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pry/pry/actions&#34;&gt;&lt;img src=&#34;https://github.com/pry/pry/workflows/pry/badge.svg?sanitize=true&#34; alt=&#34;Pry Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/pry/pry&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/pry/pry.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/pry&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/pry.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inch-ci.org/github/pry/pry&#34;&gt;&lt;img src=&#34;https://inch-ci.org/github/pry/pry.svg?branch=master&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/pry&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/dt/pry.svg?style=flat&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/zp8o63kquby2rln/pry_logo_350.png?raw=1&#34; alt=&#34;Pry logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;© John Mair (&lt;a href=&#34;https://twitter.com/banisterfiend&#34;&gt;banisterfiend&lt;/a&gt;) 2018&lt;br&gt; (Creator)&lt;/p&gt; &#xA;&lt;p&gt;© Kyrylo Silin (&lt;a href=&#34;https://twitter.com/kyrylosilin&#34;&gt;kyrylosilin&lt;/a&gt;) 2018&lt;br&gt; (Maintainer)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alumni:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Conrad Irwin&lt;/li&gt; &#xA; &lt;li&gt;Ryan Fitzgerald&lt;/li&gt; &#xA; &lt;li&gt;Robert Gleeson&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pry.github.io/&#34;&gt;https://pry.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rubydoc.info/gems/pry&#34;&gt;YARD API documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pry/pry/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#key-features&#34;&gt;Key features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#overview&#34;&gt;Overview&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#navigating-around-state&#34;&gt;Navigating around state&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#runtime-invocation&#34;&gt;Runtime invocation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#command-shell-integration&#34;&gt;Command Shell Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#code-browsing&#34;&gt;Code Browsing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#documentation-browsing&#34;&gt;Documentation Browsing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#edit-methods&#34;&gt;Edit methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#live-help-system&#34;&gt;Live Help System&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#use-pry-as-your-rails-console&#34;&gt;Use Pry as your Rails Console&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#syntax-highlighting&#34;&gt;Syntax Highlighting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#supported-rubies&#34;&gt;Supported Rubies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pry/pry/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Pry is a runtime developer console and IRB alternative with powerful introspection capabilities. Pry aims to be more than an IRB replacement. It is an attempt to bring REPL driven programming to the Ruby language.&lt;/p&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Source code browsing (including core C source with the pry-doc gem)&lt;/li&gt; &#xA; &lt;li&gt;Documentation browsing&lt;/li&gt; &#xA; &lt;li&gt;Live help system&lt;/li&gt; &#xA; &lt;li&gt;Open methods in editors (&lt;code&gt;edit Class#method&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting&lt;/li&gt; &#xA; &lt;li&gt;Command shell integration (start editors, run git, and rake from within Pry)&lt;/li&gt; &#xA; &lt;li&gt;Gist integration&lt;/li&gt; &#xA; &lt;li&gt;Navigation around state (&lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt; and friends)&lt;/li&gt; &#xA; &lt;li&gt;Runtime invocation (use Pry as a developer console or debugger)&lt;/li&gt; &#xA; &lt;li&gt;Exotic object support (BasicObject instances, IClasses, ...)&lt;/li&gt; &#xA; &lt;li&gt;A powerful and flexible command system&lt;/li&gt; &#xA; &lt;li&gt;Ability to view and replay history&lt;/li&gt; &#xA; &lt;li&gt;Many convenience commands inspired by IPython, Smalltalk and other advanced REPLs&lt;/li&gt; &#xA; &lt;li&gt;A wide-range number of &lt;a href=&#34;https://github.com/pry/pry/wiki/Available-plugins&#34;&gt;plugins&lt;/a&gt; that provide remote sessions, full debugging functionality, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Bundler&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;pry&#39;, &#39;~&amp;gt; 0.13.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install pry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Pry is fairly flexible and allows significant user &lt;a href=&#34;https://github.com/pry/pry/wiki/Customization-and-configuration&#34;&gt;customization&lt;/a&gt;. It is trivial to read from any object that has a &lt;code&gt;readline&lt;/code&gt; method and write to any object that has a &lt;code&gt;puts&lt;/code&gt; method. Many other aspects of Pry are also configurable, making it a good choice for implementing custom shells.&lt;/p&gt; &#xA;&lt;p&gt;Pry comes with an executable so it can be invoked at the command line. Just enter &lt;code&gt;pry&lt;/code&gt; to start. A &lt;code&gt;pryrc&lt;/code&gt; file in &lt;code&gt;$XDG_CONFIG_HOME/pry/&lt;/code&gt; or the user&#39;s home directory will be loaded if it exists. Type &lt;code&gt;pry --help&lt;/code&gt; at the command line for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;Nearly every piece of functionality in a Pry session is implemented as a command. Commands are not methods and must start at the beginning of a line, with no whitespace in between. Commands support a flexible syntax and allow &#39;options&#39; in the same way as shell commands, for example the following Pry command will show a list of all private instance methods (in scope) that begin with &#39;pa&#39;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(YARD::Parser::SourceParser):5&amp;gt; ls -Mp --grep ^pa&#xA;YARD::Parser::SourceParser#methods: parse  parser_class  parser_type  parser_type=  parser_type_for_filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Navigating around state&lt;/h3&gt; &#xA;&lt;p&gt;Pry allows us to pop in and out of different scopes (objects) using the &lt;code&gt;cd&lt;/code&gt; command. This enables us to explore the run-time view of a program or library. To view which variables and methods are available within a particular scope we use the versatile &lt;a href=&#34;https://gist.github.com/c0fc686ef923c8b87715&#34;&gt;ls command.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here we will begin Pry at top-level, then Pry on a class and then on an instance variable inside that class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(main)&amp;gt; class Hello&#xA;pry(main)*   @x = 20&#xA;pry(main)* end&#xA;=&amp;gt; 20&#xA;pry(main)&amp;gt; cd Hello&#xA;pry(Hello):1&amp;gt; ls -i&#xA;instance variables: @x&#xA;pry(Hello):1&amp;gt; cd @x&#xA;pry(20):2&amp;gt; self + 10&#xA;=&amp;gt; 30&#xA;pry(20):2&amp;gt; cd ..&#xA;pry(Hello):1&amp;gt; cd ..&#xA;pry(main)&amp;gt; cd ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The number after the &lt;code&gt;:&lt;/code&gt; in the pry prompt indicates the nesting level. To display more information about nesting, use the &lt;code&gt;nesting&lt;/code&gt; command. E.g&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(&#34;friend&#34;):3&amp;gt; nesting&#xA;Nesting status:&#xA;0. main (Pry top level)&#xA;1. Hello&#xA;2. 100&#xA;3. &#34;friend&#34;&#xA;=&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can then jump back to any of the previous nesting levels by using the &lt;code&gt;jump-to&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(&#34;friend&#34;):3&amp;gt; jump-to 1&#xA;=&amp;gt; 100&#xA;pry(Hello):1&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Runtime invocation&lt;/h3&gt; &#xA;&lt;p&gt;Pry can be invoked in the middle of a running program. It opens a Pry session at the point it&#39;s called and makes all program state at that point available. It can be invoked on any object using the &lt;code&gt;my_object.pry&lt;/code&gt; syntax or on the current binding (or any binding) using &lt;code&gt;binding.pry&lt;/code&gt;. The Pry session will then begin within the scope of the object (or binding). When the session ends the program continues with any modifications you made to it.&lt;/p&gt; &#xA;&lt;p&gt;This functionality can be used for such things as: debugging, implementing developer consoles and applying hot patches.&lt;/p&gt; &#xA;&lt;p&gt;code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# test.rb&#xA;require &#39;pry&#39;&#xA;&#xA;class A&#xA;  def hello() puts &#34;hello world!&#34; end&#xA;end&#xA;&#xA;a = A.new&#xA;&#xA;# start a REPL session&#xA;binding.pry&#xA;&#xA;# program resumes here (after pry session)&#xA;puts &#34;program resumes here.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pry session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(main)&amp;gt; a.hello&#xA;hello world!&#xA;=&amp;gt; nil&#xA;pry(main)&amp;gt; def a.goodbye&#xA;pry(main)*   puts &#34;goodbye cruel world!&#34;&#xA;pry(main)* end&#xA;=&amp;gt; :goodbye&#xA;pry(main)&amp;gt; a.goodbye&#xA;goodbye cruel world!&#xA;=&amp;gt; nil&#xA;pry(main)&amp;gt; exit&#xA;&#xA;program resumes here.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command Shell Integration&lt;/h3&gt; &#xA;&lt;p&gt;A line of input that begins with a &#39;.&#39; will be forwarded to the command shell. This enables us to navigate the file system, spawn editors, and run git and rake directly from within Pry.&lt;/p&gt; &#xA;&lt;p&gt;Further, we can use the &lt;code&gt;shell-mode&lt;/code&gt; command to incorporate the present working directory into the Pry prompt and bring in (limited at this stage, sorry) file name completion. We can also interpolate Ruby code directly into the shell by using the normal &lt;code&gt;#{}&lt;/code&gt; string interpolation syntax.&lt;/p&gt; &#xA;&lt;p&gt;In the code below we&#39;re going to switch to &lt;code&gt;shell-mode&lt;/code&gt; and edit the &lt;code&gt;pryrc&lt;/code&gt; file. We&#39;ll then cat its contents and reload the file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(main)&amp;gt; shell-mode&#xA;pry main:/home/john/ruby/projects/pry $ .cd ~&#xA;pry main:/home/john $ .emacsclient .pryrc&#xA;pry main:/home/john $ .cat .pryrc&#xA;def hello_world&#xA;  puts &#34;hello world!&#34;&#xA;end&#xA;pry main:/home/john $ load &#34;.pryrc&#34;&#xA;=&amp;gt; true&#xA;pry main:/home/john $ hello_world&#xA;hello world!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also interpolate Ruby code into the shell. In the example below we use the shell command &lt;code&gt;cat&lt;/code&gt; on a random file from the current directory and count the number of lines in that file with &lt;code&gt;wc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry main:/home/john $ .cat #{Dir[&#39;*.*&#39;].sample} | wc -l&#xA;44&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code Browsing&lt;/h3&gt; &#xA;&lt;p&gt;You can browse method source code with the &lt;code&gt;show-source&lt;/code&gt; command. Nearly all Ruby methods (and some C methods, with the pry-doc gem) can have their source viewed. Code that is longer than a page is sent through a pager (such as less), and all code is properly syntax highlighted (even C code).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;show-source&lt;/code&gt; command accepts two syntaxes, the typical ri &lt;code&gt;Class#method&lt;/code&gt; syntax and also simply the name of a method that&#39;s in scope. You can optionally pass the &lt;code&gt;-l&lt;/code&gt; option to &lt;code&gt;show-source&lt;/code&gt; to include line numbers in the output.&lt;/p&gt; &#xA;&lt;p&gt;In the following example we will enter the &lt;code&gt;Pry&lt;/code&gt; class, list the instance methods beginning with &#39;se&#39; and display the source code for the &lt;code&gt;set_last_result&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(main)&amp;gt; cd Pry&#xA;pry(Pry):1&amp;gt; ls -M --grep se&#xA;Pry#methods: raise_up  raise_up!  raise_up_common  reset_eval_string  select_prompt  set_last_result&#xA;pry(Pry):1&amp;gt; show-source set_last_result -l&#xA;&#xA;From: /home/john/ruby/projects/pry/lib/pry/pry_instance.rb:405:&#xA;Owner: Pry&#xA;Visibility: public&#xA;Signature: set_last_result(result, code=?)&#xA;Number of lines: 6&#xA;&#xA;405: def set_last_result(result, code = &#34;&#34;)&#xA;406:   @last_result_is_exception = false&#xA;407:   @output_ring &amp;lt;&amp;lt; result&#xA;408:&#xA;409:   self.last_result = result unless code =~ /\A\s*\z/&#xA;410: end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we can also view C methods (from Ruby Core) using the &lt;code&gt;pry-doc&lt;/code&gt; plugin; we also show off the alternate syntax for &lt;code&gt;show-source&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(main)&amp;gt; show-source Array#select&#xA;&#xA;From: array.c in Ruby Core (C Method):&#xA;Number of lines: 15&#xA;&#xA;static VALUE&#xA;rb_ary_select(VALUE ary)&#xA;{&#xA;    VALUE result;&#xA;    long i;&#xA;&#xA;    RETURN_ENUMERATOR(ary, 0, 0);&#xA;    result = rb_ary_new2(RARRAY_LEN(ary));&#xA;    for (i = 0; i &amp;lt; RARRAY_LEN(ary); i++) {&#xA;        if (RTEST(rb_yield(RARRAY_PTR(ary)[i]))) {&#xA;            rb_ary_push(result, rb_ary_elt(ary, i));&#xA;        }&#xA;    }&#xA;    return result;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation Browsing&lt;/h3&gt; &#xA;&lt;p&gt;One use-case for Pry is to explore a program at run-time by &lt;code&gt;cd&lt;/code&gt;-ing in and out of objects and viewing and invoking methods. In the course of exploring it may be useful to read the documentation for a specific method that you come across. &lt;code&gt;show-source&lt;/code&gt; command supports two syntaxes - the normal &lt;code&gt;ri&lt;/code&gt; syntax as well as accepting the name of any method that is currently in scope.&lt;/p&gt; &#xA;&lt;p&gt;The Pry documentation system does not rely on pre-generated &lt;code&gt;rdoc&lt;/code&gt; or &lt;code&gt;ri&lt;/code&gt;, instead it grabs the comments directly above the method on demand. This results in speedier documentation retrieval and allows the Pry system to retrieve documentation for methods that would not be picked up by &lt;code&gt;rdoc&lt;/code&gt;. Pry also has a basic understanding of both the rdoc and yard formats and will attempt to syntax highlight the documentation appropriately.&lt;/p&gt; &#xA;&lt;p&gt;Nonetheless, the &lt;code&gt;ri&lt;/code&gt; functionality is very good and has an advantage over Pry&#39;s system in that it allows documentation lookup for classes as well as methods. Pry therefore has good integration with &lt;code&gt;ri&lt;/code&gt; through the &lt;code&gt;ri&lt;/code&gt; command. The syntax for the command is exactly as it would be in command-line - so it is not necessary to quote strings.&lt;/p&gt; &#xA;&lt;p&gt;In our example we will enter the &lt;code&gt;Gem&lt;/code&gt; class and view the documentation for the &lt;code&gt;try_activate&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(main)&amp;gt; cd Gem&#xA;pry(Gem):1&amp;gt; show-source try_activate -d&#xA;&#xA;From: /Users/john/rbenv/versions/2.7.1/lib/ruby/2.7.0/rubygems.rb:194:&#xA;Owner: #&amp;lt;Class:Gem&amp;gt;&#xA;Visibility: public&#xA;Signature: try_activate(path)&#xA;Number of lines: 28&#xA;&#xA;Try to activate a gem containing path. Returns true if&#xA;activation succeeded or wasn&#39;t needed because it was already&#xA;activated. Returns false if it can&#39;t find the path in a gem.&#xA;&#xA;def self.try_activate(path)&#xA;  # finds the _latest_ version... regardless of loaded specs and their deps&#xA;  # if another gem had a requirement that would mean we shouldn&#39;t&#xA;  # activate the latest version, then either it would already be activated&#xA;  # or if it was ambiguous (and thus unresolved) the code in our custom&#xA;  # require will try to activate the more specific version.&#xA;&#xA;  spec = Gem::Specification.find_by_path path&#xA;pry(Gem):1&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also use &lt;code&gt;ri&lt;/code&gt; in the normal way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(main) ri Array#each&#xA;----------------------------------------------------------- Array#each&#xA;     array.each {|item| block }   -&amp;gt;   array&#xA;------------------------------------------------------------------------&#xA;     Calls _block_ once for each element in _self_, passing that element&#xA;     as a parameter.&#xA;&#xA;        a = [ &#34;a&#34;, &#34;b&#34;, &#34;c&#34; ]&#xA;        a.each {|x| print x, &#34; -- &#34; }&#xA;&#xA;     produces:&#xA;&#xA;        a -- b -- c --&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edit methods&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;edit Class#method&lt;/code&gt; or &lt;code&gt;edit my_method&lt;/code&gt; (if the method is in scope) to open a method for editing directly in your favorite editor. Pry has knowledge of a few different editors and will attempt to open the file at the line the method is defined.&lt;/p&gt; &#xA;&lt;p&gt;You can set the editor to use by assigning to the &lt;code&gt;Pry.editor&lt;/code&gt; accessor. &lt;code&gt;Pry.editor&lt;/code&gt; will default to &lt;code&gt;$EDITOR&lt;/code&gt; or failing that will use &lt;code&gt;nano&lt;/code&gt; as the backup default. The file that is edited will be automatically reloaded after exiting the editor - reloading can be suppressed by passing the &lt;code&gt;--no-reload&lt;/code&gt; option to &lt;code&gt;edit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the example below we will set our default editor to &#34;emacsclient&#34; and open the &lt;code&gt;Pry#repl&lt;/code&gt; method for editing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pry(main)&amp;gt; Pry.editor = &#34;emacsclient&#34;&#xA;pry(main)&amp;gt; edit Pry#repl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Live Help System&lt;/h3&gt; &#xA;&lt;p&gt;Many other commands are available in Pry; to see the full list type &lt;code&gt;help&lt;/code&gt; at the prompt. A short description of each command is provided with basic instructions for use; some commands have a more extensive help that can be accessed via typing &lt;code&gt;command_name --help&lt;/code&gt;. A command will typically say in its description if the &lt;code&gt;--help&lt;/code&gt; option is available.&lt;/p&gt; &#xA;&lt;h3&gt;Use Pry as your Rails Console&lt;/h3&gt; &#xA;&lt;p&gt;The recommended way to use Pry as your Rails console is to add &lt;a href=&#34;https://github.com/rweng/pry-rails&#34;&gt;the &lt;code&gt;pry-rails&lt;/code&gt; gem&lt;/a&gt; to your Gemfile. This replaces the default console with Pry, in addition to loading the Rails console helpers and adding some useful Rails-specific commands.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to change your Gemfile, you can still run a Pry console in your app&#39;s environment using Pry&#39;s &lt;code&gt;-r&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pry -r ./config/environment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also check out the &lt;a href=&#34;https://github.com/pry/pry/wiki/Setting-up-Rails-or-Heroku-to-use-Pry&#34;&gt;wiki&lt;/a&gt; for more information about integrating Pry with Rails.&lt;/p&gt; &#xA;&lt;h3&gt;Syntax Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;Syntax highlighting is on by default in Pry. If you want to change the colors, check out the &lt;a href=&#34;https://github.com/kyrylo/pry-theme&#34;&gt;pry-theme&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;p&gt;You can toggle the syntax highlighting on and off in a session by using the &lt;code&gt;toggle-color&lt;/code&gt; command. Alternatively, you can turn it off permanently by putting the line &lt;code&gt;Pry.color = false&lt;/code&gt; in your &lt;code&gt;pryrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Rubies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CRuby &amp;gt;= 2.0.0&lt;/li&gt; &#xA; &lt;li&gt;JRuby &amp;gt;= 9.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;In case you have a problem, question or a bug report, feel free to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ask a question on IRC (#pry on Freenode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pry/pry/issues&#34;&gt;file an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/pryruby&#34;&gt;tweet at us&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project uses the MIT License. See LICENSE.md for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Pry is primarily the work of &lt;a href=&#34;https://github.com/banister&#34;&gt;John Mair (banisterfiend)&lt;/a&gt;, for full list of contributors see the &lt;a href=&#34;https://github.com/pry/pry/graphs/contributors&#34;&gt;contributors graph&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>titusfortner/webdrivers</title>
    <updated>2022-10-02T01:38:04Z</updated>
    <id>tag:github.com,2022-10-02:/titusfortner/webdrivers</id>
    <link href="https://github.com/titusfortner/webdrivers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Keep your Selenium WebDrivers updated automatically&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Webdrivers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/webdrivers&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/webdrivers.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/titusfortner/webdrivers/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run Selenium tests more easily with automatic installation and updates for all supported webdrivers.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;webdrivers&lt;/code&gt; downloads drivers and directs Selenium to use them. Currently supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://chromedriver.chromium.org/&#34;&gt;chromedriver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mozilla/geckodriver&#34;&gt;geckodriver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver&#34;&gt;IEDriverServer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/&#34;&gt;msedgedriver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Works on macOS, Linux, Windows, and Windows Subsystem for Linux (WSL) v1 and v2. And do see the browser and OS specific notes at the bottom.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;webdrivers&#39;, &#39;~&amp;gt; 5.0&#39;, require: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;webdrivers&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The drivers will now be automatically downloaded or updated when you launch a browser through Selenium.&lt;/p&gt; &#xA;&lt;h3&gt;Specific Drivers&lt;/h3&gt; &#xA;&lt;p&gt;If you want webdrivers to only manage specific drivers you can specify one or more as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;webdrivers/chromedriver&#39;&#xA;require &#39;webdrivers/geckodriver&#39;&#xA;require &#39;webdrivers/iedriver&#39;&#xA;require &#39;webdrivers/edgedriver&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download Location&lt;/h3&gt; &#xA;&lt;p&gt;The default download location is &lt;code&gt;~/.webdrivers&lt;/code&gt; directory, and this is configurable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Webdrivers.install_dir = &#39;/webdrivers/install/dir&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can define the path via the &lt;code&gt;WD_INSTALL_DIR&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;Version Pinning&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to use a specific (older or beta) version, you can specify it for each driver. Otherwise, the latest (stable) driver will be downloaded and passed to Selenium.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Chrome&#xA;Webdrivers::Chromedriver.required_version = &#39;2.46&#39;&#xA;&#xA;# Firefox&#xA;Webdrivers::Geckodriver.required_version  = &#39;0.23.0&#39;&#xA;&#xA;# Internet Explorer&#xA;Webdrivers::IEdriver.required_version     = &#39;3.14.0&#39;&#xA;&#xA;# Edge (Chromium)&#xA;Webdrivers::Edgedriver.required_version   = &#39;76.0.183.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can explicitly trigger the update in your code, but this will happen automatically when the driver is initialized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Webdrivers::Chromedriver.update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caching Drivers&lt;/h3&gt; &#xA;&lt;p&gt;You can set Webdrivers to only look for updates if the previous check was longer ago than a specified number of seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Webdrivers.cache_time = 86_400 # Default: 86,400 Seconds (24 hours)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can define this value via the &lt;code&gt;WD_CACHE_TIME&lt;/code&gt; environment variable. &lt;strong&gt;Only set one to avoid confusion&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Special exception for chromedriver and msedgedriver&lt;/h5&gt; &#xA;&lt;p&gt;Cache time will be respected as long as a driver binary exists and the major.minor.build versions of the browser and the driver match. For example, if you update Chrome or Edge to v76.0.123 and its driver is still at v76.0.100, &lt;code&gt;webdrivers&lt;/code&gt; will ignore the cache time and update the driver to make sure you&#39;re using a compatible build version.&lt;/p&gt; &#xA;&lt;h3&gt;Proxy&lt;/h3&gt; &#xA;&lt;p&gt;If there is a proxy between you and the Internet then you will need to configure the gem to use the proxy. You can do this by calling the &lt;code&gt;configure&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Webdrivers.configure do |config|&#xA;  config.proxy_addr = &#39;myproxy_address.com&#39;&#xA;  config.proxy_port = &#39;8080&#39;&#xA;  config.proxy_user = &#39;username&#39;&#xA;  config.proxy_pass = &#39;password&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;SSL_connect&lt;/code&gt; errors&lt;/h3&gt; &#xA;&lt;p&gt;If you are getting an error like this (especially common on Windows):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;net_http_ssl_fix&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net_http_ssl_fix&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other solutions are documented on the RubyGems &lt;a href=&#34;https://guides.rubygems.org/ssl-certificate-update/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rake tasks&lt;/h3&gt; &#xA;&lt;p&gt;Each driver has its own set of &lt;code&gt;rake&lt;/code&gt; tasks (with &lt;code&gt;Railtie&lt;/code&gt; support) that you can call once before executing the tests. These are especially useful if you&#39;re running tests in parallel and want to avoid performing an update check per thread.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Rails default configuration the &lt;code&gt;webdrivers&lt;/code&gt; gem will only be loaded in the test group so you will need to specify the test environment when using the tasks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RAILS_ENV=test rails webdrivers:chromedriver:update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not using Rails, you&#39;ll need to load them into your Rakefile like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;webdrivers&#39;&#xA;load &#39;webdrivers/Rakefile&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full list of available tasks is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec rake -T&#xA;rake webdrivers:chromedriver:remove           # Force remove chromedriver&#xA;rake webdrivers:chromedriver:update[version]  # Remove and download updated chromedriver if necessary&#xA;rake webdrivers:chromedriver:version          # Print current chromedriver version&#xA;rake webdrivers:edgedriver:remove             # Force remove msedgedriver&#xA;rake webdrivers:edgedriver:update[version]    # Remove and download updated msedgedriver if necessary&#xA;rake webdrivers:edgedriver:version            # Print current msedgedriver version&#xA;rake webdrivers:geckodriver:remove            # Force remove geckodriver&#xA;rake webdrivers:geckodriver:update[version]   # Remove and download updated geckodriver if necessary&#xA;rake webdrivers:geckodriver:version           # Print current geckodriver version&#xA;rake webdrivers:iedriver:remove               # Force remove IEDriverServer&#xA;rake webdrivers:iedriver:update[version]      # Remove and download updated IEDriverServer if necessary&#xA;rake webdrivers:iedriver:version              # Print current IEDriverServer version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These tasks respect the &lt;code&gt;WD_INSTALL_DIR&lt;/code&gt;, &lt;code&gt;WD_CACHE_TIME&lt;/code&gt;, &lt;code&gt;WD_CHROME_PATH&lt;/code&gt;, and &lt;code&gt;WD_EDGE_CHROME_PATH&lt;/code&gt; environment variables, which can also be passed through the &lt;code&gt;rake&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec rake webdrivers:chromedriver:update[2.46] webdrivers:geckodriver:update[0.24.0] WD_CACHE_TIME=86_400 WD_INSTALL_DIR=&#39;my_dir&#39;&#xA;2019-05-20 19:03:01 INFO Webdrivers Updated to chromedriver 2.46.628388&#xA;2019-05-20 19:03:04 INFO Webdrivers Updated to geckodriver 0.24.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that these tasks do not use any of the configurations from your project (code) and only respect the &lt;code&gt;ENV&lt;/code&gt; variables and the version (optional) passed to the &lt;code&gt;rake&lt;/code&gt; tasks.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;The logging level can be configured for debugging purpose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Webdrivers.logger.level = :DEBUG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browser &amp;amp; OS Specific Notes&lt;/h3&gt; &#xA;&lt;h4&gt;Chrome/Chromium&lt;/h4&gt; &#xA;&lt;p&gt;The version of &lt;code&gt;chromedriver&lt;/code&gt; will depend on the version of Chrome you are using it with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For versions &amp;gt;= 70, the downloaded version of &lt;code&gt;chromedriver&lt;/code&gt; will match the installed version of Google Chrome. More information &lt;a href=&#34;http://chromedriver.chromium.org/downloads/version-selection&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For versions &amp;lt;= 69, &lt;code&gt;chromedriver&lt;/code&gt; version 2.41 will be downloaded.&lt;/li&gt; &#xA; &lt;li&gt;For beta versions, you&#39;ll have to require the beta version of &lt;code&gt;chromedriver&lt;/code&gt; using &lt;code&gt;Webdrivers::Chromedriver.required_version&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The gem looks for the Chrome/Chromium version that &lt;code&gt;chromedriver&lt;/code&gt; will use by default. You can override this behavior by providing a path to the browser binary you want to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Selenium::WebDriver::Chrome.path = &#39;/chromium/install/path/to/binary&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can define the path via the &lt;code&gt;WD_CHROME_PATH&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;This is also required if Google Chrome is not installed in its &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver&#34;&gt;default location&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Chrome on Heroku&lt;/h4&gt; &#xA;&lt;p&gt;Follow the specific instructions &lt;a href=&#34;https://github.com/titusfortner/webdrivers/wiki/Heroku-buildpack-google-chrome&#34;&gt;here&lt;/a&gt; if you&#39;re using &lt;code&gt;heroku-buildpack-google-chrome&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Microsoft Edge (Chromium)&lt;/h4&gt; &#xA;&lt;p&gt;Microsoft Edge (Chromium) support was added in v4.1.0. Notes from the &lt;a href=&#34;https://github.com/titusfortner/webdrivers#chromechromium&#34;&gt;Chrome/Chromium&lt;/a&gt; section apply to this browser as well.&lt;/p&gt; &#xA;&lt;p&gt;Please note that &lt;code&gt;msedgedriver&lt;/code&gt; requires &lt;code&gt;selenium-webdriver&lt;/code&gt; v4.&lt;/p&gt; &#xA;&lt;h4&gt;WSLv1 support&lt;/h4&gt; &#xA;&lt;p&gt;While WSLv1 is not designed to run headful applications like Chrome, it can run exes; as such when found to be running in WSL, &lt;code&gt;webdrivers&lt;/code&gt; will use Chrome on the Windows filesystem.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended that you install the new PowerShell (PS7) to avoid &lt;a href=&#34;https://github.com/microsoft/terminal/issues/367&#34;&gt;a known issue&lt;/a&gt; with the console font being changed when calling the old PowerShell (PS5).&lt;/p&gt; &#xA;&lt;h4&gt;WSLv2 support&lt;/h4&gt; &#xA;&lt;p&gt;Webdrivers will detect WSLv2 as running on Linux and use Chrome on the Linux filesystem.&lt;/p&gt; &#xA;&lt;p&gt;WSLv2 doesn&#39;t support connecting to host ports out of the box, so it isn&#39;t possible to connect to Chromedriver on Windows without extra configurations, see: &lt;a href=&#34;https://github.com/microsoft/WSL/issues/4619&#34;&gt;https://github.com/microsoft/WSL/issues/4619&lt;/a&gt;. The simplest way to use Chromedriver with WSLv2 is to run Chrome headless on Linux.&lt;/p&gt; &#xA;&lt;h4&gt;Chrome and Edge on Apple M1 (&lt;code&gt;arm64&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re switching from Intel to M1, you&#39;ll have to manually delete the existing Intel (&lt;code&gt;mac64&lt;/code&gt;) driver before the M1 (&lt;code&gt;arm64&lt;/code&gt;) build can be downloaded. Otherwise, you&#39;ll get an error: &lt;code&gt;Bad CPU type in executable - ~/.webdrivers/chromedriver (Errno::E086)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/titusfortner/webdrivers/wiki&#34;&gt;wiki&lt;/a&gt; for solutions to commonly reported issues.&lt;/p&gt; &#xA;&lt;p&gt;Join us in the &lt;code&gt;#webdrivers-gem&lt;/code&gt; channel on &lt;a href=&#34;https://seleniumhq.herokuapp.com/&#34;&gt;Slack&lt;/a&gt; if you have any questions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;, see LICENSE.txt for full details and copyright.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome &lt;a href=&#34;https://github.com/titusfortner/webdrivers&#34;&gt;on GitHub&lt;/a&gt;. Run &lt;code&gt;bundle exec rake&lt;/code&gt; and squash the commits in your PRs.&lt;/p&gt;</summary>
  </entry>
</feed>