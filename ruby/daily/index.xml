<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:37:53Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ruby/rake</title>
    <updated>2023-01-01T01:37:53Z</updated>
    <id>tag:github.com,2023-01-01:/ruby/rake</id>
    <link href="https://github.com/ruby/rake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A make-like build utility for Ruby.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;= RAKE -- Ruby Make&lt;/p&gt; &#xA;&lt;p&gt;home :: &lt;a href=&#34;https://github.com/ruby/rake&#34;&gt;https://github.com/ruby/rake&lt;/a&gt; bugs :: &lt;a href=&#34;https://github.com/ruby/rake/issues&#34;&gt;https://github.com/ruby/rake/issues&lt;/a&gt; docs :: &lt;a href=&#34;https://ruby.github.io/rake&#34;&gt;https://ruby.github.io/rake&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;== Description&lt;/p&gt; &#xA;&lt;p&gt;Rake is a Make-like program implemented in Ruby. Tasks and dependencies are specified in standard Ruby syntax.&lt;/p&gt; &#xA;&lt;p&gt;Rake has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Rakefiles (rake&#39;s version of Makefiles) are completely defined in standard Ruby syntax. No XML files to edit. No quirky Makefile syntax to worry about (is that a tab or a space?)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Users can specify tasks with prerequisites.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rake supports rule patterns to synthesize implicit tasks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flexible FileLists that act like arrays but know about manipulating file names and paths.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A library of prepackaged tasks to make building rakefiles easier. For example, tasks for building tarballs. (Formerly tasks for building RDoc, Gems, and publishing to FTP were included in rake but they&#39;re now available in RDoc, RubyGems, and rake-contrib respectively.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports parallel execution of tasks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Installation&lt;/p&gt; &#xA;&lt;p&gt;=== Gem Installation&lt;/p&gt; &#xA;&lt;p&gt;Download and install rake with the following.&lt;/p&gt; &#xA;&lt;p&gt;gem install rake&lt;/p&gt; &#xA;&lt;p&gt;== Usage&lt;/p&gt; &#xA;&lt;p&gt;=== Simple Example&lt;/p&gt; &#xA;&lt;p&gt;First, you must write a &#34;Rakefile&#34; file which contains the build rules. Here&#39;s a simple example:&lt;/p&gt; &#xA;&lt;p&gt;task default: %w[test]&lt;/p&gt; &#xA;&lt;p&gt;task :test do ruby &#34;test/unittest.rb&#34; end&lt;/p&gt; &#xA;&lt;p&gt;This Rakefile has two tasks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A task named &#34;test&#34;, which -- upon invocation -- will run a unit test file in Ruby.&lt;/li&gt; &#xA; &lt;li&gt;A task named &#34;default&#34;. This task does nothing by itself, but it has exactly one dependency, namely the &#34;test&#34; task. Invoking the &#34;default&#34; task will cause Rake to invoke the &#34;test&#34; task as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Running the &#34;rake&#34; command without any options will cause it to run the &#34;default&#34; task in the Rakefile:&lt;/p&gt; &#xA;&lt;p&gt;% ls Rakefile test/ % rake (in /home/some_user/Projects/rake) ruby test/unittest.rb ....unit test output here...&lt;/p&gt; &#xA;&lt;p&gt;Type &#34;rake --help&#34; for all available options.&lt;/p&gt; &#xA;&lt;p&gt;== Resources&lt;/p&gt; &#xA;&lt;p&gt;=== Rake Information&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Rake command-line}[link:doc/command_line_usage.rdoc]&lt;/li&gt; &#xA; &lt;li&gt;{Writing Rakefiles}[link:doc/rakefile.rdoc]&lt;/li&gt; &#xA; &lt;li&gt;The original {Rake announcement}[link:doc/rational.rdoc]&lt;/li&gt; &#xA; &lt;li&gt;Rake {glossary}[link:doc/glossary.rdoc]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=== Presentations and Articles about Rake&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avdi Grimm&#39;s rake series: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;{Rake Basics}[https://avdi.codes/rake-part-1-basics/]&lt;/li&gt; &#xA;   &lt;li&gt;{Rake File Lists}[https://avdi.codes/rake-part-2-file-lists-2/]&lt;/li&gt; &#xA;   &lt;li&gt;{Rake Rules}[https://avdi.codes/rake-part-3-rules/]&lt;/li&gt; &#xA;   &lt;li&gt;{Rake Pathmap}[https://avdi.codes/rake-part-4-pathmap/]&lt;/li&gt; &#xA;   &lt;li&gt;{File Operations}[https://avdi.codes/rake-part-5-file-operations/]&lt;/li&gt; &#xA;   &lt;li&gt;{Clean and Clobber}[https://avdi.codes/rake-part-6-clean-and-clobber/]&lt;/li&gt; &#xA;   &lt;li&gt;{MultiTask}[https://avdi.codes/rake-part-7-multitask/]&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;{Jim Weirich&#39;s 2003 RubyConf presentation}[https://web.archive.org/web/20140221123354/http://onestepback.org/articles/buildingwithrake/]&lt;/li&gt; &#xA; &lt;li&gt;Martin Fowler&#39;s article on Rake: &lt;a href=&#34;https://martinfowler.com/articles/rake.html&#34;&gt;https://martinfowler.com/articles/rake.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Other Make Re-envisionings ...&lt;/p&gt; &#xA;&lt;p&gt;Rake is a late entry in the make replacement field. Here are links to other projects with similar (and not so similar) goals.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://directory.fsf.org/wiki/Bras&#34;&gt;https://directory.fsf.org/wiki/Bras&lt;/a&gt; -- Bras, one of earliest implementations of &#34;make in a scripting language&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.a-a-p.org&#34;&gt;http://www.a-a-p.org&lt;/a&gt; -- Make in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ant.apache.org&#34;&gt;https://ant.apache.org&lt;/a&gt; -- The Ant project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://search.cpan.org/search?query=PerlBuildSystem&#34;&gt;https://search.cpan.org/search?query=PerlBuildSystem&lt;/a&gt; -- The Perl Build System&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rubydoc.info/gems/rant/0.5.7/frames&#34;&gt;https://www.rubydoc.info/gems/rant/0.5.7/frames&lt;/a&gt; -- Rant, another Ruby make tool.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Credits&lt;/p&gt; &#xA;&lt;p&gt;[&lt;b&gt;Jim Weirich&lt;/b&gt;] Who originally created Rake.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;b&gt;Ryan Dlugosz&lt;/b&gt;] For the initial conversation that sparked Rake.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;b&gt;Nobuyoshi Nakada &lt;a href=&#34;mailto:nobu@ruby-lang.org&#34;&gt;nobu@ruby-lang.org&lt;/a&gt;&lt;/b&gt;] For the initial patch for rule support.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;b&gt;Tilman Sauerbeck &lt;a href=&#34;mailto:tilman@code-monkey.de&#34;&gt;tilman@code-monkey.de&lt;/a&gt;&lt;/b&gt;] For the recursive rule patch.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;b&gt;Eric Hodel&lt;/b&gt;] For aid in maintaining rake.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;b&gt;Hiroshi SHIBATA&lt;/b&gt;] Maintainer of Rake 10 and later&lt;/p&gt; &#xA;&lt;p&gt;== License&lt;/p&gt; &#xA;&lt;p&gt;Rake is available under an MIT-style license.&lt;/p&gt; &#xA;&lt;p&gt;:include: MIT-LICENSE&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;= Other stuff&lt;/p&gt; &#xA;&lt;p&gt;Author:: Jim Weirich &lt;a href=&#34;mailto:jim.weirich@gmail.com&#34;&gt;jim.weirich@gmail.com&lt;/a&gt; Requires:: Ruby 2.0.0 or later License:: Copyright Jim Weirich. Released under an MIT-style license. See the MIT-LICENSE file included in the distribution.&lt;/p&gt; &#xA;&lt;p&gt;== Warranty&lt;/p&gt; &#xA;&lt;p&gt;This software is provided &#34;as is&#34; and without any express or implied warranties, including, without limitation, the implied warranties of merchantability and fitness for a particular purpose.&lt;/p&gt; &#xA;&lt;p&gt;== Historical&lt;/p&gt; &#xA;&lt;p&gt;Rake was originally created by Jim Weirich, who unfortunately passed away in February 2014. This repository was originally hosted at {github.com/jimweirich/rake}[https://github.com/jimweirich/rake/], however with his passing, has been moved to {ruby/rake}[https://github.com/ruby/rake].&lt;/p&gt; &#xA;&lt;p&gt;You can view Jim&#39;s last commit here: &lt;a href=&#34;https://github.com/jimweirich/rake/tree/336559f28f55bce418e2ebcc0a57548dcbac4025&#34;&gt;https://github.com/jimweirich/rake/tree/336559f28f55bce418e2ebcc0a57548dcbac4025&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can {read more about Jim}[https://en.wikipedia.org/wiki/Jim_Weirich] at Wikipedia.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for this great tool, Jim. We&#39;ll remember you.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>prontolabs/pronto</title>
    <updated>2023-01-01T01:37:53Z</updated>
    <id>tag:github.com,2023-01-01:/prontolabs/pronto</id>
    <link href="https://github.com/prontolabs/pronto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quick automated code review of your changes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pronto&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/prontolabs/pronto&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/prontolabs/pronto.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/prontolabs/pronto&#34;&gt;&lt;img src=&#34;https://img.shields.io/codeclimate/coverage/prontolabs/pronto.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/prontolabs/pronto&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/prontolabs/pronto.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/rb/pronto&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/pronto.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/prontolabs/pronto&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/prontolabs/pronto.svg?sanitize=true&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pronto&lt;/strong&gt; runs analysis quickly by checking only the relevant changes. Created to be used on &lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#github-integration&#34;&gt;GitHub pull requests&lt;/a&gt;, but also works &lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#local-changes&#34;&gt;locally&lt;/a&gt; and integrates with &lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#gitlab-integration&#34;&gt;GitLab&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#bitbucket-integration&#34;&gt;Bitbucket&lt;/a&gt;. Perfect if you want to find out quickly if a branch introduces changes that conform to your &lt;a href=&#34;https://github.com/prontolabs/pronto-rubocop&#34;&gt;styleguide&lt;/a&gt;, &lt;a href=&#34;https://github.com/prontolabs/pronto-flay&#34;&gt;are DRY&lt;/a&gt;, &lt;a href=&#34;https://github.com/prontolabs/pronto-brakeman&#34;&gt;don&#39;t introduce security holes&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#runners&#34;&gt;more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/pronto.gif&#34; alt=&#34;Pronto demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This README might be ahead of the latest release. Find the README for v0.9.2 &lt;a href=&#34;https://github.com/prontolabs/pronto/raw/v0.9.2/README.md&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#local-changes&#34;&gt;Local Changes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#github-integration&#34;&gt;GitHub Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#gitlab-integration&#34;&gt;GitLab Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#bitbucket-integration&#34;&gt;Bitbucket Integration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#runners&#34;&gt;Runners&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#articles&#34;&gt;Articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pronto&lt;/strong&gt;&#39;s installation is standard for a Ruby gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gem install pronto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also want to install some &lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/#runners&#34;&gt;runners&lt;/a&gt; to go along with the main gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gem install pronto-rubocop&#xA;$ gem install pronto-flay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d rather install Pronto using &lt;code&gt;bundler&lt;/code&gt;, you don&#39;t need to require it, unless you&#39;re gonna run it from Ruby (via Rake task, for example):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;pronto&#39;&#xA;gem &#39;pronto-rubocop&#39;, require: false&#xA;gem &#39;pronto-flay&#39;, require: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Pronto runs the checks on a diff between the current HEAD and the provided commit-ish (default is master).&lt;/p&gt; &#xA;&lt;h3&gt;Local Changes&lt;/h3&gt; &#xA;&lt;p&gt;Navigate to the repository you want to run Pronto on, and:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout feature/branch&#xA;&#xA;# Analyze diff of committed changes on current branch and master:&#xA;pronto run&#xA;&#xA;# Analyze changes in git staging area&#xA;pronto run --staged&#xA;&#xA;# Analyze diff of uncommitted changes and master:&#xA;pronto run --unstaged&#xA;&#xA;# Analyze *all* changes since the *initial* commit (may take some time):&#xA;pronto run --commit=$(git log --pretty=format:%H | tail -1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just run &lt;code&gt;pronto&lt;/code&gt; without any arguments to see what Pronto is capable of.&lt;/p&gt; &#xA;&lt;p&gt;Available Options&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command flag&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--exit-code&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Exits with non-zero code if there were any warnings/errors.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;-c/--commit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Commit for the diff.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--staged&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Analyze changes in git staging area&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--unstaged&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Analyze changes made, but not in git staging area&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;-r/--runner&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Run only the passed runners.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;-f/--formatters&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pick output formatters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;GitHub Integration&lt;/h3&gt; &#xA;&lt;p&gt;You can run Pronto as a step of your CI builds and get the results as comments on GitHub commits using &lt;code&gt;GithubFormatter&lt;/code&gt; or &lt;code&gt;GithubPullRequestFormatter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add Pronto runners you want to use to your Gemfile:&lt;/p&gt; &#xA;&lt;p&gt;Set the PRONTO_GITHUB_ACCESS_TOKEN environment variable or value in &lt;code&gt;.pronto.yml&lt;/code&gt; to &lt;a href=&#34;https://help.github.com/articles/creating-an-access-token-for-command-line-use&#34;&gt;OAuth token&lt;/a&gt; that has access to the repository.&lt;/p&gt; &#xA;&lt;p&gt;Then just run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_GITHUB_ACCESS_TOKEN=token pronto run -f github -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want comments to appear on pull request diff, instead of commit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_GITHUB_ACCESS_TOKEN=token pronto run -f github_pr -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want review to appear on pull request diff, instead of separate comments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_GITHUB_ACCESS_TOKEN=token pronto run -f github_pr_review -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the &lt;strong&gt;N&lt;/strong&gt; pending comments will be now separated into &lt;strong&gt;X&lt;/strong&gt; number of PR reviews. The number of the PR reviews will be controlled by an additional environment variable or with the help of a config setting. This way, by a single pronto run, all the comments will be published to the PR, but divided into small reviews in order to avoid the rate limit of the providers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;X = N / {PRONTO_WARNINGS_PER_REVIEW || warnings_per_review || 30})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: In case no environment variable or config setting is specified in &lt;code&gt;.pronto.yml&lt;/code&gt;, a default value of &lt;code&gt;30&lt;/code&gt; will be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_WARNINGS_PER_REVIEW=30 PRONTO_GITHUB_ACCESS_TOKEN=token pronto run -f github_pr_review -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;GithubStatusFormatter&lt;/code&gt; to submit &lt;a href=&#34;https://github.com/blog/1227-commit-status-api&#34;&gt;commit status&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_GITHUB_ACCESS_TOKEN=token pronto run -f github_status -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to show a one single status for all runners, instead of status per runner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_GITHUB_ACCESS_TOKEN=token pronto run -f github_combined_status -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s possible to combine multiple formatters. To get both pull request comments and commit status summary use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_GITHUB_ACCESS_TOKEN=token PRONTO_PULL_REQUEST_ID=id pronto run -f github_status github_pr -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an alternative, you can also set up a rake task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Pronto::GemNames.new.to_a.each { |gem_name| require &#34;pronto/#{gem_name}&#34; }&#xA;&#xA;formatter = Pronto::Formatter::GithubFormatter.new # also possible: GithubPullRequestFormatter, GithubPullRequestReviewFormatter&#xA;status_formatter = Pronto::Formatter::GithubStatusFormatter.new&#xA;formatters = [formatter, status_formatter]&#xA;Pronto.run(&#39;origin/master&#39;, &#39;.&#39;, formatters)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GitHub Actions Integration&lt;/h4&gt; &#xA;&lt;p&gt;You can also run Pronto as a GitHub action.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example &lt;code&gt;.github/workflows/pronto.yml&lt;/code&gt; workflow file using the &lt;code&gt;github_status&lt;/code&gt; and &lt;code&gt;github_pr&lt;/code&gt; formatters and running on each GitHub PR, with &lt;code&gt;pronto-rubocop&lt;/code&gt; as the runner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;name: Pronto&#xA;on: [pull_request]&#xA;&#xA;jobs:&#xA;  pronto:&#xA;&#xA;    runs-on: ubuntu-latest&#xA;&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v2&#xA;      - run: |&#xA;          git fetch --no-tags --prune --depth=10 origin +refs/heads/*:refs/remotes/origin/*&#xA;      - name: Setup Ruby&#xA;        uses: ruby/setup-ruby@v1&#xA;      - name: Setup pronto&#xA;        run: gem install pronto pronto-rubocop&#xA;      - name: Run Pronto&#xA;        run: pronto run -f github_status github_pr -c origin/${{ github.base_ref }}&#xA;        env:&#xA;          PRONTO_PULL_REQUEST_ID: ${{ github.event.pull_request.number }}&#xA;          PRONTO_GITHUB_ACCESS_TOKEN: &#34;${{ github.token }}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;check Wiki on &lt;a href=&#34;https://github.com/prontolabs/pronto/wiki/GitHub-Actions-Integration&#34;&gt;GitHub Actions Integration&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;GitLab Integration&lt;/h3&gt; &#xA;&lt;p&gt;You can run Pronto as a step of your CI builds and get the results as comments on GitLab commits using &lt;code&gt;GitlabFormatter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;note: this requires at least GitLab v7.5.0&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;PRONTO_GITLAB_API_ENDPOINT&lt;/code&gt; environment variable or value in &lt;code&gt;.pronto.yml&lt;/code&gt; to your API endpoint URL. If you are using Gitlab.com&#39;s hosted service your endpoint will be set by default. Set the &lt;code&gt;PRONTO_GITLAB_API_PRIVATE_TOKEN&lt;/code&gt; environment variable or value in &lt;code&gt;.pronto.yml&lt;/code&gt; to your Gitlab private token which you can find in your account settings.&lt;/p&gt; &#xA;&lt;p&gt;Then just run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_GITLAB_API_PRIVATE_TOKEN=token pronto run -f gitlab -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;note: this requires at least Gitlab 11.6+&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Merge request integration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_GITLAB_API_PRIVATE_TOKEN=token PRONTO_PULL_REQUEST_ID=id pronto run -f gitlab_mr -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On GitLabCI, make sure to run Pronto in a &lt;a href=&#34;https://docs.gitlab.com/ce/ci/merge_request_pipelines/&#34;&gt;merge request pipeline&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;lint:&#xA;  image: ruby&#xA;  variables:&#xA;    PRONTO_GITLAB_API_ENDPOINT: &#34;https://gitlab.com/api/v4&#34;&#xA;    PRONTO_GITLAB_API_PRIVATE_TOKEN: token&#xA;  only:&#xA;    - merge_requests&#xA;  script:&#xA;    - bundle install&#xA;    - bundle exec pronto run -f gitlab_mr -c origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bitbucket Integration&lt;/h3&gt; &#xA;&lt;p&gt;You can run Pronto as a step of your CI builds and get the results as comments on Bitbucket commits using &lt;code&gt;BitbucketFormatter&lt;/code&gt; or &lt;code&gt;BitbucketPullRequestFormatter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add Pronto runners you want to use to your Gemfile:&lt;/p&gt; &#xA;&lt;p&gt;Set the PRONTO_BITBUCKET_USERNAME and PRONTO_BITBUCKET_PASSWORD environment variables or values in &lt;code&gt;.pronto.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then just run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_BITBUCKET_USERNAME=user PRONTO_BITBUCKET_PASSWORD=pass pronto run -f bitbucket -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, if you want comments to appear on pull request diff, instead of commit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRONTO_BITBUCKET_USERNAME=user PRONTO_BITBUCKET_PASSWORD=pass pronto run -f bitbucket_pr -c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The behavior of Pronto can be controlled via the &lt;code&gt;.pronto.yml&lt;/code&gt; configuration file. It can either be placed in the working directory (*) or specified using the environment variable &lt;code&gt;PRONTO_CONFIG_FILE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(*) The working directory is where you run the command from, which is typically your project directory.&lt;/p&gt; &#xA;&lt;p&gt;If this file cannot be found, then the default configuration in &lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/lib/pronto/config_file.rb&#34;&gt;Pronto::ConfigFile::EMPTY&lt;/a&gt; applies.&lt;/p&gt; &#xA;&lt;p&gt;The file has the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;all:&#xA;  exclude:&#xA;    - &#39;spec/**/*&#39;&#xA;# exclude files for single runner&#xA;eslint:&#xA;  exclude:&#xA;    - &#39;app/assets/**/*&#39;&#xA;github:&#xA;  slug: prontolabs/pronto&#xA;  access_token: B26354&#xA;  api_endpoint: https://api.github.com/&#xA;  web_endpoint: https://github.com/&#xA;gitlab:&#xA;  slug: 1234567 # gitlab&#39;s project ID&#xA;  api_private_token: 46751&#xA;  api_endpoint: https://api.vinted.com/gitlab&#xA;bitbucket:&#xA;  slug: prontolabs/pronto&#xA;  username: user&#xA;  password: pass&#xA;  web_endpoint: https://bitbucket.org/&#xA;max_warnings: 150&#xA;warnings_per_review: 30&#xA;verbose: false&#xA;runners: [rubocop, eslint] # only listed runners will be executed&#xA;skip_runners: [reek] # all, except listed runners will be executed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All properties that can be specified via &lt;code&gt;.pronto.yml&lt;/code&gt;, can also be specified via environment variables. Their names will be the upcased path to the property. For example: &lt;code&gt;PRONTO_GITHUB_SLUG&lt;/code&gt; or &lt;code&gt;PRONTO_GITLAB_API_PRIVATE_TOKEN&lt;/code&gt;. Environment variables will always take precedence over values in configuration file.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;max_warnings&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Limits the amount of warnings. Returns all warnings if option is skipped.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;runners&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs only listed runners. Runs everything if option is skipped.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;skip_runners&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All, except listed runners will be executed. Runs everything if option is skipped.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Outputs more information when set to &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;warnings_per_review&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Limits the amount of warnings per review. Returns all warnings if option is skipped.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Message format&lt;/h3&gt; &#xA;&lt;p&gt;Pronto allows you to configure the format of the messages that are produced. You can set a default format that will be used by all formatters, or you can configure a separate format per formatter, if you are using several.&lt;/p&gt; &#xA;&lt;p&gt;To change the default format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;format: &#34;%{runner} %{level} %{msg}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add the title of the Runner to the GitHub Pull Request formatter only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;github_pr:&#xA;  format: &#34;%{runner} - %{msg}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available values to be interpolated into the message are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;File path.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;line&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Line number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;level&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Message level.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Message.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;commit_sha&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SHA.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;runner&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runner name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The following values are available only to the text formatter:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;color_level&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Colorized message level.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;color_location&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Colorized location.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Runners&lt;/h2&gt; &#xA;&lt;p&gt;Pronto can run various tools and libraries, as long as there&#39;s a runner for it. Currently available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apiology/pronto-bigfiles&#34;&gt;pronto-bigfiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pbstriker38/pronto-blacklist&#34;&gt;pronto-blacklist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-brakeman&#34;&gt;pronto-brakeman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seikichi/pronto-checkstyle&#34;&gt;pronto-checkstyle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/siebertm/pronto-coffeelint&#34;&gt;pronto-coffeelint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/micjabbour/pronto-clang_format&#34;&gt;pronto-clang_format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/micjabbour/pronto-clang_tidy&#34;&gt;pronto-clang_tidy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hauleth/pronto-clippy&#34;&gt;pronto-clippy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carakan/pronto-credo&#34;&gt;pronto-credo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Apelsinka223/pronto-dialyxir&#34;&gt;pronto-dialyxir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iurifq/pronto-dialyzer&#34;&gt;pronto-dialyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinjalbert/pronto-dirty_words&#34;&gt;pronto-dirty_words&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iurifq/pronto-dogma&#34;&gt;pronto-dogma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tleish/pronto-erb_lint&#34;&gt;pronto-erb_lint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-eslint&#34;&gt;pronto-eslint&lt;/a&gt; (uses &lt;a href=&#34;https://github.com/zendesk/eslintrb&#34;&gt;eslintrb&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/doits/pronto-eslint_npm&#34;&gt;pronto-eslint_npm&lt;/a&gt; (uses eslint installed from npm)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-fasterer&#34;&gt;pronto-fasterer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seikichi/pronto-findbugs&#34;&gt;pronto-findbugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scoremedia/pronto-flake8&#34;&gt;pronto-flake8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-flay&#34;&gt;pronto-flay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinjalbert/pronto-flow&#34;&gt;pronto-flow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-foodcritic&#34;&gt;pronto-foodcritic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aergonaut/pronto-goodcheck&#34;&gt;pronto-goodcheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-haml&#34;&gt;pronto-haml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fretlink/pronto-hlint/&#34;&gt;pronto-hlint&lt;/a&gt; (uses Haskell code suggestions &lt;a href=&#34;https://github.com/ndmitchell/hlint&#34;&gt;hlint&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seikichi/pronto-infer&#34;&gt;pronto-infer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stiller-leser/pronto-inspec&#34;&gt;pronto-inspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spajus/pronto-jscs&#34;&gt;pronto-jscs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-jshint&#34;&gt;pronto-jshint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deees/pronto-json&#34;&gt;pronto-json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seikichi/pronto-luacheck&#34;&gt;pronto-luacheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bells17/pronto-perl_lint&#34;&gt;pronto-perl_lint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EllisV/pronto-phpcs&#34;&gt;pronto-phpcs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EllisV/pronto-phpmd&#34;&gt;pronto-phpmd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Powerhamster/pronto-phpstan&#34;&gt;pronto-phpstan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-poper&#34;&gt;pronto-poper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apiology/pronto-punchlist&#34;&gt;pronto-punchlist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-rails_best_practices&#34;&gt;pronto-rails_best_practices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mbajur/pronto-rails_data_schema&#34;&gt;pronto-rails_data_schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raimondasv/pronto-rails_schema&#34;&gt;pronto-rails_schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-reek&#34;&gt;pronto-reek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-rubocop&#34;&gt;pronto-rubocop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-scss&#34;&gt;pronto-scss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pclalv/pronto-shellcheck&#34;&gt;pronto-shellcheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nysthee/pronto-slim&#34;&gt;pronto-slim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibrahima/pronto-slim_lint&#34;&gt;pronto-slim_lint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teamsimplepay/pronto-sorbet&#34;&gt;pronto-sorbet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prontolabs/pronto-spell&#34;&gt;pronto-spell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julianrubisch/pronto-standardrb&#34;&gt;pronto-standardrb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinjalbert/pronto-stylelint&#34;&gt;pronto-stylelint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ajanauskas/pronto-swiftlint&#34;&gt;pronto-swiftlint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ajanauskas/pronto-tailor&#34;&gt;pronto-tailor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seikichi/pronto-textlint&#34;&gt;pronto-textlint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eprislac/pronto-tslint_npm&#34;&gt;pronto-tslint_npm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pauliusm/pronto-yamllint&#34;&gt;pronto-yamllint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grodowski/pronto-undercover&#34;&gt;pronto-undercover&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pauliusm/pronto-xmllint&#34;&gt;pronto-xmllint&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;p&gt;Articles to help you to get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jtway.co/effortless-code-review-for-pull-request-changes-241206b1cb04&#34;&gt;Effortless Code Conventions Review for Pull Request Changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://everydayrails.com/2015/02/17/pronto-ruby-code-review.html&#34;&gt;Automating code review with Pronto (and friends)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@MaximAbramchuk/circleci-github-pr-commenting-ruby-scss-coffeescript-javascript-git-and-etc-fbcbe2a378a5#.gk5f14p3j&#34;&gt;Setup Pronto with CircleCI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://codingfearlessly.com/2014/11/06/continuous-static-analysis/&#34;&gt;Continuous Static Analysis using Pronto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://elliotthilaire.net/gem-pronto-and-git-hooks/&#34;&gt;Pronto and git hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/appaloosa-store-engineering/how-to-end-fruitless-dev-discussions-about-your-project-s-code-style-245070bff6d4&#34;&gt;How to end fruitless dev discussions about your project’s code style?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hovancik.net/blog/2016/04/11/free-automated-code-reviews-using-pronto/&#34;&gt;Free automated code reviews using Pronto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/fazibear/automated-elixir-code-review-with-github-credo-and-travis-ci-986cd56b8f02&#34;&gt;Automated Elixir code review with Github, Credo and Travis CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20181225040512/https://christoph.luppri.ch/articles/code-quality/running-rubocop-before-git-commit/&#34;&gt;Running Rubocop before git commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://abinoam.tl1n.com/pronto-codeship-and-github-for-automatic-code-review/&#34;&gt;Pronto, Codeship and GitHub for automatic code review&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://christoph.luppri.ch/how-to-automatically-review-your-prs-for-style-violations-with-pronto-and-rubocop&#34;&gt;How to automatically review your PRs for style violations with Pronto and RuboCop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kevinjalbert.com/create-your-own-pronto-runner/&#34;&gt;Create your own Pronto Runner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/jimmy-farrell/make-codes-reviews-a-little-bit-better-with-automation-35640df08a62&#34;&gt;Make Code Reviews A Little Bit Better With Automation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/futuredev/stop-shipping-untested-ruby-code-with-undercover-1edc963be4a6&#34;&gt;Stop shipping untested Ruby code with undercover&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://everydayrails.com/2021/05/29/pronto-github-actions-code-quality.html&#34;&gt;Automatic code review with Pronto and GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make a Pull Request to add something you wrote or found useful.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pronto&lt;/strong&gt;&#39;s changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2013-2018 Mindaugas Mozūras. See &lt;a href=&#34;https://raw.githubusercontent.com/prontolabs/pronto/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt;</summary>
  </entry>
</feed>