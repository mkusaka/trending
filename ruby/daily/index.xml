<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-06T01:32:49Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shopify/shopify_app</title>
    <updated>2022-08-06T01:32:49Z</updated>
    <id>tag:github.com,2022-08-06:/Shopify/shopify_app</id>
    <link href="https://github.com/Shopify/shopify_app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rails Engine for building Shopify Apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shopify App&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/shopify_app&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/shopify_app.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Shopify/shopify_app/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/Shopify/shopify_app/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; ![Supported Rails version][supported_rails_version]&lt;/p&gt; &#xA;&lt;p&gt;This gem builds Rails applications that can be embedded in the Shopify Admin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/#introduction&#34;&gt;Introduction&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/#requirements&#34;&gt;Requirements&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/#usage&#34;&gt;Usage&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/#documentation&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This gem includes a Rails engine, generators, modules, and mixins that help create Rails applications that work with Shopify APIs. The &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/engine.md&#34;&gt;Shopify App Rails engine&lt;/a&gt; provides all the code required to implement OAuth with Shopify. The &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/generators.md#-environment-rails-generate-shopify_app&#34;&gt;default Shopify App generator&lt;/a&gt; builds an app that can be embedded in the Shopify Admin and secures it with &lt;a href=&#34;https://shopify.dev/concepts/apps/building-embedded-apps-using-session-tokens&#34;&gt;session tokens&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- This section is linked to in `templates/shopify_app.rb.tt`. Be careful renaming this heading. --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Rails compatibility&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Use Shopify App &lt;code&gt;&amp;lt;= v7.2.8&lt;/code&gt; if you need to work with Rails 4.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To become a Shopify app developer, you will need a &lt;a href=&#34;https://www.shopify.com/partners&#34;&gt;Shopify Partners&lt;/a&gt; account. Explore the &lt;a href=&#34;https://shopify.dev/concepts/shopify-introduction&#34;&gt;Shopify dev docs&lt;/a&gt; to learn more about &lt;a href=&#34;https://shopify.dev/concepts/apps&#34;&gt;building Shopify apps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This gem requires that you have the following credentials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shopify API key:&lt;/strong&gt; The API key app credential specified in your &lt;a href=&#34;https://partners.shopify.com/organizations&#34;&gt;Shopify Partners dashboard&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shopify API secret:&lt;/strong&gt; The API secret key app credential specified in your &lt;a href=&#34;https://partners.shopify.com/organizations&#34;&gt;Shopify Partners dashboard&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To get started, create a new Rails app:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rails new my_shopify_app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add the Shopify App gem to &lt;code&gt;my_shopify_app&lt;/code&gt;&#39;s Gemfile.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle add shopify_app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file in the root of &lt;code&gt;my_shopify_app&lt;/code&gt; to specify your Shopify API credentials:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;SHOPIFY_API_KEY=&amp;lt;Your Shopify API key&amp;gt;&#xA;SHOPIFY_API_SECRET=&amp;lt;Your Shopify API secret&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In a development environment, you can use a gem like &lt;code&gt;dotenv-rails&lt;/code&gt; to manage environment variables.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the default Shopify App generator to create an app that can be embedded in the Shopify Admin:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rails generate shopify_app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Run a migration to create the necessary tables in your database:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Run the app:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/Quickstart.md&#34;&gt;&lt;em&gt;Quickstart&lt;/em&gt;&lt;/a&gt; to learn how to install your app on a shop.&lt;/p&gt; &#xA;&lt;p&gt;This app implements &lt;a href=&#34;https://shopify.dev/tutorials/authenticate-with-oauth&#34;&gt;OAuth 2.0&lt;/a&gt; with Shopify to authenticate requests made to Shopify APIs. By default, this app is configured to use &lt;a href=&#34;https://shopify.dev/concepts/apps/building-embedded-apps-using-session-tokens&#34;&gt;session tokens&lt;/a&gt; to authenticate merchants when embedded in the Shopify Admin.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/generators.md&#34;&gt;&lt;em&gt;Generators&lt;/em&gt;&lt;/a&gt; for a complete list of generators available to Shopify App.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find documentation on gem usage, concepts, mixins, installation, and more in &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs&#34;&gt;&lt;code&gt;/docs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start with the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/generators.md&#34;&gt;&lt;em&gt;Generators&lt;/em&gt;&lt;/a&gt; document to learn more about the generators this gem offers.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/CHANGELOG.md&#34;&gt;&lt;em&gt;Changelog&lt;/em&gt;&lt;/a&gt; for notes on the latest gem releases.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/Troubleshooting.md&#34;&gt;&lt;em&gt;Troubleshooting&lt;/em&gt;&lt;/a&gt; for tips on common issues.&lt;/li&gt; &#xA; &lt;li&gt;If you are looking to upgrade your Shopify App version to a new major release, see &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/Upgrading.md&#34;&gt;&lt;em&gt;Upgrading&lt;/em&gt;&lt;/a&gt; for important notes on breaking changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/Quickstart.md&#34;&gt;Quickstart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/Troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/Upgrading.md&#34;&gt;Upgrading&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app&#34;&gt;Shopify App&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/authentication.md&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/engine.md&#34;&gt;Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/generators.md&#34;&gt;Generators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/script-tags.md&#34;&gt;ScriptTags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/session-repository.md&#34;&gt;Session repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/handling-access-scopes-changes.md&#34;&gt;Handling changes in access scopes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/testing.md&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/webhooks.md&#34;&gt;Webhooks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Engine&lt;/h3&gt; &#xA;&lt;p&gt;Mounting the Shopify App Rails Engine provides the following routes. These routes are configured to help install your application on shops and implement OAuth.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Verb&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Route&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;/login&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Login&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;/login&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Login&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;/auth/shopify/callback&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OAuth redirect URI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;/logout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Logout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;/webhooks/:type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Webhook callback&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These routes are configurable. See the more detailed &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/engine.md&#34;&gt;&lt;em&gt;Engine&lt;/em&gt;&lt;/a&gt; documentation to learn how you can customize the login URL or mount the Shopify App Rails engine at nested routes.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about how this gem authenticates with Shopify, see &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify_app/main/docs/shopify_app/authentication.md&#34;&gt;&lt;em&gt;Authentication&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;API Versioning&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://shopify.dev/concepts/about-apis/versioning&#34;&gt;Shopify&#39;s API is versioned&lt;/a&gt;. With Shopify App &lt;code&gt;v1.11.0&lt;/code&gt;, the included Shopify API gem allows developers to specify and update the Shopify API version they want their app or service to use. The Shopify API gem also surfaces warnings to Rails apps about &lt;a href=&#34;https://shopify.dev/concepts/about-apis/versioning#deprecation-practices&#34;&gt;deprecated endpoints, GraphQL fields and more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/Shopify/shopify-api-ruby/&#34;&gt;Shopify API gem README&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rack/rack-attack</title>
    <updated>2022-08-06T01:32:49Z</updated>
    <id>tag:github.com,2022-08-06:/rack/rack-attack</id>
    <link href="https://github.com/rack/rack-attack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rack middleware for blocking &amp; throttling&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; You are viewing the development&#39;s branch version of README which might contain documentation for unreleased features. For the README consistent with the latest released version see &lt;a href=&#34;https://github.com/rack/rack-attack/raw/6-stable/README.md&#34;&gt;https://github.com/rack/rack-attack/blob/6-stable/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Rack::Attack&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Rack middleware for blocking &amp;amp; throttling abusive requests&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Protect your Rails and Rack apps from bad clients. Rack::Attack lets you easily decide when to &lt;em&gt;allow&lt;/em&gt;, &lt;em&gt;block&lt;/em&gt; and &lt;em&gt;throttle&lt;/em&gt; based on properties of the request.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://www.kickstarter.com/backing-and-hacking/rack-attack-protection-from-abusive-clients&#34;&gt;Backing &amp;amp; Hacking blog post&lt;/a&gt; introducing Rack::Attack.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/rack-attack&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rack-attack.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rack/rack-attack/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/rack/rack-attack/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/kickstarter/rack-attack&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/kickstarter/rack-attack.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/rack-attack/rack-attack&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/rack-attack/rack-attack.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/rack-attack/rack-attack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#plugging-into-the-application&#34;&gt;Plugging into the application&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#safelisting&#34;&gt;Safelisting&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#safelist_ipip_address_string&#34;&gt;&lt;code&gt;safelist_ip(ip_address_string)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#safelist_ipip_subnet_string&#34;&gt;&lt;code&gt;safelist_ip(ip_subnet_string)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#safelistname-block&#34;&gt;&lt;code&gt;safelist(name, &amp;amp;block)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#blocking&#34;&gt;Blocking&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#blocklist_ipip_address_string&#34;&gt;&lt;code&gt;blocklist_ip(ip_address_string)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#blocklist_ipip_subnet_string&#34;&gt;&lt;code&gt;blocklist_ip(ip_subnet_string)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#blocklistname-block&#34;&gt;&lt;code&gt;blocklist(name, &amp;amp;block)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#fail2ban&#34;&gt;Fail2Ban&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#allow2ban&#34;&gt;Allow2Ban&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#throttling&#34;&gt;Throttling&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#throttlename-options-block&#34;&gt;&lt;code&gt;throttle(name, options, &amp;amp;block)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#tracks&#34;&gt;Tracks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#cache-store-configuration&#34;&gt;Cache store configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#customizing-responses&#34;&gt;Customizing responses&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#ratelimit-headers-for-well-behaved-clients&#34;&gt;RateLimit headers for well-behaved clients&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#logging--instrumentation&#34;&gt;Logging &amp;amp; Instrumentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#how-it-works&#34;&gt;How it works&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#about-tracks&#34;&gt;About Tracks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#development-setup&#34;&gt;Development setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# In your Gemfile&#xA;&#xA;gem &#39;rack-attack&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install rack-attack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugging into the application&lt;/h3&gt; &#xA;&lt;p&gt;Then tell your ruby web application to use rack-attack as a middleware.&lt;/p&gt; &#xA;&lt;p&gt;a) For &lt;strong&gt;rails&lt;/strong&gt; applications it is used by default.&lt;/p&gt; &#xA;&lt;p&gt;You can disable it permanently (like for specific environment) or temporarily (can be useful for specific test cases) by writing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::Attack.enabled = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;b) For &lt;strong&gt;rack&lt;/strong&gt; applications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# In config.ru&#xA;&#xA;require &#34;rack/attack&#34;&#xA;use Rack::Attack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: By default, rack-attack won&#39;t perform any blocking or throttling, until you specifically tell it what to protect against by configuring some rules.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; If you just want to get going asap, then you can take our &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/docs/example_configuration.md&#34;&gt;example configuration&lt;/a&gt; and tailor it to your needs, or check out the &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/docs/advanced_configuration.md&#34;&gt;advanced configuration&lt;/a&gt; examples.&lt;/p&gt; &#xA;&lt;p&gt;Define rules by calling &lt;code&gt;Rack::Attack&lt;/code&gt; public methods, in any file that runs when your application is being initialized. For rails applications this means creating a new file named &lt;code&gt;config/initializers/rack_attack.rb&lt;/code&gt; and writing your rules there.&lt;/p&gt; &#xA;&lt;h3&gt;Safelisting&lt;/h3&gt; &#xA;&lt;p&gt;Safelists have the most precedence, so any request matching a safelist would be allowed despite matching any number of blocklists or throttles.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;safelist_ip(ip_address_string)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails app)&#xA;&#xA;Rack::Attack.safelist_ip(&#34;5.6.7.8&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;safelist_ip(ip_subnet_string)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails app)&#xA;&#xA;Rack::Attack.safelist_ip(&#34;5.6.7.0/24&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;safelist(name, &amp;amp;block)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Name your custom safelist and make your ruby-block argument return a truthy value if you want the request to be allowed, and falsy otherwise.&lt;/p&gt; &#xA;&lt;p&gt;The request object is a &lt;a href=&#34;http://www.rubydoc.info/gems/rack/Rack/Request&#34;&gt;Rack::Request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails apps)&#xA;&#xA;# Provided that trusted users use an HTTP request header named APIKey&#xA;Rack::Attack.safelist(&#34;mark any authenticated access safe&#34;) do |request|&#xA;  # Requests are allowed if the return value is truthy&#xA;  request.env[&#34;HTTP_APIKEY&#34;] == &#34;secret-string&#34;&#xA;end&#xA;&#xA;# Always allow requests from localhost&#xA;# (blocklist &amp;amp; throttles are skipped)&#xA;Rack::Attack.safelist(&#39;allow from localhost&#39;) do |req|&#xA;  # Requests are allowed if the return value is truthy&#xA;  &#39;127.0.0.1&#39; == req.ip || &#39;::1&#39; == req.ip&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Blocking&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;blocklist_ip(ip_address_string)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails apps)&#xA;&#xA;Rack::Attack.blocklist_ip(&#34;1.2.3.4&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;blocklist_ip(ip_subnet_string)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails apps)&#xA;&#xA;Rack::Attack.blocklist_ip(&#34;1.2.0.0/16&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;blocklist(name, &amp;amp;block)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Name your custom blocklist and make your ruby-block argument return a truthy value if you want the request to be blocked, and falsy otherwise.&lt;/p&gt; &#xA;&lt;p&gt;The request object is a &lt;a href=&#34;http://www.rubydoc.info/gems/rack/Rack/Request&#34;&gt;Rack::Request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails apps)&#xA;&#xA;Rack::Attack.blocklist(&#34;block all access to admin&#34;) do |request|&#xA;  # Requests are blocked if the return value is truthy&#xA;  request.path.start_with?(&#34;/admin&#34;)&#xA;end&#xA;&#xA;Rack::Attack.blocklist(&#39;block bad UA logins&#39;) do |req|&#xA;  req.path == &#39;/login&#39; &amp;amp;&amp;amp; req.post? &amp;amp;&amp;amp; req.user_agent == &#39;BadUA&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fail2Ban&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Fail2Ban.filter&lt;/code&gt; can be used within a blocklist to block all requests from misbehaving clients. This pattern is inspired by &lt;a href=&#34;https://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;fail2ban&lt;/a&gt;. See the &lt;a href=&#34;https://www.fail2ban.org/wiki/index.php/MANUAL_0_8#Jail_Options&#34;&gt;fail2ban documentation&lt;/a&gt; for more details on how the parameters work. For multiple filters, be sure to put each filter in a separate blocklist and use a unique discriminator for each fail2ban filter.&lt;/p&gt; &#xA;&lt;p&gt;Fail2ban state is stored in a &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#cache-store-configuration&#34;&gt;configurable cache&lt;/a&gt; (which defaults to &lt;code&gt;Rails.cache&lt;/code&gt; if present).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Block suspicious requests for &#39;/etc/password&#39; or wordpress specific paths.&#xA;# After 3 blocked requests in 10 minutes, block all requests from that IP for 5 minutes.&#xA;Rack::Attack.blocklist(&#39;fail2ban pentesters&#39;) do |req|&#xA;  # `filter` returns truthy value if request fails, or if it&#39;s from a previously banned IP&#xA;  # so the request is blocked&#xA;  Rack::Attack::Fail2Ban.filter(&#34;pentesters-#{req.ip}&#34;, maxretry: 3, findtime: 10.minutes, bantime: 5.minutes) do&#xA;    # The count for the IP is incremented if the return value is truthy&#xA;    CGI.unescape(req.query_string) =~ %r{/etc/passwd} ||&#xA;    req.path.include?(&#39;/etc/passwd&#39;) ||&#xA;    req.path.include?(&#39;wp-admin&#39;) ||&#xA;    req.path.include?(&#39;wp-login&#39;)&#xA;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;Fail2Ban&lt;/code&gt; filters are not automatically scoped to the blocklist, so when using multiple filters in an application the scoping must be added to the discriminator e.g. &lt;code&gt;&#34;pentest:#{req.ip}&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Allow2Ban&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Allow2Ban.filter&lt;/code&gt; works the same way as the &lt;code&gt;Fail2Ban.filter&lt;/code&gt; except that it &lt;em&gt;allows&lt;/em&gt; requests from misbehaving clients until such time as they reach maxretry at which they are cut off as per normal.&lt;/p&gt; &#xA;&lt;p&gt;Allow2ban state is stored in a &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#cache-store-configuration&#34;&gt;configurable cache&lt;/a&gt; (which defaults to &lt;code&gt;Rails.cache&lt;/code&gt; if present).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Lockout IP addresses that are hammering your login page.&#xA;# After 20 requests in 1 minute, block all requests from that IP for 1 hour.&#xA;Rack::Attack.blocklist(&#39;allow2ban login scrapers&#39;) do |req|&#xA;  # `filter` returns false value if request is to your login page (but still&#xA;  # increments the count) so request below the limit are not blocked until&#xA;  # they hit the limit.  At that point, filter will return true and block.&#xA;  Rack::Attack::Allow2Ban.filter(req.ip, maxretry: 20, findtime: 1.minute, bantime: 1.hour) do&#xA;    # The count for the IP is incremented if the return value is truthy.&#xA;    req.path == &#39;/login&#39; and req.post?&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Throttling&lt;/h3&gt; &#xA;&lt;p&gt;Throttle state is stored in a &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/#cache-store-configuration&#34;&gt;configurable cache&lt;/a&gt; (which defaults to &lt;code&gt;Rails.cache&lt;/code&gt; if present).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;throttle(name, options, &amp;amp;block)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Name your custom throttle, provide &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;period&lt;/code&gt; as options, and make your ruby-block argument return the &lt;strong&gt;discriminator&lt;/strong&gt;. This discriminator is how you tell rack-attack whether you&#39;re limiting per IP address, per user email or any other.&lt;/p&gt; &#xA;&lt;p&gt;The request object is a &lt;a href=&#34;http://www.rubydoc.info/gems/rack/Rack/Request&#34;&gt;Rack::Request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/rack_attack.rb (for rails apps)&#xA;&#xA;Rack::Attack.throttle(&#34;requests by ip&#34;, limit: 5, period: 2) do |request|&#xA;  request.ip&#xA;end&#xA;&#xA;# Throttle login attempts for a given email parameter to 6 reqs/minute&#xA;# Return the *normalized* email as a discriminator on POST /login requests&#xA;Rack::Attack.throttle(&#39;limit logins per email&#39;, limit: 6, period: 60) do |req|&#xA;  if req.path == &#39;/login&#39; &amp;amp;&amp;amp; req.post?&#xA;    # Normalize the email, using the same logic as your authentication process, to&#xA;    # protect against rate limit bypasses.&#xA;    req.params[&#39;email&#39;].to_s.downcase.gsub(/\s+/, &#34;&#34;)&#xA;  end&#xA;end&#xA;&#xA;# You can also set a limit and period using a proc. For instance, after&#xA;# Rack::Auth::Basic has authenticated the user:&#xA;limit_proc = proc { |req| req.env[&#34;REMOTE_USER&#34;] == &#34;admin&#34; ? 100 : 1 }&#xA;period_proc = proc { |req| req.env[&#34;REMOTE_USER&#34;] == &#34;admin&#34; ? 1 : 60 }&#xA;&#xA;Rack::Attack.throttle(&#39;request per ip&#39;, limit: limit_proc, period: period_proc) do |request|&#xA;  request.ip&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tracks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Track requests from a special user agent.&#xA;Rack::Attack.track(&#34;special_agent&#34;) do |req|&#xA;  req.user_agent == &#34;SpecialAgent&#34;&#xA;end&#xA;&#xA;# Supports optional limit and period, triggers the notification only when the limit is reached.&#xA;Rack::Attack.track(&#34;special_agent&#34;, limit: 6, period: 60) do |req|&#xA;  req.user_agent == &#34;SpecialAgent&#34;&#xA;end&#xA;&#xA;# Track it using ActiveSupport::Notification&#xA;ActiveSupport::Notifications.subscribe(&#34;track.rack_attack&#34;) do |name, start, finish, request_id, payload|&#xA;  req = payload[:request]&#xA;  if req.env[&#39;rack.attack.matched&#39;] == &#34;special_agent&#34;&#xA;    Rails.logger.info &#34;special_agent: #{req.path}&#34;&#xA;    STATSD.increment(&#34;special_agent&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cache store configuration&lt;/h3&gt; &#xA;&lt;p&gt;Throttle, allow2ban and fail2ban state is stored in a configurable cache (which defaults to &lt;code&gt;Rails.cache&lt;/code&gt; if present), presumably backed by memcached or redis (&lt;a href=&#34;https://rubygems.org/gems/redis&#34;&gt;at least gem v3.0.0&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::Attack.cache.store = ActiveSupport::Cache::MemoryStore.new # defaults to Rails.cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;Rack::Attack.cache&lt;/code&gt; is only used for throttling, allow2ban and fail2ban filtering; not blocklisting and safelisting. Your cache store must implement &lt;code&gt;increment&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; like &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html&#34;&gt;ActiveSupport::Cache::Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing responses&lt;/h2&gt; &#xA;&lt;p&gt;Customize the response of blocklisted and throttled requests using an object that adheres to the &lt;a href=&#34;http://www.rubydoc.info/github/rack/rack/file/SPEC.rdoc&#34;&gt;Rack app interface&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::Attack.blocklisted_responder = lambda do |request|&#xA;  # Using 503 because it may make attacker think that they have successfully&#xA;  # DOSed the site. Rack::Attack returns 403 for blocklists by default&#xA;  [ 503, {}, [&#39;Blocked&#39;]]&#xA;end&#xA;&#xA;Rack::Attack.throttled_responder = lambda do |request|&#xA;  # NB: you have access to the name and other data about the matched throttle&#xA;  #  request.env[&#39;rack.attack.matched&#39;],&#xA;  #  request.env[&#39;rack.attack.match_type&#39;],&#xA;  #  request.env[&#39;rack.attack.match_data&#39;],&#xA;  #  request.env[&#39;rack.attack.match_discriminator&#39;]&#xA;&#xA;  # Using 503 because it may make attacker think that they have successfully&#xA;  # DOSed the site. Rack::Attack returns 429 for throttling by default&#xA;  [ 503, {}, [&#34;Server Error\n&#34;]]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RateLimit headers for well-behaved clients&lt;/h3&gt; &#xA;&lt;p&gt;While Rack::Attack&#39;s primary focus is minimizing harm from abusive clients, it can also be used to return rate limit data that&#39;s helpful for well-behaved clients.&lt;/p&gt; &#xA;&lt;p&gt;If you want to return to user how many seconds to wait until they can start sending requests again, this can be done through enabling &lt;code&gt;Retry-After&lt;/code&gt; header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::Attack.throttled_response_retry_after_header = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example response that includes conventional &lt;code&gt;RateLimit-*&lt;/code&gt; headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::Attack.throttled_responder = lambda do |request|&#xA;  match_data = request.env[&#39;rack.attack.match_data&#39;]&#xA;  now = match_data[:epoch_time]&#xA;&#xA;  headers = {&#xA;    &#39;RateLimit-Limit&#39; =&amp;gt; match_data[:limit].to_s,&#xA;    &#39;RateLimit-Remaining&#39; =&amp;gt; &#39;0&#39;,&#xA;    &#39;RateLimit-Reset&#39; =&amp;gt; (now + (match_data[:period] - now % match_data[:period])).to_s&#xA;  }&#xA;&#xA;  [ 429, headers, [&#34;Throttled\n&#34;]]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For responses that did not exceed a throttle limit, Rack::Attack annotates the env with match data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;request.env[&#39;rack.attack.throttle_data&#39;][name] # =&amp;gt; { discriminator: d, count: n, period: p, limit: l, epoch_time: t }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging &amp;amp; Instrumentation&lt;/h2&gt; &#xA;&lt;p&gt;Rack::Attack uses the &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveSupport/Notifications.html&#34;&gt;ActiveSupport::Notifications&lt;/a&gt; API if available.&lt;/p&gt; &#xA;&lt;p&gt;You can subscribe to &lt;code&gt;rack_attack&lt;/code&gt; events and log it, graph it, etc.&lt;/p&gt; &#xA;&lt;p&gt;To get notified about specific type of events, subscribe to the event name followed by the &lt;code&gt;rack_attack&lt;/code&gt; namespace. E.g. for throttles use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::Notifications.subscribe(&#34;throttle.rack_attack&#34;) do |name, start, finish, request_id, payload|&#xA;  # request object available in payload[:request]&#xA;&#xA;  # Your code here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to subscribe to every &lt;code&gt;rack_attack&lt;/code&gt; event, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveSupport::Notifications.subscribe(/rack_attack/) do |name, start, finish, request_id, payload|&#xA;  # request object available in payload[:request]&#xA;&#xA;  # Your code here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;A note on developing and testing apps using Rack::Attack - if you are using throttling in particular, you will need to enable the cache in your development environment. See &lt;a href=&#34;http://guides.rubyonrails.org/caching_with_rails.html&#34;&gt;Caching with Rails&lt;/a&gt; for more on how to do this.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Rack::Attack.enabled = false&lt;/code&gt; can be used to either completely disable Rack::Attack in your tests, or to disable/enable for specific test cases only.&lt;/p&gt; &#xA;&lt;h3&gt;Test case isolation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Rack::Attack.reset!&lt;/code&gt; can be used in your test suite to clear any Rack::Attack state between different test cases. If you&#39;re testing blocklist and safelist configurations, consider using &lt;code&gt;Rack::Attack.clear_configuration&lt;/code&gt; to unset the values for those lists between test cases.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The Rack::Attack middleware compares each request against &lt;em&gt;safelists&lt;/em&gt;, &lt;em&gt;blocklists&lt;/em&gt;, &lt;em&gt;throttles&lt;/em&gt;, and &lt;em&gt;tracks&lt;/em&gt; that you define. There are none by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the request matches any &lt;strong&gt;safelist&lt;/strong&gt;, it is allowed.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, if the request matches any &lt;strong&gt;blocklist&lt;/strong&gt;, it is blocked.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, if the request matches any &lt;strong&gt;throttle&lt;/strong&gt;, a counter is incremented in the Rack::Attack.cache. If any throttle&#39;s limit is exceeded, the request is blocked.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, all &lt;strong&gt;tracks&lt;/strong&gt; are checked, and the request is allowed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The algorithm is actually more concise in code: See &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/lib/rack/attack.rb&#34;&gt;Rack::Attack.call&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def call(env)&#xA;  req = Rack::Attack::Request.new(env)&#xA;&#xA;  if safelisted?(req)&#xA;    @app.call(env)&#xA;  elsif blocklisted?(req)&#xA;    self.class.blocklisted_responder.call(req)&#xA;  elsif throttled?(req)&#xA;    self.class.throttled_responder.call(req)&#xA;  else&#xA;    tracked?(req)&#xA;    @app.call(env)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;Rack::Attack::Request&lt;/code&gt; is just a subclass of &lt;code&gt;Rack::Request&lt;/code&gt; so that you can cleanly monkey patch helper methods onto the &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/lib/rack/attack/request.rb&#34;&gt;request object&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;About Tracks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Rack::Attack.track&lt;/code&gt; doesn&#39;t affect request processing. Tracks are an easy way to log and measure requests matching arbitrary attributes.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;The overhead of running Rack::Attack is typically negligible (a few milliseconds per request), but it depends on how many checks you&#39;ve configured, and how long they take. Throttles usually require a network roundtrip to your cache server(s), so try to keep the number of throttle checks per request low.&lt;/p&gt; &#xA;&lt;p&gt;If a request is blocklisted or throttled, the response is a very simple Rack response. A single typical ruby web server thread can block several hundred requests per second.&lt;/p&gt; &#xA;&lt;p&gt;Rack::Attack complements tools like &lt;code&gt;iptables&lt;/code&gt; and nginx&#39;s &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone&#34;&gt;limit_conn_zone module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Abusive clients range from malicious login crackers to naively-written scrapers. They hinder the security, performance, &amp;amp; availability of web applications.&lt;/p&gt; &#xA;&lt;p&gt;It is impractical if not impossible to block abusive clients completely.&lt;/p&gt; &#xA;&lt;p&gt;Rack::Attack aims to let developers quickly mitigate abusive requests and rely less on short-term, one-off hacks to block a particular attack.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development setup&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/rack/rack-attack/main/docs/development.md&#34;&gt;Development guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright Kickstarter, PBC.&lt;/p&gt; &#xA;&lt;p&gt;Released under an &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>