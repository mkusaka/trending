<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-07T01:38:39Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tendersearls/tldr</title>
    <updated>2023-10-07T01:38:39Z</updated>
    <id>tag:github.com,2023-10-07:/tendersearls/tldr</id>
    <link href="https://github.com/tendersearls/tldr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby test framework for people who don&#39;t have time for slow tests 💣💥&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TLDR - for people who don&#39;t have time for slow tests&lt;/h1&gt; &#xA;&lt;p&gt;Okay, you might need to sit down for this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;tl;dr, TLDR is a Ruby test framework that stops running your tests after 1.8 seconds.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We initially meant this as a joke &lt;a href=&#34;https://www.youtube.com/live/bmi-SWeH4MA?si=p5g1j1FQZrbYEOCg&amp;amp;t=63&#34;&gt;while pairin&#39;&lt;/a&gt;, but in addition to being funny, it was also a pretty good idea. So we fleshed out &lt;code&gt;tldr&lt;/code&gt; to be a full-featured, mostly &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/#minitest-compatibility&#34;&gt;Minitest-compatible&lt;/a&gt;, and downright pleasant test framework for Ruby.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;big idea&#34; here is TLDR is designed for users to run the &lt;code&gt;tldr&lt;/code&gt; command repeatedly as they work—as opposed to only running the tests for whatever is being worked on. Even if the suite run over the 1.8 second time limit. Because TLDR shuffles and runs in parallel and is guaranteed to take less than two seconds, &lt;strong&gt;you&#39;ll actually wind up running &lt;em&gt;all&lt;/em&gt; of your tests quite often as you work&lt;/strong&gt;, catching any problems much earlier than if you had waited until the end of the day to push your work and let a continuous integration server run the full suite.&lt;/p&gt; &#xA;&lt;p&gt;Some stuff you might like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A CLI that can specify tests by line number(s) (e.g. &lt;code&gt;foo.rb:5 bar.rb:3:10&lt;/code&gt;) and by names or patterns (e.g. &lt;code&gt;--name test_fail,test_error --name &#34;/_\d/&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Everything is &lt;strong&gt;parallel by default&lt;/strong&gt;, and seems pretty darn fast; TLDR also provides &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/#parallel-by-default-is-nice-in-theory-but-half-my-tests-are-failing-wat&#34;&gt;several escape hatches to sequester tests that aren&#39;t thread-safe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Surprisingly delightful color diff output when two things fail to equal one another, care of &lt;a href=&#34;https://github.com/mcmire/super_diff&#34;&gt;@mcmire&#39;s super_diff gem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;By default, the CLI will prepend your most-recently-edited test file to the front of your suite so its tests will run first. The test you worked on most recently is the one you most likely want to ensure runs, so TLDR runs it first (see the &lt;code&gt;--prepend&lt;/code&gt; option for how to control this behavior)&lt;/li&gt; &#xA; &lt;li&gt;And, of course, our signature feature: your test suite will never grow into a glacially slow, soul-sucking albatross around your neck, because &lt;strong&gt;after 1.8 seconds, it stops running your tests&lt;/strong&gt;, with a report on what it &lt;em&gt;was&lt;/em&gt; able to run and where your slowest tests are&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some stuff you might &lt;em&gt;not&lt;/em&gt; like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The thought of switching Ruby test frameworks in 2023&lt;/li&gt; &#xA; &lt;li&gt;That bit about your test suite exploding after 1.8 seconds&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Either &lt;code&gt;gem install tldr&lt;/code&gt; or add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#34;tldr&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s what a test looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MathTest &amp;lt; TLDR&#xA;  def test_adding&#xA;    assert_equal 1 + 1, 2&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A TLDR subclass defines its tests with instance methods that begin with &lt;code&gt;test_&lt;/code&gt;. They can define &lt;code&gt;setup&lt;/code&gt; and/or &lt;code&gt;teardown&lt;/code&gt; methods which will run before and after each test, respectively.&lt;/p&gt; &#xA;&lt;p&gt;If you place your tests in &lt;code&gt;test/**/*_test.rb&lt;/code&gt; (and/or &lt;code&gt;test/**/test_*.rb&lt;/code&gt;) files, the &lt;code&gt;tldr&lt;/code&gt; executable will find them automatically. And if you define a &lt;code&gt;test/helper.rb&lt;/code&gt; file, it will be loaded prior to your tests.&lt;/p&gt; &#xA;&lt;p&gt;Running the CLI is pretty straightforward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tldr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can, of course, also just run a specific test file or glob:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tldr test/this/one/in/particular.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or specify the line numbers of tests to run by appending them after a &lt;code&gt;:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tldr test/fixture/line_number.rb:3:10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And filter which tests run by name or pattern with one or more &lt;code&gt;--name&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt; flags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tldr --name FooTest#test_foo -n test_bar,test_baz -n /_qux/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The above will translate to this array of name filters internally: &lt;code&gt;[&#34;FooTest#test_foo&#34;, &#34;test_bar&#34;, &#34;test_baz&#34;, &#34;/_qux/&#34;]&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;Here is the full list of CLI options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tldr --help&#xA;Usage: tldr [options] some_tests/**/*.rb some/path.rb:13 ...&#xA;        --fail-fast                  Stop running tests as soon as one fails&#xA;    -s, --seed SEED                  Seed for randomization&#xA;        --[no-]parallel              Parallelize tests (Default: true)&#xA;    -n, --name PATTERN               One or more names or /patterns/ of tests to run (like: foo_test, /test_foo.*/, Foo#foo_test)&#xA;        --exclude-name PATTERN       One or more names or /patterns/ NOT to run&#xA;        --exclude-path PATH          One or more paths NOT to run (like: foo.rb, &#34;test/bar/**&#34;, baz.rb:3)&#xA;        --helper PATH                One or more paths to a helper that is required before any tests (Default: &#34;test/helper.rb&#34;)&#xA;        --no-helper                  Don&#39;t require any test helpers&#xA;        --prepend PATH               Prepend one or more paths to run before the rest (Default: most recently modified test)&#xA;        --no-prepend                 Don&#39;t prepend any tests before the rest of the suite&#xA;    -l, --load-path PATH             Add one or more paths to the $LOAD_PATH (Default: [&#34;lib&#34;, &#34;test&#34;])&#xA;    -r, --reporter REPORTER          Set a custom reporter class (Default: &#34;TLDR::Reporters::Default&#34;)&#xA;        --base-path PATH             Change the working directory for all relative paths (Default: current working directory)&#xA;        --no-dotfile                 Disable loading .tldr.yml dotfile&#xA;        --no-emoji                   Disable emoji in the output&#xA;    -v, --verbose                    Print stack traces for errors&#xA;        --[no-]warnings              Print Ruby warnings (Default: true)&#xA;        --watch                      Run your tests continuously on file save (requires &#39;fswatch&#39; to be installed)&#xA;        --yes-i-know                 Suppress TLDR report when suite runs over 1.8s&#xA;        --i-am-being-watched         [INTERNAL] Signals to tldr it is being invoked under --watch mode&#xA;        --comment COMMENT            [INTERNAL] No-op; used for multi-line execution instructions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After being parsed, all the CLI options are converted into a &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/lib/tldr/value/config.rb&#34;&gt;TLDR::Config&lt;/a&gt; object.&lt;/p&gt; &#xA;&lt;h3&gt;Setting defaults in .tldr.yml&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tldr&lt;/code&gt; CLI will look for a &lt;code&gt;.tldr.yml&lt;/code&gt; file in your project root (your working directory or whatever &lt;code&gt;--base-path&lt;/code&gt; you set), which can contain values for any properties on &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/lib/tldr/value/config.rb&#34;&gt;TLDR::Config&lt;/a&gt; (with the exception of &lt;code&gt;--base-path&lt;/code&gt; itself).&lt;/p&gt; &#xA;&lt;p&gt;Any values found in the dotfile will override TLDR&#39;s built-in values, but can still be specified by the &lt;code&gt;tldr&lt;/code&gt; CLI or a &lt;code&gt;TLDR::Config&lt;/code&gt; object passed to &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/#running-tests-without-the-cli&#34;&gt;TLDR::Run.at_exit!&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/example/c&#34;&gt;example project&lt;/a&gt; that specifies a &lt;code&gt;.tldr.yml&lt;/code&gt; file as well as some &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/tests/dotfile_test.rb&#34;&gt;internal tests&lt;/a&gt; demonstrating its behavior.&lt;/p&gt; &#xA;&lt;h3&gt;Minitest compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Tests you write with tldr are designed to be mostly-compatible with &lt;a href=&#34;https://github.com/minitest/minitest&#34;&gt;Minitest&lt;/a&gt; tests. Some notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; hook methods should work as you expect. (We even threw in &lt;a href=&#34;https://github.com/splattael/minitest-around&#34;&gt;an &lt;code&gt;around&lt;/code&gt; hook&lt;/a&gt; as a bonus!)&lt;/li&gt; &#xA; &lt;li&gt;All of Minitest&#39;s assertions (e.g. &lt;code&gt;assert&lt;/code&gt;, &lt;code&gt;assert_equals&lt;/code&gt;) are provided, with these caveats: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To retain the &lt;code&gt;expected, actual&lt;/code&gt; argument ordering, &lt;code&gt;tldr&lt;/code&gt; defines &lt;code&gt;assert_include?(element, container)&lt;/code&gt; instead of &lt;code&gt;assert_includes(container, element)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you want to maximize compatibility and mix in &lt;code&gt;assert_includes&lt;/code&gt; and the deprecated &lt;code&gt;assert_send&lt;/code&gt;, just &lt;code&gt;include TLDR::Assertions::MinitestCompatibility&lt;/code&gt; into the &lt;code&gt;TLDR&lt;/code&gt; base class or individual test classesJust set it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running tests continuously with --watch&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tldr&lt;/code&gt; CLI includes a &lt;code&gt;--watch&lt;/code&gt; option which will watch for changes in any of the configured load paths (&lt;code&gt;[&#34;test&#34;, &#34;lib&#34;]&lt;/code&gt; by default) and then execute your tests each time a file is changed. To keep the output up-to-date and easy to scan, it will also clear your console before each run.&lt;/p&gt; &#xA;&lt;p&gt;Note that this feature requires you have &lt;a href=&#34;https://github.com/emcrisostomo/fswatch&#34;&gt;fswatch&lt;/a&gt; installed and on your &lt;code&gt;PATH&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what that might look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/tendersearls/tldr/assets/79303/364f0e52-5596-49ce-a470-5eaeddd11f03&#34; alt=&#34;tldr-watch&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running TLDR with Rake&lt;/h3&gt; &#xA;&lt;p&gt;TLDR ships with a &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/lib/tldr/rake.rb&#34;&gt;very&lt;/a&gt; minimal rake task that simply shells out to the &lt;code&gt;tldr&lt;/code&gt; CLI. If you want to run TLDR with Rake, you can configure the test run by setting flags on an env var named &lt;code&gt;TLDR_OPTS&lt;/code&gt; or else in the &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/#setting-defaults-in-tldryml&#34;&gt;.tldr.yml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example Rakefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;standard/rake&#34;&#xA;require &#34;tldr/rake&#34;&#xA;&#xA;task default: [:tldr, &#34;standard:fix&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could then run the task with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ TLDR_OPTS=&#34;--no-parallel&#34; bundle exec rake tldr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One reason you&#39;d want to invoke TLDR with Rake is because you have multiple test suites that you want to be able to conveniently run separately (&lt;a href=&#34;https://blog.testdouble.com/talks/2014-05-25-breaking-up-with-your-test-suite/&#34;&gt;this talk&lt;/a&gt; discussed a few reasons why this can be useful).&lt;/p&gt; &#xA;&lt;p&gt;To create a custom TLDR Rake test, just instantiate &lt;code&gt;TLDR::Task&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;tldr/rake&#34;&#xA;&#xA;TLDR::Task.new(name: :safe_tests, config: TLDR::Config.new(&#xA;  paths: FileList[&#34;safe/**/*_test.rb&#34;],&#xA;  helper_paths: [&#34;safe/helper.rb&#34;],&#xA;  load_paths: [&#34;lib&#34;, &#34;safe&#34;]&#xA;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will create a second Rake task named &lt;code&gt;safe_tests&lt;/code&gt; running a different set of tests than the default &lt;code&gt;tldr&lt;/code&gt; task. Here&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/example/b/Rakefile&#34;&gt;an example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running tests without the CLI&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d rather use TLDR by running Ruby files instead of the &lt;code&gt;tldr&lt;/code&gt; CLI (similar to &lt;code&gt;require &#34;minitest/autorun&#34;&lt;/code&gt;), here&#39;s how to do it!&lt;/p&gt; &#xA;&lt;p&gt;Given a file &lt;code&gt;test/some_test.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;tldr&#34;&#xA;TLDR::Run.at_exit! TLDR::Config.new(no_emoji: true)&#xA;&#xA;class SomeTest &amp;lt; TLDR&#xA;  def test_truth&#xA;    assert true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could run the test with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ruby test/some_test.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To maximize control and to avoid running code accidentally (and &lt;em&gt;unlike&lt;/em&gt; the &lt;code&gt;tldr&lt;/code&gt; CLI), running &lt;code&gt;at_exit!&lt;/code&gt; will not set default values to the &lt;code&gt;paths&lt;/code&gt;, &lt;code&gt;helper&lt;/code&gt;, &lt;code&gt;load_paths&lt;/code&gt;, and &lt;code&gt;prepend_paths&lt;/code&gt; config properties. You&#39;ll have to pass any values you want to set on a &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/lib/tldr/value/config.rb&#34;&gt;Config object&lt;/a&gt; and pass it to &lt;code&gt;at_exit!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To avoid running multiple suites accidentally, if &lt;code&gt;TLDR::Run.at_exit!&lt;/code&gt; is encountered multiple times, only the first hook will be registered. If the &lt;code&gt;tldr&lt;/code&gt; CLI is running and encounters a call to &lt;code&gt;at_exit!&lt;/code&gt;, it will be ignored.&lt;/p&gt; &#xA;&lt;h4&gt;Setting up the load path&lt;/h4&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;tldr&lt;/code&gt; CLI adds &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt; directories to the load path for you, but when running TLDR from a Ruby script, it doesn&#39;t set those up for you.&lt;/p&gt; &#xA;&lt;p&gt;If you want to require code in &lt;code&gt;test/&lt;/code&gt; or &lt;code&gt;lib/&lt;/code&gt; without using &lt;code&gt;require_relative&lt;/code&gt;, you&#39;ll need to add those directories to the load path. You can do this programmatically by prepending the path to &lt;code&gt;$LOAD_PATH&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$LOAD_PATH.unshift &#34;test&#34;&#xA;&#xA;require &#34;tldr&#34;&#xA;TLDR::Run.at_exit! TLDR::Config.new(no_emoji: true)&#xA;&#xA;require &#34;helper&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or by using Ruby&#39;s &lt;code&gt;-I&lt;/code&gt; flag to include it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ruby -Itest test/some_test.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Questions you might be asking&lt;/h2&gt; &#xA;&lt;p&gt;TLDR is very similar to Minitest in API, but different in enough ways that you probably have some questions.&lt;/p&gt; &#xA;&lt;h3&gt;Parallel-by-default is nice in theory but half my tests are failing. Wat?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read this before you add &lt;code&gt;--no-parallel&lt;/code&gt; because some tests are failing when you run &lt;code&gt;tldr&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The vast majority of test suites in the wild are not parallelized and the vast majority of &lt;em&gt;those&lt;/em&gt; will only parallelize by forking processes as opposed to using a thread pool. We wanted to encourage more people to save time (after all, you only get 1.8 seconds here) by making your test suite run as fast as it can, so your tests run in parallel threads by default.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re writing new code and tests with TLDR and dutifully running &lt;code&gt;tldr&lt;/code&gt; constantly for fast feedback, odds are that this will help you catch thread safety issues early—this is a good thing, because it gives you a chance to address them before they&#39;re too hard to fix! But maybe you&#39;re porting an existing test suite to TLDR and running in parallel for the first time, or maybe you need to test something that simply &lt;em&gt;can&#39;t&lt;/em&gt; be exercised in a thread-safe way. For those cases, TLDR&#39;s goal is to give you some tools to prevent you from giving up and adding &lt;code&gt;--no-parallel&lt;/code&gt; to your entire test suite and &lt;strong&gt;slowing everything down for the sake of a few tests&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So, when you see a test that is failing when run in parallel with the rest of your suite, here is what we recommend doing, in priority order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Figure out a way to redesign the test (or the code under test) to be thread-safe. Modern versions of Ruby provide a number of tools to make this easier than it used to be, and it may be as simple as making an instance variable thread-local&lt;/li&gt; &#xA; &lt;li&gt;If the problem is that a subset of your tests depend on the same resource, try using &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/lib/tldr/parallel_controls.rb&#34;&gt;TLDR.run_these_together!&lt;/a&gt; class to group the tests together. This will ensure that those tests run in the same thread in sequence (here&#39;s a &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/tests/fixture/run_these_together.rb&#34;&gt;simple example&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;For tests that affect process-wide resources like setting the system clock or changing the process&#39;s working directory (i.e. &lt;code&gt;Dir.chdir&lt;/code&gt;), you can sequester them to run sequentially &lt;em&gt;after&lt;/em&gt; all parallel tests in your suite have run with &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/lib/tldr/parallel_controls.rb&#34;&gt;TLDR.dont_run_these_in_parallel!&lt;/a&gt;, which takes the same arguments as &lt;code&gt;run_these_together!&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/tests/fixture/dont_run_these_in_parallel.rb&#34;&gt;example&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Give up and make the whole suite &lt;code&gt;--no-parallel&lt;/code&gt;. If you find that you need to resort to this, you might save some keystrokes by adding &lt;code&gt;parallel: false&lt;/code&gt; in a &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/#setting-defaults-in-tldryml&#34;&gt;.tldr.yml&lt;/a&gt; file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We have a couple other ideas of ways to incorporate non-thread-safe tests into your suite without slowing down the rest of your tests, so stay tuned!&lt;/p&gt; &#xA;&lt;h3&gt;How will I run all my tests in CI without the time bomb going off?&lt;/h3&gt; &#xA;&lt;p&gt;TLDR will run all your tests in CI without the time bomb going off. If &lt;code&gt;tldr&lt;/code&gt; is run in a non-interactive shell and a &lt;code&gt;CI&lt;/code&gt; environment variable is set (as it is on virtually every CI service), then the bomb will be defused.&lt;/p&gt; &#xA;&lt;h3&gt;What if I already have another &lt;code&gt;tldr&lt;/code&gt; executable on my path?&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s a &lt;a href=&#34;https://tldr.sh&#34;&gt;command-line utility named tldr&lt;/a&gt; that might conflict with this gem&#39;s binary in your PATH. If that&#39;s the case you could change your path, invoke &lt;code&gt;bundle exec tldr&lt;/code&gt;, run &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/#running-tldr-with-rake&#34;&gt;with Rake&lt;/a&gt;, or use the &lt;code&gt;tldt&lt;/code&gt; (&#34;too long; didn&#39;t test&#34;) executable alias that ships with this gem.&lt;/p&gt; &#xA;&lt;h3&gt;Is there a plugin system?&lt;/h3&gt; &#xA;&lt;p&gt;There is not.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the only pluggable aspect of TLDR are reporters, which can be set with the &lt;code&gt;--reporter&lt;/code&gt; command line option. It can be set to any fully-qualified class name that extends from &lt;a href=&#34;https://raw.githubusercontent.com/tendersearls/tldr/main/lib/tldr/reporters/base.rb&#34;&gt;TLDR::Reporters::Base&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;I know my tests are over 1.8s, how do I suppress the huge output?&lt;/h3&gt; &#xA;&lt;p&gt;Plenty of test suites are over 1.8s and having TLDR repeatedly print out the huge summary at the end of each test run can be distracting and make it harder to spot test failures. If you know your test suite is too slow, you can simply add the &lt;code&gt;--yes-i-know&lt;/code&gt; flag&lt;/p&gt; &#xA;&lt;h3&gt;What about mocking?&lt;/h3&gt; &#xA;&lt;p&gt;TLDR is laser-focused on running tests, so it doesn&#39;t provide a built-in mocking facility. Might we interest you in a refreshing &lt;a href=&#34;https://github.com/testdouble/mocktail&#34;&gt;mocktail&lt;/a&gt;, instead?&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to TLDR&lt;/h2&gt; &#xA;&lt;p&gt;If you want to submit PRs on this repo, please know that the code style is &lt;a href=&#34;https://mastodon.social/@searls/111137666157318482&#34;&gt;Kirkland-style Ruby&lt;/a&gt;, where method definitions have parentheses omitted but parentheses are generally expected for method invocations.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/fuzzmonkey&#34;&gt;George Sheppard&lt;/a&gt; for freeing up the &lt;a href=&#34;https://rubygems.org/gems/tldr&#34;&gt;tldr gem name&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ankane/ahoy</title>
    <updated>2023-10-07T01:38:39Z</updated>
    <id>tag:github.com,2023-10-07:/ankane/ahoy</id>
    <link href="https://github.com/ankane/ahoy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, powerful, first-party analytics for Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ahoy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;span&gt;🔥&lt;/span&gt; Simple, powerful, first-party analytics for Rails&lt;/p&gt; &#xA;&lt;p&gt;Track visits and events in Ruby, JavaScript, and native apps. Data is stored in your database by default, and you can customize it for any data store as you grow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ahoy 5.0 was recently released&lt;/strong&gt; - see &lt;a href=&#34;https://raw.githubusercontent.com/ankane/ahoy/master/#upgrading&#34;&gt;how to upgrade&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;📮&lt;/span&gt; Check out &lt;a href=&#34;https://github.com/ankane/ahoy_email&#34;&gt;Ahoy Email&lt;/a&gt; for emails and &lt;a href=&#34;https://github.com/ankane/field_test&#34;&gt;Field Test&lt;/a&gt; for A/B testing&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🍊&lt;/span&gt; Battle-tested at &lt;a href=&#34;https://www.instacart.com/opensource&#34;&gt;Instacart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankane/ahoy/actions&#34;&gt;&lt;img src=&#34;https://github.com/ankane/ahoy/workflows/build/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application’s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;ahoy_matey&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle install&#xA;rails generate ahoy:install&#xA;rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart your web server, open a page in your browser, and a visit will be created &lt;span&gt;🎉&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Track your first event from a controller with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ahoy.track &#34;My first event&#34;, language: &#34;Ruby&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JavaScript, Native Apps, &amp;amp; AMP&lt;/h3&gt; &#xA;&lt;p&gt;Enable the API in &lt;code&gt;config/initializers/ahoy.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.api = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And restart your web server.&lt;/p&gt; &#xA;&lt;h3&gt;JavaScript&lt;/h3&gt; &#xA;&lt;p&gt;For Importmap (Rails 7 default), add to &lt;code&gt;config/importmap.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pin &#34;ahoy&#34;, to: &#34;ahoy.js&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add to &lt;code&gt;app/javascript/application.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import &#34;ahoy&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Webpacker (Rails 6 default), run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add ahoy.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add to &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import ahoy from &#34;ahoy.js&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Sprockets, add to &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//= require ahoy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Track an event with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ahoy.track(&#34;My second event&#34;, {language: &#34;JavaScript&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Native Apps&lt;/h3&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/namolnad/ahoy-ios&#34;&gt;Ahoy iOS&lt;/a&gt; and &lt;a href=&#34;https://github.com/instacart/ahoy-android&#34;&gt;Ahoy Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Geocoding Setup&lt;/h3&gt; &#xA;&lt;p&gt;To enable geocoding, see the &lt;a href=&#34;https://raw.githubusercontent.com/ankane/ahoy/master/#geocoding&#34;&gt;Geocoding section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;GDPR Compliance&lt;/h3&gt; &#xA;&lt;p&gt;Ahoy provides a number of options to help with GDPR compliance. See the &lt;a href=&#34;https://raw.githubusercontent.com/ankane/ahoy/master/#gdpr-compliance-1&#34;&gt;GDPR section&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;h3&gt;Visits&lt;/h3&gt; &#xA;&lt;p&gt;When someone visits your website, Ahoy creates a visit with lots of useful information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;traffic source&lt;/strong&gt; - referrer, referring domain, landing page&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;location&lt;/strong&gt; - country, region, city, latitude, longitude&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;technology&lt;/strong&gt; - browser, OS, device type&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;utm parameters&lt;/strong&gt; - source, medium, term, content, campaign&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;current_visit&lt;/code&gt; method to access it.&lt;/p&gt; &#xA;&lt;p&gt;Prevent certain Rails actions from creating visits with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;skip_before_action :track_ahoy_visit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is typically useful for APIs. If your entire Rails app is an API, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.api_only = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also defer visit tracking to JavaScript. This is useful for preventing bots (that aren’t detected by their user agent) and users with cookies disabled from creating a new visit on each request. &lt;code&gt;:when_needed&lt;/code&gt; will create visits server-side only when needed by events, and &lt;code&gt;false&lt;/code&gt; will disable server-side creation completely, discarding events without a visit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.server_side_visits = :when_needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;Each event has a &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;properties&lt;/code&gt;. There are several ways to track events.&lt;/p&gt; &#xA;&lt;h4&gt;Ruby&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ahoy.track &#34;Viewed book&#34;, title: &#34;Hot, Flat, and Crowded&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Track actions automatically with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  after_action :track_action&#xA;&#xA;  protected&#xA;&#xA;  def track_action&#xA;    ahoy.track &#34;Ran action&#34;, request.path_parameters&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JavaScript&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ahoy.track(&#34;Viewed book&#34;, {title: &#34;The World is Flat&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ankane/ahoy.js&#34;&gt;Ahoy.js&lt;/a&gt; for a complete list of features.&lt;/p&gt; &#xA;&lt;h4&gt;Native Apps&lt;/h4&gt; &#xA;&lt;p&gt;See the docs for &lt;a href=&#34;https://github.com/namolnad/ahoy-ios&#34;&gt;Ahoy iOS&lt;/a&gt; and &lt;a href=&#34;https://github.com/instacart/ahoy-android&#34;&gt;Ahoy Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;AMP&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;head&amp;gt;&#xA;  &amp;lt;script async custom-element=&#34;amp-analytics&#34; src=&#34;https://cdn.ampproject.org/v0/amp-analytics-0.1.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;  &amp;lt;%= amp_event &#34;Viewed article&#34;, title: &#34;Analytics with Rails&#34; %&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Associated Models&lt;/h3&gt; &#xA;&lt;p&gt;Say we want to associate orders with visits. Just add &lt;code&gt;visitable&lt;/code&gt; to the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Order &amp;lt; ApplicationRecord&#xA;  visitable :ahoy_visit&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a visitor places an order, the &lt;code&gt;ahoy_visit_id&lt;/code&gt; column is automatically set &lt;span&gt;🎉&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;See where orders are coming from with simple joins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Order.joins(:ahoy_visit).group(&#34;referring_domain&#34;).count&#xA;Order.joins(:ahoy_visit).group(&#34;city&#34;).count&#xA;Order.joins(:ahoy_visit).group(&#34;device_type&#34;).count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here’s what the migration to add the &lt;code&gt;ahoy_visit_id&lt;/code&gt; column should look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddAhoyVisitToOrders &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_reference :orders, :ahoy_visit&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Customize the column with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;visitable :sign_up_visit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Users&lt;/h3&gt; &#xA;&lt;p&gt;Ahoy automatically attaches the &lt;code&gt;current_user&lt;/code&gt; to the visit. With &lt;a href=&#34;https://github.com/heartcombo/devise&#34;&gt;Devise&lt;/a&gt;, it attaches the user even if they sign in after the visit starts.&lt;/p&gt; &#xA;&lt;p&gt;With other authentication frameworks, add this to the end of your sign in method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ahoy.authenticate(user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the visits for a given user, create an association:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord&#xA;  has_many :visits, class_name: &#34;Ahoy::Visit&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.find(123).visits&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom User Method&lt;/h4&gt; &#xA;&lt;p&gt;Use a method besides &lt;code&gt;current_user&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.user_method = :true_user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use a proc&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.user_method = -&amp;gt;(controller) { controller.true_user }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Doorkeeper&lt;/h4&gt; &#xA;&lt;p&gt;To attach the user with &lt;a href=&#34;https://github.com/doorkeeper-gem/doorkeeper&#34;&gt;Doorkeeper&lt;/a&gt;, be sure you have a &lt;code&gt;current_resource_owner&lt;/code&gt; method in &lt;code&gt;ApplicationController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  private&#xA;&#xA;  def current_resource_owner&#xA;    User.find(doorkeeper_token.resource_owner_id) if doorkeeper_token&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exclusions&lt;/h3&gt; &#xA;&lt;p&gt;Bots are excluded from tracking by default. To include them, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.track_bots = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add your own rules with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.exclude_method = lambda do |controller, request|&#xA;  request.ip == &#34;192.168.1.1&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Visit Duration&lt;/h3&gt; &#xA;&lt;p&gt;By default, a new visit is created after 4 hours of inactivity. Change this with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.visit_duration = 30.minutes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Visitor Duration&lt;/h3&gt; &#xA;&lt;p&gt;By default, a new &lt;code&gt;visitor_token&lt;/code&gt; is generated after 2 years. Change this with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.visitor_duration = 30.days&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cookies&lt;/h3&gt; &#xA;&lt;p&gt;To track visits across multiple subdomains, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.cookie_domain = :all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set other &lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/Cookies.html&#34;&gt;cookie options&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.cookie_options = {same_site: :lax}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/ankane/ahoy/master/#anonymity-sets--cookies&#34;&gt;disable cookies&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Token Generation&lt;/h3&gt; &#xA;&lt;p&gt;Ahoy uses random UUIDs for visit and visitor tokens by default, but you can use your own generator like &lt;a href=&#34;https://github.com/rafaelsales/ulid&#34;&gt;ULID&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.token_generator = -&amp;gt; { ULID.generate }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Throttling&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/rack/rack-attack&#34;&gt;Rack::Attack&lt;/a&gt; to throttle requests to the API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Rack::Attack&#xA;  throttle(&#34;ahoy/ip&#34;, limit: 20, period: 1.minute) do |req|&#xA;    if req.path.start_with?(&#34;/ahoy/&#34;)&#xA;      req.ip&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exceptions&lt;/h3&gt; &#xA;&lt;p&gt;Exceptions are rescued so analytics do not break your app. Ahoy uses &lt;a href=&#34;https://github.com/ankane/safely&#34;&gt;Safely&lt;/a&gt; to try to report them to a service by default. To customize this, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Safely.report_exception_method = -&amp;gt;(e) { Rollbar.error(e) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Geocoding&lt;/h2&gt; &#xA;&lt;p&gt;Ahoy uses &lt;a href=&#34;https://github.com/alexreisner/geocoder&#34;&gt;Geocoder&lt;/a&gt; for geocoding. We recommend configuring &lt;a href=&#34;https://raw.githubusercontent.com/ankane/ahoy/master/#local-geocoding&#34;&gt;local geocoding&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/ankane/ahoy/master/#load-balancer-geocoding&#34;&gt;load balancer geocoding&lt;/a&gt; so IP addresses are not sent to a 3rd party service. If you do use a 3rd party service and adhere to GDPR, be sure to add it to your subprocessor list. If Ahoy is configured to &lt;a href=&#34;https://raw.githubusercontent.com/ankane/ahoy/master/#ip-masking&#34;&gt;mask IPs&lt;/a&gt;, the masked IP is used (this can reduce accuracy but is better for privacy).&lt;/p&gt; &#xA;&lt;p&gt;To enable geocoding, add this line to your application’s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;geocoder&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And update &lt;code&gt;config/initializers/ahoy.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.geocode = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Geocoding is performed in a background job so it doesn’t slow down web requests. The default job queue is &lt;code&gt;:ahoy&lt;/code&gt;. Change this with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.job_queue = :low_priority&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Local Geocoding&lt;/h3&gt; &#xA;&lt;p&gt;For privacy and performance, we recommend geocoding locally.&lt;/p&gt; &#xA;&lt;p&gt;For city-level geocoding, download the &lt;a href=&#34;https://dev.maxmind.com/geoip/geolite2-free-geolocation-data&#34;&gt;GeoLite2 City database&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add this line to your application’s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;maxminddb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And create &lt;code&gt;config/initializers/geocoder.rb&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Geocoder.configure(&#xA;  ip_lookup: :geoip2,&#xA;  geoip2: {&#xA;    file: &#34;path/to/GeoLite2-City.mmdb&#34;&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For country-level geocoding, install the &lt;code&gt;geoip-database&lt;/code&gt; package. It’s preinstalled on Heroku. For Ubuntu, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install geoip-database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this line to your application’s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;geoip&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And create &lt;code&gt;config/initializers/geocoder.rb&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Geocoder.configure(&#xA;  ip_lookup: :maxmind_local,&#xA;  maxmind_local: {&#xA;    file: &#34;/usr/share/GeoIP/GeoIP.dat&#34;,&#xA;    package: :country&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load Balancer Geocoding&lt;/h3&gt; &#xA;&lt;p&gt;Some load balancers can add geocoding information to request headers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_geoip_module.html&#34;&gt;nginx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/load-balancing/docs/custom-headers&#34;&gt;Google Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/200168236-Configuring-Cloudflare-IP-Geolocation&#34;&gt;Cloudflare&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Update &lt;code&gt;config/initializers/ahoy.rb&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.geocode = false&#xA;&#xA;class Ahoy::Store &amp;lt; Ahoy::DatabaseStore&#xA;  def track_visit(data)&#xA;    data[:country] = request.headers[&#34;&amp;lt;country-header&amp;gt;&#34;]&#xA;    data[:region] = request.headers[&#34;&amp;lt;region-header&amp;gt;&#34;]&#xA;    data[:city] = request.headers[&#34;&amp;lt;city-header&amp;gt;&#34;]&#xA;    super(data)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GDPR Compliance&lt;/h2&gt; &#xA;&lt;p&gt;Ahoy provides a number of options to help with &lt;a href=&#34;https://en.wikipedia.org/wiki/General_Data_Protection_Regulation&#34;&gt;GDPR compliance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Update &lt;code&gt;config/initializers/ahoy.rb&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Ahoy::Store &amp;lt; Ahoy::DatabaseStore&#xA;  def authenticate(data)&#xA;    # disables automatic linking of visits and users&#xA;  end&#xA;end&#xA;&#xA;Ahoy.mask_ips = true&#xA;Ahoy.cookies = :none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Masks IP addresses&lt;/li&gt; &#xA; &lt;li&gt;Switches from cookies to anonymity sets&lt;/li&gt; &#xA; &lt;li&gt;Disables automatic linking of visits and users&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use JavaScript tracking, also set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ahoy.configure({cookies: false});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IP Masking&lt;/h3&gt; &#xA;&lt;p&gt;Ahoy can mask IPs with the same approach &lt;a href=&#34;https://support.google.com/analytics/answer/2763052&#34;&gt;Google Analytics uses for IP anonymization&lt;/a&gt;. This means:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For IPv4, the last octet is set to 0 (&lt;code&gt;8.8.4.4&lt;/code&gt; becomes &lt;code&gt;8.8.4.0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;For IPv6, the last 80 bits are set to zeros (&lt;code&gt;2001:4860:4860:0:0:0:0:8844&lt;/code&gt; becomes &lt;code&gt;2001:4860:4860::&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.mask_ips = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;IPs are masked before geolocation is performed.&lt;/p&gt; &#xA;&lt;p&gt;To mask previously collected IPs, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy::Visit.find_each do |visit|&#xA;  visit.update_column :ip, Ahoy.mask_ip(visit.ip)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Anonymity Sets &amp;amp; Cookies&lt;/h3&gt; &#xA;&lt;p&gt;Ahoy can switch from cookies to &lt;a href=&#34;https://privacypatterns.org/patterns/Anonymity-set&#34;&gt;anonymity sets&lt;/a&gt;. Instead of cookies, visitors with the same IP mask and user agent are grouped together in an anonymity set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.cookies = :none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If Ahoy was installed before v5, &lt;a href=&#34;https://raw.githubusercontent.com/ankane/ahoy/master/#50&#34;&gt;add an index&lt;/a&gt; before making this change.&lt;/p&gt; &#xA;&lt;p&gt;Previously set cookies are automatically deleted. If you use JavaScript tracking, also set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ahoy.configure({cookies: false});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Retention&lt;/h2&gt; &#xA;&lt;p&gt;Data should only be retained for as long as it’s needed. Delete older data with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy::Visit.where(&#34;started_at &amp;lt; ?&#34;, 2.years.ago).find_in_batches do |visits|&#xA;  visit_ids = visits.map(&amp;amp;:id)&#xA;  Ahoy::Event.where(visit_id: visit_ids).delete_all&#xA;  Ahoy::Visit.where(id: visit_ids).delete_all&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/ankane/rollup&#34;&gt;Rollup&lt;/a&gt; to aggregate important data before you do.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy::Visit.rollup(&#34;Visits&#34;, interval: &#34;hour&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delete data for a specific user with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user_id = 123&#xA;visit_ids = Ahoy::Visit.where(user_id: user_id).pluck(:id)&#xA;Ahoy::Event.where(visit_id: visit_ids).delete_all&#xA;Ahoy::Visit.where(id: visit_ids).delete_all&#xA;Ahoy::Event.where(user_id: user_id).delete_all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Ahoy is built with developers in mind. You can run the following code in your browser’s console.&lt;/p&gt; &#xA;&lt;p&gt;Force a new visit&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ahoy.reset(); // then reload the page&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log messages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ahoy.debug();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turn off logging&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ahoy.debug(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug API requests in Ruby&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.quiet = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Stores&lt;/h2&gt; &#xA;&lt;p&gt;Data tracked by Ahoy is sent to your data store. Ahoy ships with a data store that uses your Rails database by default. You can find it in &lt;code&gt;config/initializers/ahoy.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Ahoy::Store &amp;lt; Ahoy::DatabaseStore&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are four events data stores can subscribe to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Ahoy::Store &amp;lt; Ahoy::BaseStore&#xA;  def track_visit(data)&#xA;    # new visit&#xA;  end&#xA;&#xA;  def track_event(data)&#xA;    # new event&#xA;  end&#xA;&#xA;  def geocode(data)&#xA;    # visit geocoded&#xA;  end&#xA;&#xA;  def authenticate(data)&#xA;    # user authenticates&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Data stores are designed to be highly customizable so you can scale as you grow. Check out &lt;a href=&#34;https://raw.githubusercontent.com/ankane/ahoy/master/docs/Data-Store-Examples.md&#34;&gt;examples&lt;/a&gt; for Kafka, RabbitMQ, Fluentd, NATS, NSQ, and Amazon Kinesis Firehose.&lt;/p&gt; &#xA;&lt;h3&gt;Track Additional Data&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Ahoy::Store &amp;lt; Ahoy::DatabaseStore&#xA;  def track_visit(data)&#xA;    data[:accept_language] = request.headers[&#34;Accept-Language&#34;]&#xA;    super(data)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Two useful methods you can use are &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;controller&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can pass additional visit data from JavaScript with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ahoy.configure({visitParams: {referral_code: 123}});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Ahoy::Store &amp;lt; Ahoy::DatabaseStore&#xA;  def track_visit(data)&#xA;    data[:referral_code] = request.parameters[:referral_code]&#xA;    super(data)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use Different Models&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Ahoy::Store &amp;lt; Ahoy::DatabaseStore&#xA;  def visit_model&#xA;    MyVisit&#xA;  end&#xA;&#xA;  def event_model&#xA;    MyEvent&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Explore the Data&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankane/blazer&#34;&gt;Blazer&lt;/a&gt; is a great tool for exploring your data.&lt;/p&gt; &#xA;&lt;p&gt;With Active Record, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy::Visit.group(:search_keyword).count&#xA;Ahoy::Visit.group(:country).count&#xA;Ahoy::Visit.group(:referring_domain).count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.chartkick.com/&#34;&gt;Chartkick&lt;/a&gt; and &lt;a href=&#34;https://github.com/ankane/groupdate&#34;&gt;Groupdate&lt;/a&gt; make it easy to visualize the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= line_chart Ahoy::Visit.group_by_day(:started_at).count %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Querying Events&lt;/h3&gt; &#xA;&lt;p&gt;Ahoy provides a few methods on the event model to make querying easier.&lt;/p&gt; &#xA;&lt;p&gt;To query on both name and properties, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy::Event.where_event(&#34;Viewed product&#34;, product_id: 123).count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or just query properties with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy::Event.where_props(product_id: 123, category: &#34;Books&#34;).count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Group by properties with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy::Event.group_prop(:product_id, :category).count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: MySQL and MariaDB always return string keys (including &lt;code&gt;&#34;null&#34;&lt;/code&gt; for &lt;code&gt;nil&lt;/code&gt;) for &lt;code&gt;group_prop&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Funnels&lt;/h3&gt; &#xA;&lt;p&gt;It’s easy to create funnels.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;viewed_store_ids = Ahoy::Event.where(name: &#34;Viewed store&#34;).distinct.pluck(:user_id)&#xA;added_item_ids = Ahoy::Event.where(user_id: viewed_store_ids, name: &#34;Added item to cart&#34;).distinct.pluck(:user_id)&#xA;viewed_checkout_ids = Ahoy::Event.where(user_id: added_item_ids, name: &#34;Viewed checkout&#34;).distinct.pluck(:user_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same approach also works with visitor tokens.&lt;/p&gt; &#xA;&lt;h3&gt;Rollups&lt;/h3&gt; &#xA;&lt;p&gt;Improve query performance by pre-aggregating data with &lt;a href=&#34;https://github.com/ankane/rollup&#34;&gt;Rollup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy::Event.where(name: &#34;Viewed store&#34;).rollup(&#34;Store views&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is only needed if you have a lot of data.&lt;/p&gt; &#xA;&lt;h3&gt;Forecasting&lt;/h3&gt; &#xA;&lt;p&gt;To forecast future visits and events, check out &lt;a href=&#34;https://github.com/ankane/prophet&#34;&gt;Prophet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;daily_visits = Ahoy::Visit.group_by_day(:started_at).count # uses Groupdate&#xA;Prophet.forecast(daily_visits)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Anomaly Detection&lt;/h3&gt; &#xA;&lt;p&gt;To detect anomalies in visits and events, check out &lt;a href=&#34;https://github.com/ankane/AnomalyDetection.rb&#34;&gt;AnomalyDetection.rb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;daily_visits = Ahoy::Visit.group_by_day(:started_at).count # uses Groupdate&#xA;AnomalyDetection.detect(daily_visits, period: 7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Breakout Detection&lt;/h3&gt; &#xA;&lt;p&gt;To detect breakouts in visits and events, check out &lt;a href=&#34;https://github.com/ankane/breakout&#34;&gt;Breakout&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;daily_visits = Ahoy::Visit.group_by_day(:started_at).count # uses Groupdate&#xA;Breakout.detect(daily_visits)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Recommendations&lt;/h3&gt; &#xA;&lt;p&gt;To make recommendations based on events, check out &lt;a href=&#34;https://github.com/ankane/disco#ahoy&#34;&gt;Disco&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gorails.com/episodes/internal-metrics-with-ahoy-and-blazer&#34;&gt;Tracking Metrics with Ahoy and Blazer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API Spec&lt;/h2&gt; &#xA;&lt;h3&gt;Visits&lt;/h3&gt; &#xA;&lt;p&gt;Generate visit and visitor tokens as &lt;a href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier&#34;&gt;UUIDs&lt;/a&gt;, and include these values in the &lt;code&gt;Ahoy-Visit&lt;/code&gt; and &lt;code&gt;Ahoy-Visitor&lt;/code&gt; headers with all requests.&lt;/p&gt; &#xA;&lt;p&gt;Send a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;/ahoy/visits&lt;/code&gt; with &lt;code&gt;Content-Type: application/json&lt;/code&gt; and a body like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;visit_token&#34;: &#34;&amp;lt;visit-token&amp;gt;&#34;,&#xA;  &#34;visitor_token&#34;: &#34;&amp;lt;visitor-token&amp;gt;&#34;,&#xA;  &#34;platform&#34;: &#34;iOS&#34;,&#xA;  &#34;app_version&#34;: &#34;1.0.0&#34;,&#xA;  &#34;os_version&#34;: &#34;11.2.6&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After 4 hours of inactivity, create another visit (use the same visitor token).&lt;/p&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;Send a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;/ahoy/events&lt;/code&gt; with &lt;code&gt;Content-Type: application/json&lt;/code&gt; and a body like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;visit_token&#34;: &#34;&amp;lt;visit-token&amp;gt;&#34;,&#xA;  &#34;visitor_token&#34;: &#34;&amp;lt;visitor-token&amp;gt;&#34;,&#xA;  &#34;events&#34;: [&#xA;    {&#xA;      &#34;id&#34;: &#34;&amp;lt;optional-random-id&amp;gt;&#34;,&#xA;      &#34;name&#34;: &#34;Viewed item&#34;,&#xA;      &#34;properties&#34;: {&#xA;        &#34;item_id&#34;: 123&#xA;      },&#xA;      &#34;time&#34;: &#34;2018-01-01T00:00:00-07:00&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;h3&gt;5.0&lt;/h3&gt; &#xA;&lt;p&gt;Visits now expire with anonymity sets. If using &lt;code&gt;Ahoy.cookies = false&lt;/code&gt;, a new index is needed.&lt;/p&gt; &#xA;&lt;p&gt;For Active Record, create a migration with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;add_index :ahoy_visits, [:visitor_token, :started_at]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Mongoid, set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Ahoy::Visit&#xA;  index({visitor_token: 1, started_at: 1})&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the index before upgrading, and set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Ahoy.cookies = :none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;View the &lt;a href=&#34;https://github.com/ankane/ahoy/raw/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Everyone is encouraged to help improve this project. Here are a few ways you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankane/ahoy/issues&#34;&gt;Report bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fix bugs and &lt;a href=&#34;https://github.com/ankane/ahoy/pulls&#34;&gt;submit pull requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write, clarify, or fix documentation&lt;/li&gt; &#xA; &lt;li&gt;Suggest or add new features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get started with development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/ankane/ahoy.git&#xA;cd ahoy&#xA;bundle install&#xA;bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test different adapters, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ADAPTER=postgresql bundle exec rake test&#xA;ADAPTER=mysql2 bundle exec rake test&#xA;ADAPTER=mongoid bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>