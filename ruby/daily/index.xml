<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-22T01:43:11Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>daimatz/mamemose</title>
    <updated>2023-05-22T01:43:11Z</updated>
    <id>tag:github.com,2023-05-22:/daimatz/mamemose</id>
    <link href="https://github.com/daimatz/mamemose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Markdown memo server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mamemose: Markdown memo server&lt;/h1&gt; &#xA;&lt;p&gt;version 0.4.4&lt;/p&gt; &#xA;&lt;h2&gt;概要&lt;/h2&gt; &#xA;&lt;p&gt;理想の Markdown メモツールを探したがなかったので自分で作った。要件としては&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Markdown など軽量マークアップ言語で書かれたドキュメントを コマンド操作無しで勝手に HTML に変換してくれる &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sphinx などをそのまま使うのはコマンドを打つ手間があるので嫌だった&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ローカルに余計なファイルができてほしくない &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Markdown から静的な HTML ファイルを生成するのは嬉しくない。 邪魔なファイルが増えるし、変換が自動化されていたとしても 何かの拍子に Markdown ファイルと HTML ファイルの同期が取れなくなりそうな気もする。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;複数マシンで内容を共有できる (Dropbox 等を使ってもよい)&lt;/li&gt; &#xA; &lt;li&gt;マルチプラットフォーム (少なくとも OSX, Linux は必須)&lt;/li&gt; &#xA; &lt;li&gt;使い慣れたエディタを使える&lt;/li&gt; &#xA; &lt;li&gt;検索できる&lt;/li&gt; &#xA; &lt;li&gt;GitHub Flavored Markdown でシンタックスハイライトもしてほしい&lt;/li&gt; &#xA; &lt;li&gt;LaTeX で数式も書きたい&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;環境&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 1.8.7, 1.9.3, 2.0.0&lt;/li&gt; &#xA; &lt;li&gt;OSX, Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows も Cygwin 上でなら動くことは確認した&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;インストール方法&lt;/h2&gt; &#xA;&lt;p&gt;RubyGems で公開されています。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubygems.org/gems/mamemose&#34;&gt;https://rubygems.org/gems/mamemose&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;インストールは&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install mamemose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使い方&lt;/h2&gt; &#xA;&lt;p&gt;設定ファイル (後述) を書いたら以下で起動。 もしかしたら &lt;code&gt;~/.gem/*/bin&lt;/code&gt; とか &lt;code&gt;/Library/Ruby/Gems/1.8/*/bin&lt;/code&gt; あたりに パスを通す必要があるかも。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mamemose &amp;amp;&amp;gt; /dev/null &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;するとローカルで HTTP サーバが立ち上がります。その後ブラウザから&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:PORT/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;にアクセスすればおｋ&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DOCUMENT_ROOT&lt;/code&gt; 以下の Markdown で書かれたテキストを勝手にHTMLに変換して表示します。 &lt;code&gt;DOCUMENT_ROOT&lt;/code&gt; を Dropbox 以下のディレクトリに指定しておけば、どのマシンからでも メモにアクセスできるようになります。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一覧ページでは Markdown ドキュメントの1行目をタイトルとして読み込みます。&lt;/li&gt; &#xA; &lt;li&gt;文字コードは UTF-8 で書くようにしてください。&lt;/li&gt; &#xA; &lt;li&gt;コマンドラインオプションは &lt;code&gt;mamemose help&lt;/code&gt; で出ます。一応。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;自動更新&lt;/h3&gt; &#xA;&lt;p&gt;WebSocket を使って自動更新できます。 mamemose サーバを立てた後アクセスされたファイルを監視しておき、 更新があればそのファイルを開いているブラウザのページを自動的にリロードします。&lt;/p&gt; &#xA;&lt;p&gt;現在のところ、 WebSocket 用のサーバを別に立てておくという設計になっています。 以下のマンドを叩いて mamemose WebSocket サーバを起動しておいてください。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mamemose_websocket &amp;amp;&amp;gt; /dev/null &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;mamemose WebSocket サーバを立てなくても利用できます。 その場合は手動で更新してください。&lt;/p&gt; &#xA;&lt;h3&gt;一時ファイル閲覧&lt;/h3&gt; &#xA;&lt;p&gt;一時的に &lt;code&gt;DOCUMENT_ROOT&lt;/code&gt; で指定したディレクトリ以外にあるファイルを ブラウザで Markdown プレビューする機能があります。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mamemose s /path/to/file 8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;などとして &lt;code&gt;localhost:8000&lt;/code&gt; にアクセスすると、 &lt;code&gt;/path/to/file&lt;/code&gt; を Mamemose サーバでレンダリングした HTML をブラウザから 見ることができます。 これによって GitHub などに置く Markdown ファイルを push する前に 試しにブラウザから見ることができ、 レンダリングの崩れなどがないかチェックできます。&lt;/p&gt; &#xA;&lt;h3&gt;シンタックスハイライト&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://github.github.com/github-flavored-markdown/&#34;&gt;コード部分に GitHub Flavored Markdown の記法&lt;/a&gt; を使うとシンタックスハイライトされます。ハイライトエンジンは&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubychan/coderay&#34;&gt;CodeRay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://alexgorbatchev.com/SyntaxHighlighter/&#34;&gt;SyntaxHighlighter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;から選べます。設定例を参照。&lt;/p&gt; &#xA;&lt;h3&gt;数式&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; を使うと数式も書けます。設定例を参照。&lt;/p&gt; &#xA;&lt;h2&gt;設定&lt;/h2&gt; &#xA;&lt;p&gt;ホームディレクトリに &lt;code&gt;.mamemose.rb&lt;/code&gt; という設定ファイルを置くとそれを読みます。 設定項目は以下の通りで、 設定されなかったらデフォルト値を使います。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOST&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;mamemose サーバを立てるホスト名または IP。デフォルトは &lt;code&gt;localhost&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCUMENT_ROOT&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ドキュメントルート。デフォルトは &lt;code&gt;~/Dropbox/memo&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PORT&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;mamemose ポート。 &lt;a href=&#34;http://localhost:PORT/&#34;&gt;http://localhost:PORT/&lt;/a&gt; にアクセス。デフォルトは 20000&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WS_PORT&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WebSocket サーバのポート。 特に利用者から見えるわけではありませんが。デフォルトは 20001&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MARKDOWN_PATTERN&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Markdown ドキュメントと見なすファイルパターンを正規表現で。デフォルトは &lt;code&gt;/\.(md|markdown)$/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SYNTAX_HIGHLIGHT&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;生成する HTML が使用するシンタックスハイライトエンジン。 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;:coderay&lt;/code&gt; CodeRay を使う。デフォルト。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;:syntaxhighlighter&lt;/code&gt; SyntaxHighlighter を使う。&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INDEX_PATTERN&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;一覧ページ表示時に自動的に読み込むファイルパターンを正規表現で。 これにマッチするファイルは1つのディレクトリに複数置かないほうがいいです。 デフォルトは &lt;code&gt;/^README/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RECENT_NUM&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;「最近更新したファイル」を表示する数。デフォルトは 10&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RECENT_PATTERN&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;「最近更新したファイル」に表示するファイルパターンを正規表現で。 デフォルトは &lt;code&gt;/.*/&lt;/code&gt;、つまり任意のファイルにマッチします。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CUSTOM_HEADER&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;カスタムヘッダ。 &lt;code&gt;head&lt;/code&gt; タグの最後に入る。デフォルトは空文字列。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CUSTOM_BODY&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;カスタムボディ。 &lt;code&gt;body&lt;/code&gt; タグの最初に入る。デフォルトは空文字列。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CUSTOM_FOOTER&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;カスタムフッタ。 &lt;code&gt;body&lt;/code&gt; タグの最後に入る。デフォルトは空文字列。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IGNORE_FILES&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;無視するファイル・ディレクトリのリスト。 文字列の場合はそのものを、正規表現の場合はそれにマッチするものを無視する。 デフォルトは以下の通り。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;[&#39;_Store&#39;,&#39;.AppleDouble&#39;,&#39;.LSOverride&#39;,&#39;Icon&#39;,/^\./,/~$/,&#xA; &#39;.Spotlight-V100&#39;,&#39;.Trashes&#39;,&#39;Thumbs.db&#39;,&#39;ehthumbs.db&#39;,&#xA; &#39;Desktop.ini&#39;,&#39;$RECYCLE.BIN&#39;,/^#/,&#39;MathJax&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;設定ファイル例&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;~/.mamemose.rb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;DOCUMENT_ROOT = &#34;~/memo&#34;&#xA;&#xA;PORT = 8888&#xA;&#xA;# 通常の Markdown ファイルに加えて .txt ファイルも Markdown と見なす&#xA;MARKDOWN_PATTERN = /\.(md|markdown|txt)$/&#xA;&#xA;# 最近更新したファイル一覧がジャマ&#xA;RECENT_NUM = 0&#xA;&#xA;# 最近更新したファイル一覧に出すものを Markdown ドキュメントだけにする&#xA;# RECENT_PATTERN = MARKDOWN_PATTERN&#xA;&#xA;# すべてのページで MathJax が使えるように&#xA;CUSTOM_HEADER = &amp;lt;&amp;lt;HEADER&#xA;&amp;lt;script src=&#34;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&#34;&amp;gt;&#xA;&amp;lt;/script&amp;gt;&#xA;HEADER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;使用例&lt;/h3&gt; &#xA;&lt;p&gt;上記のように設定ファイルを書いたとする。 次のような Markdown ファイル &lt;code&gt;~/memo/sample.md&lt;/code&gt; を書くと、&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;数列&#xA;====&#xA;&#xA;問題&#xA;----&#xA;&#xA;和の公式&#xA;$$ \sum\_{k=1}^n k = \frac{1}{2}n(n+1) $$&#xA;を計算する関数を C++ で実装せよ。&#xA;&#xA;解答&#xA;----&#xA;&#xA;```cpp&#xA;int f(int n) {&#xA;  int ret = 0;&#xA;  for (int k = 1; k &amp;lt;= n; k++) {&#xA;    ret += k;&#xA;  }&#xA;  return ret;&#xA;}&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;一覧ページ (&lt;a href=&#34;http://localhost:8888/&#34;&gt;http://localhost:8888/&lt;/a&gt;) では次のように表示される。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/daimatz/mamemose/master/index.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;またこのファイルの表示 (&lt;a href=&#34;http://localhost:8888/sample.md&#34;&gt;http://localhost:8888/sample.md&lt;/a&gt;) は次のようになる。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/daimatz/mamemose/master/sample.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;検索&lt;/h2&gt; &#xA;&lt;p&gt;Markdown ドキュメントを全文検索して一致したものを表示します。 Markdown ドキュメントでないものはファイル名に一致したものを表示します。&lt;/p&gt; &#xA;&lt;h2&gt;FAQ と予想されるもの&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;遅いよ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;一覧ページでは「最近更新したファイル」を表示するために そのディレクトリ以下の全ファイルを舐めているので遅いです。 &lt;code&gt;RECENT_NUM = 0&lt;/code&gt; にしてください。&lt;/li&gt; &#xA;   &lt;li&gt;検索が遅いのはどうしようもないです。 5KB 〜 10KB くらいのメモが 3000 件くらいまでなら まあ使えるかなというのは確認したつもりですが&lt;/li&gt; &#xA;   &lt;li&gt;SSD 積んでますか？&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;reStructuredText 対応して &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Python で書いてください&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;更新のとき自動でページ最下部に行ってほしい &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;フッタのタグを &lt;code&gt;&amp;lt;footer id=&#34;footer&#34;&amp;gt;&lt;/code&gt; としてあるので、 &lt;code&gt;http://host/path/to/document.md#footer&lt;/code&gt; にアクセスして編集すると 更新のとき自動でページ最下部に行ってくれます。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;表、テーブル、 table を書きたいんだけど &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;実は書けました。&lt;/strong&gt; 以下のようにします。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Name    |   Age&#xA;--------|------&#xA;Fred    |   29&#xA;Jim     |   47&#xA;Harry   |   32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;定義リスト、 definition list, dl を書きたいんだけど &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;無理らしいです。 HTML 直接書いてください。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;その他&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://daimatz.hateblo.jp/entry/2012/12/01/152725&#34;&gt;ブログ的なエントリ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/3969549&#34;&gt;Haskell 用 SyntaxHighlighter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-ruby-oo-inheritance-inheritance-lab</title>
    <updated>2023-05-22T01:43:11Z</updated>
    <id>tag:github.com,2023-05-22:/learn-co-curriculum/phase-3-ruby-oo-inheritance-inheritance-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-ruby-oo-inheritance-inheritance-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Object Inheritance Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define classes that inherit from a shared parent, or super, class&lt;/li&gt; &#xA; &lt;li&gt;Define methods unique to those classes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this lab, we&#39;ll be working with a school domain model. Our application has users that are either teachers or students. Teachers and students will share certain attributes and have certain behaviors that are unique to them. You&#39;ll be defining a &lt;code&gt;User&lt;/code&gt; class that both students and teachers inherit from and you&#39;ll be writing methods within both the &lt;code&gt;Student&lt;/code&gt; and &lt;code&gt;Teacher&lt;/code&gt; class that are unique to that class.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Run the test suite to get started. This is a test-driven lab.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Define the &lt;code&gt;User&lt;/code&gt; class such that a user can have a first and last name. You&#39;ll need both a setter and a getter for first and last name.&lt;/li&gt; &#xA; &lt;li&gt;We&#39;ve given you a barebones &lt;code&gt;Student&lt;/code&gt; class. Change the class definition so that it inherits from the &lt;code&gt;User&lt;/code&gt; class. Run the test suite and notice that you are passing some tests for the &lt;code&gt;Student&lt;/code&gt; class, even without writing any code inside that class. That is because it will inherit the &lt;code&gt;#first_name&lt;/code&gt; and &lt;code&gt;#last_name&lt;/code&gt; methods from the &lt;code&gt;User&lt;/code&gt; class you told it to inherit from.&lt;/li&gt; &#xA; &lt;li&gt;Individual students should initialize with an instance variable, &lt;code&gt;@knowledge&lt;/code&gt;, that points to an empty array.&lt;/li&gt; &#xA; &lt;li&gt;Define a method, &lt;code&gt;#learn&lt;/code&gt;, that takes in a string and adds that string to the student&#39;s &lt;code&gt;@knowledge&lt;/code&gt; array.&lt;/li&gt; &#xA; &lt;li&gt;Define a method, &lt;code&gt;#knowledge&lt;/code&gt;, that returns that student&#39;s knowledge array.&lt;/li&gt; &#xA; &lt;li&gt;We&#39;ve given you a barebones &lt;code&gt;Teacher&lt;/code&gt; class in &lt;code&gt;lib/teacher.rb&lt;/code&gt;. Change the class definition so that the &lt;code&gt;Teacher&lt;/code&gt; class inherits from the &lt;code&gt;User&lt;/code&gt; class. Run the test suite and notice that you are passing some tests for the &lt;code&gt;Teacher&lt;/code&gt; class, even without writing any code inside that class. That is because it will inherit the &lt;code&gt;#first_name&lt;/code&gt; and &lt;code&gt;#last_name&lt;/code&gt; methods from the &lt;code&gt;User&lt;/code&gt; class you told it to inherit from.&lt;/li&gt; &#xA; &lt;li&gt;Within the &#39;Teacher&#39; class, we&#39;ve given you a class constant &lt;code&gt;KNOWLEDGE&lt;/code&gt;, that points to an array of knowledge strings. Write a method, &lt;code&gt;#teach&lt;/code&gt; that returns a random element from that array. You might want to look up the &lt;code&gt;Array#sample&lt;/code&gt; method.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Bonus: Building a Program With Classes&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve set up an executable file for you in &lt;code&gt;bin/time_for_school&lt;/code&gt;. It contains some code for a Ruby command line interface (CLI) application. The code is in a &lt;code&gt;bin&lt;/code&gt; folder because since we are following file structure conventions for building a CLI application.&lt;/p&gt; &#xA;&lt;p&gt;The syntax at the top of the file, &lt;code&gt;#!/usr/bin/env ruby&lt;/code&gt;, is known as a &lt;a href=&#34;https://www.learnhowtoprogram.com/ruby-and-rails/basic-ruby/basic-ruby-scripting&#34;&gt;Ruby shebang&lt;/a&gt;. Technically, our program will still work without it. The benefit of having this line is that we can turn the program into an executable file by running &lt;code&gt;chmod +x bin/time_for_school.rb&lt;/code&gt; from the terminal, which specifies that our program should be executable from the command line without using &lt;code&gt;ruby&lt;/code&gt; at the beginning. You&#39;ll see this directive a lot in Ruby CLI applications.&lt;/p&gt; &#xA;&lt;p&gt;Check out the code there and run the file with &lt;code&gt;ruby bin/time_for_school&lt;/code&gt; in your terminal. Get a feel for how the code we wrote works and what methods are available to our student and teacher instances thanks to inheritance.&lt;/p&gt; &#xA;&lt;p&gt;Play around with it a bit more by trying out the following in this file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We have a new user, Jim, who is just here to audit a few classes. He is neither a teacher nor a student. Create a local variable, &lt;code&gt;jim&lt;/code&gt;, and point it equal to an instance of the &lt;code&gt;User&lt;/code&gt; class. Then, give &lt;code&gt;jim&lt;/code&gt; a first and last name. What happens when you try to call &lt;code&gt;#learn&lt;/code&gt; on &lt;code&gt;jim&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;Continue to operate on our student, &lt;code&gt;steve&lt;/code&gt;. Have &lt;code&gt;avi&lt;/code&gt; teach him some more important knowledge.&lt;/li&gt; &#xA; &lt;li&gt;Create a new student and have that student learn a few things from &lt;code&gt;avi&lt;/code&gt; as well.&lt;/li&gt; &#xA; &lt;li&gt;Then, &lt;code&gt;puts&lt;/code&gt; out the existing knowledge of each student.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>