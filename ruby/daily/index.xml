<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-10T01:44:07Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ErwinM/acts_as_tenant</title>
    <updated>2023-12-10T01:44:07Z</updated>
    <id>tag:github.com,2023-12-10:/ErwinM/acts_as_tenant</id>
    <link href="https://github.com/ErwinM/acts_as_tenant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy multi-tenancy for Rails in a shared database setup.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Acts As Tenant&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ErwinM/acts_as_tenant/actions&#34;&gt;&lt;img src=&#34;https://github.com/ErwinM/acts_as_tenant/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/acts_as_tenant&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/acts_as_tenant.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Row-level multitenancy for Ruby on Rails apps.&lt;/p&gt; &#xA;&lt;p&gt;This gem was born out of our own need for a fail-safe and out-of-the-way manner to add multi-tenancy to our Rails app through a shared database strategy, that integrates (near) seamless with Rails.&lt;/p&gt; &#xA;&lt;p&gt;acts_as_tenant adds the ability to scope models to a tenant. Tenants are represented by a tenant model, such as &lt;code&gt;Account&lt;/code&gt;. acts_as_tenant will help you set the current tenant on each request and ensures all &#39;tenant models&#39; are always properly scoped to the current tenant: when viewing, searching and creating.&lt;/p&gt; &#xA;&lt;p&gt;In addition, acts_as_tenant:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sets the current tenant using the subdomain or allows you to pass in the current tenant yourself&lt;/li&gt; &#xA; &lt;li&gt;protects against various types of nastiness directed at circumventing the tenant scoping&lt;/li&gt; &#xA; &lt;li&gt;adds a method to validate uniqueness to a tenant, &lt;code&gt;validates_uniqueness_to_tenant&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;sets up a helper method containing the current tenant&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: acts_as_tenant was introduced in this &lt;a href=&#34;https://github.com/ErwinM/acts_as_tenant/raw/master/docs/blog_post.md&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Row-level vs schema multitenancy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;What&#39;s the difference?&lt;/p&gt; &#xA;&lt;p&gt;Row-level multitenancy each model must have a tenant ID column on it. This makes it easy to filter records for each tenant using your standard database columns and indexes. ActsAsTenant uses row-level multitenancy.&lt;/p&gt; &#xA;&lt;p&gt;Schema multitenancy uses database schemas to handle multitenancy. For this approach, your database has multiple schemas and each schema contains your database tables. Schemas require migrations to be run against each tenant and generally makes it harder to scale as you add more tenants. The Apartment gem uses schema multitenancy.&lt;/p&gt; &#xA;&lt;h4&gt;ðŸŽ¬ Walkthrough&lt;/h4&gt; &#xA;&lt;p&gt;Want to see how it works? Check out &lt;a href=&#34;https://www.youtube.com/watch?v=BIyxM9f8Jus&#34;&gt;the ActsAsTenant walkthrough video&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=BIyxM9f8Jus&#34;&gt; &lt;img src=&#34;https://i.imgur.com/DLRPzhv.png&#34; width=&#34;300&#34; height=&#34;auto&#34; alt=&#34;ActsAsTenant Walkthrough Video&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use it, add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;acts_as_tenant&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;There are two steps in adding multi-tenancy to your app with acts_as_tenant:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;setting the current tenant and&lt;/li&gt; &#xA; &lt;li&gt;scoping your models.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setting the current tenant&lt;/h2&gt; &#xA;&lt;p&gt;There are three ways to set the current tenant:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;by using the subdomain to lookup the current tenant,&lt;/li&gt; &#xA; &lt;li&gt;by setting the current tenant in the controller, and&lt;/li&gt; &#xA; &lt;li&gt;by setting the current tenant for a block.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Looking Up Tenants&lt;/h3&gt; &#xA;&lt;h4&gt;By Subdomain to lookup the current tenant&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  set_current_tenant_by_subdomain(:account, :subdomain)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tells acts_as_tenant to use the last subdomain to identify the current tenant. In addition, it tells acts_as_tenant that tenants are represented by the Account model and this model has a column named &#39;subdomain&#39; which can be used to lookup the Account using the actual subdomain. If ommitted, the parameters will default to the values used above.&lt;/p&gt; &#xA;&lt;p&gt;By default, the &lt;em&gt;last&lt;/em&gt; subdomain will be used for lookup. Pass in &lt;code&gt;subdomain_lookup: :first&lt;/code&gt; to use the first subdomain instead.&lt;/p&gt; &#xA;&lt;h4&gt;By Domain to lookup the current tenant&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  set_current_tenant_by_subdomain_or_domain(:account, :subdomain, :domain)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can locate the tenant using &lt;code&gt;set_current_tenant_by_subdomain_or_domain( :account, :subdomain, :domain )&lt;/code&gt; which will check for a subdomain and fallback to domain.&lt;/p&gt; &#xA;&lt;p&gt;By default, the &lt;em&gt;last&lt;/em&gt; subdomain will be used for lookup. Pass in &lt;code&gt;subdomain_lookup: :first&lt;/code&gt; to use the first subdomain instead.&lt;/p&gt; &#xA;&lt;h4&gt;Manually using before_action&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  set_current_tenant_through_filter&#xA;  before_action :your_method_that_finds_the_current_tenant&#xA;&#xA;  def your_method_that_finds_the_current_tenant&#xA;    current_account = Account.find_it&#xA;    set_current_tenant(current_account)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;current_tenant&lt;/code&gt; yourself, requires you to declare &lt;code&gt;set_current_tenant_through_filter&lt;/code&gt; at the top of your application_controller to tell acts_as_tenant that you are going to use a before_action to setup the current tenant. Next you should actually setup that before_action to fetch the current tenant and pass it to &lt;code&gt;acts_as_tenant&lt;/code&gt; by using &lt;code&gt;set_current_tenant(current_tenant)&lt;/code&gt; in the before_action.&lt;/p&gt; &#xA;&lt;p&gt;If you are setting the tenant in a specific controller (except &lt;code&gt;application_controller&lt;/code&gt;), it should to be included &lt;strong&gt;AT THE TOP&lt;/strong&gt; of the file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MembersController &amp;lt; ActionController::Base&#xA;  set_current_tenant_through_filter&#xA;  before_action :set_tenant&#xA;  before_action :set_member, only: [:show, :edit, :update, :destroy]&#xA;&#xA;  def set_tenant&#xA;    set_current_tenant(current_user.account)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows the tenant to be set before any other code runs so everything is within the current tenant.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the current tenant for a block&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActsAsTenant.with_tenant(current_account) do&#xA;  # Current tenant is set for all code in this block&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This approach is useful when running background processes for a specified tenant. For example, by putting this in your worker&#39;s run method, any code in this block will be scoped to the current tenant. All methods that set the current tenant are thread safe.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the current tenant is not set by one of these methods, Acts_as_tenant will be unable to apply the proper scope to your models. So make sure you use one of the two methods to tell acts_as_tenant about the current tenant.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling tenant checking for a block&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActsAsTenant.without_tenant do&#xA;  # Tenant checking is disabled for all code in this block&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful in shared routes such as admin panels or internal dashboards when &lt;code&gt;require_tenant&lt;/code&gt; option is enabled throughout the app.&lt;/p&gt; &#xA;&lt;h3&gt;Allowing tenant updating for a block&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActsAsTenant.with_mutable_tenant do&#xA;  # Tenant updating is enabled for all code in this block&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will allow you to change the tenant of a model. This feature is useful for admin screens, where it is ok to allow certain users to change the tenant on existing models in specific cases.&lt;/p&gt; &#xA;&lt;h3&gt;Require tenant to be set always&lt;/h3&gt; &#xA;&lt;p&gt;If you want to require the tenant to be set at all times, you can configure acts_as_tenant to raise an error when a query is made without a tenant available. See below under configuration options.&lt;/p&gt; &#xA;&lt;h2&gt;Scoping your models&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddAccountToUsers &amp;lt; ActiveRecord::Migration&#xA;  def up&#xA;    add_column :users, :account_id, :integer&#xA;    add_index  :users, :account_id&#xA;  end&#xA;end&#xA;&#xA;class User &amp;lt; ActiveRecord::Base&#xA;  acts_as_tenant(:account)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;acts_as_tenant&lt;/code&gt; requires each scoped model to have a column in its schema linking it to a tenant. Adding &lt;code&gt;acts_as_tenant&lt;/code&gt; to your model declaration will scope that model to the current tenant &lt;strong&gt;BUT ONLY if a current tenant has been set&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some examples to illustrate this behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# This manually sets the current tenant for testing purposes. In your app this is handled by the gem.&#xA;ActsAsTenant.current_tenant = Account.find(3)&#xA;&#xA;# All searches are scoped by the tenant, the following searches will only return objects&#xA;# where account_id == 3&#xA;Project.all =&amp;gt;  # all projects with account_id =&amp;gt; 3&#xA;Project.tasks.all #  =&amp;gt; all tasks with account_id =&amp;gt; 3&#xA;&#xA;# New objects are scoped to the current tenant&#xA;@project = Project.new(:name =&amp;gt; &#39;big project&#39;)    # =&amp;gt; &amp;lt;#Project id: nil, name: &#39;big project&#39;, :account_id: 3&amp;gt;&#xA;&#xA;# It will not allow the creation of objects outside the current_tenant scope&#xA;@project.account_id = 2&#xA;@project.save                                     # =&amp;gt; false&#xA;&#xA;# It will not allow association with objects outside the current tenant scope&#xA;# Assuming the Project with ID: 2 does not belong to Account with ID: 3&#xA;@task = Task.new  # =&amp;gt; &amp;lt;#Task id: nil, name: nil, project_id: nil, :account_id: 3&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Acts_as_tenant uses Rails&#39; &lt;code&gt;default_scope&lt;/code&gt; method to scope models. Rails 3.1 changed the way &lt;code&gt;default_scope&lt;/code&gt; works in a good way. A user defined &lt;code&gt;default_scope&lt;/code&gt; should integrate seamlessly with the one added by &lt;code&gt;acts_as_tenant&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Validating attribute uniqueness&lt;/h3&gt; &#xA;&lt;p&gt;If you need to validate for uniqueness, chances are that you want to scope this validation to a tenant. You can do so by using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;validates_uniqueness_to_tenant :name, :email&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All options available to Rails&#39; own &lt;code&gt;validates_uniqueness_of&lt;/code&gt; are also available to this method.&lt;/p&gt; &#xA;&lt;h3&gt;Custom foreign_key&lt;/h3&gt; &#xA;&lt;p&gt;You can explicitly specifiy a foreign_key for AaT to use should the key differ from the default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;acts_as_tenant(:account, :foreign_key =&amp;gt; &#39;accountID&#39;) # by default AaT expects account_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom primary_key&lt;/h3&gt; &#xA;&lt;p&gt;You can also explicitly specifiy a primary_key for AaT to use should the key differ from the default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;acts_as_tenant(:account, :primary_key =&amp;gt; &#39;primaryID&#39;) # by default AaT expects id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Has and belongs to many&lt;/h3&gt; &#xA;&lt;p&gt;You can scope a model that is part of a HABTM relationship by using the &lt;code&gt;through&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Organisation &amp;lt; ActiveRecord::Base&#xA;  has_many :organisations_users&#xA;  has_many :users, through: :organisations_users&#xA;end&#xA;&#xA;class User &amp;lt; ActiveRecord::Base&#xA;  has_many :organisations_users&#xA;  acts_as_tenant :organisation, through: :organisations_users&#xA;end&#xA;&#xA;class OrganisationsUser &amp;lt; ActiveRecord::Base&#xA;  belongs_to :user&#xA;  acts_as_tenant :organisation&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration options&lt;/h2&gt; &#xA;&lt;p&gt;An initializer can be created to control (currently one) option in ActsAsTenant. Defaults are shown below with sample overrides following. In &lt;code&gt;config/initializers/acts_as_tenant.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActsAsTenant.configure do |config|&#xA;  config.require_tenant = false # true&#xA;&#xA;  # Customize the query for loading the tenant in background jobs&#xA;  config.job_scope = -&amp;gt;{ all }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;config.require_tenant&lt;/code&gt; when set to true will raise an ActsAsTenant::NoTenant error whenever a query is made without a tenant set.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;config.require_tenant&lt;/code&gt; can also be assigned a lambda that is evaluated at run time. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActsAsTenant.configure do |config|&#xA;  config.require_tenant = lambda do&#xA;    if $request_env.present?&#xA;      return false if $request_env[&#34;REQUEST_PATH&#34;].start_with?(&#34;/admin/&#34;)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ActsAsTenant.should_require_tenant?&lt;/code&gt; is used to determine if a tenant is required in the current context, either by evaluating the lambda provided, or by returning the boolean value assigned to &lt;code&gt;config.require_tenant&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using &lt;code&gt;config.require_tenant&lt;/code&gt; alongside the &lt;code&gt;rails console&lt;/code&gt;, a nice quality of life tweak is to set the tenant in the console session in your initializer script. For example in &lt;code&gt;config/initializers/acts_as_tenant.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SET_TENANT_PROC = lambda do&#xA;  if defined?(Rails::Console)&#xA;    puts &#34;&amp;gt; ActsAsTenant.current_tenant = Account.first&#34;&#xA;    ActsAsTenant.current_tenant = Account.first&#xA;  end&#xA;end&#xA;&#xA;Rails.application.configure do&#xA;  if Rails.env.development?&#xA;    # Set the tenant to the first account in development on load&#xA;    config.after_initialize do&#xA;      SET_TENANT_PROC.call&#xA;    end&#xA;&#xA;    # Reset the tenant after calling &#39;reload!&#39; in the console&#xA;    ActiveSupport::Reloader.to_complete do&#xA;      SET_TENANT_PROC.call&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;belongs_to options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;acts_as_tenant :account&lt;/code&gt; includes the belongs_to relationship. So when using acts_as_tenant on a model, do not add &lt;code&gt;belongs_to :account&lt;/code&gt; alongside &lt;code&gt;acts_as_tenant :account&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  acts_as_tenant(:account) # YES&#xA;  belongs_to :account # REDUNDANT&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add the following &lt;code&gt;belongs_to&lt;/code&gt; options to &lt;code&gt;acts_as_tenant&lt;/code&gt;: &lt;code&gt;:foreign_key, :class_name, :inverse_of, :optional, :primary_key, :counter_cache, :polymorphic, :touch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;code&gt;acts_as_tenant(:account, counter_cache: true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Background Processing libraries&lt;/h2&gt; &#xA;&lt;p&gt;ActsAsTenant supports&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ActiveJob - ActsAsTenant will automatically save the current tenant in ActiveJob arguments and set it when the job runs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sidekiq.org/&#34;&gt;Sidekiq&lt;/a&gt; Add the following code to &lt;code&gt;config/initializers/acts_as_tenant.rb&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;acts_as_tenant/sidekiq&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DelayedJob - &lt;a href=&#34;https://github.com/nunommc/acts_as_tenant-delayed_job&#34;&gt;acts_as_tenant-delayed_job&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;If you set the &lt;code&gt;current_tenant&lt;/code&gt; in your tests, make sure to clean up the tenant after each test by calling &lt;code&gt;ActsAsTenant.current_tenant = nil&lt;/code&gt;. Integration tests are more difficult: manually setting the &lt;code&gt;current_tenant&lt;/code&gt; value will not survive across multiple requests, even if they take place within the same test. This can result in undesired boilerplate to set the desired tenant. Moreover, the efficacy of the test can be compromised because the set &lt;code&gt;current_tenant&lt;/code&gt; value will carry over into the request-response cycle.&lt;/p&gt; &#xA;&lt;p&gt;To address this issue, ActsAsTenant provides for a &lt;code&gt;test_tenant&lt;/code&gt; value that can be set to allow for setup and post-request expectation testing. It should be used in conjunction with middleware that clears out this value while an integration test is processing. A typical Rails and RSpec setup might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# test.rb&#xA;require_dependency &#39;acts_as_tenant/test_tenant_middleware&#39;&#xA;&#xA;Rails.application.configure do&#xA;  config.middleware.use ActsAsTenant::TestTenantMiddleware&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec_helper.rb&#xA;config.before(:suite) do |example|&#xA;  # Make the default tenant globally available to the tests&#xA;  $default_account = Account.create!&#xA;end&#xA;&#xA;config.before(:each) do |example|&#xA;  if example.metadata[:type] == :request&#xA;    # Set the `test_tenant` value for integration tests&#xA;    ActsAsTenant.test_tenant = $default_account&#xA;  else&#xA;    # Otherwise just use current_tenant&#xA;    ActsAsTenant.current_tenant = $default_account&#xA;  end&#xA;end&#xA;&#xA;config.after(:each) do |example|&#xA;  # Clear any tenancy that might have been set&#xA;  ActsAsTenant.current_tenant = nil&#xA;  ActsAsTenant.test_tenant = nil&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bug reports &amp;amp; suggested improvements&lt;/h2&gt; &#xA;&lt;p&gt;If you have found a bug or want to suggest an improvement, please use our issue tracked at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://github.com/ErwinM/acts_as_tenant/issues&#34;&gt;github.com/ErwinM/acts_as_tenant/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute, fork the project, code your improvements and make a pull request on &lt;a href=&#34;http://github.com/ErwinM/acts_as_tenant/&#34;&gt;Github&lt;/a&gt;. When doing so, please don&#39;t forget to add tests. If your contribution is fixing a bug it would be perfect if you could also submit a failing test, illustrating the issue.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to this gem&lt;/h2&gt; &#xA;&lt;p&gt;We use the Appraisal gem to run tests against supported versions of Rails to test for compatibility against them all. StandardRb also helps keep code formatted cleanly.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repo&lt;/li&gt; &#xA; &lt;li&gt;Make changes&lt;/li&gt; &#xA; &lt;li&gt;Run test suite with &lt;code&gt;bundle exec appraisal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bundle exec standardrb&lt;/code&gt; to standardize code formatting&lt;/li&gt; &#xA; &lt;li&gt;Submit a PR&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Author &amp;amp; Credits&lt;/h2&gt; &#xA;&lt;p&gt;acts_as_tenant is written by Erwin Matthijssen &amp;amp; Chris Oliver.&lt;/p&gt; &#xA;&lt;p&gt;This gem was inspired by Ryan Sonnek&#39;s &lt;a href=&#34;https://github.com/wireframe/multitenant&#34;&gt;Multitenant&lt;/a&gt; gem and its use of default_scope.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2011 Erwin Matthijssen, released under the MIT license&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rubyonjets/jets</title>
    <updated>2023-12-10T01:44:07Z</updated>
    <id>tag:github.com,2023-12-10:/rubyonjets/jets</id>
    <link href="https://github.com/rubyonjets/jets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby on Jets&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;http://rubyonjets.com&#34;&gt;&lt;img src=&#34;http://rubyonjets.com/img/logos/jets-logo-full.png&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Ruby and Lambda had a baby and that child&#39;s name is &lt;a href=&#34;http://rubyonjets.com/&#34;&gt;Jets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://codebuild.us-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiZ08vK2hjOHczQUVoUDhSYnBNNUU4T0gxQWJuOTlLaXpwVGQ1NjJ3NnVDY1dSdFVXQ3d2VXVSQzRFcU1qd1JPMndFZlByRktIcTUrZm5GWlM5dHpjM1ZrPSIsIml2UGFyYW1ldGVyU3BlYyI6Imluc1Qrd25GanhUdHlidjUiLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&amp;amp;branch=master&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://badge.fury.io/rb/jets&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/jets.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://rubyonjets.com/support/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Support-Help-blue.svg?sanitize=true&#34; alt=&#34;Support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.boltops.com&#34;&gt;&lt;img src=&#34;https://img.boltops.com/boltops/badges/boltops-badge.png&#34; alt=&#34;BoltOps Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please &lt;strong&gt;watch/star&lt;/strong&gt; this repo to help grow and support the project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Upgrading&lt;/strong&gt;: If you are upgrading Jets, please check on the &lt;a href=&#34;http://rubyonjets.com/docs/extras/upgrading/&#34;&gt;Upgrading Notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is Ruby on Jets?&lt;/h2&gt; &#xA;&lt;p&gt;Jets is a Ruby Serverless Framework. Jets allows you to create serverless applications with a beautiful language: Ruby. It includes everything required to build and deploy an application to AWS Lambda.&lt;/p&gt; &#xA;&lt;p&gt;Understanding AWS Lambda and API Gateway is key to understanding Jets conceptually. Jets map your code to Lambda functions and other AWS Resources like API Gateway and Event Rules.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;AWS Lambda&lt;/strong&gt; is functions as a service. It allows you to upload and run functions without worrying about the underlying infrastructure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Gateway&lt;/strong&gt; is the routing layer for Lambda. It is used to route REST URL endpoints to Lambda functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EventBridge Rules&lt;/strong&gt; are events as a service. You can automatically run Lambda functions triggered from AWS services. You decide what events to catch and how to react to them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The official documentation is at &lt;a href=&#34;http://rubyonjets.com&#34;&gt;Ruby on Jets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the official docs for more info, but here&#39;s a quick intro.&lt;/p&gt; &#xA;&lt;h3&gt;Jets Functions&lt;/h3&gt; &#xA;&lt;p&gt;Jets supports writing AWS Lambda functions with Ruby. You define them in the &lt;code&gt;app/functions&lt;/code&gt; folder. A function looks like this:&lt;/p&gt; &#xA;&lt;p&gt;app/functions/simple.rb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def lambda_handler(event:, context:)&#xA;  puts &#34;hello world&#34;&#xA;  {hello: &#34;world&#34;}&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s the function in the Lambda console:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.boltops.com/tools/jets/readme/simple-lambda-function.png&#34; alt=&#34;Code Example in AWS Lambda console&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Though simple functions are supported by Jets, they do not add as much value as other ways to write Ruby code with Jets. Classes like &lt;a href=&#34;http://rubyonjets.com/docs/controllers/&#34;&gt;Controllers&lt;/a&gt; and &lt;a href=&#34;http://rubyonjets.com/docs/jobs/&#34;&gt;Jobs&lt;/a&gt; add many conveniences and are more powerful to use. Weâ€™ll cover them next.&lt;/p&gt; &#xA;&lt;h3&gt;Jets Controllers&lt;/h3&gt; &#xA;&lt;p&gt;A Jets controller handles a web request and renders a response. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;p&gt;app/controllers/posts_controller.rb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsController &amp;lt; ApplicationController&#xA;  def index&#xA;    # renders Lambda Proxy structure compatible with API Gateway&#xA;    render json: {hello: &#34;world&#34;, action: &#34;index&#34;}&#xA;  end&#xA;&#xA;  def show&#xA;    id = params[:id] # params available&#xA;    # puts goes to the lambda logs&#xA;    puts event # raw lambda event available&#xA;    render json: {action: &#34;show&#34;, id: id}&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Helper methods like &lt;code&gt;params&lt;/code&gt; provide the parameters from the API Gateway event. The &lt;code&gt;render&lt;/code&gt; method returns a Lambda Proxy structure that API Gateway understands.&lt;/p&gt; &#xA;&lt;p&gt;Jets creates single Lambda functions to handle your Jets Controller requests. The Lambda Function handler is a shim that routes to your controller action.&lt;/p&gt; &#xA;&lt;h3&gt;Jets Routing&lt;/h3&gt; &#xA;&lt;p&gt;You connect Lambda functions to API Gateway URL endpoints with a routes file:&lt;/p&gt; &#xA;&lt;p&gt;config/routes.rb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Jets.application.routes.draw do&#xA;  resources :posts&#xA;  any &#34;posts/hot&#34;, to: &#34;posts#hot&#34; # GET, POST, PUT, etc request all work&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;routes.rb&lt;/code&gt; gets translated to API Gateway resources:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.boltops.com/tools/jets/readme/apigw.png&#34; alt=&#34;API Gateway Resources generated from routes in AWS console&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Test your API Gateway endpoints with curl or postman. Note, replace the URL endpoint with the one that is created:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -s &#34;https://quabepiu80.execute-api.us-east-1.amazonaws.com/dev/posts&#34; | jq .&#xA;{&#xA;  &#34;hello&#34;: &#34;world&#34;,&#xA;  &#34;action&#34;: &#34;index&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jets Jobs&lt;/h3&gt; &#xA;&lt;p&gt;A Jets job handles asynchronous background jobs outside the web request/response cycle. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;p&gt;app/jobs/hard_job.rb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class HardJob &amp;lt; ApplicationJob&#xA;  rate &#34;10 hours&#34; # every 10 hours&#xA;  def dig&#xA;    puts &#34;done digging&#34;&#xA;  end&#xA;&#xA;  cron &#34;0 */12 * * ? *&#34; # every 12 hours&#xA;  def lift&#xA;    puts &#34;done lifting&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.boltops.com/tools/jets/readme/jets-jobs.png&#34; alt=&#34;Jets Jobs in AWS Lambda Console&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HardJob#dig&lt;/code&gt; runs every 10 hours, and &lt;code&gt;HardJob#lift&lt;/code&gt; runs every 12 hours. The &lt;code&gt;rate&lt;/code&gt; and &lt;code&gt;cron&lt;/code&gt; methods created CloudWatch Event Rules. Example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.boltops.com/tools/jets/readme/jets-jobs-event-rules.png&#34; alt=&#34;CloudWatch Event Rules in AWS Console&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This simple example uses Scheduled Events. There are many more possibilities, see the &lt;a href=&#34;https://docs.rubyonjets.com/docs/events/&#34;&gt;Events Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Jets Deployment&lt;/h3&gt; &#xA;&lt;p&gt;You can test your application with a local server that mimics API Gateway: &lt;a href=&#34;http://rubyonjets.com/docs/local-server/&#34;&gt;Jets Local Server&lt;/a&gt;. Once ready, deploying to AWS Lambda is a single command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;jets deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After deployment, you can test the Lambda functions with the AWS Lambda console or the CLI.&lt;/p&gt; &#xA;&lt;h3&gt;Live Demos&lt;/h3&gt; &#xA;&lt;p&gt;Here are some demos of Jets applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://demo.rubyonjets.com/&#34;&gt;Quintessential CRUD Jets app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.demo.rubyonjets.com/&#34;&gt;API Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://upload.demo.rubyonjets.com/&#34;&gt;Image Upload with CarrierWave&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please feel free to add your examples to the &lt;a href=&#34;https://github.com/rubyonjets/examples&#34;&gt;rubyonjets/examples&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h3&gt;More Info&lt;/h3&gt; &#xA;&lt;p&gt;For more documentation, check out the official docs: &lt;a href=&#34;http://rubyonjets.com/&#34;&gt;Ruby on Jets&lt;/a&gt;. Here&#39;s a list of useful links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/quick-start/&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/local-server/&#34;&gt;Local Jets Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/repl-console/&#34;&gt;REPL Console&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/structure/&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/app-config/&#34;&gt;App Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/database-support/&#34;&gt;Database Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/polymorphic-support/&#34;&gt;Polymorphic Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/rails-support/&#34;&gt;Rails Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/tutorials/&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/prewarming/&#34;&gt;Prewarming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/associated-resources/&#34;&gt;Custom Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/shared-resources/&#34;&gt;Shared Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/install/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/reference/&#34;&gt;CLI Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/docs/contributing/&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubyonjets.com/support-jets/&#34;&gt;Support Jets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tongueroo/jets-examples&#34;&gt;Example Projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learning Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/08/18/introducing-jets-a-ruby-serverless-framework&#34;&gt;Introducing Jets: A Ruby Serverless Framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/12/12/official-aws-ruby-support-for-jets-serverless-framework&#34;&gt;Official AWS Ruby Support for Jets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2019/01/13/build-an-api-service-with-jets-ruby-serverless-framework&#34;&gt;Build an API with Jets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2019/01/03/serverless-ruby-cron-jobs-with-jets-route53-backup&#34;&gt;Serverless Ruby Cron Jobs Tutorial: Route53 Backup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2021/02/02/serverless-slack-commands-with-ruby&#34;&gt;Serverless Slack Commands: Fun with AWS Image Recognition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/12/21/jets-afterburner-serverless-rails-on-aws-lambda-in-5-minutes&#34;&gt;Jets Afterburner: Rails Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/11/03/jets-mega-mode-run-rails-on-aws-lambda&#34;&gt;Jets Mega Mode: Jets and Rails&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/09/25/toronto-serverless-presentation-jets-framework-on-aws-lambda&#34;&gt;Toronto Serverless Presentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/12/13/jets-image-upload-carrierwave-tutorial-binary-support&#34;&gt;Jets Image Uploads Tutorial with CarrierWave&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/09/07/jets-tutorial-crud-app-introduction-part-1&#34;&gt;Jets Tutorial An Introductory CRUD App Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/09/08/jets-tutorial-deploy-to-aws-lambda-part-2&#34;&gt;Jets Tutorial Deploy to AWS Lambda Part 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/09/09/jets-tutorial-debugging-logs-part-3&#34;&gt;Jets Tutorial Debugging Logs Part 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/09/10/jets-tutorial-background-jobs-part-4&#34;&gt;Jets Tutorial Background Jobs Part 4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/09/11/jets-tutorial-iam-policies-part-5&#34;&gt;Jets Tutorial IAM Policies Part 5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/09/12/jets-tutorial-function-properties-part-6&#34;&gt;Jets Tutorial Function Properties Part 6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/09/13/jets-tutorial-extra-environments-part-7&#34;&gt;Jets Tutorial Extra Environments Part 7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/09/26/jets-tutorial-different-environments-part-8&#34;&gt;Jets Tutorial Different Environments Part 8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/09/27/jets-tutorial-polymorphic-support-part-9&#34;&gt;Jets Tutorial Polymorphic Support Part 9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.boltops.com/2018/11/12/jets-tutorial-jets-delete&#34;&gt;Jets Delete Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>