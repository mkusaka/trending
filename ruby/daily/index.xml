<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-20T01:34:56Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>demarches-simplifiees/demarches-simplifiees.fr</title>
    <updated>2025-01-20T01:34:56Z</updated>
    <id>tag:github.com,2025-01-20:/demarches-simplifiees/demarches-simplifiees.fr</id>
    <link href="https://github.com/demarches-simplifiees/demarches-simplifiees.fr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dématérialiser et simplifier les démarches administratives&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;demarches-simplifiees.fr&lt;/h1&gt; &#xA;&lt;h2&gt;Contexte&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.demarches-simplifiees.fr&#34;&gt;demarches-simplifiees.fr&lt;/a&gt; est un site web conçu afin de répondre au besoin urgent de l&#39;État d&#39;appliquer la directive sur le 100&amp;nbsp;% dématérialisation pour les démarches administratives.&lt;/p&gt; &#xA;&lt;h2&gt;Comment contribuer ?&lt;/h2&gt; &#xA;&lt;p&gt;demarches-simplifiees.fr est un &lt;a href=&#34;https://fr.wikipedia.org/wiki/Logiciel_libre&#34;&gt;logiciel libre&lt;/a&gt; sous licence AGPL.&lt;/p&gt; &#xA;&lt;p&gt;Vous souhaitez y apporter des changements ou des améliorations&amp;nbsp;? Lisez notre &lt;a href=&#34;https://raw.githubusercontent.com/demarches-simplifiees/demarches-simplifiees.fr/main/CONTRIBUTING.md&#34;&gt;guide de contribution&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation pour le développement&lt;/h2&gt; &#xA;&lt;h3&gt;Dépendances techniques&lt;/h3&gt; &#xA;&lt;h4&gt;Tous environnements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;postgresql&lt;/li&gt; &#xA; &lt;li&gt;imagemagick et gsfonts pour générer les filigranes sur les titres d&#39;identité ou générer des minitiatures d&#39;images.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Pensez à restreindre la policy d&#39;ImageMagick pour bloquer l&#39;exploitation d&#39;images malveillantes. La configuration par défaut est généralement insuffisante pour des images provenant du web. Par exemple sous debian/ubuntu dans &lt;code&gt;/etc/ImageMagick-6/policy.xml&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- en plus de la policy par défaut, ajoutez à la fin du fichier --&amp;gt;&#xA;&amp;lt;policymap&amp;gt;&#xA;    &amp;lt;policy domain=&#34;coder&#34; rights=&#34;none&#34; pattern=&#34;*&#34;/&amp;gt;&#xA;    &amp;lt;policy domain=&#34;coder&#34; rights=&#34;read | write&#34; pattern=&#34;{JPG,JPEG,PNG,JSON}&#34;/&amp;gt;&#xA;    &amp;lt;policy domain=&#34;module&#34; rights=&#34;none&#34; pattern=&#34;{MSL,MVG,PS,SVG,URL,XPS}&#34;/&amp;gt;&#xA;&amp;lt;/policymap&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nous sommes en cours de migration de &lt;code&gt;delayed_job&lt;/code&gt; vers &lt;code&gt;sidekiq&lt;/code&gt; pour le traitement des jobs asynchrones. Pour faire tourner sidekiq, vous aurez besoin de :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;redis&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;lightgallery : une license a été souscrite pour soutenir le projet, mais elle n&#39;est pas obligatoire si la librairie est utilisée dans le cadre d&#39;une application open source.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Développement&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rbenv : voir &lt;a href=&#34;https://github.com/rbenv/rbenv-installer#rbenv-installer--doctor-scripts&#34;&gt;https://github.com/rbenv/rbenv-installer#rbenv-installer--doctor-scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bun : voir &lt;a href=&#34;https://bun.sh/docs/installation&#34;&gt;https://bun.sh/docs/installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Tests&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chrome&lt;/li&gt; &#xA; &lt;li&gt;chromedriver : &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mac : &lt;code&gt;brew install chromedriver&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Linux : voir &lt;a href=&#34;https://developer.chrome.com/blog/chrome-for-testing&#34;&gt;https://developer.chrome.com/blog/chrome-for-testing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Si l&#39;emplacement d&#39;installation de Chrome n&#39;est pas standard, ou que vous utilisez Brave ou Chromium à la place, il peut être nécessaire d&#39;overrider pour votre machine le path vers le binaire Chrome, par exemple&amp;nbsp;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# create file spec/support/spec_config.local.rb&#xA;&#xA;Selenium::WebDriver::Chrome.path = &#34;/Applications/Brave Browser.app/Contents/MacOS/Brave Browser&#34;&#xA;&#xA;# Must exactly match the browser version&#xA;Webdrivers::Chromedriver.required_version = &#34;103.0.5060.53&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Il est également possible de faire une installation et mise à jour automatique lors de l&#39;exécution de &lt;code&gt;bin/update&lt;/code&gt; en définissant la variable d&#39;environnement &lt;code&gt;UPDATE_WEBDRIVER&lt;/code&gt;. Les binaires seront installés dans le repertoire &lt;code&gt;~/.local/bin/&lt;/code&gt; qui doit être rajouté manuellement dans le path.&lt;/p&gt; &#xA;&lt;h3&gt;Création des rôles de la base de données&lt;/h3&gt; &#xA;&lt;p&gt;Les informations nécessaire à l&#39;initialisation de la base doivent être pré-configurées à la main grâce à la procédure suivante :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;su - postgres&#xA;psql&#xA;&amp;gt; create user tps_development with password &#39;tps_development&#39; superuser;&#xA;&amp;gt; create user tps_test with password &#39;tps_test&#39; superuser;&#xA;&amp;gt; \q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Initialisation de l&#39;environnement de développement&lt;/h3&gt; &#xA;&lt;p&gt;Sous Ubuntu, certains packages doivent être installés au préalable :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libcurl3 libcurl3-gnutls libcurl4-openssl-dev libcurl4-gnutls-dev zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Afin d&#39;initialiser l&#39;environnement de développement, exécutez la commande suivante :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lancement de l&#39;application&lt;/h3&gt; &#xA;&lt;p&gt;On lance le serveur d&#39;application ainsi :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;L&#39;application tourne alors à l&#39;adresse &lt;code&gt;http://localhost:3000&lt;/code&gt; avec en parallèle un worker pour les jobs et le bundler vitejs.&lt;/p&gt; &#xA;&lt;h3&gt;Utilisateurs de test&lt;/h3&gt; &#xA;&lt;p&gt;En local, un utilisateur de test est créé automatiquement, avec les identifiants &lt;code&gt;test@exemple.fr&lt;/code&gt;/&lt;code&gt;this is a very complicated password !&lt;/code&gt;. (voir &lt;a href=&#34;https://github.com/betagouv/demarches-simplifiees.fr/raw/dev/db/seeds.rb&#34;&gt;db/seeds.rb&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Programmation des tâches récurrentes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails jobs:schedule&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Voir les emails envoyés en local&lt;/h3&gt; &#xA;&lt;p&gt;Ouvrez la page &lt;a href=&#34;http://localhost:3000/letter_opener&#34;&gt;http://localhost:3000/letter_opener&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mise à jour de l&#39;application&lt;/h3&gt; &#xA;&lt;p&gt;Pour mettre à jour votre environnement de développement, installer les nouvelles dépendances et faire jouer les migrations, exécutez :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exécution des tests (RSpec)&lt;/h3&gt; &#xA;&lt;p&gt;Les tests ont besoin de leur propre base de données et certains d&#39;entre eux utilisent Selenium pour s&#39;exécuter dans un navigateur. N&#39;oubliez pas de créer la base de test et d&#39;installer chrome et chromedriver pour exécuter tous les tests.&lt;/p&gt; &#xA;&lt;p&gt;Pour exécuter les tests de l&#39;application, plusieurs possibilités :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Lancer tous les tests&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  bin/rake spec&#xA;  bin/rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lancer un test en particulier&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  bin/rake spec SPEC=file_path/file_name_spec.rb:line_number&#xA;  bin/rspec file_path/file_name_spec.rb:line_number&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lancer tous les tests d&#39;un fichier&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  bin/rake spec SPEC=file_path/file_name_spec.rb&#xA;  bin/rspec file_path/file_name_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Relancer uniquement les tests qui ont échoué précédemment&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  bin/rspec --only-failures&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lancer un ou des tests systèmes avec un browser&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  NO_HEADLESS=1 bin/rspec spec/system&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Afficher les logs js en error issus de la console du navigateur &lt;code&gt;console.error(&#39;coucou&#39;)&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  JS_LOG=debug,log,error bin/rspec spec/system&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Augmenter la latence lors de tests end2end pour déceler des bugs récalcitrants&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  MAKE_IT_SLOW=1 bin/rspec spec/system&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ajout de taches à exécuter au déploiement&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;    rails generate after_party:task task_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;p&gt;Le projet utilise plusieurs linters pour vérifier la lisibilité et la qualité du code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Faire tourner tous les linters : &lt;code&gt;bin/rake lint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vérifier l&#39;état des traductions : &lt;code&gt;bundle exec i18n-tasks health&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://accesslint.com/&#34;&gt;AccessLint&lt;/a&gt; tourne automatiquement sur les PRs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Régénérer les binstubs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle binstub railties --force&#xA;bin/rake rails:update:bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Déploiement&lt;/h2&gt; &#xA;&lt;p&gt;Voir les notes de déploiement dans &lt;a href=&#34;https://raw.githubusercontent.com/demarches-simplifiees/demarches-simplifiees.fr/main/doc/DEPLOYMENT.md&#34;&gt;DEPLOYMENT.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tâches courantes&lt;/h2&gt; &#xA;&lt;h3&gt;Tâches de gestion des comptes super-admin&lt;/h3&gt; &#xA;&lt;p&gt;Des tâches de gestion des comptes super-admin sont prévues dans le namespace &lt;code&gt;superadmin&lt;/code&gt;. Pour les lister : &lt;code&gt;bin/rake -D superadmin:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tâches d’aide au support&lt;/h3&gt; &#xA;&lt;p&gt;Des tâches d’aide au support sont prévues dans le namespace &lt;code&gt;support&lt;/code&gt;. Pour les lister : &lt;code&gt;bin/rake -D support:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibilité navigateurs&lt;/h2&gt; &#xA;&lt;p&gt;L&#39;application gère les navigateurs récents, parmis lequels Firefox, Chrome, Safari et Edge (voir &lt;code&gt;config/initializers/browser.rb&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;La compatibilité est testée par Browserstack.&lt;br&gt;&lt;a href=&#34;https://www.browserstack.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/demarches-simplifiees/demarches-simplifiees.fr/main/app/assets/images/browserstack-logo-600x315.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://oss.skylight.io/app/applications/zAvWTaqO0mu1&#34;&gt;&lt;img src=&#34;https://badges.skylight.io/status/zAvWTaqO0mu1.svg?sanitize=true&#34; alt=&#34;View performance data on Skylight&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nous utilisons Skylight pour suivre les performances de notre application.&lt;/p&gt; &#xA;&lt;p&gt;Par ailleurs, nous utilisons &lt;a href=&#34;https://github.com/yabeda-rb/yabeda&#34;&gt;Yabeda&lt;/a&gt; pour exporter des métriques au format prometheus pour Sidekiq. L&#39;activation se fait via la variable d&#39;environnement &lt;code&gt;PROMETHEUS_EXPORTER_ENABLED&lt;/code&gt; voir config/env.example.optional .&lt;/p&gt;</summary>
  </entry>
</feed>