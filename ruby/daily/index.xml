<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-13T01:42:29Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>midnightmonster/activerecord-summarize</title>
    <updated>2022-06-13T01:42:29Z</updated>
    <id>tag:github.com,2022-06-13:/midnightmonster/activerecord-summarize</id>
    <link href="https://github.com/midnightmonster/activerecord-summarize" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A gem to transparently combine related .count/.sum queries so the database can answer them all in a single pass—even when some queries have groups or additional scopes. After the low-hanging fruit, use the advanced (but still simple) API to build fast, complex reporting queries that would be inefficient or tedious with plain ActiveRecord.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ActiveRecord::Summarize&lt;/h1&gt; &#xA;&lt;h2&gt;Why &lt;code&gt;summarize&lt;/code&gt;?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make existing groups of related &lt;code&gt;ActiveRecord&lt;/code&gt; calculations twice as fast (or more) with minimal code alteration. It&#39;s like a &lt;code&gt;go_faster&lt;/code&gt; block.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For more complex reporting requirements, including nested &lt;code&gt;.group&lt;/code&gt; calls, use &lt;code&gt;summarize&lt;/code&gt; for fast, legible code that you just couldn&#39;t have written before without unacceptable performance or lengthy custom SQL and data-wrangling.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Sidebar: Are you wondering &lt;a href=&#34;https://raw.githubusercontent.com/midnightmonster/activerecord-summarize/main/docs/summarize_compared_with_load_async.md&#34;&gt;how &lt;code&gt;summarize&lt;/code&gt; compares to &lt;code&gt;load_async&lt;/code&gt;&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your Rails application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;activerecord-summarize&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Suppose your controller method looks like this:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;purchases = Purchase.complete&#xA;promotions = purchases.where.not(promotion_id: nil)&#xA;@promotion_sales = promotions.count&#xA;@promotion_revenue = promotions.sum(:amount)&#xA;@by_region = purchases.group(:region_id).count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Make it this instead:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Purchase.complete.summarize do |purchases|&#xA;  promotions = purchases.where.not(promotion_id: nil)&#xA;  @promotion_sales = promotions.count&#xA;  @promotion_revenue = promotions.sum(:amount)&#xA;  @by_region = purchases.group(:region_id).count&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;...and you&#39;ll have exactly the same instance variables set, but only one SQL query will have been executed.&lt;/h4&gt; &#xA;&lt;p&gt;You can run as many calculations in a &lt;code&gt;summarize&lt;/code&gt; block as it makes sense to run, so long as they all chain to the relation on which you called &lt;code&gt;summarize&lt;/code&gt;. They can use different, possibly-overlapping subsets of the original relation, i.e., they can have their own &lt;code&gt;where&lt;/code&gt; clauses and even &lt;code&gt;group&lt;/code&gt;. The final result of each will be exactly as it would have been if you had run each query independently, but only one query will actually be issued to the database.&lt;/p&gt; &#xA;&lt;h3&gt;Limitations &amp;amp; details&lt;/h3&gt; &#xA;&lt;p&gt;The only restriction is that each of the queries must be structurally compatible with the parent relation, in the same sense as is required for &lt;code&gt;relation.or(other)&lt;/code&gt;. So if you wanted to display the region&#39;s name, you&#39;d need to group by a sub-select (ew) or do the join at the top level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Purchase.complete.left_joins(:region).summarize do |purchases|&#xA;  promotions = purchases.where.not(promotion_id: nil)&#xA;  @promotion_sales = promotions.count&#xA;  @promotion_revenue = promotions.sum(:amount)&#xA;  @by_region = purchases.group(&#34;regions.name&#34;).count&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Until the &lt;code&gt;summarize&lt;/code&gt; block ends, the return value of your calculations are &lt;code&gt;ChainableResult::Future&lt;/code&gt; instances, a bit like a Promise with a more convenient API. You can call any method you like on a &lt;code&gt;ChainableResult&lt;/code&gt;, and you&#39;ll get back another &lt;code&gt;ChainableResult&lt;/code&gt;, and they&#39;ll all turn out alright in the end—provided you called methods that would have worked if you had run that calculation without &lt;code&gt;summarize&lt;/code&gt;. OTOH, using a &lt;code&gt;ChainableResult&lt;/code&gt; as an argument to another method generally will not work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Purchase.last_quarter.complete.summarize do |purchases|&#xA;  @sales = purchases.sum(:amount)&#xA;  # x * y is syntactic sugar for x.*(y), so this will work:&#xA;  @vc_projection = @sales * 3&#xA;  # And this won&#39;t:&#xA;  @vc_projection = 3 * @sales&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If, within a &lt;code&gt;summarize&lt;/code&gt; block, you want to combine data from more than one &lt;code&gt;ChainableResult&lt;/code&gt;, you must use the otherwise-optional second argument yielded to the block, a &lt;code&gt;proc&lt;/code&gt; I like to name &lt;code&gt;with&lt;/code&gt;. Pass it all the results you want to combine and a block that combines them and returns the new result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Purchase.complete.left_joins(:promotion).summarize do |purchases, with|&#xA;  @all_revenue = purchases.sum(:amount)&#xA;  promotions = purchases.where.not(promotions: {id: nil})&#xA;  @promotion_sales = promotions.count&#xA;  @promotion_discounts = promotions.sum(&#34;promotions.discount_amount&#34;)&#xA;  @avg_discount = with[@promotion_sales, @promotion_discounts] do |sales, discounts|&#xA;    sales.zero? ? 0 : discounts / sales&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Treat a &lt;code&gt;with&lt;/code&gt; block as a pure function: i.e., return the value you care about, and don&#39;t set or change any other state within the block. Behavior in any other case is undefined.&lt;/p&gt; &#xA;&lt;h2&gt;Escape hatch&lt;/h2&gt; &#xA;&lt;p&gt;The query generated by &lt;code&gt;summarize&lt;/code&gt; is often much faster than equivalent queries written without it, but for few-query cases where each query is well-served by its own index, &lt;code&gt;summarize&lt;/code&gt; could possibly be slower.&lt;/p&gt; &#xA;&lt;p&gt;By design, every operation performed with &lt;code&gt;summarize&lt;/code&gt; is correct and corresponds to normal &lt;code&gt;ActiveRecord&lt;/code&gt; behavior, and any operations that can&#39;t be done correctly this way or aren&#39;t yet will raise exceptions. But only imperfect humans have worked on this gem, so you might also wonder if &lt;code&gt;summarize&lt;/code&gt; is producing correct results.&lt;/p&gt; &#xA;&lt;p&gt;Fortunately, you can easily check both with &lt;code&gt;summarize(noop: true)&lt;/code&gt;, which causes &lt;code&gt;summarize&lt;/code&gt; to yield the original relation it was called on and a trivial &lt;code&gt;with&lt;/code&gt; proc. The block will be executed as though &lt;code&gt;summarize&lt;/code&gt; were not involved, with each calculation executing separately and immediately returning numbers or hashes.&lt;/p&gt; &#xA;&lt;p&gt;If you do find any case where you get different results with &lt;code&gt;summarize(noop: true)&lt;/code&gt;, I&#39;d be grateful if you filed an issue.&lt;/p&gt; &#xA;&lt;h2&gt;How&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ActiveRecord::Relation#summarize&lt;/code&gt; yields a lightly-modified copy of the relation that intercepts all calls to &lt;code&gt;sum&lt;/code&gt; or &lt;code&gt;count&lt;/code&gt; which, instead of a number or hash, return a &lt;code&gt;ChainableResult::Future&lt;/code&gt;. A &lt;code&gt;ChainableResult&lt;/code&gt; accepts any method called on it, returning a new &lt;code&gt;ChainableResult&lt;/code&gt; that will evaluate to the result of running the method on the eventual result of its parent.&lt;/p&gt; &#xA;&lt;p&gt;At the end of the &lt;code&gt;summarize&lt;/code&gt; block:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;All the calculations are combined into a single query.&lt;/li&gt; &#xA; &lt;li&gt;The results of the query are collected into the same shapes they would have if they had been called independently. E.g., a bare &lt;code&gt;.count&lt;/code&gt; returns a number, but &lt;code&gt;.group(*expressions).count&lt;/code&gt; returns a hash with single value (one group expression) or array (two-plus expressions) keys.&lt;/li&gt; &#xA; &lt;li&gt;Any &lt;code&gt;ChainableResult&lt;/code&gt; in the return value of the block (usually a single &lt;code&gt;ChainableResult&lt;/code&gt; or an &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Hash&lt;/code&gt; with &lt;code&gt;ChainableResult&lt;/code&gt; values) is replaced with its resolved value.&lt;/li&gt; &#xA; &lt;li&gt;Any &lt;code&gt;ChainableResult&lt;/code&gt; in the local scope of the block (i.e., &lt;code&gt;block.binding&lt;/code&gt;) or an instance variable of the block context (i.e., &lt;code&gt;block.binding.receiver&lt;/code&gt;) is replaced with its resolved value.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;N.b., if you are using &lt;code&gt;summarize&lt;/code&gt; in a more functional style and will return all values you care about, you can let &lt;code&gt;summarize&lt;/code&gt; know to skip step 4 by invoking it with &lt;code&gt;summarize(pure: true)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When the parent relation already has &lt;code&gt;.group&lt;/code&gt; applied, &lt;code&gt;pure: true&lt;/code&gt; is implied and step 4 does not take place.&lt;/p&gt; &#xA;&lt;h2&gt;Power usage with &lt;code&gt;group&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Build even more complex queries by using &lt;code&gt;summarize&lt;/code&gt; on a relation that already has &lt;code&gt;.group&lt;/code&gt; applied. Results are grouped just like a standard &lt;code&gt;.group(*expressions).count&lt;/code&gt;, but instead of single numbers, the values are whatever set of calculations you return from the block, including further &lt;code&gt;.group(*more).calculate(:sum|:count,*args)&lt;/code&gt; calculations, in whatever &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Hash&lt;/code&gt; shape you arrange them. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts Purchase.last_year.complete.group(:region_id).summarize do |purchases,with|&#xA;  total = purchases.count&#xA;  by_quarter = purchases.group(CREATED_TO_YEAR_SQL, CREATED_TO_QUARTER_SQL).count.sort.to_h&#xA;  target = with[total / 4, by_quarter.values.max] {|avg_q, best_q| [avg_q * 1.25, best_q].max.round }&#xA;  {last_year: total, quarters: by_quarter, unit_target: target}&#xA;end&#xA;# Output:&#xA;# {&#xA;#   1 =&amp;gt; {&#xA;#     last_year: 2717316,&#xA;#     quarters: {&#xA;#       [2021, 1] =&amp;gt; 634057,&#xA;#       [2021, 2] =&amp;gt; 590012,&#xA;#       [2021, 3] =&amp;gt; 659010,&#xA;#       [2021, 4] =&amp;gt; 834237&#xA;#     },&#xA;#     unit_target: 849161&#xA;#   },&#xA;#   2 =&amp;gt; { ... },&#xA;#   3 =&amp;gt; { ... }&#xA;# }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/midnightmonster/activerecord-summarize/main/docs/use_case_moderator_dashboard.md&#34;&gt;Use case: moderator dashboard&lt;/a&gt; for a more-complete example comparing ActiveRecord-only code with &lt;code&gt;summarize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Caveat&lt;/h3&gt; &#xA;&lt;p&gt;The ActiveRecord API has no direct analog for this mode, so &lt;code&gt;noop: true&lt;/code&gt; is not allowed when &lt;code&gt;summarize&lt;/code&gt; is called on a grouped relation.&lt;/p&gt; &#xA;&lt;p&gt;When the relation already has &lt;code&gt;group&lt;/code&gt; applied, for correct results, &lt;code&gt;summarize&lt;/code&gt; requires that the block mutate no state and return all values you care about: functional purity, no side effects. &lt;code&gt;ChainableResult&lt;/code&gt; values referenced by instance variables or local variables not returned from the block won&#39;t be evaluated. I.e., &lt;code&gt;pure: true&lt;/code&gt; is implied and &lt;code&gt;pure: false&lt;/code&gt; is not allowed. To see why:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# A trivial example:&#xA;Purchase.complete.group(:region_id).summarize {|purchases| purchases.sum(:amount) }&#xA;&#xA;# ...is exactly equivalent to:&#xA;Purchase.complete.group(:region_id).sum(:amount)&#xA;&#xA;# But if there were three regions, what should the value of @target be in this case?&#xA;region_targets = Purchase.last_quarter.complete.group(:region_id).summarize do |purchases|&#xA;  @target = purchases.sum(:amount) * 1.25&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a rubyist, that last example looks like the block will be evaluated for each group, so &lt;code&gt;@target&lt;/code&gt; should keep whatever value it got the last time the block was run. However:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;This is not often useful.&lt;/li&gt; &#xA; &lt;li&gt;The block is not actually linearly evaluated for each group.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Instead the block is evaluated once to determine what calculations need to be run, the query is built and evaluated, and then, for each group of the parent relation, the return value of the block is evaluated with respect to just those rows belonging to the group. In practice this is quite powerful and makes a pleasant, legible API for complex reporting.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake test&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and the created tag, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/midnightmonster/activerecord-summarize&#34;&gt;https://github.com/midnightmonster/activerecord-summarize&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openstreetmap/openstreetmap-website</title>
    <updated>2022-06-13T01:42:29Z</updated>
    <id>tag:github.com,2022-06-13:/openstreetmap/openstreetmap-website</id>
    <link href="https://github.com/openstreetmap/openstreetmap-website" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Rails application that powers OpenStreetMap&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#34;The Rails Port&#34;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openstreetmap/openstreetmap-website/actions?query=workflow%3ALint%20branch%3Amaster%20event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/openstreetmap/openstreetmap-website/workflows/Lint/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/openstreetmap/openstreetmap-website/actions?query=workflow%3ATests%20branch%3Amaster%20event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/openstreetmap/openstreetmap-website/workflows/Tests/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/openstreetmap/openstreetmap-website?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/openstreetmap/openstreetmap-website/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is The Rails Port, the &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Ruby on Rails&lt;/a&gt; application that powers the &lt;a href=&#34;https://www.openstreetmap.org&#34;&gt;OpenStreetMap&lt;/a&gt; website and API. The software is also known as &#34;openstreetmap-website&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This repository consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The web site, including user accounts, diary entries, user-to-user messaging.&lt;/li&gt; &#xA; &lt;li&gt;The XML-based editing &lt;a href=&#34;https://wiki.openstreetmap.org/wiki/API_v0.6&#34;&gt;API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The integrated version of the &lt;a href=&#34;https://wiki.openstreetmap.org/wiki/ID&#34;&gt;iD&lt;/a&gt; editors.&lt;/li&gt; &#xA; &lt;li&gt;The Browse pages - a web front-end to the OpenStreetMap data.&lt;/li&gt; &#xA; &lt;li&gt;The GPX uploads, browsing and API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A fully-functional Rails Port installation depends on other services, including map tile servers and geocoding services, that are provided by other software. The default installation uses publicly-available services to help with development and testing.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This software is licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt&#34;&gt;GNU General Public License 2.0&lt;/a&gt;, a copy of which can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/openstreetmap/openstreetmap-website/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;The Rails Port is a Ruby on Rails application that uses PostgreSQL as its database, and has a large number of dependencies for installation. For full details please see &lt;a href=&#34;https://raw.githubusercontent.com/openstreetmap/openstreetmap-website/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;We&#39;re always keen to have more developers! Pull requests are very welcome.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bugs are recorded in the &lt;a href=&#34;https://github.com/openstreetmap/openstreetmap-website/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Translation is managed by &lt;a href=&#34;https://translatewiki.net/wiki/Translating:OpenStreetMap&#34;&gt;Translatewiki&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There is a &lt;a href=&#34;https://lists.openstreetmap.org/listinfo/rails-dev&#34;&gt;rails-dev@openstreetmap.org&lt;/a&gt; mailing list for development discussion.&lt;/li&gt; &#xA; &lt;li&gt;IRC - there is the #osm-dev channel on irc.oftc.net.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details on contributing to the code are in the &lt;a href=&#34;https://raw.githubusercontent.com/openstreetmap/openstreetmap-website/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h1&gt;Maintainers&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tom Hughes &lt;a href=&#34;https://github.com/tomhughes/&#34;&gt;@tomhughes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andy Allan &lt;a href=&#34;https://github.com/gravitystorm/&#34;&gt;@gravitystorm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>krisleech/wisper</title>
    <updated>2022-06-13T01:42:29Z</updated>
    <id>tag:github.com,2022-06-13:/krisleech/wisper</id>
    <link href="https://github.com/krisleech/wisper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A micro library providing Ruby objects with Publish-Subscribe capabilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wisper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;A micro library providing Ruby objects with Publish-Subscribe capabilities&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/wisper&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/wisper.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/krisleech/wisper&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/krisleech/wisper.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/krisleech/wisper&#34;&gt;&lt;img src=&#34;https://travis-ci.org/krisleech/wisper.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/krisleech/wisper?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/krisleech/wisper/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Decouple core business logic from external concerns in Hexagonal style architectures&lt;/li&gt; &#xA; &lt;li&gt;Use as an alternative to ActiveRecord callbacks and Observers in Rails apps&lt;/li&gt; &#xA; &lt;li&gt;Connect objects based on context without permanence&lt;/li&gt; &#xA; &lt;li&gt;Publish events synchronously or asynchronously&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Wisper was originally extracted from a Rails codebase but is not dependant on Rails.&lt;/p&gt; &#xA;&lt;p&gt;Please also see the &lt;a href=&#34;https://github.com/krisleech/wisper/wiki&#34;&gt;Wiki&lt;/a&gt; for more additional information and articles.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For greenfield applications you might also be interested in &lt;a href=&#34;https://gitlab.com/kris.leech/wisper_next&#34;&gt;WisperNext&lt;/a&gt; and &lt;a href=&#34;https://gitlab.com/kris.leech/ma&#34;&gt;Ma&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;wisper&#39;, &#39;2.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Any class with the &lt;code&gt;Wisper::Publisher&lt;/code&gt; module included can broadcast events to subscribed listeners. Listeners subscribe, at runtime, to the publisher.&lt;/p&gt; &#xA;&lt;h3&gt;Publishing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CancelOrder&#xA;  include Wisper::Publisher&#xA;&#xA;  def call(order_id)&#xA;    order = Order.find_by_id(order_id)&#xA;&#xA;    # business logic...&#xA;&#xA;    if order.cancelled?&#xA;      broadcast(:cancel_order_successful, order.id)&#xA;    else&#xA;      broadcast(:cancel_order_failed, order.id)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a publisher broadcasts an event it can include any number of arguments.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;broadcast&lt;/code&gt; method is also aliased as &lt;code&gt;publish&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also include &lt;code&gt;Wisper.publisher&lt;/code&gt; instead of &lt;code&gt;Wisper::Publisher&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Subscribing&lt;/h3&gt; &#xA;&lt;h4&gt;Objects&lt;/h4&gt; &#xA;&lt;p&gt;Any object can be subscribed as a listener.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cancel_order = CancelOrder.new&#xA;&#xA;cancel_order.subscribe(OrderNotifier.new)&#xA;&#xA;cancel_order.call(order_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The listener would need to implement a method for every event it wishes to receive.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class OrderNotifier&#xA;  def cancel_order_successful(order_id)&#xA;    order = Order.find_by_id(order_id)&#xA;&#xA;    # notify someone ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Blocks&lt;/h4&gt; &#xA;&lt;p&gt;Blocks can be subscribed to single events and can be chained.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cancel_order = CancelOrder.new&#xA;&#xA;cancel_order.on(:cancel_order_successful) { |order_id| ... }&#xA;            .on(:cancel_order_failed)     { |order_id| ... }&#xA;&#xA;cancel_order.call(order_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also subscribe to multiple events using &lt;code&gt;on&lt;/code&gt; by passing additional events as arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cancel_order = CancelOrder.new&#xA;&#xA;cancel_order.on(:cancel_order_successful) { |order_id| ... }&#xA;            .on(:cancel_order_failed,&#xA;                :cancel_order_invalid)    { |order_id| ... }&#xA;&#xA;cancel_order.call(order_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do not &lt;code&gt;return&lt;/code&gt; from inside a subscribed block, due to the way &lt;a href=&#34;http://product.reverb.com/2015/02/28/the-strange-case-of-wisper-and-ruby-blocks-behaving-like-procs/&#34;&gt;Ruby treats blocks&lt;/a&gt; this will prevent any subsequent listeners having their events delivered.&lt;/p&gt; &#xA;&lt;h3&gt;Handling Events Asynchronously&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cancel_order.subscribe(OrderNotifier.new, async: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wisper has various adapters for asynchronous event handling, please refer to &lt;a href=&#34;https://github.com/krisleech/wisper-celluloid&#34;&gt;wisper-celluloid&lt;/a&gt;, &lt;a href=&#34;https://github.com/krisleech/wisper-sidekiq&#34;&gt;wisper-sidekiq&lt;/a&gt;, &lt;a href=&#34;https://github.com/krisleech/wisper-activejob&#34;&gt;wisper-activejob&lt;/a&gt;, &lt;a href=&#34;https://github.com/joevandyk/wisper-que&#34;&gt;wisper-que&lt;/a&gt; or &lt;a href=&#34;https://github.com/bzurkowski/wisper-resque&#34;&gt;wisper-resque&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the adapter used the listener may need to be a class instead of an object. In this situation, every method corresponding to events should be declared as a class method, too. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class OrderNotifier&#xA;  # declare a class method if you are subscribing the listener class instead of its instance like:&#xA;  #   cancel_order.subscribe(OrderNotifier)&#xA;  #&#xA;  def self.cancel_order_successful(order_id)&#xA;    order = Order.find_by_id(order_id)&#xA;&#xA;    # notify someone ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ActionController&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CancelOrderController &amp;lt; ApplicationController&#xA;&#xA;  def create&#xA;    cancel_order = CancelOrder.new&#xA;&#xA;    cancel_order.subscribe(OrderMailer,        async: true)&#xA;    cancel_order.subscribe(ActivityRecorder,   async: true)&#xA;    cancel_order.subscribe(StatisticsRecorder, async: true)&#xA;&#xA;    cancel_order.on(:cancel_order_successful) { |order_id| redirect_to order_path(order_id) }&#xA;    cancel_order.on(:cancel_order_failed)     { |order_id| render action: :new }&#xA;&#xA;    cancel_order.call(order_id)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ActiveRecord&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to publish directly from ActiveRecord models you can broadcast events from callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Order &amp;lt; ActiveRecord::Base&#xA;  include Wisper::Publisher&#xA;&#xA;  after_commit     :publish_creation_successful, on: :create&#xA;  after_validation :publish_creation_failed,     on: :create&#xA;&#xA;  private&#xA;&#xA;  def publish_creation_successful&#xA;    broadcast(:order_creation_successful, self)&#xA;  end&#xA;&#xA;  def publish_creation_failed&#xA;    broadcast(:order_creation_failed, self) if errors.any?&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are more examples in the &lt;a href=&#34;https://github.com/krisleech/wisper/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Global Listeners&lt;/h2&gt; &#xA;&lt;p&gt;Global listeners receive all broadcast events which they can respond to.&lt;/p&gt; &#xA;&lt;p&gt;This is useful for cross cutting concerns such as recording statistics, indexing, caching and logging.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Wisper.subscribe(MyListener.new)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a Rails app you might want to add your global listeners in an initializer.&lt;/p&gt; &#xA;&lt;p&gt;Global listeners are threadsafe. Subscribers will receive events published on all threads.&lt;/p&gt; &#xA;&lt;h3&gt;Scoping by publisher class&lt;/h3&gt; &#xA;&lt;p&gt;You might want to globally subscribe a listener to publishers with a certain class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Wisper.subscribe(MyListener.new, scope: :MyPublisher)&#xA;Wisper.subscribe(MyListener.new, scope: MyPublisher)&#xA;Wisper.subscribe(MyListener.new, scope: &#34;MyPublisher&#34;)&#xA;Wisper.subscribe(MyListener.new, scope: [:MyPublisher, :MyOtherPublisher])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will subscribe the listener to all instances of the specified class(es) and their subclasses.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can also do exactly the same with a publisher class itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;MyPublisher.subscribe(MyListener.new)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Temporary Global Listeners&lt;/h2&gt; &#xA;&lt;p&gt;You can also globally subscribe listeners for the duration of a block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Wisper.subscribe(MyListener.new, OtherListener.new) do&#xA;  # do stuff&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any events broadcast within the block by any publisher will be sent to the listeners.&lt;/p&gt; &#xA;&lt;p&gt;This is useful for capturing events published by objects to which you do not have access in a given context.&lt;/p&gt; &#xA;&lt;p&gt;Temporary Global Listeners are threadsafe. Subscribers will receive events published on the same thread.&lt;/p&gt; &#xA;&lt;h2&gt;Subscribing to selected events&lt;/h2&gt; &#xA;&lt;p&gt;By default a listener will get notified of all events it can respond to. You can limit which events a listener is notified of by passing a string, symbol, array or regular expression to &lt;code&gt;on&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post_creator.subscribe(PusherListener.new, on: :create_post_successful)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prefixing broadcast events&lt;/h2&gt; &#xA;&lt;p&gt;If you would prefer listeners to receive events with a prefix, for example &lt;code&gt;on&lt;/code&gt;, you can do so by passing a string or symbol to &lt;code&gt;prefix:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post_creator.subscribe(PusherListener.new, prefix: :on)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;post_creator&lt;/code&gt; were to broadcast the event &lt;code&gt;post_created&lt;/code&gt; the subscribed listeners would receive &lt;code&gt;on_post_created&lt;/code&gt;. You can also pass &lt;code&gt;true&lt;/code&gt; which will use the default prefix, &#34;on&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Mapping an event to a different method&lt;/h2&gt; &#xA;&lt;p&gt;By default the method called on the listener is the same as the event broadcast. However it can be mapped to a different method using &lt;code&gt;with:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;report_creator.subscribe(MailResponder.new, with: :successful)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is pretty useless unless used in conjunction with &lt;code&gt;on:&lt;/code&gt;, since all events will get mapped to &lt;code&gt;:successful&lt;/code&gt;. Instead you might do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;report_creator.subscribe(MailResponder.new, on:   :create_report_successful,&#xA;                                            with: :successful)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you pass an array of events to &lt;code&gt;on:&lt;/code&gt; each event will be mapped to the same method when &lt;code&gt;with:&lt;/code&gt; is specified. If you need to listen for select events &lt;em&gt;and&lt;/em&gt; map each one to a different method subscribe the listener once for each mapping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;report_creator.subscribe(MailResponder.new, on:   :create_report_successful,&#xA;                                            with: :successful)&#xA;&#xA;report_creator.subscribe(MailResponder.new, on:   :create_report_failed,&#xA;                                            with: :failed)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could also alias the method within your listener, as such &lt;code&gt;alias successful create_report_successful&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Testing matchers and stubs are in separate gems.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krisleech/wisper-rspec&#34;&gt;wisper-rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/digitalcuisine/wisper-minitest&#34;&gt;wisper-minitest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Clearing Global Listeners&lt;/h3&gt; &#xA;&lt;p&gt;If you use global listeners in non-feature tests you &lt;em&gt;might&lt;/em&gt; want to clear them in a hook to prevent global subscriptions persisting between tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;after { Wisper.clear }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/krisleech/wisper/wiki&#34;&gt;Wiki&lt;/a&gt; has more examples, articles and talks.&lt;/p&gt; &#xA;&lt;p&gt;Got a specific question, try the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/wisper&#34;&gt;Wisper tag on StackOverflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Tested with MRI 2.x, JRuby and Rubinius.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://travis-ci.org/krisleech/wisper&#34;&gt;build status&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Running Specs&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the specs on code changes try &lt;a href=&#34;http://entrproject.org/&#34;&gt;entr&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ls **/*.rb | entr bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://github.com/krisleech/wisper/raw/master/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gem releases are &lt;a href=&#34;http://guides.rubygems.org/security/&#34;&gt;signed&lt;/a&gt; (&lt;a href=&#34;https://github.com/krisleech/wisper/raw/master/gem-public_cert.pem&#34;&gt;public key&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;commits are GPG signed (&lt;a href=&#34;https://pgp.mit.edu/pks/lookup?op=get&amp;amp;search=0x3ABC74851F7CCC88&#34;&gt;public key&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;My &lt;a href=&#34;https://keybase.io/krisleech&#34;&gt;Keybase.io profile&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;(The MIT License)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2013 Kris Leech&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#39;Software&#39;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#39;AS IS&#39;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>