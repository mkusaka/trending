<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T01:33:27Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Data-Liberation-Front/csvlint.rb</title>
    <updated>2022-07-17T01:33:27Z</updated>
    <id>tag:github.com,2022-07-17:/Data-Liberation-Front/csvlint.rb</id>
    <link href="https://github.com/Data-Liberation-Front/csvlint.rb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The gem behind http://csvlint.io&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/theodi/csvlint.rb&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/Data-Liberation-Front/csvlint.rb/CI/main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://libraries.io/github/Data-Liberation-Front/csvlint.rb&#34;&gt;&lt;img src=&#34;https://img.shields.io/librariesio/github/Data-Liberation-Front/csvlint.rb&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/Data-Liberation-Front/csvlint.rb&#34;&gt;&lt;img src=&#34;http://img.shields.io/coveralls/Data-Liberation-Front/csvlint.rb.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://theodi.mit-license.org&#34;&gt;&lt;img src=&#34;http://img.shields.io/:license-mit-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pikesley/badger&#34;&gt;&lt;img src=&#34;http://img.shields.io/:badges-5/5-ff6799.svg?sanitize=true&#34; alt=&#34;Badges&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CSV Lint&lt;/h1&gt; &#xA;&lt;p&gt;A ruby gem to support validating CSV files to check their syntax and contents. You can either use this gem within your own Ruby code, or as a standalone command line application&lt;/p&gt; &#xA;&lt;h2&gt;Summary of features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Validation that checks the structural formatting of a CSV file&lt;/li&gt; &#xA; &lt;li&gt;Validation of a delimiter-separated values (dsv) file accesible via URL, File, or an IO-style object (e.g. StringIO)&lt;/li&gt; &#xA; &lt;li&gt;Validation against &lt;a href=&#34;http://dataprotocols.org/csv-dialect/&#34;&gt;CSV dialects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Validation against multiple schema standards; &lt;a href=&#34;https://github.com/theodi/csvlint.rb/raw/master/README.md#json-table-schema-support&#34;&gt;JSON Table Schema&lt;/a&gt; and &lt;a href=&#34;https://github.com/theodi/csvlint.rb/raw/master/README.md#csv-on-the-web-validation-support&#34;&gt;CSV on the Web&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ruby version 3.1.2&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;The codebase includes both rspec and cucumber tests, which can be run together using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or separately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rake spec&#xA;$ rake features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the cucumber tests are first run, a script will create tests based on the latest version of the &lt;a href=&#34;http://w3c.github.io/csvw/tests/&#34;&gt;CSV on the Web test suite&lt;/a&gt;, including creating a local cache of the test files. This requires an internet connection and some patience. Following that download, the tests will run locally; there&#39;s also a batch script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/run-csvw-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will run the tests from the command line.&lt;/p&gt; &#xA;&lt;p&gt;If you need to refresh the CSV on the Web tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rm bin/run-csvw-tests&#xA;$ rm features/csvw_validation_tests.feature&#xA;$ rm -r features/fixtures/csvw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then run the cucumber tests again or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ruby features/support/load_tests.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;csvlint&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install csvlint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can either use this gem within your own Ruby code, or as a standalone command line application&lt;/p&gt; &#xA;&lt;h2&gt;On the command line&lt;/h2&gt; &#xA;&lt;p&gt;After installing the gem, you can validate a CSV on the command line like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;csvlint myfile.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need to add the gem exectuable directory to your path, by adding &#39;/usr/local/lib/ruby/gems/2.6.0/bin&#39; or whatever your version is, to your .bash_profile PATH entry. &lt;a href=&#34;https://stackoverflow.com/questions/2392293/ruby-gems-returns-command-not-found&#34;&gt;like so&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will then see the validation result, together with any warnings or errors e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myfile.csv is INVALID&#xA;1. blank_rows. Row: 3&#xA;1. title_row.&#xA;2. inconsistent_values. Column: 14&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also optionally pass a schema file like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;csvlint myfile.csv --schema=schema.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;In your own Ruby code&lt;/h2&gt; &#xA;&lt;p&gt;Currently the gem supports retrieving a CSV accessible from a URL, File, or an IO-style object (e.g. StringIO)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require &#39;csvlint&#39;&#xA;&#xA;validator = Csvlint::Validator.new( &#34;http://example.org/data.csv&#34; )&#xA;validator = Csvlint::Validator.new( File.new(&#34;/path/to/my/data.csv&#34; ))&#xA;validator = Csvlint::Validator.new( StringIO.new( my_data_in_a_string ) )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When validating from a URL the range of errors and warnings is wider as the library will also check HTTP headers for best practices&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#invoke the validation&#xA;validator.validate&#xA;&#xA;#check validation status&#xA;validator.valid?&#xA;&#xA;#access array of errors, each is an Csvlint::ErrorMessage object&#xA;validator.errors&#xA;&#xA;#access array of warnings&#xA;validator.warnings&#xA;&#xA;#access array of information messages&#xA;validator.info_messages&#xA;&#xA;#get some information about the CSV file that was validated&#xA;validator.encoding&#xA;validator.content_type&#xA;validator.extension&#xA;validator.row_count&#xA;&#xA;#retrieve HTTP headers from request&#xA;validator.headers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Controlling CSV Parsing&lt;/h2&gt; &#xA;&lt;p&gt;The validator supports configuration of the &lt;a href=&#34;http://dataprotocols.org/csv-dialect/&#34;&gt;CSV Dialect&lt;/a&gt; used in a data file. This is specified by passing a dialect hash to the constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dialect = {&#xA;&#x9;&#34;header&#34; =&amp;gt; true,&#xA;&#x9;&#34;delimiter&#34; =&amp;gt; &#34;,&#34;&#xA;}&#xA;validator = Csvlint::Validator.new( &#34;http://example.org/data.csv&#34;, dialect )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The options should be a Hash that conforms to the &lt;a href=&#34;http://dataprotocols.org/csv-dialect/&#34;&gt;CSV Dialect&lt;/a&gt; JSON structure.&lt;/p&gt; &#xA;&lt;p&gt;While these options configure the parser to correctly process the file, the validator will still raise errors or warnings for CSV structure that it considers to be invalid, e.g. a missing header or different delimiters.&lt;/p&gt; &#xA;&lt;p&gt;Note that the parser will also check for a &lt;code&gt;header&lt;/code&gt; parameter on the &lt;code&gt;Content-Type&lt;/code&gt; header returned when fetching a remote CSV file. As specified in &lt;a href=&#34;http://www.ietf.org/rfc/rfc4180.txt&#34;&gt;RFC 4180&lt;/a&gt; the values for this can be &lt;code&gt;present&lt;/code&gt; and &lt;code&gt;absent&lt;/code&gt;, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Content-Type: text/csv; header=present&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error Reporting&lt;/h2&gt; &#xA;&lt;p&gt;The validator provides feedback on a validation result using instances of &lt;code&gt;Csvlint::ErrorMessage&lt;/code&gt;. Errors are divided into errors, warnings and information messages. A validation attempt is successful if there are no errors.&lt;/p&gt; &#xA;&lt;p&gt;Messages provide context including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;category&lt;/code&gt; has a symbol that indicates the category or error/warning: &lt;code&gt;:structure&lt;/code&gt; (well-formedness issues), &lt;code&gt;:schema&lt;/code&gt; (schema validation), &lt;code&gt;:context&lt;/code&gt; (publishing metadata, e.g. content type)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; has a symbol that indicates the type of error or warning being reported&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;row&lt;/code&gt; holds the line number of the problem&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;column&lt;/code&gt; holds the column number of the issue&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;content&lt;/code&gt; holds the contents of the row that generated the error or warning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Errors&lt;/h2&gt; &#xA;&lt;p&gt;The following types of error can be reported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:wrong_content_type&lt;/code&gt; -- content type is not &lt;code&gt;text/csv&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ragged_rows&lt;/code&gt; -- row has a different number of columns (than the first row in the file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:blank_rows&lt;/code&gt; -- completely empty row, e.g. blank line or a line where all column values are empty&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:invalid_encoding&lt;/code&gt; -- encoding error when parsing row, e.g. because of invalid characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:not_found&lt;/code&gt; -- HTTP 404 error when retrieving the data&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:stray_quote&lt;/code&gt; -- missing or stray quote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:unclosed_quote&lt;/code&gt; -- unclosed quoted field&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:whitespace&lt;/code&gt; -- a quoted column has leading or trailing whitespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:line_breaks&lt;/code&gt; -- line breaks were inconsistent or incorrectly specified&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Warnings&lt;/h2&gt; &#xA;&lt;p&gt;The following types of warning can be reported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:no_encoding&lt;/code&gt; -- the &lt;code&gt;Content-Type&lt;/code&gt; header returned in the HTTP request does not have a &lt;code&gt;charset&lt;/code&gt; parameter&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:encoding&lt;/code&gt; -- the character set is not UTF-8&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:no_content_type&lt;/code&gt; -- file is being served without a &lt;code&gt;Content-Type&lt;/code&gt; header&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:excel&lt;/code&gt; -- no &lt;code&gt;Content-Type&lt;/code&gt; header and the file extension is &lt;code&gt;.xls&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:check_options&lt;/code&gt; -- CSV file appears to contain only a single column&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:inconsistent_values&lt;/code&gt; -- inconsistent values in the same column. Reported if &amp;lt;90% of values seem to have same data type (either numeric or alphanumeric including punctuation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:empty_column_name&lt;/code&gt; -- a column in the CSV header has an empty name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:duplicate_column_name&lt;/code&gt; -- a column in the CSV header has a duplicate name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:title_row&lt;/code&gt; -- if there appears to be a title field in the first row of the CSV&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Information Messages&lt;/h2&gt; &#xA;&lt;p&gt;There are also information messages available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:nonrfc_line_breaks&lt;/code&gt; -- uses non-CRLF line breaks, so doesn&#39;t conform to RFC4180.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:assumed_header&lt;/code&gt; -- the validator has assumed that a header is present&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Schema Validation&lt;/h2&gt; &#xA;&lt;p&gt;The library supports validating data against a schema. A schema configuration can be provided as a Hash or parsed from JSON. The structure currently follows JSON Table Schema with some extensions and rudinmentary &lt;a href=&#34;http://www.w3.org/TR/tabular-metadata/&#34;&gt;CSV on the Web Metadata&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example JSON Table Schema schema file is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;&#x9;&#34;fields&#34;: [&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#34;name&#34;: &#34;id&#34;,&#xA;&#x9;&#x9;&#x9;&#34;constraints&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;required&#34;: true,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;type&#34;: &#34;http://www.w3.org/TR/xmlschema-2/#integer&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#34;name&#34;: &#34;price&#34;,&#xA;&#x9;&#x9;&#x9;&#34;constraints&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;required&#34;: true,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;minLength&#34;: 1 &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#34;name&#34;: &#34;postcode&#34;,&#xA;&#x9;&#x9;&#x9;&#34;constraints&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;required&#34;: true,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;pattern&#34;: &#34;[A-Z]{1,2}[0-9][0-9A-Z]? ?[0-9][A-Z]{2}&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An equivalent CSV on the Web Metadata file is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;&#x9;&#34;@context&#34;: &#34;http://www.w3.org/ns/csvw&#34;,&#xA;&#x9;&#34;url&#34;: &#34;http://example.com/example1.csv&#34;,&#xA;&#x9;&#34;tableSchema&#34;: {&#xA;&#x9;&#x9;&#34;columns&#34;: [&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;name&#34;: &#34;id&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;required&#34;: true,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;datatype&#34;: { &#34;base&#34;: &#34;integer&#34; }&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;name&#34;: &#34;price&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;required&#34;: true,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;datatype&#34;: { &#34;base&#34;: &#34;string&#34;, &#34;minLength&#34;: 1 }&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;name&#34;: &#34;postcode&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;required&#34;: true&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;]&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parsing and validating with a schema (of either kind):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;schema = Csvlint::Schema.load_from_json(uri)&#xA;validator = Csvlint::Validator.new( &#34;http://example.org/data.csv&#34;, nil, schema )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CSV on the Web Validation Support&lt;/h3&gt; &#xA;&lt;p&gt;This gem passes all the validation tests in the &lt;a href=&#34;http://w3c.github.io/csvw/tests/&#34;&gt;official CSV on the Web test suite&lt;/a&gt; (though there might still be errors or parts of the &lt;a href=&#34;http://www.w3.org/TR/tabular-metadata/&#34;&gt;CSV on the Web standard&lt;/a&gt; that aren&#39;t tested by that test suite).&lt;/p&gt; &#xA;&lt;h3&gt;JSON Table Schema Support&lt;/h3&gt; &#xA;&lt;p&gt;Supported constraints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;required&lt;/code&gt; -- there must be a value for this field in every row&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unique&lt;/code&gt; -- the values in every row should be unique&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;minLength&lt;/code&gt; -- minimum number of characters in the value&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxLength&lt;/code&gt; -- maximum number of characters in the value&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pattern&lt;/code&gt; -- values must match the provided regular expression&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; -- specifies an XML Schema data type. Values of the column must be a valid value for that type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;minimum&lt;/code&gt; -- specify a minimum range for values, the value will be parsed as specified by &lt;code&gt;type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maximum&lt;/code&gt; -- specify a maximum range for values, the value will be parsed as specified by &lt;code&gt;type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;datePattern&lt;/code&gt; -- specify a &lt;code&gt;strftime&lt;/code&gt; compatible date pattern to be used when parsing date values and min/max constraints&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported data types (this is still a work in progress):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;String -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#string&lt;/code&gt; (effectively a no-op)&lt;/li&gt; &#xA; &lt;li&gt;Integer -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#integer&lt;/code&gt; or &lt;code&gt;http://www.w3.org/2001/XMLSchema#int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Float -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#float&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Double -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#double&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;URI -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#anyURI&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Boolean -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Non Positive Integer -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#nonPositiveInteger&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Positive Integer -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#positiveInteger&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Non Negative Integer -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#nonNegativeInteger&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Negative Integer -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#negativeInteger&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Date -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#date&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Date Time -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#dateTime&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Year -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#gYear&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Year Month -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#gYearMonth&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Time -- &lt;code&gt;http://www.w3.org/2001/XMLSchema#time&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use of an unknown data type will result in the column failing to validate.&lt;/p&gt; &#xA;&lt;p&gt;Schema validation provides some additional types of error and warning messages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:missing_value&lt;/code&gt; (error) -- a column marked as &lt;code&gt;required&lt;/code&gt; in the schema has no value&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:min_length&lt;/code&gt; (error) -- a column with a &lt;code&gt;minLength&lt;/code&gt; constraint has a value that is too short&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:max_length&lt;/code&gt; (error) -- a column with a &lt;code&gt;maxLength&lt;/code&gt; constraint has a value that is too long&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:pattern&lt;/code&gt; (error) -- a column with a &lt;code&gt;pattern&lt;/code&gt; constraint has a value that doesn&#39;t match the regular expression&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:malformed_header&lt;/code&gt; (warning) -- the header in the CSV doesn&#39;t match the schema&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:missing_column&lt;/code&gt; (warning) -- a row in the CSV file has a missing column, that is specified in the schema. This is a warning only, as it may be legitimate&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:extra_column&lt;/code&gt; (warning) -- a row in the CSV file has extra column.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:unique&lt;/code&gt; (error) -- a column with a &lt;code&gt;unique&lt;/code&gt; constraint contains non-unique values&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:below_minimum&lt;/code&gt; (error) -- a column with a &lt;code&gt;minimum&lt;/code&gt; constraint contains a value that is below the minimum&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:above_maximum&lt;/code&gt; (error) -- a column with a &lt;code&gt;maximum&lt;/code&gt; constraint contains a value that is above the maximum&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other validation options&lt;/h3&gt; &#xA;&lt;p&gt;You can also provide an optional options hash as the fourth argument to Validator#new. Supported options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;:limit_lines -- only check this number of lines of the CSV file. Good for a quick check on huge files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;options = {&#xA;  limit_lines: 100&#xA;}&#xA;validator = Csvlint::Validator.new( &#34;http://example.org/data.csv&#34;, nil, nil, options )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;:lambda -- Pass a block of code to be called when each line is validated, this will give you access to the &lt;code&gt;Validator&lt;/code&gt; object. For example, this will return the current line number for every line validated:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    options = {&#xA;      lambda: -&amp;gt;(validator) { puts validator.current_line }&#xA;    }&#xA;    validator = Csvlint::Validator.new( &#34;http://example.org/data.csv&#34;, nil, nil, options )&#xA;    =&amp;gt; 1&#xA;    2&#xA;    3&#xA;    4&#xA;    .....&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>rails/importmap-rails</title>
    <updated>2022-07-17T01:33:27Z</updated>
    <id>tag:github.com,2022-07-17:/rails/importmap-rails</id>
    <link href="https://github.com/rails/importmap-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use ESM with importmap to manage modern JavaScript in Rails without transpiling or bundling.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Importmap for Rails&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WICG/import-maps&#34;&gt;Import maps&lt;/a&gt; let you import JavaScript modules using logical names that map to versioned/digested files – directly from the browser. So you can &lt;a href=&#34;https://world.hey.com/dhh/modern-web-apps-without-javascript-bundling-or-transpiling-a20f2755&#34;&gt;build modern JavaScript applications using JavaScript libraries made for ES modules (ESM) without the need for transpiling or bundling&lt;/a&gt;. This frees you from needing Webpack, Yarn, npm, or any other part of the JavaScript toolchain. All you need is the asset pipeline that&#39;s already included in Rails.&lt;/p&gt; &#xA;&lt;p&gt;With this approach you&#39;ll ship many small JavaScript files instead of one big JavaScript file. Thanks to HTTP/2 that no longer carries a material performance penalty during the initial transport, and in fact offers substantial benefits over the long run due to better caching dynamics. Whereas before any change to any JavaScript file included in your big bundle would invalidate the cache for the whole bundle, now only the cache for that single file is invalidated.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s &lt;a href=&#34;https://caniuse.com/?search=importmap&#34;&gt;native support for import maps in Chrome/Edge 89+&lt;/a&gt;, and &lt;a href=&#34;https://github.com/guybedford/es-module-shims&#34;&gt;a shim available&lt;/a&gt; for any browser with basic ESM support. So your app will be able to work with all the evergreen browsers.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Importmap for Rails is automatically included in Rails 7+ for new applications, but you can also install it manually in existing applications:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./bin/bundle add importmap-rails&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./bin/rails importmap:install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: In order to use JavaScript from Rails frameworks like Action Cable, Action Text, and Active Storage, you must be running Rails 7.0+. This was the first version that shipped with ESM compatible builds of these libraries.&lt;/p&gt; &#xA;&lt;h2&gt;How do importmaps work?&lt;/h2&gt; &#xA;&lt;p&gt;At their core, importmaps are essentially a string substitution for what are referred to as &#34;bare module specifiers&#34;. A &#34;bare module specifier&#34; looks like this: &lt;code&gt;import React from &#34;react&#34;&lt;/code&gt;. This is not compatible with the ES Module loader spec. Instead, to be ESM compatible, you must provide 1 of the 3 following types of specifiers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Absolute path:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#34;/Users/DHH/projects/basecamp/node_modules/react&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Relative path:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#34;./node_modules/react&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTTP path:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#34;https://ga.jspm.io/npm:react@17.0.1/index.js&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Importmap-rails provides a clean API for mapping &#34;bare module specifiers&#34; like &lt;code&gt;&#34;react&#34;&lt;/code&gt; to 1 of the 3 viable ways of loading ES Module javascript packages.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# config/importmap.rb&#xA;pin &#34;react&#34;, to: &#34;https://ga.jspm.io/npm:react@17.0.2/index.js&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;means &#34;everytime you see &lt;code&gt;import React from &#34;react&#34;&lt;/code&gt; change it to &lt;code&gt;import React from &#34;https://ga.jspm.io/npm:react@17.0.2/index.js&#34;&lt;/code&gt;&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#34;react&#34; &#xA;// =&amp;gt; import React from &#34;https://ga.jspm.io/npm:react@17.0.2/index.js&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The import map is setup through &lt;code&gt;Rails.application.importmap&lt;/code&gt; via the configuration in &lt;code&gt;config/importmap.rb&lt;/code&gt;. This file is automatically reloaded in development upon changes, but note that you must restart the server if you remove pins and need them gone from the rendered importmap or list of preloads.&lt;/p&gt; &#xA;&lt;p&gt;This import map is inlined in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your application layout using &lt;code&gt;&amp;lt;%= javascript_importmap_tags %&amp;gt;&lt;/code&gt;, which will setup the JSON configuration inside a &lt;code&gt;&amp;lt;script type=&#34;importmap&#34;&amp;gt;&lt;/code&gt; tag. After that, the &lt;a href=&#34;https://github.com/guybedford/es-module-shims&#34;&gt;es-module-shim&lt;/a&gt; is loaded, and then finally the application entrypoint is imported via &lt;code&gt;&amp;lt;script type=&#34;module&#34;&amp;gt;import &#34;application&#34;&amp;lt;/script&amp;gt;&lt;/code&gt;. That logical entrypoint, &lt;code&gt;application&lt;/code&gt;, is mapped in the importmap script tag to the file &lt;code&gt;app/javascript/application.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s in &lt;code&gt;app/javascript/application.js&lt;/code&gt; you setup your application by importing any of the modules that have been defined in the import map. You can use the full ESM functionality of importing any particular export of the modules or everything.&lt;/p&gt; &#xA;&lt;p&gt;It makes sense to use logical names that match the package names used by npm, such that if you later want to start transpiling or bundling your code, you won&#39;t have to change any module imports.&lt;/p&gt; &#xA;&lt;h2&gt;Using npm packages via JavaScript CDNs&lt;/h2&gt; &#xA;&lt;p&gt;Importmap for Rails is designed to be used with JavaScript CDNs for your npm package dependencies. The CDNs provide pre-compiled distribution versions ready to use, and offer a fast, efficient way of serving them.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;./bin/importmap&lt;/code&gt; command that&#39;s added as part of the install to pin, unpin, or update npm packages in your import map. This command uses an API from &lt;a href=&#34;https://jspm.org&#34;&gt;JSPM.org&lt;/a&gt; to resolve your package dependencies efficiently, and then add the pins to your &lt;code&gt;config/importmap.rb&lt;/code&gt; file. It can resolve these dependencies from JSPM itself, but also from other CDNs, like &lt;a href=&#34;https://unpkg.com&#34;&gt;unpkg.com&lt;/a&gt; and &lt;a href=&#34;https://www.jsdelivr.com&#34;&gt;jsdelivr.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It works like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/importmap pin react react-dom&#xA;Pinning &#34;react&#34; to https://ga.jspm.io/npm:react@17.0.2/index.js&#xA;Pinning &#34;react-dom&#34; to https://ga.jspm.io/npm:react-dom@17.0.2/index.js&#xA;Pinning &#34;object-assign&#34; to https://ga.jspm.io/npm:object-assign@4.1.1/index.js&#xA;Pinning &#34;scheduler&#34; to https://ga.jspm.io/npm:scheduler@0.20.2/index.js&#xA;&#xA;./bin/importmap json&#xA;&#xA;{&#xA;  &#34;imports&#34;: {&#xA;    &#34;application&#34;: &#34;/assets/application-37f365cbecf1fa2810a8303f4b6571676fa1f9c56c248528bc14ddb857531b95.js&#34;,&#xA;    &#34;react&#34;: &#34;https://ga.jspm.io/npm:react@17.0.2/index.js&#34;,&#xA;    &#34;react-dom&#34;: &#34;https://ga.jspm.io/npm:react-dom@17.0.2/index.js&#34;,&#xA;    &#34;object-assign&#34;: &#34;https://ga.jspm.io/npm:object-assign@4.1.1/index.js&#34;,&#xA;    &#34;scheduler&#34;: &#34;https://ga.jspm.io/npm:scheduler@0.20.2/index.js&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, the two packages react and react-dom resolve to a total of four dependencies, when resolved via the jspm default.&lt;/p&gt; &#xA;&lt;p&gt;Now you can use these in your application.js entrypoint like you would any other module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#34;react&#34;&#xA;import ReactDOM from &#34;react-dom&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also designate a specific version to pin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/importmap pin react@17.0.1&#xA;Pinning &#34;react&#34; to https://ga.jspm.io/npm:react@17.0.1/index.js&#xA;Pinning &#34;object-assign&#34; to https://ga.jspm.io/npm:object-assign@4.1.1/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or even remove pins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/importmap unpin react&#xA;Unpinning &#34;react&#34;&#xA;Unpinning &#34;object-assign&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you pin a package that has already been pinned, it&#39;ll be updated inline, along with its dependencies.&lt;/p&gt; &#xA;&lt;p&gt;You can control the environment of the package for packages with separate &#34;production&#34; (the default) and &#34;development&#34; builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/importmap pin react --env development&#xA;Pinning &#34;react&#34; to https://ga.jspm.io/npm:react@17.0.2/dev.index.js&#xA;Pinning &#34;object-assign&#34; to https://ga.jspm.io/npm:object-assign@4.1.1/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pick an alternative, supported CDN provider when pinning, like &lt;code&gt;unpkg&lt;/code&gt; or &lt;code&gt;jsdelivr&lt;/code&gt; (&lt;code&gt;jspm&lt;/code&gt; is the default):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/importmap pin react --from jsdelivr&#xA;Pinning &#34;react&#34; to https://cdn.jsdelivr.net/npm/react@17.0.2/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember, though, that if you switch a pin from one provider to another, you may have to clean up dependencies added by the first provider that isn&#39;t used by the second provider.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;./bin/importmap&lt;/code&gt; to see all options.&lt;/p&gt; &#xA;&lt;p&gt;Note that this command is merely a convenience wrapper to resolving logical package names to CDN URLs. You can also just lookup the CDN URLs yourself, and then pin those. For example, if you wanted to use Skypack for React, you could just add the following to &lt;code&gt;config/importmap.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pin &#34;react&#34;, to: &#34;https://cdn.skypack.dev/react&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Downloading vendor files from the JavaScript CDN&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to use a JavaScript CDN in production, you can also download vendored files from the CDN when you&#39;re setting up your pins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/importmap pin react --download&#xA;Pinning &#34;react&#34; to vendor/react.js via download from https://ga.jspm.io/npm:react@17.0.2/index.js&#xA;Pinning &#34;object-assign&#34; to vendor/object-assign.js via download from https://ga.jspm.io/npm:object-assign@4.1.1/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will produce pins in your &lt;code&gt;config/importmap.rb&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pin &#34;react&#34; # https://ga.jspm.io/npm:react@17.0.2/index.js&#xA;pin &#34;object-assign&#34; # https://ga.jspm.io/npm:object-assign@4.1.1/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The packages are downloaded to &lt;code&gt;vendor/javascript&lt;/code&gt;, which you can check into your source control, and they&#39;ll be available through your application&#39;s own asset pipeline serving.&lt;/p&gt; &#xA;&lt;p&gt;If you later wish to remove a downloaded pin, you again pass &lt;code&gt;--download&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/importmap unpin react --download&#xA;Unpinning and removing &#34;react&#34;&#xA;Unpinning and removing &#34;object-assign&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like with a normal pin, you can also update a pin by running the &lt;code&gt;pin --download&lt;/code&gt; command again.&lt;/p&gt; &#xA;&lt;h2&gt;Preloading pinned modules&lt;/h2&gt; &#xA;&lt;p&gt;To avoid the waterfall effect where the browser has to load one file after another before it can get to the deepest nested import, importmap-rails supports &lt;a href=&#34;https://developers.google.com/web/updates/2017/12/modulepreload&#34;&gt;modulepreload links&lt;/a&gt;. Pinned modules can be preloaded by appending &lt;code&gt;preload: true&lt;/code&gt; to the pin.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/importmap.rb&#xA;pin &#34;@github/hotkey&#34;, to: &#34;https://ga.jspm.io/npm:@github/hotkey@1.4.4/dist/index.js&#34;, preload: true&#xA;pin &#34;md5&#34;, to: &#34;https://cdn.jsdelivr.net/npm/md5@2.3.0/md5.js&#34;&#xA;&#xA;# app/views/layouts/application.html.erb&#xA;&amp;lt;%= javascript_importmap_tags %&amp;gt;&#xA;&#xA;# will include the following link before the importmap is setup:&#xA;&amp;lt;link rel=&#34;modulepreload&#34; href=&#34;https://ga.jspm.io/npm:@github/hotkey@1.4.4/dist/index.js&#34;&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Composing import maps&lt;/h2&gt; &#xA;&lt;p&gt;By default, Rails loads import map definition from the application&#39;s &lt;code&gt;config/importmap.rb&lt;/code&gt; to the &lt;code&gt;Importmap::Map&lt;/code&gt; object available at &lt;code&gt;Rails.application.importmap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can combine multiple import maps by adding paths to additional import map configs to &lt;code&gt;Rails.application.config.importmap.paths&lt;/code&gt;. For example, appending import maps defined in Rails engines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# my_engine/lib/my_engine/engine.rb&#xA;&#xA;module MyEngine&#xA;  class Engine &amp;lt; ::Rails::Engine&#xA;    # ...&#xA;    initializer &#34;my-engine.importmap&#34;, before: &#34;importmap&#34; do |app|&#xA;      app.config.importmap.paths &amp;lt;&amp;lt; Engine.root.join(&#34;config/importmap.rb&#34;)&#xA;      # ...&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And pinning JavaScript modules from the engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# my_engine/config/importmap.rb&#xA;&#xA;pin_all_from File.expand_path(&#34;../app/assets/javascripts&#34;, __dir__)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Selectively importing modules&lt;/h2&gt; &#xA;&lt;p&gt;You can selectively import your javascript modules on specific pages.&lt;/p&gt; &#xA;&lt;p&gt;Create your javascript in &lt;code&gt;app/javascript&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// /app/javascript/checkout.js&#xA;// some checkout specific js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pin your js file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# config/importmap.rb&#xA;# ... other pins...&#xA;pin &#34;checkout&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import your module on the specific page. Note: you&#39;ll likely want to use a &lt;code&gt;content_for&lt;/code&gt; block on the specifc page/partial, then yield it in your layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;% content_for :head do %&amp;gt;&#xA;  &amp;lt;%= javascript_import_module_tag &#34;checkout&#34; %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: The &lt;code&gt;javascript_import_module_tag&lt;/code&gt; should come after your &lt;code&gt;javascript_importmap_tags&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= javascript_importmap_tags %&amp;gt;&#xA;&amp;lt;%= yield(:head) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Include a digest of the import map in your ETag&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag&#34;&gt;ETags&lt;/a&gt; generated by Rails helpers like &lt;code&gt;stale?&lt;/code&gt; or &lt;code&gt;fresh_when&lt;/code&gt;, you need to include the digest of the import map into this calculation. Otherwise your application will return 302 cache responses even when your JavaScript assets have changed. You can avoid this with something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  etag { Rails.application.importmap.digest(resolver: helpers) if request.format&amp;amp;.html? }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sweeping the cache in development and test&lt;/h2&gt; &#xA;&lt;p&gt;Generating the import map json and modulepreloads may require resolving hundreds of assets. This can take a while, so these operations are cached, but in development and test, we watch for changes to both &lt;code&gt;config/importmap.rb&lt;/code&gt; and files in &lt;code&gt;app/javascript&lt;/code&gt; to clear this cache. This feature can be controlled in an environment configuration file via the boolean &lt;code&gt;config.importmap.sweep_cache&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re pinning local files from outside of &lt;code&gt;app/javascript&lt;/code&gt;, you&#39;ll need to add them to the cache sweeper configuration or restart your development server upon changes to those external files. For example, here&#39;s how you can do it for Rails engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# my_engine/lib/my_engine/engine.rb&#xA;&#xA;module MyEngine&#xA;  class Engine &amp;lt; ::Rails::Engine&#xA;    # ...&#xA;    initializer &#34;my-engine.importmap&#34;, before: &#34;importmap&#34; do |app|&#xA;      # ...&#xA;      app.config.importmap.cache_sweepers &amp;lt;&amp;lt; Engine.root.join(&#34;app/assets/javascripts&#34;)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Expected errors from using the es-module-shim&lt;/h2&gt; &#xA;&lt;p&gt;While import maps are native in Chrome and Edge, they need a shim in other browsers that&#39;ll produce a JavaScript console error like &lt;code&gt;TypeError: Module specifier, &#39;application&#39; does not start with &#34;/&#34;, &#34;./&#34;, or &#34;../&#34;.&lt;/code&gt;. This error is normal and does not have any user-facing consequences.&lt;/p&gt; &#xA;&lt;p&gt;In Firefox. when opening the browser console, the asm.js module lexer build will run in unoptimized mode due to the debugger attaching. This gives a warning message &lt;code&gt;&#34;asm.js type error: Disabled because no suitable wasm compiler is available&#34;&lt;/code&gt; which is as expected. When the console is closed again, the asm.js optimizations are fully applied, and this can even be verified with the console open by disabling the debugger in &lt;code&gt;about:config&lt;/code&gt; and reloading the page.&lt;/p&gt; &#xA;&lt;h2&gt;Turning off the shim&lt;/h2&gt; &#xA;&lt;p&gt;Under certain circumstances, like running system tests using chromedriver under CI (which may be resource constrained and trigger errors in certain cases), you may want to explicitly turn off including the shim. You can do this by calling the bulk tag helper with &lt;code&gt;javascript_importmap_tags(&#34;application&#34;, shim: false)&lt;/code&gt;. Thus you can pass in something like &lt;code&gt;shim: !ENV[&#34;CI&#34;]&lt;/code&gt;. If you want, and are sure you&#39;re not doing any full-page caching, you can also connect this directive to a user agent check (using a gem like &lt;code&gt;useragent&lt;/code&gt;) to check whether the browser is chrome/edge 89+. But you really shouldn&#39;t have to, as the shim is designed to gracefully work with natively compatible drivers.&lt;/p&gt; &#xA;&lt;h2&gt;Checking for outdated or vulnerable packages&lt;/h2&gt; &#xA;&lt;p&gt;Importmap for Rails provides two commands to check your pinned packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./bin/importmap outdated&lt;/code&gt; checks the NPM registry for new versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./bin/importmap audit&lt;/code&gt; checks the NPM registry for known security issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Importmap for Rails is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>danini-the-panini/mittsu</title>
    <updated>2022-07-17T01:33:27Z</updated>
    <id>tag:github.com,2022-07-17:/danini-the-panini/mittsu</id>
    <link href="https://github.com/danini-the-panini/mittsu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;3D Graphics Library for Ruby.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mittsu&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/mittsu&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/mittsu.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/danini-the-panini/mittsu/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/22be300984d81fa10af8/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/danini-the-panini/mittsu/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/22be300984d81fa10af8/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danini-the-panini/mittsu/actions?query=workflow%3A%22Build%22&#34;&gt;&lt;img src=&#34;https://github.com/danini-the-panini/mittsu/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;3D Graphics Library for Ruby&lt;/p&gt; &#xA;&lt;p&gt;Mittsu makes 3D graphics easier by providing an abstraction over OpenGL, and is based heavily off of &lt;a href=&#34;http://threejs.org&#34;&gt;THREE.js&lt;/a&gt;. No more weird pointers and wondering about the difference between a VAO and a VBO (besides the letter). Simply think of something awesome and make it!&lt;/p&gt; &#xA;&lt;h2&gt;GIFs!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1171825/18411863/45328540-7781-11e6-986b-6e3f2551c719.gif&#34; alt=&#34;Normal-mapped Earth&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/1171825/18411861/4531bb4c-7781-11e6-92b4-b6ebda60e2c9.gif&#34; alt=&#34;Point Light&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/1171825/18411862/4531fe9a-7781-11e6-9665-b172df1a3645.gif&#34; alt=&#34;Tank Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(You can find the source for the Tank Demo &lt;a href=&#34;https://github.com/danini-the-panini/mittsu-tank-demo&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the prerequisites:&lt;/p&gt; &#xA;&lt;p&gt;Mittsu depends on Ruby 2.x, OpenGL 3.3+, and GLFW 3.1.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# OSX&#xA;$ brew install glfw3&#xA;&#xA;# Ubuntu&#xA;$ sudo apt-get install libglfw3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; On Windows, you will have to manually specify the glfw3.dll path in an environment variable (you can download it &lt;a href=&#34;http://www.glfw.org/download.html&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ex) set MITTSU_LIBGLFW_PATH=C:\Users\username\lib-mingw-w64&#xA;&amp;gt; set MITTSU_LIBGLFW_PATH=C:\path\to\glfw3.dll&#xA;&amp;gt; ruby your_awesome_mittsu_app.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;mittsu&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install mittsu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;tl;dr&lt;/h3&gt; &#xA;&lt;p&gt;Copy-Paste and Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;mittsu&#39;&#xA;&#xA;SCREEN_WIDTH = 800&#xA;SCREEN_HEIGHT = 600&#xA;ASPECT = SCREEN_WIDTH.to_f / SCREEN_HEIGHT.to_f&#xA;&#xA;renderer = Mittsu::OpenGLRenderer.new width: SCREEN_WIDTH, height: SCREEN_HEIGHT, title: &#39;Hello, World!&#39;&#xA;&#xA;scene = Mittsu::Scene.new&#xA;&#xA;camera = Mittsu::PerspectiveCamera.new(75.0, ASPECT, 0.1, 1000.0)&#xA;camera.position.z = 5.0&#xA;&#xA;box = Mittsu::Mesh.new(&#xA;  Mittsu::BoxGeometry.new(1.0, 1.0, 1.0),&#xA;  Mittsu::MeshBasicMaterial.new(color: 0x00ff00)&#xA;)&#xA;&#xA;scene.add(box)&#xA;&#xA;renderer.window.run do&#xA;  box.rotation.x += 0.1&#xA;  box.rotation.y += 0.1&#xA;&#xA;  renderer.render(scene, camera)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step by Step&lt;/h3&gt; &#xA;&lt;p&gt;First, we need to require Mittsu in order to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;mittsu&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, we&#39;ll define some constants to help us with setting up our 3D environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SCREEN_WIDTH = 800&#xA;SCREEN_HEIGHT = 600&#xA;ASPECT = SCREEN_WIDTH.to_f / SCREEN_HEIGHT.to_f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The aspect ratio will be used for setting up the camera later.&lt;/p&gt; &#xA;&lt;p&gt;Once we have all that we can create the canvas we will use to draw our graphics onto. In Mittsu this is called a renderer. It provides a window and an OpenGL context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;renderer = Mittsu::OpenGLRenderer.new width: SCREEN_WIDTH, height: SCREEN_HEIGHT, title: &#39;Hello, World!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will give us an 800x600 window with the title &lt;code&gt;Hello, World!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now that we have our canvas, let&#39;s start setting up the scene we wish to draw onto it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;scene = Mittsu::Scene.new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A scene is like a stage where all our 3D objects live and animate.&lt;/p&gt; &#xA;&lt;p&gt;We can&#39;t draw a 3D scene without knowing where we&#39;re looking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;camera = Mittsu::PerspectiveCamera.new(75.0, ASPECT, 0.1, 1000.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This camera has a 75° field-of-view (FOV), the aspect ratio of the window (which we defined earlier), and shows everything between a distance of 0.1 to 1000.0 away from the camera.&lt;/p&gt; &#xA;&lt;p&gt;The camera starts off at the origin &lt;code&gt;[0,0,0]&lt;/code&gt; and faces the negative Z-axis. We&#39;ll position it somewhere along the positive Z-axis so that it is looking at the center of the scene from a short distance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;camera.position.z = 5.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our scene isn&#39;t going to be very exciting if there is nothing in it, so we&#39;ll create a box:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;box = Mittsu::Mesh.new(&#xA;  Mittsu::BoxGeometry.new(1.0, 1.0, 1.0),&#xA;  Mittsu::MeshBasicMaterial.new(color: 0x00ff00)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;Mesh&lt;/code&gt; in Mittsu is the combination of a &lt;code&gt;Geometry&lt;/code&gt; (the shape of the object) and a &lt;code&gt;Material&lt;/code&gt; (the &#34;look&#34; of the object). Here we&#39;ve created a 1x1x1 box that is colored green.&lt;/p&gt; &#xA;&lt;p&gt;Box in hand, we make it part of our scene:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;scene.add(box)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here comes the fun part... the render loop!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;renderer.window.run do&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The given block is called every frame. This is where you can tell the renderer what scene to draw, and do any updates to the objects in your scene.&lt;/p&gt; &#xA;&lt;p&gt;Just to make things a bit more interesting, we&#39;ll make the box rotate around its X and Y axes, so that it spins like crazy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;box.rotation.x += 0.1&#xA;box.rotation.y += 0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Last but not least, we tell the renderer to draw our scene this frame, which will tell the graphics processor to draw our green box with its updated rotation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;renderer.render(scene, camera)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Easy peasy! :)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Resources&lt;/h3&gt; &#xA;&lt;p&gt;Mittsu follows a similar structure to THREE.js, so you can generally use &lt;a href=&#34;http://threejs.org/docs/&#34;&gt;the same documentation&lt;/a&gt; for a description of the various classes and how they work.&lt;/p&gt; &#xA;&lt;p&gt;If you just want to see what Mittsu can do and how to do it, take a peek inside the &lt;code&gt;examples&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Where you can help&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Testing!&lt;/p&gt; &lt;p&gt;Currently the only unit tests are for most of the maths library, otherwise the library is tested by running the examples and checking that they look correct.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Refactoring!&lt;/p&gt; &lt;p&gt;The code is unfortunately still a mess. Mittsu started out as a direct port of THREE.js, and JavaScript to Ruby is not an exact science.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Find Bugs!&lt;/p&gt; &lt;p&gt;Mittsu is still very young, and there are plenty of small bugs and glitches that need to be ironed out. If you find a bug, create an issue so we can track it and squash it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add all the features!&lt;/p&gt; &lt;p&gt;Some of the things I&#39;d like to see ported from THREE.js include:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Picking (clicking on 3D objects in a scene)&lt;/li&gt; &#xA;   &lt;li&gt;Bone structure/animation (e.g. for character movements)&lt;/li&gt; &#xA;   &lt;li&gt;Lens Flares! (for JJ Abrams)&lt;/li&gt; &#xA;   &lt;li&gt;All the Extras and Helpers (who doesn&#39;t need extra help?)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write documentation!&lt;/p&gt; &lt;p&gt;You can use the same docs as THREE.js for now, but I would like to provide Mittsu-specific documentation so devs don&#39;t have to keep replacing &lt;code&gt;new THREE.Thing()&lt;/code&gt; with &lt;code&gt;Mittsu::Thing.new&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it ( &lt;a href=&#34;https://github.com/danini-the-panini/mittsu/fork&#34;&gt;https://github.com/danini-the-panini/mittsu/fork&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create a new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Thank you for helping me help you help us all. ;)&lt;/p&gt;</summary>
  </entry>
</feed>