<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-23T01:32:52Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>learn-co-curriculum/phase-4-creating-a-rails-api</title>
    <updated>2022-07-23T01:32:52Z</updated>
    <id>tag:github.com,2022-07-23:/learn-co-curriculum/phase-4-creating-a-rails-api</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-creating-a-rails-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Creating a Rails API from Scratch&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;--api&lt;/code&gt; flag to create an API-only Rails app&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;resource&lt;/code&gt; generator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve spent a lot of time now focusing on the backend, and now&#39;s a great opportunity to see what we can actually do with all the power of a Rails API to support a frontend application as well.&lt;/p&gt; &#xA;&lt;p&gt;Throughout this section, we&#39;ll be building a DVD shop. We&#39;ll have a Rails API to support a React frontend application, and we&#39;ll be focusing on how that client-server communication process works, as well as some challenges involved in communicating between two separate applications.&lt;/p&gt; &#xA;&lt;p&gt;In this lesson, we&#39;ll start by building the Rails backend from scratch and talk through some of the typical configuration when creating a new Rails API.&lt;/p&gt; &#xA;&lt;h2&gt;Generating a Rails API&lt;/h2&gt; &#xA;&lt;p&gt;Just like we saw at the beginning of the phase, we can use &lt;code&gt;rails new&lt;/code&gt; to generate a new Rails application. We&#39;ll run that same command with a few additional options to optimize our Rails app. Let&#39;s generate the backend code for our &lt;code&gt;dvd-shop&lt;/code&gt;. Use &lt;code&gt;cd ..&lt;/code&gt; to navigate out of the lab directory, and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails new dvd-shop --api --minimal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--api&lt;/code&gt;: this flag will create our new application with some additional API-specific configuration, and will skip the code for generating &lt;code&gt;.erb&lt;/code&gt; files with ActionView.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--minimal&lt;/code&gt;: this flag skips a lot of additional Rails features that we won&#39;t use in our API, such as code for sending emails and processing images. Read more about the &lt;a href=&#34;https://bigbinary.com/blog/rails-6-1-adds-minimal-option-support&#34;&gt;&lt;code&gt;--minimal&lt;/code&gt; flag&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The reason we ask you to &lt;code&gt;cd&lt;/code&gt; out of the lab directory is because when you generate a new Rails project, it will automatically create a new Git repository for your Rails project. Since the lab directory is already a Git repository, it&#39;s better to create this new project in its own directory, so you don&#39;t end up with nested Git repositories.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;With that code in place, let&#39;s generate the code for handling our first request from the client.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Resource Generator&lt;/h2&gt; &#xA;&lt;p&gt;One of the main features of our frontend application will be to display a list of movies. For that feature, we&#39;ll want our API to handle a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/movies&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get that request working, we&#39;ll need to create a &lt;strong&gt;route&lt;/strong&gt; and &lt;strong&gt;controller&lt;/strong&gt; action on our Rails server. We&#39;ll also need a &lt;strong&gt;model&lt;/strong&gt; to interact with the database, and a &lt;strong&gt;migration&lt;/strong&gt; to generate the corresponding database table for this model.&lt;/p&gt; &#xA;&lt;p&gt;For our &lt;code&gt;Movie&lt;/code&gt; model, we&#39;ll want a table with the following attributes:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column Name&lt;/th&gt; &#xA;   &lt;th&gt;Data Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;year&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;length&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;director&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;poster_url&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;category&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;discount&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;female_director&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We could create the route, model, controller, and migration individually, but since this kind of operation is pretty common for a Rails developer, there&#39;s a handy generator that will set up all the code we need: &lt;code&gt;rails g resource&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Navigate into the &lt;code&gt;dvd-shop&lt;/code&gt; directory and run this code in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails g resource Movie title year:integer length:integer director description poster_url category discount:boolean female_director:boolean --no-test-framework&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate a migration for creating a &lt;code&gt;movies&lt;/code&gt; table with the specified attributes&lt;/li&gt; &#xA; &lt;li&gt;Generate a &lt;code&gt;Movie&lt;/code&gt; model file&lt;/li&gt; &#xA; &lt;li&gt;Generate a &lt;code&gt;MoviesController&lt;/code&gt; controller file&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;resources :movies&lt;/code&gt; to the &lt;code&gt;routes.rb&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s a powerful command, so make sure to use it sparingly! You should only use &lt;code&gt;rails g resource&lt;/code&gt; if you truly need all of that code generated.&lt;/p&gt; &#xA;&lt;h2&gt;Running the API&lt;/h2&gt; &#xA;&lt;p&gt;To get some sample data into our application, we&#39;ve provided a &lt;code&gt;seeds.rb&lt;/code&gt; file in the root directory of this repo. Copy the contents of this file into your &lt;code&gt;db/seeds.rb&lt;/code&gt; file. Then, to set up and seed the database, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails db:migrate db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s update our &lt;code&gt;routes.rb&lt;/code&gt; file to set up just the one route our frontend needs, for the time being:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# config/routes.rb&#xA;resources :movies, only: [:index]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also add the index action to our controller:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;def index&#xA;  movies = Movie.all&#xA;  render json: movies&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With that code in place, run &lt;code&gt;rails s&lt;/code&gt; to start the server, and visit &lt;code&gt;http://localhost:3000/movies&lt;/code&gt; in the browser to see our movie data. Success!&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;When creating a new Rails API project from scratch, you can use the &lt;code&gt;--api&lt;/code&gt; flag to have Rails optimize your project for building a web API.&lt;/p&gt; &#xA;&lt;p&gt;We also saw how to use the &lt;code&gt;resource&lt;/code&gt; generator, which can help quickly set up the code we need to create RESTful routes and CRUD functionality for one single resource.&lt;/p&gt; &#xA;&lt;h2&gt;Check For Understanding&lt;/h2&gt; &#xA;&lt;p&gt;Before you move on, make sure you can answer the following question:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;What files are generated when running &lt;code&gt;rails g resource ResourceName&lt;/code&gt;?&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/command_line.html&#34;&gt;The Rails Command Line&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>