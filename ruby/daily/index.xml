<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-28T01:33:27Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>freeCodeCamp/devdocs</title>
    <updated>2022-06-28T01:33:27Z</updated>
    <id>tag:github.com,2022-06-28:/freeCodeCamp/devdocs</id>
    <link href="https://github.com/freeCodeCamp/devdocs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API Documentation Browser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://devdocs.io&#34;&gt;DevDocs&lt;/a&gt; — API Documentation Browser&lt;/h1&gt; &#xA;&lt;p&gt;DevDocs combines multiple developer documentations in a clean and organized web UI with instant search, offline support, mobile version, dark theme, keyboard shortcuts, and more.&lt;/p&gt; &#xA;&lt;p&gt;DevDocs was created by &lt;a href=&#34;https://thibaut.me&#34;&gt;Thibaut Courouble&lt;/a&gt; and is operated by &lt;a href=&#34;https://www.freecodecamp.org&#34;&gt;freeCodeCamp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;We are currently searching for maintainers&lt;/h2&gt; &#xA;&lt;p&gt;Please reach out to the community on &lt;a href=&#34;https://gitter.im/FreeCodeCamp/DevDocs&#34;&gt;Gitter&lt;/a&gt; if you would like to join the team!&lt;/p&gt; &#xA;&lt;p&gt;Keep track of development news:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the contributor chat room on &lt;a href=&#34;https://gitter.im/FreeCodeCamp/DevDocs&#34;&gt;Gitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Watch the repository on &lt;a href=&#34;https://github.com/freeCodeCamp/devdocs/subscription&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/DevDocs&#34;&gt;@DevDocs&lt;/a&gt; on Twitter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents:&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#vision&#34;&gt;Vision&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#app&#34;&gt;App&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#scraper&#34;&gt;Scraper&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#available-commands&#34;&gt;Commands&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#contributing&#34;&gt;Contributing&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#documentation&#34;&gt;Documentation&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#related-projects&#34;&gt;Related Projects&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#copyright--license&#34;&gt;License&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#questions&#34;&gt;Questions?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Unless you wish to contribute to the project, we recommend using the hosted version at &lt;a href=&#34;https://devdocs.io&#34;&gt;devdocs.io&lt;/a&gt;. It&#39;s up-to-date and works offline out-of-the-box.&lt;/p&gt; &#xA;&lt;p&gt;DevDocs is made of two pieces: a Ruby scraper that generates the documentation and metadata, and a JavaScript app powered by a small Sinatra app.&lt;/p&gt; &#xA;&lt;p&gt;DevDocs requires Ruby 2.7.4, libcurl, and a JavaScript runtime supported by &lt;a href=&#34;https://github.com/rails/execjs#readme&#34;&gt;ExecJS&lt;/a&gt; (included in OS X and Windows; &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; on Linux). Once you have these installed, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/freeCodeCamp/devdocs.git &amp;amp;&amp;amp; cd devdocs&#xA;gem install bundler&#xA;bundle install&#xA;bundle exec thor docs:download --default&#xA;bundle exec rackup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, point your browser at &lt;a href=&#34;http://localhost:9292&#34;&gt;localhost:9292&lt;/a&gt; (the first request will take a few seconds to compile the assets). You&#39;re all set.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;thor docs:download&lt;/code&gt; command is used to download pre-generated documentations from DevDocs&#39;s servers (e.g. &lt;code&gt;thor docs:download html css&lt;/code&gt;). You can see the list of available documentations and versions by running &lt;code&gt;thor docs:list&lt;/code&gt;. To update all downloaded documentations, run &lt;code&gt;thor docs:download --installed&lt;/code&gt;. To download and install all documentation this project has available, run &lt;code&gt;thor docs:download --all&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; there is currently no update mechanism other than &lt;code&gt;git pull origin main&lt;/code&gt; to update the code and &lt;code&gt;thor docs:download --installed&lt;/code&gt; to download the latest version of the docs. To stay informed about new releases, be sure to &lt;a href=&#34;https://github.com/freeCodeCamp/devdocs/subscription&#34;&gt;watch&lt;/a&gt; this repository.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, DevDocs may be started as a Docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# First, build the image&#xA;git clone https://github.com/freeCodeCamp/devdocs.git &amp;amp;&amp;amp; cd devdocs&#xA;docker build -t thibaut/devdocs .&#xA;&#xA;# Finally, start a DevDocs container (access http://localhost:9292)&#xA;docker run --name devdocs -d -p 9292:9292 thibaut/devdocs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Vision&lt;/h2&gt; &#xA;&lt;p&gt;DevDocs aims to make reading and searching reference documentation fast, easy and enjoyable.&lt;/p&gt; &#xA;&lt;p&gt;The app&#39;s main goals are to: keep load times as short as possible; improve the quality, speed, and order of search results; maximize the use of caching and other performance optimizations; maintain a clean and readable user interface; be fully functional offline; support full keyboard navigation; reduce “context switch” by using a consistent typography and design across all documentations; reduce clutter by focusing on a specific category of content (API/reference) and indexing only the minimum useful to most developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; DevDocs is neither a programming guide nor a search engine. All our content is pulled from third-party sources and the project doesn&#39;t intend to compete with full-text search engines. Its backbone is metadata; each piece of content is identified by a unique, &#34;obvious&#34; and short string. Tutorials, guides and other content that don&#39;t meet this requirement are outside the scope of the project.&lt;/p&gt; &#xA;&lt;h2&gt;App&lt;/h2&gt; &#xA;&lt;p&gt;The web app is all client-side JavaScript, written in &lt;a href=&#34;http://coffeescript.org&#34;&gt;CoffeeScript&lt;/a&gt;, and powered by a small &lt;a href=&#34;http://www.sinatrarb.com&#34;&gt;Sinatra&lt;/a&gt;/&lt;a href=&#34;https://github.com/rails/sprockets&#34;&gt;Sprockets&lt;/a&gt; application. It relies on files generated by the &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#scraper&#34;&gt;scraper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Many of the code&#39;s design decisions were driven by the fact that the app uses XHR to load content directly into the main frame. This includes stripping the original documents of most of their HTML markup (e.g. scripts and stylesheets) to avoid polluting the main frame, and prefixing all CSS class names with an underscore to prevent conflicts.&lt;/p&gt; &#xA;&lt;p&gt;Another driving factor is performance and the fact that everything happens in the browser. A service worker (which comes with its own set of constraints) and &lt;code&gt;localStorage&lt;/code&gt; are used to speed up the boot time, while memory consumption is kept in check by allowing the user to pick his/her own set of documentations. The search algorithm is kept simple because it needs to be fast even searching through 100,000 strings.&lt;/p&gt; &#xA;&lt;p&gt;DevDocs being a developer tool, the browser requirements are high:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recent versions of Firefox, Chrome, or Opera&lt;/li&gt; &#xA; &lt;li&gt;Safari 11.1+&lt;/li&gt; &#xA; &lt;li&gt;Edge 17+&lt;/li&gt; &#xA; &lt;li&gt;iOS 11.3+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This allows the code to take advantage of the latest DOM and HTML5 APIs and make developing DevDocs a lot more fun!&lt;/p&gt; &#xA;&lt;h2&gt;Scraper&lt;/h2&gt; &#xA;&lt;p&gt;The scraper is responsible for generating the documentation and index files (metadata) used by the &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#app&#34;&gt;app&lt;/a&gt;. It&#39;s written in Ruby under the &lt;code&gt;Docs&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;There are currently two kinds of scrapers: &lt;code&gt;UrlScraper&lt;/code&gt; which downloads files via HTTP and &lt;code&gt;FileScraper&lt;/code&gt; which reads them from the local filesystem. They both make copies of HTML documents, recursively following links that match a set of rules and applying all sorts of modifications along the way, in addition to building an index of the files and their metadata. Documents are parsed using &lt;a href=&#34;http://nokogiri.org&#34;&gt;Nokogiri&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Modifications made to each document include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;removing content such as the document structure (&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, etc.), comments, empty nodes, etc.&lt;/li&gt; &#xA; &lt;li&gt;fixing links (e.g. to remove duplicates)&lt;/li&gt; &#xA; &lt;li&gt;replacing all external (not scraped) URLs with their fully qualified counterpart&lt;/li&gt; &#xA; &lt;li&gt;replacing all internal (scraped) URLs with their unqualified and relative counterpart&lt;/li&gt; &#xA; &lt;li&gt;adding content, such as a title and link to the original document&lt;/li&gt; &#xA; &lt;li&gt;ensuring correct syntax highlighting using &lt;a href=&#34;http://prismjs.com/&#34;&gt;Prism&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These modifications are applied via a set of filters using the &lt;a href=&#34;https://github.com/jch/html-pipeline&#34;&gt;HTML::Pipeline&lt;/a&gt; library. Each scraper includes filters specific to itself, one of which is tasked with figuring out the pages&#39; metadata.&lt;/p&gt; &#xA;&lt;p&gt;The end result is a set of normalized HTML partials and two JSON files (index + offline data). Because the index files are loaded separately by the &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/#app&#34;&gt;app&lt;/a&gt; following the user&#39;s preferences, the scraper also creates a JSON manifest file containing information about the documentations currently available on the system (such as their name, version, update date, etc.).&lt;/p&gt; &#xA;&lt;p&gt;More information about &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/docs/scraper-reference.md&#34;&gt;scrapers&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/docs/filter-reference.md&#34;&gt;filters&lt;/a&gt; is available in the &lt;code&gt;docs&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Available Commands&lt;/h2&gt; &#xA;&lt;p&gt;The command-line interface uses &lt;a href=&#34;http://whatisthor.com&#34;&gt;Thor&lt;/a&gt;. To see all commands and options, run &lt;code&gt;thor list&lt;/code&gt; from the project&#39;s root.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Server&#xA;rackup              # Start the server (ctrl+c to stop)&#xA;rackup --help       # List server options&#xA;&#xA;# Docs&#xA;thor docs:list      # List available documentations&#xA;thor docs:download  # Download one or more documentations&#xA;thor docs:manifest  # Create the manifest file used by the app&#xA;thor docs:generate  # Generate/scrape a documentation&#xA;thor docs:page      # Generate/scrape a documentation page&#xA;thor docs:package   # Package a documentation for use with docs:download&#xA;thor docs:clean     # Delete documentation packages&#xA;&#xA;# Console&#xA;thor console        # Start a REPL&#xA;thor console:docs   # Start a REPL in the &#34;Docs&#34; module&#xA;&#xA;# Tests can be run quickly from within the console using the &#34;test&#34; command. &#xA;# Run &#34;help test&#34; for usage instructions.&#xA;thor test:all       # Run all tests&#xA;thor test:docs      # Run &#34;Docs&#34; tests&#xA;thor test:app       # Run &#34;App&#34; tests&#xA;&#xA;# Assets&#xA;thor assets:compile # Compile assets (not required in development mode)&#xA;thor assets:clean   # Clean old assets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If multiple versions of Ruby are installed on your system, commands must be run through &lt;code&gt;bundle exec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. Please read the &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/.github/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/docs/adding-docs.md&#34;&gt;Adding documentations to DevDocs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/docs/scraper-reference.md&#34;&gt;Scraper Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/docs/filter-reference.md&#34;&gt;Filter Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/docs/maintainers.md&#34;&gt;Maintainers’ Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;Made something cool? Feel free to open a PR to add a new row to this table!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Last commit&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sublime.wbond.net/packages/DevDocs&#34;&gt;Sublime Text plugin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sublime Text plugin to search DevDocs by selection or by input.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vitorbritto/sublime-devdocs&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/vitorbritto/sublime-devdocs?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://atom.io/packages/devdocs&#34;&gt;Atom plugin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Atom plugin adding the &lt;code&gt;doc&lt;/code&gt; command to search DevDocs.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/masnun/atom-devdocs&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/masnun/atom-devdocs?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gruehle/dev-docs-viewer&#34;&gt;gruehle/dev-docs-viewer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Brackets extension for searching and viewing DevDocs content.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gruehle/dev-docs-viewer&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/gruehle/dev-docs-viewer?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/naquad/devdocs-shell&#34;&gt;naquad/devdocs-shell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GTK shell with Vim integration.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/naquad/devdocs-shell&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/naquad/devdocs-shell?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/skeeto/devdocs-lookup&#34;&gt;skeeto/devdocs-lookup&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quick Emacs API lookup on DevDocs.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/skeeto/devdocs-lookup&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/skeeto/devdocs-lookup?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yannickglt/alfred-devdocs&#34;&gt;yannickglt/alfred-devdocs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Alfred workflow for DevDocs.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yannickglt/alfred-devdocs&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/yannickglt/alfred-devdocs?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/waiting-for-dev/vim-www&#34;&gt;waiting-for-dev/vim-www&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vim search plugin with DevDocs in its defaults.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/waiting-for-dev/vim-www&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/waiting-for-dev/vim-www?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=akfish.vscode-devdocs&#34;&gt;vscode-devdocs for VS Code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VS Code plugin to open and search DevDocs inside VS Code.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/akfish/vscode-devdocs&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/akfish/vscode-devdocs?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=deibit.devdocs&#34;&gt;devdocs for VS Code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VS Code plugin to open the browser to search selected text on DevDocs.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/deibit/vscode-devdocs&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/deibit/vscode-devdocs?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/egoist/devdocs-desktop&#34;&gt;egoist/devdocs-desktop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cross-platform desktop application for DevDocs.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/egoist/devdocs-desktop&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/egoist/devdocs-desktop?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/qwfy/doc-browser&#34;&gt;qwfy/doc-browser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native Linux app that supports DevDocs docsets.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/qwfy/doc-browser&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/qwfy/doc-browser?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hardpixel/devdocs-desktop&#34;&gt;hardpixel/devdocs-desktop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GTK3 application for DevDocs with search integrated in the headerbar.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hardpixel/devdocs-desktop&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/hardpixel/devdocs-desktop?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dteoh/devdocs-macos&#34;&gt;dteoh/devdocs-macos&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native macOS application for DevDocs.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dteoh/devdocs-macos&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dteoh/devdocs-macos?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Merith-TK/devdocs_webapp_kotlin&#34;&gt;Merith-TK/devdocs_webapp_kotlin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android application which shows DevDocs in a webview.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Merith-TK/devdocs_webapp_kotlin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/Merith-TK/devdocs_webapp_kotlin?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/astoff/devdocs.el&#34;&gt;astoff/devdocs.el&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Emacs viewer for DevDocs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/astoff/devdocs.el&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/astoff/devdocs.el?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mohamed3nan/DevDocs-Tab&#34;&gt;DevDocs Tab for VS Code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VS Code extension to search for documentation on DevDocs.io faster by displaying it in a tab inside VS Code.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mohamed3nan/DevDocs-Tab&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/mohamed3nan/DevDocs-Tab?logo=github&amp;amp;label&#34; alt=&#34;Latest GitHub commit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Copyright / License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2013–2021 Thibaut Courouble and &lt;a href=&#34;https://github.com/freeCodeCamp/devdocs/graphs/contributors&#34;&gt;other contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This software is licensed under the terms of the Mozilla Public License v2.0. See the &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/COPYRIGHT&#34;&gt;COPYRIGHT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/devdocs/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;Please do not use the name DevDocs to endorse or promote products derived from this software without the maintainers&#39; permission, except as may be necessary to comply with the notice/attribution requirements.&lt;/p&gt; &#xA;&lt;p&gt;We also wish that any documentation file generated using this software be attributed to DevDocs. Let&#39;s be fair to all contributors by giving credit where credit&#39;s due. Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;Questions?&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions, please feel free to ask them on the contributor chat room on &lt;a href=&#34;https://gitter.im/FreeCodeCamp/DevDocs&#34;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/pages-gem</title>
    <updated>2022-06-28T01:33:27Z</updated>
    <id>tag:github.com,2022-06-28:/github/pages-gem</id>
    <link href="https://github.com/github/pages-gem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple Ruby Gem to bootstrap dependencies for setting up and maintaining a local Jekyll environment in sync with GitHub Pages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub Pages Ruby Gem&lt;/h1&gt; &#xA;&lt;p&gt;A simple Ruby Gem to bootstrap dependencies for setting up and maintaining a local Jekyll environment in sync with GitHub Pages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/github-pages&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/github-pages.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/github/pages-gem&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/github/pages-gem/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;One may opt for the conventional approach of using the pages-gem or the containerized approach in which a Docker container is used to provide an environment with most dependencies pre-installed.&lt;/p&gt; &#xA;&lt;h3&gt;Conventional&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important: Make sure you have Bundler &amp;gt; v1.14 by running &lt;code&gt;gem update bundler&lt;/code&gt; in your terminal before following the next steps.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following to your project&#39;s Gemfile: &amp;nbsp;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;github-pages&#39;, group: :jekyll_plugins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: You are not required to install Jekyll separately. Once the &lt;code&gt;github-pages&lt;/code&gt; gem is installed, you can build your site using &lt;code&gt;jekyll build&lt;/code&gt;, or preview your site using &lt;code&gt;jekyll serve&lt;/code&gt;.&lt;/em&gt; For more information about installing Jekyll locally, please see &lt;a href=&#34;https://help.github.com/articles/using-jekyll-with-pages#installing-jekyll&#34;&gt;the GitHub Help docs on the matter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Provided that Docker is installed, one may avoid the setup of additional tools within the environment by simply spawning a Docker container.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make image&lt;/code&gt; from the root of the pages-gem directory to build an image which will be tagged as &lt;code&gt;gh-pages&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatively use &lt;code&gt;make image_alpine&lt;/code&gt; for a smaller &lt;code&gt;alpine&lt;/code&gt;-based image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start an instance of the server by running either:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SITE=PATH_TO_YOUR_PROJECT make server&lt;/code&gt; from the root of the &lt;code&gt;gh-pages&lt;/code&gt; repository (where the Makefile resides) or&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SITE=PATH_TO_YOUR_PROJECT docker run --rm -p 4000:4000 -v `realpath ${SITE}`:/src/site gh-pages&lt;/code&gt; from any directory or&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github-pages $PATH_TO_YOUR_PROJECT&lt;/code&gt; from any directory when &lt;a href=&#34;https://raw.githubusercontent.com/github/pages-gem/master/contrib/func.sh&#34;&gt;func.sh&lt;/a&gt; has been sourced into your terminal session or&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github-pages&lt;/code&gt; from the directory of the Jekyll site to be previewed when &lt;a href=&#34;https://raw.githubusercontent.com/github/pages-gem/master/contrib/func.sh&#34;&gt;func.sh&lt;/a&gt; has been sourced into your terminal session.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the &lt;code&gt;github-pages&lt;/code&gt; function may be enabled by sourcing func.sh. This can be done by appending&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source $PATH_TO_THIS_DIRECTORY/contrib/func.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to the scripts that load on initiation of a terminal session (usually &lt;code&gt;~/.bashrc&lt;/code&gt; on bash or &lt;code&gt;~/.zshrc&lt;/code&gt; on zsh).:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Running of &lt;code&gt;github-pages&lt;/code&gt; inside a directory of a Jekyll site spawns a &lt;a href=&#34;http://localhost:4000&#34;&gt;server on port 4000&lt;/a&gt;. One may explicitly provide a path to a Jekyll site and a port by running &lt;code&gt;github-pages $PATH $PORT&lt;/code&gt;. This approach is provided as a user-friendlier alternative to the &lt;code&gt;make server&lt;/code&gt; or &lt;code&gt;docker run&lt;/code&gt; invocations mentioned as the first options in step 2.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The ordering of the arguments for the &lt;code&gt;github-pages&lt;/code&gt; function is based on the assumption that it is more likely to need to specify a custom path rather than a custom port.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Command line usage&lt;/h3&gt; &#xA;&lt;p&gt;The GitHub Pages gem also comes with several command-line tools, contained within the &lt;code&gt;github-pages&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h4&gt;List dependency versions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle exec github-pages versions&#xA;+---------------------------+---------+&#xA;| Gem                       | Version |&#xA;+---------------------------+---------+&#xA;| jekyll                    | x.x.x   |&#xA;| kramdown                  | x.x.x   |&#xA;| liquid                    | x.x.x   |&#xA;| ....                      | ....    |&#xA;+---------------------------+---------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, you can also pass the &lt;code&gt;--gemfile&lt;/code&gt; flag to get the dependencies listed in a valid Gemfile dependency format. You can also see a list of the live dependency versions at &lt;a href=&#34;https://pages.github.com/versions/&#34;&gt;pages.github.com/versions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Health check&lt;/h4&gt; &#xA;&lt;p&gt;Checks your GitHub Pages site for common DNS configuration issues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-pages health-check&#xA;Checking domain foo.invalid...&#xA;Uh oh. Looks like something&#39;s fishy: A record points to deprecated IP address&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/github/pages-health-check&#34;&gt;GitHub Pages Health Check&lt;/a&gt; documentation for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Bypassing the plugin whitelist&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to run a Jekyll plugin locally that&#39;s not whitelisted for use on GitHub Pages, you can do so by prefixing the &lt;code&gt;jekyll build&lt;/code&gt; or &lt;code&gt;jekyll serve&lt;/code&gt; command with &lt;code&gt;DISABLE_WHITELIST=true&lt;/code&gt;. This will allow your site to use any plugin listed in your site&#39;s &lt;code&gt;gems&lt;/code&gt; configuration flag. Please note, however, this option is only available when previewing your Jekyll site locally.&lt;/p&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;p&gt;To update to the latest version of Jekyll and associated dependencies, simply run &lt;code&gt;gem update github-pages&lt;/code&gt;, or if you&#39;ve installed via Bundler, &lt;code&gt;bundle update github-pages&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Goals&lt;/h2&gt; &#xA;&lt;p&gt;The goal of the GitHub Pages gem is to help GitHub Pages users bootstrap and maintain a Jekyll build environment that most closely matches the GitHub Pages build environment. The GitHub Pages gem relies on explicit requirements shared between both users&#39; computers and the build servers to ensure that the result of a user&#39;s local build is consistently also the result of the server&#39;s build.&lt;/p&gt; &#xA;&lt;p&gt;Additional tools, such as tools that integrate with the GitHub API to make managing GitHub Pages sites easier are not the primary goal, but may be within the project&#39;s scope.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s versioned&lt;/h2&gt; &#xA;&lt;p&gt;The GitHub Pages gem seeks to version two aspects of the build environment:&lt;/p&gt; &#xA;&lt;h3&gt;1. Ruby&lt;/h3&gt; &#xA;&lt;p&gt;The version of Ruby with which Jekyll is executed. Although Jekyll itself may be compatible with prior or future versions of Ruby, different execution environments yield different results. Ruby 1.8.7 parses YAML differently than 1.9.3, for example, and Kramdown has trouble processing &lt;code&gt;mailto&lt;/code&gt; links prior to 1.9.3. In order to ensure that building locally consistently results in the same build as what appears when published, it&#39;s essential that Ruby itself is versioned along side the Gem, despite no known incompatibilities.&lt;/p&gt; &#xA;&lt;h3&gt;2. Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;This includes Markdown processors, and any other Jekyll dependency for which version incongruency may produce unexpected results. Traditionally, Maruku, Kramdown, RedCloth, liquid, rdiscount, and redcarpet have been strictly maintained due to known breaking changes.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/github/pages-gem/releases&#34;&gt;all releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releasing&lt;/h2&gt; &#xA;&lt;p&gt;To release a new version of this gem, run &lt;code&gt;script/release&lt;/code&gt; from the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;This will create and tag the release.&lt;/p&gt; &#xA;&lt;p&gt;It will also create prs in the relevant repos and assign them to you. It is your responsibility to&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;update the version of the gem in those repos&lt;/li&gt; &#xA; &lt;li&gt;deploy those services as needed&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The relevant repos are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/pages&#34;&gt;github-pages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/actions/jekyll-build-pages/raw/main/Gemfile&#34;&gt;jekyll-build-pages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/pages.github.com&#34;&gt;pages.github.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the &lt;a href=&#34;https://raw.githubusercontent.com/github/pages-gem/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-debugging-with-pry</title>
    <updated>2022-06-28T01:33:27Z</updated>
    <id>tag:github.com,2022-06-28:/learn-co-curriculum/phase-3-debugging-with-pry</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-debugging-with-pry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Debugging with Pry&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Explain how Pry is a more flexible REPL than IRB.&lt;/li&gt; &#xA; &lt;li&gt;Install Pry on your computer&lt;/li&gt; &#xA; &lt;li&gt;Debug a program using &lt;code&gt;binding.pry&lt;/code&gt; within the body of your file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ll cover Pry, a type of REPL, and discuss how to install and use it to debug a program.&lt;/p&gt; &#xA;&lt;h2&gt;What Is a REPL?&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ve already been introduced to REPLs through using IRB (Interactive Ruby). REPL stands for &lt;em&gt;Read, Evaluate, Print, Loop&lt;/em&gt;. It is an interactive programming environment that takes a user&#39;s input, evaluates it and returns the result to the user.&lt;/p&gt; &#xA;&lt;p&gt;Ruby installs with its own REPL, which is IRB, that you&#39;ve already been using. Every time you type &lt;code&gt;irb&lt;/code&gt; into your terminal, you&#39;re entering into a REPL.&lt;/p&gt; &#xA;&lt;h2&gt;What Is Pry?&lt;/h2&gt; &#xA;&lt;p&gt;Pry is another Ruby REPL with some added functionality. When you enter IRB, you are entering a brand new interactive environment. Any code you want to play with in IRB, you have to write in IRB or copy and paste into IRB. Pry, on the other hand, is like a REPL that you can inject into your program.&lt;/p&gt; &#xA;&lt;p&gt;Pry is far more flexible than IRB. Once you install the Pry library (via the Pry gem—we&#39;ll walk through installation in a bit), you can use a &lt;code&gt;binding.pry&lt;/code&gt; anywhere in your code.&lt;/p&gt; &#xA;&lt;h2&gt;Wait... What&#39;s &#39;binding&#39;?&lt;/h2&gt; &#xA;&lt;p&gt;Binding is a built-in ruby class whose objects can encapsulate the context of your current scope (variables, methods etc.), and retain them for use outside of that context.&lt;/p&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;binding.pry&lt;/code&gt; is essentially &#39;prying&#39; into the current binding or context of the code, from outside your file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;binding.pry&lt;/code&gt; gives you similar functionality to using &lt;code&gt;debugger&lt;/code&gt; in a JavaScript application, in that it lets you set a &lt;strong&gt;breakpoint&lt;/strong&gt; in your code that will pause the execution of your program at a certain point so you can inspect the variables, methods, and other context available at a specific place in your code.&lt;/p&gt; &#xA;&lt;p&gt;So when you place the line &lt;code&gt;binding.pry&lt;/code&gt; in your code, that line will get interpreted at runtime (as your program is executed). When the interpreter hits that line, your program will actually &lt;em&gt;freeze&lt;/em&gt; and your terminal will turn into a REPL that exists right in the middle of your program, wherever you added the &lt;code&gt;binding.pry&lt;/code&gt; line.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s take a look. In this repository, you&#39;ll see a file called &lt;code&gt;pry_is_awesome.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;binding.pry&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;First, let&#39;s make sure Pry is installed on your system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gem install pry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the Pry gem system-wide, so you only need to run this command once.&lt;/p&gt; &#xA;&lt;p&gt;Look at the code in &lt;code&gt;lib/pry_is_awesome.rb&lt;/code&gt;. You should see the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;require &#39;pry&#39;&#xA;&#xA;def prying_into_the_method&#xA;  inside_the_method = &#34;We&#39;re inside the method&#34;&#xA;  puts inside_the_method&#xA;  puts &#34;We&#39;re about to stop because of pry!&#34;&#xA;  binding.pry&#xA;  this_variable_hasnt_been_interpreted_yet = &#34;The program froze before it could read me!&#34;&#xA;  puts this_variable_hasnt_been_interpreted_yet&#xA;end&#xA;&#xA;prying_into_the_method&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the top of the file, &lt;code&gt;require &#39;pry&#39;&lt;/code&gt; is a method that loads the &lt;code&gt;pry&lt;/code&gt; library in this file when our application runs, similar to using the &lt;code&gt;import&lt;/code&gt; keyword in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;After requiring &lt;code&gt;pry&lt;/code&gt;, &lt;em&gt;which you must do to use pry&lt;/em&gt;, we define a method, and then call that method.&lt;/p&gt; &#xA;&lt;p&gt;In the directory of this repo, in your terminal, run the file by typing &lt;code&gt;ruby lib/pry_is_awesome.rb&lt;/code&gt;. Now, look at your terminal. You should see something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;  3: def prying_into_the_method&#xA;     4:     inside_the_method = &#34;We&#39;re inside the method&#34;&#xA;     5:     puts inside_the_method&#xA;     6:     puts &#34;We&#39;re about to stop because of pry!&#34;&#xA;     7:     binding.pry&#xA; =&amp;gt;  8:     this_variable_hasnt_been_interpreted_yet = &#34;The program froze before it could read me!&#34;&#xA;     9:     puts this_variable_hasnt_been_interpreted_yet&#xA;    10: end&#xA;[1] pry(main)&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You have frozen your program &lt;em&gt;as it executes&lt;/em&gt; and are now inside a REPL &lt;em&gt;inside your program&lt;/em&gt;. You basically just stopped time! How cool is that?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Depending on the size of your terminal window, Pry might not be able to fit your entire method on the screen, in which case you&#39;ll see a screen like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;  3: def prying_into_the_method&#xA;     4:     inside_the_method = &#34;We&#39;re inside the method&#34;&#xA;     5:     puts inside_the_method&#xA;     6:     puts &#34;We&#39;re about to stop because of pry!&#34;&#xA;     7:     binding.pry&#xA;:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you ever get into this situation where you see a &lt;code&gt;:&lt;/code&gt; as the terminal prompt instead of &lt;code&gt;pry(main)&amp;gt;&lt;/code&gt;, just type the letter &lt;code&gt;q&lt;/code&gt; in the terminal to exit out.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In the terminal, in your pry console, type the variable name &lt;code&gt;inside_the_method&lt;/code&gt; and hit enter. You should see a return value of &lt;code&gt;&#34;We&#39;re inside the method&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You are able to explore the data &lt;em&gt;inside&lt;/em&gt; the method in which you&#39;ve placed your binding. Any variables or methods that are available from the line you placed your &lt;code&gt;binding.pry&lt;/code&gt; will be available to you to explore from the terminal.&lt;/p&gt; &#xA;&lt;p&gt;Now, in the terminal, in your pry console, type the variable name &lt;code&gt;this_variable_hasnt_been_interpreted_yet&lt;/code&gt;. You should see a return value of &lt;code&gt;nil&lt;/code&gt;. That&#39;s because the binding you placed on line 7 actually froze the program on line 7 and the variable you just called hasn&#39;t been interpreted yet. Consequently, our REPL doesn&#39;t know about it.&lt;/p&gt; &#xA;&lt;p&gt;Now, in the terminal, type &lt;code&gt;exit&lt;/code&gt;, and you&#39;ll leave your pry console and the program will continue to execute.&lt;/p&gt; &#xA;&lt;h2&gt;Using Pry to Debug&lt;/h2&gt; &#xA;&lt;p&gt;In addition to &lt;em&gt;exploring&lt;/em&gt; code inside Pry, you can also manipulate variables and try code out. This is where Pry really becomes helpful for debugging. If you have a method that isn&#39;t doing what it&#39;s supposed to do, instead of making changes in your text editor and running the tests over and over until you get it working, you can put a binding in your code and try things out. Once you&#39;ve figured out how to fix the problem, you then update the code in your text editor accordingly.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s walk through an example together. In this repository, you&#39;ll see a &lt;code&gt;spec&lt;/code&gt; folder containing a file &lt;code&gt;pry_debugging_spec.rb&lt;/code&gt;. This is a test for the file &lt;code&gt;lib/pry_debugging.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;pry_debugging.rb&lt;/code&gt;, we have a broken method. Run &lt;code&gt;learn test&lt;/code&gt; to see the failing test. You should see the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;  1) #plus_two takes in a number as an argument and returns the sum of that number and 2&#xA;     Failure/Error: expect(plus_two(3)).to eq(5)&#xA;&#xA;       expected: 5&#xA;            got: 3&#xA;&#xA;       (compared using ==)&#xA;     # ./spec/pry_debugging_spec.rb:6:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So what&#39;s happening? In the second line (the line starting with &lt;code&gt;Failure/Error&lt;/code&gt;), we can see that the test is calling the &lt;code&gt;plus_two&lt;/code&gt; method and passing in &lt;code&gt;3&lt;/code&gt; as an argument. Below that we can see that the test is expecting &lt;code&gt;5&lt;/code&gt; to be returned, but that &lt;code&gt;3&lt;/code&gt; is being returned instead. Remember that the return value of a method in Ruby is generally the value of the last line of the method, in this case, &lt;code&gt;num&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def plus_two(num)&#xA;    num + 2&#xA;    num&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So while our method is adding 2 to &lt;code&gt;num&lt;/code&gt; on the second line, it appears that it is not &lt;em&gt;updating&lt;/em&gt; &lt;code&gt;num&lt;/code&gt;. We have Pry required at the top of our &lt;code&gt;spec/pry_debugging_spec.rb&lt;/code&gt; file so we can use it to verify this. Let&#39;s place a &lt;code&gt;binding.pry&lt;/code&gt; in our code, right after that line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def plus_two(num)&#xA;    num + 2&#xA;    binding.pry&#xA;    num&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, run the test suite again and drop into your Pry console. Your terminal should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;    1: def plus_two(num)&#xA;    2:  num + 2&#xA;    3:  binding.pry&#xA; =&amp;gt; 4:  num&#xA;    5: end&#xA;&#xA;[1] pry(#&amp;lt;RSpec::ExampleGroups::PlusTwo&amp;gt;)&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s check our current return value by typing &lt;code&gt;num&lt;/code&gt; at the Pry prompt. You should see something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;[1] pry(#&amp;lt;RSpec::ExampleGroups::PlusTwo&amp;gt;)&amp;gt; num&#xA;=&amp;gt; 3&#xA;[2] pry(#&amp;lt;RSpec::ExampleGroups::PlusTwo&amp;gt;)&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By checking the value of the variable inside our pry console, we can confirm that &lt;code&gt;num&lt;/code&gt; is still equal to &lt;code&gt;3&lt;/code&gt; and, as a result, the method is returning &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;How can we modify the code on line 2 so that the method behaves in the expected way? We need to &lt;em&gt;update&lt;/em&gt; the value of our &lt;code&gt;num&lt;/code&gt; variable so that it&#39;s equal to the sum of itself and 2. Play around inside your Pry console: try code that you think will update &lt;code&gt;num&lt;/code&gt; as needed, then check the value of &lt;code&gt;num&lt;/code&gt; to see if it worked. Once you figure it out you can type &lt;code&gt;exit&lt;/code&gt; in your terminal to get out of Pry, update the code in your text editor, and rerun the test to verify it&#39;s passing. Be sure to remove the &lt;code&gt;binding.pry&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;It can take a little while to get the hang of using Pry, so don&#39;t worry if it&#39;s still a little confusing. As you start working with more complex methods and data structures, you&#39;ll find it can be a very helpful tool.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pry.github.io/&#34;&gt;Pry documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pry/pry/wiki&#34;&gt;Pry wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/elimerrell/debugging-with-pry-a-beginners-guide-3p99&#34;&gt;Debugging with Pry: A Beginner&#39;s Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>