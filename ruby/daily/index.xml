<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-13T01:37:59Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>turingschool-examples/each</title>
    <updated>2022-10-13T01:37:59Z</updated>
    <id>tag:github.com,2022-10-13:/turingschool-examples/each</id>
    <link href="https://github.com/turingschool-examples/each" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;each&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository was created as a resource for the BE Mod1 Lesson on &lt;code&gt;each&lt;/code&gt;. It can be used in conjunction with the &lt;code&gt;Exploring #each&lt;/code&gt; slide deck.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1Vn4CZC9eNFs7FCV6__V1WCKeY1dVJGj3etLGNfVDLU4/edit?usp=sharing&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You do not need to fork this repository unless you want a copy in your own Github account. For the purposes of the lesson, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Making it run&lt;/h2&gt; &#xA;&lt;p&gt;This repository has four folders. For the purposes of the lesson, the folder order is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vocabulary&lt;/li&gt; &#xA; &lt;li&gt;warm_up&lt;/li&gt; &#xA; &lt;li&gt;exercises&lt;/li&gt; &#xA; &lt;li&gt;practice&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In &lt;code&gt;exercises&lt;/code&gt; folder you will see the following files. For the purposes of the lesson, the file order is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;warm_up.rb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;using_each.rb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;transforming_elements.rb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;subset.rb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;create_new.rb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In each of the files you will have a &lt;code&gt;collection&lt;/code&gt; that you will write code for, implementing the &lt;code&gt;.each&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Below the &lt;code&gt;collection&lt;/code&gt; you will see commented out instructions on what you are trying to implement and the questions you will work to answer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;These files will not implement tests so you will need to use a &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;puts&lt;/code&gt; before the variable you want to output to your terminal.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;names = [&#34;bob&#34;, &#34;linda&#34;, &#34;joe&#34;, &#34;sally&#34;]&#xA;p names&#xA;&#xA;or&#xA;&#xA;names = [&#34;bob&#34;, &#34;linda&#34;, &#34;joe&#34;, &#34;sally&#34;]&#xA;&#xA;names.each do |name|&#xA;  puts name&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your terminal make sure that you &lt;code&gt;cd&lt;/code&gt; into the directory that you created and put your cloned repository into. Then &lt;code&gt;cd each&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your terminal you will follow this format to run the file and have it print:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ruby exercises/&amp;lt;name of file you want to run&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://backend.turing.edu/module1/lessons/each&#34;&gt;Turing Each Lesson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>inspec/inspec</title>
    <updated>2022-10-13T01:37:59Z</updated>
    <id>tag:github.com,2022-10-13:/inspec/inspec</id>
    <link href="https://github.com/inspec/inspec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;InSpec: Auditing and Testing Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chef InSpec: Inspect Your Infrastructure&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project State: Active&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Issues Response SLA: 14 business days&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pull Request Response SLA: 14 business days&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information on project states and SLAs, see &lt;a href=&#34;https://github.com/chef/chef-oss-practices/raw/main/repo-management/repo-states.md&#34;&gt;this documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://community-slack.chef.io/&#34;&gt;&lt;img src=&#34;https://community-slack.chef.io/badge.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/chef-oss/inspec-inspec-main-verify&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/bf4c5fdc3858cc9f8c8bab8376e8e40d625ad046df9d4d8619.svg?branch=main&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/inspec/inspec?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/inspec/inspec/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chef InSpec is an open-source testing framework for infrastructure with a human- and machine-readable language for specifying compliance, security and policy requirements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Disallow insecure protocols by testing&#xA;&#xA;describe package(&#39;telnetd&#39;) do&#xA;&amp;nbsp; it { should_not be_installed }&#xA;end&#xA;&#xA;describe inetd_conf do&#xA;&amp;nbsp; its(&#34;telnet&#34;) { should eq nil }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Chef InSpec makes it easy to run your tests wherever you need. More options are found in our &lt;a href=&#34;https://docs.chef.io/inspec/cli/&#34;&gt;CLI docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run test locally&#xA;inspec exec test.rb&#xA;&#xA;# run test on remote host via SSH&#xA;inspec exec test.rb -t ssh://user@hostname -i /path/to/key&#xA;&#xA;# run test on remote host using SSH agent private key authentication. Requires Chef InSpec 1.7.1&#xA;inspec exec test.rb -t ssh://user@hostname&#xA;&#xA;# run test on remote windows host via WinRM&#xA;inspec exec test.rb -t winrm://Administrator@windowshost --password &#39;your-password&#39;&#xA;&#xA;# run test on remote windows host via WinRM as a domain user&#xA;inspec exec test.rb -t winrm://windowshost --user &#39;UserName@domain&#39; --password &#39;your-password&#39;&#xA;&#xA;# run test on docker container&#xA;inspec exec test.rb -t docker://container_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in Compliance: Compliance no longer occurs at the end of the release cycle&lt;/li&gt; &#xA; &lt;li&gt;Targeted Tests: Chef InSpec writes tests that specifically target compliance issues&lt;/li&gt; &#xA; &lt;li&gt;Metadata: Includes the metadata required by security and compliance pros&lt;/li&gt; &#xA; &lt;li&gt;Easy Testing: Includes a command-line interface to run tests quickly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Chef InSpec requires Ruby ( &amp;gt;= 2.7 ).&lt;/p&gt; &#xA;&lt;p&gt;All currently supported versions of Chef InSpec (4.0 and later) require accepting the EULA to use. Please visit the &lt;a href=&#34;https://docs.chef.io/chef_license_accept.html&#34;&gt;license acceptance page&lt;/a&gt; on the Chef docs site for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Install as package&lt;/h3&gt; &#xA;&lt;p&gt;The Chef InSpec package is available for MacOS, RedHat, Ubuntu and Windows. Download the latest package at &lt;a href=&#34;https://www.chef.io/downloads/tools/inspec&#34;&gt;Chef InSpec Downloads&lt;/a&gt; or install Chef InSpec via script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# RedHat, Ubuntu, and macOS&#xA;curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec&#xA;&#xA;# Windows&#xA;. { iwr -useb https://omnitruck.chef.io/install.ps1 } | iex; install -project inspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install it via rubygems.org&lt;/h3&gt; &#xA;&lt;p&gt;Installing Chef InSpec from source may require installing ruby build tools to manage gem dependencies. (A compiler-free variant is available with reduced functionality; use &lt;code&gt;inspec-core-bin&lt;/code&gt; and &lt;code&gt;inspec-core&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;To install build tools, use your package manager.&lt;/p&gt; &#xA;&lt;p&gt;For CentOS/RedHat/Fedora:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum -y install ruby ruby-devel make gcc gcc-c++&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get -y install ruby ruby-dev gcc g++ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the &lt;code&gt;inspec&lt;/code&gt; executable, which requires accepting the &lt;a href=&#34;https://docs.chef.io/chef_license_accept.html&#34;&gt;Chef License&lt;/a&gt;, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install inspec-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also use &lt;code&gt;inspec&lt;/code&gt; as a library, with no executable. This does not require accepting the license. To install the library as a gem, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install inspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage via Docker&lt;/h3&gt; &#xA;&lt;p&gt;Download the image and define a function for convenience:&lt;/p&gt; &#xA;&lt;p&gt;For Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull chef/inspec&#xA;function inspec { docker run -it --rm -v $(pwd):/share chef/inspec &#34;$@&#34;; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Windows (PowerShell):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull chef/inspec&#xA;function inspec { docker run -it --rm -v &#34;$(pwd):/share&#34; chef/inspec $args; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you call &lt;code&gt;inspec&lt;/code&gt; from your shell, it automatically mounts the current directory into the Docker container. Therefore you can easily use local tests and key files. Note: Only files in the current directory and sub-directories are available within the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls -1&#xA;vagrant&#xA;test.rb&#xA;&#xA;$ inspec exec test.rb -t ssh://root@192.168.64.2:11022 -i vagrant&#xA;..&#xA;&#xA;Finished in 0.04321 seconds (files took 0.54917 seconds to load)&#xA;2 examples, 0 failures&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install it from source&lt;/h3&gt; &#xA;&lt;p&gt;Note that installing from OS packages from &lt;a href=&#34;https://www.chef.io/downloads/tools/inspec&#34;&gt;the download page&lt;/a&gt; is the preferred method.&lt;/p&gt; &#xA;&lt;p&gt;That requires &lt;a href=&#34;http://bundler.io/&#34;&gt;bundler&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install&#xA;bundle exec inspec help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install it as a gem locally, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem build inspec.gemspec&#xA;gem install inspec-*.gem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you need to install &lt;a href=&#34;http://rubyinstaller.org/downloads/&#34;&gt;Ruby&lt;/a&gt; with &lt;a href=&#34;https://github.com/oneclick/rubyinstaller/wiki/Development-Kit&#34;&gt;Ruby Development Kit&lt;/a&gt; to build dependencies with its native extensions.&lt;/p&gt; &#xA;&lt;h3&gt;Install via Chef Habitat&lt;/h3&gt; &#xA;&lt;p&gt;Currently, this method of installation only supports Linux. See the &lt;a href=&#34;https://www.habitat.sh/&#34;&gt;Chef Habitat site&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Download the &lt;code&gt;hab&lt;/code&gt; binary from the &lt;a href=&#34;https://www.habitat.sh/docs/get-habitat/&#34;&gt;Chef Habitat&lt;/a&gt; site.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hab pkg install chef/inspec --binlink&#xA;&#xA;inspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Chef InSpec&lt;/h3&gt; &#xA;&lt;p&gt;You should now be able to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ inspec --help&#xA;Commands:&#xA;  inspec archive PATH                                       # archive a profile to tar.gz (default) ...&#xA;  inspec check PATH                                         # verify all tests at the specified PATH&#xA;  inspec automate SUBCOMMAND ...                            # Chef Automate commands&#xA;  inspec compliance SUBCOMMAND ...                          # Chef Automate commands (backwards compatible alias)&#xA;  inspec detect                                             # detect the target OS&#xA;  inspec exec PATH(S)                                       # run all test files at the specified PATH.&#xA;  inspec help [COMMAND]                                     # Describe available commands or one spe...&#xA;  inspec init TEMPLATE ...                                  # Scaffolds a new project&#xA;  inspec json PATH                                          # read all tests in PATH and generate a ...&#xA;  inspec shell                                              # open an interactive debugging shell&#xA;  inspec supermarket SUBCOMMAND ...                         # Supermarket commands&#xA;  inspec version                                            # prints the version of this tool&#xA;&#xA;Options:&#xA;  [--diagnose], [--no-diagnose]  # Show diagnostics (versions, configurations)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only accept requests on secure ports - This test ensures that a web server is only listening on well-secured ports.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe port(80) do&#xA;&amp;nbsp; it { should_not be_listening }&#xA;end&#xA;&#xA;describe port(443) do&#xA;&amp;nbsp; it { should be_listening }&#xA;&amp;nbsp; its(&#39;protocols&#39;) {should include &#39;tcp&#39;}&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test your &lt;code&gt;kitchen.yml&lt;/code&gt; file to verify that only Vagrant is configured as the driver. The %w() formatting will pass rubocop linting and allow you to access nested mappings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe yaml(&#39;.kitchen.yml&#39;) do&#xA;  its(%w(driver name)) { should eq(&#39;vagrant&#39;) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also have a look at our examples for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chef/inspec/tree/main/examples/kitchen-chef&#34;&gt;Using Chef InSpec with Test Kitchen &amp;amp; Chef Infra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chef/inspec/tree/main/examples/kitchen-puppet&#34;&gt;Using Chef InSpec with Test Kitchen &amp;amp; Puppet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chef/inspec/tree/main/examples/kitchen-ansible&#34;&gt;Using Chef InSpec with Test Kitchen &amp;amp; Ansible&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chef/inspec/tree/main/examples/profile&#34;&gt;Implementing an Chef InSpec profile&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Or tests: Testing for a OR b&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using describe.one, you can test for a or b. The control will be marked as passing if EITHER condition is met.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;control &#39;or-test&#39; do&#xA;  impact 1.0&#xA;  title &#39;This is a OR test&#39;&#xA;  describe.one do&#xA;    describe ssh_config do&#xA;      its(&#39;Protocol&#39;) { should eq(&#39;3&#39;) }&#xA;    end&#xA;    describe ssh_config do&#xA;      its(&#39;Protocol&#39;) { should eq(&#39;2&#39;) }&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command Line Usage&lt;/h2&gt; &#xA;&lt;h3&gt;exec&lt;/h3&gt; &#xA;&lt;p&gt;Run tests against different targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run test locally&#xA;inspec exec test.rb&#xA;&#xA;# run test on remote host on SSH&#xA;inspec exec test.rb -t ssh://user@hostname&#xA;&#xA;# run test on remote windows host on WinRM&#xA;inspec exec test.rb -t winrm://Administrator@windowshost --password &#39;your-password&#39;&#xA;&#xA;# run test on docker container&#xA;inspec exec test.rb -t docker://container_id&#xA;&#xA;# run test on podman container&#xA;inspec exec test.rb -t podman://container_id --podman-url &#34;unix:///run/user/1000/podman/podman.sock&#34;&#xA;&#xA;# run with sudo&#xA;inspec exec test.rb --sudo [--sudo-password ...] [--sudo-options ...] [--sudo_command ...]&#xA;&#xA;# run in a subshell&#xA;inspec exec test.rb --shell [--shell-options ...] [--shell-command ...]&#xA;&#xA;# run a profile targeting AWS using env vars&#xA;inspec exec test.rb -t aws://&#xA;&#xA;# or store your AWS credentials in your ~/.aws/credentials profiles file&#xA;inspec exec test.rb -t aws://us-east-2/my-profile&#xA;&#xA;# run a profile targeting Azure using env vars&#xA;inspec exec test.rb -t azure://&#xA;&#xA;# or store your Azure credentials in your ~/.azure/credentials profiles file&#xA;inspec exec test.rb -t azure://subscription_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;detect&lt;/h3&gt; &#xA;&lt;p&gt;Verify your configuration and detect&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;id=$( docker run -dti ubuntu:14.04 /bin/bash )&#xA;inspec detect -t docker://$id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will provide you with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;family&#34;:&#34;ubuntu&#34;,&#34;release&#34;:&#34;14.04&#34;,&#34;arch&#34;:null}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported OS&lt;/h2&gt; &#xA;&lt;p&gt;Remote Targets&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Versions&lt;/th&gt; &#xA;   &lt;th&gt;Architectures&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AIX&lt;/td&gt; &#xA;   &lt;td&gt;6.1, 7.1, 7.2&lt;/td&gt; &#xA;   &lt;td&gt;ppc64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CentOS&lt;/td&gt; &#xA;   &lt;td&gt;6, 7, 8&lt;/td&gt; &#xA;   &lt;td&gt;i386, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian&lt;/td&gt; &#xA;   &lt;td&gt;9, 10&lt;/td&gt; &#xA;   &lt;td&gt;i386, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;9, 10, 11&lt;/td&gt; &#xA;   &lt;td&gt;i386, amd64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;10.14, 10.15, 11.0&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Oracle Enterprise Linux&lt;/td&gt; &#xA;   &lt;td&gt;6, 7, 8&lt;/td&gt; &#xA;   &lt;td&gt;i386, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Red Hat Enterprise Linux&lt;/td&gt; &#xA;   &lt;td&gt;6, 7, 8&lt;/td&gt; &#xA;   &lt;td&gt;i386, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solaris&lt;/td&gt; &#xA;   &lt;td&gt;10, 11&lt;/td&gt; &#xA;   &lt;td&gt;sparc, x86&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows*&lt;/td&gt; &#xA;   &lt;td&gt;8, 8.1, 10, 2012, 2012R2, 2016, 2019&lt;/td&gt; &#xA;   &lt;td&gt;x86, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUSE Linux Enterprise Server&lt;/td&gt; &#xA;   &lt;td&gt;12, 15&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scientific Linux&lt;/td&gt; &#xA;   &lt;td&gt;6, 7&lt;/td&gt; &#xA;   &lt;td&gt;i386, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenSUSE&lt;/td&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OmniOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gentoo Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HP-UX&lt;/td&gt; &#xA;   &lt;td&gt;11.31&lt;/td&gt; &#xA;   &lt;td&gt;ia64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;*&lt;em&gt;For Windows, PowerShell 5.0 or above is required.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In addition, runtime support is provided for:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Versions&lt;/th&gt; &#xA;   &lt;th&gt;Arch&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;10.14+&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian&lt;/td&gt; &#xA;   &lt;td&gt;9, 10&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RHEL&lt;/td&gt; &#xA;   &lt;td&gt;6, 7, 8&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt;29+&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;16.04+&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;8+&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;2012+&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.chef.io/inspec/&#34;&gt;https://docs.chef.io/inspec/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.chef.io/inspec/resources/&#34;&gt;https://docs.chef.io/inspec/resources/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/inspec/inspec/tree/main/docs-chef-io&#34;&gt;https://github.com/inspec/inspec/tree/main/docs-chef-io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn Chef:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.chef.io/products/chef-inspec/#learn&#34;&gt;https://community.chef.io/products/chef-inspec/#learn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Relationship to other tools (RSpec, Serverspec):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.chef.io/inspec/inspec_and_friends/&#34;&gt;https://docs.chef.io/inspec/inspec_and_friends/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Share your Profiles&lt;/h2&gt; &#xA;&lt;p&gt;You may share your Chef InSpec Profiles in the &lt;a href=&#34;https://supermarket.chef.io/tools-directory&#34;&gt;Tools &amp;amp; Plugins section&lt;/a&gt; of the &lt;a href=&#34;https://supermarket.chef.io/&#34;&gt;Chef Supermarket&lt;/a&gt;. &lt;a href=&#34;https://supermarket.chef.io/sign-in&#34;&gt;Sign in&lt;/a&gt; and &lt;a href=&#34;https://supermarket.chef.io/tools/new&#34;&gt;add the details of your profile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also &lt;a href=&#34;https://supermarket.chef.io/tools?type=compliance_profile&#34;&gt;browse the Supermarket for shared Compliance Profiles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Kudos&lt;/h2&gt; &#xA;&lt;p&gt;Chef InSpec was originally created by Christoph Hartmann (&lt;a href=&#34;https://github.com/chris-rock&#34;&gt;@chris-rock&lt;/a&gt;) and Dominik Richter (&lt;a href=&#34;https://github.com/arlimus&#34;&gt;@arlimus&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Chef InSpec is inspired by the wonderful &lt;a href=&#34;http://serverspec.org&#34;&gt;Serverspec&lt;/a&gt; project. Kudos to &lt;a href=&#34;https://github.com/mizzy&#34;&gt;mizzy&lt;/a&gt; and &lt;a href=&#34;https://github.com/mizzy/serverspec/graphs/contributors&#34;&gt;all contributors&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;The AWS resources were inspired by &lt;a href=&#34;https://github.com/arothian/inspec-aws&#34;&gt;inspec-aws&lt;/a&gt; from &lt;a href=&#34;https://github.com/arothian&#34;&gt;arothian&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (git checkout -b my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (git commit -am &#39;Add some feature&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (git push origin my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The Chef InSpec community and maintainers are very active and helpful. This project benefits greatly from this activity.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to chat with the community and maintainers directly join us in the &lt;code&gt;#inspec&lt;/code&gt; channel on the &lt;a href=&#34;http://community-slack.chef.io/&#34;&gt;Chef Community Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As a reminder, all participants are expected to follow the &lt;a href=&#34;https://github.com/inspec/inspec/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://community-slack.chef.io/&#34;&gt;&lt;img src=&#34;https://community-slack.chef.io/badge.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing Chef InSpec&lt;/h2&gt; &#xA;&lt;p&gt;We offer &lt;code&gt;unit&lt;/code&gt; and &lt;code&gt;integration&lt;/code&gt; tests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;unit&lt;/code&gt; tests ensure the intended behaviour of the implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;integration&lt;/code&gt; tests run against Docker-based VMs via test-kitchen and &lt;a href=&#34;https://github.com/chef/kitchen-inspec&#34;&gt;kitchen-inspec&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unit tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you like to run only one test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec m test/unit/resources/user_test.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also run a single test within a file by line number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec m test/unit/resources/user_test.rb -l 123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration tests&lt;/h3&gt; &#xA;&lt;p&gt;These tests download various virtual machines, to ensure Chef InSpec is working as expected across different operating systems.&lt;/p&gt; &#xA;&lt;p&gt;These tests require the following gems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;test-kitchen&lt;/li&gt; &#xA; &lt;li&gt;kitchen-dokken&lt;/li&gt; &#xA; &lt;li&gt;kitchen-inspec&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These gems are provided via the &lt;code&gt;integration&lt;/code&gt; group in the project&#39;s Gemfile.&lt;/p&gt; &#xA;&lt;p&gt;In addition, these test require Docker to be available on your machine or a remote Docker machine configured via the standard Docker environment variables.&lt;/p&gt; &#xA;&lt;h4&gt;Running Integration tests&lt;/h4&gt; &#xA;&lt;p&gt;List the various test instances available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;KITCHEN_YAML=kitchen.dokken.yml bundle exec kitchen list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The platforms and test suites are configured in the &lt;code&gt;kitchen.dokken.yml&lt;/code&gt; file. Once you know which instance you wish to test, test that instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;KITCHEN_YAML=kitchen.dokken.yml bundle exec kitchen test &amp;lt;INSTANCE_NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may test all instances in parallel with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;KITCHEN_YAML=kitchen.dokken.yml bundle exec kitchen test -c 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Author:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dominik Richter (&lt;a href=&#34;mailto:drichter@chef.io&#34;&gt;drichter@chef.io&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Author:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Christoph Hartmann (&lt;a href=&#34;mailto:chartmann@chef.io&#34;&gt;chartmann@chef.io&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Copyright:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copyright (c) 2015 Vulcano Security GmbH.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Copyright:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copyright (c) 2017-2020 Chef Software Inc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Copyright:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copyright (c) 2020-2022 Progress Software Corp.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;License:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apache License, Version 2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;License:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chef End User License Agreement&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Chef InSpec is distributed under the Apache License, Version 2.0. Permission to use the software is governed by the &lt;a href=&#34;https://docs.chef.io/chef_license_accept.html&#34;&gt;Chef EULA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>