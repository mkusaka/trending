<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-11T01:34:47Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>glebm/i18n-tasks</title>
    <updated>2024-06-11T01:34:47Z</updated>
    <id>tag:github.com,2024-06-11:/glebm/i18n-tasks</id>
    <link href="https://github.com/glebm/i18n-tasks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Manage translation and localization with static analysis, for Ruby i18n&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;i18n-tasks &lt;a href=&#34;https://github.com/glebm/i18n-tasks/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/glebm/i18n-tasks/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/glebm/i18n-tasks&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/5d173e90ada8df07cedc/test_coverage&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/glebm/i18n-tasks?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stand-with-ukraine.pp.ua/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;Stand With Ukraine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;i18n-tasks helps you find and manage missing and unused translations.&lt;/p&gt; &#xA;&lt;img width=&#34;539&#34; height=&#34;331&#34; src=&#34;https://i.imgur.com/XZBd8l7.png&#34;&gt; &#xA;&lt;p&gt;This gem analyses code statically for key usages, such as &lt;code&gt;I18n.t(&#39;some.key&#39;)&lt;/code&gt;, in order to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report keys that are missing or unused.&lt;/li&gt; &#xA; &lt;li&gt;Pre-fill missing keys, optionally from Google Translate or DeepL Pro.&lt;/li&gt; &#xA; &lt;li&gt;Remove unused keys.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thus addressing the two main problems of &lt;a href=&#34;https://github.com/svenfuchs/i18n&#34; title=&#34;svenfuchs/i18n on Github&#34;&gt;i18n gem&lt;/a&gt; design:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Missing keys only blow up at runtime.&lt;/li&gt; &#xA; &lt;li&gt;Keys no longer in use may accumulate and introduce overhead, without you knowing it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;i18n-tasks can be used with any project using the ruby &lt;a href=&#34;https://github.com/svenfuchs/i18n&#34; title=&#34;svenfuchs/i18n on Github&#34;&gt;i18n gem&lt;/a&gt; (default in Rails).&lt;/p&gt; &#xA;&lt;p&gt;Add i18n-tasks to the Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;i18n-tasks&#39;, &#39;~&amp;gt; 1.0.14&#39;, group: :development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the default &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#configuration&#34;&gt;configuration file&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cp $(i18n-tasks gem-path)/templates/config/i18n-tasks.yml config/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy rspec test to test for missing and unused translations as part of the suite (optional):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cp $(i18n-tasks gem-path)/templates/rspec/i18n_spec.rb spec/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for minitest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cp $(i18n-tasks gem-path)/templates/minitest/i18n_test.rb test/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;bundle exec i18n-tasks&lt;/code&gt; to get the list of all the tasks with short descriptions.&lt;/p&gt; &#xA;&lt;h3&gt;Check health&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;i18n-tasks health&lt;/code&gt; checks if any keys are missing or not used, that interpolations variables are consistent across locales, and that all the locale files are normalized (auto-formatted):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks health&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add missing keys&lt;/h3&gt; &#xA;&lt;p&gt;Add missing keys with placeholders (base value or humanized key):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks add-missing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This and other tasks accept arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks add-missing -v &#39;TRME %{value}&#39; fr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pass &lt;code&gt;--help&lt;/code&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks add-missing --help&#xA;Usage: i18n-tasks add-missing [options] [locale ...]&#xA;    -l, --locales  Comma-separated list of locale(s) to process. Default: all. Special: base.&#xA;    -f, --format   Output format: terminal-table, yaml, json, keys, inspect. Default: terminal-table.&#xA;    -v, --value    Value. Interpolates: %{value}, %{human_key}, %{value_or_human_key}, %{key}. Default: %{value_or_human_key}.&#xA;    -h, --help     Display this help message.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Translate Missing Keys&lt;/h3&gt; &#xA;&lt;p&gt;Translate missing keys using a backend service of your choice.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks translate-missing&#xA;&#xA;# accepts backend, from and locales options&#xA;$ i18n-tasks translate-missing --from=base es fr --backend=google&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available backends:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;google&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#google-translation-config&#34;&gt;Google Translate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deepl&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#deepl-translation-config&#34;&gt;DeepL Pro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yandex&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#yandex-translation-config&#34;&gt;Yandex Translate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;openai&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#openai-translation-config&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Find usages&lt;/h3&gt; &#xA;&lt;p&gt;See where the keys are used with &lt;code&gt;i18n-tasks find&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ i18n-tasks find common.help&#xA;$ i18n-tasks find &#39;auth.*&#39;&#xA;$ i18n-tasks find &#39;{number,currency}.format.*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;437&#34; height=&#34;129&#34; src=&#34;https://i.imgur.com/VxBrSfY.png&#34;&gt; &#xA;&lt;h3&gt;Remove unused keys&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ i18n-tasks unused&#xA;$ i18n-tasks remove-unused&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These tasks can infer &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#dynamic-keys&#34;&gt;dynamic keys&lt;/a&gt; such as &lt;code&gt;t(&#34;category.\#{category.name}&#34;)&lt;/code&gt; if you set &lt;code&gt;search.strict&lt;/code&gt; to false, or pass &lt;code&gt;--no-strict&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;p&gt;If you want to keep the ordering from the original language file when using remove-unused, pass &lt;code&gt;-k&lt;/code&gt; or &lt;code&gt;--keep-order&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Normalize data&lt;/h3&gt; &#xA;&lt;p&gt;Sort the keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks normalize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sort the keys, and move them to the respective files as defined by &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#multiple-locale-files&#34;&gt;&lt;code&gt;config.write&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks normalize -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Move / rename / merge keys&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;i18n-tasks mv &amp;lt;pattern&amp;gt; &amp;lt;target&amp;gt;&lt;/code&gt; is a versatile task to move or delete keys matching the given pattern.&lt;/p&gt; &#xA;&lt;p&gt;All nodes (leafs or subtrees) matching &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#key-pattern-syntax&#34;&gt;&lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;&lt;/a&gt; are merged together and moved to &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Rename a node (leaf or subtree):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks mv user account&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Move a node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks mv user_alerts user.alerts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Move the children one level up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks mv &#39;alerts.{:}&#39; &#39;\1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Merge-move multiple nodes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks mv &#39;{user,profile}&#39; account&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Merge (non-leaf) nodes into parent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks mv &#39;{pages}.{a,b}&#39; &#39;\1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete keys&lt;/h3&gt; &#xA;&lt;p&gt;Delete the keys by using the &lt;code&gt;rm&lt;/code&gt; task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks rm &#39;user.{old_profile,old_title}&#39; another_key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compose tasks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;i18n-tasks&lt;/code&gt; also provides composable tasks for reading, writing and manipulating locale data. Examples below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;add-missing&lt;/code&gt; implemented with &lt;code&gt;missing&lt;/code&gt;, &lt;code&gt;tree-set-value&lt;/code&gt; and &lt;code&gt;data-merge&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks missing -f yaml fr | i18n-tasks tree-set-value &#39;TRME %{value}&#39; | i18n-tasks data-merge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;remove-unused&lt;/code&gt; implemented with &lt;code&gt;unused&lt;/code&gt; and &lt;code&gt;data-remove&lt;/code&gt; (sans the confirmation):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks unused -f yaml | i18n-tasks data-remove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove all keys from &lt;code&gt;fr&lt;/code&gt; that do not exist in &lt;code&gt;en&lt;/code&gt;. Do not change &lt;code&gt;en&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ i18n-tasks missing -t diff -f yaml en | i18n-tasks tree-mv en fr | i18n-tasks data-remove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the full list of tasks with &lt;code&gt;i18n-tasks --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Features and limitations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;i18n-tasks&lt;/code&gt; uses an AST scanner for &lt;code&gt;.rb&lt;/code&gt; and &lt;code&gt;.html.erb&lt;/code&gt; files, and a regexp-based scanner for other files, such as &lt;code&gt;.haml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Relative keys&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;i18n-tasks&lt;/code&gt; offers support for relative keys, such as &lt;code&gt;t &#39;.title&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;✔ Keys relative to the file path they are used in (see &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#usage-search&#34;&gt;relative roots configuration&lt;/a&gt;) are supported.&lt;/p&gt; &#xA;&lt;p&gt;✔ Keys relative to &lt;code&gt;controller.action_name&lt;/code&gt; in Rails controllers are supported. The closest &lt;code&gt;def&lt;/code&gt; name is used.&lt;/p&gt; &#xA;&lt;h4&gt;Plural keys&lt;/h4&gt; &#xA;&lt;p&gt;✔ Plural keys, such as &lt;code&gt;key.{one,many,other,...}&lt;/code&gt; are fully supported.&lt;/p&gt; &#xA;&lt;h4&gt;Reference keys&lt;/h4&gt; &#xA;&lt;p&gt;✔ Reference keys (keys with &lt;code&gt;:symbol&lt;/code&gt; values) are fully supported. These keys are copied as-is in &lt;code&gt;add/translate-missing&lt;/code&gt;, and can be looked up by reference or value in &lt;code&gt;find&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;t()&lt;/code&gt; keyword arguments&lt;/h4&gt; &#xA;&lt;p&gt;✔ &lt;code&gt;scope&lt;/code&gt; keyword argument is fully supported by the AST scanner, and also by the Regexp scanner but only when it is the first argument.&lt;/p&gt; &#xA;&lt;p&gt;✔ &lt;code&gt;default&lt;/code&gt; argument can be used to pre-fill locale files (AST scanner only).&lt;/p&gt; &#xA;&lt;h4&gt;Dynamic keys&lt;/h4&gt; &#xA;&lt;p&gt;By default, dynamic keys such as &lt;code&gt;t &#34;cats.#{cat}.name&#34;&lt;/code&gt; are not recognized. I encourage you to mark these with &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#fine-tuning&#34;&gt;i18n-tasks-use hints&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can enable dynamic key inference by setting &lt;code&gt;search.strict&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in the config. In this case, all the dynamic parts of the key will be considered used, e.g. &lt;code&gt;cats.tenderlove.name&lt;/code&gt; would not be reported as unused. Note that only one section of the key is treated as a wildcard for each string interpolation; i.e. in this example, &lt;code&gt;cats.tenderlove.special.name&lt;/code&gt; &lt;em&gt;will&lt;/em&gt; be reported as unused.&lt;/p&gt; &#xA;&lt;h4&gt;I18n.localize&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;I18n.localize&lt;/code&gt; is not supported, use &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/#fine-tuning&#34;&gt;i18n-tasks-use hints&lt;/a&gt;. This is because the key generated by &lt;code&gt;I18n.localize&lt;/code&gt; depends on the type of the object passed in and thus cannot be inferred statically.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Configuration is read from &lt;code&gt;config/i18n-tasks.yml&lt;/code&gt; or &lt;code&gt;config/i18n-tasks.yml.erb&lt;/code&gt;. Inspect the configuration with &lt;code&gt;i18n-tasks config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install the &lt;a href=&#34;https://github.com/glebm/i18n-tasks/raw/main/templates/config/i18n-tasks.yml&#34;&gt;default config file&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cp $(i18n-tasks gem-path)/templates/config/i18n-tasks.yml config/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Settings are compatible with Rails by default.&lt;/p&gt; &#xA;&lt;h3&gt;Locales&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;base_locale&lt;/code&gt; is set to &lt;code&gt;en&lt;/code&gt; and &lt;code&gt;locales&lt;/code&gt; are inferred from the paths to data files. You can override these in the &lt;a href=&#34;https://github.com/glebm/i18n-tasks/raw/main/templates/config/i18n-tasks.yml&#34;&gt;config&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Storage&lt;/h3&gt; &#xA;&lt;p&gt;The default data adapter supports YAML and JSON files.&lt;/p&gt; &#xA;&lt;h4&gt;Multiple locale files&lt;/h4&gt; &#xA;&lt;p&gt;i18n-tasks can manage multiple translation files and read translations from other gems. To find out more see the &lt;code&gt;data&lt;/code&gt; options in the &lt;a href=&#34;https://github.com/glebm/i18n-tasks/raw/main/templates/config/i18n-tasks.yml&#34;&gt;config&lt;/a&gt;. NB: By default, only &lt;code&gt;%{locale}.yml&lt;/code&gt; files are read, not &lt;code&gt;namespace.%{locale}.yml&lt;/code&gt;. Make sure to check the config.&lt;/p&gt; &#xA;&lt;p&gt;For writing to locale files i18n-tasks provides 2 options.&lt;/p&gt; &#xA;&lt;h5&gt;Pattern router&lt;/h5&gt; &#xA;&lt;p&gt;Pattern router organizes keys based on a list of key patterns, as in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data:&#xA;  router: pattern_router&#xA;  # a list of {key pattern =&amp;gt; file} routes, matched top to bottom&#xA;  write:&#xA;    # write models.* and views.* keys to the respective files&#xA;    - [&#39;{models,views}.*&#39;, &#39;config/locales/\1.%{locale}.yml&#39;]&#xA;    # or, write every top-level key namespace to its own file&#xA;    - [&#39;{:}.*&#39;, &#39;config/locales/\1.%{locale}.yml&#39;]&#xA;    # default, sugar for [&#39;*&#39;, path]&#xA;    - &#39;config/locales/%{locale}.yml&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Conservative router&lt;/h5&gt; &#xA;&lt;p&gt;Conservative router keeps the keys where they are found, or infers the path from base locale. If the key is completely new, conservative router will fall back to pattern router behaviour. Conservative router is the &lt;strong&gt;default&lt;/strong&gt; router.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data:&#xA;  router: conservative_router&#xA;  write:&#xA;    - [&#39;devise.*&#39;, &#39;config/locales/devise.%{locale}.yml&#39;]&#xA;    - &#39;config/locales/%{locale}.yml&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to have i18n-tasks reorganize your existing keys using &lt;code&gt;data.write&lt;/code&gt;, either set the router to &lt;code&gt;pattern_router&lt;/code&gt; as above, or run &lt;code&gt;i18n-tasks normalize -p&lt;/code&gt; (forcing the use of the pattern router for that run).&lt;/p&gt; &#xA;&lt;h5&gt;Isolating router&lt;/h5&gt; &#xA;&lt;p&gt;Isolating router assumes each YAML file is independent and can contain similar keys.&lt;/p&gt; &#xA;&lt;p&gt;As a result, the translations are written to an alternate target file for each source file (only the &lt;code&gt;%{locale}&lt;/code&gt; part is changed to match target locale). Thus, it is not necessary to specify any &lt;code&gt;write&lt;/code&gt; configuration (in fact, it would be completely ignored).&lt;/p&gt; &#xA;&lt;p&gt;This can be useful for example when using &lt;a href=&#34;https://viewcomponent.org/guide/translations.html&#34;&gt;ViewComponent sidecars&lt;/a&gt; (ViewComponent assigns an implicit scope to each sidecar YAML file but &lt;code&gt;i18n-tasks&lt;/code&gt; is not aware of that logic, resulting in collisions):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;app/components/movies_component.en.yml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  title: Movies&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;app/components/games_component.en.yml&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  title: Games&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This router has a limitation, though: it does not support detecting missing keys from code usage (since it is not aware of the implicit scope logic).&lt;/p&gt; &#xA;&lt;h5&gt;Key pattern syntax&lt;/h5&gt; &#xA;&lt;p&gt;A special syntax similar to file glob patterns is used throughout i18n-tasks to match translation keys:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;syntax&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;matches everything&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;:&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;matches a single key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;*:&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;matches part of a single key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;{a, b.c}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;match any in set, can use &lt;code&gt;:&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, match is captured&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example of usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle exec i18n-tasks mv &#34;{:}.contents.{*}_body&#34; &#34;\1.attributes.\2.body&#34;&#xA;&#xA;car.contents.name_body ⮕ car.attributes.name.body&#xA;car.contents.description_body ⮕ car.attributes.description.body&#xA;truck.contents.name_body ⮕ truck.attributes.name.body&#xA;truck.contents.description_body ⮕ truck.attributes.description.body&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom adapters&lt;/h4&gt; &#xA;&lt;p&gt;If you store data somewhere but in the filesystem, e.g. in the database or mongodb, you can implement a custom adapter. If you have implemented a custom adapter please share it on &lt;a href=&#34;https://github.com/glebm/i18n-tasks/wiki&#34; title=&#34;i18n-tasks wiki&#34;&gt;the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage search&lt;/h3&gt; &#xA;&lt;p&gt;i18n-tasks uses an AST scanner for &lt;code&gt;.rb&lt;/code&gt; and &lt;code&gt;.html.erb&lt;/code&gt; files, and a regexp scanner for all other files. New scanners can be added easily: please refer to &lt;a href=&#34;https://github.com/glebm/i18n-tasks/wiki/A-custom-scanner-example&#34;&gt;this example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;search&lt;/code&gt; section in the &lt;a href=&#34;https://github.com/glebm/i18n-tasks/raw/main/templates/config/i18n-tasks.yml&#34;&gt;config file&lt;/a&gt; for all available configuration options. NB: By default, only the &lt;code&gt;app/&lt;/code&gt; directory is searched.&lt;/p&gt; &#xA;&lt;h3&gt;Fine-tuning&lt;/h3&gt; &#xA;&lt;p&gt;Add hints to static analysis with magic comment hints (lines starting with &lt;code&gt;(#|/) i18n-tasks-use&lt;/code&gt; by default):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# i18n-tasks-use t(&#39;activerecord.models.user&#39;) # let i18n-tasks know the key is used&#xA;User.model_name.human&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also explicitly ignore keys appearing in locale files via &lt;code&gt;ignore*&lt;/code&gt; settings.&lt;/p&gt; &#xA;&lt;p&gt;If you have helper methods that generate translation keys, such as a &lt;code&gt;page_title&lt;/code&gt; method that returns &lt;code&gt;t &#39;.page_title&#39;&lt;/code&gt;, or a &lt;code&gt;Spree.t(key)&lt;/code&gt; method that returns &lt;code&gt;t &#34;spree.#{key}&#34;&lt;/code&gt;, use the built-in &lt;code&gt;PatternMapper&lt;/code&gt; to map these.&lt;/p&gt; &#xA;&lt;p&gt;For more complex cases, you can implement a &lt;a href=&#34;https://github.com/glebm/i18n-tasks/wiki/A-custom-scanner-example&#34;&gt;custom scanner&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/glebm/i18n-tasks/raw/main/templates/config/i18n-tasks.yml&#34;&gt;config file&lt;/a&gt; to find out more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;google-translation-config&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Google Translate&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;i18n-tasks translate-missing&lt;/code&gt; requires a Google Translate API key, get it at &lt;a href=&#34;https://code.google.com/apis/console&#34;&gt;Google API Console&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Where this key is depends on your Google API console:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Old console: API Access -&amp;gt; Simple API Access -&amp;gt; Key for server apps.&lt;/li&gt; &#xA; &lt;li&gt;New console: Nav Menu -&amp;gt; APIs &amp;amp; Services -&amp;gt; Credentials -&amp;gt; Create Credentials -&amp;gt; API Keys -&amp;gt; Restrict Key -&amp;gt; Cloud Translation API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In both cases, you may need to create the key if it doesn&#39;t exist.&lt;/p&gt; &#xA;&lt;p&gt;Put the key in &lt;code&gt;GOOGLE_TRANSLATE_API_KEY&lt;/code&gt; environment variable or in the config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/i18n-tasks.yml&#xA;translation:&#xA;  backend: google&#xA;  google_translate_api_key: &amp;lt;Google Translate API key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or via environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GOOGLE_TRANSLATE_API_KEY=&amp;lt;Google Translate API key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;deepl-translation-config&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;DeepL Pro Translate&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;i18n-tasks translate-missing&lt;/code&gt; requires a DeepL Pro API key, get it at &lt;a href=&#34;https://www.deepl.com/pro&#34;&gt;DeepL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/i18n-tasks.yml&#xA;translation:&#xA;  backend: deepl&#xA;  deepl_api_key: &amp;lt;DeepL Pro API key&amp;gt;&#xA;  deepl_host: &amp;lt;optional&amp;gt;&#xA;  deepl_version: &amp;lt;optional&amp;gt;&#xA;  deepl_glossary_ids:&#xA;    - f28106eb-0e06-489e-82c6-8215d6f95089&#xA;    - 2c6415be-1852-4f54-9e1b-d800463496b4&#xA;  deepl_options:&#xA;    formality: prefer_less&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or via environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DEEPL_API_KEY=&amp;lt;DeepL Pro API key&amp;gt;&#xA;DEEPL_HOST=&amp;lt;optional&amp;gt;&#xA;DEEPL_VERSION=&amp;lt;optional&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;yandex-translation-config&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Yandex Translate&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;i18n-tasks translate-missing&lt;/code&gt; requires a Yandex API key, get it at &lt;a href=&#34;https://tech.yandex.com/translate&#34;&gt;Yandex&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/i18n-tasks.yml&#xA;translation:&#xA;  backend: yandex&#xA;  yandex_api_key: &amp;lt;Yandex API key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or via environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;YANDEX_API_KEY=&amp;lt;Yandex API key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;openai-translation-config&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OpenAI Translate&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;i18n-tasks translate-missing&lt;/code&gt; requires a OpenAI API key, get it at &lt;a href=&#34;https://openai.com/&#34;&gt;OpenAI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/i18n-tasks.yml&#xA;translation:&#xA;  backend: openai&#xA;  openai_api_key: &amp;lt;OpenAI API key&amp;gt;&#xA;  openai_model: &amp;lt;optional&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or via environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OPENAI_API_KEY=&amp;lt;OpenAI API key&amp;gt;&#xA;OPENAI_MODEL=&amp;lt;optional&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contextual Rails Parser&lt;/h3&gt; &#xA;&lt;p&gt;There is an experimental feature to parse Rails with more context. &lt;code&gt;i18n-tasks&lt;/code&gt; will support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Translations called in &lt;code&gt;before_actions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Translations called in nested methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Model.human_attribute_name&lt;/code&gt; calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Model.model_name.human&lt;/code&gt; calls&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enabled it by adding the scanner in your &lt;code&gt;config/i18n-tasks.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;% I18n::Tasks.add_scanner( &#xA;  &#39;I18n::Tasks::Scanners::PrismScanner&#39;,&#xA;  only: %w(*.rb)&#xA;) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To only enable Ruby-scanning and not any Rails support, please add config under the &lt;code&gt;search&lt;/code&gt; section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;search:&#xA;  prism_visitor: &#34;ruby&#34; # default &#34;rails&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactive console&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;i18n-tasks irb&lt;/code&gt; starts an IRB session in i18n-tasks context. Type &lt;code&gt;guide&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Import / export to a CSV spreadsheet&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/glebm/i18n-tasks/wiki/Custom-CSV-import-and-export-tasks&#34;&gt;i18n-tasks wiki: CSV import and export tasks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Add new tasks&lt;/h2&gt; &#xA;&lt;p&gt;Tasks that come with the gem are defined in &lt;a href=&#34;https://raw.githubusercontent.com/glebm/i18n-tasks/main/lib/i18n/tasks/command/commands&#34;&gt;lib/i18n/tasks/command/commands&lt;/a&gt;. Custom tasks can be added easily, see the examples &lt;a href=&#34;https://github.com/glebm/i18n-tasks/wiki#custom-tasks&#34;&gt;on the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install dependencies using &lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run tests using &lt;code&gt;bundle exec rspec&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/sds/overcommit&#34;&gt;Overcommit&lt;/a&gt; by running &lt;code&gt;overcommit --install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Skip Overcommit-hooks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SKIP=RuboCop git commit&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OVERCOMMIT_DISABLE=1 git commit&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>