<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-26T01:44:01Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tilo/smarter_csv</title>
    <updated>2023-03-26T01:44:01Z</updated>
    <id>tag:github.com,2023-03-26:/tilo/smarter_csv</id>
    <link href="https://github.com/tilo/smarter_csv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby Gem for smarter importing of CSV Files as Array(s) of Hashes, with optional features for processing large files in parallel, embedded comments, unusual field- and record-separators, flexible mapping of CSV-headers to Hash-keys&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SmarterCSV&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/tilo/smarter_csv&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/tilo/smarter_csv/branch/main/graph/badge.svg?token=1L7OD80182&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/rb/smarter_csv&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/smarter_csv.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Development Branches&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;default branch is &lt;code&gt;main&lt;/code&gt; for 1.x development&lt;/li&gt; &#xA; &lt;li&gt;2.x development is on &lt;code&gt;2.0-development&lt;/code&gt; (check this branch for 2.0 documentation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Work towards Future Version 2.0&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work towards SmarterCSV 2.0 is still ongoing, with improved features, and more streamlined options, but consider it as experimental at this time. Please check the &lt;a href=&#34;https://github.com/tilo/smarter_csv/tree/2.0-develop&#34;&gt;2.0-develop branch&lt;/a&gt;, open any issues and pull requests with mention of tag v2.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;SmarterCSV 1.x [Current Version]&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;smarter_csv&lt;/code&gt; is a Ruby Gem for smarter importing of CSV Files as Array(s) of Hashes, suitable for direct processing with ActiveRecord, parallel processing, kicking-off batch jobs with Sidekiq, or oploading data to S3.&lt;/p&gt; &#xA;&lt;p&gt;The goals for SmarterCSV are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ease of use for handling most common CSV files without having to tweak options&lt;/li&gt; &#xA; &lt;li&gt;improve robustness of your code when you have no control over the quality of the CSV files which are processed&lt;/li&gt; &#xA; &lt;li&gt;formatting each row of data as a hash, in order to allow easy processing with ActiveRecord, parallel processing, kicking-off batch jobs with Sidekiq, or oploading data to S3.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Rescue from Exceptions&lt;/h4&gt; &#xA;&lt;p&gt;While SmarterCSV uses sensible defaults to process the most common CSV files, it will raise exceptions if it can not auto-detect &lt;code&gt;col_sep&lt;/code&gt;, &lt;code&gt;row_sep&lt;/code&gt;, or if it encounters other problems. Therefore, when calling &lt;code&gt;SmarterCSV.process&lt;/code&gt;, please rescue from &lt;code&gt;SmarterCSVException&lt;/code&gt;, and handle outliers according to your requirements.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter unusual CSV files, please follow the tips in the Troubleshooting section below. You can use the options below to accomodate for unusual formats.&lt;/p&gt; &#xA;&lt;h4&gt;Features&lt;/h4&gt; &#xA;&lt;p&gt;One &lt;code&gt;smarter_csv&lt;/code&gt; user wrote:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Best gem for CSV for us yet. [...] taking an import process from 7+ hours to about 3 minutes. [...] Smarter CSV was a big part and helped clean up our code ALOT&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;smarter_csv&lt;/code&gt; has lots of features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;able to process large CSV-files&lt;/li&gt; &#xA; &lt;li&gt;able to chunk the input from the CSV file to avoid loading the whole CSV file into memory&lt;/li&gt; &#xA; &lt;li&gt;return a Hash for each line of the CSV file, so we can quickly use the results for either creating MongoDB or ActiveRecord entries, or further processing with Resque&lt;/li&gt; &#xA; &lt;li&gt;able to pass a block to the &lt;code&gt;process&lt;/code&gt; method, so data from the CSV file can be directly processed (e.g. Resque.enqueue )&lt;/li&gt; &#xA; &lt;li&gt;allows to have a bit more flexible input format, where comments are possible, and col_sep,row_sep can be set to any character sequence, including control characters.&lt;/li&gt; &#xA; &lt;li&gt;able to re-map CSV &#34;column names&#34; to Hash-keys of your choice (normalization)&lt;/li&gt; &#xA; &lt;li&gt;able to ignore &#34;columns&#34; in the input (delete columns)&lt;/li&gt; &#xA; &lt;li&gt;able to eliminate nil or empty fields from the result hashes (default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE; This Gem is only for importing CSV files - writing of CSV files is not supported at this time.&lt;/p&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;p&gt;Ruby&#39;s CSV library&#39;s API is pretty old, and it&#39;s processing of CSV-files returning Arrays of Arrays feels &#39;very close to the metal&#39;. The output is not easy to use - especially not if you want to create database records or Sidekiq jobs with it. Another shortcoming is that Ruby&#39;s CSV library does not have good support for huge CSV-files, e.g. there is no support for &#39;chunking&#39; and/or parallel processing of the CSV-content (e.g. with Sidekiq).&lt;/p&gt; &#xA;&lt;p&gt;As the existing CSV libraries didn&#39;t fit my needs, I was writing my own CSV processing - specifically for use in connection with Rails ORMs like Mongoid, MongoMapper and ActiveRecord. In those ORMs you can easily pass a hash with attribute/value pairs to the create() method. The lower-level Mongo driver and Moped also accept larger arrays of such hashes to create a larger amount of records quickly with just one call. The same patterns are used when you pass data to Sidekiq jobs.&lt;/p&gt; &#xA;&lt;p&gt;For processing large CSV files it is essential to process them in chunks, so the memory impact is minimized.&lt;/p&gt; &#xA;&lt;h3&gt;How?&lt;/h3&gt; &#xA;&lt;p&gt;The two main choices you have in terms of how to call &lt;code&gt;SmarterCSV.process&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;calling &lt;code&gt;process&lt;/code&gt; with or without a block&lt;/li&gt; &#xA; &lt;li&gt;passing a &lt;code&gt;:chunk_size&lt;/code&gt; to the &lt;code&gt;process&lt;/code&gt; method, and processing the CSV-file in chunks, rather than in one piece.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default (since version 1.8.0), detection of the column and row separators is set to automatic &lt;code&gt;row_sep: :auto&lt;/code&gt;, &lt;code&gt;col_sep: :auto&lt;/code&gt;. This should make it easier to process any CSV files without having to examine the line endings or column separators.&lt;/p&gt; &#xA;&lt;p&gt;You can change the setting &lt;code&gt;:auto_row_sep_chars&lt;/code&gt; to only analyze the first N characters of the file (default is 500 characters); nil or 0 will check the whole file). You can also set the &lt;code&gt;:row_sep&lt;/code&gt; manually! Checkout Example 4 for unusual &lt;code&gt;:row_sep&lt;/code&gt; and &lt;code&gt;:col_sep&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;In case your CSV file is not being parsed correctly, try to examine it in a text editor. For closer inspection a tool like &lt;code&gt;hexdump&lt;/code&gt; can help find otherwise hidden control character or byte sequences like &lt;a href=&#34;https://en.wikipedia.org/wiki/Byte_order_mark&#34;&gt;BOMs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ hexdump -C spec/fixtures/bom_test_feff.csv&#xA;00000000  fe ff 73 6f 6d 65 5f 69  64 2c 74 79 70 65 2c 66  |..some_id,type,f|&#xA;00000010  75 7a 7a 62 6f 78 65 73  0d 0a 34 32 37 36 36 38  |uzzboxes..427668|&#xA;00000020  30 35 2c 7a 69 7a 7a 6c  65 73 2c 31 32 33 34 0d  |05,zizzles,1234.|&#xA;00000030  0a 33 38 37 35 39 31 35  30 2c 71 75 69 7a 7a 65  |.38759150,quizze|&#xA;00000040  73 2c 35 36 37 38 0d 0a                           |s,5678..|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Here are some examples to demonstrate the versatility of SmarterCSV.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;It is generally recommended to rescue &lt;code&gt;SmarterCSVException&lt;/code&gt; or it&#39;s sub-classes.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default SmarterCSV determines the &lt;code&gt;row_sep&lt;/code&gt; and &lt;code&gt;col_sep&lt;/code&gt; values automatically. In cases where the automatic detection fails, an exception will be raised, e.g. &lt;code&gt;NoColSepDetected&lt;/code&gt;. Rescuing from these exceptions will make sure that you don&#39;t miss processing CSV files, in case users upload CSV files with unexpected formats.&lt;/p&gt; &#xA;&lt;p&gt;In rare cases you may have to manually set these values, after going through the troubleshooting procedure described above.&lt;/p&gt; &#xA;&lt;h4&gt;Example 1a: How SmarterCSV processes CSV-files as array of hashes:&lt;/h4&gt; &#xA;&lt;p&gt;Please note how each hash contains only the keys for columns with non-null values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;     $ cat pets.csv&#xA;     first name,last name,dogs,cats,birds,fish&#xA;     Dan,McAllister,2,,,&#xA;     Lucy,Laweless,,5,,&#xA;     Miles,O&#39;Brian,,,,21&#xA;     Nancy,Homes,2,,1,&#xA;     $ irb&#xA;     &amp;gt; require &#39;smarter_csv&#39;&#xA;      =&amp;gt; true&#xA;     &amp;gt; pets_by_owner = SmarterCSV.process(&#39;/tmp/pets.csv&#39;)&#xA;      =&amp;gt; [ {:first_name=&amp;gt;&#34;Dan&#34;, :last_name=&amp;gt;&#34;McAllister&#34;, :dogs=&amp;gt;&#34;2&#34;},&#xA;           {:first_name=&amp;gt;&#34;Lucy&#34;, :last_name=&amp;gt;&#34;Laweless&#34;, :cats=&amp;gt;&#34;5&#34;},&#xA;           {:first_name=&amp;gt;&#34;Miles&#34;, :last_name=&amp;gt;&#34;O&#39;Brian&#34;, :fish=&amp;gt;&#34;21&#34;},&#xA;           {:first_name=&amp;gt;&#34;Nancy&#34;, :last_name=&amp;gt;&#34;Homes&#34;, :dogs=&amp;gt;&#34;2&#34;, :birds=&amp;gt;&#34;1&#34;}&#xA;         ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example 1b: How SmarterCSV processes CSV-files as chunks, returning arrays of hashes:&lt;/h4&gt; &#xA;&lt;p&gt;Please note how the returned array contains two sub-arrays containing the chunks which were read, each chunk containing 2 hashes. In case the number of rows is not cleanly divisible by &lt;code&gt;:chunk_size&lt;/code&gt;, the last chunk contains fewer hashes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;     &amp;gt; pets_by_owner = SmarterCSV.process(&#39;/tmp/pets.csv&#39;, {:chunk_size =&amp;gt; 2, :key_mapping =&amp;gt; {:first_name =&amp;gt; :first, :last_name =&amp;gt; :last}})&#xA;       =&amp;gt; [ [ {:first=&amp;gt;&#34;Dan&#34;, :last=&amp;gt;&#34;McAllister&#34;, :dogs=&amp;gt;&#34;2&#34;}, {:first=&amp;gt;&#34;Lucy&#34;, :last=&amp;gt;&#34;Laweless&#34;, :cats=&amp;gt;&#34;5&#34;} ],&#xA;            [ {:first=&amp;gt;&#34;Miles&#34;, :last=&amp;gt;&#34;O&#39;Brian&#34;, :fish=&amp;gt;&#34;21&#34;}, {:first=&amp;gt;&#34;Nancy&#34;, :last=&amp;gt;&#34;Homes&#34;, :dogs=&amp;gt;&#34;2&#34;, :birds=&amp;gt;&#34;1&#34;} ]&#xA;          ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example 1c: How SmarterCSV processes CSV-files as chunks, and passes arrays of hashes to a given block:&lt;/h4&gt; &#xA;&lt;p&gt;Please note how the given block is passed the data for each chunk as the parameter (array of hashes), and how the &lt;code&gt;process&lt;/code&gt; method returns the number of chunks when called with a block&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;     &amp;gt; total_chunks = SmarterCSV.process(&#39;/tmp/pets.csv&#39;, {:chunk_size =&amp;gt; 2, :key_mapping =&amp;gt; {:first_name =&amp;gt; :first, :last_name =&amp;gt; :last}}) do |chunk|&#xA;         chunk.each do |h|   # you can post-process the data from each row to your heart&#39;s content, and also create virtual attributes:&#xA;           h[:full_name] = [h[:first],h[:last]].join(&#39; &#39;)  # create a virtual attribute&#xA;           h.delete(:first) ; h.delete(:last)              # remove two keys&#xA;         end&#xA;         puts chunk.inspect   # we could at this point pass the chunk to a Resque worker..&#xA;       end&#xA;&#xA;       [{:dogs=&amp;gt;&#34;2&#34;, :full_name=&amp;gt;&#34;Dan McAllister&#34;}, {:cats=&amp;gt;&#34;5&#34;, :full_name=&amp;gt;&#34;Lucy Laweless&#34;}]&#xA;       [{:fish=&amp;gt;&#34;21&#34;, :full_name=&amp;gt;&#34;Miles O&#39;Brian&#34;}, {:dogs=&amp;gt;&#34;2&#34;, :birds=&amp;gt;&#34;1&#34;, :full_name=&amp;gt;&#34;Nancy Homes&#34;}]&#xA;        =&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example 2: Reading a CSV-File in one Chunk, returning one Array of Hashes:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    filename = &#39;/tmp/input_file.txt&#39; # TAB delimited file, each row ending with Control-M&#xA;    recordsA = SmarterCSV.process(filename, {:col_sep =&amp;gt; &#34;\t&#34;, :row_sep =&amp;gt; &#34;\cM&#34;})  # no block given&#xA;&#xA;    =&amp;gt; returns an array of hashes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example 3: Populate a MySQL or MongoDB Database with SmarterCSV:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    # without using chunks:&#xA;    filename = &#39;/tmp/some.csv&#39;&#xA;    options = {:key_mapping =&amp;gt; {:unwanted_row =&amp;gt; nil, :old_row_name =&amp;gt; :new_name}}&#xA;    n = SmarterCSV.process(filename, options) do |array|&#xA;          # we&#39;re passing a block in, to process each resulting hash / =row (the block takes array of hashes)&#xA;          # when chunking is not enabled, there is only one hash in each array&#xA;          MyModel.create( array.first )&#xA;    end&#xA;&#xA;     =&amp;gt; returns number of chunks / rows we processed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example 4: Reading a CSV-like File, and Processing it with Sidekiq:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    filename = &#39;/tmp/strange_db_dump&#39;   # a file with CRTL-A as col_separator, and with CTRL-B\n as record_separator (hello iTunes!)&#xA;    options = {&#xA;      :col_sep =&amp;gt; &#34;\cA&#34;, :row_sep =&amp;gt; &#34;\cB\n&#34;, :comment_regexp =&amp;gt; /^#/,&#xA;      :chunk_size =&amp;gt; 100 , :key_mapping =&amp;gt; {:export_date =&amp;gt; nil, :name =&amp;gt; :genre}&#xA;    }&#xA;    n = SmarterCSV.process(filename, options) do |chunk|&#xA;        SidekiqWorkerClass.process_async(chunk ) # pass an array of hashes to Sidekiq workers for parallel processing&#xA;    end&#xA;    =&amp;gt; returns number of chunks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example 5: Populate a MongoDB Database in Chunks of 100 records with SmarterCSV:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    # using chunks:&#xA;    filename = &#39;/tmp/some.csv&#39;&#xA;    options = {:chunk_size =&amp;gt; 100, :key_mapping =&amp;gt; {:unwanted_row =&amp;gt; nil, :old_row_name =&amp;gt; :new_name}}&#xA;    n = SmarterCSV.process(filename, options) do |chunk|&#xA;          # we&#39;re passing a block in, to process each resulting hash / row (block takes array of hashes)&#xA;          # when chunking is enabled, there are up to :chunk_size hashes in each chunk&#xA;          MyModel.collection.insert( chunk )   # insert up to 100 records at a time&#xA;    end&#xA;&#xA;     =&amp;gt; returns number of chunks we processed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example 6: Using Value Converters&lt;/h4&gt; &#xA;&lt;p&gt;NOTE: If you use &lt;code&gt;key_mappings&lt;/code&gt; and &lt;code&gt;value_converters&lt;/code&gt;, make sure that the value converters has references the keys based on the final mapped name, not the original name in the CSV file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    $ cat spec/fixtures/with_dates.csv&#xA;    first,last,date,price&#xA;    Ben,Miller,10/30/1998,$44.50&#xA;    Tom,Turner,2/1/2011,$15.99&#xA;    Ken,Smith,01/09/2013,$199.99&#xA;    $ irb&#xA;    &amp;gt; require &#39;smarter_csv&#39;&#xA;    &amp;gt; require &#39;date&#39;&#xA;&#xA;    # define a custom converter class, which implements self.convert(value)&#xA;    class DateConverter&#xA;      def self.convert(value)&#xA;        Date.strptime( value, &#39;%m/%d/%Y&#39;) # parses custom date format into Date instance&#xA;      end&#xA;    end&#xA;&#xA;    class DollarConverter&#xA;      def self.convert(value)&#xA;        value.sub(&#39;$&#39;,&#39;&#39;).to_f&#xA;      end&#xA;    end&#xA;&#xA;    options = {:value_converters =&amp;gt; {:date =&amp;gt; DateConverter, :price =&amp;gt; DollarConverter}}&#xA;    data = SmarterCSV.process(&#34;spec/fixtures/with_dates.csv&#34;, options)&#xA;    data[0][:date]&#xA;      =&amp;gt; #&amp;lt;Date: 1998-10-30 ((2451117j,0s,0n),+0s,2299161j)&amp;gt;&#xA;    data[0][:date].class&#xA;      =&amp;gt; Date&#xA;    data[0][:price]&#xA;      =&amp;gt; 44.50&#xA;    data[0][:price].class&#xA;      =&amp;gt; Float&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parallel Processing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xjlin0&#34;&gt;Jack&lt;/a&gt; wrote an interesting article about &lt;a href=&#34;http://xjlin0.github.io/tech/2015/05/25/faster-parsing-csv-with-parallel-processing&#34;&gt;Speeding up CSV parsing with parallel processing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;process&lt;/code&gt; method reads and processes a &#34;generalized&#34; CSV file and returns the contents either as an Array of Hashes, or an Array of Arrays, which contain Hashes, or processes Chunks of Hashes via a given block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SmarterCSV.process(filename, options={}, &amp;amp;block)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The options and the block are optional.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SmarterCSV.process&lt;/code&gt; supports the following options:&lt;/p&gt; &#xA;&lt;h4&gt;Options:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt; | Option                      | Default  |  Explanation                                                                         |&#xA; ---------------------------------------------------------------------------------------------------------------------------------&#xA; | :chunk_size                 |   nil    | if set, determines the desired chunk-size (defaults to nil, no chunk processing)     |&#xA; |                             |          |                                                                                      |&#xA; | :file_encoding              |   utf-8  | Set the file encoding eg.: &#39;windows-1252&#39; or &#39;iso-8859-1&#39;                            |&#xA; | :invalid_byte_sequence      |   &#39;&#39;     | what to replace invalid byte sequences with                                          |&#xA; | :force_utf8                 |   false  | force UTF-8 encoding of all lines (including headers) in the CSV file                |&#xA; | :skip_lines                 |   nil    | how many lines to skip before the first line or header line is processed             |&#xA; | :comment_regexp             |   nil    | regular expression to ignore comment lines (see NOTE on CSV header), e.g./\A#/       |&#xA; ---------------------------------------------------------------------------------------------------------------------------------&#xA; | :col_sep                    |   :auto   | column separator (default was &#39;,&#39;)                                           |&#xA; | :force_simple_split         |   false  | force simple splitting on :col_sep character for non-standard CSV-files.             |&#xA; |                             |          | e.g. when :quote_char is not properly escaped                                        |&#xA; | :row_sep                    |  :auto   | row separator or record separator (previous default was system&#39;s $/ , which defaulted to &#34;\n&#34;) |&#xA; |                             |          | This can also be set to :auto, but will process the whole cvs file first  (slow!)    |&#xA; | :auto_row_sep_chars         |   500    | How many characters to analyze when using `:row_sep =&amp;gt; :auto`. nil or 0 means whole file. |&#xA; | :quote_char                 |   &#39;&#34;&#39;    | quotation character                                                                  |&#xA; ---------------------------------------------------------------------------------------------------------------------------------&#xA; | :headers_in_file            |   true   | Whether or not the file contains headers as the first line.                          |&#xA; |                             |          | Important if the file does not contain headers,                                      |&#xA; |                             |          | otherwise you would lose the first line of data.                                     |&#xA; | :duplicate_header_suffix    |   nil    | If set, adds numbers to duplicated headers and separates them by the given suffix    |&#xA; | :user_provided_headers      |   nil    | *careful with that axe!*                                                             |&#xA; |                             |          | user provided Array of header strings or symbols, to define                          |&#xA; |                             |          | what headers should be used, overriding any in-file headers.                         |&#xA; |                             |          | You can not combine the :user_provided_headers and :key_mapping options              |&#xA; | :remove_empty_hashes        |   true   | remove / ignore any hashes which don&#39;t have any key/value pairs or all empty values  |&#xA; | :verbose                    |   false  | print out line number while processing (to track down problems in input files)       |&#xA; | :with_line_numbers          |   false  | add :csv_line_number to each data hash                                               |&#xA; ---------------------------------------------------------------------------------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Deprecated 1.x Options: to be replaced in 2.0&lt;/h4&gt; &#xA;&lt;p&gt;There have been a lot of 1-offs and feature creep around these options, and going forward we&#39;ll have a simpler, but more flexible way to address these features.&lt;/p&gt; &#xA;&lt;p&gt;Instead of these options, there will be a new and more flexible way to process the header fields, as well as the fields in each line of the CSV. And header and data validations will also be supported in 2.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; | Option                      | Default  |  Explanation                                                                         |&#xA; ---------------------------------------------------------------------------------------------------------------------------------&#xA; | :key_mapping                |   nil    | a hash which maps headers from the CSV file to keys in the result hash               |&#xA; | :silence_missing_key        |   false  | ignore missing keys in `key_mapping` if true                                         |&#xA; | :required_keys              |   nil    | An array. Specify the required names AFTER header transformation.                  |&#xA; | :required_headers           |   nil    | (DEPRECATED / renamed) Use `required_keys` instead                          |&#xA; |                             |          | or an exception is raised   No validation if nil is given.                           |&#xA; | :remove_unmapped_keys       |   false  | when using :key_mapping option, should non-mapped keys / columns be removed?         |&#xA; | :downcase_header            |   true   | downcase all column headers                                                          |&#xA; | :strings_as_keys            |   false  | use strings instead of symbols as the keys in the result hashes                      |&#xA; | :strip_whitespace           |   true   | remove whitespace before/after values and headers                                    |&#xA; | :keep_original_headers      |   false  | keep the original headers from the CSV-file as-is.                                   |&#xA; |                             |          | Disables other flags manipulating the header fields.                                 |&#xA; | :strip_chars_from_headers   |   nil    | RegExp to remove extraneous characters from the header line (e.g. if headers are quoted) |&#xA; ---------------------------------------------------------------------------------------------------------------------------------&#xA; | :value_converters           |   nil    | supply a hash of :header =&amp;gt; KlassName; the class needs to implement self.convert(val)|&#xA; | :remove_empty_values        |   true   | remove values which have nil or empty strings as values                              |&#xA; | :remove_zero_values         |   false  | remove values which have a numeric value equal to zero / 0                           |&#xA; | :remove_values_matching     |   nil    | removes key/value pairs if value matches given regular expressions. e.g.:            |&#xA; |                             |          | /^\$0\.0+$/ to match $0.00 , or /^#VALUE!$/ to match errors in Excel spreadsheets    |&#xA; | :convert_values_to_numeric  |   true   | converts strings containing Integers or Floats to the appropriate class              |&#xA; |                             |          |      also accepts either {:except =&amp;gt; [:key1,:key2]} or {:only =&amp;gt; :key3}              |&#xA; ---------------------------------------------------------------------------------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;NOTES about File Encodings:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if you have a CSV file which contains unicode characters, you can process it as follows:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;       File.open(filename, &#34;r:bom|utf-8&#34;) do |f|&#xA;         data = SmarterCSV.process(f);&#xA;       end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if the CSV file with unicode characters is in a remote location, similarly you need to give the encoding as an option to the &lt;code&gt;open&lt;/code&gt; call:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;       require &#39;open-uri&#39;&#xA;       file_location = &#39;http://your.remote.org/sample.csv&#39;&#xA;       open(file_location, &#39;r:utf-8&#39;) do |f|   # don&#39;t forget to specify the UTF-8 encoding!!&#xA;         data = SmarterCSV.process(f)&#xA;       end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;NOTES about CSV Headers:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;as this method parses CSV files, it is assumed that the first line of any file will contain a valid header&lt;/li&gt; &#xA; &lt;li&gt;the first line with the header might be commented out, in which case you will need to set &lt;code&gt;comment_regexp: /\A#/&lt;/code&gt; This is no longer handled automatically since 1.5.0.&lt;/li&gt; &#xA; &lt;li&gt;any occurences of :comment_regexp or :row_sep will be stripped from the first line with the CSV header&lt;/li&gt; &#xA; &lt;li&gt;any of the keys in the header line will be downcased, spaces replaced by underscore, and converted to Ruby symbols before being used as keys in the returned Hashes&lt;/li&gt; &#xA; &lt;li&gt;you can not combine the :user_provided_headers and :key_mapping options&lt;/li&gt; &#xA; &lt;li&gt;if the incorrect number of headers are provided via :user_provided_headers, exception SmarterCSV::HeaderSizeMismatch is raised&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;NOTES on Duplicate Headers:&lt;/h4&gt; &#xA;&lt;p&gt;As a corner case, it is possible that a CSV file contains multiple headers with the same name.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If that happens, by default &lt;code&gt;smarter_csv&lt;/code&gt; will raise a &lt;code&gt;DuplicateHeaders&lt;/code&gt; error.&lt;/li&gt; &#xA; &lt;li&gt;If you set &lt;code&gt;duplicate_header_suffix&lt;/code&gt; to a non-nil string, it will use it to append numbers 2..n to the duplicate headers. To further disambiguate the headers, you can further use &lt;code&gt;key_mapping&lt;/code&gt; to assign meaningful names.&lt;/li&gt; &#xA; &lt;li&gt;If your code will need to process arbitrary CSV files, please set &lt;code&gt;duplicate_header_suffix&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Another way to deal with duplicate headers it to use &lt;code&gt;user_assigned_headers&lt;/code&gt; to ignore any headers in the file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;NOTES on Key Mapping:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;keys in the header line of the file can be re-mapped to a chosen set of symbols, so the resulting Hashes can be better used internally in your application (e.g. when directly creating MongoDB entries with them)&lt;/li&gt; &#xA; &lt;li&gt;if you want to completely delete a key, then map it to nil or to &#39;&#39;, they will be automatically deleted from any result Hash&lt;/li&gt; &#xA; &lt;li&gt;if you have input files with a large number of columns, and you want to ignore all columns which are not specifically mapped with :key_mapping, then use option :remove_unmapped_keys =&amp;gt; true&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;NOTES on the use of Chunking and Blocks:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;chunking can be VERY USEFUL if used in combination with passing a block to File.read_csv FOR LARGE FILES&lt;/li&gt; &#xA; &lt;li&gt;if you pass a block to File.read_csv, that block will be executed and given an Array of Hashes as the parameter.&lt;/li&gt; &#xA; &lt;li&gt;if the chunk_size is not set, then the array will only contain one Hash.&lt;/li&gt; &#xA; &lt;li&gt;if the chunk_size is &amp;gt; 0 , then the array may contain up to chunk_size Hashes.&lt;/li&gt; &#xA; &lt;li&gt;this can be very useful when passing chunked data to a post-processing step, e.g. through Resque&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;NOTES on improper quotation and unwanted characters in headers:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;some CSV files use un-escaped quotation characters inside fields. This can cause the import to break. To get around this, use the &lt;code&gt;:force_simple_split =&amp;gt; true&lt;/code&gt; option in combination with &lt;code&gt;:strip_chars_from_headers =&amp;gt; /[\-&#34;]/&lt;/code&gt; . This will also significantly speed up the import. If you would force a different :quote_char instead (setting it to a non-used character), then the import would be up to 5-times slower than using &lt;code&gt;:force_simple_split&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See also:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.unixgods.org/~tilo/Ruby/process_csv_as_hashes.html&#34;&gt;http://www.unixgods.org/~tilo/Ruby/process_csv_as_hashes.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    gem &#39;smarter_csv&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    $ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    $ gem install smarter_csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tilo/smarter_csv/main/CHANGELOG.md&#34;&gt;ChangeLog&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Reporting Bugs / Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/tilo/smarter_csv/issues&#34;&gt;open an Issue on GitHub&lt;/a&gt; if you have feedback, new feature requests, or want to report a bug. Thank you!&lt;/p&gt; &#xA;&lt;p&gt;For reporting issues, please:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;include a small sample CSV file&lt;/li&gt; &#xA; &lt;li&gt;open a pull-request adding a test that demonstrates the issue&lt;/li&gt; &#xA; &lt;li&gt;mention your version of SmarterCSV, Ruby, Rails&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tilo/smarter_csv/main/CONTRIBUTORS.md&#34;&gt;A Special Thanks to all Contributors!&lt;/a&gt; 🎉🎉🎉&lt;/h2&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Added some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>chyingp/nodejs-learning-guide</title>
    <updated>2023-03-26T01:44:01Z</updated>
    <id>tag:github.com,2023-03-26:/chyingp/nodejs-learning-guide</id>
    <link href="https://github.com/chyingp/nodejs-learning-guide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nodejs学习笔记以及经验总结，公众号&#34;程序猿小卡&#34;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Nodejs学习笔记&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;阿里CBU技术部招前端实习生啦！2023届的同学看过来，专业过关、前端基础扎实即可，低代码/跨端/直播/VR/electron/nodejs ，总有一款适合你 👍 可&lt;a href=&#34;https://github.com/chyingp/nodejs-learning-guide/issues/26&#34;&gt;点击这里投递简历&lt;/a&gt;，感兴趣的小伙伴也可以加我微信 casperchen 咨询，注明是否找实习哦~&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Nodejs学习过程中的一些总结，可&lt;a href=&#34;https://github.com/chyingp/nodejs-learning-guide&#34;&gt;点击这里&lt;/a&gt;查看完整版。欢迎关注公众号 &lt;a href=&#34;https://www.chyingp.com/wp-content/uploads/2018/02/qrcode_for_gh_7ba65667d1aa_344.jpg&#34;&gt;程序猿小卡&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基础：核心模块常用API 的使用、注意事项。（含可执行的demo）&lt;/li&gt; &#xA; &lt;li&gt;进阶：项目实战经验总结，含常用框架、库介绍，从编码到服务端部署运维。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;目录如下&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/README.md&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97.md&#34;&gt;内置模块&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/zlib.md&#34;&gt;资源压缩-zlib(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/fs.md&#34;&gt;文件系统操作-fs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/dns.md&#34;&gt;域名解析-dns(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/http.md&#34;&gt;网络服务-http(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/http.req.md&#34;&gt;网络服务-http-req(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/http.res.md&#34;&gt;网络服务-http-res(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/http.client.md&#34;&gt;网络服务-http-client(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/http.server.md&#34;&gt;网络服务-http-server(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/https.md&#34;&gt;网络服务-https(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/net.md&#34;&gt;网络TCP-net(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/dgram.md&#34;&gt;网络UDP-dgram(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/url.md&#34;&gt;网络地址解析-url(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/crypto.md&#34;&gt;数据加密-crypto(OK)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/querystring.md&#34;&gt;URL查询字符串-querystring(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/buffer.md&#34;&gt;二进制数据-buffer(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/child_process.md&#34;&gt;子进程-child_process&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/process.md&#34;&gt;进程相关-process(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/cluster.md&#34;&gt;集群-cluster(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/console.md&#34;&gt;基础调试-console(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/debug.md&#34;&gt;进阶调试-debugger(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;错误处理-error&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/events.md&#34;&gt;事件机制-events(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;全局对象-global&lt;/li&gt; &#xA;   &lt;li&gt;模块机制-module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/path.md&#34;&gt;本地路径处理-path(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/readline.md&#34;&gt;逐行读取-readline(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;命令行设计-repl&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/util.md&#34;&gt;实用工具模块-util(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/stream.md&#34;&gt;流操作-stream(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/string_decoder.md&#34;&gt;二进制解码-string_decoder&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;定时器-timers&lt;/li&gt; &#xA;   &lt;li&gt;安全加密-tls&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;进阶使用 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/charset-enc-dec.md&#34;&gt;Nodejs进阶：服务端字符编解码&amp;amp;乱码处理(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/crypto.md5.md&#34;&gt;Nodejs进阶：MD5入门介绍及crypto模块的应用(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/body-parser.md&#34;&gt;Nodejs 进阶：Express 常用中间件 body-parser 实现解析(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-multer.md&#34;&gt;基于express+muter的文件上传(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%88%90datauri.md&#34;&gt;将图片转成datauri嵌入到html(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E6%A8%A1%E5%9D%97/debug.md&#34;&gt;本地调试远程服务器上的Node代码(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/express+session%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.md&#34;&gt;express+session实现简易身份认证(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97morgan.md&#34;&gt;express+morgan：从入门使用到源码剖析(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/cookie-parser-deep-in.md&#34;&gt;express+cookie-parser：签名机制深入剖析(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/log4js.md&#34;&gt;Nodejs 进阶：log4js入门实例(ok)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/debug-log.md&#34;&gt;调试日志打印：debug模块&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/crypto-theory.md&#34;&gt;Nodejs进阶：crypto模块之理论篇&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/%E8%BF%9B%E9%98%B6/asymmetric-enc-dec.md&#34;&gt;Nodejs进阶：5分钟入门非对称加密用法&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;express进阶：多模板引擎支持&lt;/li&gt; &#xA;   &lt;li&gt;基于 express + XHR 的跨域资源请求&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;微信公众号&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chyingp/nodejs-learning-guide/master/assets/qrcode_for_gh_7ba65667d1aa_344.jpg&#34; alt=&#34;程序猿小卡的技术公众号&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>