<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-25T01:42:54Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Netflix/fast_jsonapi</title>
    <updated>2023-04-25T01:42:54Z</updated>
    <id>tag:github.com,2023-04-25:/Netflix/fast_jsonapi</id>
    <link href="https://github.com/Netflix/fast_jsonapi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;No Longer Maintained - A lightning fast JSON:API serializer for Ruby Objects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fast JSON API — &lt;span&gt;⚠&lt;/span&gt; This project is no longer maintained!!!! &lt;span&gt;⚠&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Netflix/fast_jsonapi&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Netflix/fast_jsonapi.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A lightning fast &lt;a href=&#34;http://jsonapi.org/&#34;&gt;JSON:API&lt;/a&gt; serializer for Ruby Objects.&lt;/p&gt; &#xA;&lt;h3&gt;Since this project is no longer maintained, please consider using alternatives or the forked project &lt;a href=&#34;https://github.com/jsonapi-serializer/jsonapi-serializer&#34;&gt;jsonapi-serializer/jsonapi-serializer&lt;/a&gt;!&lt;/h3&gt; &#xA;&lt;h1&gt;Performance Comparison&lt;/h1&gt; &#xA;&lt;p&gt;We compare serialization times with Active Model Serializer as part of RSpec performance tests included on this library. We want to ensure that with every change on this library, serialization time is at least &lt;code&gt;25 times&lt;/code&gt; faster than Active Model Serializers on up to current benchmark of 1000 records. Please read the &lt;a href=&#34;https://github.com/Netflix/fast_jsonapi/raw/master/performance_methodology.md&#34;&gt;performance document&lt;/a&gt; for any questions related to methodology.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark times for 250 records&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rspec&#xA;Active Model Serializer serialized 250 records in 138.71 ms&#xA;Fast JSON API serialized 250 records in 3.01 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#rails-generator&#34;&gt;Rails Generator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#model-definition&#34;&gt;Model Definition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#serializer-definition&#34;&gt;Serializer Definition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#object-serialization&#34;&gt;Object Serialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#compound-document&#34;&gt;Compound Document&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#key-transforms&#34;&gt;Key Transforms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#collection-serialization&#34;&gt;Collection Serialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#caching&#34;&gt;Caching&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#params&#34;&gt;Params&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#conditional-attributes&#34;&gt;Conditional Attributes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#conditional-relationships&#34;&gt;Conditional Relationships&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#sparse-fieldsets&#34;&gt;Sparse Fieldsets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#using-helper-methods&#34;&gt;Using helper methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Declaration syntax similar to Active Model Serializer&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;belongs_to&lt;/code&gt;, &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;has_one&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for compound documents (included)&lt;/li&gt; &#xA; &lt;li&gt;Optimized serialization of compound documents&lt;/li&gt; &#xA; &lt;li&gt;Caching&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;fast_jsonapi&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Rails Generator&lt;/h3&gt; &#xA;&lt;p&gt;You can use the bundled generator if you are using the library inside of a Rails project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails g serializer Movie name year&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new serializer in &lt;code&gt;app/serializers/movie_serializer.rb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Model Definition&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Movie&#xA;  attr_accessor :id, :name, :year, :actor_ids, :owner_id, :movie_type_id&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serializer Definition&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;  set_type :movie  # optional&#xA;  set_id :owner_id # optional&#xA;  attributes :name, :year&#xA;  has_many :actors&#xA;  belongs_to :owner, record_type: :user&#xA;  belongs_to :movie_type&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sample Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;movie = Movie.new&#xA;movie.id = 232&#xA;movie.name = &#39;test movie&#39;&#xA;movie.actor_ids = [1, 2, 3]&#xA;movie.owner_id = 3&#xA;movie.movie_type_id = 1&#xA;movie&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Object Serialization&lt;/h3&gt; &#xA;&lt;h4&gt;Return a hash&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hash = MovieSerializer.new(movie).serializable_hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Return Serialized JSON&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json_string = MovieSerializer.new(movie).serialized_json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Serialized Output&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;data&#34;: {&#xA;    &#34;id&#34;: &#34;3&#34;,&#xA;    &#34;type&#34;: &#34;movie&#34;,&#xA;    &#34;attributes&#34;: {&#xA;      &#34;name&#34;: &#34;test movie&#34;,&#xA;      &#34;year&#34;: null&#xA;    },&#xA;    &#34;relationships&#34;: {&#xA;      &#34;actors&#34;: {&#xA;        &#34;data&#34;: [&#xA;          {&#xA;            &#34;id&#34;: &#34;1&#34;,&#xA;            &#34;type&#34;: &#34;actor&#34;&#xA;          },&#xA;          {&#xA;            &#34;id&#34;: &#34;2&#34;,&#xA;            &#34;type&#34;: &#34;actor&#34;&#xA;          }&#xA;        ]&#xA;      },&#xA;      &#34;owner&#34;: {&#xA;        &#34;data&#34;: {&#xA;          &#34;id&#34;: &#34;3&#34;,&#xA;          &#34;type&#34;: &#34;user&#34;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Key Transforms&lt;/h3&gt; &#xA;&lt;p&gt;By default fast_jsonapi underscores the key names. It supports the same key transforms that are supported by AMS. Here is the syntax of specifying a key transform&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;  # Available options :camel, :camel_lower, :dash, :underscore(default)&#xA;  set_key_transform :camel&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are examples of how these options transform the keys&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set_key_transform :camel # &#34;some_key&#34; =&amp;gt; &#34;SomeKey&#34;&#xA;set_key_transform :camel_lower # &#34;some_key&#34; =&amp;gt; &#34;someKey&#34;&#xA;set_key_transform :dash # &#34;some_key&#34; =&amp;gt; &#34;some-key&#34;&#xA;set_key_transform :underscore # &#34;some_key&#34; =&amp;gt; &#34;some_key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Attributes are defined in FastJsonapi using the &lt;code&gt;attributes&lt;/code&gt; method. This method is also aliased as &lt;code&gt;attribute&lt;/code&gt;, which is useful when defining a single attribute.&lt;/p&gt; &#xA;&lt;p&gt;By default, attributes are read directly from the model property of the same name. In this example, &lt;code&gt;name&lt;/code&gt; is expected to be a property of the object being serialized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attribute :name&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom attributes that must be serialized but do not exist on the model can be declared using Ruby block syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attributes :name, :year&#xA;&#xA;  attribute :name_with_year do |object|&#xA;    &#34;#{object.name} (#{object.year})&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The block syntax can also be used to override the property on the object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attribute :name do |object|&#xA;    &#34;#{object.name} Part 2&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attributes can also use a different name by passing the original method or accessor with a proc shortcut:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attributes :name&#xA;&#xA;  attribute :released_in_year, &amp;amp;:year&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Links Per Object&lt;/h3&gt; &#xA;&lt;p&gt;Links are defined in FastJsonapi using the &lt;code&gt;link&lt;/code&gt; method. By default, links are read directly from the model property of the same name. In this example, &lt;code&gt;public_url&lt;/code&gt; is expected to be a property of the object being serialized.&lt;/p&gt; &#xA;&lt;p&gt;You can configure the method to use on the object for example a link with key &lt;code&gt;self&lt;/code&gt; will get set to the value returned by a method called &lt;code&gt;url&lt;/code&gt; on the movie object.&lt;/p&gt; &#xA;&lt;p&gt;You can also use a block to define a url as shown in &lt;code&gt;custom_url&lt;/code&gt;. You can access params in these blocks as well as shown in &lt;code&gt;personalized_url&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  link :public_url&#xA;&#xA;  link :self, :url&#xA;&#xA;  link :custom_url do |object|&#xA;    &#34;http://movies.com/#{object.name}-(#{object.year})&#34;&#xA;  end&#xA;&#xA;  link :personalized_url do |object, params|&#xA;    &#34;http://movies.com/#{object.name}-#{params[:user].reference_code}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Links on a Relationship&lt;/h4&gt; &#xA;&lt;p&gt;You can specify &lt;a href=&#34;http://jsonapi.org/format/#document-resource-object-relationships&#34;&gt;relationship links&lt;/a&gt; by using the &lt;code&gt;links:&lt;/code&gt; option on the serializer. Relationship links in JSON API are useful if you want to load a parent document and then load associated documents later due to size constraints (see &lt;a href=&#34;http://jsonapi.org/format/#document-resource-object-related-resource-links&#34;&gt;related resource links&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  has_many :actors, links: {&#xA;    self: :url,&#xA;    related: -&amp;gt; (object) {&#xA;      &#34;https://movies.com/#{object.id}/actors&#34;&#xA;    }&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;self&lt;/code&gt; reference for the relationship, and a &lt;code&gt;related&lt;/code&gt; link for loading the actors relationship later. NB: This will not automatically disable loading the data in the relationship, you&#39;ll need to do that using the &lt;code&gt;lazy_load_data&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  has_many :actors, lazy_load_data: true, links: {&#xA;    self: :url,&#xA;    related: -&amp;gt; (object) {&#xA;      &#34;https://movies.com/#{object.id}/actors&#34;&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Meta Per Resource&lt;/h3&gt; &#xA;&lt;p&gt;For every resource in the collection, you can include a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  meta do |movie|&#xA;    {&#xA;      years_since_release: Date.current.year - movie.year&#xA;    }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compound Document&lt;/h3&gt; &#xA;&lt;p&gt;Support for top-level and nested included associations through &lt;code&gt;options[:include]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;options = {}&#xA;options[:meta] = { total: 2 }&#xA;options[:links] = {&#xA;  self: &#39;...&#39;,&#xA;  next: &#39;...&#39;,&#xA;  prev: &#39;...&#39;&#xA;}&#xA;options[:include] = [:actors, :&#39;actors.agency&#39;, :&#39;actors.agency.state&#39;]&#xA;MovieSerializer.new([movie, movie], options).serialized_json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection Serialization&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;options[:meta] = { total: 2 }&#xA;options[:links] = {&#xA;  self: &#39;...&#39;,&#xA;  next: &#39;...&#39;,&#xA;  prev: &#39;...&#39;&#xA;}&#xA;hash = MovieSerializer.new([movie, movie], options).serializable_hash&#xA;json_string = MovieSerializer.new([movie, movie], options).serialized_json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Control Over Collection Serialization&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;is_collection&lt;/code&gt; option to have better control over collection serialization.&lt;/p&gt; &#xA;&lt;p&gt;If this option is not provided or &lt;code&gt;nil&lt;/code&gt; autedetect logic is used to try understand if provided resource is a single object or collection.&lt;/p&gt; &#xA;&lt;p&gt;Autodetect logic is compatible with most DB toolkits (ActiveRecord, Sequel, etc.) but &lt;strong&gt;cannot&lt;/strong&gt; guarantee that single vs collection will be always detected properly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;options[:is_collection]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;was introduced to be able to have precise control this behavior&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nil&lt;/code&gt; or not provided: will try to autodetect single vs collection (please, see notes above)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;true&lt;/code&gt; will always treat input resource as &lt;em&gt;collection&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;false&lt;/code&gt; will always treat input resource as &lt;em&gt;single object&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Caching&lt;/h3&gt; &#xA;&lt;p&gt;Requires a &lt;code&gt;cache_key&lt;/code&gt; method be defined on model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;  set_type :movie  # optional&#xA;  cache_options enabled: true, cache_length: 12.hours&#xA;  attributes :name, :year&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Params&lt;/h3&gt; &#xA;&lt;p&gt;In some cases, attribute values might require more information than what is available on the record, for example, access privileges or other information related to a current authenticated user. The &lt;code&gt;options[:params]&lt;/code&gt; value covers these cases by allowing you to pass in a hash of additional parameters necessary for your use case.&lt;/p&gt; &#xA;&lt;p&gt;Leveraging the new params is easy, when you define a custom attribute or relationship with a block you opt-in to using params by adding it as a block parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attributes :name, :year&#xA;  attribute :can_view_early do |movie, params|&#xA;    # in here, params is a hash containing the `:current_user` key&#xA;    params[:current_user].is_employee? ? true : false&#xA;  end&#xA;&#xA;  belongs_to :primary_agent do |movie, params|&#xA;    # in here, params is a hash containing the `:current_user` key&#xA;    params[:current_user].is_employee? ? true : false&#xA;  end&#xA;end&#xA;&#xA;# ...&#xA;current_user = User.find(cookies[:current_user_id])&#xA;serializer = MovieSerializer.new(movie, {params: {current_user: current_user}})&#xA;serializer.serializable_hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom attributes and relationships that only receive the resource are still possible by defining the block to only receive one argument.&lt;/p&gt; &#xA;&lt;h3&gt;Conditional Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Conditional attributes can be defined by passing a Proc to the &lt;code&gt;if&lt;/code&gt; key on the &lt;code&gt;attribute&lt;/code&gt; method. Return &lt;code&gt;true&lt;/code&gt; if the attribute should be serialized, and &lt;code&gt;false&lt;/code&gt; if not. The record and any params passed to the serializer are available inside the Proc as the first and second parameters, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attributes :name, :year&#xA;  attribute :release_year, if: Proc.new { |record|&#xA;    # Release year will only be serialized if it&#39;s greater than 1990&#xA;    record.release_year &amp;gt; 1990&#xA;  }&#xA;&#xA;  attribute :director, if: Proc.new { |record, params|&#xA;    # The director will be serialized only if the :admin key of params is true&#xA;    params &amp;amp;&amp;amp; params[:admin] == true&#xA;  }&#xA;end&#xA;&#xA;# ...&#xA;current_user = User.find(cookies[:current_user_id])&#xA;serializer = MovieSerializer.new(movie, { params: { admin: current_user.admin? }})&#xA;serializer.serializable_hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional Relationships&lt;/h3&gt; &#xA;&lt;p&gt;Conditional relationships can be defined by passing a Proc to the &lt;code&gt;if&lt;/code&gt; key. Return &lt;code&gt;true&lt;/code&gt; if the relationship should be serialized, and &lt;code&gt;false&lt;/code&gt; if not. The record and any params passed to the serializer are available inside the Proc as the first and second parameters, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  # Actors will only be serialized if the record has any associated actors&#xA;  has_many :actors, if: Proc.new { |record| record.actors.any? }&#xA;&#xA;  # Owner will only be serialized if the :admin key of params is true&#xA;  belongs_to :owner, if: Proc.new { |record, params| params &amp;amp;&amp;amp; params[:admin] == true }&#xA;end&#xA;&#xA;# ...&#xA;current_user = User.find(cookies[:current_user_id])&#xA;serializer = MovieSerializer.new(movie, { params: { admin: current_user.admin? }})&#xA;serializer.serializable_hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sparse Fieldsets&lt;/h3&gt; &#xA;&lt;p&gt;Attributes and relationships can be selectively returned per record type by using the &lt;code&gt;fields&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attributes :name, :year&#xA;end&#xA;&#xA;serializer = MovieSerializer.new(movie, { fields: { movie: [:name] } })&#xA;serializer.serializable_hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using helper methods&lt;/h3&gt; &#xA;&lt;p&gt;You can mix-in code from another ruby module into your serializer class to reuse functions across your app.&lt;/p&gt; &#xA;&lt;p&gt;Since a serializer is evaluated in a the context of a &lt;code&gt;class&lt;/code&gt; rather than an &lt;code&gt;instance&lt;/code&gt; of a class, you need to make sure that your methods act as &lt;code&gt;class&lt;/code&gt; methods when mixed in.&lt;/p&gt; &#xA;&lt;h5&gt;Using ActiveSupport::Concern&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;module AvatarHelper&#xA;  extend ActiveSupport::Concern&#xA;&#xA;  class_methods do&#xA;    def avatar_url(user)&#xA;      user.image.url&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class UserSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  include AvatarHelper # mixes in your helper method as class method&#xA;&#xA;  set_type :user&#xA;&#xA;  attributes :name, :email&#xA;&#xA;  attribute :avatar do |user|&#xA;    avatar_url(user)&#xA;  end&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using Plain Old Ruby&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module AvatarHelper&#xA;  def avatar_url(user)&#xA;    user.image.url&#xA;  end&#xA;end&#xA;&#xA;class UserSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  extend AvatarHelper # mixes in your helper method as class method&#xA;&#xA;  set_type :user&#xA;&#xA;  attributes :name, :email&#xA;&#xA;  attribute :avatar do |user|&#xA;    avatar_url(user)&#xA;  end&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizable Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;set_type&lt;/td&gt; &#xA;   &lt;td&gt;Type name of Object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;set_type :movie &lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;key&lt;/td&gt; &#xA;   &lt;td&gt;Key of Object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to :owner, key: :user &lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;set_id&lt;/td&gt; &#xA;   &lt;td&gt;ID of Object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;set_id :owner_id &lt;/code&gt; or ```set_id {&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cache_options&lt;/td&gt; &#xA;   &lt;td&gt;Hash to enable caching and set cache length&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cache_options enabled: true, cache_length: 12.hours, race_condition_ttl: 10.seconds&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id_method_name&lt;/td&gt; &#xA;   &lt;td&gt;Set custom method name to get ID of an object (If block is provided for the relationship, &lt;code&gt;id_method_name&lt;/code&gt; is invoked on the return value of the block instead of the resource object)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many :locations, id_method_name: :place_ids &lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;object_method_name&lt;/td&gt; &#xA;   &lt;td&gt;Set custom method name to get related objects&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many :locations, object_method_name: :places &lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;record_type&lt;/td&gt; &#xA;   &lt;td&gt;Set custom Object Type for a relationship&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to :owner, record_type: :user&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;serializer&lt;/td&gt; &#xA;   &lt;td&gt;Set custom Serializer for a relationship&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many :actors, serializer: :custom_actor&lt;/code&gt; or &lt;code&gt;has_many :actors, serializer: MyApp::Api::V1::ActorSerializer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;polymorphic&lt;/td&gt; &#xA;   &lt;td&gt;Allows different record types for a polymorphic association&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many :targets, polymorphic: true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;polymorphic&lt;/td&gt; &#xA;   &lt;td&gt;Sets custom record types for each object class in a polymorphic association&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many :targets, polymorphic: { Person =&amp;gt; :person, Group =&amp;gt; :group }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Instrumentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fast_jsonapi&lt;/code&gt; also has builtin &lt;a href=&#34;https://www.skylight.io/&#34;&gt;Skylight&lt;/a&gt; integration. To enable, add the following to an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fast_jsonapi/instrumentation/skylight&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Skylight relies on &lt;code&gt;ActiveSupport::Notifications&lt;/code&gt; to track these two core methods. If you would like to use these notifications without using Skylight, simply require the instrumentation integration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fast_jsonapi/instrumentation&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The two instrumented notifcations are supplied by these two constants:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FastJsonapi::ObjectSerializer::SERIALIZABLE_HASH_NOTIFICATION&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FastJsonapi::ObjectSerializer::SERIALIZED_JSON_NOTIFICATION&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is also possible to instrument one method without the other by using one of the following require statements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fast_jsonapi/instrumentation/serializable_hash&#39;&#xA;require &#39;fast_jsonapi/instrumentation/serialized_json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same goes for the Skylight integration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fast_jsonapi/instrumentation/skylight/normalizers/serializable_hash&#39;&#xA;require &#39;fast_jsonapi/instrumentation/skylight/normalizers/serialized_json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/Netflix/fast_jsonapi/raw/master/CONTRIBUTING.md&#34;&gt;contribution check&lt;/a&gt; for more details on contributing&lt;/p&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt; for testing. We have unit tests, functional tests and performance tests. To run tests use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests without the performance tests (for quicker test runs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec spec --tag ~performance:true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests only performance tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec spec --tag performance:true&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>railsjazz/ask_chatgpt</title>
    <updated>2023-04-25T01:42:54Z</updated>
    <id>tag:github.com,2023-04-25:/railsjazz/ask_chatgpt</id>
    <link href="https://github.com/railsjazz/ask_chatgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI-Powered Assistant Gem right in your Rails console.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ask ChatGPT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.railsjazz.com&#34;&gt;&lt;img src=&#34;https://github.com/igorkasyanchuk/rails_time_travel/raw/main/docs/my_other.svg?raw=true&#34; alt=&#34;RailsJazz&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource-heroes.com/o/railsjazz&#34;&gt;&lt;img src=&#34;https://opensource-heroes.com/badge-v1.svg?sanitize=true&#34; alt=&#34;Listed on OpenSource-Heroes.com&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AI-Powered Assistant Gem right in your Rails console.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/docs/gpt.gif&#34; alt=&#34;AskChatGPT&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Gem that leverages the power of AI to make your development experience more efficient and enjoyable. With this gem, you can streamline your coding process, effortlessly refactor and improve your code, and even generate tests on the fly.&lt;/p&gt; &#xA;&lt;p&gt;See more &lt;a href=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/#examples&#34;&gt;examples&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Go to Rails console and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  gpt.ask(&#34;how to get max age of user with projects from Ukraine&#34;).with_model(User, Project, Country)&#xA;  gpt.ask(&#34;convert json to xml&#34;)&#xA;  gpt.payload(json).ask(&#34;extract emails from json&#34;)&#xA;  gpt.refactor(&#34;User.get_report&#34;)&#xA;  gpt.improve(&#34;User.get_report&#34;)&#xA;  gpt.rspec_test(User)&#xA;  gpt.unit_test(User)&#xA;  gpt.code_review(User.method(:get_report))&#xA;  gpt.find_bug(&#39;User#full_name&#39;)&#xA;  gpt.explain(User)&#xA;  gpt.improve %Q{&#xA;    def full_name&#xA;      [first_name, last_name].join&#xA;    end&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See some examples below. You can also create your own prompts with just few lines of code &lt;a href=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/#options--configurations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Typical use-cases how you can use this plugin &lt;img src=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/docs/gpt6.png&#34; alt=&#34;AskChatGPT&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ask for code ideas: &lt;img src=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/docs/gpt1.png&#34; alt=&#34;AskChatGPT&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Do you need help to write rspec test? &lt;img src=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/docs/gpt2.png&#34; alt=&#34;AskChatGPT&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;What about unit tests? &lt;img src=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/docs/gpt3.png&#34; alt=&#34;AskChatGPT&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ask ChatGPT to improve your code: &lt;img src=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/docs/gpt4.png&#34; alt=&#34;AskChatGPT&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ask ChatGPT to parse you JSON: &lt;img src=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/docs/gpt7.png&#34; alt=&#34;AskChatGPT&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or it can encode in Base64 your string: &lt;img src=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/docs/gpt8.png&#34; alt=&#34;AskChatGPT&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create I18n YAML for your Model (custom prompt): &lt;img src=&#34;https://raw.githubusercontent.com/railsjazz/ask_chatgpt/main/docs/gpt5.png&#34; alt=&#34;AskChatGPT&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;ask_chatgpt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install ask_chatgpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options &amp;amp; Configurations&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;rails g ask_chatgpt initializer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And you can edit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  AskChatGPT.setup do |config|&#xA;    # config.access_token    = ENV[&#34;OPENAI_API_KEY&#34;]&#xA;    # config.debug           = false&#xA;    # config.model           = &#34;gpt-3.5-turbo&#34;&#xA;    # config.temperature     = 0.1&#xA;    # config.max_tokens      = 3000 # or nil by default&#xA;    # config.included_prompt = []&#xA;&#xA;    # Examples of custom prompts:&#xA;    # you can use them `gpt.ask(:extract_email, &#34;some string&#34;)`&#xA;&#xA;    # config.register_prompt :extract_email do |arg|&#xA;    #   &#34;Extract email from: #{arg} as JSON&#34;&#xA;    # end&#xA;&#xA;    # config.register_prompt :extract_constants do |arg|&#xA;    #   &#34;Extract constants from class: #{AskChatGPT::Helpers.extract_source(arg)}&#34;&#xA;    # end&#xA;&#xA;    # config.register_prompt :i18n do |code|&#xA;    #   &#34;Use I18n in this code:\n#{AskChatGPT::Helpers.extract_source(code)}&#34;&#xA;    # end&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: that you need to setup your API Key &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;. You can store it in the .env or .bash_profile. BUT make sure it won&#39;t be committed to the Github. Is must be private.&lt;/p&gt; &#xA;&lt;p&gt;You can define you own prompts and use them using &lt;code&gt;.register_prompt&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  config.register_prompt :extract_email do |arg|&#xA;    &#34;Extract email from: #{arg} as JSON&#34;&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And later you can call it with &lt;code&gt;gpt.extract_email(&#34;some text with email@site.com, user@email.com&#34;)&lt;/code&gt;. If you believe your custom promts will be useful - create a PR for this gem.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get source code use this helper &lt;code&gt;AskChatGPT::Helpers.extract_source(str)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  AskChatGPT::Helpers.extract_source(&#39;User.some_class_method&#39;)&#xA;  AskChatGPT::Helpers.extract_source(&#39;User#instance_method&#39;)&#xA;  AskChatGPT::Helpers.extract_source(&#39;User&#39;)&#xA;  AskChatGPT::Helpers.extract_source(User)&#xA;  AskChatGPT::Helpers.extract_source(&#34;a = b&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debug Mode&lt;/h2&gt; &#xA;&lt;p&gt;You can enable debug mode to see request/response from the OpenAI using two ways:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;AskChatGPT.setup do |config|&#xA;  config.debug = false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or directly in console &lt;code&gt;gpt.debug!&lt;/code&gt; (and finish &lt;code&gt;gpt.debug!(:off)&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cli app? &lt;code&gt;ask_gpt &amp;lt;something&amp;gt; --file &amp;lt;file&amp;gt;&lt;/code&gt; ...&lt;/li&gt; &#xA; &lt;li&gt;more prompts (cover controllers, sql, etc?), e.g. &lt;code&gt;with_controller&lt;/code&gt;, &lt;code&gt;with_class&lt;/code&gt;, ...&lt;/li&gt; &#xA; &lt;li&gt;tests(rspec, vcr)&lt;/li&gt; &#xA; &lt;li&gt;CI (but first specs)&lt;/li&gt; &#xA; &lt;li&gt;can it be used with pry/byebug/etc?&lt;/li&gt; &#xA; &lt;li&gt;print tokens usage? &lt;code&gt;.with_usage&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;support org_id? in the configs&lt;/li&gt; &#xA; &lt;li&gt;use &lt;code&gt;gpt&lt;/code&gt; in the code of the main app (e.g. model/controller)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are welcoming you to propose new prompts or adjust existing ones!&lt;/p&gt; &#xA;&lt;p&gt;To start just clone this repo. Run bundle, and go to &lt;code&gt;cd test/dummy/&lt;/code&gt;. Start &lt;code&gt;rails c&lt;/code&gt; and test your prompts.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.railsjazz.com/?utm_source=github&amp;amp;utm_medium=bottom&amp;amp;utm_campaign=ask_chatgpt&#34;&gt;&lt;img src=&#34;https://github.com/igorkasyanchuk/rails_time_travel/raw/main/docs/more_gems.png?raw=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sevenc-nanashi/pjsekai-exo</title>
    <updated>2023-04-25T01:42:54Z</updated>
    <id>tag:github.com,2023-04-25:/sevenc-nanashi/pjsekai-exo</id>
    <link href="https://github.com/sevenc-nanashi/pjsekai-exo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;プロセカ風動画作成補助ツール&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; このリポジトリはメンテナンスされていません。&lt;a href=&#34;https://github.com/sevenc-nanashi/pjsekai-overlay&#34;&gt;pjsekai-overlay&lt;/a&gt; を使用して下さい。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;pjsekai-exo / プロセカ風動画作成補助ツール&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92153597/158166638-b923ffb5-174f-404c-a863-1f48b57866f8.png#gh-dark-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/92153597/158166653-41b193c0-7f7e-4efd-b82e-cec338a68562.png#gh-light-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;pjsekai-exoは、プロセカの創作譜面をプロセカ風の動画にするためのオープンソースのツールです。&lt;/p&gt; &#xA;&lt;h2&gt;必須事項&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/ja/documentation/installation/&#34;&gt;Ruby 3.0 以上(with DevKit)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://spring-fragrance.mints.ne.jp/aviutl/&#34;&gt;AviUtl&lt;/a&gt; + &lt;a href=&#34;http://spring-fragrance.mints.ne.jp/aviutl/&#34;&gt;拡張編集プラグイン&lt;/a&gt; （&lt;a href=&#34;https://aviutl.info/dl-innsuto-ru/&#34;&gt;導入方法&lt;/a&gt;）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;動画の作り方&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.purplepalette.net/create-charts&#34;&gt;譜面を作る&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sonolus.com/&#34;&gt;Sonolus&lt;/a&gt;で譜面を撮影する &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fp.sevenc7c.com&#34;&gt;FriedPotato&lt;/a&gt;での撮影を推奨しています&lt;/li&gt; &#xA;   &lt;li&gt;以下の方法のいずれかを使ってUIを消してください。 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Sonolus の設定で、それぞれの UI項目の不透明度を0%にする&lt;/li&gt; &#xA;     &lt;li&gt;（FriedPotatoの場合）&lt;code&gt;Hide UI&lt;/code&gt;オプションを使う&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;撮影したプレイ動画のファイルをパソコンに転送する &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Google Driveなど&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ffmpeg.org/&#34;&gt;ffmpeg&lt;/a&gt;で再エンコードする &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AviUtlで読み込むため&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;下の利用方法に従ってUIを後付けする&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;利用方法&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;1334x750, 60fps でaviutlのプロジェクトを作成する&lt;/li&gt; &#xA; &lt;li&gt;右のReleasesから最新のバージョンをダウンロードする&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pjsekai-exo.exe&lt;/code&gt; を実行し、関係する情報を入力する&lt;/li&gt; &#xA; &lt;li&gt;dist/譜面ID にある exo ファイルをファイル名の数字に対応したシーンで読み込む（例：&lt;code&gt;00_root.exo&lt;/code&gt;はRootで、&lt;code&gt;01_main.exo&lt;/code&gt;はシーン1で）&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@プロセカ.obj&lt;/code&gt; ファイルをAviUtlのディレクトリの&lt;code&gt;/Plugins/script&lt;/code&gt;にコピーする（ファイル名は変えずに）&lt;/li&gt; &#xA; &lt;li&gt;シーンを設定する（下を参照）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;シーンの対応&lt;/h2&gt; &#xA;&lt;h3&gt;Root&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;オブジェクト&lt;/th&gt; &#xA;   &lt;th&gt;シーン&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Layer 1: 1..739&lt;/td&gt; &#xA;   &lt;td&gt;シーン3（&lt;code&gt;背景用&lt;/code&gt;）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Layer 2: 1..208&lt;/td&gt; &#xA;   &lt;td&gt;シーン2（&lt;code&gt;情報表示&lt;/code&gt;）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Layer 2: 209..&lt;/td&gt; &#xA;   &lt;td&gt;シーン1（&lt;code&gt;メイン&lt;/code&gt;）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;シーン3（&lt;code&gt;情報表示&lt;/code&gt;）&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;オブジェクト&lt;/th&gt; &#xA;   &lt;th&gt;シーン&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Layer 5&lt;/td&gt; &#xA;   &lt;td&gt;シーン3（&lt;code&gt;背景用&lt;/code&gt;）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;p&gt;動画の概要欄などに、&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;名無し｡&lt;/code&gt;という名前&lt;/li&gt; &#xA; &lt;li&gt;このリポジトリへのリンク&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;https://sevenc7c.com&lt;/code&gt;へのリンク&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;が含まれている文章を載せて下さい。&lt;/p&gt; &#xA;&lt;h4&gt;例&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;プロセカ風動画作成補助ツール：&#xA;  https://github.com/sevenc-nanashi/pjsekai-exo&#xA;  作成：名無し｡ （ https://sevenc7c.com ）&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>