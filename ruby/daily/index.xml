<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-01T01:42:56Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sous-chefs/apt</title>
    <updated>2024-01-01T01:42:56Z</updated>
    <id>tag:github.com,2024-01-01:/sous-chefs/apt</id>
    <link href="https://github.com/sous-chefs/apt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Development repository for the apt cookbook&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;apt Cookbook&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://supermarket.chef.io/cookbooks/apt&#34;&gt;&lt;img src=&#34;https://img.shields.io/cookbook/v/apt.svg?sanitize=true&#34; alt=&#34;Cookbook Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sous-chefs/apt/actions?query=workflow%3Aci&#34;&gt;&lt;img src=&#34;https://github.com/sous-chefs/apt/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;CI State&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sous-chefs/apt/main/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/sous-chefs/backers/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sous-chefs/apt/main/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/sous-chefs/sponsors/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This cookbook includes recipes to execute apt-get update to ensure the local APT package cache is up to date. There are recipes for managing the apt-cacher-ng caching proxy and proxy clients. It also includes a custom resource for pinning packages via /etc/apt/preferences.d.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;This cookbook is maintained by the Sous Chefs. The Sous Chefs are a community of Chef cookbook maintainers working together to maintain important cookbooks. If youâ€™d like to know more please visit &lt;a href=&#34;https://sous-chefs.org/&#34;&gt;sous-chefs.org&lt;/a&gt; or come chat with us on the Chef Community Slack in &lt;a href=&#34;https://chefcommunity.slack.com/messages/C2V7B88SF&#34;&gt;#sous-chefs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 12.04+&lt;/li&gt; &#xA; &lt;li&gt;Debian 7+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;May work with or without modification on other Debian derivatives.&lt;/p&gt; &#xA;&lt;h3&gt;Chef&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chef 13.3+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cookbooks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;None&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recipes&lt;/h2&gt; &#xA;&lt;h3&gt;default&lt;/h3&gt; &#xA;&lt;p&gt;This recipe manually updates the timestamp file used to only run &lt;code&gt;apt-get update&lt;/code&gt; if the cache is more than one day old.&lt;/p&gt; &#xA;&lt;p&gt;This recipe should appear first in the run list of Debian or Ubuntu nodes to ensure that the package cache is up to date before managing any &lt;code&gt;package&lt;/code&gt; resources with Chef.&lt;/p&gt; &#xA;&lt;p&gt;This recipe also sets up a local cache directory for preseeding packages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Including the default recipe on a node that does not support apt (such as Windows or RHEL) results in a noop.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;cacher-client&lt;/h3&gt; &#xA;&lt;p&gt;Configures the node to use a &lt;code&gt;apt-cacher-ng&lt;/code&gt; server to cache apt requests. Configuration of the server to use is located in &lt;code&gt;default[&#39;apt&#39;][&#39;cacher_client&#39;][&#39;cacher_server&#39;]&lt;/code&gt; which is a hash containing &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;proxy_ssl&lt;/code&gt;, and &lt;code&gt;bypass&lt;/code&gt; keys. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;apt&#34;: {&#xA;    &#34;cacher_client&#34;: {&#xA;      &#34;cacher_server&#34;: {&#xA;        &#34;host&#34;: &#34;cache_server.mycorp.dmz&#34;,&#xA;        &#34;port&#34;: 1234,&#xA;        &#34;proxy_ssl&#34;: true,&#xA;        &#34;cache_bypass&#34;: {&#xA;          &#34;download.oracle.com&#34;: &#34;http&#34;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bypassing the cache&lt;/h4&gt; &#xA;&lt;p&gt;Occasionally you may come across repositories that do not play nicely when the node is using an &lt;code&gt;apt-cacher-ng&lt;/code&gt; server. You can configure &lt;code&gt;cacher-client&lt;/code&gt; to bypass the server and connect directly to the repository with the &lt;code&gt;cache_bypass&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;p&gt;To do this, you need to override the &lt;code&gt;cache_bypass&lt;/code&gt; attribute with an hash of repositories, with each key as the repository URL and value as the protocol to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;apt&#34;: {&#xA;    &#34;cacher_client&#34;: {&#xA;      &#34;cacher_server&#34;: {&#xA;        &#34;cache_bypass&#34;: {&#xA;          &#34;URL&#34;: &#34;PROTOCOL&#34;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, to prevent caching and directly connect to the repository at &lt;code&gt;download.oracle.com&lt;/code&gt; via http and the repo at &lt;code&gt;nginx.org&lt;/code&gt; via https&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;apt&#34;: {&#xA;    &#34;cacher_client&#34;: {&#xA;      &#34;cacher_server&#34;: {&#xA;        &#34;cache_bypass&#34;: {&#xA;          &#34;download.oracle.com&#34;: &#34;http&#34;,&#xA;          &#34;nginx.org&#34;: &#34;https&#34;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;cacher-ng&lt;/h3&gt; &#xA;&lt;p&gt;Installs the &lt;code&gt;apt-cacher-ng&lt;/code&gt; package and service so the system can provide APT caching. You can check the usage report at &lt;a href=&#34;http://%7Bhostname%7D:3142/acng-report.html&#34;&gt;http://{hostname}:3142/acng-report.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to help the &lt;code&gt;cacher-ng&lt;/code&gt; recipe seed itself, you must now explicitly include the &lt;code&gt;cacher-client&lt;/code&gt; recipe in your run list &lt;strong&gt;after&lt;/strong&gt; &lt;code&gt;cacher-ng&lt;/code&gt; or you will block your ability to install any packages (ie. &lt;code&gt;apt-cacher-ng&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;unattended-upgrades&lt;/h3&gt; &#xA;&lt;p&gt;Installs and configures the &lt;code&gt;unattended-upgrades&lt;/code&gt; package to provide automatic package updates. This can be configured to upgrade all packages or to just install security updates by setting &lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;allowed_origins&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To pull just security updates, set &lt;code&gt;origins_patterns&lt;/code&gt; to something like &lt;code&gt;[&#34;origin=Ubuntu,archive=trusty-security&#34;]&lt;/code&gt; (for Ubuntu trusty) or &lt;code&gt;[&#34;origin=Debian,label=Debian-Security&#34;]&lt;/code&gt; (for Debian).&lt;/p&gt; &#xA;&lt;h2&gt;Attributes&lt;/h2&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;compile_time_update&#39;]&lt;/code&gt; - force the default recipe to run &lt;code&gt;apt-get update&lt;/code&gt; at compile time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;periodic_update_min_delay&#39;]&lt;/code&gt; - minimum delay (in seconds) between two actual executions of &lt;code&gt;apt-get update&lt;/code&gt; by the &lt;code&gt;execute[apt-get-update-periodic]&lt;/code&gt; resource, default is &#39;86400&#39; (24 hours)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Caching&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;cacher_client&#39;][&#39;cacher_server&#39;]&lt;/code&gt; - Hash containing server information used by clients for caching. See the example in the recipes section above for the full format of the hash.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;cacher_interface&#39;]&lt;/code&gt; - interface to connect to the cacher-ng service, no default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;cacher_port&#39;]&lt;/code&gt; - port for the cacher-ng service (used by server recipe only), default is &#39;3142&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;cacher_dir&#39;]&lt;/code&gt; - directory used by cacher-ng service, default is &#39;/var/cache/apt-cacher-ng&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;compiletime&#39;]&lt;/code&gt; - force the &lt;code&gt;cacher-client&lt;/code&gt; recipe to run before other recipes. It forces apt to use the proxy before other recipes run. Useful if your nodes have limited access to public apt repositories. This is overridden if the &lt;code&gt;cacher-ng&lt;/code&gt; recipe is in your run list. Default is &#39;false&#39;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unattended Upgrades&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;enable&#39;]&lt;/code&gt; - enables unattended upgrades, default is false&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;update_package_lists&#39;]&lt;/code&gt; - automatically update package list (&lt;code&gt;apt-get update&lt;/code&gt;) daily, default is true&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;allowed_origins&#39;]&lt;/code&gt; - array of allowed apt origins from which to pull automatic upgrades, defaults to a guess at the system&#39;s main origin and should almost always be overridden&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;origins_patterns&#39;]&lt;/code&gt; - array of allowed apt origin patterns from which to pull automatic upgrades, defaults to none.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;package_blacklist&#39;]&lt;/code&gt; - an array of package which should never be automatically upgraded, defaults to none&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;auto_fix_interrupted_dpkg&#39;]&lt;/code&gt; - attempts to repair dpkg state with &lt;code&gt;dpkg --force-confold --configure -a&lt;/code&gt; if it exits uncleanly, defaults to false (contrary to the unattended-upgrades default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;minimal_steps&#39;]&lt;/code&gt; - Split the upgrade into the smallest possible chunks. This makes the upgrade a bit slower but it has the benefit that shutdown while a upgrade is running is possible (with a small delay). Defaults to false.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;install_on_shutdown&#39;]&lt;/code&gt; - Install upgrades when the machine is shuting down instead of doing it in the background while the machine is running. This will (obviously) make shutdown slower. Defaults to false.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;mail&#39;]&lt;/code&gt; - Send email to this address for problems or packages upgrades. Defaults to no email.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;sender&#39;]&lt;/code&gt; - Send email from this address for problems or packages upgrades. Defaults to &#39;root&#39;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;mail_only_on_error&#39;]&lt;/code&gt; - If set, email will only be set on upgrade errors. Otherwise, an email will be sent after each upgrade. Defaults to true.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;remove_unused_dependencies&#39;]&lt;/code&gt; Do automatic removal of new unused dependencies after the upgrade. Defaults to false.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;automatic_reboot&#39;]&lt;/code&gt; - Automatically reboots &lt;em&gt;without confirmation&lt;/em&gt; if a restart is required after the upgrade. Defaults to false.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;dl_limit&#39;]&lt;/code&gt; - Limits the bandwidth used by apt to download packages. Value given as an integer in kb/sec. Defaults to nil (no limit).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;random_sleep&#39;]&lt;/code&gt; - Wait a random number of seconds up to this value before running daily periodic apt actions. System default is 1800 seconds (30 minutes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;syslog_enable&#39;]&lt;/code&gt; - Enable logging to syslog. Defaults to false.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;syslog_facility&#39;]&lt;/code&gt; - Specify syslog facility. Defaults to &#39;daemon&#39;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;unattended_upgrades&#39;][&#39;dpkg_options&#39;]&lt;/code&gt; An array of dpkg options to be used specifically only for unattended upgrades. Defaults to &lt;code&gt;[]&lt;/code&gt; which will prevent it from being rendered from the template in the resulting file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration for APT&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;confd&#39;][&#39;force_confask&#39;]&lt;/code&gt; - Prompt when overwriting configuration files. (default: false)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;confd&#39;][&#39;force_confdef&#39;]&lt;/code&gt; - Don&#39;t prompt when overwriting configuration files. (default: false)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;confd&#39;][&#39;force_confmiss&#39;]&lt;/code&gt; - Install removed configuration files when upgrading packages. (default: false)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;confd&#39;][&#39;force_confnew&#39;]&lt;/code&gt; - Overwrite configuration files when installing packages. (default: false)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;confd&#39;][&#39;force_confold&#39;]&lt;/code&gt; - Keep modified configuration files when installing packages. (default: false)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;confd&#39;][&#39;install_recommends&#39;]&lt;/code&gt; - Consider recommended packages as a dependency for installing. (default: true)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;apt&#39;][&#39;confd&#39;][&#39;install_suggests&#39;]&lt;/code&gt; - Consider suggested packages as a dependency for installing. (default: false)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;p&gt;There is an &lt;code&gt;interface_ipaddress&lt;/code&gt; method that returns the IP address for a particular host and interface, used by the &lt;code&gt;cacher-client&lt;/code&gt; recipe. To enable it on the server use the &lt;code&gt;[&#39;apt&#39;][&#39;cacher_interface&#39;]&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Put &lt;code&gt;recipe[apt]&lt;/code&gt; first in the run list. If you have other recipes that you want to use to configure how apt behaves, like new sources, notify the execute resource to run, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template &#39;/etc/apt/sources.list.d/my_apt_sources.list&#39; do&#xA;  notifies :run, &#39;execute[apt-get update]&#39;, :immediately&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will run during execution phase since it is a normal template resource, and should appear before other package resources that need the sources in the template.&lt;/p&gt; &#xA;&lt;p&gt;Put &lt;code&gt;recipe[apt::cacher-ng]&lt;/code&gt; in the run_list for a server to provide APT caching and add &lt;code&gt;recipe[apt::cacher-client]&lt;/code&gt; on the rest of the Debian-based nodes to take advantage of the caching server.&lt;/p&gt; &#xA;&lt;p&gt;If you want to cleanup unused packages, there is also the &lt;code&gt;apt-get autoclean&lt;/code&gt; and &lt;code&gt;apt-get autoremove&lt;/code&gt; resources provided for automated cleanup.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;apt_preference&lt;/h3&gt; &#xA;&lt;p&gt;The apt_preference resource has been moved into chef-client in Chef 13.3.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.chef.io/resource_apt_preference.html&#34;&gt;https://docs.chef.io/resource_apt_preference.html&lt;/a&gt; for usage details&lt;/p&gt; &#xA;&lt;h3&gt;apt_repository&lt;/h3&gt; &#xA;&lt;p&gt;The apt_repository resource has been moved into chef-client in Chef 12.9.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.chef.io/resource_apt_repository.html&#34;&gt;https://docs.chef.io/resource_apt_repository.html&lt;/a&gt; for usage details&lt;/p&gt; &#xA;&lt;h3&gt;apt_update&lt;/h3&gt; &#xA;&lt;p&gt;The apt_update resource has been moved into chef-client in Chef 12.7.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.chef.io/resource_apt_update.html&#34;&gt;https://docs.chef.io/resource_apt_update.html&lt;/a&gt; for usage details&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who &lt;a href=&#34;https://opencollective.com/sous-chefs/contributors.svg?width=890&amp;amp;button=false&#34;&gt;contribute.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our backers!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://opencollective.com/sous-chefs/backers.svg?width=600&amp;amp;avatarHeight=40&#34; alt=&#34;https://opencollective.com/sous-chefs#backers&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://opencollective.com/sous-chefs/sponsor/0/avatar.svg?avatarHeight=100&#34; alt=&#34;https://opencollective.com/sous-chefs/sponsor/0/website&#34;&gt; &lt;img src=&#34;https://opencollective.com/sous-chefs/sponsor/1/avatar.svg?avatarHeight=100&#34; alt=&#34;https://opencollective.com/sous-chefs/sponsor/1/website&#34;&gt; &lt;img src=&#34;https://opencollective.com/sous-chefs/sponsor/2/avatar.svg?avatarHeight=100&#34; alt=&#34;https://opencollective.com/sous-chefs/sponsor/2/website&#34;&gt; &lt;img src=&#34;https://opencollective.com/sous-chefs/sponsor/3/avatar.svg?avatarHeight=100&#34; alt=&#34;https://opencollective.com/sous-chefs/sponsor/3/website&#34;&gt; &lt;img src=&#34;https://opencollective.com/sous-chefs/sponsor/4/avatar.svg?avatarHeight=100&#34; alt=&#34;https://opencollective.com/sous-chefs/sponsor/4/website&#34;&gt; &lt;img src=&#34;https://opencollective.com/sous-chefs/sponsor/5/avatar.svg?avatarHeight=100&#34; alt=&#34;https://opencollective.com/sous-chefs/sponsor/5/website&#34;&gt; &lt;img src=&#34;https://opencollective.com/sous-chefs/sponsor/6/avatar.svg?avatarHeight=100&#34; alt=&#34;https://opencollective.com/sous-chefs/sponsor/6/website&#34;&gt; &lt;img src=&#34;https://opencollective.com/sous-chefs/sponsor/7/avatar.svg?avatarHeight=100&#34; alt=&#34;https://opencollective.com/sous-chefs/sponsor/7/website&#34;&gt; &lt;img src=&#34;https://opencollective.com/sous-chefs/sponsor/8/avatar.svg?avatarHeight=100&#34; alt=&#34;https://opencollective.com/sous-chefs/sponsor/8/website&#34;&gt; &lt;img src=&#34;https://opencollective.com/sous-chefs/sponsor/9/avatar.svg?avatarHeight=100&#34; alt=&#34;https://opencollective.com/sous-chefs/sponsor/9/website&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openSUSE/open-build-service</title>
    <updated>2024-01-01T01:42:56Z</updated>
    <id>tag:github.com,2024-01-01:/openSUSE/open-build-service</id>
    <link href="https://github.com/openSUSE/open-build-service" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build and distribute Linux packages from sources in an automatic, consistent and reproducible way #obs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/openSUSE/open-build-service&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/openSUSE/open-build-service.svg?style=svg&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/openSUSE/open-build-service&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/openSUSE/open-build-service/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/openSUSE/open-build-service&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/openSUSE/open-build-service.png&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://depfu.com/github/openSUSE/open-build-service?project=src%2Fapi%40Bundler&#34;&gt;&lt;img src=&#34;https://badges.depfu.com/badges/3c5817c5855d9da3eabf1b71d64c46c1/overview.svg?sanitize=true&#34; alt=&#34;Depfu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/6411&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/6411/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://build.opensuse.org/package/show/OBS:Server:Unstable/obs-server&#34;&gt;&lt;img src=&#34;https://build.opensuse.org/projects/OBS:Server:Unstable/packages/obs-server/badge.svg?type=default&amp;amp;repository=15.4&amp;amp;architecture=x86_64&#34; alt=&#34;build result&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Open Build Service&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.openbuildservice.org&#34;&gt;Open Build Service (OBS)&lt;/a&gt; is a generic system to build and distribute binary packages from sources in an automatic, consistent, and reproducible way. You can release packages as well as updates, add-ons, appliances, and entire distributions for a wide range of operating systems and hardware architectures. More information can be found on &lt;a href=&#34;https://www.openbuildservice.org&#34;&gt;openbuildservice.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The OBS consists of a backend and a frontend. The backend implements all the core functionality (i.e. building packages). The frontend provides a web application and XML API for interacting with the backend. Additionally, there is a command line client (osc) for the API which is developed in a &lt;a href=&#34;https://github.com/openSUSE/osc&#34;&gt;separate repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;The Open Build Service is Free Software and is released under the terms of the GPL, except where noted. Additionally, 3rd-party content (like, but not exclusively, the webui icon theme) may be released under a different license. Please check the respective files for details.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;You can discuss with the OBS Team via IRC on the channel &lt;a href=&#34;irc://irc.libera.chat/opensuse-buildservice&#34;&gt;#opensuse-buildservice&lt;/a&gt; or you can use our mailing list &lt;a href=&#34;mailto:opensuse-buildservice+subscribe@opensuse.org&#34;&gt;opensuse-buildservice@opensuse.org&lt;/a&gt;. Please refer to the openSUSE Mailing Lists &lt;a href=&#34;https://en.opensuse.org/openSUSE:Mailing_lists_subscription#Subscribing&#34;&gt;page&lt;/a&gt; to learn about our mailing list subscription and additional information.&lt;/p&gt; &#xA;&lt;h3&gt;Development / Contribution&lt;/h3&gt; &#xA;&lt;p&gt;If you want to contribute to the OBS, please checkout our &lt;a href=&#34;https://raw.githubusercontent.com/openSUSE/open-build-service/master/CONTRIBUTING.md&#34;&gt;contribution readme&lt;/a&gt;:-)&lt;/p&gt; &#xA;&lt;h2&gt;Source Code Repository Layout&lt;/h2&gt; &#xA;&lt;p&gt;The OBS source code repository is hosted on &lt;a href=&#34;https://github.com/opensuse/open-build-service&#34;&gt;Github&lt;/a&gt; and organized like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    dist          Files relevant for our distribution packages&#xA;    docs          Documentation, examples and schema files&#xA;    src/api       Rails app (Ruby on Rails)&#xA;    src/backend   Backend code (Perl)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To run the OBS in production, we recommend using our &lt;a href=&#34;https://openbuildservice.org/download/&#34;&gt;appliance&lt;/a&gt; which is the whole package: A recent and stable Linux Operating System (&lt;a href=&#34;https://www.opensuse.org&#34;&gt;openSUSE&lt;/a&gt;) bundled and pre-configured with all the server and OBS components you need to get going.&lt;/p&gt; &#xA;&lt;p&gt;If that is not for you because you have some special needs for your setup (e.g. different partition schema, SLES as base system, etc.), you can also install our packages and run a setup wizard. The docker-compose setup is meant only for development.&lt;/p&gt; &#xA;&lt;p&gt;After finishing the installation of your base system, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the OBS software repository with zypper. Please be aware, that the needed URL differs, depending on your Base Operating System. We use openSUSE Leap 15.4 in this example.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zypper ar -f https://download.opensuse.org/repositories/OBS:/Server:/2.10/15.4/OBS:Server:2.10.repo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the package&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zypper in -t pattern OBS_Server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run our setup wizard&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/usr/lib/obs/server/setup-appliance.sh --force&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Advanced Setup&lt;/h2&gt; &#xA;&lt;p&gt;If you have a more complex setup (e.g. a distributed backend), we recommend to read the Administration chapter in our &lt;a href=&#34;https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.admin.html&#34;&gt;user manual&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rails/rubocop-rails-omakase</title>
    <updated>2024-01-01T01:42:56Z</updated>
    <id>tag:github.com,2024-01-01:/rails/rubocop-rails-omakase</id>
    <link href="https://github.com/rails/rubocop-rails-omakase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Omakase Ruby styling for Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Omakase Ruby styling for Rails&lt;/h1&gt; &#xA;&lt;p&gt;Ruby is a beautifully expressive language that not only tolerates many different dialects, but celebrates their diversity. It was never meant as a language to be written exclusively in a single style across all libraries, frameworks, or applications. If you or your team has developed a particular house style that brings you joy, you should cherish that.&lt;/p&gt; &#xA;&lt;p&gt;This collection of Rubocop styles is for those who haven&#39;t committed to any specific dialect already. Who would just like to have a reasonable starting point, and who will benefit from some default rules to at least start a consistent approach to Ruby styling.&lt;/p&gt; &#xA;&lt;p&gt;These specific rules aren&#39;t right or wrong, but merely represent the idiosyncratic aesthetic sensibilities of Rails&#39; creator. Use them whole, use them as a starting point, use them as inspiration, or however you see fit.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This omakase style is automatically included with new Rails 8 applications. But if you&#39;re running an earlier version, you can easily add them yourself.&lt;/p&gt; &#xA;&lt;p&gt;First add this to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;rubocop-rails-omakase&#34;, require: false, group: [ :development ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;bundle&lt;/code&gt;, then &lt;code&gt;bundle binstubs rubocop&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then add a default &lt;code&gt;.rubocop.yml&lt;/code&gt; file in the root of your application with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# Omakase Ruby styling for Rails&#xA;inherit_gem:&#xA;  rubocop-rails-omakase: rubocop.yml&#xA;&#xA;# Your own specialized rules go here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can run &lt;code&gt;./bin/rubocop&lt;/code&gt; to check for compliance and &lt;code&gt;./bin/rubocop -a&lt;/code&gt; to automatically fix violations.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;These omakase styles are not intended as an invitation to bikeshed code style preferences. If you disagree with some of the rules incorporated here, you should specialize them in your own application. If you disagree with most of the rules, you should just create your own style guide from scratch.&lt;/p&gt; &#xA;&lt;p&gt;The only type of contributions that will be considered is those pertaining to bugs or obvious inconsistencies that remain in the spirit of the omakase collection.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This gem is released under the &lt;a href=&#34;https://opensource.org/license/mit/&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>