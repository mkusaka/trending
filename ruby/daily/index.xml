<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-24T01:35:19Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>testdouble/standard</title>
    <updated>2022-12-24T01:35:19Z</updated>
    <id>tag:github.com,2022-12-24:/testdouble/standard</id>
    <link href="https://github.com/testdouble/standard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸŒŸ Ruby Style Guide, with linter &amp; automatic code fixer&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Standard - Ruby style guide, linter, and formatter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/testdouble/standard/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/testdouble/standard/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/standard&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/standard.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This gem is a spiritual port of &lt;a href=&#34;https://standardjs.com&#34;&gt;StandardJS&lt;/a&gt; and aims to save you (and others!) time in the same three ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No configuration.&lt;/strong&gt; The easiest way to enforce consistent style in your project. Just drop it in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatically format code.&lt;/strong&gt; Just run &lt;code&gt;standardrb --fix&lt;/code&gt; and say goodbye to messy or inconsistent code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Catch style issues &amp;amp; programmer errors early.&lt;/strong&gt; Save precious code review time by eliminating back-and-forth between reviewer &amp;amp; contributor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;No decisions to make. It just works. Here&#39;s a &lt;a href=&#34;https://www.youtube.com/watch?v=uLyV5hOqGQ8&#34;&gt;âš¡ lightning talk âš¡&lt;/a&gt; about it.&lt;/p&gt; &#xA;&lt;p&gt;Install Standard by adding it to your Gemfile and running &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;standard&#34;, group: [:development, :test]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then run Standard from the command line with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ bundle exec standardrb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you&#39;d like, Standard can autocorrect your code by tacking on a &lt;code&gt;--fix&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;If your project uses Rake, adding &lt;code&gt;require &#34;standard/rake&#34;&lt;/code&gt; adds two tasks: &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;standard:fix&lt;/code&gt;. In most new projects, we tend to add the fixer variant to our default &lt;code&gt;rake&lt;/code&gt; task after our test command, similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;task default: [:test, &#34;standard:fix&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;StandardRB â€”&amp;nbsp;The Rules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2 spaces&lt;/strong&gt; â€“ for indentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Double quotes for string literals&lt;/strong&gt; - because pre-committing to whether you&#39;ll need interpolation in a string slows people down&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;1.9 hash syntax&lt;/strong&gt; - When all the keys in a hash literal are symbols, Standard enforces Ruby 1.9&#39;s &lt;code&gt;{hash: syntax}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Braces for single-line blocks&lt;/strong&gt; - Require &lt;code&gt;{&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt; for one-line blocks, but allow either braces or &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; for multiline blocks. Like using &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; for multiline blocks? Prefer &lt;code&gt;{&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt; when chaining? A fan of expressing intent with Jim Weirich&#39;s &lt;a href=&#34;http://www.virtuouscode.com/2011/07/26/the-procedurefunction-block-convention-in-ruby/&#34;&gt;semantic block&lt;/a&gt; approach? Standard lets you do you!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Leading dots on multi-line method chains&lt;/strong&gt; - chosen for &lt;a href=&#34;https://github.com/testdouble/standard/issues/75&#34;&gt;these&lt;/a&gt; reasons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Spaces inside blocks, but not hash literals&lt;/strong&gt; - In Ruby, the &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; characters do a lot of heavy lifting. To visually distinguish hash literals from blocks, Standard enforces that (like arrays), no leading or trailing spaces be added to pad hashes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;And a good deal more&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re familiar with &lt;a href=&#34;https://github.com/rubocop-hq/rubocop&#34;&gt;RuboCop&lt;/a&gt;, you can look at Standard&#39;s current base configuration in &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/standard/main/config/base.yml&#34;&gt;config/base.yml&lt;/a&gt;. In lieu of a separate changelog file, significant changes to the configuration will be documented as &lt;a href=&#34;https://github.com/testdouble/standard/releases&#34;&gt;GitHub release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve installed Standard, you should be able to use the &lt;code&gt;standardrb&lt;/code&gt; program. The simplest use case would be checking the style of all Ruby files in the current working directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec standardrb&#xA;standard: Use Ruby Standard Style (https://github.com/testdouble/standard)&#xA;standard: Run `standardrb --fix` to automatically fix some problems.&#xA;  /Users/code/cli.rb:31:23: Style/Semicolon: Do not use semicolons to terminate expressions.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally pass in a directory (or directories) using a glob pattern. Be sure to quote paths containing glob patterns so that they are expanded by &lt;code&gt;standardrb&lt;/code&gt; instead of your shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec standardrb &#34;lib/**/*.rb&#34; test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; by default, StandardRB will look for all &lt;code&gt;*.rb&lt;/code&gt; files (and some other files typically associated with Ruby like &lt;code&gt;*.gemspec&lt;/code&gt; and &lt;code&gt;Gemfile&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;If you want to add Standard to an existing project, but don&#39;t want to stop all development until you&#39;ve fixed every violation in every file, you can create a backlog of to-be-converted files by generating a TODO file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec standardrb --generate-todo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;.standard_todo.yml&lt;/code&gt; that lists all the files that contain errors. When you run Standard in the future, it will ignore these files as if they were listed under the &lt;code&gt;ignore&lt;/code&gt; section in the &lt;code&gt;.standard.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;As you refactor your existing project you can remove files from the list. You can also regenerate the TODO file at any time by re-running the above command.&lt;/p&gt; &#xA;&lt;h3&gt;Using with Rake&lt;/h3&gt; &#xA;&lt;p&gt;Standard also ships with Rake tasks. If you&#39;re using Rails, these should autoload and be available after installing Standard. Otherwise, just require the tasks in your &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;standard/rake&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are the tasks bundled with Standard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rake standard     # equivalent to running `standardrb`&#xA;$ rake standard:fix # equivalent to running `standardrb --fix`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also pass command line options to Standard&#39;s Rake tasks by embedding them in a &lt;code&gt;STANDARDOPTS&lt;/code&gt; environment variable (similar to how the Minitest Rake task accepts CLI options in &lt;code&gt;TESTOPTS&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# equivalent to `standardrb --format progress`:&#xA;$ rake standard STANDARDOPTS=&#34;--format progress&#34;&#xA;&#xA;# equivalent to `standardrb lib &#34;app/**/*&#34;`, to lint just certain paths:&#xA;$ rake standard STANDARDOPTS=&#34;lib \&#34;app/**/*\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What you might do if you&#39;re clever&lt;/h2&gt; &#xA;&lt;p&gt;If you want or need to configure Standard, there are a &lt;em&gt;handful&lt;/em&gt; of options available by creating a &lt;code&gt;.standard.yml&lt;/code&gt; file in the root of your project.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example yaml file with every option set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;fix: true               # default: false&#xA;parallel: true          # default: false&#xA;format: progress        # default: Standard::Formatter&#xA;ruby_version: 2.3.3     # default: RUBY_VERSION&#xA;default_ignores: false  # default: true&#xA;&#xA;ignore:                 # default: []&#xA;  - &#39;db/schema.rb&#39;&#xA;  - &#39;vendor/**/*&#39;&#xA;  - &#39;test/**/*&#39;:&#xA;    - Layout/AlignHash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you&#39;re running Standard in a context where your &lt;code&gt;.standard.yml&lt;/code&gt; file cannot be found by ascending the current working directory (i.e., against a temporary file buffer in your editor), you can specify the config location with &lt;code&gt;--config path/to/.standard.yml&lt;/code&gt;. (Similarly, for the &lt;code&gt;.standard_todo.yml&lt;/code&gt; file, you can specify &lt;code&gt;--todo path/to/.standard_todo.yml&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h2&gt;What you might do if you&#39;re REALLY clever&lt;/h2&gt; &#xA;&lt;p&gt;Because StandardRB is essentially a wrapper on top of &lt;a href=&#34;https://github.com/rubocop-hq/rubocop&#34;&gt;RuboCop&lt;/a&gt;, it will actually forward the vast majority of CLI and ENV arguments to RuboCop.&lt;/p&gt; &#xA;&lt;p&gt;You can see a list of &lt;a href=&#34;https://docs.rubocop.org/rubocop/usage/basic_usage.html#command-line-flags&#34;&gt;RuboCop&lt;/a&gt;&#39;s CLI flags here.&lt;/p&gt; &#xA;&lt;h2&gt;Why should I use Ruby Standard Style?&lt;/h2&gt; &#xA;&lt;p&gt;(This section will &lt;a href=&#34;https://github.com/standard/standard#why-should-i-use-javascript-standard-style&#34;&gt;look familiar&lt;/a&gt; if you&#39;ve used StandardJS.)&lt;/p&gt; &#xA;&lt;p&gt;The beauty of Ruby Standard Style is that it&#39;s simple. No one wants to maintain multiple hundred-line style configuration files for every module/project they work on. Enough of this madness!&lt;/p&gt; &#xA;&lt;p&gt;This gem saves you (and others!) time in four ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No configuration.&lt;/strong&gt; The easiest way to enforce consistent style in your project. Just drop it in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatically format code.&lt;/strong&gt; Just run &lt;code&gt;standardrb --fix&lt;/code&gt; and say goodbye to messy or inconsistent code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Catch style issues &amp;amp; programmer errors early.&lt;/strong&gt; Save precious code review time by eliminating back-and-forth between reviewer &amp;amp; contributor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deliberate pace.&lt;/strong&gt; We strive to take the hassle of upgrading Rubocop out of each individual team&#39;s hands and shoulder it ourselves. We enable about ~20% of new cops and generally choose conservative configurations for them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Adopting Standard style means ranking the importance of code clarity and community conventions higher than personal style. This might not make sense for 100% of projects and development cultures, however open source can be a hostile place for newbies. Setting up clear, automated contributor expectations makes a project healthier.&lt;/p&gt; &#xA;&lt;h2&gt;Usage via RuboCop&lt;/h2&gt; &#xA;&lt;p&gt;If you only want to use Standard&#39;s rules while continuing to use RuboCop&#39;s CLI (for example, to continue using your favorite IDE/tooling/workflow with RuboCop support), you can configure this in your &lt;code&gt;.rubocop.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;require: standard&#xA;&#xA;inherit_gem:&#xA;  standard: config/base.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Who uses Ruby Standard Style?&lt;/h2&gt; &#xA;&lt;p&gt;(This section will not &lt;a href=&#34;https://github.com/standard/standard#who-uses-javascript-standard-style&#34;&gt;look very familiar&lt;/a&gt; if you&#39;ve used StandardJS.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testdouble.com/agency&#34;&gt;Test Double&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/&#34;&gt;Amazon Web Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.babylist.com/&#34;&gt;Babylist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brandnewbox.com&#34;&gt;Brand New Box&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brave-intl/publishers&#34;&gt;Brave Software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://collectiveidea.com/&#34;&gt;Collective Idea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.culturefoundry.com/&#34;&gt;Culture Foundry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elevatelabs.com&#34;&gt;Elevate Labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.envoy.com&#34;&gt;Envoy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evilmartians.com&#34;&gt;Evil Martians&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firstline.org/&#34;&gt;Firstline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hashrocket.com&#34;&gt;Hashrocket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.honeybadger.io&#34;&gt;Honeybadger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetthoughts.com/&#34;&gt;JetThoughts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://levups.com&#34;&gt;Level UP Solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.monterail.com&#34;&gt;Monterail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.myrent.co.nz&#34;&gt;myRent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oysterhr.com/&#34;&gt;Oyster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.planetargon.com/&#34;&gt;Planet Argon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.podia.com/&#34;&gt;Podia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rebaseinteractive.com/&#34;&gt;Rebase Interactive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.renuo.ch/&#34;&gt;Renuo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruby.ci&#34;&gt;RubyCI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thoughtbot.com/&#34;&gt;thoughtbot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your team starts using Standard, &lt;a href=&#34;https://github.com/testdouble/standard/edit/main/README.md&#34;&gt;send a pull request&lt;/a&gt; to let us know!&lt;/p&gt; &#xA;&lt;h2&gt;Is there a readme badge?&lt;/h2&gt; &#xA;&lt;p&gt;Yes! If you use Standard in your project, you can include one of these badges in your readme to let people know that your code is using the StandardRB style.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;[![Ruby Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://github.com/testdouble/standard)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;I disagree with rule X, can you change it?&lt;/h2&gt; &#xA;&lt;p&gt;No. The whole point of Standard is to save you time by avoiding &lt;a href=&#34;https://www.freebsd.org/doc/en/books/faq/misc.html#bikeshed-painting&#34;&gt;bikeshedding&lt;/a&gt; about code style. There are lots of debates online about tabs vs. spaces, etc. that will never be resolved. These debates just distract from getting stuff done. At the end of the day you have to &#39;just pick something&#39;, and that&#39;s the whole philosophy of Standard -- it&#39;s a bunch of sensible &#39;just pick something&#39; opinions. Hopefully, users see the value in that over defending their own opinions.&lt;/p&gt; &#xA;&lt;p&gt;Pro tip: Just use Standard and move on. There are actual real problems that you could spend your time solving! :P&lt;/p&gt; &#xA;&lt;h2&gt;Is there an automatic formatter?&lt;/h2&gt; &#xA;&lt;p&gt;Yes! You can use &lt;code&gt;standardrb --fix&lt;/code&gt; to fix most issues automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;standardrb --fix&lt;/code&gt; is built into &lt;code&gt;standardrb&lt;/code&gt; for maximum convenience. Most problems are fixable, but some errors must be fixed manually.&lt;/p&gt; &#xA;&lt;h2&gt;Can I override the &lt;code&gt;fix: true&lt;/code&gt; config setting?&lt;/h2&gt; &#xA;&lt;p&gt;Also yes! You can use &lt;code&gt;standardrb --no-fix&lt;/code&gt;. Not &lt;code&gt;fix&lt;/code&gt;ing is the default behavior, but this flag will override the &lt;code&gt;fix: true&lt;/code&gt; setting in your &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/standard/main/#what-you-might-do-if-youre-clever&#34;&gt;&lt;code&gt;.standard.yml&lt;/code&gt; config&lt;/a&gt;. This is especially useful for checking your project&#39;s compliance with &lt;code&gt;standardrb&lt;/code&gt; in CI environments while keeping the &lt;code&gt;fix: true&lt;/code&gt; option enabled locally.&lt;/p&gt; &#xA;&lt;h2&gt;How do I ignore files?&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you need to ignore additional folders or specific minified files. To do that, add a &lt;code&gt;.standard.yml&lt;/code&gt; file to the root of your project and specify a list of files and globs that should be excluded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignore:&#xA;  - &#39;some/file/in/particular.rb&#39;&#xA;  - &#39;a/whole/directory/**/*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see the files Standard ignores by default &lt;a href=&#34;https://github.com/testdouble/standard/raw/main/lib/standard/creates_config_store/configures_ignored_paths.rb#L3-L13&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How do I hide a certain warning?&lt;/h2&gt; &#xA;&lt;p&gt;In rare cases, you&#39;ll need to break a rule and hide the warning generated by Standard.&lt;/p&gt; &#xA;&lt;p&gt;Ruby Standard Style uses &lt;a href=&#34;https://github.com/rubocop-hq/rubocop&#34;&gt;RuboCop&lt;/a&gt; under-the-hood and you can hide warnings as you normally would if you used RuboCop directly.&lt;/p&gt; &#xA;&lt;p&gt;To ignore only certain rules from certain globs (not recommended, but maybe your test suite uses a non-standardable DSL, you can specify an array of RuboCop rules to ignore for a particular glob:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignore:&#xA;  - &#39;test/**/*&#39;:&#xA;    - Layout/EndAlignment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do I disable a warning within my source code?&lt;/h2&gt; &#xA;&lt;p&gt;You can also use special comments to disable all or certain rules within your source code.&lt;/p&gt; &#xA;&lt;p&gt;Given this source listing &lt;code&gt;foo.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;baz = 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;standard foo.rb&lt;/code&gt; would fail:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foo.rb:1:1: Lint/UselessAssignment: Useless assignment to variable - `baz`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we wanted to make an exception, we could add the following comment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;baz = 42 # standard:disable Lint/UselessAssignment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comment directives (both &lt;code&gt;standard:disable&lt;/code&gt; and &lt;code&gt;rubocop:disable&lt;/code&gt;) will suppress the error and Standard would succeed.&lt;/p&gt; &#xA;&lt;p&gt;If, however, you needed to disable standard for multiple lines, you could use open and closing directives like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# standard:disable Layout/IndentationWidth&#xA;def foo&#xA;    123&#xA;end&#xA;# standard:enable Layout/IndentationWidth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you don&#39;t know or care which rule is being violated, you can also substitute its name for &#34;all&#34;. This line actually triggers three different violations, so we can suppress them like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;baz = [&#39;a&#39;].each do end # standard:disable all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do I specify a Ruby version? What is supported?&lt;/h2&gt; &#xA;&lt;p&gt;Because Standard wraps RuboCop, they share the same &lt;a href=&#34;https://github.com/rubocop-hq/rubocop#compatibility&#34;&gt;runtime requirements&lt;/a&gt;â€”currently, that&#39;s MRI 2.3 and newer. While Standard can&#39;t avoid this runtime requirement, it does allow you to lint codebases that target Ruby versions older than 2.3 by narrowing the ruleset somewhat.&lt;/p&gt; &#xA;&lt;p&gt;Standard will default to telling RuboCop to target the currently running version of Ruby (by inspecting &lt;code&gt;RUBY_VERSION&lt;/code&gt; at runtime. But if you want to lock it down, you can specify &lt;code&gt;ruby_version&lt;/code&gt; in &lt;code&gt;.standard.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ruby_version: 1.8.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/testdouble/suture/raw/main/.standard.yml&#34;&gt;testdouble/suture&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a little confusing to consider, but the targeted Ruby version for linting may or may not match the version of the runtime (suppose you&#39;re on Ruby 2.5.1, but your library supports Ruby 2.3.0). In this case, specify &lt;code&gt;ruby_version&lt;/code&gt; and you should be okay. However, note that if you target a &lt;em&gt;newer&lt;/em&gt; Ruby version than the runtime, RuboCop may behave in surprising or inconsistent ways.&lt;/p&gt; &#xA;&lt;p&gt;If you are targeting a Ruby older than 2.3 and run into an issue, check out Standard&#39;s &lt;a href=&#34;https://github.com/testdouble/standard/tree/main/config&#34;&gt;version-specific RuboCop configurations&lt;/a&gt; and consider helping out by submitting a pull request if you find a rule that won&#39;t work for older Rubies.&lt;/p&gt; &#xA;&lt;h2&gt;How do I change the output?&lt;/h2&gt; &#xA;&lt;p&gt;Standard&#39;s built-in formatter is intentionally minimal, printing only unfixed failures or (when successful) printing nothing at all. If you&#39;d like to use a different formatter, you can specify any of RuboCop&#39;s built-in formatters or write your own.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you&#39;d like to see colorful progress dots, you can either run Standard with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec standardrb --format progress&#xA;Inspecting 15 files&#xA;...............&#xA;&#xA;15 files inspected, no offenses detected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, in your project&#39;s &lt;code&gt;.standard.yml&lt;/code&gt; file, specify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;format: progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to RuboCop&#39;s &lt;a href=&#34;https://rubocop.readthedocs.io/en/latest/formatters/&#34;&gt;documentation on formatters&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;How do I run Standard in my editor?&lt;/h2&gt; &#xA;&lt;p&gt;It can be very handy to know about failures while editing to shorten the feedback loop.&lt;/p&gt; &#xA;&lt;h3&gt;Language Server Protocol support&lt;/h3&gt; &#xA;&lt;p&gt;To provide immediate feedback of Standard violations and support autofixing of your code while avoiding the performance cost of starting and stopping the &lt;code&gt;standardrb&lt;/code&gt; binary repeatedly, Standard Ruby ships with a built-in &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;Language Server Protocol&lt;/a&gt; server, which is powered by the &lt;a href=&#34;https://github.com/mtsmfm/language_server-protocol-ruby&#34;&gt;language_server-protocol gem&lt;/a&gt; and can be activated from the command line with the &lt;code&gt;--lsp&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;Most likely, you&#39;d instantiate this server indirectly in your editor&#39;s configuration, as can be demonstrated easily with &lt;a href=&#34;https://github.com/testdouble/standard/wiki/IDE:-neovim&#34;&gt;neovim&lt;/a&gt;. Theoretically, this feature could be leveraged by a purpose-built editor plugin to performantly format and fix your code. (If you&#39;re looking for a project, we&#39;d love to see one created for VS Code!)&lt;/p&gt; &#xA;&lt;h3&gt;Editor-specific guides&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/testdouble/standard/wiki/IDE:-Atom&#34;&gt;Atom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julianrubisch/flycheck-standardrb&#34;&gt;emacs (via flycheck)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/ruby/rubocop.html#disable_rubocop&#34;&gt;RubyMine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/testdouble/standard/wiki/IDE:-vim&#34;&gt;vim (via ALE)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/testdouble/standard/wiki/IDE:-neovim&#34;&gt;neovim (via LSP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/testdouble/standard/wiki/IDE:-vscode&#34;&gt;VS Code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why aren&#39;t &lt;code&gt;frozen_string_literal: true&lt;/code&gt; magic comments enforced?&lt;/h2&gt; &#xA;&lt;p&gt;Standard does not take a stance on whether you should plaster a &lt;a href=&#34;https://docs.ruby-lang.org/en/3.0/doc/syntax/comments_rdoc.html#label-Magic+Comments&#34;&gt;frozen_string_literal magic comment&lt;/a&gt; directive at the top of every file. Enforcing use of the comment became popular when it was believed that string literals would be frozen by default in a future version of Ruby, but &lt;a href=&#34;https://bugs.ruby-lang.org/issues/11473#note-53&#34;&gt;according to Matz&lt;/a&gt; there are no (longer any) such plans.&lt;/p&gt; &#xA;&lt;p&gt;Aside from one&#39;s personal opinion on the degree to which the comment is an eyesore, the decision to include the magic comment at the top of every file listing ought to be made based on the performance characteristics of each project (e.g. whether it defines a significant number of string literals, whether the commensurate memory usage is a material constraint, whether the code is run as a one-off command or a long-lived server application). These tend to indicate whether the magic comment might lead to meaningful reductions in memory usage.&lt;/p&gt; &#xA;&lt;p&gt;Because Standard is intended to be used as a default for every kind of Ruby fileâ€”from shell scripts to Rails appsâ€”it wouldn&#39;t be appropriate for Standard to either enforce or preclude the magic comment. Instead, you might consider either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Measuring memory performance by enabling frozen string literals as the default at runtime (with &lt;code&gt;RUBYOPT=--enable-frozen-string-literal&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Introducing the &lt;a href=&#34;https://github.com/Invoca/magic_frozen_string_literal&#34;&gt;magic_frozen_string_literal&lt;/a&gt; gem to your build, which will automatically ensure that the comment is prepended for every applicable file in your project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How do I use Standard with RuboCop extensions?&lt;/h2&gt; &#xA;&lt;p&gt;This is not officially supported by Standard. However, Evil Martians wrote up &lt;a href=&#34;https://evilmartians.com/chronicles/rubocoping-with-legacy-bring-your-ruby-code-up-to-standard&#34;&gt;a regularly updated guide&lt;/a&gt; on how to do so.&lt;/p&gt; &#xA;&lt;h2&gt;Does Standard work with [Insert other tool name here]?&lt;/h2&gt; &#xA;&lt;p&gt;Maybe! Start by searching the repository to see if there&#39;s an existing issue open for the tool you&#39;re interested in. That aside, here are other known integrations aside from editor plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/testdouble/standard/wiki/CI:-Code-Climate&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julianrubisch/pronto-standardrb&#34;&gt;Pronto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lakim/spring-commands-standard&#34;&gt;Spring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JodyVanden/guard-standardrb&#34;&gt;Guard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ashfurrow/danger-rubocop/&#34;&gt;Danger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Follow the steps below to setup standard locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/testdouble/standard&#xA;$ cd standard&#xA;$ gem install bundler # if working with ruby version below 2.6.0&#xA;$ bundle install&#xA;$ bundle exec rake # to run test suite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project follows Test Double&#39;s &lt;a href=&#34;https://testdouble.com/code-of-conduct&#34;&gt;code of conduct&lt;/a&gt; for all community interactions, including (but not limited to) one-on-one communications, public posts/comments, code reviews, pull requests, and GitHub issues. If violations occur, Test Double will take any action they deem appropriate for the infraction, up to and including blocking a user from the organization&#39;s repositories.&lt;/p&gt;</summary>
  </entry>
</feed>