<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-23T01:42:53Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>softwareinmotion/ibanizator</title>
    <updated>2024-01-23T01:42:53Z</updated>
    <id>tag:github.com,2024-01-23:/softwareinmotion/ibanizator</id>
    <link href="https://github.com/softwareinmotion/ibanizator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby gem for calculating iban out of account details.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ibanizator &lt;a href=&#34;https://github.com/softwareinmotion/ibanizator/actions/workflows/ruby.yml&#34;&gt;&lt;img src=&#34;https://github.com/softwareinmotion/ibanizator/actions/workflows/ruby.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;ibanizator calculates the iban for german accounts. The database that is used to convert a bank number to a BIC is taken from &lt;a href=&#34;https://www.bundesbank.de/en/tasks/payment-systems/services/bank-sort-codes/download-bank-sort-codes-626218&#34;&gt;Deutsche Bundesbank&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;ibanizator&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Calculate IBAN&lt;/h3&gt; &#xA;&lt;p&gt;To calculate the iban for some german accounts, just use this method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ibanizator = Ibanizator.new&#xA;ibanizator.calculate_iban country_code: :de, bank_code: &#39;12345678&#39;, account_number: &#39;123456789&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the current version the ibanizator gem only works for german accounts.&lt;/p&gt; &#xA;&lt;h3&gt;Validate an IBAN&lt;/h3&gt; &#xA;&lt;p&gt;To validate the iban you need to check the length and after this check the checksum. For details please refer to the documentation online (e.g. &lt;a href=&#34;http://es.wikipedia.org/wiki/IBAN&#34;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This gem provides a simple validator for several contries. All countries that are listed in the Ibanizator::Iban::LENGTHS hash are supported at the moment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;iban = Ibanizator.iban_from_string(&#34;DE68 2105 0170 0012 3456 78&#34;)&#xA;iban.valid? # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Information provided by an IBAN&lt;/h3&gt; &#xA;&lt;p&gt;The Ibanizator::Iban class provides some handy utility methods to query information about an iban.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;iban = Ibanizator.iban_from_string(&#34;DE68 2105 0170 0012 3456 78&#34;)&#xA;iban.country_code # =&amp;gt; :DE&#xA;&#xA;# there is extended data for german ibans&#xA;iban.extended_data.bank_code        # =&amp;gt; &#34;21050170&#34;&#xA;iban.extended_data.account_number   # =&amp;gt; &#34;12345678&#34;&#xA;iban.extended_data.bic              # =&amp;gt; &#34;NOLADE21KIE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Find bank infos&lt;/h3&gt; &#xA;&lt;p&gt;If you need to get a bank name, bank code or a bic from a german bank and you have either a BIC or a bank code there is a bank db.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# find a bank by BIC&#xA;bank_1 = Ibanizator.bank_db.bank_by_bic(&#39;MARKDEF1100&#39;)&#xA;bank_1.name       # =&amp;gt; &#39;BBk Berlin&#39;&#xA;bank_1.bic        # =&amp;gt; &#39;MARKDEF1100&#39;&#xA;bank_1.bank_code  # =&amp;gt; &#39;10000000&#39;&#xA;&#xA;# find a bank by bank_code (de: Bankleitzahl)&#xA;bank_2 = Ibanizator.bank_db.bank_by_bank_code(&#39;100 000 00&#39;)&#xA;bank_2.name       # =&amp;gt; &#39;BBk Berlin&#39;&#xA;bank_2.bic        # =&amp;gt; &#39;MARKDEF1100&#39;&#xA;bank_2.bank_code  # =&amp;gt; &#39;10000000&#39;&#xA;&#xA;bank_3 = Ibanizator.bank_db.bank_by_bank_code(&#39;10000000&#39;)&#xA;bank_3.name       # =&amp;gt; &#39;BBk Berlin&#39;&#xA;bank_3.bic        # =&amp;gt; &#39;MARKDEF1100&#39;&#xA;bank_3.bank_code  # =&amp;gt; &#39;10000000&#39;&#xA;&#xA;bank_1 == bank_2  # =&amp;gt; true&#xA;bank_2 == bank_3  # =&amp;gt; true&#xA;&#xA;bank_4 = Ibanizator.bank_db.bank_by_bic(&#39;OASPDE6AXXX&#39;)&#xA;bank_4 == bank_2  # =&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;The code is availiable under the MIT-Licence&lt;/p&gt;</summary>
  </entry>
</feed>