<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-06T01:35:31Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antiwork/gumroad</title>
    <updated>2025-07-06T01:35:31Z</updated>
    <id>tag:github.com,2025-07-06:/antiwork/gumroad</id>
    <link href="https://github.com/antiwork/gumroad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source srcset=&#34;https://public-files.gumroad.com/logo/gumroad-dark.svg&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;  &lt;source srcset=&#34;https://public-files.gumroad.com/logo/gumroad.svg&#34; media=&#34;(prefers-color-scheme: light)&#34;&gt; &#xA;  &lt;img src=&#34;https://public-files.gumroad.com/logo/gumroad.svg?sanitize=true&#34; height=&#34;100&#34; alt=&#34;Gumroad logo&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;Sell your stuff. See what sticks.&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gumroad.com&#34;&gt;Gumroad&lt;/a&gt; is an e-commerce platform that enables creators to sell products directly to consumers. This repository contains the source code for the Gumroad web application. &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#running-locally&#34;&gt;Running Locally&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#development&#34;&gt;Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#logging-in&#34;&gt;Logging in&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#resetting-elasticsearch-indices&#34;&gt;Resetting Elasticsearch indices&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#push-notifications&#34;&gt;Push Notifications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#common-development-tasks&#34;&gt;Common Development Tasks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#linting&#34;&gt;Linting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ’¡ If you&#39;re on Windows, follow our &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/docs/development/windows.md&#34;&gt;Windows setup guide&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Before you begin, ensure you have the following installed:&lt;/p&gt; &#xA;&lt;h4&gt;Ruby&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/documentation/installation/&#34;&gt;https://www.ruby-lang.org/en/documentation/installation/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the version listed in &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/.ruby-version&#34;&gt;the .ruby-version file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;https://nodejs.org/en/download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the version listed in &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/.node-version&#34;&gt;the .node-version file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;We use Docker to setup the services for development environment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS: Download the Docker app from the &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Linux:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo wget -qO- https://get.docker.com/ | sh&#xA;sudo usermod -aG docker $(whoami)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MySQL &amp;amp; Percona Toolkit&lt;/h4&gt; &#xA;&lt;p&gt;Install a local version of MySQL 8.0.x to match the version running in production.&lt;/p&gt; &#xA;&lt;p&gt;The local version of MySQL is a dependency of the Ruby &lt;code&gt;mysql2&lt;/code&gt; gem. You do not need to start an instance of the MySQL service locally. The app will connect to a MySQL instance running in the Docker container.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install mysql@8.0 percona-toolkit&#xA;brew link --force mysql@8.0&#xA;&#xA;# to use Homebrew&#39;s `openssl`:&#xA;brew install openssl&#xA;bundle config --global build.mysql2 --with-opt-dir=&#34;$(brew --prefix openssl)&#34;&#xA;&#xA;# ensure MySQL is not running as a service&#xA;brew services stop mysql@8.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Linux: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MySQL: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;apt install libmysqlclient-dev&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Percona Toolkit: &lt;a href=&#34;https://www.percona.com/doc/percona-toolkit/LATEST/installation.html&#34;&gt;https://www.percona.com/doc/percona-toolkit/LATEST/installation.html&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Image Processing Libraries&lt;/h4&gt; &#xA;&lt;h5&gt;ImageMagick&lt;/h5&gt; &#xA;&lt;p&gt;We use &lt;code&gt;imagemagick&lt;/code&gt; for preview editing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS: &lt;code&gt;brew install imagemagick&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Linux: &lt;code&gt;sudo apt-get install imagemagick&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;libvips&lt;/h5&gt; &#xA;&lt;p&gt;For newer image formats we use &lt;code&gt;libvips&lt;/code&gt; for image processing with ActiveStorage.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS: &lt;code&gt;brew install libvips&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Linux: &lt;code&gt;sudo apt-get install libvips-dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;FFmpeg&lt;/h4&gt; &#xA;&lt;p&gt;We use &lt;code&gt;ffprobe&lt;/code&gt; that comes with &lt;code&gt;FFmpeg&lt;/code&gt; package to fetch metadata from video files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS: &lt;code&gt;brew install ffmpeg&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Linux: &lt;code&gt;sudo apt-get install ffmpeg&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;PDFtk&lt;/h4&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://www.pdflabs.com/tools/pdftk-server/&#34;&gt;pdftk&lt;/a&gt; to stamp PDF files with the Gumroad logo and the buyers&#39; emails.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS: Download from &lt;a href=&#34;https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/pdftk_server-2.02-mac_osx-10.11-setup.pkg&#34;&gt;here&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; pdftk may be blocked by Apple&#39;s firewall. If this happens, go to Settings &amp;gt; Privacy &amp;amp; Security and click &#34;Open Anyways&#34; to allow the installation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For Linux: &lt;code&gt;sudo apt-get install pdftk&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Bundler and gems&lt;/h4&gt; &#xA;&lt;p&gt;We use Bundler to install Ruby gems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure Bundler to install gems without production or staging dependencies by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle config --local without production staging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install gems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also make sure to install &lt;code&gt;dotenv&lt;/code&gt; as it is required for some console commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install dotenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;npm and Node.js dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Make sure the correct version of &lt;code&gt;npm&lt;/code&gt; is enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;corepack enable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Set up Custom credentials&lt;/h4&gt; &#xA;&lt;p&gt;App can be booted without any custom credentials. But if you would like to use services that require custom credentials (e.g. S3, Stripe, Resend, etc.), you can copy the &lt;code&gt;.env.example&lt;/code&gt; file to &lt;code&gt;.env&lt;/code&gt; and fill in the values.&lt;/p&gt; &#xA;&lt;h4&gt;Local SSL Certificates&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install mkcert on macOS:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install mkcert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For other operating systems, see &lt;a href=&#34;https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation&#34;&gt;mkcert installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Generate certificates by running:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/generate_ssl_certificates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Locally&lt;/h3&gt; &#xA;&lt;h4&gt;Start Docker services&lt;/h4&gt; &#xA;&lt;p&gt;If you installed Docker Desktop (on a Mac or Windows machine), you can run the following command to start the Docker services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are on Linux, or installed Docker via a package manager on a mac, you may have to manually give docker superuser access to open ports 80 and 443. To do that, use &lt;code&gt;sudo make local&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;This command will not terminate. You run this in one tab and start the application in another tab. If you want to run Docker services in the background, use &lt;code&gt;LOCAL_DETACHED=true make local&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h4&gt;Set up the database&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails db:prepare&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Linux (Debian / Ubuntu) you might need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;apt install libxslt-dev libxml2-dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Start the application&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This starts the Rails server, the JavaScript build system, and a Sidekiq worker.&lt;/p&gt; &#xA;&lt;p&gt;You can now access the application at &lt;code&gt;https://gumroad.dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Logging in&lt;/h3&gt; &#xA;&lt;p&gt;You can log in with the username &lt;code&gt;seller@gumroad.com&lt;/code&gt; and the password &lt;code&gt;password&lt;/code&gt;. The two-factor authentication code is &lt;code&gt;000000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read more about logging in as a user with a different team role at &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/docs/users.md&#34;&gt;Users &amp;amp; authentication&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Resetting Elasticsearch indices&lt;/h3&gt; &#xA;&lt;p&gt;You will need to explicitly reindex Elasticsearch to populate the indices after setup, otherwise you will see &lt;code&gt;index_not_found_exception&lt;/code&gt; errors when you visit the dev application. You can reset them using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Run this in a rails console:&#xA;DevTools.delete_all_indices_and_reindex_all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Push Notifications&lt;/h3&gt; &#xA;&lt;p&gt;To send push notifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;INITIALIZE_RPUSH_APPS=true bundle exec rpush start -e development -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common Development Tasks&lt;/h3&gt; &#xA;&lt;h4&gt;Rails console:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rake tasks:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rake task_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;p&gt;We use ESLint for JS, and Rubocop for Ruby. Your editor should support displaying and fixing issues reported by these inline, and CI will automatically check and fix (if possible) these.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like, you can run &lt;code&gt;git config --local core.hooksPath .githooks&lt;/code&gt; to check for these locally when committing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>grodowski/undercover</title>
    <updated>2025-07-06T01:35:31Z</updated>
    <id>tag:github.com,2025-07-06:/grodowski/undercover</id>
    <link href="https://github.com/grodowski/undercover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;undercover warns about methods, classes and blocks that were changed without tests, to help you easily find untested code and reduce the number of bugs. It does so by analysing data from git diffs, code structure and SimpleCov coverage reports&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/grodowski/undercover/assets/4991698/c4bf038b-4472-4406-8f1f-5ddc812908d6&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;undercover&lt;/code&gt; warns about methods, classes and blocks that &lt;strong&gt;were changed without tests&lt;/strong&gt;, to help you easily find untested code and reduce the number of bugs. It does so by analysing data from git diffs, code structure and SimpleCov coverage reports.&lt;/p&gt; &#xA;&lt;p&gt;Works with any Ruby CI pipeline as well as locally as a CLI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visit &lt;strong&gt;&lt;a href=&#34;https://undercover-ci.com&#34;&gt;https://undercover-ci.com&lt;/a&gt;&lt;/strong&gt; to set up code review checks with the GitHub App, or use one of the &lt;a href=&#34;https://raw.githubusercontent.com/grodowski/undercover/master/#code-review-integrations&#34;&gt;CI integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Learn how to find untested code changes locally with the &lt;a href=&#34;https://raw.githubusercontent.com/grodowski/undercover/master/#usage&#34;&gt;CLI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grodowski/undercover/actions&#34;&gt;&lt;img src=&#34;https://github.com/grodowski/undercover/actions/workflows/ruby.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/gem/dt/undercover&#34; alt=&#34;Downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A sample output of &lt;code&gt;undercover&lt;/code&gt; ran before a commit may look like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/grodowski/undercover/master/docs/screenshot_warnings.png&#34; alt=&#34;screenshot warning&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;And like this, given that specs were added:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/grodowski/undercover/master/docs/screenshot_success.png&#34; alt=&#34;screenshot success&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;undercover&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install undercover&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setting up coverage reporting&lt;/h2&gt; &#xA;&lt;p&gt;To make your specs or tests compatible with &lt;code&gt;undercover&lt;/code&gt;, please add &lt;code&gt;undercover&lt;/code&gt; to your gemfile to use the undercover formatter the test helper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile&#xA;group :test do&#xA;  gem &#39;undercover&#39;&#xA;end&#xA;&#xA;# the very top of spec_helper.rb&#xA;require &#39;simplecov&#39;&#xA;require &#39;undercover/simplecov_formatter&#39;&#xA;&#xA;# optional, will default to coverage.json&#xA;SimpleCov::Formatter::Undercover.output_filename = &#39;my_project_coverage.json&#39;&#xA;SimpleCov.formatter = SimpleCov::Formatter::Undercover&#xA;&#xA;SimpleCov.start do&#xA;  add_filter(/^\/spec\//) # For RSpec&#xA;  add_filter(/^\/test\//) # For Minitest&#xA;  enable_coverage(:branch) # Report branch coverage to trigger branch-level undercover warnings&#xA;end&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run your test suite once through to generate the initial coverage file before you can run the &lt;code&gt;undercover&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading from pre-0.7.0&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re upgrading from an older version of undercover that used LCOV, you can migrate to the new SimpleCov formatter:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;gem &#39;undercover&#39;&lt;/code&gt; to your test group&lt;/li&gt; &#xA; &lt;li&gt;Replace the LCOV formatter setup with the new SimpleCov formatter&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile&#xA;group :test do&#xA;  gem &#39;simplecov&#39;&#xA;  gem &#39;simplecov_json_formatter&#39;&#xA;  gem &#39;undercover&#39;&#xA;end&#xA;&#xA;# spec_helper.rb&#xA;require &#39;simplecov&#39;&#xA;require &#39;undercover/simplecov_formatter&#39;&#xA;SimpleCov.formatter = SimpleCov::Formatter::Undercover&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Update CLI usage: Use &lt;code&gt;--simplecov&lt;/code&gt; flag instead of &lt;code&gt;--lcov&lt;/code&gt;, or rely on auto-detection of &lt;code&gt;coverage/coverage.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: LCOV support will be deprecated in a future release, but remains fully functional for existing projects.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Invoked with no arguments, Undercover will flag all untested methods and classes from the current diff:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;undercover&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;-c --compare ref&lt;/code&gt; flag to specify a git ref (commit hash, branch name, tag) to compare against. &lt;strong&gt;This is a recommended usage for CI/CD build environments&lt;/strong&gt;, as &lt;code&gt;undercover&lt;/code&gt; will &lt;code&gt;exit 1&lt;/code&gt; if there are any warnings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;undercover --compare origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;code&gt;docs/&lt;/code&gt; for CI configuration examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grodowski/undercover/master/docs/actions.yml&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grodowski/undercover/master/docs/circleci_config.yml&#34;&gt;CircleCI - simple&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grodowski/undercover/master/docs/circleci_advanced.yml&#34;&gt;CircleCI - advanced&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grodowski/undercover/master/docs/semaphore.yml&#34;&gt;Semaphore&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Merging coverage results (&lt;a href=&#34;https://gist.github.com/grodowski/9744ff91034dce8df20c2a8210409fb0&#34;&gt;sample gist&lt;/a&gt;) is required for parallel tests before processing with &lt;code&gt;undercover&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code review integrations&lt;/h2&gt; &#xA;&lt;p&gt;A few options exist to provide automated comments from &lt;code&gt;undercover&lt;/code&gt; in Pull Request reviews, which is the most streamlined way to add Undercover to your development workflow.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://undercover-ci.com&#34;&gt;UndercoverCI&lt;/a&gt; - &lt;code&gt;undercover&lt;/code&gt; Pull Request feedback delivered natively with GitHub Checks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grodowski/pronto-undercover&#34;&gt;pronto-undercover&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nimblehq/danger-undercover&#34;&gt;danger-undercover&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aki77/undercover-checkstyle&#34;&gt;undercover-checkstyle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;CLI Options&lt;/h3&gt; &#xA;&lt;p&gt;Options can be passed when running the command from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Usage: undercover [options]&#xA;    -s, --simplecov path             SimpleCov JSON report file&#xA;    -l, --lcov path                  LCOV report file path (to be deprecated)&#xA;    -p, --path path                  Project directory&#xA;    -g, --git-dir dir                Override `.git` with a custom directory&#xA;    -c, --compare ref                Generate coverage warnings for all changes after `ref`&#xA;    -r, --ruby-syntax ver            Ruby syntax version, one of: current, ruby18, ruby19, ruby20, ruby21, ruby22, ruby23, ruby24, ruby25, ruby26, ruby30, ruby31, ruby32, ruby33&#xA;    -w, --max-warnings limit         Maximum number of warnings to generate before stopping analysis. Useful as a performance improvement for large diffs.&#xA;    -f, --include-files globs        Include files matching specified glob patterns (comma separated). Defaults to &#39;*.rb,*.rake,*.ru,Rakefile&#39;&#xA;    -x, --exclude-files globs        Skip files matching specified glob patterns (comma separated). Empty by default.&#xA;    -h, --help                       Prints this help&#xA;        --version                    Show version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration File&lt;/h3&gt; &#xA;&lt;p&gt;A configuration file named &lt;code&gt;.undercover&lt;/code&gt; can be created at the top level of a project&#39;s directory containing the same set of options for the CLI. Example file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;-l path/to/different.lcov&#xA;-c origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The options set in the file can be overriden by passing arguments when invoking the executable.&lt;/p&gt; &#xA;&lt;p&gt;Options assume that the program is run from the top level of the project directory.&lt;/p&gt; &#xA;&lt;h3&gt;Ignoring/skipping coverage&lt;/h3&gt; &#xA;&lt;p&gt;Projects with low or nonexistent test coverage are likely to generate large numbers of warnings. While the default workflow would be to address them before the PR approval, your strategy might be different.&lt;/p&gt; &#xA;&lt;p&gt;In order to acknowledge an untested change and remove the UndercoverCI warning with the intention to improve later (or never), you can wrap the code block with the &lt;code&gt;:nocov:&lt;/code&gt; syntax, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# :nocov:&#xA;def skip_this_method&#xA;    never_reached&#xA;end&#xA;# :nocov:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about the &lt;code&gt;:nocov:&lt;/code&gt; syntax in &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov#ignoringskipping-code&#34;&gt;SimpleCov&#39;s readme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;I wanted to create a tool to help others and myself ensure that tests are written for all the recent code changes. This should be useful for any ruby project, but especially those large or legacy codebases that lack testing (and we can&#39;t or don&#39;t want to invest in full test coverage).&lt;/p&gt; &#xA;&lt;p&gt;The goal was to provide automated warnings, that are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;relevant, so scoped to the actual code changes&lt;/li&gt; &#xA; &lt;li&gt;timely, so we don&#39;t end up writing tests long after the implementation&lt;/li&gt; &#xA; &lt;li&gt;actionable, so we can fix them before the code is committed or reaches production&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more background, please &lt;a href=&#34;https://medium.com/futuredev/stop-shipping-untested-ruby-code-with-undercover-1edc963be4a6&#34;&gt;read the blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bundle&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake&lt;/code&gt; to run the tests and RuboCop. You can also run &lt;code&gt;pry -r &#39;undercover&#39;&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and tags, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/grodowski/undercover&#34;&gt;https://github.com/grodowski/undercover&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>