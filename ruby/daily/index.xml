<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-09T01:40:13Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sharesight/flappi</title>
    <updated>2024-04-09T01:40:13Z</updated>
    <id>tag:github.com,2024-04-09:/sharesight/flappi</id>
    <link href="https://github.com/sharesight/flappi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible API builder gem for Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;flappi&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Flexible API builder gem for Rails&lt;/h2&gt; &#xA;&lt;p&gt;Flappi allows Rails APIs to be defined using a simple DSL that avoids repeated and fragmented code and allows the API definition to reflect the request/response structure. Support is provided for versioning (semantic with the addition of &#39;flavours&#39;) and documentation (using &lt;a href=&#34;http://apidocjs.com/&#34;&gt;apiDoc&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Interface documentation is &lt;a href=&#34;https://sharesight.github.io/flappi/Flappi.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart with Rails (4-6)&lt;/h2&gt; &#xA;&lt;p&gt;Add to Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;flappi&#39;, git: &#39;git@github.com:sharesight/flappi.git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bundle install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create your initialization file, e.g. in &lt;strong&gt;&#39;config/initializers/flappi.rb&#39;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Flappi.configure do |conf|&#xA;  conf.definition_paths = { &#39;default&#39; =&amp;gt; &#39;api_definitions&#39; }    # Normally under your controller path&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a controller and route, e.g in &lt;strong&gt;&#39;app/controllers/adders_controller&#39;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddersController &amp;lt; ApplicationController&#xA;  def show&#xA;    Flappi.build_and_respond(self)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and in &lt;strong&gt;&#39;config/routes.rb&#39;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;resource :adder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Flappi (currently) uses the regular Rails routing and controller framework, so this is much as for an ordinary controller.&lt;/p&gt; &#xA;&lt;p&gt;(If you try the endpoint &lt;a href=&#34;http://localhost:3000/adder&#34;&gt;http://localhost:3000/adder&lt;/a&gt; now, you should get an error like: &lt;em&gt;&#39;Endpoint Adders is not defined to API Builder&#39;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Now define the endpoint using the Flappi DSL. In &lt;strong&gt;&#39;app/controllers/api_definitions/adders.rb&#39;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module ApiDefinitions&#xA;  module Adders&#xA;&#xA;    include Flappi::Definition&#xA;&#xA;    def endpoint&#xA;      title &#39;Add numbers&#39;&#xA;      http_method &#39;GET&#39;&#xA;      path &#39;/adder&#39;&#xA;&#xA;      # We define two query parameters, &#39;a&#39; is required&#xA;      param :a, type: Integer, optional: false&#xA;      param :b, type: Integer&#xA;&#xA;      # IRL, this would probably query your ActiveRecord model, reporting engine&#xA;      # or other artefact to get a returned record - we just add two numbers together&#xA;      # the result of this is the context for the response&#xA;      query do |params|&#xA;        {result: params[:a].to_i + (params[:b].try(:to_i) || 0) }&#xA;      end&#xA;    end&#xA;&#xA;    # Build a record with the one result field&#xA;    # Notice how just specifying a name is enough to access the value&#xA;    def respond&#xA;      build do&#xA;        field :result, type: Integer&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, if you access: &lt;a href=&#34;http://localhost:3000/adder.json?a=4&#34;&gt;http://localhost:3000/adder.json?a=4&lt;/a&gt; you should see the result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;&#34;result&#34;: 4&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and similarly &lt;a href=&#34;http://localhost:3000/adder.json?a=4&amp;amp;b=22&#34;&gt;http://localhost:3000/adder.json?a=4&amp;amp;b=22&lt;/a&gt; (etc)&lt;/p&gt; &#xA;&lt;h2&gt;Adding Fields to APIs&lt;/h2&gt; &#xA;&lt;h3&gt;1:1 mapping with the model&lt;/h3&gt; &#xA;&lt;p&gt;Map directly to model attributes like app/controllers/api/v3/api_builder_definitions/shared/currency.rb maps code, symbol and id directly to the app/models/currency.rb objects (and associated enumerables).&lt;/p&gt; &#xA;&lt;h3&gt;Using the Source Field&lt;/h3&gt; &#xA;&lt;p&gt;In order to add new fields to an API the easiest option is to create an attr_reader on the model you&#39;re referencing. For instance app/controllers/api/v3/api_builder_definitions/shared/document.rb has the 4 fields: [:file_name, :file_size, :created_at, :content_type] These fields can be whatever you want to use for the api and don&#39;t tie to anything in the App itself.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;source&#34; is where we pull in data for these 4: [:document_file_name, :document_content_type, :document_file_size, :document_created_at] These four &#34;sources&#34; are defined in app/models/document.rb as attr_reader methods with the same names as the source.&lt;/p&gt; &#xA;&lt;p&gt;While its not ideal, if the value you need is not stored ready to go in the database, your attr_reader on the model COULD make a call to a service in order to return the value desired but this isn&#39;t really a desirable approach as it shouldn&#39;t be the concern of the model. Additional investigation is needed into alternative ways of managing this.&lt;/p&gt; &#xA;&lt;h3&gt;Using Procs and Lambdas&lt;/h3&gt; &#xA;&lt;h4&gt;full logic (nested + boolean cast):&lt;/h4&gt; &#xA;&lt;p&gt;field(name: :supported, type: BOOLEAN, doc: &#39;…&#39;) { |o| !!o.nominal_country&amp;amp;.ss_support? }&lt;/p&gt; &#xA;&lt;h4&gt;re-name an attribute (these examples should be equivalent):&lt;/h4&gt; &#xA;&lt;p&gt;field(:financial_year_end, doc: &#39;…&#39;) { |p| p.financial_year_end_s } field(:financial_year_end, source: :financial_year_end_s, doc: &#39;…&#39;)&lt;/p&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sharesight/flappi/master/docs/file.POST.html&#34;&gt;Implementing a POST endpoint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sharesight/flappi/master/docs/file.NEST.html&#34;&gt;Nesting structures in a response&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sharesight/flappi/master/docs/file.SHARE.html&#34;&gt;Sharing fields&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sharesight/flappi/master/docs/file.VERSIONS.html&#34;&gt;Versions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/sharesight/flappi/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/sharesight/flappi/master/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>