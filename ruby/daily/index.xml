<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-12T01:39:23Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ISS-Security/hw-credit_card_crypto</title>
    <updated>2024-03-12T01:39:23Z</updated>
    <id>tag:github.com,2024-03-12:/ISS-Security/hw-credit_card_crypto</id>
    <link href="https://github.com/ISS-Security/hw-credit_card_crypto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Homework assignment for SERVSEC class to learn Ruby and basic security principles&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Credit Card Crypto&lt;/h1&gt; &#xA;&lt;p&gt;This assignment requires you to try your hand out at a very common error checking (data integrity) algorithm, and also introduces you to very elementary cryptographic algorithms.&lt;/p&gt; &#xA;&lt;h2&gt;Retrieving Files&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure to setup the git tool as we described in class (see online handout on &#39;Git Version Control&#39;). Also, make sure to create your own RSA keypair and link your public key to Github. You can then clone any public project from Github onto your local machine.&lt;/li&gt; &#xA; &lt;li&gt;Fork this project on Github (a copy is created in your Github account) using the &#39;Fork&#39; button&lt;/li&gt; &#xA; &lt;li&gt;Clone &lt;em&gt;your copy&lt;/em&gt; of the forked project onto your local machine: &lt;code&gt;git clone git@github.com:[your_username]/hw_3-credit_card_crypto.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;bundler-audit&lt;/code&gt; gem to your list of gems in &lt;code&gt;Gemfile&lt;/code&gt;; run &lt;code&gt;bundle install&lt;/code&gt; to install it&lt;/li&gt; &#xA; &lt;li&gt;Use the &#39;bundle&#39; gem (which you should have installed earlier) to install all gems required for this assignment (listed in the &lt;code&gt;Gemfile&lt;/code&gt;) onto your local machine: &lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Working on Assignment&lt;/h2&gt; &#xA;&lt;p&gt;While working on this assignment, frequently save your work and push it back to your Github repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git add .&#xA;git commit -m &#34;Enter meaningful description here&#34;&#xA;git push -u origin main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the first time you have pushed using &lt;code&gt;-u origin main&lt;/code&gt;, you can subsequently push it simply by doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;Submission instructions will be provided separately by your instructor. But before submission, make sure each file you have worked on passes the style guide suggested by Rubocop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  rubocop &amp;lt;your_ruby_file.rb&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Always run a final audit of your gems for vulnerabilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  bundle-audit check --update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This project is in several parts. Make sure you ONLY do the part that is relevant to this week.&lt;/p&gt; &#xA;&lt;h3&gt;A. Luhn Algorithm&lt;/h3&gt; &#xA;&lt;!-- markdownlint-disable ol-prefix --&gt; &#xA;&lt;p&gt;You will write the algorithm used by financial institutions to check whether a credit card number is valid or not, by checking its last digit (checksum). This is done by using the &lt;a href=&#34;http://en.wikipedia.org/wiki/Luhn_algorithm&#34;&gt;Luhn Algorithm&lt;/a&gt;. You can see this algorithm in action at any &lt;a href=&#34;http://planetcalc.com/2464/&#34;&gt;online Luhn algorithm calculator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Implement the file called &lt;code&gt;luhn_validator.rb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is one method you must fill out, called &lt;code&gt;validate_checksum()&lt;/code&gt;. It must check a credit card number and return (&lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;) whether the last checksum digit is correct.&lt;/li&gt; &#xA; &lt;li&gt;This week, try to make your code more readable rather than emphasizing performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Implement the file called &lt;code&gt;credit_card.rb&lt;/code&gt; (see TODO comments):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mixin the LuhnValidator&lt;/li&gt; &#xA; &lt;li&gt;initialize the instance variables&lt;/li&gt; &#xA; &lt;li&gt;create a &lt;code&gt;#to_json&lt;/code&gt; method that converts the instance variables into a &lt;a href=&#34;http://en.wikipedia.org/wiki/JSON&#34;&gt;JSON&lt;/a&gt; string format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure it passes the &lt;code&gt;luhn_spec&lt;/code&gt; test that is provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ruby spec/luhn_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(run the spec file from the root directory of your solution)&lt;/p&gt; &#xA;&lt;p&gt;And bench test the performance of your code by running the bench code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ruby bench/luhn_bench.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Submit: Remember that all members of your team should attempt each part of the assignment and push your individual work to Github. &lt;em&gt;You may work together&lt;/em&gt; and share code and ideas. However, &lt;em&gt;each person should submit their own solution&lt;/em&gt; (see submission details &lt;a href=&#34;https://raw.githubusercontent.com/ISS-Security/hw-credit_card_crypto/main/README.md#submission&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;B. Substitution and Transposition Ciphers&lt;/h3&gt; &#xA;&lt;p&gt;Work as a team to implement three ciphers that we saw in class: the Caesar Cipher, Permutation Cipher and Double Transposition Cipher. These ciphers represent the state of the art of cryptography from antiquity till World War II.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement the &lt;code&gt;SubstitutionCipher&lt;/code&gt; module in &lt;code&gt;substitution_cipher.rb&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create encrypt and decrypt methods of both ciphers &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;all methods take plaintext &lt;code&gt;document&lt;/code&gt; strings with characters are printable ASCII (ord 32-126)&lt;/li&gt; &#xA;     &lt;li&gt;all methods take a positive &lt;code&gt;key&lt;/code&gt; integer&lt;/li&gt; &#xA;     &lt;li&gt;all methods return a string (encrypted or decrypted)&lt;/li&gt; &#xA;     &lt;li&gt;Make sure the decrypt method recreates the original document given before encryption!&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Caesar cipher: there is no need to &#39;wrap&#39; values -- just add/subtract the key to encrypt/decrypt (its ok if the resulting ordinal values are greater than 127)&lt;/li&gt; &#xA;   &lt;li&gt;Permutation cipher: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;assume you can replace with any characters values from 0-127 (ord)&lt;/li&gt; &#xA;     &lt;li&gt;start by creating a lookup table of characters by randomly &#34;shuffling&#34; the numbers &lt;code&gt;(0..127)&lt;/code&gt; using the key &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;See the &lt;code&gt;Array.shuffle(random: rng)&lt;/code&gt; method&lt;/li&gt; &#xA;       &lt;li&gt;See the &lt;code&gt;Random.new(seed)&lt;/code&gt; method&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Implement the DoubleTranspositionCipher in &lt;code&gt;double_trans_cipher.rb&lt;/code&gt; (more hints in source file) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Write your own tests for the double transposition cipher in &lt;code&gt;spec/crypto_spec.rb&lt;/code&gt;: Try writing these tests before coding!&lt;/li&gt; &#xA;   &lt;li&gt;Can you DRY out all the tests using metaprogramming as we saw in class? (DRY = Do not Repeat Yourself in code)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While coding, make sure it passes all the tests you are provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ruby spec/crypto_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C. Advanced Crypto and Hashing&lt;/h3&gt; &#xA;&lt;p&gt;This week, we enter the world of modern cryptography. Your team must &lt;em&gt;use the RbNacl library&lt;/em&gt; for the ModernSymmetricCipher cipher and SHA256 hashing algorithms. We should not implement modern ciphers ourselves for production purposes.&lt;/p&gt; &#xA;&lt;h4&gt;C.1. ModernSymmetricCipher&lt;/h4&gt; &#xA;&lt;p&gt;Implement a modern cryptographic encryption method:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ModernSymmetricCipher&lt;/code&gt; in &lt;code&gt;sk_cipher.rb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write your own tests for ModernSymmetricCipher in &lt;code&gt;spec/crypto_spec.rb&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;make sure your implemented tests &lt;em&gt;all fail before writing&lt;/em&gt; any code!&lt;/li&gt; &#xA;   &lt;li&gt;make sure they pass &lt;em&gt;one-by-one&lt;/em&gt; while writing code :)&lt;/li&gt; &#xA;   &lt;li&gt;Can you DRY out all the tests using metaprogramming?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Note that you are required to return serialized data as Base64: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;require &#39;base64&#39;&lt;/code&gt; to use Ruby&#39;s Base64 gem&lt;/li&gt; &#xA;   &lt;li&gt;Serialize data using: &lt;code&gt;Base64.strict_encode64(data)&lt;/code&gt; to get a base 64 string&lt;/li&gt; &#xA;   &lt;li&gt;Deserialize using: &lt;code&gt;Base64.strict_decode64(b64_str)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;C.2. Hashing&lt;/h4&gt; &#xA;&lt;p&gt;Your team must implement hashing methods for credit card objects. Recall that all objects in Ruby have a &lt;code&gt;hash&lt;/code&gt; method by default. However, this method does not use the contents of their objects to produce hashes. Furthermore, this hash method cannot produce a cryptographically strong hash.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Override the default hash: Override the default &lt;code&gt;hash&lt;/code&gt; method of CreditCard to hash the serialized data of the card. Credit cards with identical information should produce identical hashes. Do not use any cryptographic hashing method here.&lt;/li&gt; &#xA; &lt;li&gt;Create a cryptographic hash: Implement the &lt;code&gt;secure_hash&lt;/code&gt; method to produce a SHA256 hash (return a hexadecimal string). Credit cards with identical information should produce identical secure hashes.&lt;/li&gt; &#xA; &lt;li&gt;BUT FIRST: look at the hashing test specs in &lt;code&gt;spec/hash_spec.rb&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Implement all the test descriptions&lt;/em&gt; (you are welcome to add your own as well)&lt;/li&gt; &#xA;   &lt;li&gt;make sure your implemented tests &lt;em&gt;all fail&lt;/em&gt; before writing &lt;em&gt;any&lt;/em&gt; code!&lt;/li&gt; &#xA;   &lt;li&gt;make sure they pass &lt;em&gt;one-by-one&lt;/em&gt; while writing code :)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;We are coming to the end of this assignment -- time to do some cleanup: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add references in &lt;code&gt;Gemfile&lt;/code&gt; to all the gems you are using in your code and test files. (see &lt;a href=&#34;http://bundler.io&#34;&gt;http://bundler.io&lt;/a&gt; for what to put in a &lt;code&gt;Gemfile&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;run &lt;code&gt;rubocop&lt;/code&gt; on all your code to see if your code style is appropriate&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>