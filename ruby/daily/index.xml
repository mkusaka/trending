<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-14T01:32:14Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tom-orrow/simple-image-gallery</title>
    <updated>2024-05-14T01:32:14Z</updated>
    <id>tag:github.com,2024-05-14:/tom-orrow/simple-image-gallery</id>
    <link href="https://github.com/tom-orrow/simple-image-gallery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>steveklabnik/bring_back_snowman</title>
    <updated>2024-05-14T01:32:14Z</updated>
    <id>tag:github.com,2024-05-14:/steveklabnik/bring_back_snowman</id>
    <link href="https://github.com/steveklabnik/bring_back_snowman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BringBackSnowman&lt;/h1&gt; &#xA;&lt;p&gt;You know you miss this little guy: â˜ƒ.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t know what that&#39;s about, &lt;a href=&#34;http://intertwingly.net/blog/2010/07/29/Rails-and-Snowmen&#34;&gt;this blog post explains what&#39;s up&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the impending release of Rails 4, I was thinking about fun things in the history of Rails, and thought it&#39;d be fun to bring him back.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;bring_back_snowman&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install bring_back_snowman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Just do it, and your forms will submit &lt;code&gt;_snowman=â˜ƒ&lt;/code&gt; to ensure that your data is encoded in UTF-8.&lt;/p&gt; &#xA;&lt;p&gt;It is configurable, if you prefer something else. Add this to your &lt;code&gt;application.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.snowman = {:emoji =&amp;gt; &#34;ðŸ˜¢&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key of the configuration hash will be the name of the url parameter. You can use UTF-8 characters for the key too.&lt;/p&gt; &#xA;&lt;p&gt;You may also need to add the &#39;magic comment&#39; at the top of the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# encoding: UTF-8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please remember that if you don&#39;t use something that&#39;s UTF-8, this won&#39;t actually work to fix the bug.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>rapid7/metasploit-omnibus</title>
    <updated>2024-05-14T01:32:14Z</updated>
    <id>tag:github.com,2024-05-14:/rapid7/metasploit-omnibus</id>
    <link href="https://github.com/rapid7/metasploit-omnibus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Packaging metasploit-framework with omnibus&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;metasploit-framework Omnibus project&lt;/h1&gt; &#xA;&lt;p&gt;This project creates full-stack platform-specific packages for &lt;code&gt;metasploit-framework&lt;/code&gt;. This is not the same as the Metasploit Community edition. It only contains the framework command-line interface and the associated tools and modules.&lt;/p&gt; &#xA;&lt;h2&gt;Installing the package&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to install this package, we provide a number of pre-built binaries for Metasploit that are rebuilt every night. See &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers&#34;&gt;https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers&lt;/a&gt; for installation information.&lt;/p&gt; &#xA;&lt;h2&gt;Building the package&lt;/h2&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;This project has a package cache that should be pulled in before building. Run &#39;git submodule update -i&#39; to download the git submodule that contains these packages. We cache these both for performance, and because occasionally upstream locations go away, and this allows the build to continue without broken dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Building on Docker&lt;/h2&gt; &#xA;&lt;p&gt;The Dockerfiles for &lt;code&gt;metasploit-omnibus&lt;/code&gt; are located within the &lt;code&gt;docker&lt;/code&gt; directory of this repository.&lt;/p&gt; &#xA;&lt;p&gt;You can build images yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/rapid7/metasploit-omnibus.git&#xA;cd metasploit-omnibus&#xA;docker build --tag metasploit-omnibus-builder - &amp;lt; ./docker/kali109-x64/Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then run a new container using the above tagged image, whilst mounting the current directory as a volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it --rm --volume $(pwd):$(pwd) --workdir $(pwd) --user jenkins metasploit-omnibus-builder /bin/bash --login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can run a new container using pre-built images from &lt;a href=&#34;https://hub.docker.com/u/rapid7&#34;&gt;Rapid7&#39;s Docker Hub account&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it --rm --volume $(pwd):$(pwd) --workdir $(pwd) --user jenkins rapid7/msf-kali109-x64-omnibus:2019_01 /bin/bash --login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;metasploit-omnibus&lt;/code&gt; will download the latest version of Metasploit framework from Github, but also supports building with local copies from &lt;code&gt;/metasploit-framework&lt;/code&gt; - &lt;a href=&#34;https://github.com/rapid7/metasploit-omnibus/raw/9cd575bcdd19d8fedf4a94c4ca2d1d6c253628c2/config/software/metasploit-framework.rb#L2-L8&#34;&gt;full details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build omnibus with a local version of Metasploit framework, you can mount your framework repository as a volume to &lt;code&gt;/metasploit-framework&lt;/code&gt; within the container. The following command assumes that the repository exists within the parent directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it --rm --volume $(pwd):$(pwd) --volume=$(pwd)/../metasploit-framework:/metasploit-framework --workdir $(pwd) --user jenkins rapid7/msf-kali109-x64-omnibus:2019_01 /bin/bash --login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When running inside the container, you can perform a normal ommibus build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Download the git submodule that contains cached packages&#xA;git submodule update -i&#xA;&#xA;# install omnibus&#39; dependencies&#xA;bundle install --binstubs&#xA;&#xA;# build the metasploit-framework package&#xA;bin/omnibus build metasploit-framework&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When complete, there will be a new installable .deb file under the &#39;pkg&#39; directory. Note that the use of Docker volumes may cause builds to run slower.&lt;/p&gt; &#xA;&lt;h2&gt;Building on Ubuntu / Debian systems&lt;/h2&gt; &#xA;&lt;p&gt;In general, a build environment needs a working C/C++ compiler, Ruby 1.9 or higher and the ruby development headers, bundler, git, bison and flex. A quad-core CPU and 4GB of ram are recommended.&lt;/p&gt; &#xA;&lt;p&gt;The following steps should produce a successful build with Ubuntu and other Debian derivatives, starting from a fresh installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# install required packages to build on Ubuntu / Debian systems&#xA;sudo apt-get -y install build-essential git ruby bundler ruby-dev bison flex autoconf automake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure the omnibus cache and target directories if you want to build as non-root user (recommended).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# setup build directories you can write to&#xA;sudo mkdir -p /var/cache/omnibus&#xA;sudo mkdir -p /opt/metasploit-framework&#xA;sudo chown `whoami` /var/cache/omnibus&#xA;sudo chown `whoami` /opt/metasploit-framework&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next setup git if you need to.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# setup git (ignore if you already have it configured)&#xA;git config --global user.name &#34;Nobody&#34;&#xA;git config --global user.email &#34;nobody@example.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checkout the metasploit-framework installer builder and install omnibus&#39; dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# checkout the builder repository&#xA;git clone https://github.com/rapid7/metasploit-omnibus.git&#xA;cd metasploit-omnibus&#xA;# install omnibus&#39; dependencies&#xA;bundle install --binstubs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, build the installer itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# build the metasploit-framework package&#xA;bin/omnibus build metasploit-framework&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;when complete, there will be a new installable .deb file under the &#39;pkg&#39; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Building on Windows&lt;/h2&gt; &#xA;&lt;p&gt;From Windows 10, install ruby, msys2, ruby-devkit, wixtoolset, git. Add the following command to the the preparation steps before executing the &lt;code&gt;build&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xz -d local/cache/*.xz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building on OS X&lt;/h2&gt; &#xA;&lt;p&gt;From OS X, first install XCode and the command line development tools. I use ruby, bundler, git, bison and flex from the Mac Homebrew project. The rest of the steps are identical to building on Ubuntu. A .pkg file will be under the pkg directory instead.&lt;/p&gt; &#xA;&lt;h2&gt;Clean&lt;/h2&gt; &#xA;&lt;p&gt;You can clean up all temporary files generated during the build process with the &lt;code&gt;clean&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/omnibus clean metasploit-framework&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding the &lt;code&gt;--purge&lt;/code&gt; purge option removes &lt;strong&gt;ALL&lt;/strong&gt; files generated during the build including the project install directory (&lt;code&gt;/opt/metasploit-framework&lt;/code&gt;) and the package cache directory (&lt;code&gt;/var/cache/omnibus/pkg&lt;/code&gt;) as well as &lt;strong&gt;ALL&lt;/strong&gt; files in the local package cache directory (&lt;code&gt;./local/cache&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/omnibus clean metasploit-framework --purge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restore the git submodule that contains the local package cache:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git submodule update -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Publish&lt;/h2&gt; &#xA;&lt;p&gt;Omnibus has a built-in mechanism for releasing to a variety of &#34;backends&#34;, such as Amazon S3. You must set the proper credentials in your &lt;code&gt;omnibus.rb&lt;/code&gt; config file or specify them via the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/omnibus publish path/to/*.deb --backend s3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;Full help for the Omnibus command line interface can be accessed with the &lt;code&gt;help&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bin/omnibus help&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>