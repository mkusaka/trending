<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-25T01:36:08Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alexrudall/ruby-openai</title>
    <updated>2022-12-25T01:36:08Z</updated>
    <id>tag:github.com,2022-12-25:/alexrudall/ruby-openai</id>
    <link href="https://github.com/alexrudall/ruby-openai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAI API + Ruby! ü§ñ‚ù§Ô∏è&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby::OpenAI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/ruby-openai&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/ruby-openai.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alexrudall/ruby-openai/raw/main/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/alexrudall/ruby-openai&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/alexrudall/ruby-openai.svg?style=shield&#34; alt=&#34;CircleCI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/codeclimate/codeclimate/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/a99a88d28ad37a79dbf6/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://openai.com/blog/openai-api/&#34;&gt;OpenAI API&lt;/a&gt; with Ruby! ü§ñ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;p&gt;Generate text with GPT-3, create images with DALL¬∑E, or write code with Codex...&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Bundler&lt;/h3&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    gem &#34;ruby-openai&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;p&gt;$ bundle install&lt;/p&gt; &#xA;&lt;h3&gt;Gem install&lt;/h3&gt; &#xA;&lt;p&gt;Or install with:&lt;/p&gt; &#xA;&lt;p&gt;$ gem install ruby-openai&lt;/p&gt; &#xA;&lt;p&gt;and require with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    require &#34;ruby/openai&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get your API key from &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;https://beta.openai.com/account/api-keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you belong to multiple organizations, you can get your Organization ID from &lt;a href=&#34;https://beta.openai.com/account/org-settings&#34;&gt;https://beta.openai.com/account/org-settings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;With dotenv&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://github.com/motdotla/dotenv&#34;&gt;dotenv&lt;/a&gt;, you can add your secret keys to your .env file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    OPENAI_ACCESS_TOKEN=access_token_goes_here&#xA;    OPENAI_ORGANIZATION_ID=organization_id_goes_here # Optional.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And create a client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    client = OpenAI::Client.new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Without dotenv&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively you can pass your key directly to a new client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    client = OpenAI::Client.new(&#xA;        access_token: &#34;access_token_goes_here&#34;,&#xA;        organization_id: &#34;organization_id_goes_here&#34;&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;p&gt;There are different models that can be used to generate text. For a full list and to retrieve information about a single models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    client.models.list&#xA;    client.models.retrieve(id: &#34;text-ada-001&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/docs/models/gpt-3&#34;&gt;GPT-3&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;text-ada-001&lt;/li&gt; &#xA;   &lt;li&gt;text-babbage-001&lt;/li&gt; &#xA;   &lt;li&gt;text-curie-001&lt;/li&gt; &#xA;   &lt;li&gt;text-davinci-001&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/docs/models/codex-series-private-beta&#34;&gt;Codex (private beta)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;code-davinci-002&lt;/li&gt; &#xA;   &lt;li&gt;code-cushman-001&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Completions&lt;/h3&gt; &#xA;&lt;p&gt;Hit the OpenAI API for a completion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.completions(&#xA;        parameters: {&#xA;            model: &#34;text-davinci-001&#34;,&#xA;            prompt: &#34;Once upon a time&#34;,&#xA;            max_tokens: 5&#xA;        })&#xA;    puts response[&#34;choices&#34;].map { |c| c[&#34;text&#34;] }&#xA;    =&amp;gt; [&#34;, there lived a great&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edits&lt;/h3&gt; &#xA;&lt;p&gt;Send a string and some instructions for what to do to the string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.edits(&#xA;        parameters: {&#xA;            model: &#34;text-davinci-edit-001&#34;,&#xA;            input: &#34;What day of the wek is it?&#34;,&#xA;            instruction: &#34;Fix the spelling mistakes&#34;&#xA;        }&#xA;    )&#xA;    puts response.dig(&#34;choices&#34;, 0, &#34;text&#34;)&#xA;    =&amp;gt; What day of the week is it?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Embeddings&lt;/h3&gt; &#xA;&lt;p&gt;You can use the embeddings endpoint to get a vector of numbers representing an input. You can then compare these vectors for different inputs to efficiently check how similar the inputs are.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    client.embeddings(&#xA;        parameters: {&#xA;            model: &#34;babbage-similarity&#34;,&#xA;            input: &#34;The food was delicious and the waiter...&#34;&#xA;        }&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Files&lt;/h3&gt; &#xA;&lt;p&gt;Put your data in a &lt;code&gt;.jsonl&lt;/code&gt; file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;    {&#34;text&#34;: &#34;puppy A is happy&#34;, &#34;metadata&#34;: &#34;emotional state of puppy A&#34;}&#xA;    {&#34;text&#34;: &#34;puppy B is sad&#34;, &#34;metadata&#34;: &#34;emotional state of puppy B&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and pass the path to &lt;code&gt;client.files.upload&lt;/code&gt; to upload it to OpenAI, and then interact with it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    client.files.upload(parameters: { file: &#34;path/to/puppy.jsonl&#34;, purpose: &#34;search&#34; })&#xA;    client.files.list&#xA;    client.files.retrieve(id: 123)&#xA;    client.files.delete(id: 123)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fine-tunes&lt;/h3&gt; &#xA;&lt;p&gt;Put your fine-tuning data in a &lt;code&gt;.jsonl&lt;/code&gt; file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;    {&#34;prompt&#34;:&#34;Overjoyed with my new phone! -&amp;gt;&#34;, &#34;completion&#34;:&#34; positive&#34;}&#xA;    {&#34;prompt&#34;:&#34;@lakers disappoint for a third straight night -&amp;gt;&#34;, &#34;completion&#34;:&#34; negative&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and pass the path to &lt;code&gt;client.files.upload&lt;/code&gt; to upload it to OpenAI and get its ID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.files.upload(parameters: { file: &#34;path/to/sentiment.jsonl&#34;, purpose: &#34;fine-tune&#34; })&#xA;    file_id = JSON.parse(response.body)[&#34;id&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then use this file ID to create a fine-tune model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.finetunes.create(&#xA;        parameters: {&#xA;        training_file: file_id,&#xA;        model: &#34;text-ada-001&#34;&#xA;    })&#xA;    fine_tune_id = JSON.parse(response.body)[&#34;id&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will give you the fine-tune ID. If you made a mistake you can cancel the fine-tune model before it is processed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    client.finetunes.cancel(id: fine_tune_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need to wait a short time for processing to complete. Once processed, you can use list or retrieve to get the name of the fine-tuned model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    client.finetunes.list&#xA;    response = client.finetunes.retrieve(id: fine_tune_id)&#xA;    fine_tuned_model = JSON.parse(response.body)[&#34;fine_tuned_model&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This fine-tuned model name can then be used in classifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.completions(&#xA;        parameters: {&#xA;            model: fine_tuned_model,&#xA;            prompt: &#34;I love Mondays!&#34;&#xA;        }&#xA;    )&#xA;    JSON.parse(response.body)[&#34;choices&#34;].map { |c| c[&#34;text&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image Generation&lt;/h3&gt; &#xA;&lt;p&gt;Generate an image using DALL¬∑E!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.images.generate(parameters: { prompt: &#34;A baby sea otter cooking pasta wearing a hat of some sort&#34; })&#xA;    puts response.dig(&#34;data&#34;, 0, &#34;url&#34;)&#xA;    =&amp;gt; &#34;https://oaidalleapiprodscus.blob.core.windows.net/private/org-Rf437IxKhh...&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/6y4HJFx/img-d-Tx-Rf-RHj-SO5-Gho-Cbd8o-LJvw3.png&#34; alt=&#34;Ruby&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Image Edit&lt;/h3&gt; &#xA;&lt;p&gt;Fill in the transparent part of an image, or upload a mask with transparent sections to indicate the parts of an image that can be changed according to your prompt...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.images.edit(parameters: { prompt: &#34;A solid red Ruby on a blue background&#34;, image: &#34;image.png&#34;, mask: &#34;mask.png&#34; })&#xA;    puts response.dig(&#34;data&#34;, 0, &#34;url&#34;)&#xA;    =&amp;gt; &#34;https://oaidalleapiprodscus.blob.core.windows.net/private/org-Rf437IxKhh...&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/sWVh3BX/dalle-ruby.png&#34; alt=&#34;Ruby&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Image Variations&lt;/h3&gt; &#xA;&lt;p&gt;Create n variations of an image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.images.variations(parameters: { image: &#34;image.png&#34;, n: 2 })&#xA;    puts response.dig(&#34;data&#34;, 0, &#34;url&#34;)&#xA;    =&amp;gt; &#34;https://oaidalleapiprodscus.blob.core.windows.net/private/org-Rf437IxKhh...&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/TWJLP2y/img-miu-Wk-Nl0-QNy-Xtj-Lerc3c0l-NW.png&#34; alt=&#34;Ruby&#34;&gt; &lt;img src=&#34;https://i.ibb.co/ScBhDGB/img-a9-Be-Rz-Au-Xwd-AV0-ERLUTSTGdi.png&#34; alt=&#34;Ruby&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Moderations&lt;/h3&gt; &#xA;&lt;p&gt;Pass a string to check if it violates OpenAI&#39;s Content Policy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.moderations(parameters: { input: &#34;I&#39;m worried about that.&#34; })&#xA;    puts response.dig(&#34;results&#34;, 0, &#34;category_scores&#34;, &#34;hate&#34;)&#xA;    =&amp;gt; 5.505014632944949e-05&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Classifications&lt;/h3&gt; &#xA;&lt;p&gt;Pass examples and a query to predict the most likely labels:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.classifications(parameters: {&#xA;        examples: [&#xA;            [&#34;A happy moment&#34;, &#34;Positive&#34;],&#xA;            [&#34;I am sad.&#34;, &#34;Negative&#34;],&#xA;            [&#34;I am feeling awesome&#34;, &#34;Positive&#34;]&#xA;        ],&#xA;        query: &#34;It is a raining day :(&#34;,&#xA;        model: &#34;text-ada-001&#34;&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the ID of a file you&#39;ve uploaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.classifications(parameters: {&#xA;        file: &#34;123abc,&#xA;        query: &#34;It is a raining day :(&#34;,&#xA;        model: &#34;text-ada-001&#34;&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Answers&lt;/h3&gt; &#xA;&lt;p&gt;Pass documents, a question string, and an example question/response to get an answer to a question:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.answers(parameters: {&#xA;        documents: [&#34;Puppy A is happy.&#34;, &#34;Puppy B is sad.&#34;],&#xA;        question: &#34;which puppy is happy?&#34;,&#xA;        model: &#34;text-curie-001&#34;,&#xA;        examples_context: &#34;In 2017, U.S. life expectancy was 78.6 years.&#34;,&#xA;        examples: [[&#34;What is human life expectancy in the United States?&#34;,&#34;78 years.&#34;]],&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the ID of a file you&#39;ve uploaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    response = client.answers(parameters: {&#xA;        file: &#34;123abc&#34;,&#xA;        question: &#34;which puppy is happy?&#34;,&#xA;        model: &#34;text-curie-001&#34;,&#xA;        examples_context: &#34;In 2017, U.S. life expectancy was 78.6 years.&#34;,&#xA;        examples: [[&#34;What is human life expectancy in the United States?&#34;,&#34;78 years.&#34;]],&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake spec&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, update &lt;code&gt;CHANGELOG.md&lt;/code&gt;, run &lt;code&gt;bundle install&lt;/code&gt; to update Gemfile.lock, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and tags, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/alexrudall/ruby-openai&#34;&gt;https://github.com/alexrudall/ruby-openai&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://github.com/alexrudall/ruby-openai/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the Ruby::OpenAI project&#39;s codebases, issue trackers, chat rooms and mailing lists is expected to follow the &lt;a href=&#34;https://github.com/alexrudall/ruby-openai/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cucumber/cucumber-rails</title>
    <updated>2022-12-25T01:36:08Z</updated>
    <id>tag:github.com,2022-12-25:/cucumber/cucumber-rails</id>
    <link href="https://github.com/cucumber/cucumber-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rails Generators for Cucumber with special support for Capybara and DatabaseCleaner&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cucumber-Rails&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/cucumber-rails&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/cucumber-rails.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cucumber/cucumber-rails/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/cucumber/cucumber-rails/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/cucumber/cucumber-rails&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/cucumber/cucumber-rails.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/cucumber/cucumber-rails&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/cucumber/cucumber-rails/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oselvar.com/github/cucumber/oselvar-github-metrics/main/cucumber/cucumber-rails&#34;&gt;&lt;img src=&#34;https://oselvar.com/api/badge?label=pull%20requests&amp;amp;csvUrl=https%3A%2F%2Fraw.githubusercontent.com%2Fcucumber%2Foselvar-github-metrics%2Fmain%2Fdata%2Fcucumber%2Fcucumber-rails%2FpullRequests.csv&#34; alt=&#34;pull requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oselvar.com/github/cucumber/oselvar-github-metrics/main/cucumber/cucumber-rails&#34;&gt;&lt;img src=&#34;https://oselvar.com/api/badge?label=issues&amp;amp;csvUrl=https%3A%2F%2Fraw.githubusercontent.com%2Fcucumber%2Foselvar-github-metrics%2Fmain%2Fdata%2Fcucumber%2Fcucumber-rails%2Fissues.csv&#34; alt=&#34;issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cucumber-Rails brings Cucumber to Rails 5.x, 6.x and 7.x.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Before you can use the generator, add the gem to your project&#39;s Gemfile as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :test do&#xA;  gem &#39;cucumber-rails&#39;, require: false&#xA;  # database_cleaner is not required, but highly recommended&#xA;  gem &#39;database_cleaner&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install it by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn about the various options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails generate cucumber:install --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, bootstrap your Rails app, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails generate cucumber:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Cucumber&lt;/h2&gt; &#xA;&lt;p&gt;With Rake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake cucumber&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without Rake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[bundle exec] cucumber&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration options&lt;/h2&gt; &#xA;&lt;p&gt;By default, cucumber-rails runs &lt;code&gt;DatabaseCleaner.start&lt;/code&gt; and &lt;code&gt;DatabaseCleaner.clean&lt;/code&gt; before and after your scenarios. You can disable this behaviour like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# features/support/env.rb&#xA;# ...&#xA;Cucumber::Rails::Database.autorun_database_cleaner = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, cucumber-rails will auto mix-in the helpers from &lt;code&gt;Rack::Test&lt;/code&gt; into your default Cucumber World instance. You can prevent this behaviour like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# features/support/env.rb&#xA;ENV[&#39;CR_REMOVE_RACK_TEST_HELPERS&#39;] = &#39;true&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading from a previous version&lt;/h2&gt; &#xA;&lt;p&gt;When upgrading from a previous version it is recommended that you rerun:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails generate cucumber:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bugs and feature requests&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;only&lt;/em&gt; way to have a bug fixed or a new feature accepted is to describe it with a Cucumber feature. Let&#39;s say you think you have found a bug in the cucumber:install generator. Fork this project, clone it to your workstation and check out a branch with a descriptive name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:you/cucumber-rails.git&#xA;git checkout -b bugfix/generator-fails-on-ruby-25&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start by making sure you can run the existing features. Now, create a feature that demonstrates what&#39;s wrong. See the existing features for examples. When you have a failing feature that reproduces the bug, commit, push and send a pull request. Someone from the Cucumber-Rails team will review it and hopefully create a fix.&lt;/p&gt; &#xA;&lt;p&gt;If you know how to fix the bug yourself, make a second commit (after committing the failing feature) before you send the pull request.&lt;/p&gt; &#xA;&lt;h3&gt;Setting up your environment&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have a supported ruby installed, cd into your cucumber-rails repository and:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install bundler&#xA;bundle install&#xA;bin/install_geckodriver.sh&#xA;bin/install_webpacker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running all tests&lt;/h3&gt; &#xA;&lt;p&gt;With all dependencies installed, all specs and features should pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[bundle exec] rake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Appraisal suite&lt;/h3&gt; &#xA;&lt;p&gt;In order to test against multiple versions of key dependencies, the &lt;a href=&#34;https://github.com/thoughtbot/appraisal&#34;&gt;Appraisal&lt;/a&gt; gem is used to generate multiple gemfiles, stored in the &lt;code&gt;gemfiles/&lt;/code&gt; directory. Normally these will only run on Travis; however, if you want to run the full test suite against all gemfiles, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[bundle exec] appraisal install&#xA;[bundle exec] appraisal rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the suite against a named gemfile, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[bundle exec] appraisal rails_6_0 rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding dependencies&lt;/h3&gt; &#xA;&lt;p&gt;To support the multiple-gemfile testing, when adding a new dependency the following rules apply:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If it&#39;s a runtime dependency of the gem, add it to the gemspec&lt;/li&gt; &#xA; &lt;li&gt;If it&#39;s a primary development dependency, add it to the gemspec&lt;/li&gt; &#xA; &lt;li&gt;If it&#39;s a dependency of a generated rails app in a test, add it to &lt;a href=&#34;https://github.com/cucumber/cucumber-rails/raw/5e37c530560ae1c1a79521c38a54bae0be94242b/features/step_definitions/cucumber_rails_steps.rb#L15&#34;&gt;the helper&lt;/a&gt; that modifies the &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example, rspec is a primary development dependency, so it lives in the gemspec.&lt;/p&gt;</summary>
  </entry>
</feed>