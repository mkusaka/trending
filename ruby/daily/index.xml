<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-07T01:39:51Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>learn-co-curriculum/phase-4-deploying-demo-app</title>
    <updated>2022-10-07T01:39:51Z</updated>
    <id>tag:github.com,2022-10-07:/learn-co-curriculum/phase-4-deploying-demo-app</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-deploying-demo-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rails and React Heroku Demo App&lt;/h1&gt; &#xA;&lt;p&gt;This app uses a Rails API and React frontend that can be deployed to a single domain. For ease of deployment, both projects are contained in the same repository. All React code is in the &lt;code&gt;/client&lt;/code&gt; directory during development.&lt;/p&gt; &#xA;&lt;p&gt;When the application is deployed, the production version of the React application will be generated on the server and placed in the &lt;code&gt;public&lt;/code&gt; directory of the Rails application, where we can use Rails to serve it.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To run the app locally, install the Rails and React dependencies and set up the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle install&#xA;rails db:create db:migrate db:seed&#xA;npm install --prefix client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install Heroku CLI (if you don&#39;t already have it):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew tap heroku/brew &amp;amp;&amp;amp; brew install heroku&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the App in Development&lt;/h2&gt; &#xA;&lt;p&gt;Configuration for running in development is in the &lt;code&gt;Procfile.dev&lt;/code&gt; file. Run this command to start the frontend and backend servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;heroku local -f Procfile.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In development, requests from the React app are &lt;a href=&#34;https://create-react-app.dev/docs/proxying-api-requests-in-development/&#34;&gt;proxied&lt;/a&gt;, so you can write something like this (without using a domain):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;fetch(&#34;/me&#34;).then((r) =&amp;gt; r.json());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since our deployed app will run on the same domain, this is a good way to simulate a similar environment in development.&lt;/p&gt; &#xA;&lt;h2&gt;Deploying&lt;/h2&gt; &#xA;&lt;p&gt;Login to Heroku:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;heroku login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create new Heroku app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;heroku create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://devcenter.heroku.com/articles/using-multiple-buildpacks-for-an-app&#34;&gt;buildpacks&lt;/a&gt; for Heroku to run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rails app on Ruby&lt;/li&gt; &#xA; &lt;li&gt;React app on Node&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;heroku buildpacks:add heroku/nodejs --index 1&#xA;heroku buildpacks:add heroku/ruby --index 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deploy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push heroku main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code Explanations&lt;/h2&gt; &#xA;&lt;p&gt;There are a few areas of the code that differ from the typical Rails API setup that merit explanation.&lt;/p&gt; &#xA;&lt;h3&gt;Cookies/Sessions Setup&lt;/h3&gt; &#xA;&lt;p&gt;By default, when generating a new Rails app in API mode, the middleware for cookies and sessions isn&#39;t included. We can add it back in (and specify the &lt;code&gt;SameSite&lt;/code&gt; policy for our cookies for protection):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# config/application.rb&#xA;&#xA;# Adding back cookies and session middleware&#xA;config.middleware.use ActionDispatch::Cookies&#xA;config.middleware.use ActionDispatch::Session::CookieStore&#xA;&#xA;# Use SameSite=Strict for all cookies to help protect against CSRF&#xA;config.action_dispatch.cookies_same_site_protection = :strict&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also need to include helpers for sessions/cookies in our controllers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app/controllers/application_controller.rb&#xA;&#xA;class ApplicationController &amp;lt; ActionController::API&#xA;  include ActionController::Cookies&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, we can set a session cookie for users when they log in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;def create&#xA;  user = User.find_by(username: params[:username]).authenticate(params[:password])&#xA;  session[:user_id] = user.id&#xA;  render json: user&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploying Setup Explained&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ll deploy our frontend and backend to Heroku on one single app. There are a couple key pieces to this configuration. First, the &lt;a href=&#34;https://devcenter.heroku.com/articles/procfile&#34;&gt;&lt;code&gt;Procfile&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;web: bundle exec rails s&#xA;release: bin/rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives Heroku instructions on commands to run on &lt;strong&gt;release&lt;/strong&gt; (run our migrations), and &lt;strong&gt;web&lt;/strong&gt; (run rails server).&lt;/p&gt; &#xA;&lt;p&gt;Second, the &lt;code&gt;package.json&lt;/code&gt; file in the &lt;strong&gt;root&lt;/strong&gt; directory (not the one in the &lt;strong&gt;client&lt;/strong&gt; directory):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: &#34;phase-4-deploying-app-demo&#34;,&#xA;  &#34;description&#34;: &#34;Build scripts for Heroku&#34;,&#xA;  &#34;engines&#34;: {&#xA;    &#34;node&#34;: &#34;16.x&#34;&#xA;  },&#xA;  &#34;scripts&#34;: {&#xA;    &#34;build&#34;: &#34;npm install --prefix client &amp;amp;&amp;amp; npm run build --prefix client&#34;,&#xA;    &#34;clean&#34;: &#34;rm -rf public&#34;,&#xA;    &#34;deploy&#34;: &#34;cp -a client/build/. public/&#34;,&#xA;    &#34;heroku-postbuild&#34;: &#34;npm run clean &amp;amp;&amp;amp; npm run build &amp;amp;&amp;amp; npm run deploy&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://devcenter.heroku.com/articles/nodejs-support#customizing-the-build-process&#34;&gt;&lt;code&gt;heroku-postbuild&lt;/code&gt;&lt;/a&gt; script will run when our app has been deployed. This will build the production version of our React app. It does the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;removes any old versions of the React code by deleting the &lt;code&gt;public&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;installs the frontend dependencies with &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;builds a production version of the React application with &lt;code&gt;npm build&lt;/code&gt; in the &lt;code&gt;client/build&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;copies the built version of the React code into the &lt;code&gt;public&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When a request comes to our server, we can decide if it&#39;s request for an API resource, or a request to view the React application. If it&#39;s an API request, we can send back JSON data from the controller. Otherwise, we can send back the &lt;code&gt;index.html&lt;/code&gt; file from our &lt;code&gt;public&lt;/code&gt; directory and run the React application.&lt;/p&gt; &#xA;&lt;h3&gt;React Router&lt;/h3&gt; &#xA;&lt;p&gt;For our deployed app, we need non-API requests to pass through to our React application. Otherwise, routes that would normally be handled by React Router will be handled by Rails instead.&lt;/p&gt; &#xA;&lt;p&gt;Setup routes fallback (make sure this is the last route defined in the &lt;code&gt;routes.rb&lt;/code&gt; file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# config/routes.rb&#xA;get &#39;*path&#39;, to: &#34;fallback#index&#34;, constraints: -&amp;gt;(req) { !req.xhr? &amp;amp;&amp;amp; req.format.html? }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add controller action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class FallbackController &amp;lt; ActionController::Base&#xA;&#xA;  def index&#xA;    render file: &#39;public/index.html&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: this controller must inherit from &lt;code&gt;ActionController::Base&lt;/code&gt; instead of &lt;code&gt;ApplicationController&lt;/code&gt;, since &lt;code&gt;ApplicationController&lt;/code&gt; inherits from &lt;code&gt;ActionController::API&lt;/code&gt;. API controllers can&#39;t render HTML. Plus, we don&#39;t need any of the auth logic in this controller.&lt;/p&gt;</summary>
  </entry>
</feed>