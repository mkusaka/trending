<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-24T01:44:27Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>saturnflyer/polyfill-data</title>
    <updated>2023-01-24T01:44:27Z</updated>
    <id>tag:github.com,2023-01-24:/saturnflyer/polyfill-data</id>
    <link href="https://github.com/saturnflyer/polyfill-data" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Adds the Ruby 3.2 Data class to lower Ruby versions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Polyfill - Data&lt;/h1&gt; &#xA;&lt;p&gt;Add the Ruby 3.2 &lt;a href=&#34;https://docs.ruby-lang.org/en/3.2/Data.html&#34;&gt;Data&lt;/a&gt; class to earlier Rubies.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the gem and add to the application&#39;s Gemfile by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle add polyfill-data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If bundler is not being used to manage dependencies, install the gem by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install polyfill-data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Polyfill-Data is cryptographically signed. To be sure the gem you install hasn‚Äôt been tampered with:&lt;/p&gt; &#xA;&lt;p&gt;Add the public key (if you haven‚Äôt already) as a trusted certificate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem cert --add &amp;lt;(curl -Ls https://raw.github.com/saturnflyer/polyfill-data/main/certs/saturnflyer.pem)&#xA;&#xA;gem install polyfill-data -P HighSecurity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;polyfill-data&#39;&#xA;&#xA;MyValue = Data.define(:some, :stuff)&#xA;a_value = MyValue.new(some: &#34;thing&#34;, stuff: &#34;here&#34;)&#xA;puts a_value.to_h # =&amp;gt; { some: &#34;thing&#34;, stuff: &#34;here&#34; }&#xA;&#xA;another = a_value.with(stuff: &#34;there&#34;)&#xA;puts another.eql?(a_value) # =&amp;gt; false&#xA;puts another.to_h # =&amp;gt; { some: &#34;thing&#34;, stuff: &#34;there&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake test&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and the created tag, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/saturnflyer/polyfill-data&#34;&gt;https://github.com/saturnflyer/polyfill-data&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Homebrew/homebrew-autoupdate</title>
    <updated>2023-01-24T01:44:27Z</updated>
    <id>tag:github.com,2023-01-24:/Homebrew/homebrew-autoupdate</id>
    <link href="https://github.com/Homebrew/homebrew-autoupdate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üçπ An easy, convenient way to automatically update Homebrew.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Homebrew Autoupdate&lt;/h1&gt; &#xA;&lt;p&gt;An easy, convenient way to automatically update Homebrew.&lt;/p&gt; &#xA;&lt;p&gt;This script will run &lt;code&gt;brew update&lt;/code&gt; in the background once every 24 hours (by default) until explicitly told to stop, utilising &lt;code&gt;launchd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;brew upgrade&lt;/code&gt; and &lt;code&gt;brew cleanup&lt;/code&gt; can also be handled automatically but are optional flags.&lt;/p&gt; &#xA;&lt;p&gt;Notifications are enabled by default on macOS Big Sur using a new, codesigned, universal AppleScript applet. On older versions of macOS, if you have &lt;code&gt;terminal-notifier&lt;/code&gt; installed you can also request desktop notifications when this command runs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/update.png&#34; alt=&#34;A comic highlighting humanity&#39;s habit of skipping important updates&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing this command&lt;/h2&gt; &#xA;&lt;p&gt;Just &lt;code&gt;brew tap homebrew/autoupdate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: brew autoupdate subcommand [interval] [options]&#xA;&#xA;An easy, convenient way to automatically update Homebrew.&#xA;&#xA;This script will run brew update in the background once every 24 hours (by&#xA;default) until explicitly told to stop, utilising launchd.&#xA;&#xA;brew autoupdate start [interval] [options]:&#xA;    Start autoupdating either once every interval hours or once every 24&#xA;hours. Please note the interval has to be passed in seconds, so 12 hours would&#xA;be brew autoupdate start 43200. Pass --upgrade or --cleanup to&#xA;automatically run brew upgrade and/or brew cleanup respectively. Pass&#xA;--enable-notification to send a notification when the autoupdate process has&#xA;finished successfully.&#xA;&#xA;brew autoupdate stop:&#xA;    Stop autoupdating, but retain plist &amp;amp; logs.&#xA;&#xA;brew autoupdate delete:&#xA;    Cancel the autoupdate, delete the plist and logs.&#xA;&#xA;brew autoupdate status:&#xA;    Prints the current status of this tool.&#xA;&#xA;brew autoupdate version:&#xA;    Output this tool&#39;s current version, and a short changelog.&#xA;&#xA;      --upgrade                    Automatically upgrade your installed&#xA;                                   formulae. If the Caskroom exists locally&#xA;                                   Casks will be upgraded as well. Must be&#xA;                                   passed with start.&#xA;      --greedy                     Upgrade casks with --greedy. See brew(1).&#xA;                                   Must be passed with start.&#xA;      --cleanup                    Automatically clean brew&#39;s cache and logs.&#xA;                                   Must be passed with start.&#xA;      --enable-notification        Send a notification when the autoupdate&#xA;                                   process has finished successfully, if&#xA;                                   terminal-notifier is installed &amp;amp; found.&#xA;                                   Must be passed with start.&#xA;                                   NOTE: Notifications are enabled by default&#xA;                                   on macOS Catalina and newer.&#xA;      --immediate                  Starts the autoupdate command immediately,&#xA;                                   instead of waiting for one interval (24&#xA;                                   hours by default) to pass first. Must be&#xA;                                   passed with start.&#xA;  -d, --debug                      Display any debugging information.&#xA;  -q, --quiet                      Make some output more quiet.&#xA;  -v, --verbose                    Make some output more verbose.&#xA;  -h, --help                       Show this message.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Logs of the performed operations can be found at:&lt;/strong&gt; &lt;code&gt;~/Library/Logs/com.github.domt4.homebrew-autoupdate&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;This vs &lt;code&gt;brew&lt;/code&gt;&#39;s built-in autoupdate mechanism&lt;/h2&gt; &#xA;&lt;p&gt;This command mostly exists to ensure Homebrew is updated regardless of whether you invoke &lt;code&gt;brew&lt;/code&gt; or not, which is the primary difference from the autoupdate mechanism built into &lt;code&gt;brew&lt;/code&gt;, the latter requiring a user to explicitly run any of &lt;code&gt;brew install&lt;/code&gt;, &lt;code&gt;brew tap&lt;/code&gt; or &lt;code&gt;brew upgrade&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you run &lt;code&gt;brew&lt;/code&gt; commands regularly yourself, you may wish to consider using the built-in autoupdate mechanism, which can be instructed to autoupdate less often or disabled entirely. If you wish to update every 24 hours using the built-in autoupdate mechanism set this in your environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export HOMEBREW_AUTO_UPDATE_SECS=&#34;86400&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you wish to disable the built-in autoupdate mechanism entirely:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export HOMEBREW_NO_AUTO_UPDATE=&#34;1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that Homebrew slightly frowns upon people disabling the built-in autoupdate mechanism.&lt;/p&gt; &#xA;&lt;h2&gt;TO-DO (PRs Welcome)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Complete broader testing and roll-out of new, experimental notification support added in &lt;a href=&#34;https://github.com/Homebrew/homebrew-autoupdate/commit/6365cc020&#34;&gt;6365cc020&lt;/a&gt; that doesn&#39;t require or use any external dependencies, using only an Applescript applet. &lt;a href=&#34;https://github.com/Homebrew/homebrew-autoupdate/issues/25&#34;&gt;Related Issue&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Decide what to do about Cask upgrades which require &lt;code&gt;sudo&lt;/code&gt; to succeed and currently just hang when that situation is encountered, unless using &lt;code&gt;SUDO_ASKPASS&lt;/code&gt;. &lt;a href=&#34;https://github.com/Homebrew/homebrew-autoupdate/issues/40&#34;&gt;Related Issue&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;This tap was created by &lt;a href=&#34;https://github.com/DomT4&#34;&gt;DomT4&lt;/a&gt; in April 2015 to address a personal desire for a background updater, before being moved to the Homebrew organisation in April 2021 to become an official part of the project after gaining somewhat widespread usage, something I&#39;m both surprised by but also very appreciative of people finding a small tool I wrote so useful &amp;amp; contributing their own ideas and time towards.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Code is under the &lt;a href=&#34;https://github.com/DomT4/homebrew-autoupdate/raw/master/LICENSE.txt&#34;&gt;BSD 2 Clause (NetBSD) license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SwiftGen/SwiftGenPlugin</title>
    <updated>2023-01-24T01:44:27Z</updated>
    <id>tag:github.com,2023-01-24:/SwiftGen/SwiftGenPlugin</id>
    <link href="https://github.com/SwiftGen/SwiftGenPlugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SwiftGen plugin for SPM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftGenPlugin&lt;/h1&gt; &#xA;&lt;p&gt;SwiftGen code generation for Swift packages that works on any machine. No installation required, simply add the package to your &lt;code&gt;Package.swift&lt;/code&gt;&#39;s dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  dependencies: [&#xA;    .package(url: &#34;https://github.com/SwiftGen/SwiftGenPlugin&#34;, from: &#34;6.6.0&#34;)&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using it as a (pre-)build tool&lt;/h2&gt; &#xA;&lt;p&gt;Adding SwiftGen as a prebuild tool will execute it and generate your files &lt;strong&gt;before each build&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Add to Package.swift&lt;/h3&gt; &#xA;&lt;p&gt;After adding the dependency to your &lt;code&gt;Package.swift&lt;/code&gt;, include the &lt;code&gt;SwiftGenPlugin&lt;/code&gt; plugin in any targets for which you would like it to run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  targets: [&#xA;    .target(&#xA;      name: &#34;YourTargetName&#34;,&#xA;      dependencies: [],&#xA;      plugins: [&#xA;        .plugin(name: &#34;SwiftGenPlugin&#34;, package: &#34;SwiftGenPlugin&#34;)&#xA;      ]&#xA;    )&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add a SwiftGen config&lt;/h3&gt; &#xA;&lt;p&gt;Add a &lt;code&gt;swiftgen.yml&lt;/code&gt; file to your project following the &lt;a href=&#34;https://github.com/SwiftGen/SwiftGen/raw/stable/Documentation/ConfigFile.md&#34;&gt;configuration file format&lt;/a&gt;, and prefix each of your output paths with &lt;code&gt;${DERIVED_SOURCES_DIR}/&lt;/code&gt;. Or set this globally in your configuration by setting the &lt;code&gt;output_dir&lt;/code&gt; to that value.&lt;/p&gt; &#xA;&lt;p&gt;Take a look at this repository&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGenPlugin/stable/Examples/top-level-swiftgen.yml&#34;&gt;swiftgen.yml&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;h3&gt;Supporting Multiple Targets&lt;/h3&gt; &#xA;&lt;p&gt;Each time the plugin is invoked it will look for a &lt;code&gt;swiftgen.yml&lt;/code&gt; configuration file in 2 places:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The root of your package (same folder as &lt;code&gt;Package.swift&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Your target&#39;s folder, for example &lt;code&gt;Sources/MyExample&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It will invoke SwiftGen for each found configuration file, so you could choose either option, or combine both. This can be useful if you need some target-specific configuration and some shared configuration, without repeating yourself.&lt;/p&gt; &#xA;&lt;p&gt;Do note that the paths (to resources) in a configuration will need to change depending on where the configuration is located:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Root configurations will need the full path to resources, such as &lt;code&gt;Sources/MyExample/Resources/Localizable.strings&lt;/code&gt;. Or set the config&#39;s &lt;code&gt;input_dir&lt;/code&gt; to &lt;code&gt;Sources/MyExample/Resources&lt;/code&gt;. See an &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGenPlugin/stable/Examples/top-level-swiftgen.yml&#34;&gt;example of a top-level configuration&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Target configurations will need the relative path to resources, such as &lt;code&gt;Resources/Localizable.strings&lt;/code&gt;. Or set the config&#39;s &lt;code&gt;input_dir&lt;/code&gt; to &lt;code&gt;Resources&lt;/code&gt;. See an &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGenPlugin/stable/Examples/target-specific-swiftgen.yml&#34;&gt;example of a target specific configuration&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using it as a command&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;strong&gt;manually&lt;/strong&gt; invoke SwiftGen using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift package --allow-writing-to-package-directory generate-code-for-resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command will automatically search for &lt;code&gt;swiftgen.yml&lt;/code&gt; configuration files in each of your targets&#39; (or top-level) folder, and invoke SwiftGen for them.&lt;/p&gt; &#xA;&lt;p&gt;If you want to manually provide the configuration file and other settings, pass them along as extra arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift package --allow-writing-to-package-directory generate-code-for-resources --config MyConfig.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Licence&lt;/h1&gt; &#xA;&lt;p&gt;This code and tool is under the MIT Licence. See the &lt;code&gt;LICENCE&lt;/code&gt; file in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;p&gt;These plugins are powered by &lt;a href=&#34;https://github.com/SwiftGen/SwiftGen&#34;&gt;SwiftGen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is currently mainly maintained by &lt;a href=&#34;https://github.com/AliSoftware&#34;&gt;@AliSoftware&lt;/a&gt; and &lt;a href=&#34;https://github.com/djbe&#34;&gt;@djbe&lt;/a&gt;. But I couldn&#39;t thank enough all the other &lt;a href=&#34;https://github.com/SwiftGen/SwiftGen/graphs/contributors&#34;&gt;contributors&lt;/a&gt; to this tool along the different versions which helped make SwiftGen awesome! üéâ&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute, don&#39;t hesitate to open a Pull Request, or even join the team!&lt;/p&gt;</summary>
  </entry>
</feed>