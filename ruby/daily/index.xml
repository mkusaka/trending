<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-18T01:38:30Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>learn-co-curriculum/phase-3-reading-error-messages</title>
    <updated>2022-10-18T01:38:30Z</updated>
    <id>tag:github.com,2022-10-18:/learn-co-curriculum/phase-3-reading-error-messages</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-reading-error-messages" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reading Ruby Error Messages&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the different parts of an error message&lt;/li&gt; &#xA; &lt;li&gt;Identify common types of errors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this lab, you&#39;ll be reading error messages from tests. This lab is designed so that both running the files &lt;em&gt;and&lt;/em&gt; running the test suite via the &lt;code&gt;learn test&lt;/code&gt; command will show the error messages for you to decode. Moving forward though, you&#39;ll be reading error messages mainly through running the test suite.&lt;/p&gt; &#xA;&lt;h2&gt;Reading Error Messages&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s start by running some of the Ruby code in the &lt;code&gt;lib&lt;/code&gt; folder to produce an error message. Run this in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ruby lib/a_name_error.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Error messages have 3 parts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;lib/a_name_error.rb:3:in `&amp;lt;main&amp;gt;&#39;: undefined local variable or method `hello_world&#39; for main:Object (NameError)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The location of the error, the &#34;where&#34;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;lib/a_name_error.rb:3:in `&amp;lt;main&amp;gt;&#39;:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;lib/a_name_error.rb&lt;/code&gt; is the file the error occurred in.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;3&lt;/code&gt; is the line of code with the error.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; is the scope of the error.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The description, the &#34;why&#34;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;undefined local variable or method `hello_world&#39; for main:Object&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The interpreter does the best job it can to tell you what it thinks went wrong.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The type of error, the &#34;who&#34;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;(NameError)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is a &lt;a href=&#34;http://www.ruby-doc.org/core-2.2.0/Exception.html&#34;&gt;Ruby Error Type&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You&#39;ve solved games of &lt;em&gt;Clue&lt;/em&gt; with less information. This is one of the best parts of programming: debugging and fixing errors. It&#39;s like you&#39;re a detective solving a crime. The only bad thing is that more often than not, you&#39;re also the criminal that caused the error in the first place.&lt;/p&gt; &#xA;&lt;p&gt;Errors are clues, and reading them is the interpreter telling you what to do to fix the program and move on.&lt;/p&gt; &#xA;&lt;h2&gt;Four Common Error Types&lt;/h2&gt; &#xA;&lt;h3&gt;Name Errors&lt;/h3&gt; &#xA;&lt;p&gt;Name errors are caused when a given name is invalid or undefined. Whenever the Ruby interpreter encounters a word it doesn&#39;t recognize, it assumes that word is the name of a variable or a method. If that word was never defined as either a variable or a method, it will result in a name error. Try this out in IRB:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$  irb&#xA;2.7.3 :001 &amp;gt; a_variable&#xA;NameError (undefined local variable or method `a_variable&#39; for main:Object)&#xA;2.7.3 :002 &amp;gt; a_variable = 7&#xA; =&amp;gt; 7&#xA;2.7.3 :003 &amp;gt; a_variable&#xA; =&amp;gt; 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Trying to access &lt;code&gt;a_variable&lt;/code&gt; before assigning it a value results in a &lt;code&gt;NameError&lt;/code&gt;, which we can fix by assigning it some value.&lt;/p&gt; &#xA;&lt;h3&gt;Syntax Errors&lt;/h3&gt; &#xA;&lt;p&gt;Syntax errors are pretty self-explanatory: they&#39;re the result of incorrect syntax. Thankfully, they&#39;re usually followed by a guess about the location of the error. For example, imagine we had included the following code inside some Ruby code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;2.times do&#xA;  puts &#34;hi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running our code would result in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;2: syntax error, unexpected end-of-input, expecting keyword_end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, Ruby is saying that on line 2, there is a missing &lt;code&gt;end&lt;/code&gt; (every &lt;code&gt;do&lt;/code&gt; keyword must be followed by some code and then an &lt;code&gt;end&lt;/code&gt; keyword). Always read the full details of syntax errors and look for line numbers, which usually appear at the beginning of the error message.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You won&#39;t be able to reproduce the above syntax error using IRB, because IRB won&#39;t execute the code until you enter a matching &lt;code&gt;end&lt;/code&gt; keyword for the &lt;code&gt;do&lt;/code&gt; block. You can see this error by creating a Ruby file, adding the code above, and executing the file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Type Errors&lt;/h3&gt; &#xA;&lt;p&gt;When you try and do a mathematical operation on two objects of a different type, you will receive a &lt;code&gt;TypeError&lt;/code&gt;. For example if you try and add a string to an integer, Ruby will complain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;1 + &#34;1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will produce the following error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;TypeError: String can&#39;t be coerced into Fixnum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Division Errors&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;DivisionError&lt;/code&gt; is caused when a given number is divided by 0.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;To get started, run &lt;code&gt;learn test --f-f&lt;/code&gt; to run the first test in the test suite. Use the error messages to guide your work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Read the errors. Scroll through the entire output to get a sense of what the failures are trying to tell you. What does the error mean? How can we fix it?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each error prints out a &lt;strong&gt;stack trace&lt;/strong&gt;, which points to where the code failed and attempts to follow it &lt;em&gt;up the stack&lt;/em&gt; â€” that is, through the bits of code that ran leading up to the failure. You can use these stack traces to pinpoint which line(s) of code need your attention.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;These stack traces can also point you to which files you should run to get a better sense of the errors.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Fix the errors in each of the files in &lt;code&gt;lib/&lt;/code&gt;. Then confirm the fix by running &lt;code&gt;learn test&lt;/code&gt; again.&lt;/p&gt;</summary>
  </entry>
</feed>