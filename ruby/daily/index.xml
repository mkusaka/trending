<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-08T01:41:35Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>moneyforward/rspecq</title>
    <updated>2022-09-08T01:41:35Z</updated>
    <id>tag:github.com,2022-09-08:/moneyforward/rspecq</id>
    <link href="https://github.com/moneyforward/rspecq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Distribute and run RSpec suites among parallel workers; for faster CI builds&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RSpec Queue&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/skroutz/rspecq/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt; &lt;a href=&#34;https://badge.fury.io/rb/rspecq&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rspecq.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RSpec Queue (RSpecQ) distributes and executes RSpec suites among parallel workers. It uses a centralized queue that workers connect to and pop off tests from. It ensures optimal scheduling of tests based on their run time, facilitating faster CI builds.&lt;/p&gt; &#xA;&lt;p&gt;RSpecQ is inspired by &lt;a href=&#34;https://github.com/tmm1/test-queue&#34;&gt;test-queue&lt;/a&gt; and &lt;a href=&#34;https://github.com/Shopify/ci-queue&#34;&gt;ci-queue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run an RSpec suite among many workers (potentially located in different hosts) in a distributed fashion, facilitating faster CI builds.&lt;/li&gt; &#xA; &lt;li&gt;Consolidated, real-time reporting of a build&#39;s progress.&lt;/li&gt; &#xA; &lt;li&gt;Optimal scheduling of test execution by using timings statistics from previous runs and automatically scheduling slow spec files as individual examples. See &lt;a href=&#34;https://raw.githubusercontent.com/moneyforward/rspecq/master/#spec-file-splitting&#34;&gt;&lt;em&gt;Spec file splitting&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Automatic retry of test failures before being considered legit, in order to rule out flakiness. Additionally, flaky tests are detected and provided to the user. See &lt;a href=&#34;https://raw.githubusercontent.com/moneyforward/rspecq/master/#requeues&#34;&gt;&lt;em&gt;Requeues&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Handles intermittent worker failures (e.g. network hiccups, faulty hardware etc.) by detecting non-responsive workers and requeing their jobs. See &lt;a href=&#34;https://raw.githubusercontent.com/moneyforward/rspecq/master/#worker-failures&#34;&gt;&lt;em&gt;Worker failures&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sentry integration for monitoring build-level events. See &lt;a href=&#34;https://raw.githubusercontent.com/moneyforward/rspecq/master/#sentry-integration&#34;&gt;&lt;em&gt;Sentry integration&lt;/em&gt;&lt;/a&gt;. See &lt;a href=&#34;https://github.com/skroutz/rspecq/issues/2&#34;&gt;#2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Automatic termination of builds after a certain amount of failures. See &lt;a href=&#34;https://raw.githubusercontent.com/moneyforward/rspecq/master/#fail-fast&#34;&gt;&lt;em&gt;Fail-fast&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A worker needs to be given a name and the build it will participate in. Assuming there&#39;s a Redis instance listening at &lt;code&gt;localhost&lt;/code&gt;, starting a worker is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rspecq --build=123 --worker=foo1 spec/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start more workers for the same build, use distinct worker IDs but the same build ID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rspecq --build=123 --worker=foo2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view the progress of the build use &lt;code&gt;--report&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rspecq --build=123 --report&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For detailed info use &lt;code&gt;--help&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NAME:&#xA;    rspecq - Optimally distribute and run RSpec suites among parallel workers&#xA;&#xA;USAGE:&#xA;    rspecq [&amp;lt;options&amp;gt;] [spec files or directories]&#xA;&#xA;OPTIONS:&#xA;    -b, --build ID                   A unique identifier for the build. Should be common among workers participating in the same build.&#xA;    -w, --worker ID                  An identifier for the worker. Workers participating in the same build should have distinct IDs.&#xA;        --seed SEED                  The RSpec seed. Passing the seed can be helpful in many ways i.e reproduction and testing.&#xA;    -r, --redis HOST                 --redis is deprecated. Use --redis-host or --redis-url instead. Redis host to connect to (default: 127.0.0.1).&#xA;        --redis-host HOST            Redis host to connect to (default: 127.0.0.1).&#xA;        --redis-url URL              Redis URL to connect to (e.g.: redis://127.0.0.1:6379/0).&#xA;        --update-timings             Update the global job timings key with the timings of this build. Note: This key is used as the basis for job scheduling.&#xA;        --file-split-threshold N     Split spec files slower than N seconds and schedule them as individual examples.&#xA;        --report                     Enable reporter mode: do not pull tests off the queue; instead print build progress and exit when it&#39;s finished.&#xA;                                     Exits with a non-zero status code if there were any failures.&#xA;        --report-timeout N           Fail if build is not finished after N seconds. Only applicable if --report is enabled (default: 3600).&#xA;        --max-requeues N             Retry failed examples up to N times before considering them legit failures (default: 3).&#xA;        --queue-wait-timeout N       Time to wait for a queue to be ready before considering it failed (default: 30).&#xA;        --fail-fast N                Abort build with a non-zero status code after N failed examples.&#xA;        --reproduction               Enable reproduction mode: Publish files and examples in the exact order given in the command. Incompatible with --timings.&#xA;        --tag TAG                    Run examples with the specified tag, or exclude examples by adding ~ before the tag.  - e.g. ~slow  - TAG is always converted to a symbol.&#xA;    -h, --help                       Show this message.&#xA;    -v, --version                    Print the version and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set most options using ENV variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ RSPECQ_BUILD=123 RSPECQ_WORKER=foo1 rspecq spec/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported ENV variables&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_BUILD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build ID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_WORKER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Worker ID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_SEED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;RSpec seed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_REDIS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redis HOST&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_UPDATE_TIMINGS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Timings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_FILE_SPLIT_THRESHOLD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;File split threshold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_REPORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Report&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_REPORT_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Report Timeout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_MAX_REQUEUES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Max requests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_QUEUE_WAIT_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Queue wait timeout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_REDIS_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redis URL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_FAIL_FAST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fail fast&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RSPECQ_REPORTER_RERUN_COMMAND_SKIP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do not report flaky test&#39;s rerun command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Sentry integration&lt;/h3&gt; &#xA;&lt;p&gt;RSpecQ can optionally emit build events to a &lt;a href=&#34;https://sentry.io&#34;&gt;Sentry&lt;/a&gt; project by setting the &lt;code&gt;SENTRY_DSN&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;This is convenient for monitoring important warnings/errors that may impact build times, such as the fact that no previous timings were found and therefore job scheduling was effectively random for a particular build.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The core design is almost identical to ci-queue so please refer to its &lt;a href=&#34;https://github.com/Shopify/ci-queue/raw/master/README.md&#34;&gt;README&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;Terminology&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Job&lt;/strong&gt;: the smallest unit of work, which is usually a spec file (e.g. &lt;code&gt;./spec/models/foo_spec.rb&lt;/code&gt;) but can also be an individual example (e.g. &lt;code&gt;./spec/models/foo_spec.rb[1:2:1]&lt;/code&gt;) if the file is too slow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Queue&lt;/strong&gt;: a collection of Redis-backed structures that hold all the necessary information for an RSpecQ build to run. This includes timing statistics, jobs to be executed, the failure reports and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt;: a particular test suite run. Each build has its own &lt;strong&gt;Queue&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Worker&lt;/strong&gt;: an &lt;code&gt;rspecq&lt;/code&gt; process that, given a build id, consumes jobs off the build&#39;s queue and executes them using RSpec&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reporter&lt;/strong&gt;: an &lt;code&gt;rspecq&lt;/code&gt; process that, given a build id, waits for the build&#39;s queue to be drained and prints the build summary report&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Spec file splitting&lt;/h3&gt; &#xA;&lt;p&gt;Particularly slow spec files may set a limit to how fast a build can be. For example, a single file may need 10 minutes to run while all other files finish after 8 minutes. This would cause all but one workers to be sitting idle for 2 minutes.&lt;/p&gt; &#xA;&lt;p&gt;To overcome this issue, RSpecQ can split files which their execution time is above a certain threshold (set with the &lt;code&gt;--file-split-threshold&lt;/code&gt; option) and instead schedule them as individual examples.&lt;/p&gt; &#xA;&lt;p&gt;Note: In the future, we&#39;d like for the slow threshold to be calculated and set dynamically (see #3).&lt;/p&gt; &#xA;&lt;h3&gt;Requeues&lt;/h3&gt; &#xA;&lt;p&gt;As a mitigation technique against flaky tests, if an example fails it will be put back to the queue to be picked up by another worker. This will be repeated up to a certain number of times (set with the &lt;code&gt;--max-requeues&lt;/code&gt; option), after which the example will be considered a legit failure and printed as such in the final report.&lt;/p&gt; &#xA;&lt;p&gt;Flaky tests are also detected and printed as such in the final report. They are also emitted to Sentry (see &lt;a href=&#34;https://raw.githubusercontent.com/moneyforward/rspecq/master/#sentry-integration&#34;&gt;Sentry integration&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Fail-fast&lt;/h3&gt; &#xA;&lt;p&gt;In order to prevent large suites running for a long time with a lot of failures, a threshold can be set to control the number of failed examples that will render the build unsuccessful. This is in par with RSpec&#39;s &lt;a href=&#34;https://relishapp.com/rspec/rspec-core/docs/command-line/fail-fast-option&#34;&gt;--fail-fast&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature is disabled by default, and can be controlled via the &lt;code&gt;--fail-fast&lt;/code&gt; command line option.&lt;/p&gt; &#xA;&lt;h3&gt;Worker failures&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s not uncommon for CI processes to encounter unrecoverable failures for various reasons: faulty hardware, network hiccups, segmentation faults in MRI etc.&lt;/p&gt; &#xA;&lt;p&gt;For resiliency against such issues, workers emit a heartbeat after each example they execute, to signal that they&#39;re healthy and performing jobs as expected. If a worker hasn&#39;t emitted a heartbeat for a given amount of time (set by &lt;code&gt;WORKER_LIVENESS_SEC&lt;/code&gt;) it is considered dead and its reserved job will be put back to the queue, to be picked up by another healthy worker.&lt;/p&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;h3&gt;Why didn&#39;t you use ci-queue?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: ci-queue &lt;a href=&#34;https://github.com/Shopify/ci-queue/pull/149&#34;&gt;deprecated support for RSpec&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While evaluating ci-queue we experienced slow worker boot times (up to 3 minutes in some cases) combined with disk IO saturation and increased memory consumption. This is due to the fact that a worker in ci-queue has to load every spec file on boot. In applications with a large number of spec files this may result in a significant performance hit and in case of cloud environments, increased costs.&lt;/p&gt; &#xA;&lt;p&gt;We also observed slower build times compared to our previous solution which scheduled whole spec files (as opposed to individual examples), due to big differences in runtimes of individual examples, something common in big RSpec suites.&lt;/p&gt; &#xA;&lt;p&gt;We decided for RSpecQ to use whole spec files as its main unit of work (as opposed to ci-queue which uses individual examples). This means that an RSpecQ worker only loads the files needed and ends up with a subset of all the suite&#39;s files. (Note: RSpecQ also schedules individual examples, but only when this is deemed necessary, see &lt;a href=&#34;https://raw.githubusercontent.com/moneyforward/rspecq/master/#spec-file-splitting&#34;&gt;Spec file splitting&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This kept boot and test run times considerably fast. As a side benefit, this allows suites to keep using &lt;code&gt;before(:all)&lt;/code&gt; hooks (which ci-queue explicitly rejects).&lt;/p&gt; &#xA;&lt;p&gt;The downside of this design is that it&#39;s more complicated, since the scheduling of spec files happens based on timings calculated from previous runs. This means that RSpecQ maintains a key with the timing of each job and updates it on every run (if the &lt;code&gt;--update-timings&lt;/code&gt; option was used). Also, RSpecQ has a &#34;slow file threshold&#34; which, currently has to be set manually (but this can be improved in the future).&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Install the required dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can execute the tests after spinning up a Redis instance at &lt;code&gt;127.0.0.1:6379&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec rake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable verbose output in the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ RSPECQ_DEBUG=1 bundle exec rake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;p&gt;RSpecQ by design doesn&#39;t expire its keys from Redis. It is left to the user to configure the Redis server to do so; see &lt;a href=&#34;https://redis.io/topics/lru-cache&#34;&gt;Using Redis as an LRU cache&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;You can do this from a configuration file or with &lt;code&gt;redis-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;RSpecQ is licensed under MIT. See &lt;a href=&#34;https://raw.githubusercontent.com/moneyforward/rspecq/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-object-relations-practice-code-challenge-magazines-many-many</title>
    <updated>2022-09-08T01:41:35Z</updated>
    <id>tag:github.com,2022-09-08:/learn-co-curriculum/phase-3-object-relations-practice-code-challenge-magazines-many-many</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-object-relations-practice-code-challenge-magazines-many-many" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Object Relations Practice Code Challenge - Magazines&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;For this assignment, we&#39;ll be working with a Magazine domain.&lt;/p&gt; &#xA;&lt;p&gt;We have three models: &lt;code&gt;Magazine&lt;/code&gt;, &lt;code&gt;Subscription&lt;/code&gt;, and &lt;code&gt;Reader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For our purposes, a &lt;code&gt;Magazine&lt;/code&gt; has many &lt;code&gt;Subscription&lt;/code&gt;s, a &lt;code&gt;Reader&lt;/code&gt; has many &lt;code&gt;Subscription&lt;/code&gt;s, and a &lt;code&gt;Subscription&lt;/code&gt; belongs to a &lt;code&gt;Magazine&lt;/code&gt; and to an &lt;code&gt;Reader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Magazine&lt;/code&gt; - &lt;code&gt;Reader&lt;/code&gt; is a many to many relationship.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You should draw your domain on paper or on a whiteboard &lt;em&gt;before you start coding&lt;/em&gt;. Remember to identify a single source of truth for your data.&lt;/p&gt; &#xA;&lt;h2&gt;Topics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Active Record Migrations&lt;/li&gt; &#xA; &lt;li&gt;Object Relationships&lt;/li&gt; &#xA; &lt;li&gt;Active Record Queryng&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;To get started, run &lt;code&gt;bundle install&lt;/code&gt; while inside of this directory.&lt;/p&gt; &#xA;&lt;p&gt;Build out all of the methods listed in the deliverables. The methods are listed in a suggested order, but you can feel free to tackle the ones you think are easiest. Be careful: some of the later methods rely on earlier ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remember!&lt;/strong&gt; This code challenge does not have tests. You cannot run &lt;code&gt;rspec&lt;/code&gt; and you cannot run &lt;code&gt;learn&lt;/code&gt;. You&#39;ll need to create your own sample instances so that you can try out your code on your own. Make sure your associations and methods work in the console before submitting.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve provided you with a tool that you can use to test your code. To use it, run &lt;code&gt;rake console&lt;/code&gt; from the command line. This will start a &lt;code&gt;pry&lt;/code&gt; session with your classes defined. You can test out the methods that you write here. You are also encouraged to use the &lt;code&gt;seeds.rb&lt;/code&gt; file to create sample data to test your models and associations.&lt;/p&gt; &#xA;&lt;p&gt;Writing error-free code is more important than completing all of the deliverables listed - prioritize writing methods that work over writing more methods that don&#39;t work. You should test your code in the console as you write.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, messy code that works is better than clean code that doesn&#39;t. First, prioritize getting things working. Then, if there is time at the end, refactor your code to adhere to best practices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before you submit!&lt;/strong&gt; Save and run your code to verify that it works as you expect. If you have any methods that are not working yet, feel free to leave comments describing your progress.&lt;/p&gt; &#xA;&lt;h2&gt;What You Already Have&lt;/h2&gt; &#xA;&lt;p&gt;The starter code has migrations and models for the initial &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Magazine&lt;/code&gt; and &lt;code&gt;Subscription&lt;/code&gt; models, and seed data for some &lt;code&gt;Reader&lt;/code&gt;s and &lt;code&gt;Magazine&lt;/code&gt;s. The schema currently looks like this:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;readers&lt;/code&gt; Table&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;email&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;magazines&lt;/code&gt; Table&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You will need to create the migration for the &lt;code&gt;subscriptions&lt;/code&gt; table using the attributes specified in the deliverables below.&lt;/p&gt; &#xA;&lt;h2&gt;Deliverables&lt;/h2&gt; &#xA;&lt;p&gt;Write the following methods in the classes in the files provided. Feel free to build out any helper methods if needed.&lt;/p&gt; &#xA;&lt;p&gt;Deliverables use the notation &lt;code&gt;#&lt;/code&gt; for instance methods, and &lt;code&gt;.&lt;/code&gt; for class methods.&lt;/p&gt; &#xA;&lt;p&gt;Remember: Active Record give your classes access to a lot of built-in methods! Keep in mind what methods Active Record gives you access to on each of your classes when you&#39;re approaching the deliverables below.&lt;/p&gt; &#xA;&lt;h3&gt;Migrations&lt;/h3&gt; &#xA;&lt;p&gt;Before working on the rest of the deliverables, you will need to create a migration for the &lt;code&gt;subscriptions&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;Subscription&lt;/code&gt; belongs to a &lt;code&gt;Magazine&lt;/code&gt;, and a &lt;code&gt;Subscription&lt;/code&gt; also belongs to an &lt;code&gt;Reader&lt;/code&gt;. In your migration, create any columns your &lt;code&gt;subscriptions&lt;/code&gt; table will need to establish these relationships. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;subscriptions&lt;/code&gt; table should also have a &lt;code&gt;price&lt;/code&gt; column that stores an integer.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After creating your migration, use the &lt;code&gt;seeds.rb&lt;/code&gt; file to create instances of your &lt;code&gt;Subscription&lt;/code&gt; class so you can test your code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Once you&#39;ve set up your &lt;code&gt;Subscription&lt;/code&gt; class&lt;/strong&gt;, work on building out the following deliverables.&lt;/p&gt; &#xA;&lt;h3&gt;Object Relationship Methods&lt;/h3&gt; &#xA;&lt;p&gt;Use Active Record association macros and Active Record query methods where appropriate (i.e. &lt;code&gt;has_many&lt;/code&gt;, &lt;code&gt;has_many through&lt;/code&gt;, and &lt;code&gt;belongs_to&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Subscription&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Subscription#reader&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;should return the &lt;code&gt;Reader&lt;/code&gt; instance for this subscription&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Subscription#magazine&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;should return the &lt;code&gt;Magazine&lt;/code&gt; instance for this subscription&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Magazine&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Magazine#subscriptions&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns a collection of all &lt;code&gt;Subscription&lt;/code&gt; instances for this magazine&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Magazine#readers&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns a collection of all &lt;code&gt;Reader&lt;/code&gt; instances who are subscribed to this magazine&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reader&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader#subscriptions&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;should return a collection of all &lt;code&gt;Subscription&lt;/code&gt; instances for this reader&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader#magazines&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;should return a collection of all &lt;code&gt;Magazine&lt;/code&gt; instances that this reader is subscribed to&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Aggregate and Association Methods&lt;/h3&gt; &#xA;&lt;h4&gt;Subscription&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Subscription#print_details&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;puts&lt;/code&gt; a string to the terminal to display the details of the subscription&lt;/li&gt; &#xA;   &lt;li&gt;the string should be formatted like this: &lt;code&gt;{reader name} subscribed to {magazine title} for ${subscription price}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reader&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader#subscribe(magazine, price)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;takes a &lt;code&gt;magazine&lt;/code&gt; (an instance of the &lt;code&gt;Magazine&lt;/code&gt; class) and a &lt;code&gt;price&lt;/code&gt; (integer) as arguments, and creates a new &lt;code&gt;subscription&lt;/code&gt; in the database associated with the magazine and the reader&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader#total_subcription_price&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns the total price for all the reader&#39;s subscriptions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader#cancel_subscription(magazine)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;takes a &lt;code&gt;magazine&lt;/code&gt; instance and removes the subscription for this reader&lt;/li&gt; &#xA;   &lt;li&gt;you will have to delete a row from the &lt;code&gt;subscriptions&lt;/code&gt; table to get this to work!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Magazine&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Magazine#email_list&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns a &lt;code&gt;String&lt;/code&gt; of a semi-colon separated list of emails for all the readers subscribed to this magazine&lt;/li&gt; &#xA;   &lt;li&gt;the string should be formatted like this: &lt;code&gt;email1@example.com;email2@example.com;email3@example.com&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Magazine.most_popular&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns the &lt;code&gt;Magazine&lt;/code&gt; instance with the most subscribers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rubric&lt;/h2&gt; &#xA;&lt;h3&gt;Active Record Associations&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;No associations, no foreign key on the table.&lt;/li&gt; &#xA; &lt;li&gt;Associations attempted in the model but are incorrect; foreign key is on a table but in the wrong spot.&lt;/li&gt; &#xA; &lt;li&gt;Relationships properly created. Associations lead to the correct behavior but may have used the wrong macro or manually written out the methods the macro builds for us.&lt;/li&gt; &#xA; &lt;li&gt;Relationships properly created, save minor mistakes in advanced deliverables. May implement advanced query methods with iterators instead of using built-in methods.&lt;/li&gt; &#xA; &lt;li&gt;Relationships properly created. Advanced query methods use appropriate built-in methods.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build classes using OO Ruby Syntax&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Class code has a syntax or runtime error. Code does not run at all, or exits with an error, or most Object-oriented deliverables are not implemented.&lt;/li&gt; &#xA; &lt;li&gt;No syntax errors. Some deliverables function correctly. Mixes up syntax for class and instance methods, refers to variables in the wrong scope, or uses &lt;code&gt;self&lt;/code&gt; incorrectly, leading to logical errors. Method and variable names do not correspond to their respective behavior or data types. Methods might be duplicated, or code includes unused methods without a clear purpose.&lt;/li&gt; &#xA; &lt;li&gt;Correct class syntax for the deliverables submitted. May be incomplete or missing deliverables. Most code generally expresses intent: method and variable names match their behaviors and data types. Methods are not duplicated. Code does not have unused or methods without a clear purpose.&lt;/li&gt; &#xA; &lt;li&gt;Correct class syntax for all of the submitted code. Code express intent: method and variable names indicate their behavior and data types. Some deliverables might not be complete. No methods are duplicated.&lt;/li&gt; &#xA; &lt;li&gt;Correct class syntax for all deliverables, all deliverables complete. Code expresses intent: method and variable names indicate their behavior and data types, with the correct pluralization. No methods are duplicated. All methods have a clear purpose. Shared functionality is factored out into helper methods. Appropriate use of attr_* macros.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Model relationships using Ruby&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Submitted code does not relate models to each other through methods or data.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other, but incompletely. Relationship methods are missing or have logic errors, store data on the wrong model, or are missing a single source of truth.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other as specified in the instructions. Data is stored on the correct models, relationship methods are defined on the right models, and the logic correctly implements the relationships. Aggregate methods using the relationships may be incomplete or have errors.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other as specified in the instructions. Aggregate methods work, but might not use helper methods effectively.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other as specified in the instructions. Aggregate methods use helper methods effectively.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Solve problems with collections of data&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Does not attempt to solve collections problems, or has syntax errors in collection code.&lt;/li&gt; &#xA; &lt;li&gt;Collections methods have runtime or logic errors. Collections methods may use the wrong iterators, have incorrect logic, or many of the collections methods are unimplemented.&lt;/li&gt; &#xA; &lt;li&gt;Some collections methods work correctly, though several might be unimplemented. Code may not use the appropriate built in method for each problem, or duplicate logic instead of using helper methods.&lt;/li&gt; &#xA; &lt;li&gt;All collections methods are implemented and function correctly. Most use appropriate higher-level built-in methods. Methods may duplicate logic instead of using helper methods.&lt;/li&gt; &#xA; &lt;li&gt;All collections methods implemented and function correctly, using appropriate higher-level built-in methods. Shared logic is factored out to helper methods.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>