<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-21T01:36:33Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>markdownlint/markdownlint</title>
    <updated>2022-07-21T01:36:33Z</updated>
    <id>tag:github.com,2022-07-21:/markdownlint/markdownlint</id>
    <link href="https://github.com/markdownlint/markdownlint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Markdown lint tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Markdown lint tool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/markdownlint/markdownlint/actions?query=workflow%3A%22Continuous+Integration%22&#34;&gt;&lt;img src=&#34;https://github.com/markdownlint/markdownlint/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/mdl&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/mdl.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tool to check markdown files and flag style issues.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Markdownlint is written in ruby and is distributed as a rubygem. As long as you have a relatively up to date ruby on your system, markdownlint will be simple to install and use. You have 2 options to install it:&lt;/p&gt; &#xA;&lt;p&gt;To install from rubygems, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install mdl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the latest development version from github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/markdownlint/markdownlint&#xA;cd markdownlint&#xA;rake install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you will need &lt;a href=&#34;https://github.com/ruby/rake&#34;&gt;rake&lt;/a&gt; (&lt;code&gt;gem install rake&lt;/code&gt;) and &lt;a href=&#34;https://github.com/bundler/bundler&#34;&gt;bundler&lt;/a&gt; (&lt;code&gt;gem install bundler&lt;/code&gt;) in order to build from source.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To have markdownlint check your markdown files, simply run &lt;code&gt;mdl&lt;/code&gt; with the filenames as a parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mdl README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Markdownlint can also take a directory, and it will scan all markdown files within the directory (and nested directories):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mdl docs/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t specify a filename, markdownlint will use stdin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat foo.md | mdl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Markdownlint will output a list of issues it finds, and the line number where the issue is. See &lt;a href=&#34;https://raw.githubusercontent.com/markdownlint/markdownlint/master/docs/RULES.md&#34;&gt;RULES.md&lt;/a&gt; for information on each issue, as well as how to correct it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;README.md:1: MD013 Line length&#xA;README.md:70: MD029 Ordered list item prefix&#xA;README.md:71: MD029 Ordered list item prefix&#xA;README.md:72: MD029 Ordered list item prefix&#xA;README.md:73: MD029 Ordered list item prefix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Markdownlint has many more options you can pass on the command line, run &lt;code&gt;mdl --help&lt;/code&gt; to see what they are, or see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/markdownlint/markdownlint/master/docs/configuration.md&#34;&gt;configuring markdownlint&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Styles&lt;/h3&gt; &#xA;&lt;p&gt;Not everyone writes markdown in the same way, and there are multiple flavors and styles, each of which are valid. While markdownlint&#39;s default settings will result in markdown files that reflect the author&#39;s preferred markdown authoring preferences, your project may have different guidelines.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not markdownlint&#39;s intention to dictate any one specific style, and in order to support these differing styles and/or preferences, markdownlint supports what are called &#39;style files&#39;. A style file is a file describing which rules markdownlint should enable, and also what settings to apply to individual rules. For example, rule &lt;a href=&#34;https://raw.githubusercontent.com/markdownlint/markdownlint/master/docs/RULES.md#md013---line-length&#34;&gt;MD013&lt;/a&gt; checks for long lines, and by default will report an issue for any line longer than 80 characters. If your project has a different maximum line length limit, or if you don&#39;t want to enforce a line limit at all, then this can be configured in a style file.&lt;/p&gt; &#xA;&lt;p&gt;For more information on creating style files, see the &lt;a href=&#34;https://raw.githubusercontent.com/markdownlint/markdownlint/master/docs/creating_styles.md&#34;&gt;creating styles&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h3&gt;Custom rules and rulesets&lt;/h3&gt; &#xA;&lt;p&gt;It may be that the rules provided in this project don&#39;t cover your stylistic needs. To account for this, markdownlint supports the creation and use of custom rules.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/markdownlint/markdownlint/master/docs/creating_rules.md&#34;&gt;creating rules&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DavidAnson/markdownlint&#34;&gt;markdownlint&lt;/a&gt; and &lt;a href=&#34;https://github.com/igorshubovych/markdownlint-cli&#34;&gt;markdownlint-cli&lt;/a&gt; for Node.js&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/markdownlint/markdownlint/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>presidentbeef/brakeman</title>
    <updated>2022-07-21T01:36:33Z</updated>
    <id>tag:github.com,2022-07-21:/presidentbeef/brakeman</id>
    <link href="https://github.com/presidentbeef/brakeman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A static analysis security vulnerability scanner for Ruby on Rails applications&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://brakemanscanner.org/&#34;&gt;&lt;img src=&#34;http://brakemanscanner.org/images/logo_medium.png&#34; alt=&#34;Brakeman Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/presidentbeef/brakeman&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/presidentbeef/brakeman.svg?style=svg&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/presidentbeef/brakeman/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/1b08a5c74695cb0d11ec/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/presidentbeef/brakeman&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/presidentbeef/brakeman.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Brakeman&lt;/h1&gt; &#xA;&lt;p&gt;Brakeman is a static analysis tool which checks Ruby on Rails applications for security vulnerabilities.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Using RubyGems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install brakeman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Bundler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development do&#xA;  gem &#39;brakeman&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull presidentbeef/brakeman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Docker to build from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/presidentbeef/brakeman.git&#xA;cd brakeman&#xA;docker build . -t brakeman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h4&gt;Running locally&lt;/h4&gt; &#xA;&lt;p&gt;From a Rails application&#39;s root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outside of Rails root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman /path/to/rails/application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running with Docker&lt;/h4&gt; &#xA;&lt;p&gt;From a Rails application&#39;s root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v &#34;$(pwd)&#34;:/code presidentbeef/brakeman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a little nicer color:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v &#34;$(pwd)&#34;:/code presidentbeef/brakeman --color&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an HTML report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v &#34;$(pwd)&#34;:/code presidentbeef/brakeman -o brakeman_results.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outside of Rails root (note that the output file is relative to path/to/rails/application):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v &#39;path/to/rails/application&#39;:/code presidentbeef/brakeman -o brakeman_results.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;Brakeman should work with any version of Rails from 2.3.x to 6.x.&lt;/p&gt; &#xA;&lt;p&gt;Brakeman can analyze code written with Ruby 1.8 syntax and newer, but requires at least Ruby 2.4.0 to run.&lt;/p&gt; &#xA;&lt;h1&gt;Basic Options&lt;/h1&gt; &#xA;&lt;p&gt;For a full list of options, use &lt;code&gt;brakeman --help&lt;/code&gt; or see the &lt;a href=&#34;https://raw.githubusercontent.com/presidentbeef/brakeman/main/OPTIONS.md&#34;&gt;OPTIONS.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;To specify an output file for the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman -o output_file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output format is determined by the file extension or by using the &lt;code&gt;-f&lt;/code&gt; option. Current options are: &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;tabs&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;junit&lt;/code&gt;, &lt;code&gt;markdown&lt;/code&gt;, &lt;code&gt;csv&lt;/code&gt;, &lt;code&gt;codeclimate&lt;/code&gt;, and &lt;code&gt;sonar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Multiple output files can be specified:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman -o output.html -o output.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To output to both a file and to the console, with color:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman --color -o /dev/stdout -o output.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To suppress informational warnings and just output the report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman -q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note all Brakeman output except reports are sent to stderr, making it simple to redirect stdout to a file and just get the report.&lt;/p&gt; &#xA;&lt;p&gt;To see all kinds of debugging information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specific checks can be skipped, if desired. The name needs to be the correct case. For example, to skip looking for default routes (&lt;code&gt;DefaultRoutes&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman -x DefaultRoutes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple checks should be separated by a comma:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman -x DefaultRoutes,Redirect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To do the opposite and only run a certain set of tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman -t SQL,ValidationRegex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Brakeman is running a bit slow, try&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman --faster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will disable some features, but will probably be much faster (currently it is the same as &lt;code&gt;--skip-libs --no-branching&lt;/code&gt;). &lt;em&gt;WARNING&lt;/em&gt;: This may cause Brakeman to miss some vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;By default, Brakeman will return a non-zero exit code if any security warnings are found or scanning errors are encountered. To disable this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman --no-exit-on-warn --no-exit-on-error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To skip certain files or directories that Brakeman may have trouble parsing, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman --skip-files file1,/path1/,path2/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compare results of a scan with a previous scan, use the JSON output option and then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman --compare old_report.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will output JSON with two lists: one of fixed warnings and one of new warnings.&lt;/p&gt; &#xA;&lt;p&gt;Brakeman will ignore warnings if configured to do so. By default, it looks for a configuration file in &lt;code&gt;config/brakeman.ignore&lt;/code&gt;. To create and manage this file, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman -I&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Warning information&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/presidentbeef/brakeman/main/docs/warning_types&#34;&gt;warning_types&lt;/a&gt; for more information on the warnings reported by this tool.&lt;/p&gt; &#xA;&lt;h1&gt;Warning context&lt;/h1&gt; &#xA;&lt;p&gt;The HTML output format provides an excerpt from the original application source where a warning was triggered. Due to the processing done while looking for vulnerabilities, the source may not resemble the reported warning and reported line numbers may be slightly off. However, the context still provides a quick look into the code which raised the warning.&lt;/p&gt; &#xA;&lt;h1&gt;Confidence levels&lt;/h1&gt; &#xA;&lt;p&gt;Brakeman assigns a confidence level to each warning. This provides a rough estimate of how certain the tool is that a given warning is actually a problem. Naturally, these ratings should not be taken as absolute truth.&lt;/p&gt; &#xA;&lt;p&gt;There are three levels of confidence:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;High - Either this is a simple warning (boolean value) or user input is very likely being used in unsafe ways.&lt;/li&gt; &#xA; &lt;li&gt;Medium - This generally indicates an unsafe use of a variable, but the variable may or may not be user input.&lt;/li&gt; &#xA; &lt;li&gt;Weak - Typically means user input was indirectly used in a potentially unsafe manner.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To only get warnings above a given confidence level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brakeman -w3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-w&lt;/code&gt; switch takes a number from 1 to 3, with 1 being low (all warnings) and 3 being high (only highest confidence warnings).&lt;/p&gt; &#xA;&lt;h1&gt;Configuration files&lt;/h1&gt; &#xA;&lt;p&gt;Brakeman options can be stored and read from YAML files.&lt;/p&gt; &#xA;&lt;p&gt;To simplify the process of writing a configuration file, the &lt;code&gt;-C&lt;/code&gt; option will output the currently set options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brakeman -C --skip-files plugins/&#xA;---&#xA;:skip_files:&#xA;- plugins/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options passed in on the commandline have priority over configuration files.&lt;/p&gt; &#xA;&lt;p&gt;The default config locations are &lt;code&gt;./config/brakeman.yml&lt;/code&gt;, &lt;code&gt;~/.brakeman/config.yml&lt;/code&gt;, and &lt;code&gt;/etc/brakeman/config.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-c&lt;/code&gt; option can be used to specify a configuration file to use.&lt;/p&gt; &#xA;&lt;h1&gt;Continuous Integration&lt;/h1&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;http://brakemanscanner.org/docs/jenkins/&#34;&gt;plugin available&lt;/a&gt; for Jenkins/Hudson.&lt;/p&gt; &#xA;&lt;p&gt;For even more continuous testing, try the &lt;a href=&#34;https://github.com/guard/guard-brakeman&#34;&gt;Guard plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are a couple &lt;a href=&#34;https://github.com/marketplace?type=actions&amp;amp;query=brakeman&#34;&gt;Github Actions&lt;/a&gt; available.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git://github.com/presidentbeef/brakeman.git&#xA;cd brakeman&#xA;gem build brakeman.gemspec&#xA;gem install brakeman*.gem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Who is Using Brakeman?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeclimate.com/&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.groupon.com/&#34;&gt;Groupon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://newrelic.com&#34;&gt;New Relic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://brakemanscanner.org/brakeman_users&#34;&gt;..and more!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Homepage/News&lt;/h1&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;http://brakemanscanner.org/&#34;&gt;http://brakemanscanner.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/brakeman&#34;&gt;https://twitter.com/brakeman&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chat: &lt;a href=&#34;https://gitter.im/presidentbeef/brakeman&#34;&gt;https://gitter.im/presidentbeef/brakeman&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Brakeman is free for non-commercial use.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/presidentbeef/brakeman/main/COPYING.md&#34;&gt;COPYING&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>