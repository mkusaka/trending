<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-05T01:46:36Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>acquia/nessus-client</title>
    <updated>2023-06-05T01:46:36Z</updated>
    <id>tag:github.com,2023-06-05:/acquia/nessus-client</id>
    <link href="https://github.com/acquia/nessus-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby library and simple cli tool for interacting with the Nessus 6 REST API https://cloud.tenable.com/api#/ -- [Created 2016-03-18 by pwolanin aka peter.wolanin@acquia.com via github.acquia.com]&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nessus client&lt;/h1&gt; &#xA;&lt;p&gt;A ruby library and cli executable for commands on the Nessus 6 REST API.&lt;/p&gt; &#xA;&lt;p&gt;This library is likely to be incomplete and cover only API calls essential to Acquia&#39;s operational needs.&lt;/p&gt; &#xA;&lt;h2&gt;Setup and verify&lt;/h2&gt; &#xA;&lt;p&gt;To use the cli executable, you should have the bundler gem and a current ruby version (e.g. 2.1.x or 2.2.x). Run the following to start:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;bundle exec bin/nessus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nessus API Keys&lt;/h2&gt; &#xA;&lt;p&gt;The API key to call nessus is stored in a YAML file named &lt;em&gt;.nessus.yml&lt;/em&gt;. This will be loaded by default from from you home directory, but you can have the commands look in another location by using the &lt;code&gt;--home&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The format of the file is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;url: https://nessus.example.com&#xA;secretKey: abbdc5b62516&#xA;accessKey: 121abc435def&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already have a web login to your Nessus server you may generate the file by using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec bin/nessus get-api-key NESSUS_URL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This needs to be called from a server that can access the /session path on your Nessus server. It will prompt you for your password and create the .nessus.yml file your home directory (or the one specified by &lt;code&gt;--home&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT:&lt;/em&gt; Any previous API key you had will become invalid.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;The client uses Excon, so you can get debug output from the request and response by setting the environment variable &lt;code&gt;EXCON_DEBUG&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;EXCON_DEBUG=1 bundle exec bin/nessus scan list&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-sinatra-with-active-record-get-lab</title>
    <updated>2023-06-05T01:46:36Z</updated>
    <id>tag:github.com,2023-06-05:/learn-co-curriculum/phase-3-sinatra-with-active-record-get-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-sinatra-with-active-record-get-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sinatra with Active Record: GET Requests Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handle multiple &lt;code&gt;GET&lt;/code&gt; requests in a controller&lt;/li&gt; &#xA; &lt;li&gt;Use the params hash to look up data with Active Record&lt;/li&gt; &#xA; &lt;li&gt;Send a JSON response using data from an Active Record model&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;#to_json&lt;/code&gt; method to serialize JSON data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;In this application, we&#39;ll be working on a JSON API to get a list of bakeries and their baked goods. We have two models, bakeries and baked goods, in a one-to-many relationship. The migrations are already set up. Here&#39;s what the ERD for these tables looks like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-3/sinatra-with-active-record-get-lab/bakeries-baked_goods-erd.png&#34; alt=&#34;Bakeries ERD&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To set up the application, run these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle install&#xA;$ bundle exec rake db:migrate db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run the app and explore your API in the browser by using the custom Rake task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle exec rake server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;This is a test-driven lab, so run the tests to get started! You&#39;ll be responsible for building out the associations between the models, and then working on adding routes to the &lt;code&gt;ApplicationController&lt;/code&gt; for the different endpoints described in the test spec.&lt;/p&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;p&gt;Update the &lt;code&gt;Bakery&lt;/code&gt; and &lt;code&gt;BakedGood&lt;/code&gt; models to set up the correct associations based on the structure of the tables. Use the &lt;code&gt;belongs_to&lt;/code&gt; and &lt;code&gt;has_many&lt;/code&gt; Active Record macros.&lt;/p&gt; &#xA;&lt;h3&gt;Lab Workflow&lt;/h3&gt; &#xA;&lt;p&gt;After setting up your models, it&#39;s time to work on your routes! Since this is your first lab in Sinatra, here&#39;s a recommendation on how to approach writing routes based on the deliverables below.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s work on the first deliverable, defining a route that responds to a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/bakeries&lt;/code&gt; and returns an array of JSON objects for all bakeries in the database.&lt;/p&gt; &#xA;&lt;p&gt;Start by running the server with &lt;code&gt;bundle exec rake server&lt;/code&gt;. Then, in your browser, visit that endpoint with the server running: &lt;a href=&#34;http://localhost:9292/bakeries&#34;&gt;http://localhost:9292/bakeries&lt;/a&gt;. You should see a helpful error message from Sinatra, like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-3/sinatra-with-active-record-get-lab/sinatra-error-message.png&#34; alt=&#34;Sinatra error message&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Start by adding that route to your &lt;code&gt;ApplicationController&lt;/code&gt;, like Sinatra suggests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class ApplicationController&#xA;  get &#39;/bakeries&#39; do&#xA;    &#34;Hello World&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, refresh the browser. No more error message! Next, write out a bit of pseudocode. What do we need to do to solve this deliverable?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class ApplicationController&#xA;  get &#39;/bakeries&#39; do&#xA;    # get all the bakeries from the database&#xA;    # send them back as a JSON array&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Great! Now, we just need to translate that pseudocode into Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class ApplicationController&#xA;  get &#39;/bakeries&#39; do&#xA;    # get all the bakeries from the database&#xA;    bakeries = Bakery.all&#xA;    # send them back as a JSON array&#xA;    bakeries.to_json&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Try refreshing the page now and make sure the response matches what you expect. Then, run &lt;code&gt;learn test&lt;/code&gt; and work through the remaining deliverables in a similar manner.&lt;/p&gt; &#xA;&lt;h3&gt;Routes&lt;/h3&gt; &#xA;&lt;p&gt;Set up your &lt;code&gt;ApplicationController&lt;/code&gt; so that the &lt;a href=&#34;https://msp-greg.github.io/sinatra/file.README.html#available-settings&#34;&gt;default content type&lt;/a&gt; for responses use the &lt;code&gt;Content-Type: application/json&lt;/code&gt; header. Then, define routes that do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /bakeries&lt;/code&gt;: returns an array of JSON objects for all bakeries in the database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /bakeries/:id&lt;/code&gt;: returns a single bakery as JSON with its baked goods nested in an array. Use the &lt;code&gt;id&lt;/code&gt; from the URL to look up the correct bakery. (&lt;strong&gt;HINT&lt;/strong&gt;: you&#39;ll need to pass in some custom options to the &lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveModel/Serializers/JSON.html#method-i-as_json&#34;&gt;&lt;code&gt;#to_json&lt;/code&gt;&lt;/a&gt; method.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /baked_goods/by_price&lt;/code&gt;: returns an array of baked goods as JSON, sorted by price in descending order. (&lt;strong&gt;HINT&lt;/strong&gt;: how can you use Active Record to sort the baked goods in a particular order?)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /baked_goods/most_expensive&lt;/code&gt;: returns the single most expensive baked good as JSON. (&lt;strong&gt;HINT&lt;/strong&gt;: how can you use Active Record to sort the baked goods in a particular order?)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubydoc.info/gems/sinatra#routes&#34;&gt;Sinatra Routes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/active_record_querying.html&#34;&gt;Active Record Query Interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveModel/Serializers/JSON.html#method-i-as_json&#34;&gt;Active Model &lt;code&gt;#as_json&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>