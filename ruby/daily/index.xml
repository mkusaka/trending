<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-12T01:34:57Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gel-rb/gel</title>
    <updated>2022-07-12T01:34:57Z</updated>
    <id>tag:github.com,2022-07-12:/gel-rb/gel</id>
    <link href="https://github.com/gel-rb/gel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern gem manager: Gel is a lightweight alternative to Bundler&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://gel.dev&#34;&gt;&lt;img src=&#34;https://gel.dev/images/gel.svg?sanitize=true&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Gel&lt;/h1&gt; &#xA;&lt;p&gt;A modern gem manager.&lt;/p&gt; &#xA;&lt;p&gt;Gel is a lightweight alternative to Bundler.&lt;/p&gt; &#xA;&lt;p&gt;Through a combination of algorithm choices and skipping compatibility with some legacy features that date back to the earliest days of RubyGems, Gel is able to outperform both Bundler and RubyGems in many common use cases.&lt;/p&gt; &#xA;&lt;p&gt;In making this trade, Gel chooses not to support some less frequently used, but independently valuable, Bundler features:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Gel&lt;/th&gt; &#xA;   &lt;th&gt;Bundler &amp;amp; Rubygems&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;install&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;update&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lock&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;exec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gem authoring&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚ùå&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vendoring&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;üÜó&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;anything else&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚ùå&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In most cases, Gel will be a drop-in replacement, and you can still use RubyGems directly if you need to &lt;code&gt;gem push&lt;/code&gt;, for example.&lt;/p&gt; &#xA;&lt;h2&gt;Can I Use Gel Today?&lt;/h2&gt; &#xA;&lt;p&gt;I (&lt;a href=&#34;https://github.com/matthewd&#34;&gt;@matthewd&lt;/a&gt;) have been using Gel exclusively on my local development machines since January 2019. While I have occasionally encountered issues when installing some new gem, they have been rare and minor, requiring only a small additional API or similar -- and as those outliers have been addressed, they become increasingly infrequent.&lt;/p&gt; &#xA;&lt;p&gt;In particular (and as is consistent with the type of work it does), Gel will either work or it will fail -- perhaps on encountering an unusual construct in your Gemfile, or perhaps while attempting to install a gem that does something weird. The &#34;latest&#34; it is likely to fail is if, at runtime, your code (or a gem you&#39;ve loaded) assumes the presence of a specific RubyGems/Bundler API that Gel does not emulate. It&#39;s extremely rare to encounter more subtle issues that don&#39;t manifest as immediate failure.&lt;/p&gt; &#xA;&lt;p&gt;You can use Gel in your local environment with no effect upon your production setup, or even your coworkers&#39; -- Gel uses the same Gemfile and Gemfile.lock files as Bundler. It also maintains completely independent copies of installed gems, so it&#39;s totally safe to co-exist with Bundler on your machine. (Which one is active is determined by the environment variables within your shell terminal.)&lt;/p&gt; &#xA;&lt;h2&gt;Why Should I Use Gel?&lt;/h2&gt; &#xA;&lt;p&gt;Gel was written with the goal of improving the performance of common Bundler tasks.&lt;/p&gt; &#xA;&lt;p&gt;By focusing on those common requirements, and leaving more obscure needs to be filled by Bundler, Gel is able to outperform Bundler in the operations you use most.&lt;/p&gt; &#xA;&lt;p&gt;Gel also uses a new version solving algorithm called &lt;a href=&#34;https://medium.com/@nex3/pubgrub-2fb6470504f&#34;&gt;Pub Grub&lt;/a&gt; to resolve dependencies between gems, via the &lt;code&gt;pub_grub&lt;/code&gt; gem (&lt;a href=&#34;https://github.com/jhawthorn/pub_grub&#34;&gt;https://github.com/jhawthorn/pub_grub&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Some real world examples of the types of performance improvements Gel provides over Bundler are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;% gel exec rake -version&lt;/code&gt;: 55% faster than &lt;code&gt;bundle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;% gel exec rails --version&lt;/code&gt;: 60% faster than &lt;code&gt;bundle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;% gel exec rails runner nil&lt;/code&gt;: 45% faster than &lt;code&gt;bundle&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Comparing using a complex, mature Rails application:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;% gel install&lt;/code&gt;: 55% faster than &lt;code&gt;bundle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;% gel lock&lt;/code&gt;: 78% faster than &lt;code&gt;bundle&lt;/code&gt; on first run&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;% gel lock&lt;/code&gt;: 95% faster than &lt;code&gt;bundle&lt;/code&gt; on later runs (cache exists)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Comparing using a simple Gemfile with a complex gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source &#34;https://rubygems.org&#34;&#xA;&#xA;gem &#34;tty&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;% gel install&lt;/code&gt;: 70% faster than &lt;code&gt;bundle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;% gel lock&lt;/code&gt;: 34% faster than &lt;code&gt;bundle&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Comparing using an example Gemfile with gems that showcase a difficult version resolving:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source &#34;https://rubygems.org&#34;&#xA;&#xA;gem &#34;activerecord&#34;&#xA;gem &#34;quiet_assets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;% gel lock&lt;/code&gt;: 96% faster than &lt;code&gt;bundle&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This example showcases the speed improvements provided by the new PubGrub Version Solving algorithm.&lt;/p&gt; &#xA;&lt;p&gt;Note that all of the performance numbers were gathered using just a regular laptop used for common day-to-day development. These numbers were not measured in perfect isolation and your experience may vary.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re on a Mac, we recommend that you install via Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install gel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, you can install Gel as a gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install gel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, either activate Gel in your current shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ eval &#34;$(gel shell-setup)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or add it to your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; to enable it everywhere:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ echo &#39;eval &#34;$(gel shell-setup)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;gel install&lt;/code&gt;, &lt;code&gt;gel lock&lt;/code&gt;, &lt;code&gt;gel update&lt;/code&gt;, and &lt;code&gt;gel exec&lt;/code&gt; as you would the equivalent &lt;code&gt;bundle&lt;/code&gt; subcommands.&lt;/p&gt; &#xA;&lt;p&gt;While it will work, in general you should not actually need to use &lt;code&gt;gel exec&lt;/code&gt; directly -- installed gems&#39; executables will automatically respect the locally locked versions where appropriate.&lt;/p&gt; &#xA;&lt;p&gt;Where you would previously have run &lt;code&gt;bundle exec rubocop&lt;/code&gt; or &lt;code&gt;bundle exec rake&lt;/code&gt; inside an application directory, you can run &lt;code&gt;rubocop&lt;/code&gt; or &lt;code&gt;rake&lt;/code&gt; and expect the same results, even if you have other versions of those gems installed.&lt;/p&gt; &#xA;&lt;h2&gt;ENVIRONMENT VARIABLES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GEL_GEMFILE&lt;/code&gt; The path to the gemfile gel should use&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GEL_LOCKFILE&lt;/code&gt; The path to the lockfile that gel should use&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GEL_CACHE&lt;/code&gt; The path to the gel version information cache&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GEL_AUTH&lt;/code&gt; Gem server credentials as a space-separated list of URIs, e.g.: &#34;&lt;a href=&#34;http://user:pass@ruby.example.com/&#34;&gt;http://user:pass@ruby.example.com/&lt;/a&gt; &lt;a href=&#34;http://user2:pass2@gems.example.org/&#34;&gt;http://user2:pass2@gems.example.org/&lt;/a&gt;&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;bin/rake test&lt;/code&gt; to run the tests.&lt;/p&gt; &#xA;&lt;p&gt;To use your development instance as your primary Gel, add its &lt;code&gt;exe/&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt; before running &lt;code&gt;shell-setup&lt;/code&gt;, ensuring it comes before any RubyGems &lt;code&gt;bin&lt;/code&gt; directory that might override it.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PATH=&#34;$HOME/projects/gel/exe:$PATH&#34;&#xA;eval &#34;$(gel shell-setup)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/gel-rb/gel&#34;&gt;https://github.com/gel-rb/gel&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;http://contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the Gel project‚Äôs codebases, issue trackers, chat rooms and mailing lists is expected to follow the &lt;a href=&#34;https://github.com/gel-rb/gel/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>QueueClassic/queue_classic</title>
    <updated>2022-07-12T01:34:57Z</updated>
    <id>tag:github.com,2022-07-12:/QueueClassic/queue_classic</id>
    <link href="https://github.com/QueueClassic/queue_classic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, efficient worker queue for Ruby &amp; PostgreSQL.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;queue_classic&lt;/h1&gt; &#xA;&lt;p&gt;A simple, efficient worker queue for Ruby &amp;amp; PostgreSQL.&lt;/p&gt; &#xA;&lt;p&gt;Why this over something like Resque. Two reasons:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your jobs can be equeued in the same transaction as other modifications to the database, and will only be processed when everything is commited. This is a hard pattern to develop around for queues done outside your database&lt;/li&gt; &#xA; &lt;li&gt;Less things to run, if you don&#39;t already have Redis or a dedicated queue in your stack.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/QueueClassic/queue_classic/actions/workflows/main.yaml/badge.svg?branch=master&#34; alt=&#34;master&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/queue_classic&#34;&gt;&lt;img src=&#34;http://img.shields.io/gem/v/queue_classic.svg?style=flat&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT NOTE: This README is representing the current work for queue_classic, which is generally the pending next version.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can always find the latest and previous releases here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/QueueClassic/queue_classic/releases&#34;&gt;https://github.com/QueueClassic/queue_classic/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other related projects&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in this project, you might also want to checkout:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/que-rb/que&#34;&gt;Que&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bensheldon/good_job&#34;&gt;GoodJob&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/collectiveidea/delayed_job&#34;&gt;Delayed Job&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a list of other queues (which may or may not be Postgres backed), checkout - &lt;a href=&#34;https://edgeapi.rubyonrails.org/classes/ActiveJob/QueueAdapters.html&#34;&gt;https://edgeapi.rubyonrails.org/classes/ActiveJob/QueueAdapters.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is queue_classic?&lt;/h2&gt; &#xA;&lt;p&gt;queue_classic provides a simple interface to a PostgreSQL-backed message queue. queue_classic specializes in concurrent locking and minimizing database load while providing a simple, intuitive developer experience. queue_classic assumes that you are already using PostgreSQL in your production environment and that adding another dependency (e.g. redis, beanstalkd, 0mq) is undesirable.&lt;/p&gt; &#xA;&lt;p&gt;A major benefit is the ability to enqueue inside transactions, ensuring things are done only when your changes are commited.&lt;/p&gt; &#xA;&lt;h2&gt;Other related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rainforestapp/queue_classic_plus&#34;&gt;Queue Classic Plus&lt;/a&gt; - adds support for retrying with specific exceptions, transaction processing of jobs, metric collection, etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/QueueClassic/queue_classic_admin&#34;&gt;Queue Classic Admin&lt;/a&gt; - Admin interface for queue_classic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rainforestapp/queue_classic_matchers&#34;&gt;Queue Classic Matchers&lt;/a&gt; - RSpec matchers for queue_classic&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Leverage of PostgreSQL&#39;s listen/notify, skip locked, and row locking.&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple queues with heterogeneous workers.&lt;/li&gt; &#xA; &lt;li&gt;JSON data format.&lt;/li&gt; &#xA; &lt;li&gt;Workers can work multiple queues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;For this version, the requirements are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 2.6, 2.7, 3.0, 3.1 - i.e. currently supported Ruby versions&lt;/li&gt; &#xA; &lt;li&gt;Postgres ~&amp;gt; 9.6&lt;/li&gt; &#xA; &lt;li&gt;Rubygem: pg ~&amp;gt; 1.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rubydoc.info/gems/queue_classic/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QueueClassic/queue_classic/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QueueClassic/queue_classic/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QueueClassic/queue_classic/master/#upgrade-from-earlier-versions&#34;&gt;Upgrade from earlier versions to V3.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QueueClassic/queue_classic/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QueueClassic/queue_classic/master/#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QueueClassic/queue_classic/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QueueClassic/queue_classic/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QueueClassic/queue_classic/master/#hacking-on-queue_classic&#34;&gt;Hacking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QueueClassic/queue_classic/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There are 2 ways to use queue_classic:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Producing Jobs&lt;/li&gt; &#xA; &lt;li&gt;Working Jobs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Producing Jobs&lt;/h3&gt; &#xA;&lt;h4&gt;Simple Enqueue&lt;/h4&gt; &#xA;&lt;p&gt;The first argument is a string which represents a ruby object and a method name. The second argument(s) will be passed along as arguments to the method defined by the first argument. The set of arguments will be encoded as JSON and stored in the database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# This method has no arguments.&#xA;QC.enqueue(&#34;Time.now&#34;)&#xA;&#xA;# This method has 1 argument.&#xA;QC.enqueue(&#34;Kernel.puts&#34;, &#34;hello world&#34;)&#xA;&#xA;# This method has 2 arguments.&#xA;QC.enqueue(&#34;Kernel.printf&#34;, &#34;hello %s&#34;, &#34;world&#34;)&#xA;&#xA;# This method has a hash argument.&#xA;QC.enqueue(&#34;Kernel.puts&#34;, {&#34;hello&#34; =&amp;gt; &#34;world&#34;})&#xA;&#xA;# This method has an array argument.&#xA;QC.enqueue(&#34;Kernel.puts&#34;, [&#34;hello&#34;, &#34;world&#34;])&#xA;&#xA;# This method uses a non-default queue.&#xA;p_queue = QC::Queue.new(&#34;priority_queue&#34;)&#xA;p_queue.enqueue(&#34;Kernel.puts&#34;, [&#34;hello&#34;, &#34;world&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scheduling for later&lt;/h4&gt; &#xA;&lt;p&gt;There is also the ability to schedule a job to run at a specified time in the future. The job will become processable after the specified time, and will be processed as-soon-as-possible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Specify the job execution time exactly&#xA;QC.enqueue_at(Time.new(2024,01,02,10,00), &#34;Kernel.puts&#34;, &#34;hello future&#34;)&#xA;&#xA;# Specify the job execution time as an offset in seconds&#xA;QC.enqueue_in(60, &#34;Kernel.puts&#34;, &#34;hello from 1 minute later&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working Jobs&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to work/process jobs. The first approach is to use the Rake task. The second approach is to use a custom executable.&lt;/p&gt; &#xA;&lt;h4&gt;Rake Task&lt;/h4&gt; &#xA;&lt;p&gt;Require queue_classic in your Rakefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;queue_classic&#39;&#xA;require &#39;queue_classic/tasks&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Work all queues&lt;/h5&gt; &#xA;&lt;p&gt;Start the worker via the Rakefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rake qc:work&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Work a single specific queue&lt;/h5&gt; &#xA;&lt;p&gt;Setup a worker to work only a specific, non-default queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;QUEUE=&#34;priority_queue&#34; bundle exec rake qc:work&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Work multiple queues&lt;/h5&gt; &#xA;&lt;p&gt;In this scenario, on each iteration of the worker&#39;s loop, it will look for jobs in the first queue prior to looking at the second queue. This means that the first queue must be empty before the worker will look at the second queue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;QUEUES=&#34;priority_queue,secondary_queue&#34; bundle exec rake qc:work&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Worker&lt;/h4&gt; &#xA;&lt;p&gt;This example is probably not production ready; however, it serves as an example of how to leverage the code in the Worker class to fit your non-default requirements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;timeout&#39;&#xA;require &#39;queue_classic&#39;&#xA;&#xA;FailedQueue = QC::Queue.new(&#34;failed_jobs&#34;)&#xA;&#xA;class MyWorker &amp;lt; QC::Worker&#xA;  # A job is a Hash containing these attributes:&#xA;  # :id Integer, the job id&#xA;  # :method String, containing the object and method&#xA;  # :args String, the arguments&#xA;  # :q_name String, the queue name&#xA;  # :scheduled_at Time, the scheduled time if the job was scheduled&#xA;&#xA;  # Execute the job using the methods and arguments&#xA;  def call(job)&#xA;     # Do something with the job&#xA;     ...&#xA;  end&#xA;&#xA;  # This method will be called when an exception&#xA;  # is raised during the execution of the job.&#xA;  # First argument is the job that failed.&#xA;  # Second argument is the exception.&#xA;  def handle_failure(job, e)&#xA;    FailedQueue.enqueue(job[:method], *job[:args])&#xA;  end&#xA;end&#xA;&#xA;worker = MyWorker.new&#xA;&#xA;trap(&#39;INT&#39;) { exit }&#xA;trap(&#39;TERM&#39;) { worker.stop }&#xA;&#xA;loop do&#xA;  queue, job = worker.lock_job&#xA;  Timeout::timeout(5) { worker.process(queue, job) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;qc:work&lt;/code&gt; rake task uses &lt;code&gt;QC::Worker&lt;/code&gt; by default. However, it&#39;s easy to inject your own worker class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;QC.default_worker_class = MyWorker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;In addition to installing the rubygem, you will need to prepare your database. Database preparation includes creating a table and loading PL/pgSQL functions. You can issue the database preparation commands using &lt;code&gt;psql&lt;/code&gt; or use a database migration script.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash{:copy}&#34;&gt;gem install queue_classic&#xA;createdb queue_classic_test&#xA;export QC_DATABASE_URL=&#34;postgres://username:password@localhost/queue_classic_test&#34;&#xA;ruby -r queue_classic -e &#34;QC::Setup.create&#34;&#xA;ruby -r queue_classic -e &#34;QC.enqueue(&#39;Kernel.puts&#39;, &#39;hello world&#39;)&#34;&#xA;ruby -r queue_classic -e &#34;QC::Worker.new.work&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ruby on Rails Setup&lt;/h3&gt; &#xA;&lt;p&gt;Declare dependencies in Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby{:copy}&#34;&gt;source &#39;https://rubygems.org&#39; do&#xA;  gem &#39;queue_classic&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install queue_classic, which adds the needed migrations for the database tables and stored procedures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails generate queue_classic:install&#xA;bundle exec rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Database connection&lt;/h4&gt; &#xA;&lt;p&gt;Starting with with queue_classic 3.1, Rails is automatically detected and its connection is used. If you don&#39;t want to use the automatic database connection, set this environment variable to false: &lt;code&gt;export QC_RAILS_DATABASE=false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you do not share the connection, you cannot enqueue in the same transaction as whatever you&#39;re doing in Rails.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note on using ActiveRecord migrations:&lt;/strong&gt; If you use the migration, and you wish to use commands that reset the database from the stored schema (e.g. &lt;code&gt;rake db:reset&lt;/code&gt;), your application must be configured with &lt;code&gt;config.active_record.schema_format = :sql&lt;/code&gt; in &lt;code&gt;config/application.rb&lt;/code&gt;. If you don&#39;t do this, the PL/pgSQL function that queue_classic creates will be lost when you reset the database.&lt;/p&gt; &#xA;&lt;h4&gt;Active Job&lt;/h4&gt; &#xA;&lt;p&gt;If you use Rails 4.2+ and want to use Active Job, all you need to do is to set &lt;code&gt;config.active_job.queue_adapter = :queue_classic&lt;/code&gt; in your &lt;code&gt;application.rb&lt;/code&gt;. Everything else will be taken care for you. You can now use the Active Job functionality from now.&lt;/p&gt; &#xA;&lt;h3&gt;Plain Ruby Setup&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re not using Rails, you can use the Rake task to prepare your database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash{:copy}&#34;&gt;# Creating the table and functions&#xA;bundle exec rake qc:create&#xA;&#xA;# Dropping the table and functions&#xA;bundle exec rake qc:drop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Database connection&lt;/h4&gt; &#xA;&lt;p&gt;By default, queue_classic will use the &lt;code&gt;QC_DATABASE_URL&lt;/code&gt; falling back on &lt;code&gt;DATABASE_URL&lt;/code&gt;. The URL must be in the following format: &lt;code&gt;postgres://username:password@localhost/database_name&lt;/code&gt;. If you use Heroku&#39;s PostgreSQL service, this will already be set. If you don&#39;t want to set this variable, you can set the connection in an initializer. &lt;strong&gt;QueueClassic will maintain its own connection to the database.&lt;/strong&gt; This may double the number of connections to your database.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading from earlier versions&lt;/h2&gt; &#xA;&lt;p&gt;If you are upgrading from a previous version of queue_classic, you might need some new database columns and/or functions. Luckily enough for you, it is easy to do so.&lt;/p&gt; &#xA;&lt;h3&gt;Ruby on Rails&lt;/h3&gt; &#xA;&lt;p&gt;These two commands will add the newer migrations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash{:copy}&#34;&gt;rails generate queue_classic:install&#xA;bundle exec rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rake Task&lt;/h3&gt; &#xA;&lt;p&gt;This rake task will update you to the latest version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash{:copy}&#34;&gt;# Updating the table and functions&#xA;bundle exec rake qc:update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;All configuration takes place in the form of environment vars. See &lt;a href=&#34;https://github.com/QueueClassic/queue_classic/raw/master/lib/queue_classic.rb#L23-62&#34;&gt;queue_classic.rb&lt;/a&gt; for a list of options.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;By default queue_classic does not talk very much. If you find yourself in a situation where you need to know what&#39;s happening inside QC, there are two different kind of logging you can enable: &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;MEASURE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Measure&lt;/h3&gt; &#xA;&lt;p&gt;This will output the time to process and some more statistics. To enable it, set the &lt;code&gt;QC_MEASURE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash{:copy}&#34;&gt;export QC_MEASURE=&#34;true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debug&lt;/h3&gt; &#xA;&lt;p&gt;You can enable the debug output by setting the &lt;code&gt;DEBUG&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash{:copy}&#34;&gt;export DEBUG=&#34;true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you think you have found a bug, feel free to open an issue. Use the following template for the new issue:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;List your versions: Ruby, PostgreSQL, queue_classic.&lt;/li&gt; &#xA; &lt;li&gt;Define what you would have expected to happen.&lt;/li&gt; &#xA; &lt;li&gt;List what actually happened.&lt;/li&gt; &#xA; &lt;li&gt;Provide sample codes &amp;amp; commands which will reproduce the problem.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Hacking on queue_classic&lt;/h2&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash{:copy}&#34;&gt;bundle&#xA;createdb queue_classic_test&#xA;export QC_DATABASE_URL=&#34;postgres://username:pass@localhost/queue_classic_test&#34;&#xA;bundle exec rake                      # run all tests&#xA;bundle exec ruby test/queue_test.rb   # run a single test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2010 Ryan Smith&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sorbet/sorbet-typed</title>
    <updated>2022-07-12T01:34:57Z</updated>
    <id>tag:github.com,2022-07-12:/sorbet/sorbet-typed</id>
    <link href="https://github.com/sorbet/sorbet-typed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A central repository for sharing type definitions for Ruby gems&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/sorbet/sorbet-typed/workflows/Ruby/badge.svg?sanitize=true&#34; alt=&#34;Ruby&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;sorbet-typed&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A central repository for sharing type definitions for Ruby gems&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://definitelytyped.org/&#34;&gt;definitelytyped.org&lt;/a&gt;. Used in conjunction with &lt;a href=&#34;https://sorbet.org&#34;&gt;Sorbet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use the Sorbet gem. &lt;code&gt;srb init&lt;/code&gt; will fetch the applicable files from this repository into your project. &lt;code&gt;srb rbi sorbet-typed&lt;/code&gt; will update only the definitions in sorbet-typed.&lt;/p&gt; &#xA;&lt;h2&gt;Adding .rbi files&lt;/h2&gt; &#xA;&lt;p&gt;To add &lt;code&gt;.rbi&lt;/code&gt; files for a particular gem:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add a subdirectory to &lt;code&gt;lib&lt;/code&gt; with the same name as the gem.&lt;/li&gt; &#xA; &lt;li&gt;Add a subdirectory to the gem subdirectory with a name matching the version you are adding signatures to. (See &lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet-typed/master/#version-constraints&#34;&gt;Version Constraints&lt;/a&gt; below for a more thorough explanation)&lt;/li&gt; &#xA; &lt;li&gt;Create the &lt;code&gt;&amp;lt;GEM_NAME&amp;gt;.rbi&lt;/code&gt; file in the version directory you&#39;ve chosen.&lt;/li&gt; &#xA; &lt;li&gt;Optional, but encouraged: Add a test file in &lt;code&gt;lib/gem_name/version/gem_name_test.rb&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/sorbet/sorbet-typed/master/#tests&#34;&gt;Tests section&lt;/a&gt; for details.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Version Constraints&lt;/h3&gt; &#xA;&lt;p&gt;The naming of this directory follows the format of &lt;code&gt;Gem::Requirement&lt;/code&gt;, separated by &lt;code&gt;,&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt;. &lt;em&gt;All&lt;/em&gt; requirements in the name must be satisfied. You can also name it &lt;code&gt;all&lt;/code&gt; to affect all Gem versions.&lt;/p&gt; &#xA;&lt;p&gt;For example, suppose you wanted to add type signatures to the &lt;a href=&#34;https://github.com/ruby-json-schema/json-schema&#34;&gt;json-schema&lt;/a&gt; gem, version &lt;code&gt;2.5.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create the directory &lt;code&gt;lib/json-schema&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Choose an appropriate requirement version string for the gem you want to type.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For &lt;code&gt;2.5.2&lt;/code&gt;, any of the following directory names would work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;2.5.2/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~&amp;gt;2.5/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~&amp;gt;2/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;gt;1.4,&amp;lt;3/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~&amp;gt;2.5,!=2.5.3/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;rbis&lt;/code&gt; script will include &lt;em&gt;all&lt;/em&gt; matching directory&#39;s &lt;code&gt;.rbi&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;As an example, if the following directories existed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/json-schema/all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/json-schema/&amp;gt;1.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/json-schema/~&amp;gt;2.5&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/json-schema/&amp;gt;2.6&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For &lt;code&gt;json-schema@2.5.2&lt;/code&gt;, all of the &lt;code&gt;.rbi&lt;/code&gt; files that exist in the following directories would be loaded:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/json-schema/all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/json-schema/&amp;gt;1.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/json-schema/~&amp;gt;2.5&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Writing RBIs&lt;/h3&gt; &#xA;&lt;p&gt;When writing an RBI file for sorbet-typed, you can start with a file in a project of your own. For example, if you have a Rails application and want to improve the type signatures for ActiveRecord, you could go into &lt;code&gt;sorbet/sorbet-typed/activerecord/all/activerecord.rbi&lt;/code&gt; in your repo, and then start editing from there. This is useful because it allows you to test changes alongside real Ruby code using the gem.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve made any changes you wanted, you can copy the contents of the file into the corresponding &lt;code&gt;.rbi&lt;/code&gt; in sorbet-typed and open a pull request (keep in mind that the comments at the top of the file are unnecessary, except for the &lt;code&gt;typed: strong&lt;/code&gt; comment).&lt;/p&gt; &#xA;&lt;p&gt;Right now, there&#39;s no standard formatting for the &lt;code&gt;.rbi&lt;/code&gt; files in this repository, but you should try to at least keep it consistent within a given file.&lt;/p&gt; &#xA;&lt;p&gt;You can make sure your &lt;code&gt;.rbi&lt;/code&gt; passes typechecking by installing the latest version of Sorbet (&lt;code&gt;gem install sorbet&lt;/code&gt;) and running &lt;code&gt;ruby .ci/run.rb&lt;/code&gt; in this repository.&lt;/p&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s basic support in sorbet-typed for testing of type signatures. Right now, you can only have valid usage of your methods in tests. This can be used to ensure the type signatures aren&#39;t causing typecheck failures on valid code. The test file for a gem should be placed at &lt;code&gt;lib/gem_name/version/gem_name_test.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you wanted to test the signatures for the &lt;code&gt;validates&lt;/code&gt; method in all versions of the Rails gem &lt;code&gt;activemodel&lt;/code&gt;, you could create a file at &lt;code&gt;lib/activemodel/all/activemodel_test.rb&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# typed: true&#xA;&#xA;module ActiveModelTest&#xA;  extend ActiveModel::Validations::ClassMethods&#xA;&#xA;  validates :name, length: { minimum: 2 }&#xA;  validates :age, numericality: true, on: :update&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tests a few of the parameters available on the &lt;code&gt;validates&lt;/code&gt; method based on existing code from the ActiveModel documentation or active codebases using the gem. If you wanted to restrict your test to a type signature for a specific version of the gem, for example &lt;code&gt;activerecord ~&amp;gt; 5.2.0&lt;/code&gt;, you would add your tests to that directory (&lt;code&gt;lib/activerecord/~&amp;gt;5.2.0/activerecord_test.rb&lt;/code&gt; insead of the &lt;code&gt;all&lt;/code&gt; one.&lt;/p&gt; &#xA;&lt;p&gt;The tests can be run locally by installing Sorbet with &lt;code&gt;gem install sorbet&lt;/code&gt; and then running &lt;code&gt;rake&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;This repository was originally written by the fine folks at &lt;a href=&#34;https://www.coinbase.com&#34;&gt;Coinbase&lt;/a&gt;. Thanks so much for starting the ball rolling!&lt;/p&gt;</summary>
  </entry>
</feed>