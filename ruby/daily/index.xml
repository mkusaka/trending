<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-24T01:43:57Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jmoscat/thanxup-api</title>
    <updated>2023-07-24T01:43:57Z</updated>
    <id>tag:github.com,2023-07-24:/jmoscat/thanxup-api</id>
    <link href="https://github.com/jmoscat/thanxup-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;== Welcome to Rails&lt;/p&gt; &#xA;&lt;p&gt;Rails is a web-application framework that includes everything needed to create database-backed web applications according to the Model-View-Control pattern.&lt;/p&gt; &#xA;&lt;p&gt;This pattern splits the view (also called the presentation) into &#34;dumb&#34; templates that are primarily responsible for inserting pre-built data in between HTML tags. The model contains the &#34;smart&#34; domain objects (such as Account, Product, Person, Post) that holds all the business logic and knows how to persist themselves to a database. The controller handles the incoming requests (such as Save New Account, Update Product, Show Post) by manipulating the model and directing data to the view.&lt;/p&gt; &#xA;&lt;p&gt;In Rails, the model is handled by what&#39;s called an object-relational mapping layer entitled Active Record. This layer allows you to present the data from database rows as objects and embellish these data objects with business logic methods. You can read more about Active Record in link:files/vendor/rails/activerecord/README.html.&lt;/p&gt; &#xA;&lt;p&gt;The controller and view are handled by the Action Pack, which handles both layers by its two parts: Action View and Action Controller. These two layers are bundled in a single package due to their heavy interdependence. This is unlike the relationship between the Active Record and Action Pack that is much more separate. Each of these packages can be used independently outside of Rails. You can read more about Action Pack in link:files/vendor/rails/actionpack/README.html.&lt;/p&gt; &#xA;&lt;p&gt;== Getting Started&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;At the command prompt, create a new Rails application: &lt;tt&gt;rails new myapp&lt;/tt&gt; (where &lt;tt&gt;myapp&lt;/tt&gt; is the application name)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directory to &lt;tt&gt;myapp&lt;/tt&gt; and start the web server: &lt;tt&gt;cd myapp; rails server&lt;/tt&gt; (run with --help for options)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; and you&#39;ll see: &#34;Welcome aboard: You&#39;re riding Ruby on Rails!&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the guidelines to start developing your application. You can find the following resources handy:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Getting Started Guide: &lt;a href=&#34;http://guides.rubyonrails.org/getting_started.html&#34;&gt;http://guides.rubyonrails.org/getting_started.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby on Rails Tutorial Book: &lt;a href=&#34;http://www.railstutorial.org/&#34;&gt;http://www.railstutorial.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Debugging Rails&lt;/p&gt; &#xA;&lt;p&gt;Sometimes your application goes wrong. Fortunately there are a lot of tools that will help you debug it and get it back on the rails.&lt;/p&gt; &#xA;&lt;p&gt;First area to check is the application log files. Have &#34;tail -f&#34; commands running on the server.log and development.log. Rails will automatically display debugging and runtime information to these files. Debugging info will also be shown in the browser on requests from 127.0.0.1.&lt;/p&gt; &#xA;&lt;p&gt;You can also log your own messages directly into the log file from your code using the Ruby logger class from inside your controllers. Example:&lt;/p&gt; &#xA;&lt;p&gt;class WeblogController &amp;lt; ActionController::Base def destroy @weblog = Weblog.find(params[:id]) @weblog.destroy logger.info(&#34;#{Time.now} Destroyed Weblog ID ##{@weblog.id}!&#34;) end end&lt;/p&gt; &#xA;&lt;p&gt;The result will be a message in your log file along the lines of:&lt;/p&gt; &#xA;&lt;p&gt;Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!&lt;/p&gt; &#xA;&lt;p&gt;More information on how to use the logger is at &lt;a href=&#34;http://www.ruby-doc.org/core/&#34;&gt;http://www.ruby-doc.org/core/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, Ruby documentation can be found at &lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;http://www.ruby-lang.org/&lt;/a&gt;. There are several books available online as well:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Programming Ruby: &lt;a href=&#34;http://www.ruby-doc.org/docs/ProgrammingRuby/&#34;&gt;http://www.ruby-doc.org/docs/ProgrammingRuby/&lt;/a&gt; (Pickaxe)&lt;/li&gt; &#xA; &lt;li&gt;Learn to Program: &lt;a href=&#34;http://pine.fm/LearnToProgram/&#34;&gt;http://pine.fm/LearnToProgram/&lt;/a&gt; (a beginners guide)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These two books will bring you up to speed on the Ruby language and also on programming in general.&lt;/p&gt; &#xA;&lt;p&gt;== Debugger&lt;/p&gt; &#xA;&lt;p&gt;Debugger support is available through the debugger command when you start your Mongrel or WEBrick server with --debugger. This means that you can break out of execution at any point in the code, investigate and change the model, and then, resume execution! You need to install ruby-debug to run the server in debugging mode. With gems, use &lt;tt&gt;sudo gem install ruby-debug&lt;/tt&gt;. Example:&lt;/p&gt; &#xA;&lt;p&gt;class WeblogController &amp;lt; ActionController::Base def index @posts = Post.all debugger end end&lt;/p&gt; &#xA;&lt;p&gt;So the controller will accept the action, run the first line, then present you with a IRB prompt in the server window. Here you can do things like:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;@posts.inspect =&amp;gt; &#34;[#&amp;lt;Post:0x14a6be8 @attributes={&#34;title&#34;=&amp;gt;nil, &#34;body&#34;=&amp;gt;nil, &#34;id&#34;=&amp;gt;&#34;1&#34;}&amp;gt;, #&amp;lt;Post:0x14a6620 @attributes={&#34;title&#34;=&amp;gt;&#34;Rails&#34;, &#34;body&#34;=&amp;gt;&#34;Only ten..&#34;, &#34;id&#34;=&amp;gt;&#34;2&#34;}&amp;gt;]&#34; @posts.first.title = &#34;hello from a debugger&#34; =&amp;gt; &#34;hello from a debugger&#34;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;...and even better, you can examine how your runtime objects actually work:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;f = @posts.first =&amp;gt; #&amp;lt;Post:0x13630c4 @attributes={&#34;title&#34;=&amp;gt;nil, &#34;body&#34;=&amp;gt;nil, &#34;id&#34;=&amp;gt;&#34;1&#34;}&amp;gt; f. Display all 152 possibilities? (y or n)&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Finally, when you&#39;re ready to resume execution, you can enter &#34;cont&#34;.&lt;/p&gt; &#xA;&lt;p&gt;== Console&lt;/p&gt; &#xA;&lt;p&gt;The console is a Ruby shell, which allows you to interact with your application&#39;s domain model. Here you&#39;ll have all parts of the application configured, just like it is when the application is running. You can inspect domain models, change values, and save to the database. Starting the script without arguments will launch it in the development environment.&lt;/p&gt; &#xA;&lt;p&gt;To start the console, run &lt;tt&gt;rails console&lt;/tt&gt; from the application directory.&lt;/p&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Passing the &lt;tt&gt;-s, --sandbox&lt;/tt&gt; argument will rollback any modifications made to the database.&lt;/li&gt; &#xA; &lt;li&gt;Passing an environment name as an argument will load the corresponding environment. Example: &lt;tt&gt;rails console production&lt;/tt&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To reload your controllers and models after launching the console run &lt;tt&gt;reload!&lt;/tt&gt;&lt;/p&gt; &#xA;&lt;p&gt;More information about irb can be found at: link:&lt;a href=&#34;http://www.rubycentral.org/pickaxe/irb.html&#34;&gt;http://www.rubycentral.org/pickaxe/irb.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;== dbconsole&lt;/p&gt; &#xA;&lt;p&gt;You can go to the command line of your database directly through &lt;tt&gt;rails dbconsole&lt;/tt&gt;. You would be connected to the database with the credentials defined in database.yml. Starting the script without arguments will connect you to the development database. Passing an argument will connect you to a different database, like &lt;tt&gt;rails dbconsole production&lt;/tt&gt;. Currently works for MySQL, PostgreSQL and SQLite 3.&lt;/p&gt; &#xA;&lt;p&gt;== Description of Contents&lt;/p&gt; &#xA;&lt;p&gt;The default directory structure of a generated Ruby on Rails application:&lt;/p&gt; &#xA;&lt;p&gt;|-- app | |-- assets | |-- images | |-- javascripts | &lt;code&gt;-- stylesheets | |-- controllers | |-- helpers | |-- mailers | |-- models | &lt;/code&gt;-- views | &lt;code&gt;-- layouts |-- config | |-- environments | |-- initializers | &lt;/code&gt;-- locales |-- db |-- doc |-- lib | &lt;code&gt;-- tasks |-- log |-- public |-- script |-- test | |-- fixtures | |-- functional | |-- integration | |-- performance | &lt;/code&gt;-- unit |-- tmp | |-- cache | |-- pids | |-- sessions | &lt;code&gt;-- sockets &lt;/code&gt;-- vendor |-- assets &lt;code&gt;-- stylesheets &lt;/code&gt;-- plugins&lt;/p&gt; &#xA;&lt;p&gt;app Holds all the code that&#39;s specific to this particular application.&lt;/p&gt; &#xA;&lt;p&gt;app/assets Contains subdirectories for images, stylesheets, and JavaScript files.&lt;/p&gt; &#xA;&lt;p&gt;app/controllers Holds controllers that should be named like weblogs_controller.rb for automated URL mapping. All controllers should descend from ApplicationController which itself descends from ActionController::Base.&lt;/p&gt; &#xA;&lt;p&gt;app/models Holds models that should be named like post.rb. Models descend from ActiveRecord::Base by default.&lt;/p&gt; &#xA;&lt;p&gt;app/views Holds the template files for the view that should be named like weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby syntax by default.&lt;/p&gt; &#xA;&lt;p&gt;app/views/layouts Holds the template files for layouts to be used with views. This models the common header/footer method of wrapping views. In your views, define a layout using the &lt;tt&gt;layout :default&lt;/tt&gt; and create a file named default.html.erb. Inside default.html.erb, call &amp;lt;% yield %&amp;gt; to render the view using this layout.&lt;/p&gt; &#xA;&lt;p&gt;app/helpers Holds view helpers that should be named like weblogs_helper.rb. These are generated for you automatically when using generators for controllers. Helpers can be used to wrap functionality for your views into methods.&lt;/p&gt; &#xA;&lt;p&gt;config Configuration files for the Rails environment, the routing map, the database, and other dependencies.&lt;/p&gt; &#xA;&lt;p&gt;db Contains the database schema in schema.rb. db/migrate contains all the sequence of Migrations for your schema.&lt;/p&gt; &#xA;&lt;p&gt;doc This directory is where your application documentation will be stored when generated using &lt;tt&gt;rake doc:app&lt;/tt&gt;&lt;/p&gt; &#xA;&lt;p&gt;lib Application specific libraries. Basically, any kind of custom code that doesn&#39;t belong under controllers, models, or helpers. This directory is in the load path.&lt;/p&gt; &#xA;&lt;p&gt;public The directory available for the web server. Also contains the dispatchers and the default HTML files. This should be set as the DOCUMENT_ROOT of your web server.&lt;/p&gt; &#xA;&lt;p&gt;script Helper scripts for automation and generation.&lt;/p&gt; &#xA;&lt;p&gt;test Unit and functional tests along with fixtures. When using the rails generate command, template test files will be generated for you and placed in this directory.&lt;/p&gt; &#xA;&lt;p&gt;vendor External libraries that the application depends on. Also includes the plugins subdirectory. If the app has frozen rails, those gems also go here, under vendor/rails/. This directory is in the load path.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rubymonolith/superform</title>
    <updated>2023-07-24T01:43:57Z</updated>
    <id>tag:github.com,2023-07-24:/rubymonolith/superform</id>
    <link href="https://github.com/rubymonolith/superform" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build highly customizable forms in Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Superform&lt;/h1&gt; &#xA;&lt;p&gt;Superform aims to be the best way to build forms in Rails applications. Here&#39;s what it does differently.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Everything is a component.&lt;/strong&gt; Superform is built on top of &lt;a href=&#34;https://phlex.fun&#34;&gt;Phlex&lt;/a&gt;, so every bit of HTML in the form can be customized to your precise needs. Use it with your own CSS Framework or go crazy customizing every last bit of TailwindCSS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic strong parameters.&lt;/strong&gt; Superform automatically permits form fields so you don&#39;t have to facepalm yourself after adding a field, wondering why it doesn&#39;t persist, only to realize you forgot to add the parameter to your controller. No more! Superform was architected with safety &amp;amp; security in mind, meaning it can automatically permit your form parameters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compose complex forms with Plain &#39;ol Ruby Objects.&lt;/strong&gt; Superform is built on top of POROs, so you can easily compose classes, modules, &amp;amp; ruby code together to create complex forms. You can even extend forms to create new forms with a different look and feel.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s a complete rewrite of Rails form&#39;s internals that&#39;s inspired by Reactive component design patterns.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codeclimate.com/github/rubymonolith/superform/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/0e4dfe2a1ece26e3a59e/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rubymonolith/superform/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/rubymonolith/superform/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Ruby&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add to the Rails application&#39;s Gemfile by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle add superform&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rails g superform:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install both Phlex Rails and Superform.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Superform streamlines the development of forms on Rails applications by making everything a component.&lt;/p&gt; &#xA;&lt;p&gt;After installing, create a form in &lt;code&gt;app/views/*/form.rb&lt;/code&gt;. For example, a form for a &lt;code&gt;Post&lt;/code&gt; resource might look like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# ./app/views/posts/form.rb&#xA;class Posts::Form &amp;lt; ApplicationForm&#xA;  def template(&amp;amp;)&#xA;    row field(:title).input&#xA;    row field(:body).textarea&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then render it in your templates. Here&#39;s what it looks like from an Erb file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;h1&amp;gt;New post&amp;lt;/h1&amp;gt;&#xA;&amp;lt;%= render Posts::Form.new @post %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Superforms are built out of &lt;a href=&#34;https://www.phlex.fun/html/components/&#34;&gt;Phlex components&lt;/a&gt;. The method names correspeond with the HTML tag, its arguments are attributes, and the blocks are the contents of the tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# ./app/views/forms/application_form.rb&#xA;class ApplicationForm &amp;lt; ApplicationForm&#xA;  class MyInputComponent &amp;lt; ApplicationComponent&#xA;    def template(&amp;amp;)&#xA;      div class: &#34;form-field&#34; do&#xA;        input(**attributes)&#xA;        if field.errors?&#xA;          p(class: &#34;form-field-error&#34;) { field.errors.to_sentence }&#xA;        end&#xA;      end&#xA;    end&#xA;  end&#xA;&#xA;  class Field &amp;lt; Field&#xA;    def input(**attributes)&#xA;      MyInputComponent.new(self, attributes: attributes)&#xA;    end&#xA;  end&#xA;&#xA;  def labeled(component)&#xA;    div class: &#34;form-row&#34; do&#xA;      render component.field.label&#xA;      render component&#xA;    end&#xA;  end&#xA;&#xA;  def submit(text)&#xA;    button(type: :submit) { text }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That looks like a LOT of code, and it is, but look at how easy it is to create forms.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# ./app/views/users/form.rb&#xA;class Users::Form &amp;lt; ApplicationForm&#xA;  def template(&amp;amp;)&#xA;    labeled field(:name).input&#xA;    labeled field(:email).input(type: :email)&#xA;&#xA;    submit &#34;Sign up&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then render it from Erb.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= render Users::Form.new @user %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Much better!&lt;/p&gt; &#xA;&lt;h2&gt;Extending Superforms&lt;/h2&gt; &#xA;&lt;p&gt;The best part? If you have forms with a completely different look and feel, you can extend the forms just like you would a Ruby class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AdminForm &amp;lt; ApplicationForm&#xA;  class AdminInput &amp;lt; ApplicationComponent&#xA;    def template(&amp;amp;)&#xA;      input(**attributes)&#xA;      small { admin_tool_tip_for field.key }&#xA;    end&#xA;  end&#xA;&#xA;  class Field &amp;lt; Field&#xA;    def tooltip_input(**attributes)&#xA;      AdminInput.new(self, attributes: attributes)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, just like you did in your Erb, you create the form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Admin::Users::Form &amp;lt; AdminForm&#xA;  def template(&amp;amp;)&#xA;    labeled field(:name).tooltip_input&#xA;    labeled field(:email).tooltip_input(type: :email)&#xA;&#xA;    submit &#34;Save&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since Superforms are just Ruby objects, you can organize them however you want. You can keep your view component classes embedded in your Superform file if you prefer for everythign to be in one place, keep the forms in the &lt;code&gt;app/views/forms/*.rb&lt;/code&gt; folder and the components in &lt;code&gt;app/views/forms/**/*_component.rb&lt;/code&gt;, use Ruby&#39;s &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt; features to modify different form classes, or put them in a gem and share them with an entire organization or open source community. It&#39;s just Ruby code!&lt;/p&gt; &#xA;&lt;h2&gt;Automatic strong parameters&lt;/h2&gt; &#xA;&lt;p&gt;Guess what? Superform eliminates then need for Strong Parameters in Rails by assigning the values of the &lt;code&gt;params&lt;/code&gt; hash &lt;em&gt;through&lt;/em&gt; your form via the &lt;code&gt;assign&lt;/code&gt; method. Here&#39;s what it looks like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsController &amp;lt; ApplicationController&#xA;  include Superform::Rails::StrongParameters&#xA;&#xA;  def create&#xA;    @post = assign params.require(:post), to: Posts::Form.new(Post.new)&#xA;&#xA;    if @post.save&#xA;      # Success path&#xA;    else&#xA;      # Error path&#xA;    end&#xA;  end&#xA;&#xA;  def update&#xA;    @post = Post.find(params[:id])&#xA;&#xA;    assign params.require(:post), to: Posts::Form.new(@post)&#xA;&#xA;    if @post.save&#xA;      # Success path&#xA;    else&#xA;      # Error path&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How does it work? An instance of the form is created, then the hash is assigned to it. If the params include data outside of what a form accepts, it will be ignored.&lt;/p&gt; &#xA;&lt;h2&gt;Comparisons&lt;/h2&gt; &#xA;&lt;p&gt;Rails ships with a lot of great options to make forms. Many of these inspired Superform. The tl;dr:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Rails has a lot of great form helpers. Simple Form and Formtastic both have concise ways of defining HTML forms, but do require frequently opening and closing Erb tags.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Superform is uniquely capable of permitting its own controller parameters, leaving you with one less thing to worry about and test. Additionally it can be extended, shared, and modularized since its Plain&#39; &#39;ol Ruby, which opens up a world of TailwindCSS form libraries and proprietary form libraries developed internally by organizations.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Rails form helpers&lt;/h3&gt; &#xA;&lt;p&gt;Rails form helpers have lasted for almost 20 years and are super solid, but things get tricky when your application starts to take on different styles of forms. To manage it all you have to cobble together helper methods, partials, and templates. Additionally, the structure of the form then has to be expressed to the controller as strong params, forcing you to repeat yourself.&lt;/p&gt; &#xA;&lt;p&gt;With Simpleform, you build the entire form with Ruby code, so you avoid the Erb gymnastics and helper method soup that it takes in Rails to scale up forms in an organization.&lt;/p&gt; &#xA;&lt;h3&gt;Simple Form&lt;/h3&gt; &#xA;&lt;p&gt;I built some pretty amazing applications with Simple Form and admire its syntax. It requires &#34;Erb soup&#34;, which is an opening and closing line of Erb per line. If you follow a specific directory structure or use their component framework, you can get pretty far, but you&#39;ll hit a wall when you need to start putting wrappers around forms or inputs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/simple_form#the-wrappers-api&#34;&gt;https://github.com/heartcombo/simple_form#the-wrappers-api&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The API is there, but when you change the syntax, you have to reboot the server to see the changes. UI development should be reflected immediately when the page is reloaded, which is what Superforms can do.&lt;/p&gt; &#xA;&lt;p&gt;Like Rails form helpers, it doesn&#39;t self-permit parameters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ruby-toolbox.com/projects/simple_form&#34;&gt;https://www.ruby-toolbox.com/projects/simple_form&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Formtastic&lt;/h3&gt; &#xA;&lt;p&gt;Formtastic gives us a nice DSL inside of Erb that we can use to create forms, but like Simple Form, there&#39;s a lot of opening and closing Erb tags that make the syntax clunky.&lt;/p&gt; &#xA;&lt;p&gt;It has generators that give you Ruby objects that represent HTML form inputs that you can customize, but its limited to very specific parts of the HTML components. Superform lets you customize every aspect of the HTML in your form elements.&lt;/p&gt; &#xA;&lt;p&gt;It also does not permit its own parameters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ruby-toolbox.com/projects/formtastic&#34;&gt;https://www.ruby-toolbox.com/projects/formtastic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake spec&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and the created tag, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/rubymonolith/superform&#34;&gt;https://github.com/rubymonolith/superform&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://github.com/rubymonolith/superform/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the Superform project&#39;s codebases, issue trackers, chat rooms and mailing lists is expected to follow the &lt;a href=&#34;https://github.com/rubymonolith/superform/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>