<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-08T01:31:55Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DeathKing/Learning-SICP</title>
    <updated>2022-08-08T01:31:55Z</updated>
    <id>tag:github.com,2022-08-08:/DeathKing/Learning-SICP</id>
    <link href="https://github.com/DeathKing/Learning-SICP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MIT视频公开课《计算机程序的构造和解释》中文化项目及课程学习资料搜集。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;《计算机程序的结构和解释》公开课 翻译项目&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img height=&#34;20px&#34; src=&#34;https://user-images.githubusercontent.com/895809/47278305-6d793380-d5fa-11e8-89f2-7c8862027997.png&#34; alt=&#34;MIT OCW&#34;&gt; &lt;a href=&#34;https://ocw.mit.edu/index.htm&#34;&gt;MIT OpenCourseWare&lt;/a&gt;　　　　　　&lt;img height=&#34;20px&#34; src=&#34;https://avatars2.githubusercontent.com/u/36149682?s=200&amp;amp;v=4&#34; alt=&#34;HIT IBMTC&#34;&gt; &lt;a href=&#34;https://github.com/HIT-IBMTC&#34;&gt;哈尔滨工业大学 IBM技术中心&lt;/a&gt;　　　　　　&lt;img height=&#34;20px&#34; src=&#34;https://user-images.githubusercontent.com/895809/47278313-7cf87c80-d5fa-11e8-9ca8-0f5f19c1d31e.jpg&#34; alt=&#34;HIT PT&#34;&gt; &lt;a href=&#34;https://hitpt.org/index.php&#34;&gt;哈尔滨工业大学 清影PT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/wizard.jpg&#34; alt=&#34;SICP&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;《计算机程序的构造和解释》系列公开课，视频是两位作者（Harold Abelson、Gerald Jay Sussman）在1986年7月给&lt;strong&gt;Hewlett-Packard&lt;/strong&gt;公司员工培训时的录像。你可以在&lt;a href=&#34;https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/&#34;&gt;这里&lt;/a&gt;获得这门课程的视频。&lt;/p&gt; &#xA;&lt;p&gt;这门课程只提供了英文字幕，本项目旨在将这些英文字幕翻译为中文，方便广大的&lt;code&gt;Scheme/Lisp&lt;/code&gt;学习者。&lt;/p&gt; &#xA;&lt;h2&gt;教辅资料&lt;/h2&gt; &#xA;&lt;p&gt;这里收集了一些有用的学习资料，包括SICP原书、Scheme新手教程、教学环境搭建、相关拓展习题等资料。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;教学辅导&lt;/th&gt; &#xA;   &lt;th&gt;环境配置&lt;/th&gt; &#xA;   &lt;th&gt;深入阅读&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html&#34;&gt;SICP原书全文·英文&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.math.pku.edu.cn/teachers/qiuzy/progtech/scheme/mit_scheme.htm&#34;&gt;MIT Scheme基本使用&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://steshaw.org/plt/&#34;&gt;程序设计语言理论资料汇编&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sarabander/sicp-pdf&#34;&gt;SICP原书PDF版·英文&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.math.pku.edu.cn/teachers/qiuzy/progtech/scheme/plt_scheme.htm&#34;&gt;PLT Scheme的基本使用&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.cs.cmu.edu/afs/cs.cmu.edu/user/mleone/web/language-research.html&#34;&gt;程序设计语言研究资料&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing/yast-cn&#34;&gt;Scheme入门教程·中文&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/37056659&#34;&gt;DrRacket 的安装与配置&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.cs.cmu.edu/~crary/819-f09/&#34;&gt;程序设计语言与逻辑研究领域经典论文&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://groups.csail.mit.edu/mac/users/gjs/6.945/assignments.html&#34;&gt;MIT 6.945/6.905 课程作业&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://syntacticlosure.github.io/&#34;&gt;Racket 常见问题&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://okmij.org/ftp/&#34;&gt;Oleg&#39;s FTP&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;SICP的习题解答可参考 SchemeWiki 的 &lt;a href=&#34;http://community.schemewiki.org/?SICP-Solutions&#34;&gt;SICP Solutions&lt;/a&gt; 页面。如果您在学习过程中遇到任何疑问，欢迎使用 &lt;a href=&#34;https://github.com/DeathKing/Learning-SICP/issues&#34;&gt;Issues&lt;/a&gt; 功能提问。&lt;/p&gt; &#xA;&lt;h2&gt;视频地址&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th colspan=&#34;5&#34;&gt;&lt;a href=&#34;https://learningsicp.github.io/&#34;&gt;🏠 主页&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🎥 播放列表&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XNTEzMDAyMTU2.html?f=18958522&#34;&gt;优酷&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLkEwH_Z2WOlppy8oUfrGwFVlOuKyo3RO_&#34;&gt;YouTube&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.bilibili.com/video/av8515129/&#34;&gt;BiliBili&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.acfun.cn/v/ac10517890&#34;&gt;AcFun&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📂 网盘&lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1o78bsYA&#34;&gt;百度网盘&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/12yryTD9HPpa5zjIpTmYawl6-8VrISxIE?usp=sharing&#34;&gt;Google Drive&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;由于 MKV 格式的视频文件需要额外安装字幕，我们不再提供 MKV 格式的视频；&lt;/li&gt; &#xA;  &lt;li&gt;中国大陆以外的用户，可尝试通过Google Drive下载以获得更高的下载速度。&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;编号&lt;/th&gt; &#xA;   &lt;th&gt;标题&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;下载地址&lt;/th&gt; &#xA;   &lt;th&gt;译者&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec1a&lt;/td&gt; &#xA;   &lt;td&gt;《Lisp概览》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XNTEzMDAyMTU2.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/IcZSFewqr9k&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=1&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/109WuY4ONSZddFXyE2hQGwg&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec1b&lt;/td&gt; &#xA;   &lt;td&gt;《计算过程》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XNTMxODY1NTg4.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/WuK9NmA3aq0&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=2&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1C3muRwhMdK8yioHWw5P-1Q&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ChingfanTsou&#34;&gt;ChingfanTsou&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec2a&lt;/td&gt; &#xA;   &lt;td&gt;《高阶过程》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XNzAzNjI1NjU2.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/mrgcGvOI1bs&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=3&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1MHiHVHfwq6x8rylBVDGV0A&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/endyul&#34;&gt;endyul&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec2b&lt;/td&gt; &#xA;   &lt;td&gt;《复合数据》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XNzAzNjg4Mjk2.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/ufTdeiz9dMw&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=4&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1DfX7DJ_pMd7AtMlJwqyoRg&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec3a&lt;/td&gt; &#xA;   &lt;td&gt;《Henderson-Escher的例子》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XODk4NjUwODMy.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/YCR03O5EUdI&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=5&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1bOJvDO&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;, &lt;a href=&#34;https://github.com/mut0u&#34;&gt;Michael Savior&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec3b&lt;/td&gt; &#xA;   &lt;td&gt;《符号化求导系统：引用》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XODk4NjUwODA0.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/cgGbiMptQM0&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=6&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1mhS2EV2&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec4a&lt;/td&gt; &#xA;   &lt;td&gt;《模式匹配：基于规则的代换》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMTM4NTY5NzE3Ng.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/zSxepaPtNQY&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=7&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1U9E33yRr5mIqrdTOjnJeGA&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;, &lt;a href=&#34;https://github.com/mut0u&#34;&gt;Michael Savior&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec4b&lt;/td&gt; &#xA;   &lt;td&gt;《通用运算符》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMTQ3NDEwODUyNA==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/RlfZridRcw0&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=8&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1vAv8Hi46f9ku2y7LHPpzzw&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rtmagic&#34;&gt;rtmagic&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec5a&lt;/td&gt; &#xA;   &lt;td&gt;《赋值，状态和副作用》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMTczMjIxNTM2NA==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/ozss6dvq7ZU&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=9&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1boWiMWB&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Windfarer&#34;&gt;Windfarer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec5b&lt;/td&gt; &#xA;   &lt;td&gt;《计算对象》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMjY0NzE3NzQ2MA==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/2Iz7agtk614&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=10&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1c1FRLIg&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DreamAndDead&#34;&gt;DreamAndDead&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec6a&lt;/td&gt; &#xA;   &lt;td&gt;《流 I》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMjg4NTkwNzU3Ng==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/z7jvvATswFE&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=11&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1pLlvcLH&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DreamAndDead&#34;&gt;DreamAndDead&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec6b&lt;/td&gt; &#xA;   &lt;td&gt;《流 II》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMzAyMjI0MjAzNg==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/0lQ6fThLhYw&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=12&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1b3kbWq&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DreamAndDead&#34;&gt;DreamAndDead&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec7a&lt;/td&gt; &#xA;   &lt;td&gt;《元循环求值器 I》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMzAzODg2ODczNg==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/RXUqgWJES0w&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=13&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1kV1M0ab&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;, &lt;a href=&#34;https://github.com/DreamAndDead&#34;&gt;DreamAndDead&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec7b&lt;/td&gt; &#xA;   &lt;td&gt;《元循环求值器 II》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMzA2NDQ5MjkxMg==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/HNaAEv8Xjx8&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=14&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1qYBgrIO&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;, &lt;a href=&#34;https://github.com/DreamAndDead&#34;&gt;DreamAndDead&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec8a&lt;/td&gt; &#xA;   &lt;td&gt;《逻辑式程序设计 I》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMzIyODg0NTEwNA==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/VNH95lmCHdE&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=15&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1dFlOqrB&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec8b&lt;/td&gt; &#xA;   &lt;td&gt;《逻辑式程序设计 II》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMzQ4MDA1OTE3Mg==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/mcik1gEEyqA&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=16&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1MN5ZDrnnKeE0XeMqAY6x0Q&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec9a&lt;/td&gt; &#xA;   &lt;td&gt;《寄存机器》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMzU3MzA5Mzg0OA==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/oR2PwG0xh_g&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=17&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1AFM6__x4oGq3XtI_fa3ZGQ&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec9b&lt;/td&gt; &#xA;   &lt;td&gt;《显式控制求值器》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMzcxMDAzMTA1Mg==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/mrRcB4uY75M&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=18&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1bHhuJdEQyE9Fyw06Y6tOZw&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DeathKing&#34;&gt;DeathKing&lt;/a&gt;, &lt;a href=&#34;https://github.com/rtmagic&#34;&gt;rtmagic&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec10a&lt;/td&gt; &#xA;   &lt;td&gt;《编译》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMzYyNTcxNDYwOA==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/vBEkYVrtfBE&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=19&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1IWkeR7gM5jiVFPMVhdZ4fg&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Windfarer&#34;&gt;Windfarer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lec10b&lt;/td&gt; &#xA;   &lt;td&gt;《存储分配与垃圾收集》&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://v.youku.com/v_show/id_XMzc3NjI4MzQ4NA==.html&#34;&gt; [优酷] &lt;/a&gt; &lt;a href=&#34;https://youtu.be/HNjPAzmSho8&#34;&gt; [YouTube] &lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/av8515129?p=20&#34;&gt; [bilibili] &lt;/a&gt; &lt;a href=&#34;https://pan.baidu.com/s/1LKoXNWFD9lFclgNKeCBxsg&#34;&gt; [MP4] &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Windfarer&#34;&gt;Windfarer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;捐助本项目&lt;/h2&gt; &#xA;&lt;p&gt;本项目不以盈利为目的，旨在为广大程序员、函数式编爱好者以及计算机专业学生提供相关学习资源。&lt;/p&gt; &#xA;&lt;p&gt;字幕制作之苦，如人饮水冷暖自知，期间又经历各种变故，如今也主要只有我一人坚守在这个岗位上为大家继续献上这门经典公开课。虽然拖拖拉拉断断续续，能坚持到今天实属不易。如果您愿意支持本项目，不妨向以下支付宝账户捐款。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/895809/6343830/b3840a8c-bc2a-11e4-931e-dbed22ffca99.png&#34; alt=&#34;deathking_alipay&#34;&gt;&lt;br&gt; 账号：&lt;a href=&#34;mailto:death0622@qq.com&#34;&gt;death0622@qq.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;加入我们&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Learning-SICP 主群：97747648&lt;/li&gt; &#xA; &lt;li&gt;Learning-SICP 2 群：573877085&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;（加群请注明理由，否则一概拒绝）&lt;/p&gt; &#xA;&lt;h2&gt;声明与致谢&lt;/h2&gt; &#xA;&lt;p&gt;我们由衷感谢 Harold Abelson 及 Gerald Jay Sussman 教授为我们讲授这一门公开课，感谢 &lt;a href=&#34;http://ocw.mit.edu&#34;&gt;MIT OCW&lt;/a&gt; 项目允许我们以 Creative Commons 的方式分发本课的中译版本，以下是原课中的许可与声明。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://ocw.mit.edu&#34;&gt;http://ocw.mit.edu&lt;/a&gt;&lt;br&gt; License: Creative Commons Attribution-Noncommercial-Share Alike.&lt;br&gt; &lt;code&gt;Eric Grimson&lt;/code&gt;, &lt;code&gt;Peter Szolovits&lt;/code&gt;, and &lt;code&gt;Trevor Darrell&lt;/code&gt;,&lt;br&gt; 6.001 Structure and Interpretation of Computer Programs, Spring 2005.&lt;br&gt; (Massachusetts Institute of Technology: MIT OpenCourseWare).&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>tradingview/charting-library-examples</title>
    <updated>2022-08-08T01:31:55Z</updated>
    <id>tag:github.com,2022-08-08:/tradingview/charting-library-examples</id>
    <link href="https://github.com/tradingview/charting-library-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples of Charting Library integrations with other libraries, frameworks and data transports&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TradingView Charting Library Integration Examples&lt;/h1&gt; &#xA;&lt;h2&gt;What is Charting Library&lt;/h2&gt; &#xA;&lt;p&gt;Charting Library is a standalone solution for displaying charts. This free, downloadable library is hosted on your servers and is connected to your data feed to be used in your website or app. &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Learn more and download&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;h3&gt;android&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; integration into Android WebView&lt;/p&gt; &#xA;&lt;h3&gt;angular5&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://angular.io/&#34;&gt;Angular 5&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;ios-swift&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; integration into iOS WKWebView&lt;/p&gt; &#xA;&lt;h3&gt;nextjs-javascript&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;nuxtjs&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://nuxtjs.org/&#34;&gt;Nuxt.js&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;react-javascript&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://reactjs.org&#34;&gt;React&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;react-native&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;react-typescript&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt;, &lt;a href=&#34;https://reactjs.org&#34;&gt;React&lt;/a&gt; and &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;ruby-on-rails&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Ruby-on-Rails&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;vuejs&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; Integration Example&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-running-ruby-code</title>
    <updated>2022-08-08T01:31:55Z</updated>
    <id>tag:github.com,2022-08-08:/learn-co-curriculum/phase-3-running-ruby-code</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-running-ruby-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Running Ruby Code&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run Ruby code from a file&lt;/li&gt; &#xA; &lt;li&gt;Log output to the terminal&lt;/li&gt; &#xA; &lt;li&gt;Run Ruby code from IRB&lt;/li&gt; &#xA; &lt;li&gt;Run RSpec tests in Ruby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this lesson, you&#39;ll get some practice running Ruby code, and see a few different ways to check what your code is doing. Make sure to code along to get comfortable in this new environment!&lt;/p&gt; &#xA;&lt;h2&gt;Creating a Ruby Application&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s dive right in. To get started on any new Ruby application, the first thing we need is a file. Create a new file in this lab directory called &lt;code&gt;app.rb&lt;/code&gt;. In this file, add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app.rb&#xA;puts &#34;Hello world!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;puts&lt;/code&gt; is a built-in Ruby method that will output a string of text to the terminal. It&#39;s the Ruby equivalent of &lt;code&gt;console.log()&lt;/code&gt; in JavaScript. It will print the string &#34;Hello world!&#34; along with a line break at the end.&lt;/p&gt; &#xA;&lt;p&gt;The line above &lt;code&gt;puts&lt;/code&gt; is a Ruby comment. In Ruby, any line that starts with a &lt;code&gt;#&lt;/code&gt; won&#39;t be executed by the interpreter. This is the Ruby equivalent of &lt;code&gt;//&lt;/code&gt; in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;One important thing to note about Ruby methods that we&#39;ll explore further: in Ruby, using parentheses when invoking a method is optional. You can also write the above code like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app.rb&#xA;puts(&#34;Hello world!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both of these examples will do the same thing; but for Rubyists, the first syntax is preferred since it is more pleasant to look at.&lt;/p&gt; &#xA;&lt;h2&gt;Running Ruby Applications&lt;/h2&gt; &#xA;&lt;p&gt;Unlike JavaScript, you won&#39;t be running Ruby applications in the browser. Instead, you&#39;ll need to use the Ruby interpreter to run your code from the terminal. You can check which version of Ruby you&#39;re using with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ruby -v&#xA;ruby 2.7.3p183 (2021-04-05 revision 6847ee089d) [x86_64-darwin19]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the application, enter the command &lt;code&gt;ruby filename.rb&lt;/code&gt;, where &lt;code&gt;filename.rb&lt;/code&gt; is the relative path to the file you&#39;d like to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ruby app.rb&#xA;Hello world!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congrats on running your first Ruby application! 🎉&lt;/p&gt; &#xA;&lt;h2&gt;Ruby Terminal Output Methods&lt;/h2&gt; &#xA;&lt;p&gt;Now that we have a place to write some code, let&#39;s explore a few of Ruby&#39;s built-in methods for displaying info in the terminal so you can easily inspect your code as you are writing it.&lt;/p&gt; &#xA;&lt;h3&gt;Outputting Strings with &lt;code&gt;puts&lt;/code&gt; and &lt;code&gt;print&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Ruby has several methods for printing output to the terminal: &lt;code&gt;puts&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, and &lt;code&gt;pp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;print&lt;/code&gt; and &lt;code&gt;puts&lt;/code&gt; do almost the same thing; the only difference is that &lt;code&gt;puts&lt;/code&gt; will add a line break at the end of the string. Try updating the code in &lt;code&gt;app.rb&lt;/code&gt; to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app.rb&#xA;puts &#34;Hello world!&#34;&#xA;puts &#34;Hello world!&#34;&#xA;puts &#34;Hello world!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the application with &lt;code&gt;ruby app.rb&lt;/code&gt;. Then change &lt;code&gt;puts&lt;/code&gt; to &lt;code&gt;print&lt;/code&gt; and run it again to see the difference in output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app.rb&#xA;print &#34;Hello world!&#34;&#xA;print &#34;Hello world!&#34;&#xA;print &#34;Hello world!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inspecting Data with &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;pp&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;puts&lt;/code&gt; and &lt;code&gt;print&lt;/code&gt; are great for working with strings and displaying them in the terminal, but it&#39;s often helpful to be able to inspect other kinds of data that aren&#39;t so easily represented as strings.&lt;/p&gt; &#xA;&lt;p&gt;For example, if we had an array and we wanted to inspect it in the console, &lt;code&gt;puts&lt;/code&gt; might not be the best way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app.rb&#xA;puts [1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;puts&lt;/code&gt; on something that isn&#39;t already a string, Ruby will coerce the data to a string by calling the &lt;code&gt;.to_s&lt;/code&gt; method. In the case of arrays, this will produce the following output, with each element of the array printed to a new line in the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ruby app.rb&#xA;1&#xA;2&#xA;3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is where the &lt;code&gt;p&lt;/code&gt; method comes in handy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# This is the equivalent of calling:&#xA;# puts [1, 2, 3].inspect&#xA;p [1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;p&lt;/code&gt; method will output the data in a nicer format by calling the &lt;code&gt;.inspect&lt;/code&gt; method on our data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ruby app.rb&#xA;[1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ruby has one more method, &lt;code&gt;pp&lt;/code&gt;, for &#34;pretty-printing&#34; complex data, such as nested arrays and hashes (the Ruby equivalent of a JavaScript object):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app.rb&#xA;pp [{ id: 1, hello: &#34;World&#34; }, { id: 2, hello: &#34;Ruby&#34; }, { id: 3, hello: &#34;Moon&#34; }, { id: 4, hello: &#34;Learner&#34; }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;pp&lt;/code&gt; method will &#34;pretty-print&#34; these objects by calling the &lt;code&gt;.pretty_inspect&lt;/code&gt; method on our data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ruby app.rb&#xA;[{:id=&amp;gt;1, :hello=&amp;gt;&#34;World&#34;},&#xA; {:id=&amp;gt;2, :hello=&amp;gt;&#34;Ruby&#34;},&#xA; {:id=&amp;gt;3, :hello=&amp;gt;&#34;Moon&#34;},&#xA; {:id=&amp;gt;4, :hello=&amp;gt;&#34;Learner&#34;}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exploring Ruby with IRB&lt;/h2&gt; &#xA;&lt;p&gt;Ruby comes with a tool called IRB (Interactive Ruby) for running a Ruby REPL (read-evaluate-print-loop) in the terminal, which provides similar functionality to the browser console that you&#39;re familiar with from JavaScript. Using IRB is a great way to quickly test out some code, or check your syntax, without needing to run an entire application.&lt;/p&gt; &#xA;&lt;p&gt;To use IRB, go into the terminal and enter &lt;code&gt;irb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ irb&#xA;2.7.3 :001 &amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives you a prompt where you can enter Ruby code. Try entering in &lt;code&gt;puts &#34;Hello IRB&#34;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;2.7.3 :001 &amp;gt; puts &#34;Hello IRB&#34;&#xA;Hello IRB&#xA; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll notice that two lines are output: &lt;code&gt;Hello IRB&lt;/code&gt;, then &lt;code&gt;=&amp;gt; nil&lt;/code&gt;. The first line is the output of the &lt;code&gt;puts&lt;/code&gt; method; the second line is the &lt;strong&gt;return value&lt;/strong&gt; of the &lt;code&gt;puts&lt;/code&gt; method. IRB indicates that this is the return value with the &lt;code&gt;=&amp;gt;&lt;/code&gt; symbol. In Ruby, all methods have a return value. &lt;code&gt;nil&lt;/code&gt; in this case means &#34;no value&#34;, similar to &lt;code&gt;null&lt;/code&gt; in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;Try running a few more expressions in IRB:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;&amp;gt; first_number = 7&#xA; =&amp;gt; 7&#xA;&amp;gt; first_number&#xA; =&amp;gt; 7&#xA;&amp;gt; puts first_number&#xA;7&#xA; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the code above, we&#39;ve declared a &lt;strong&gt;local variable&lt;/strong&gt; called &lt;code&gt;first_number&lt;/code&gt; and assigned it a value of &lt;code&gt;7&lt;/code&gt;. Note the difference between just entering &lt;code&gt;first_number&lt;/code&gt; and entering &lt;code&gt;puts first_number&lt;/code&gt;: in the first case, the &lt;strong&gt;return value&lt;/strong&gt; is &lt;code&gt;7&lt;/code&gt;, in the second case, the &lt;strong&gt;return value&lt;/strong&gt; is &lt;code&gt;nil&lt;/code&gt;. Using the correct return value will become more important once we start writing methods, so remember: the &lt;code&gt;puts&lt;/code&gt; method &lt;strong&gt;always returns &lt;code&gt;nil&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In Ruby, it&#39;s convention to use underscores (_) to separate words in variables. This is referred to as &lt;strong&gt;snake case&lt;/strong&gt; (as opposed to &lt;strong&gt;camel case&lt;/strong&gt;, which is the convention in JavaScript).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can exit IRB by typing &lt;code&gt;exit&lt;/code&gt;, or pressing &lt;code&gt;ctrl + d&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running RSpec Tests&lt;/h2&gt; &#xA;&lt;p&gt;All the lessons in the Ruby curriculum use the RSpec library for testing your Ruby code.&lt;/p&gt; &#xA;&lt;p&gt;In this lesson, you&#39;ll see a &lt;code&gt;spec&lt;/code&gt; folder with two files, &lt;code&gt;app_spec.rb&lt;/code&gt; and &lt;code&gt;spec_helper.rb&lt;/code&gt;. The &lt;code&gt;spec_helper.rb&lt;/code&gt; file does a bit of general-purpose setup for our tests. &lt;code&gt;app_spec.rb&lt;/code&gt; is where we&#39;ve defined tests specifically for this lesson.&lt;/p&gt; &#xA;&lt;p&gt;RSpec is a Ruby gem (the Ruby equivalent of a npm package) that provides a domain-specific language, or DSL, that makes it very nice way to write tests. The RSpec library was installed on your system as part of installing the &lt;code&gt;learn-co&lt;/code&gt; gem earlier in the program.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s take one of these tests as an example to see RSpec&#39;s DSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;it &#39;outputs the string &#34;Pass this test, please.&#34; using the print method&#39; do&#xA;  expect { load &#39;app.rb&#39; }.to output(a_string_including(&#34;Pass this test, please.&#34;)).to_stdout&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of this is valid Ruby code, but it should read (more or less) like English:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Expect that loading the &lt;code&gt;app.rb&lt;/code&gt; file will output a string including the text &#34;Pass this test, please.&#34; to the terminal&#39;s standard output.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Clear out the code in &lt;code&gt;app.rb&lt;/code&gt; to start from scratch so we can try getting these tests to pass.&lt;/p&gt; &#xA;&lt;p&gt;To run the tests, you can use either the &lt;code&gt;rspec&lt;/code&gt; command or &lt;code&gt;learn test&lt;/code&gt;. Run the command, then take a moment to study the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ learn test&#xA;&#xA;the program&#xA;  has a file app.rb&#xA;  outputs the string &#34;Hello World!&#34; using the puts method (FAILED - 1)&#xA;  outputs the string &#34;Pass this test, please.&#34; using the print method (FAILED - 2)&#xA;  outputs the array [1, 2, 3] using the p method (FAILED - 3)&#xA;&#xA;Failures:&#xA;&#xA;  1) the program outputs the string &#34;Hello World!&#34; using the puts method&#xA;     Failure/Error: expect { load &#39;app.rb&#39; }.to output(a_string_including(&#34;Hello World!\n&#34;)).to_stdout&#xA;&#xA;       expected block to output a string including &#34;Hello World!\n&#34; to stdout, but output nothing&#xA;       Diff:&#xA;       @@ -1 +1 @@&#xA;       -(a string including &#34;Hello World!\n&#34;)&#xA;       +&#34;&#34;&#xA;&#xA;     # ./spec/app_spec.rb:10:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&#39;&#xA;&#xA;  2) the program outputs the string &#34;Pass this test, please.&#34; using the print method&#xA;     Failure/Error: expect { load &#39;app.rb&#39; }.to output(a_string_including(&#34;Pass this test, please.&#34;)).to_stdout&#xA;&#xA;       expected block to output a string including &#34;Pass this test, please.&#34; to stdout, but output nothing&#xA;       Diff:&#xA;       @@ -1 +1 @@&#xA;       -(a string including &#34;Pass this test, please.&#34;)&#xA;       +&#34;&#34;&#xA;&#xA;     # ./spec/app_spec.rb:14:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&#39;&#xA;&#xA;  3) the program outputs the array [1, 2, 3] using the p method&#xA;     Failure/Error: expect { load &#39;app.rb&#39; }.to output(a_string_including(&#34;[1, 2, 3]\n&#34;)).to_stdout&#xA;&#xA;       expected block to output a string including &#34;[1, 2, 3]\n&#34; to stdout, but output nothing&#xA;       Diff:&#xA;       @@ -1 +1 @@&#xA;       -(a string including &#34;[1, 2, 3]\n&#34;)&#xA;       +&#34;&#34;&#xA;&#xA;     # ./spec/app_spec.rb:18:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&#39;&#xA;&#xA;Finished in 0.04406 seconds (files took 0.28088 seconds to load)&#xA;4 examples, 3 failures&#xA;&#xA;Failed examples:&#xA;&#xA;rspec ./spec/app_spec.rb:6 # the program outputs the string &#34;Hello World!&#34; using the puts method&#xA;rspec ./spec/app_spec.rb:13 # the program outputs the string &#34;Pass this test, please.&#34; using the print method&#xA;rspec ./spec/app_spec.rb:17 # the program outputs the array [1, 2, 3] using the p method&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSpec provides all kinds of useful information about what went right and wrong with our code, so make sure to spend your time reading all the output here! It will tell you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Which tests passed/didn&#39;t passed&lt;/li&gt; &#xA; &lt;li&gt;Why each failing test failed (the difference between the expected output and the actual output)&lt;/li&gt; &#xA; &lt;li&gt;The line number of the failing test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;--fail-fast&lt;/code&gt;, or &lt;code&gt;--f-f&lt;/code&gt; flag to tell RSpec to stop running after the first failing test. This technique is helpful for focusing your attention on one problem at a time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ learn test --f-f&#xA;&#xA;the program&#xA;  has a file app.rb&#xA;  outputs the string &#34;Hello World!&#34; using the puts method (FAILED - 1)&#xA;&#xA;Failures:&#xA;&#xA;  1) the program outputs the string &#34;Hello World!&#34; using the puts method&#xA;     Failure/Error: expect { load &#39;app.rb&#39; }.to output(a_string_including(&#34;Hello World!\n&#34;)).to_stdout&#xA;&#xA;       expected block to output a string including &#34;Hello World!\n&#34; to stdout, but output nothing&#xA;       Diff:&#xA;       @@ -1 +1 @@&#xA;       -(a string including &#34;Hello World!\n&#34;)&#xA;       +&#34;&#34;&#xA;&#xA;     # ./spec/app_spec.rb:10:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&#39;&#xA;&#xA;Finished in 0.0389 seconds (files took 0.24407 seconds to load)&#xA;2 examples, 1 failure&#xA;&#xA;Failed examples:&#xA;&#xA;rspec ./spec/app_spec.rb:6 # the program outputs the string &#34;Hello World!&#34; using the puts method&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;To finish this lab, use the &lt;code&gt;puts&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, and &lt;code&gt;p&lt;/code&gt; methods in the &lt;code&gt;app.rb&lt;/code&gt; file as described by the tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;puts&lt;/code&gt; to display the string &lt;code&gt;&#34;Hello World!&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;print&lt;/code&gt; to display the string &lt;code&gt;&#34;Pass this test, please.&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;p&lt;/code&gt; to display the array &lt;code&gt;[1,2,3]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using &lt;code&gt;learn test&lt;/code&gt; will run the tests and sync your progress with GitHub and Canvas. When your tests are all passing, the lab is complete!&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;This lesson covered a good amount of material, but now you should be familiar with running code in a Ruby environment, and using tools like IRB and RSpec as well as built-in methods like &lt;code&gt;puts&lt;/code&gt; to understand what happens when your Ruby code is running. You&#39;ll need all these tools going forward, so make sure to get practice with all of them as you progress through this phase!&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rubyguides.com/2018/10/puts-vs-print/&#34;&gt;Understanding The Differences Between Puts, Print &amp;amp; P&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/documentation/quickstart/&#34;&gt;Ruby in Twenty Minutes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rspec.info/&#34;&gt;RSpec Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>