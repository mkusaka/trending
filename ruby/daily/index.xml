<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-06T01:40:34Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>countries/countries</title>
    <updated>2022-11-06T01:40:34Z</updated>
    <id>tag:github.com,2022-11-06:/countries/countries</id>
    <link href="https://github.com/countries/countries" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All sorts of useful information about every country packaged as convenient little country objects. It includes data from ISO 3166 (countries and states/subdivisions ), ISO 4217 (currency), and E.164 (phone numbers).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Countries&lt;/h1&gt; &#xA;&lt;p&gt;Countries is a collection of all sorts of useful information for every country in the ISO 3166 standard. It contains info for the following standards ISO3166-1 (countries), ISO3166-2 (states/subdivisions), ISO4217 (currency) and E.164 (phone numbers). I will add any country based data I can get access to. I hope this to be a repository for all country based information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/countries&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/countries.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/countries/countries/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/countries/countries/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/countries/countries&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/countries/countries.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/countries/countries/actions/workflows/codeql-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/countries/countries/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; gem install countries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can install via Bundler if you are using Rails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle add countries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply load a new country object using Country.new(&lt;em&gt;alpha2&lt;/em&gt;) or the shortcut Country[&lt;em&gt;alpha2&lt;/em&gt;]. An example works best.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c = ISO3166::Country.new(&#39;US&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Country Helper&lt;/h3&gt; &#xA;&lt;p&gt;Some apps might not want to constantly call &lt;code&gt;ISO3166::Country&lt;/code&gt; this gem has a helper that can provide a &lt;code&gt;Country&lt;/code&gt; class&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# With global Country Helper&#xA;c = Country[&#39;US&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;This will conflict with any existing &lt;code&gt;Country&lt;/code&gt; constant&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To Use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;countries&#39;, require: &#39;countries/global&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading to 4.2 and 5.x&lt;/h2&gt; &#xA;&lt;p&gt;Release 4.2.0 introduced changes to name attributes and finders and deprecated several methods to resolve some existing confusion regardign official ISO country names vs. the &#34;common names&#34; that are commonly used.&lt;/p&gt; &#xA;&lt;p&gt;The 5.0 release removed these deprecated methods and also removed support for Ruby 2.5 and 2.6&lt;/p&gt; &#xA;&lt;p&gt;Plase see &lt;a href=&#34;https://raw.githubusercontent.com/countries/countries/master/UPGRADE.md&#34;&gt;UPGRADE.md&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;Attribute-Based Finder Methods&lt;/h2&gt; &#xA;&lt;p&gt;You can lookup a country or an array of countries using any of the data attributes via the find_country_by_&lt;em&gt;attribute&lt;/em&gt; dynamic methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c    = ISO3166::Country.find_country_by_iso_short_name(&#39;italy&#39;)&#xA;c    = ISO3166::Country.find_country_by_any_name(&#39;united states&#39;)&#xA;h    = ISO3166::Country.find_all_by(:translated_names, &#39;França&#39;)&#xA;list = ISO3166::Country.find_all_countries_by_region(&#39;Americas&#39;)&#xA;c    = ISO3166::Country.find_country_by_alpha2(&#34;FR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a list of available attributes please see &lt;code&gt;ISO3166::DEFAULT_COUNTRY_HASH&lt;/code&gt;. Note: searches are &lt;em&gt;case insensitive and ignore accents&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that &lt;code&gt;find_by_name&lt;/code&gt;, &lt;code&gt;find_by_names&lt;/code&gt;, &lt;code&gt;find_*_by_name&lt;/code&gt; and &lt;code&gt;find_*_by_names&lt;/code&gt; methods were removed in 5.0. See &lt;a href=&#34;https://raw.githubusercontent.com/countries/countries/master/UPGRADE.md&#34;&gt;UPGRADE.md&lt;/a&gt; for more information&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Country Info&lt;/h2&gt; &#xA;&lt;h3&gt;Identification Codes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.number # =&amp;gt; &#34;840&#34;&#xA;c.alpha2 # =&amp;gt; &#34;US&#34;&#xA;c.alpha3 # =&amp;gt; &#34;USA&#34;&#xA;c.gec    # =&amp;gt; &#34;US&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Names &amp;amp; Translations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.iso_long_name # =&amp;gt; &#34;The United States of America&#34;&#xA;c.iso_short_name # =&amp;gt; &#34;United States of America&#34;&#xA;c.common_name # =&amp;gt; &#34;United States&#34; (This is a shortcut for c.translations(&#39;en&#39;))&#xA;c.unofficial_names # =&amp;gt; [&#34;United States of America&#34;, &#34;Vereinigte Staaten von Amerika&#34;, &#34;États-Unis&#34;, &#34;Estados Unidos&#34;]&#xA;&#xA;# Get the names for a country translated to its local languages&#xA;c = Country[:BE]&#xA;c.local_names # =&amp;gt; [&#34;België&#34;, &#34;Belgique&#34;, &#34;Belgien&#34;]&#xA;c.local_name # =&amp;gt; &#34;België&#34;&#xA;&#xA;# Get a specific translation&#xA;c.translation(&#39;de&#39;) # =&amp;gt; &#39;Vereinigte Staaten von Amerika&#39;&#xA;c.translations[&#39;fr&#39;] # =&amp;gt; &#34;États-Unis&#34;&#xA;&#xA;# Get all translations for a locale, defaults to &#39;en&#39;&#xA;ISO3166::Country.translations         # {&#34;DE&#34;=&amp;gt;&#34;Germany&#34;,...}&#xA;ISO3166::Country.translations(&#39;de&#39;)   # {&#34;DE&#34;=&amp;gt;&#34;Deutschland&#34;,...}&#xA;ISO3166::Country.all_translated       # [&#39;Germany&#39;, ...]&#xA;ISO3166::Country.all_translated(&#39;de&#39;) # [&#39;Deutschland&#39;, ...]&#xA;&#xA;# Nationality&#xA;c.nationality # =&amp;gt; &#34;American&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Subdivisions &amp;amp; States&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.subdivisions # =&amp;gt; {&#34;CO&#34; =&amp;gt; {&#34;name&#34; =&amp;gt; &#34;Colorado&#34;, &#34;names&#34; =&amp;gt; &#34;Colorado&#34;}, ... }&#xA;c.subdivision_types # =&amp;gt; [&#34;state&#34;, &#34;outlying_area&#34;, &#34;district&#34;]&#xA;c.subdivisions_of_types([&#39;state&#39;]) # =&amp;gt; {&#34;CO&#34; =&amp;gt; {&#34;name&#34; =&amp;gt; &#34;Colorado&#34;, &#34;names&#34; =&amp;gt; &#34;Colorado&#34;}, ... }&#xA;c.humanized_subdivision_types # =&amp;gt; [&#34;State&#34;, &#34;Outlying area&#34;, &#34;District&#34;]&#xA;&#xA;# This is now deprecated. #states is an alias of #subdivisions and returns all subdivisions regardless of type&#xA;c.states # =&amp;gt; {&#34;CO&#34; =&amp;gt; {&#34;name&#34; =&amp;gt; &#34;Colorado&#34;, &#34;names&#34; =&amp;gt; &#34;Colorado&#34;}, ... }&#xA;&#xA;&#xA;# Get specific translations for the country subdivisions&#xA;c.subdivision_names_with_codes(&#39;es&#39;) #=&amp;gt; [ ..., [&#34;Nuevo Hampshire&#34;, &#34;NH&#34;], [&#34;Nueva Jersey&#34;, &#34;NJ&#34;], ... ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Location&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.latitude # =&amp;gt; &#34;37.09024&#34;&#xA;c.longitude # =&amp;gt; &#34;-95.712891&#34;&#xA;&#xA;c.world_region # =&amp;gt; &#34;AMER&#34;&#xA;c.region # =&amp;gt; &#34;Americas&#34;&#xA;c.subregion # =&amp;gt; &#34;Northern America&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that &lt;code&gt;latitude_dec&lt;/code&gt; and &lt;code&gt;longitude_dec&lt;/code&gt; were deprecated on release 4.2 and removed in 5.0. These attributes have been redundant for several years, since the &lt;code&gt;latitude&lt;/code&gt; and &lt;code&gt;longitude&lt;/code&gt; fields have been switched decimal coordinates.&lt;/p&gt; &#xA;&lt;h3&gt;Timezones &lt;strong&gt;(optional)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;tzinfo&lt;/code&gt; to your Gemfile and ensure it&#39;s required, Countries will not do this for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;tzinfo&#39;, &#39;~&amp;gt; 1.2&#39;, &#39;&amp;gt;= 1.2.2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.timezones.zone_identifiers # =&amp;gt; [&#34;America/New_York&#34;, &#34;America/Detroit&#34;, &#34;America/Kentucky/Louisville&#34;, ...]&#xA;c.timezones.zone_info  # see [tzinfo docs](https://www.rubydoc.info/gems/tzinfo/TZInfo/CountryTimezone)&#xA;c.timezones # see [tzinfo docs](https://www.rubydoc.info/gems/tzinfo/TZInfo/Country)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Telephone Routing (E164)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.country_code # =&amp;gt; &#34;1&#34;&#xA;c.national_destination_code_lengths # =&amp;gt; 3&#xA;c.national_number_lengths # =&amp;gt; 10&#xA;c.international_prefix # =&amp;gt; &#34;011&#34;&#xA;c.national_prefix # =&amp;gt; &#34;1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Boundary Boxes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.min_longitude # =&amp;gt; &#39;45&#39;&#xA;c.min_latitude # =&amp;gt; &#39;22.166667&#39;&#xA;c.max_longitude # =&amp;gt; &#39;58&#39;&#xA;c.max_latitude # =&amp;gt; &#39;26.133333&#39;&#xA;&#xA;c.bounds #&amp;gt; {&#34;northeast&#34;=&amp;gt;{&#34;lat&#34;=&amp;gt;22.166667, &#34;lng&#34;=&amp;gt;58}, &#34;southwest&#34;=&amp;gt;{&#34;lat&#34;=&amp;gt;26.133333, &#34;lng&#34;=&amp;gt;45}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;European Union Membership&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.in_eu? # =&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;European Economic Area Membership&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.in_eea? # =&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;European Single Market Membership&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.in_esm? # =&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Country Code in Emoji&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c = Country[&#39;MY&#39;]&#xA;c.emoji_flag # =&amp;gt; &#34;🇲🇾&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plucking multiple attributes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ISO3166::Country.pluck(:alpha2, :iso_short_name) # =&amp;gt; [[&#34;AD&#34;, &#34;Andorra&#34;], [&#34;AE&#34;, &#34;United Arab Emirates&#34;], ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Currencies&lt;/h2&gt; &#xA;&lt;p&gt;To enable currencies extension please add the following to countries initializer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ISO3166.configuration.enable_currency_extension!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that it requires you to add &#34;money&#34; dependency to your gemfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;money&#34;, &#34;~&amp;gt; 6.9&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Countries now uses the &lt;a href=&#34;https://github.com/RubyMoney/money&#34;&gt;Money&lt;/a&gt; gem. What this means is you now get back a &lt;code&gt;Money::Currency&lt;/code&gt; object that gives you access to all the currency information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c = ISO3166::Country[&#39;us&#39;]&#xA;c.currency.iso_code # =&amp;gt; &#39;USD&#39;&#xA;c.currency.name # =&amp;gt; &#39;United States Dollar&#39;&#xA;c.currency.symbol # =&amp;gt; &#39;$&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Address Formatting&lt;/h2&gt; &#xA;&lt;p&gt;A template for formatting addresses is available through the address_format method. These templates are compatible with the &lt;a href=&#34;https://shopify.github.io/liquid/&#34;&gt;Liquid&lt;/a&gt; template system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c.address_format # =&amp;gt; &#34;{{recipient}}\n{{street}}\n{{city}} {{region}} {{postalcode}}\n{{country}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Selective Loading of Locales&lt;/h2&gt; &#xA;&lt;p&gt;As of 2.0 you can selectively load locales to reduce memory usage in production.&lt;/p&gt; &#xA;&lt;p&gt;By default we load &lt;code&gt;I18n.available_locales&lt;/code&gt; if I18n is present, otherwise only &lt;code&gt;[:en]&lt;/code&gt;. This means almost any Rails environment will only bring in its supported translations.&lt;/p&gt; &#xA;&lt;p&gt;You can add all the locales like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ISO3166.configure do |config|&#xA;  config.locales = [:af, :am, :ar, :as, :az, :be, :bg, :bn, :br, :bs, :ca, :cs, :cy, :da, :de, :dz, :el, :en, :eo, :es, :et, :eu, :fa, :fi, :fo, :fr, :ga, :gl, :gu, :he, :hi, :hr, :hu, :hy, :ia, :id, :is, :it, :ja, :ka, :kk, :km, :kn, :ko, :ku, :lt, :lv, :mi, :mk, :ml, :mn, :mr, :ms, :mt, :nb, :ne, :nl, :nn, :oc, :or, :pa, :pl, :ps, :pt, :ro, :ru, :rw, :si, :sk, :sl, :so, :sq, :sr, :sv, :sw, :ta, :te, :th, :ti, :tk, :tl, :tr, :tt, :ug, :uk, :ve, :vi, :wa, :wo, :xh, :zh, :zu]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or something a bit more simple&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ISO3166.configure do |config|&#xA;  config.locales = [:en, :de, :fr, :es]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you change the value of &lt;code&gt;ISO3166.configuration.locales&lt;/code&gt; after initialization, you should call &lt;code&gt;ISO3166::Data.reset&lt;/code&gt; to reset the data cache, or you may end up with inconsistently loaded locales. As of 5.1.1, subdivision translations also respect this and will only load the selected locales.&lt;/p&gt; &#xA;&lt;h2&gt;Loading Custom Data&lt;/h2&gt; &#xA;&lt;p&gt;As of 2.0 countries supports loading custom countries / overriding data in its data set, though if you choose to do this please contribute back to the upstream repo!&lt;/p&gt; &#xA;&lt;p&gt;Any country registered this way will have its data available for searching etc... If you are overriding an existing country, for cultural reasons, our code uses a simple merge, not a deep merge so you will need to &lt;strong&gt;bring in all data you wish to be available&lt;/strong&gt;. Bringing in an existing country will also remove it from the internal management of translations, &lt;strong&gt;all registered countries will remain in memory&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ISO3166::Data.register(&#xA;  alpha2: &#39;LOL&#39;,&#xA;  iso_short_name: &#39;Happy Country&#39;,&#xA;  translations: {&#xA;    &#39;en&#39; =&amp;gt; &#39;Happy Country&#39;,&#xA;    &#39;de&#39; =&amp;gt; &#39;glückliches Land&#39;&#xA;  }&#xA;)&#xA;&#xA;ISO3166::Country.new(&#39;LOL&#39;).iso_short_name == &#39;Happy Country&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mongoid&lt;/h2&gt; &#xA;&lt;p&gt;Mongoid support has been added. It is required automatically if Mongoid is defined in your project.&lt;/p&gt; &#xA;&lt;p&gt;Use native country fields in your model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;field :country, type: Country&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adds native support for searching/saving by a country object or alpha2 code.&lt;/p&gt; &#xA;&lt;p&gt;Searching:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# By alpha2&#xA;spanish_things = Things.where(country: &#39;ES&#39;)&#xA;spanish_things.first.country.iso_short_name    # =&amp;gt; &#34;Spain&#34;&#xA;&#xA;# By object&#xA;spanish_things = Things.where(country: Country.find_by_iso_short_name(&#39;Spain&#39;)[1])&#xA;spanish_things.first.country.iso_short_name    # =&amp;gt; &#34;Spain&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Saving:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# By alpha2&#xA;spanish_things = Thing.new(country: &#39;ES&#39;)&#xA;spanish_things.save!&#xA;spanish_things.country.iso_short_name    # =&amp;gt; &#34;Spain&#34;&#xA;&#xA;# By object&#xA;spanish_things = Thing.new(country: Country.find_by_iso_short_name(&#39;Spain&#39;)[1])&#xA;spanish_things.save!&#xA;spanish_things.country.iso_short_name    # =&amp;gt; &#34;Spain&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the database stores only the alpha2 code and rebuilds the object when queried. To return the country name by default you can override the reader method in your model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def country&#xA;  super.iso_short_name&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Note on Patches/Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please do not submit pull requests on &lt;code&gt;cache/**/*&lt;/code&gt;&lt;/strong&gt;. These files generated by a rake task when preparing new releases and are not meant to be manually updated.&lt;/p&gt; &#xA;&lt;p&gt;If you with to submit a PR to correct an translation, please edit the &lt;code&gt;lib/countries/data/translations/countries-&amp;lt;locale&amp;gt;.yaml&lt;/code&gt; file. Changes to the locale YAML files will be injected during the next &lt;code&gt;rake update_cache&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the project.&lt;/li&gt; &#xA; &lt;li&gt;Make your feature addition or bug fix.&lt;/li&gt; &#xA; &lt;li&gt;Add tests for it. This is important so I don&#39;t break it in a future version unintentionally.&lt;/li&gt; &#xA; &lt;li&gt;Commit, do not mess with rakefile, version, or history. (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)&lt;/li&gt; &#xA; &lt;li&gt;Make sure your you haven&#39;t made changes to &lt;code&gt;cache/**/*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request. Bonus points for topic branches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2015 hexorx &lt;br&gt; Copyright (c) 2015-2021 hexorx, rposborne &lt;br&gt; Copyright (c) 2022 hexorx, rposborne, pmor&lt;/p&gt; &#xA;&lt;p&gt;See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fxn/i-told-you-it-was-private</title>
    <updated>2022-11-06T01:40:34Z</updated>
    <id>tag:github.com,2022-11-06:/fxn/i-told-you-it-was-private</id>
    <link href="https://github.com/fxn/i-told-you-it-was-private" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;I Told You it Was Private&lt;/h1&gt; &#xA;&lt;p&gt;When you, beloved library author, remove private methods, praise and glory should come in hordes for gardening your code with such dedication and pursuit of pristine end-user interfaces and overall library perfection.&lt;/p&gt; &#xA;&lt;p&gt;What you face instead is hordes of complaints because some frickin lazy people call themselves rebels, resist any kind of authority, and have access to the source code, so to the hell with the contract, they say.&lt;/p&gt; &#xA;&lt;p&gt;Enough diplomacy, the time for punishment has arrived! This library will put those losers in their place:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class Awesome&#xA;  i_told_you_it_was_private :gone_method&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And contemplate your &lt;strong&gt;revenge&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quality Badge&lt;/h2&gt; &#xA;&lt;p&gt;This badge guarantees superior quality:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://img.shields.io/badge/wadus-chaflan-brightgreen.svg?sanitize=true&#34; alt=&#34;Superior Quality Badge&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the MIT License, Copyright (c) 2012–&lt;i&gt;ω&lt;/i&gt; Xavier Noria.&lt;/p&gt;</summary>
  </entry>
</feed>