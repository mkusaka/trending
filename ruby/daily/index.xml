<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-20T01:34:46Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>puppetlabs/puppetlabs-mysql</title>
    <updated>2024-10-20T01:34:46Z</updated>
    <id>tag:github.com,2024-10-20:/puppetlabs/puppetlabs-mysql</id>
    <link href="https://github.com/puppetlabs/puppetlabs-mysql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MySQL Puppet Module / Manifests + Types &amp; Providers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mysql&lt;/h1&gt; &#xA;&lt;h4&gt;Table of Contents&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#module-description&#34;&gt;Module Description - What the module does and why it is useful&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#setup&#34;&gt;Setup - The basics of getting started with mysql&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#beginning-with-mysql&#34;&gt;Beginning with mysql&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#usage&#34;&gt;Usage - Configuration options and additional functionality&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#customize-server-options&#34;&gt;Customize server options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#create-a-database&#34;&gt;Create a database&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#customize-configuration&#34;&gt;Customize configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#work-with-an-existing-server&#34;&gt;Work with an existing server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#specify-passwords&#34;&gt;Specify passwords&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#install-percona-server-on-centos&#34;&gt;Install Percona server on CentOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#install-mariadb-on-ubuntu&#34;&gt;Install MariaDB on Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#install-plugins&#34;&gt;Install Plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#use-percona-xtrabackup&#34;&gt;Use Percona XtraBackup&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/REFERENCE.md&#34;&gt;Reference - An under-the-hood peek at what the module is doing and how&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#limitations&#34;&gt;Limitations - OS compatibility, etc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#development&#34;&gt;Development - Guide for contributing to the module&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Module Description&lt;/h2&gt; &#xA;&lt;p&gt;The mysql module installs, configures, and manages the MySQL service.&lt;/p&gt; &#xA;&lt;p&gt;This module manages both the installation and configuration of MySQL, as well as extending Puppet to allow management of MySQL resources, such as databases, users, and grants.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Beginning with mysql&lt;/h3&gt; &#xA;&lt;p&gt;To install a server with the default options:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;include mysql::server&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To customize options, such as the root password or &lt;code&gt;/etc/my.cnf&lt;/code&gt; settings, you must also pass in an override hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class { &#39;mysql::server&#39;:&#xA;  root_password           =&amp;gt; &#39;strongpassword&#39;,&#xA;  remove_default_accounts =&amp;gt; true,&#xA;  restart                 =&amp;gt; true,&#xA;  override_options        =&amp;gt; $override_options,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nota bene: Configuration changes will only be applied to the running MySQL server if you pass true as restart to mysql::server.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#customize-server-options&#34;&gt;&lt;strong&gt;Customize Server Options&lt;/strong&gt;&lt;/a&gt; below for examples of the hash structure for $override_options.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;All interaction for the server is done via &lt;code&gt;mysql::server&lt;/code&gt;. To install the client, use &lt;code&gt;mysql::client&lt;/code&gt;. To install bindings, use &lt;code&gt;mysql::bindings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Customize server options&lt;/h3&gt; &#xA;&lt;p&gt;To define server options, structure a hash structure of overrides in &lt;code&gt;mysql::server&lt;/code&gt;. This hash resembles a hash in the my.cnf file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;$override_options = {&#xA;  &#39;section&#39; =&amp;gt; {&#xA;    &#39;item&#39; =&amp;gt; &#39;thing&#39;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For options that you would traditionally represent in this format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[section]&#xA;thing = X&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Entries can be created as &lt;code&gt;thing =&amp;gt; true&lt;/code&gt;, &lt;code&gt;thing =&amp;gt; value&lt;/code&gt;, or &lt;code&gt;thing =&amp;gt; &#34;&#34;&lt;/code&gt; in the hash. Alternatively, you can pass an array as &lt;code&gt;thing =&amp;gt; [&#39;value&#39;, &#39;value2&#39;]&lt;/code&gt; or list each &lt;code&gt;thing =&amp;gt; value&lt;/code&gt; separately on individual lines.&lt;/p&gt; &#xA;&lt;p&gt;You can pass a variable in the hash without setting a value for it; the variable would then use MySQL&#39;s default settings. To exclude an option from the &lt;code&gt;my.cnf&lt;/code&gt; file --- for example, when using &lt;code&gt;override_options&lt;/code&gt; to revert to a default value --- pass &lt;code&gt;thing =&amp;gt; undef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If an option needs multiple instances, pass an array. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;$override_options = {&#xA;  &#39;mysqld&#39; =&amp;gt; {&#xA;    &#39;replicate-do-db&#39; =&amp;gt; [&#39;base1&#39;, &#39;base2&#39;],&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;produces&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[mysqld]&#xA;replicate-do-db = base1&#xA;replicate-do-db = base2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To implement version specific parameters, specify the version, such as [mysqld-5.5]. This allows one config for different versions of MySQL.&lt;/p&gt; &#xA;&lt;p&gt;If you donâ€™t want to use the default configuration, you can also supply your options to the &lt;code&gt;$options&lt;/code&gt; parameter instead of &lt;code&gt;$override_options&lt;/code&gt;. Please note that &lt;code&gt;$options&lt;/code&gt; and &lt;code&gt;$override_options&lt;/code&gt; are mutually exclusive, you can only use one of them.&lt;/p&gt; &#xA;&lt;p&gt;By default, the puppet won&#39;t reload/restart mysqld when you change an existing configuration. If you want to do that, you can set &lt;code&gt;mysql::server::reload_on_config_change&lt;/code&gt; to true.&lt;/p&gt; &#xA;&lt;h3&gt;Create a database&lt;/h3&gt; &#xA;&lt;p&gt;To create a database with a user and some assigned privileges:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;mysql::db { &#39;mydb&#39;:&#xA;  user     =&amp;gt; &#39;myuser&#39;,&#xA;  password =&amp;gt; &#39;mypass&#39;,&#xA;  host     =&amp;gt; &#39;localhost&#39;,&#xA;  grant    =&amp;gt; [&#39;SELECT&#39;, &#39;UPDATE&#39;],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a different resource name with exported resources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt; @@mysql::db { &#34;mydb_${fqdn}&#34;:&#xA;  user     =&amp;gt; &#39;myuser&#39;,&#xA;  password =&amp;gt; &#39;mypass&#39;,&#xA;  dbname   =&amp;gt; &#39;mydb&#39;,&#xA;  host     =&amp;gt; ${fqdn},&#xA;  grant    =&amp;gt; [&#39;SELECT&#39;, &#39;UPDATE&#39;],&#xA;  tag      =&amp;gt; $domain,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can collect it on the remote DB server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;Mysql::Db &amp;lt;&amp;lt;| tag == $domain |&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you set the sql parameter to a file when creating a database, the file is imported into the new database.&lt;/p&gt; &#xA;&lt;p&gt;For large sql files, increase the &lt;code&gt;import_timeout&lt;/code&gt; parameter, which defaults to 300 seconds.&lt;/p&gt; &#xA;&lt;p&gt;If you have installed the mysql client in a non standard bin/sbin path you can set this with &lt;code&gt;mysql_exec_path&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;mysql::db { &#39;mydb&#39;:&#xA;  user            =&amp;gt; &#39;myuser&#39;,&#xA;  password        =&amp;gt; &#39;mypass&#39;,&#xA;  host            =&amp;gt; &#39;localhost&#39;,&#xA;  grant           =&amp;gt; [&#39;SELECT&#39;, &#39;UPDATE&#39;],&#xA;  sql             =&amp;gt; [&#39;/path/to/sqlfile.gz&#39;],&#xA;  import_cat_cmd  =&amp;gt; &#39;zcat&#39;,&#xA;  import_timeout  =&amp;gt; 900,&#xA;  mysql_exec_path =&amp;gt; &#39;/opt/rh/rh-myql57/root/bin&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize configuration&lt;/h3&gt; &#xA;&lt;p&gt;To add custom MySQL configuration, place additional files into &lt;code&gt;includedir&lt;/code&gt;. This allows you to override settings or add additional ones, which is helpful if you don&#39;t use &lt;code&gt;override_options&lt;/code&gt; in &lt;code&gt;mysql::server&lt;/code&gt;. The &lt;code&gt;includedir&lt;/code&gt; location is by default set to &lt;code&gt;/etc/mysql/conf.d&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Managing Root Passwords&lt;/h3&gt; &#xA;&lt;p&gt;If you want the password managed by puppet for &lt;code&gt;127.0.0.1&lt;/code&gt; and &lt;code&gt;::1&lt;/code&gt; as an end user you would need to explicitly manage them with additional manifest entries. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;mysql_user { &#39;[root@127.0.0.1]&#39;:&#xA;  ensure        =&amp;gt; present,&#xA;  password_hash =&amp;gt; mysql::password($mysql::server::root_password),&#xA;}&#xA;&#xA;mysql_user { &#39;root@::1&#39;:&#xA;  ensure        =&amp;gt; present,&#xA;  password_hash =&amp;gt; mysql::password($mysql::server::root_password),&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This module is not designed to carry out additional DNS and aliasing.&lt;/p&gt; &#xA;&lt;h3&gt;Work with an existing server&lt;/h3&gt; &#xA;&lt;p&gt;To instantiate databases and users on an existing MySQL server, you need a &lt;code&gt;.my.cnf&lt;/code&gt; file in &lt;code&gt;root&lt;/code&gt;&#39;s home directory. This file must specify the remote server address and credentials. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[client]&#xA;user=root&#xA;host=localhost&#xA;password=secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module uses the &lt;code&gt;mysqld_version&lt;/code&gt; fact to discover the server version being used. By default, this is set to the output of &lt;code&gt;mysqld -V&lt;/code&gt;. If you&#39;re working with a remote MySQL server, you may need to set a custom fact for &lt;code&gt;mysqld_version&lt;/code&gt; to ensure correct behaviour.&lt;/p&gt; &#xA;&lt;p&gt;When working with a remote server, do &lt;em&gt;not&lt;/em&gt; use the &lt;code&gt;mysql::server&lt;/code&gt; class in your Puppet manifests.&lt;/p&gt; &#xA;&lt;h3&gt;Specify passwords&lt;/h3&gt; &#xA;&lt;p&gt;In addition to passing passwords as plain text, you can input them as hashes. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;mysql::db { &#39;mydb&#39;:&#xA;  user     =&amp;gt; &#39;myuser&#39;,&#xA;  password =&amp;gt; &#39;*6C8989366EAF75BB670AD8EA7A7FC1176A95CEF4&#39;,&#xA;  host     =&amp;gt; &#39;localhost&#39;,&#xA;  grant    =&amp;gt; [&#39;SELECT&#39;, &#39;UPDATE&#39;],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If required, the password can also be an empty string to allow connections without an password.&lt;/p&gt; &#xA;&lt;h3&gt;Create login paths&lt;/h3&gt; &#xA;&lt;p&gt;This feature works only for the MySQL Community Edition &amp;gt;= 5.6.6.&lt;/p&gt; &#xA;&lt;p&gt;A login path is a set of options (host, user, password, port and socket) that specify which MySQL server to connect to and which account to authenticate as. The authentication credentials and the other options are stored in an encrypted login file named .mylogin.cnf typically under the users home directory.&lt;/p&gt; &#xA;&lt;p&gt;More information about MySQL login paths: &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/mysql-config-editor.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/mysql-config-editor.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some example for login paths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;mysql_login_path { &#39;client&#39;:&#xA;  owner    =&amp;gt; root,&#xA;  host     =&amp;gt; &#39;localhost&#39;,&#xA;  user     =&amp;gt; &#39;root&#39;,&#xA;  password =&amp;gt; Sensitive(&#39;secure&#39;),&#xA;  socket   =&amp;gt; &#39;/var/run/mysqld/mysqld.sock&#39;,&#xA;  ensure   =&amp;gt; present,&#xA;}&#xA;&#xA;mysql_login_path { &#39;remote_db&#39;:&#xA;  owner    =&amp;gt; root,&#xA;  host     =&amp;gt; &#39;10.0.0.1&#39;,&#xA;  user     =&amp;gt; &#39;network&#39;,&#xA;  password =&amp;gt; Sensitive(&#39;secure&#39;),&#xA;  port     =&amp;gt; 3306,&#xA;  ensure   =&amp;gt; present,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See examples/mysql_login_path.pp for further examples.&lt;/p&gt; &#xA;&lt;h3&gt;Install Percona server on CentOS&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how to do a minimal installation of a Percona server on a CentOS system. This sets up the Percona server, client, and bindings (including Perl and Python bindings). You can customize this usage and update the version as needed.&lt;/p&gt; &#xA;&lt;p&gt;This usage has been tested on Puppet 4.4, 5.5 and 6.3.0 / CentOS 7 / Percona Server 5.7.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The installation of the yum repository is not part of this package and is here only to show a full example of how you can install.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;yumrepo { &#39;percona&#39;:&#xA;  descr    =&amp;gt; &#39;CentOS $releasever - Percona&#39;,&#xA;  baseurl  =&amp;gt; &#39;http://repo.percona.com/percona/yum/release/$releasever/RPMS/$basearch&#39;,&#xA;  gpgkey   =&amp;gt; &#39;https://repo.percona.com/yum/PERCONA-PACKAGING-KEY&#39;,&#xA;  enabled  =&amp;gt; 1,&#xA;  gpgcheck =&amp;gt; 1,&#xA;}&#xA;&#xA;class { &#39;mysql::server&#39;:&#xA;  package_name     =&amp;gt; &#39;Percona-Server-server-57&#39;,&#xA;  service_name     =&amp;gt; &#39;mysql&#39;,&#xA;  config_file      =&amp;gt; &#39;/etc/my.cnf&#39;,&#xA;  includedir       =&amp;gt; &#39;/etc/my.cnf.d&#39;,&#xA;  root_password    =&amp;gt; &#39;PutYourOwnPwdHere&#39;,&#xA;  override_options =&amp;gt; {&#xA;    mysqld =&amp;gt; {&#xA;      log-error =&amp;gt; &#39;/var/log/mysqld.log&#39;,&#xA;      pid-file  =&amp;gt; &#39;/var/run/mysqld/mysqld.pid&#39;,&#xA;    },&#xA;    mysqld_safe =&amp;gt; {&#xA;      log-error =&amp;gt; &#39;/var/log/mysqld.log&#39;,&#xA;    },&#xA;  },&#xA;}&#xA;&#xA;# Note: Installing Percona-Server-server-57 also installs Percona-Server-client-57.&#xA;# This shows how to install the Percona MySQL client on its own&#xA;class { &#39;mysql::client&#39;:&#xA;  package_name =&amp;gt; &#39;Percona-Server-client-57&#39;,&#xA;}&#xA;&#xA;# These packages are normally installed along with Percona-Server-server-57&#xA;# If you needed to install the bindings, however, you could do so with this code&#xA;class { &#39;mysql::bindings&#39;:&#xA;  client_dev_package_name =&amp;gt; &#39;Percona-Server-shared-57&#39;,&#xA;  client_dev              =&amp;gt; true,&#xA;  daemon_dev_package_name =&amp;gt; &#39;Percona-Server-devel-57&#39;,&#xA;  daemon_dev              =&amp;gt; true,&#xA;  perl_enable             =&amp;gt; true,&#xA;  perl_package_name       =&amp;gt; &#39;perl-DBD-MySQL&#39;,&#xA;  python_enable           =&amp;gt; true,&#xA;  python_package_name     =&amp;gt; &#39;MySQL-python&#39;,&#xA;}&#xA;&#xA;# Dependencies definition&#xA;Yumrepo[&#39;percona&#39;]-&amp;gt;&#xA;Class[&#39;mysql::server&#39;]&#xA;&#xA;Yumrepo[&#39;percona&#39;]-&amp;gt;&#xA;Class[&#39;mysql::client&#39;]&#xA;&#xA;Yumrepo[&#39;percona&#39;]-&amp;gt;&#xA;Class[&#39;mysql::bindings&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install MariaDB on Ubuntu&lt;/h3&gt; &#xA;&lt;h4&gt;Optional: Install the MariaDB official repo&lt;/h4&gt; &#xA;&lt;p&gt;In this example, we&#39;ll use the latest stable (currently 10.3) from the official MariaDB repository, not the one from the distro repository. You could instead use the package from the Ubuntu repository. Make sure you use the repository corresponding to the version you want.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;sfo1.mirrors.digitalocean.com&lt;/code&gt; is one of many mirrors available. You can use any official mirror.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;include apt&#xA;&#xA;apt::source { &#39;mariadb&#39;:&#xA;  location =&amp;gt; &#39;http://sfo1.mirrors.digitalocean.com/mariadb/repo/10.3/ubuntu&#39;,&#xA;  release  =&amp;gt; $::facts[&#39;os&#39;][&#39;codename&#39;],&#xA;  repos    =&amp;gt; &#39;main&#39;,&#xA;  key      =&amp;gt; {&#xA;    id     =&amp;gt; &#39;177F4010FE56CA3336300305F1656F24C74CD1D8&#39;,&#xA;    server =&amp;gt; &#39;hkp://keyserver.ubuntu.com:80&#39;,&#xA;  },&#xA;  include =&amp;gt; {&#xA;    src   =&amp;gt; false,&#xA;    deb   =&amp;gt; true,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install the MariaDB server&lt;/h4&gt; &#xA;&lt;p&gt;This example shows MariaDB server installation on Ubuntu Xenial. Adjust the version and the parameters of &lt;code&gt;my.cnf&lt;/code&gt; as needed. All parameters of the &lt;code&gt;my.cnf&lt;/code&gt; can be defined using the &lt;code&gt;override_options&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;The folders &lt;code&gt;/var/log/mysql&lt;/code&gt; and &lt;code&gt;/var/run/mysqld&lt;/code&gt; are created automatically, but if you are using other custom folders, they should exist as prerequisites for this code.&lt;/p&gt; &#xA;&lt;p&gt;All the values set here are an example of a working minimal configuration.&lt;/p&gt; &#xA;&lt;p&gt;Specify the version of the package you want with the &lt;code&gt;package_ensure&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class { &#39;mysql::server&#39;:&#xA;  package_name     =&amp;gt; &#39;mariadb-server&#39;,&#xA;  package_ensure   =&amp;gt; &#39;1:10.3.21+maria~xenial&#39;,&#xA;  service_name     =&amp;gt; &#39;mysqld&#39;,&#xA;  root_password    =&amp;gt; &#39;AVeryStrongPasswordUShouldEncrypt!&#39;,&#xA;  override_options =&amp;gt; {&#xA;    mysqld =&amp;gt; {&#xA;      &#39;log-error&#39; =&amp;gt; &#39;/var/log/mysql/mariadb.log&#39;,&#xA;      &#39;pid-file&#39;  =&amp;gt; &#39;/var/run/mysqld/mysqld.pid&#39;,&#xA;    },&#xA;    mysqld_safe =&amp;gt; {&#xA;      &#39;log-error&#39; =&amp;gt; &#39;/var/log/mysql/mariadb.log&#39;,&#xA;    },&#xA;  },&#xA;}&#xA;&#xA;# Dependency management. Only use that part if you are installing the repository&#xA;# as shown in the Preliminary step of this example.&#xA;Apt::Source[&#39;mariadb&#39;] ~&amp;gt;&#xA;Class[&#39;apt::update&#39;] -&amp;gt;&#xA;Class[&#39;mysql::server&#39;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install the MariaDB client&lt;/h4&gt; &#xA;&lt;p&gt;This example shows how to install the MariaDB client and all of the bindings at once. You can do this installation separately from the server installation.&lt;/p&gt; &#xA;&lt;p&gt;Specify the version of the package you want with the &lt;code&gt;package_ensure&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class { &#39;mysql::client&#39;:&#xA;  package_name    =&amp;gt; &#39;mariadb-client&#39;,&#xA;  package_ensure  =&amp;gt; &#39;1:10.3.21+maria~xenial&#39;,&#xA;  bindings_enable =&amp;gt; true,&#xA;}&#xA;&#xA;# Dependency management. Only use that part if you are installing the repository as shown in the Preliminary step of this example.&#xA;Apt::Source[&#39;mariadb&#39;] ~&amp;gt;&#xA;Class[&#39;apt::update&#39;] -&amp;gt;&#xA;Class[&#39;mysql::client&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install MySQL Community server on CentOS&lt;/h3&gt; &#xA;&lt;p&gt;You can install MySQL Community Server on CentOS using the mysql module and Hiera. This example was tested with the following versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MySQL Community Server 5.6&lt;/li&gt; &#xA; &lt;li&gt;Centos 7.3&lt;/li&gt; &#xA; &lt;li&gt;Puppet 3.8.7 using Hiera&lt;/li&gt; &#xA; &lt;li&gt;puppetlabs-mysql module v3.9.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In Puppet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;include mysql::server&#xA;&#xA;create_resources(yumrepo, hiera(&#39;yumrepo&#39;, {}))&#xA;&#xA;Yumrepo[&#39;repo.mysql.com&#39;] -&amp;gt; Anchor[&#39;mysql::server::start&#39;]&#xA;Yumrepo[&#39;repo.mysql.com&#39;] -&amp;gt; Package[&#39;mysql_client&#39;]&#xA;&#xA;create_resources(mysql::db, hiera(&#39;mysql::server::db&#39;, {}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Hiera:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;&#xA;# Centos 7.3&#xA;yumrepo:&#xA;  &#39;repo.mysql.com&#39;:&#xA;    baseurl: &#34;http://repo.mysql.com/yum/mysql-5.6-community/el/%{::operatingsystemmajrelease}/$basearch/&#34;&#xA;    descr: &#39;repo.mysql.com&#39;&#xA;    enabled: 1&#xA;    gpgcheck: true&#xA;    gpgkey: &#39;http://repo.mysql.com/RPM-GPG-KEY-mysql&#39;&#xA;&#xA;mysql::client::package_name: &#34;mysql-community-client&#34; # required for proper MySQL installation&#xA;mysql::server::package_name: &#34;mysql-community-server&#34; # required for proper MySQL installation&#xA;mysql::server::package_ensure: &#39;installed&#39; # do not specify version here, unfortunately yum fails with error that package is already installed&#xA;mysql::server::root_password: &#34;change_me_i_am_insecure&#34;&#xA;mysql::server::manage_config_file: true&#xA;mysql::server::service_name: &#39;mysqld&#39; # required for puppet module&#xA;mysql::server::override_options:&#xA;  &#39;mysqld&#39;:&#xA;    &#39;bind-address&#39;: &#39;127.0.0.1&#39;&#xA;    &#39;log-error&#39;: &#39;/var/log/mysqld.log&#39; # required for proper MySQL installation&#xA;  &#39;mysqld_safe&#39;:&#xA;    &#39;log-error&#39;: &#39;/var/log/mysqld.log&#39;  # required for proper MySQL installation&#xA;&#xA;# create database + account with access, passwords are not encrypted&#xA;mysql::server::db:&#xA;  &#34;dev&#34;:&#xA;    user: &#34;dev&#34;&#xA;    password: &#34;devpass&#34;&#xA;    host: &#34;127.0.0.1&#34;&#xA;    grant:&#xA;      - &#34;ALL&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Plugins can be installed by using the &lt;code&gt;mysql_plugin&lt;/code&gt; defined type. See &lt;code&gt;examples/mysql_plugin.pp&lt;/code&gt; for futher examples.&lt;/p&gt; &#xA;&lt;h3&gt;Use Percona XtraBackup&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how to configure MySQL backups with Percona XtraBackup. This sets up a weekly cronjob to perform a full backup and additional daily cronjobs for incremental backups. Each backup will create a new directory. A cleanup job will automatically remove backups that are older than 15 days.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;yumrepo { &#39;percona&#39;:&#xA;  descr    =&amp;gt; &#39;CentOS $releasever - Percona&#39;,&#xA;  baseurl  =&amp;gt; &#39;http://repo.percona.com/release/$releasever/RPMS/$basearch&#39;,&#xA;  gpgkey   =&amp;gt; &#39;https://www.percona.com/downloads/RPM-GPG-KEY-percona https://repo.percona.com/yum/PERCONA-PACKAGING-KEY&#39;,&#xA;  enabled  =&amp;gt; 1,&#xA;  gpgcheck =&amp;gt; 1,&#xA;}&#xA;&#xA;class { &#39;mysql::server::backup&#39;:&#xA;  backupuser        =&amp;gt; &#39;myuser&#39;,&#xA;  backuppassword    =&amp;gt; &#39;mypassword&#39;,&#xA;  backupdir         =&amp;gt; &#39;/tmp/backups&#39;,&#xA;  provider          =&amp;gt; &#39;xtrabackup&#39;,&#xA;  backuprotate      =&amp;gt; 15,&#xA;  execpath          =&amp;gt; &#39;/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin&#39;,&#xA;  time              =&amp;gt; [&#39;23&#39;, &#39;15&#39;],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the daily or weekly backup was successful, then the empty file &lt;code&gt;/tmp/mysqlbackup_success&lt;/code&gt; is created, which makes it easy to monitor the status of the database backup.&lt;/p&gt; &#xA;&lt;p&gt;After two weeks the backup directory should look similar to the example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/tmp/backups/2019-11-10_full&#xA;/tmp/backups/2019-11-11_23-15-01&#xA;/tmp/backups/2019-11-13_23-15-01&#xA;/tmp/backups/2019-11-13_23-15-02&#xA;/tmp/backups/2019-11-14_23-15-01&#xA;/tmp/backups/2019-11-15_23-15-02&#xA;/tmp/backups/2019-11-16_23-15-01&#xA;/tmp/backups/2019-11-17_full&#xA;/tmp/backups/2019-11-18_23-15-01&#xA;/tmp/backups/2019-11-19_23-15-01&#xA;/tmp/backups/2019-11-20_23-15-02&#xA;/tmp/backups/2019-11-21_23-15-01&#xA;/tmp/backups/2019-11-22_23-15-02&#xA;/tmp/backups/2019-11-23_23-15-01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A drawback of using incremental backups is the need to keep at least 7 days of backups, otherwise the full backups is removed early and consecutive incremental backups will fail. Furthermore an incremental backups becomes obsolete once the required full backup was removed.&lt;/p&gt; &#xA;&lt;p&gt;The next example uses XtraBackup with incremental backups disabled. In this case the daily cronjob will always perform a full backup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class { &#39;mysql::server::backup&#39;:&#xA;  backupuser          =&amp;gt; &#39;myuser&#39;,&#xA;  backuppassword      =&amp;gt; &#39;mypassword&#39;,&#xA;  backupdir           =&amp;gt; &#39;/tmp/backups&#39;,&#xA;  provider            =&amp;gt; &#39;xtrabackup&#39;,&#xA;  incremental_backups =&amp;gt; false,&#xA;  backuprotate        =&amp;gt; 5,&#xA;  execpath            =&amp;gt; &#39;/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin&#39;,&#xA;  time                =&amp;gt; [&#39;23&#39;, &#39;15&#39;],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The next example shows how to use mariabackup (a fork of xtrabackup) as a backup provider. Note that on most Linux/BSD distributions, this will require setting &lt;code&gt;backupmethod_package =&amp;gt; &#39;mariadb-backup&#39;&lt;/code&gt; in the &lt;code&gt;mysql::server::backup&lt;/code&gt; declaration in order to override the default xtrabackup package (&lt;code&gt;percona-xtrabackup&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class { &#39;mysql::server&#39;:&#xA;  package_name            =&amp;gt; &#39;mariadb-server&#39;,&#xA;  package_ensure          =&amp;gt; &#39;1:10.3.21+maria~xenial&#39;,&#xA;  service_name            =&amp;gt; &#39;mysqld&#39;,&#xA;  root_password           =&amp;gt; &#39;AVeryStrongPasswordUShouldEncrypt!&#39;,&#xA;}&#xA;&#xA;class { &#39;mysql::server::backup&#39;:&#xA;  backupuser              =&amp;gt; &#39;mariabackup&#39;,&#xA;  backuppassword          =&amp;gt; &#39;AVeryStrongPasswordUShouldEncrypt!&#39;,&#xA;  provider                =&amp;gt; &#39;xtrabackup&#39;,&#xA;  backupmethod            =&amp;gt; &#39;mariabackup&#39;,&#xA;  backupmethod_package    =&amp;gt; &#39;mariadb-backup&#39;,&#xA;  backupdir               =&amp;gt; &#39;/tmp/backups&#39;,&#xA;  backuprotate            =&amp;gt; 15,&#xA;  execpath                =&amp;gt; &#39;/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin&#39;,&#xA;  time                    =&amp;gt; [&#39;23&#39;, &#39;15&#39;],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Classes&lt;/h3&gt; &#xA;&lt;h4&gt;Public classes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#mysqlserver&#34;&gt;&lt;code&gt;mysql::server&lt;/code&gt;&lt;/a&gt;: Installs and configures MySQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#mysqlserverbackup&#34;&gt;&lt;code&gt;mysql::server::backup&lt;/code&gt;&lt;/a&gt;: Sets up MySQL backups via cron.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#mysqlbindings&#34;&gt;&lt;code&gt;mysql::bindings&lt;/code&gt;&lt;/a&gt;: Installs various MySQL language bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puppetlabs/puppetlabs-mysql/main/#mysqlclient&#34;&gt;&lt;code&gt;mysql::client&lt;/code&gt;&lt;/a&gt;: Installs MySQL client (for non-servers).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Private classes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::server::install&lt;/code&gt;: Installs packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::server::installdb&lt;/code&gt;: Implements setup of mysqld data directory (e.g. /var/lib/mysql)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::server::config&lt;/code&gt;: Configures MYSQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::server::service&lt;/code&gt;: Manages service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::server::account_security&lt;/code&gt;: Deletes default MySQL accounts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::server::root_password&lt;/code&gt;: Sets MySQL root password.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::server::providers&lt;/code&gt;: Creates users, grants, and databases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::bindings::client_dev&lt;/code&gt;: Installs MySQL client development package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::bindings::daemon_dev&lt;/code&gt;: Installs MySQL daemon development package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::bindings::java&lt;/code&gt;: Installs Java bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::bindings::perl&lt;/code&gt;: Installs Perl bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::bindings::php&lt;/code&gt;: Installs PHP bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::bindings::python&lt;/code&gt;: Installs Python bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::bindings::ruby&lt;/code&gt;: Installs Ruby bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::client::install&lt;/code&gt;: Installs MySQL client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::backup::mysqldump&lt;/code&gt;: Implements mysqldump backups.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::backup::mysqlbackup&lt;/code&gt;: Implements backups with Oracle MySQL Enterprise Backup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql::backup::xtrabackup&lt;/code&gt;: Implements backups with XtraBackup from Percona or Mariabackup.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;h4&gt;mysql::server&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;create_root_user&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether root user should be created.&lt;/p&gt; &#xA;&lt;p&gt;Valid values are &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is useful for a cluster setup with Galera. The root user has to be created only once. You can set this parameter true on one node and set it to false on the remaining nodes.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;create_root_my_cnf&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether to create &lt;code&gt;/root/.my.cnf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Valid values are &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;create_root_my_cnf&lt;/code&gt; allows creation of &lt;code&gt;/root/.my.cnf&lt;/code&gt; independently of &lt;code&gt;create_root_user&lt;/code&gt;. You can use this for a cluster setup with Galera where you want &lt;code&gt;/root/.my.cnf&lt;/code&gt; to exist on all nodes.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;root_password&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The MySQL root password. Puppet attempts to set the root password and update &lt;code&gt;/root/.my.cnf&lt;/code&gt; with it.&lt;/p&gt; &#xA;&lt;p&gt;This is required if &lt;code&gt;create_root_user&lt;/code&gt; or &lt;code&gt;create_root_my_cnf&lt;/code&gt; are true. If &lt;code&gt;root_password&lt;/code&gt; is &#39;UNSET&#39;, then &lt;code&gt;create_root_user&lt;/code&gt; and &lt;code&gt;create_root_my_cnf&lt;/code&gt; are assumed to be false --- that is, the MySQL root user and &lt;code&gt;/root/.my.cnf&lt;/code&gt; are not created.&lt;/p&gt; &#xA;&lt;p&gt;Password changes are supported; however, the old password must be set in &lt;code&gt;/root/.my.cnf&lt;/code&gt;. Effectively, Puppet uses the old password, configured in &lt;code&gt;/root/my.cnf&lt;/code&gt;, to set the new password in MySQL, and then updates &lt;code&gt;/root/.my.cnf&lt;/code&gt; with the new password.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;old_root_password&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This parameter no longer does anything. It exists only for backwards compatibility. See the &lt;code&gt;root_password&lt;/code&gt; parameter above for details on changing the root password.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;create_root_login_file&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether to create &lt;code&gt;/root/.mylogin.cnf&lt;/code&gt; when using mysql 5.6.6+.&lt;/p&gt; &#xA;&lt;p&gt;Valid values are &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;create_root_login_file&lt;/code&gt; will put a copy of your existing &lt;code&gt;.mylogin.cnf&lt;/code&gt; in the &lt;code&gt;/root/.mylogin.cnf&lt;/code&gt; location.&lt;/p&gt; &#xA;&lt;p&gt;When set to &#39;true&#39;, this option also requires the &lt;code&gt;login_file&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;login_file&lt;/code&gt; option is required when set to true.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;login_file&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Whether to put the &lt;code&gt;/root/.mylogin.cnf&lt;/code&gt; in place.&lt;/p&gt; &#xA;&lt;p&gt;You need to create the &lt;code&gt;.mylogin.cnf&lt;/code&gt; file with &lt;code&gt;mysql_config_editor&lt;/code&gt;, this tool comes with mysql 5.6.6+.&lt;/p&gt; &#xA;&lt;p&gt;The created .mylogin.cnf needs to be put under files in your module, see example below on how to use this.&lt;/p&gt; &#xA;&lt;p&gt;When the &lt;code&gt;/root/.mylogin.cnf&lt;/code&gt; exists the environment variable &lt;code&gt;MYSQL_TEST_LOGIN_FILE&lt;/code&gt; will be set.&lt;/p&gt; &#xA;&lt;p&gt;This is required if &lt;code&gt;create_root_user&lt;/code&gt; and &lt;code&gt;create_root_login_file&lt;/code&gt; are true. If &lt;code&gt;root_password&lt;/code&gt; is &#39;UNSET&#39;, then &lt;code&gt;create_root_user&lt;/code&gt; and &lt;code&gt;create_root_login_file&lt;/code&gt; are assumed to be false --- that is, the MySQL root user and &lt;code&gt;/root/.mylogin.cnf&lt;/code&gt; are not created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class { &#39;mysql::server&#39;:&#xA;  root_password          =&amp;gt; &#39;password&#39;,&#xA;  create_root_my_cnf     =&amp;gt; false,&#xA;  create_root_login_file =&amp;gt; true,&#xA;  login_file             =&amp;gt; &#39;puppet:///modules/${module_name}/mylogin.cnf&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;override_options&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Specifies override options to pass into MySQL. Structured like a hash in the my.cnf file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;class { &#39;mysql::server&#39;:&#xA;  root_password =&amp;gt; &#39;password&#39;&#xA;}&#xA;&#xA;mysql_plugin { &#39;auth_pam&#39;:&#xA;  ensure =&amp;gt; present,&#xA;  soname =&amp;gt; &#39;auth_pam.so&#39;,&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tasks&lt;/h3&gt; &#xA;&lt;p&gt;The MySQL module has an example task that allows a user to execute arbitary SQL against a database. Please refer to to the &lt;a href=&#34;https://puppet.com/docs/pe/2017.3/orchestrator/running_tasks.html&#34;&gt;PE documentation&lt;/a&gt; or &lt;a href=&#34;https://puppet.com/docs/bolt/latest/bolt.html&#34;&gt;Bolt documentation&lt;/a&gt; on how to execute a task.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;This module lacks compatibility with the ARM architecture, for an extensive list of supported operating systems, see &lt;a href=&#34;https://github.com/puppetlabs/puppetlabs-mysql/raw/main/metadata.json&#34;&gt;metadata.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The mysqlbackup.sh does not work and is not supported on MySQL 5.7 and greater.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This codebase is licensed under the Apache2.0 licensing, however due to the nature of the codebase the open source dependencies may also use a combination of &lt;a href=&#34;https://opensource.org/license/agpl-v3/&#34;&gt;AGPL&lt;/a&gt;, &lt;a href=&#34;https://opensource.org/license/bsd-2-clause/&#34;&gt;BSD-2&lt;/a&gt;, &lt;a href=&#34;https://opensource.org/license/bsd-3-clause/&#34;&gt;BSD-3&lt;/a&gt;, &lt;a href=&#34;https://opensource.org/license/gpl-2-0/&#34;&gt;GPL2.0&lt;/a&gt;, &lt;a href=&#34;https://opensource.org/license/lgpl-3-0/&#34;&gt;LGPL&lt;/a&gt;, &lt;a href=&#34;https://opensource.org/license/mit/&#34;&gt;MIT&lt;/a&gt; and &lt;a href=&#34;https://opensource.org/license/mpl-2-0/&#34;&gt;MPL&lt;/a&gt; Licensing.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;We are experimenting with a new tool for running acceptance tests. Its name is &lt;a href=&#34;https://github.com/puppetlabs/puppet_litmus&#34;&gt;puppet_litmus&lt;/a&gt; this replaces beaker as the test runner. To run the acceptance tests follow the &lt;a href=&#34;https://puppetlabs.github.io/litmus/Running-acceptance-tests.html&#34;&gt;instructions&lt;/a&gt; from the Litmus documentation.&lt;/p&gt; &#xA;&lt;p&gt;Puppet modules on the Puppet Forge are open projects, and community contributions are essential for keeping them great. We can&#39;t access the huge number of platforms and myriad of hardware, software, and deployment configurations that Puppet is intended to serve.&lt;/p&gt; &#xA;&lt;p&gt;We want to keep it as easy as possible to contribute changes so that our modules work in your environment. There are a few guidelines that we need contributors to follow so that we can have a chance of keeping on top of things.&lt;/p&gt; &#xA;&lt;p&gt;Check out our the complete &lt;a href=&#34;https://puppet.com/docs/puppet/latest/contributing.html&#34;&gt;module contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Authors&lt;/h3&gt; &#xA;&lt;p&gt;This module is based on work by David Schmitt. Thank you to all of our &lt;a href=&#34;https://github.com/puppetlabs/puppetlabs-mysql/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>