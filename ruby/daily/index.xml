<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-25T01:37:11Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sstephenson/global_phone</title>
    <updated>2025-03-25T01:37:11Z</updated>
    <id>tag:github.com,2025-03-25:/sstephenson/global_phone</id>
    <link href="https://github.com/sstephenson/global_phone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parse, validate, and format phone numbers in Ruby using Google&#39;s libphonenumber database&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GlobalPhone&lt;/h1&gt; &#xA;&lt;p&gt;GlobalPhone parses, validates, and formats local and international phone numbers according to the &lt;a href=&#34;http://en.wikipedia.org/wiki/E.164&#34;&gt;E.164 standard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Store and display phone numbers in your app.&lt;/strong&gt; Accept phone number input in national or international format. Convert phone numbers to international strings (&lt;code&gt;+13125551212&lt;/code&gt;) for storage and retrieval. Present numbers in national format (&lt;code&gt;(312) 555-1212&lt;/code&gt;) in your UI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Designed with the future in mind.&lt;/strong&gt; GlobalPhone uses format specifications from Google&#39;s open-source &lt;a href=&#34;https://github.com/googlei18n/libphonenumber&#34;&gt;libphonenumber&lt;/a&gt; database. No need to upgrade the library when a new phone format is introduced—just generate a new copy of the database and check it into your app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pure Ruby. No dependencies.&lt;/strong&gt; GlobalPhone is designed for Ruby 1.9.3 and up. (Works in 1.8.7, too—just bring your own &lt;code&gt;json&lt;/code&gt; gem.)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;global_phone&lt;/code&gt; gem to your app. For example, using Bundler:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ echo &#34;gem &#39;global_phone&#39;&#34; &amp;gt;&amp;gt; Gemfile&#xA; $ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;global_phone_dbgen&lt;/code&gt; to convert Google&#39;s libphonenumber &lt;code&gt;PhoneNumberMetaData.xml&lt;/code&gt; file into a JSON database for GlobalPhone.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ gem install global_phone_dbgen&#xA; $ global_phone_dbgen &amp;gt; db/global_phone.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tell GlobalPhone where to find the database. For example, in a Rails app, create an initializer in &lt;code&gt;config/initializers/global_phone.rb&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;global_phone&#39;&#xA;GlobalPhone.db_path = Rails.root.join(&#39;db/global_phone.json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Parse an international number string into a &lt;code&gt;GlobalPhone::Number&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;number = GlobalPhone.parse(&#39;+1-312-555-1212&#39;)&#xA;# =&amp;gt; #&amp;lt;GlobalPhone::Number territory=#&amp;lt;GlobalPhone::Territory country_code=1 name=US&amp;gt; national_string=&#34;3125551212&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Query the country code and likely territory name of the number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;number.country_code&#xA;# =&amp;gt; &#34;1&#34;&#xA;&#xA;number.territory.name&#xA;# =&amp;gt; &#34;US&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Present the number in national and international formats:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;number.national_format&#xA;# =&amp;gt; &#34;(312) 555-1212&#34;&#xA;&#xA;number.international_format&#xA;# =&amp;gt; &#34;+1 312-555-1212&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Is the number valid? (Note: this is not definitive. For example, the number here is &#34;valid&#34; by format, but there are no US numbers that start with 555. The &lt;code&gt;valid?&lt;/code&gt; method may return false positives, but &lt;em&gt;should not&lt;/em&gt; return false negatives unless the database is out of date.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;number.valid?&#xA;# =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the number&#39;s normalized E.164 international string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;number.international_string&#xA;# =&amp;gt; &#34;+13125551212&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parse a number in national format for a given territory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;number = GlobalPhone.parse(&#34;(0) 20-7031-3000&#34;, :gb)&#xA;# =&amp;gt; #&amp;lt;GlobalPhone::Number territory=#&amp;lt;GlobalPhone::Territory country_code=44 name=GB&amp;gt; national_string=&#34;2070313000&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parse an international number using a territory&#39;s international dialing prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;number = GlobalPhone.parse(&#34;00 1 3125551212&#34;, :gb)&#xA;# =&amp;gt; #&amp;lt;GlobalPhone::Number territory=#&amp;lt;GlobalPhone::Territory country_code=1 name=US&amp;gt; national_string=&#34;3125551212&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the default territory to Great Britain (territory names are &lt;a href=&#34;http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2&#34;&gt;ISO 3166-1 Alpha-2&lt;/a&gt; codes):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;GlobalPhone.default_territory_name = :gb&#xA;# =&amp;gt; :gb&#xA;&#xA;GlobalPhone.parse(&#34;(0) 20-7031-3000&#34;)&#xA;# =&amp;gt; #&amp;lt;GlobalPhone::Number territory=#&amp;lt;GlobalPhone::Territory country_code=44 name=GB&amp;gt; national_string=&#34;2070313000&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shortcuts for validating a phone number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;GlobalPhone.validate(&#34;+1 312-555-1212&#34;)&#xA;# =&amp;gt; true&#xA;&#xA;GlobalPhone.validate(&#34;+442070313000&#34;)&#xA;# =&amp;gt; true&#xA;&#xA;GlobalPhone.validate(&#34;(0) 20-7031-3000&#34;)&#xA;# =&amp;gt; false&#xA;&#xA;GlobalPhone.validate(&#34;(0) 20-7031-3000&#34;, :gb)&#xA;# =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shortcuts for normalizing a phone number in E.164 format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;GlobalPhone.normalize(&#34;(312) 555-1212&#34;)&#xA;# =&amp;gt; &#34;+13125551212&#34;&#xA;&#xA;GlobalPhone.normalize(&#34;+442070313000&#34;)&#xA;# =&amp;gt; &#34;+442070313000&#34;&#xA;&#xA;GlobalPhone.normalize(&#34;(0) 20-7031-3000&#34;)&#xA;# =&amp;gt; nil&#xA;&#xA;GlobalPhone.normalize(&#34;(0) 20-7031-3000&#34;, :gb)&#xA;# =&amp;gt; &#34;+442070313000&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;GlobalPhone currently does not parse emergency numbers or SMS short code numbers.&lt;/p&gt; &#xA;&lt;p&gt;Validation is not definitive and may return false positives, but &lt;em&gt;should not&lt;/em&gt; return false negatives unless the database is out of date.&lt;/p&gt; &#xA;&lt;p&gt;Territory heuristics are imprecise. Parsing a number will usually result in the territory being set to the primary territory of the region. For example, Canadian numbers will be parsed with a territory of &lt;code&gt;US&lt;/code&gt;. (In most cases this does not matter, but if your application needs to perform geolocation using phone numbers, GlobalPhone may not be a good fit.)&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The GlobalPhone source code is &lt;a href=&#34;https://github.com/sstephenson/global_phone&#34;&gt;hosted on GitHub&lt;/a&gt;. You can check out a copy of the latest code using Git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/sstephenson/global_phone.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;ve found a bug or have a question, please open an issue on the &lt;a href=&#34;https://github.com/sstephenson/global_phone/issues&#34;&gt;issue tracker&lt;/a&gt;. Or, clone the GlobalPhone repository, write a failing test case, fix the bug, and submit a pull request.&lt;/p&gt; &#xA;&lt;p&gt;GlobalPhone is heavily inspired by Andreas Gal&#39;s &lt;a href=&#34;https://github.com/andreasgal/PhoneNumber.js&#34;&gt;PhoneNumber.js&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;h3&gt;Version History&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.0.1&lt;/strong&gt; (May 29, 2013)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GlobalPhone::Number#to_s returns the E.164 international string.&lt;/li&gt; &#xA; &lt;li&gt;Ensure GlobalPhone::Number always returns strings for #national_format, #international_format, and #international_string, regardless of validity.&lt;/li&gt; &#xA; &lt;li&gt;Relax format restrictions to more loosely match available national number patterns.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.0.0&lt;/strong&gt; (May 28, 2013)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial public release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Copyright © 2013 Sam Stephenson&lt;/p&gt; &#xA;&lt;p&gt;Released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/sstephenson/global_phone/master/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zengin-code/source-data</title>
    <updated>2025-03-25T01:37:11Z</updated>
    <id>tag:github.com,2025-03-25:/zengin-code/source-data</id>
    <link href="https://github.com/zengin-code/source-data" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💰 Source data of the zengin-code for JSON &amp; YAML&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZenginCode source data&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zengin-code/source-data/actions/workflows/update.yml&#34;&gt;&lt;img src=&#34;https://github.com/zengin-code/source-data/actions/workflows/update.yml/badge.svg?sanitize=true&#34; alt=&#34;update&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bank codes and Branch codes for Japanese.&lt;/p&gt; &#xA;&lt;h2&gt;Usage for any language&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;💎&lt;/span&gt; Ruby : &lt;a href=&#34;https://github.com/zengin-code/zengin-rb&#34;&gt;zengin-rb&lt;/a&gt; : &lt;code&gt;gem install zengin_code&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📦&lt;/span&gt; JavaScript(npm) : &lt;a href=&#34;https://github.com/zengin-code/zengin-js&#34;&gt;zengin-js&lt;/a&gt; : &lt;code&gt;npm install --save zengin-code&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🐍&lt;/span&gt; Python : &lt;a href=&#34;https://github.com/zengin-code/zengin-py&#34;&gt;zengin-py&lt;/a&gt; : &lt;code&gt;pip install zengin_code&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You need zengin code on another language? &lt;a href=&#34;https://github.com/zengin-code/source-data/issues&#34;&gt;Please request to me&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;Source data by &lt;a href=&#34;http://ykaku.com/ginkokensaku/index.php&#34;&gt;http://ykaku.com/ginkokensaku/index.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repository is available as open source under the terms of the MIT License.&lt;/p&gt;</summary>
  </entry>
</feed>