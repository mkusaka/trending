<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-08T01:34:07Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>omniauth/omniauth</title>
    <updated>2022-06-08T01:34:07Z</updated>
    <id>tag:github.com,2022-06-08:/omniauth/omniauth</id>
    <link href="https://github.com/omniauth/omniauth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OmniAuth is a flexible authentication system utilizing Rack middleware.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OmniAuth: Standardized Multi-Provider Authentication&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/omniauth&#34;&gt;&lt;img src=&#34;http://img.shields.io/gem/v/omniauth.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/omniauth/omniauth/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/omniauth/omniauth/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Ruby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/omniauth/omniauth/actions/workflows/truffle_ruby.yml&#34;&gt;&lt;img src=&#34;https://github.com/omniauth/omniauth/actions/workflows/truffle_ruby.yml/badge.svg?sanitize=true&#34; alt=&#34;TruffleRuby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/omniauth/omniauth/actions/workflows/jruby.yml&#34;&gt;&lt;img src=&#34;https://github.com/omniauth/omniauth/actions/workflows/jruby.yml/badge.svg?sanitize=true&#34; alt=&#34;JRuby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/omniauth/omniauth&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/ffd33970723587806744/maintainability&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/omniauth/omniauth&#34;&gt;&lt;img src=&#34;http://img.shields.io/coveralls/omniauth/omniauth.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the documentation for the in-development branch of OmniAuth. You can view the documentation for our latest release v2.1.0 &lt;a href=&#34;https://github.com/omniauth/omniauth/releases/tag/v2.1.0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;An Introduction&lt;/h2&gt; &#xA;&lt;p&gt;OmniAuth is a library that standardizes multi-provider authentication for web applications. It was created to be powerful, flexible, and do as little as possible. Any developer can create &lt;strong&gt;strategies&lt;/strong&gt; for OmniAuth that can authenticate users via disparate systems. OmniAuth strategies have been created for everything from Facebook to LDAP.&lt;/p&gt; &#xA;&lt;p&gt;In order to use OmniAuth in your applications, you will need to leverage one or more strategies. These strategies are generally released individually as RubyGems, and you can see a &lt;a href=&#34;https://github.com/omniauth/omniauth/wiki/List-of-Strategies&#34;&gt;community maintained list&lt;/a&gt; on the wiki for this project.&lt;/p&gt; &#xA;&lt;p&gt;One strategy, called &lt;code&gt;Developer&lt;/code&gt;, is included with OmniAuth and provides a completely insecure, non-production-usable strategy that directly prompts a user for authentication information and then passes it straight through. You can use it as a placeholder when you start development and easily swap in other strategies later.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Each OmniAuth strategy is a Rack Middleware. That means that you can use it the same way that you use any other Rack middleware. For example, to use the built-in Developer strategy in a Sinatra application you might do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra&#39;&#xA;require &#39;omniauth&#39;&#xA;&#xA;class MyApplication &amp;lt; Sinatra::Base&#xA;  use Rack::Session::Cookie&#xA;  use OmniAuth::Strategies::Developer&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because OmniAuth is built for &lt;em&gt;multi-provider&lt;/em&gt; authentication, you may want to leave room to run multiple strategies. For this, the built-in &lt;code&gt;OmniAuth::Builder&lt;/code&gt; class gives you an easy way to specify multiple strategies. Note that there is &lt;strong&gt;no difference&lt;/strong&gt; between the following code and using each strategy individually as middleware. This is an example that you might put into a Rails initializer at &lt;code&gt;config/initializers/omniauth.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.middleware.use OmniAuth::Builder do&#xA;  provider :developer unless Rails.env.production?&#xA;  provider :twitter, ENV[&#39;TWITTER_KEY&#39;], ENV[&#39;TWITTER_SECRET&#39;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should look to the documentation for each provider you use for specific initialization requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Integrating OmniAuth Into Your Application&lt;/h2&gt; &#xA;&lt;p&gt;OmniAuth is an extremely low-touch library. It is designed to be a black box that you can send your application&#39;s users into when you need authentication and then get information back. OmniAuth was intentionally built not to automatically associate with a User model or make assumptions about how many authentication methods you might want to use or what you might want to do with the data once a user has authenticated. This makes OmniAuth incredibly flexible. To use OmniAuth, you need only to redirect users to &lt;code&gt;/auth/:provider&lt;/code&gt;, where &lt;code&gt;:provider&lt;/code&gt; is the name of the strategy (for example, &lt;code&gt;developer&lt;/code&gt; or &lt;code&gt;twitter&lt;/code&gt;). From there, OmniAuth will take over and take the user through the necessary steps to authenticate them with the chosen strategy.&lt;/p&gt; &#xA;&lt;p&gt;Once the user has authenticated, what do you do next? OmniAuth simply sets a special hash called the Authentication Hash on the Rack environment of a request to &lt;code&gt;/auth/:provider/callback&lt;/code&gt;. This hash contains as much information about the user as OmniAuth was able to glean from the utilized strategy. You should set up an endpoint in your application that matches to the callback URL and then performs whatever steps are necessary for your application.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;omniauth.auth&lt;/code&gt; key in the environment hash provides an Authentication Hash which will contain information about the just authenticated user including a unique id, the strategy they just used for authentication, and personal details such as name and email address as available. For an in-depth description of what the authentication hash might contain, see the &lt;a href=&#34;https://github.com/omniauth/omniauth/wiki/Auth-Hash-Schema&#34;&gt;Auth Hash Schema wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that OmniAuth does not perform any actions beyond setting some environment information on the callback request. It is entirely up to you how you want to implement the particulars of your application&#39;s authentication flow.&lt;/p&gt; &#xA;&lt;h2&gt;Rails (without Devise)&lt;/h2&gt; &#xA;&lt;p&gt;To get started, add the following gems&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gemfile&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;omniauth&#39;&#xA;gem &#34;omniauth-rails_csrf_protection&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then insert OmniAuth as a middleware&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;config/initializers/omniauth.rb&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.middleware.use OmniAuth::Builder do&#xA;  provider :developer if Rails.env.development?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional providers can be added here in the future. Next we wire it all up using routes, a controller and a login view.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;config/routes.rb&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  get &#39;auth/:provider/callback&#39;, to: &#39;sessions#create&#39;&#xA;  get &#39;/login&#39;, to: &#39;sessions#new&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;app/controllers/sessions_controller.rb&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SessionsController &amp;lt; ApplicationController&#xA;  def new&#xA;    render :new&#xA;  end&#xA;&#xA;  def create&#xA;    user_info = request.env[&#39;omniauth.auth&#39;]&#xA;    raise user_info # Your own session management should be placed here.&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;app/views/sessions/new.html.erb&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= form_tag(&#39;/auth/developer&#39;, method: &#39;post&#39;, data: {turbo: false}) do %&amp;gt;&#xA;  &amp;lt;button type=&#39;submit&#39;&amp;gt;Login with Developer&amp;lt;/button&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now if you visit &lt;code&gt;/login&lt;/code&gt; and click the Login button, you should see the OmniAuth developer login screen. After submitting it, you are returned to your application at &lt;code&gt;Sessions#create&lt;/code&gt;. The raise should now display all the Omniauth details you have available to integrate it into your own user management.&lt;/p&gt; &#xA;&lt;p&gt;If you want out of the box usermanagement, you should consider using Omniauth through Devise. Please visit the &lt;a href=&#34;https://github.com/heartcombo/devise#omniauth&#34;&gt;Devise Github page&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Rails API&lt;/h2&gt; &#xA;&lt;p&gt;The following middleware are (by default) included for session management in Rails applications. When using OmniAuth with a Rails API, you&#39;ll need to add one of these required middleware back in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ActionDispatch::Session::CacheStore&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ActionDispatch::Session::CookieStore&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ActionDispatch::Session::MemCacheStore&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The trick to adding these back in is that, by default, they are passed &lt;code&gt;session_options&lt;/code&gt; when added (including the session key), so you can&#39;t just add a &lt;code&gt;session_store.rb&lt;/code&gt; initializer, add &lt;code&gt;use ActionDispatch::Session::CookieStore&lt;/code&gt; and have sessions functioning as normal.&lt;/p&gt; &#xA;&lt;p&gt;To be clear: sessions may work, but your session options will be ignored (i.e. the session key will default to &lt;code&gt;_session_id&lt;/code&gt;). Instead of the initializer, you&#39;ll have to set the relevant options somewhere before your middleware is built (like &lt;code&gt;application.rb&lt;/code&gt;) and pass them to your preferred middleware, like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;application.rb:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.session_store :cookie_store, key: &#39;_interslice_session&#39;&#xA;config.middleware.use ActionDispatch::Cookies # Required for all session management&#xA;config.middleware.use ActionDispatch::Session::CookieStore, config.session_options&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Thanks @mltsy)&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;OmniAuth supports a configurable logger. By default, OmniAuth will log to &lt;code&gt;STDOUT&lt;/code&gt; but you can configure this using &lt;code&gt;OmniAuth.config.logger&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Rails application example&#xA;OmniAuth.config.logger = Rails.logger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Origin Param&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;origin&lt;/code&gt; url parameter is typically used to inform where a user came from and where, should you choose to use it, they&#39;d want to return to. Omniauth supports the following settings which can be configured on a provider level:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;provider :twitter, ENV[&#39;KEY&#39;], ENV[&#39;SECRET&#39;]&#xA;POST /auth/twitter/?origin=[URL]&#xA;# If the `origin` parameter is blank, `omniauth.origin` is set to HTTP_REFERER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using a differently named origin parameter&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;provider :twitter, ENV[&#39;KEY&#39;], ENV[&#39;SECRET&#39;], origin_param: &#39;return_to&#39;&#xA;POST /auth/twitter/?return_to=[URL]&#xA;# If the `return_to` parameter is blank, `omniauth.origin` is set to HTTP_REFERER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disabled&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;provider :twitter, ENV[&#39;KEY&#39;], ENV[&#39;SECRET&#39;], origin_param: false&#xA;POST /auth/twitter&#xA;# This means the origin should be handled by your own application. &#xA;# Note that `omniauth.origin` will always be blank.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/omniauth/omniauth/wiki&#34;&gt;OmniAuth Wiki&lt;/a&gt; has actively maintained in-depth documentation for OmniAuth. It should be your first stop if you are wondering about a more in-depth look at OmniAuth, how it works, and how to use it.&lt;/p&gt; &#xA;&lt;h2&gt;OmniAuth for Enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of OmniAuth and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/rubygems-omniauth?utm_source=undefined&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Ruby Versions&lt;/h2&gt; &#xA;&lt;p&gt;OmniAuth is tested under 2.5, 2.6, 2.7, truffleruby, and JRuby.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;This library aims to adhere to &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt;. Violations of this scheme should be reported as bugs. Specifically, if a minor or patch version is released that breaks backward compatibility, that version should be immediately yanked and/or a new version should be immediately released that restores compatibility. Breaking changes to the public API will only be introduced with new major versions. As a result of this policy, you can (and should) specify a dependency on this gem using the &lt;a href=&#34;http://guides.rubygems.org/patterns/#pessimistic-version-constraint&#34;&gt;Pessimistic Version Constraint&lt;/a&gt; with two digits of precision. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spec.add_dependency &#39;omniauth&#39;, &#39;~&amp;gt; 1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2010-2017 Michael Bleigh and Intridea, Inc. See &lt;a href=&#34;https://raw.githubusercontent.com/omniauth/omniauth/master/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lynndylanhurley/devise_token_auth</title>
    <updated>2022-06-08T01:34:07Z</updated>
    <id>tag:github.com,2022-06-08:/lynndylanhurley/devise_token_auth</id>
    <link href="https://github.com/lynndylanhurley/devise_token_auth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Token based authentication for Rails JSON APIs. Designed to work with jToker and ng-token-auth.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Devise Token Auth&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/devise_token_auth&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/devise_token_auth.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/lynndylanhurley/devise_token_auth&#34;&gt;&lt;img src=&#34;https://travis-ci.org/lynndylanhurley/devise_token_auth.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/lynndylanhurley/devise_token_auth&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/lynndylanhurley/devise_token_auth/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/lynndylanhurley/devise_token_auth/coverage&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/lynndylanhurley/devise_token_auth/badges/coverage.svg?sanitize=true&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/devise_token_auth&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/dt/devise_token_auth.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lynndylanhurley/devise_token_auth/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lynndylanhurley/devise_token_auth/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/lynndylanhurley/devise_token_auth?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/lynndylanhurley/devise_token_auth&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple, multi-client and secure token-based authentication for Rails.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re building SPA or a mobile app, and you want authentication, you need tokens, not cookies. This gem refreshes the tokens on each request, and expires them in a short time, so the app is secure. Also, it maintains a session for each client/device, so you can have as many sessions as you want.&lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Seamless integration with: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lynndylanhurley/ng-token-auth&#34;&gt;ng-token-auth&lt;/a&gt; for &lt;a href=&#34;https://github.com/angular/angular.js&#34;&gt;AngularJS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/neroniaky/angular-token&#34;&gt;Angular-Token&lt;/a&gt; for &lt;a href=&#34;https://github.com/angular/angular&#34;&gt;Angular&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kylecorbelli/redux-token-auth&#34;&gt;redux-token-auth&lt;/a&gt; for &lt;a href=&#34;https://github.com/reactjs/react-redux&#34;&gt;React with Redux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lynndylanhurley/j-toker&#34;&gt;jToker&lt;/a&gt; for &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Oauth2 authentication using &lt;a href=&#34;https://github.com/intridea/omniauth&#34;&gt;OmniAuth&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Email authentication using &lt;a href=&#34;https://github.com/plataformatec/devise&#34;&gt;Devise&lt;/a&gt;, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;User registration, update and deletion&lt;/li&gt; &#xA;   &lt;li&gt;Login and logout&lt;/li&gt; &#xA;   &lt;li&gt;Password reset, account confirmation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://raw.githubusercontent.com/lynndylanhurley/devise_token_auth/master/docs/usage/multiple_models.md&#34;&gt;multiple user models&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It is &lt;a href=&#34;https://raw.githubusercontent.com/lynndylanhurley/devise_token_auth/master/docs/security.md&#34;&gt;secure&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project leverages the following gems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plataformatec/devise&#34;&gt;Devise&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intridea/omniauth&#34;&gt;OmniAuth&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;devise_token_auth&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install the gem using bundle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://devise-token-auth.gitbook.io/devise-token-auth&#34;&gt;Docs&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/devise-token-auth&#34;&gt;StackOverflow&lt;/a&gt; for help requests and how-to questions.&lt;/p&gt; &#xA;&lt;p&gt;Please open GitHub issues for bugs and enhancements only, not general help requests. Please search previous issues (and Google and StackOverflow) before creating a new issue.&lt;/p&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://github.com/lynndylanhurley/devise_token_auth/raw/master/.github/ISSUE_TEMPLATE.md&#34;&gt;issue template&lt;/a&gt; before posting issues.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lynndylanhurley/devise_token_auth/master/docs/faq.md&#34;&gt;FAQ&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Contributors wanted!&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://github.com/lynndylanhurley/devise_token_auth/raw/master/.github/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;. Feel free to submit pull requests, review pull requests, or review open issues. If you&#39;d like to get in contact, &lt;a href=&#34;https://github.com/zachfeldman&#34;&gt;Zach Feldman&lt;/a&gt; has been wrangling this effort, you can reach him with his name @gmail. Further discussion of this in &lt;a href=&#34;https://github.com/lynndylanhurley/devise_token_auth/issues/969&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have some bounties for some issues, &lt;a href=&#34;https://github.com/lynndylanhurley/devise_token_auth/issues?q=is%3Aopen+is%3Aissue+label%3Abounty&#34;&gt;check them out&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Live Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://ng-token-auth-demo.herokuapp.com/&#34;&gt;Here is a demo&lt;/a&gt; of this app running with the &lt;a href=&#34;https://github.com/lynndylanhurley/ng-token-auth&#34;&gt;ng-token-auth&lt;/a&gt; module and &lt;a href=&#34;https://github.com/angular/angular.js&#34;&gt;AngularJS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stackblitz.com/github/neroniaky/angular-token&#34;&gt;Here is a demo&lt;/a&gt; of this app running with the &lt;a href=&#34;https://github.com/neroniaky/angular-token&#34;&gt;Angular-Token&lt;/a&gt; service and &lt;a href=&#34;https://github.com/angular/angular&#34;&gt;Angular&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://j-toker-demo.herokuapp.com/&#34;&gt;Here is a demo&lt;/a&gt; of this app using the &lt;a href=&#34;https://github.com/lynndylanhurley/j-toker&#34;&gt;jToker&lt;/a&gt; plugin and &lt;a href=&#34;http://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The fully configured api used in these demos can be found &lt;a href=&#34;https://github.com/lynndylanhurley/devise_token_auth_demo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lynndylanhurley/devise_token_auth/master/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/devise_token_auth#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/devise_token_auth#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/backers.svg?width=890&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/devise_token_auth#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/devise_token_auth/sponsor/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsor/0/avatar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/devise_token_auth/sponsor/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsor/1/avatar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/devise_token_auth/sponsor/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsor/2/avatar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/devise_token_auth/sponsor/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsor/3/avatar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/devise_token_auth/sponsor/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsor/4/avatar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/devise_token_auth/sponsor/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsor/5/avatar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/devise_token_auth/sponsor/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsor/6/avatar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/devise_token_auth/sponsor/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsor/7/avatar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/devise_token_auth/sponsor/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsor/8/avatar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/devise_token_auth/sponsor/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/devise_token_auth/sponsor/9/avatar.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project uses the WTFPL&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ondrejbartas/sidekiq-cron</title>
    <updated>2022-06-08T01:34:07Z</updated>
    <id>tag:github.com,2022-06-08:/ondrejbartas/sidekiq-cron</id>
    <link href="https://github.com/ondrejbartas/sidekiq-cron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scheduler / Cron for Sidekiq jobs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sidekiq-Cron&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/sidekiq-cron&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/sidekiq-cron.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ondrejbartas/sidekiq-cron/actions&#34;&gt;&lt;img src=&#34;https://github.com/ondrejbartas/sidekiq-cron/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/ondrejbartas/sidekiq-cron?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/ondrejbartas/sidekiq-cron/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/ondrejbartas/sidekiq-cron?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/ondrejbartas/sidekiq-cron.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/ondrejbartas/sidekiq-cron&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A scheduling add-on for &lt;a href=&#34;https://sidekiq.org/&#34;&gt;Sidekiq&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;🎬 &lt;a href=&#34;https://www.driftingruby.com/episodes/periodic-tasks-with-sidekiq-cron&#34;&gt;Introduction video about Sidekiq-Cron by Drifting Ruby&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sidekiq-Cron runs a thread alongside Sidekiq workers to schedule jobs at specified times (using cron notation &lt;code&gt;* * * * *&lt;/code&gt; parsed by &lt;a href=&#34;https://github.com/floraison/fugit&#34;&gt;Fugit&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Checks for new jobs to schedule every 30 seconds and doesn&#39;t schedule the same job multiple times when more than one Sidekiq worker is running.&lt;/p&gt; &#xA;&lt;p&gt;Scheduling jobs are added only when at least one Sidekiq process is running, but it is safe to use Sidekiq-Cron in environments where multiple Sidekiq processes or nodes are running.&lt;/p&gt; &#xA;&lt;p&gt;If you want to know how scheduling work, check out &lt;a href=&#34;https://raw.githubusercontent.com/ondrejbartas/sidekiq-cron/master/#under-the-hood&#34;&gt;under the hood&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Works with ActiveJob (Rails 4.2+).&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need Sidekiq PRO, you can use this gem with plain Sidekiq.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrade from &amp;lt; 0.6 to 1.0&lt;/h2&gt; &#xA;&lt;p&gt;Please be aware that Sidekiq-Cron &amp;lt; 1.0 was relying on rufus-scheduler &amp;lt; 3.5. Using those older versions with rufus-scheduler &amp;gt;= 3.5 ends up with jobs failing on creation. Sidekiq-Cron 1.0 includes a patch that switches from rufus-scheduler to rufus-scheduler&#39;s core dependency, fugit.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Before upgrading to a new version, please read our &lt;a href=&#34;https://raw.githubusercontent.com/ondrejbartas/sidekiq-cron/master/Changes.md&#34;&gt;Changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis 2.8 or greater is required (Redis 3.0.3 or greater is recommended for large scale use)&lt;/li&gt; &#xA; &lt;li&gt;Sidekiq 4.2 or greater is required (for Sidekiq &amp;lt; 4 use version sidekiq-cron 0.3.1)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install the gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install sidekiq-cron&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or add to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;sidekiq-cron&#34;, &#34;~&amp;gt; 1.3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; If you are not using Rails, you need to add &lt;code&gt;require &#39;sidekiq-cron&#39;&lt;/code&gt; somewhere after &lt;code&gt;require &#39;sidekiq&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Job properties:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{&#xA;  &#39;name&#39; =&amp;gt; &#39;name_of_job&#39;, # must be uniq!&#xA;  &#39;cron&#39; =&amp;gt; &#39;1 * * * *&#39;,  # execute at 1 minute of every hour, ex: 12:01, 13:01, 14:01, 15:01, ... (HH:MM)&#xA;  &#39;class&#39; =&amp;gt; &#39;MyClass&#39;,&#xA;  # OPTIONAL&#xA;  &#39;queue&#39; =&amp;gt; &#39;name of queue&#39;,&#xA;  &#39;args&#39; =&amp;gt; &#39;[Array or Hash] of arguments which will be passed to perform method&#39;,&#xA;  &#39;date_as_argument&#39; =&amp;gt; true, # add the time of execution as last argument of the perform method&#xA;  &#39;active_job&#39; =&amp;gt; true,  # enqueue job through rails 4.2+ active job interface&#xA;  &#39;queue_name_prefix&#39; =&amp;gt; &#39;prefix&#39;, # rails 4.2+ active job queue with prefix&#xA;  &#39;queue_name_delimiter&#39; =&amp;gt; &#39;.&#39;,  # rails 4.2+ active job queue with custom delimiter&#xA;  &#39;description&#39; =&amp;gt; &#39;A sentence describing what work this job performs.&#39;&#xA;  &#39;status&#39; =&amp;gt; &#39;disabled&#39; # default: enabled&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Time, cron and Sidekiq-Cron&lt;/h3&gt; &#xA;&lt;p&gt;For testing your cron notation you can use &lt;a href=&#34;https://crontab.guru&#34;&gt;crontab.guru&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Sidekiq-Cron uses &lt;a href=&#34;https://github.com/floraison/fugit&#34;&gt;Fugit&lt;/a&gt; to parse the cronline. So please, check Fugit documentation for further information about allowed formats.&lt;/p&gt; &#xA;&lt;p&gt;If using Rails, this is evaluated against the timezone configured in Rails, otherwise the default is UTC.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have your jobs enqueued based on a different time zone you can specify a timezone in the cronline, like this &lt;code&gt;&#39;0 22 * * 1-5 America/Chicago&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Second-precision (sub-minute) cronlines&lt;/h4&gt; &#xA;&lt;p&gt;In addition to the standard 5-parameter cronline format, sidekiq-cron supports scheduling jobs with second-precision using a modified 6-parameter cronline format:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Seconds Minutes Hours Days Months DayOfWeek&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example: &lt;code&gt;&#34;*/30 * * * * *&#34;&lt;/code&gt; would schedule a job to run every 30 seconds.&lt;/p&gt; &#xA;&lt;p&gt;Note that if you plan to schedule jobs with second precision you may need to override the default schedule poll interval so it is lower than the interval of your jobs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq.options[:average_scheduled_poll_interval] = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value at time of writing is 30 seconds. See &lt;a href=&#34;https://raw.githubusercontent.com/ondrejbartas/sidekiq-cron/master/#under-the-hood&#34;&gt;under the hood&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;What objects/classes can be scheduled&lt;/h3&gt; &#xA;&lt;h4&gt;Sidekiq Worker&lt;/h4&gt; &#xA;&lt;p&gt;In this example, we are using &lt;code&gt;HardWorker&lt;/code&gt; which looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class HardWorker&#xA;  include Sidekiq::Worker&#xA;&#xA;  def perform(*args)&#xA;    # do something&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Active Job Worker&lt;/h4&gt; &#xA;&lt;p&gt;You can schedule &lt;code&gt;ExampleJob&lt;/code&gt; which looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ExampleJob &amp;lt; ActiveJob::Base&#xA;  queue_as :default&#xA;&#xA;  def perform(*args)&#xA;    # Do something&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Active jobs you can use &lt;code&gt;symbolize_args: true&lt;/code&gt; in &lt;code&gt;Sidekiq::Cron::Job.create&lt;/code&gt; or in Hash configuration, which will ensure that arguments you are passing to it will be symbolized when passed back to &lt;code&gt;perform&lt;/code&gt; method in worker.&lt;/p&gt; &#xA;&lt;h4&gt;Adding Cron job&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class HardWorker&#xA;  include Sidekiq::Worker&#xA;&#xA;  def perform(name, count)&#xA;    # do something&#xA;  end&#xA;end&#xA;&#xA;Sidekiq::Cron::Job.create(name: &#39;Hard worker - every 5min&#39;, cron: &#39;*/5 * * * *&#39;, class: &#39;HardWorker&#39;) # execute at every 5 minutes, ex: 12:05, 12:10, 12:15...etc&#xA;# =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;create&lt;/code&gt; method will return only true/false if job was saved or not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;job = Sidekiq::Cron::Job.new(name: &#39;Hard worker - every 5min&#39;, cron: &#39;*/5 * * * *&#39;, class: &#39;HardWorker&#39;)&#xA;&#xA;if job.valid?&#xA;  job.save&#xA;else&#xA;  puts job.errors&#xA;end&#xA;&#xA;# or simple&#xA;unless job.save&#xA;  puts job.errors # will return array of errors&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load more jobs from hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hash = {&#xA;  &#39;name_of_job&#39; =&amp;gt; {&#xA;    &#39;class&#39; =&amp;gt; &#39;MyClass&#39;,&#xA;    &#39;cron&#39;  =&amp;gt; &#39;1 * * * *&#39;,&#xA;    &#39;args&#39;  =&amp;gt; &#39;(OPTIONAL) [Array or Hash]&#39;&#xA;  },&#xA;  &#39;My super iber cool job&#39; =&amp;gt; {&#xA;    &#39;class&#39; =&amp;gt; &#39;SecondClass&#39;,&#xA;    &#39;cron&#39;  =&amp;gt; &#39;*/5 * * * *&#39;&#xA;  }&#xA;}&#xA;&#xA;Sidekiq::Cron::Job.load_from_hash hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load more jobs from array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;array = [&#xA;  {&#xA;    &#39;name&#39;  =&amp;gt; &#39;name_of_job&#39;,&#xA;    &#39;class&#39; =&amp;gt; &#39;MyClass&#39;,&#xA;    &#39;cron&#39;  =&amp;gt; &#39;1 * * * *&#39;,&#xA;    &#39;args&#39;  =&amp;gt; &#39;(OPTIONAL) [Array or Hash]&#39;&#xA;  },&#xA;  {&#xA;    &#39;name&#39;  =&amp;gt; &#39;Cool Job for Second Class&#39;,&#xA;    &#39;class&#39; =&amp;gt; &#39;SecondClass&#39;,&#xA;    &#39;cron&#39;  =&amp;gt; &#39;*/5 * * * *&#39;&#xA;  }&#xA;]&#xA;&#xA;Sidekiq::Cron::Job.load_from_array array&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bang-suffixed methods will remove jobs that are not present in the given hash/array, update jobs that have the same names, and create new ones when the names are previously unknown.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq::Cron::Job.load_from_hash! hash&#xA;Sidekiq::Cron::Job.load_from_array! array&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or from YAML (same notation as Resque-scheduler):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config/schedule.yml&#xA;&#xA;my_first_job:&#xA;  cron: &#34;*/5 * * * *&#34;&#xA;  class: &#34;HardWorker&#34;&#xA;  queue: hard_worker&#xA;&#xA;second_job:&#xA;  cron: &#34;*/30 * * * *&#34; # execute at every 30 minutes&#xA;  class: &#34;HardWorker&#34;&#xA;  queue: hard_worker_long&#xA;  args:&#xA;    hard: &#34;stuff&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/sidekiq.rb&#xA;schedule_file = &#34;config/schedule.yml&#34;&#xA;&#xA;if File.exist?(schedule_file) &amp;amp;&amp;amp; Sidekiq.server?&#xA;  Sidekiq::Cron::Job.load_from_hash YAML.load_file(schedule_file)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From version 3.x it is better not to use separate initializer of schedule instead add &lt;code&gt;config.on(:startup)&lt;/code&gt; to your Sidekiq configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq.configure_server do |config|&#xA;  config.on(:startup) do&#xA;    schedule_file = &#34;config/schedule.yml&#34;&#xA;&#xA;    if File.exist?(schedule_file)&#xA;      Sidekiq::Cron::Job.load_from_hash YAML.load_file(schedule_file)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use for loading jobs from yml file &lt;a href=&#34;https://github.com/coverhound/sidekiq-cron-tasks&#34;&gt;sidekiq-cron-tasks&lt;/a&gt; which will add rake task &lt;code&gt;bundle exec rake sidekiq_cron:load&lt;/code&gt; to your rails application.&lt;/p&gt; &#xA;&lt;h3&gt;Finding jobs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# return array of all jobs&#xA;Sidekiq::Cron::Job.all&#xA;&#xA;# return one job by its unique name - case sensitive&#xA;Sidekiq::Cron::Job.find &#34;Job Name&#34;&#xA;&#xA;# return one job by its unique name - you can use hash with &#39;name&#39; key&#xA;Sidekiq::Cron::Job.find name: &#34;Job Name&#34;&#xA;&#xA;# if job can&#39;t be found nil is returned&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Destroy jobs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# destroy all jobs&#xA;Sidekiq::Cron::Job.destroy_all!&#xA;&#xA;# destroy job by its name&#xA;Sidekiq::Cron::Job.destroy &#34;Job Name&#34;&#xA;&#xA;# destroy found job&#xA;Sidekiq::Cron::Job.find(&#39;Job name&#39;).destroy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Work with job&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;job = Sidekiq::Cron::Job.find(&#39;Job name&#39;)&#xA;&#xA;# disable cron scheduling&#xA;job.disable!&#xA;&#xA;# enable cron scheduling&#xA;job.enable!&#xA;&#xA;# get status of job:&#xA;job.status&#xA;# =&amp;gt; enabled/disabled&#xA;&#xA;# enqueue job right now!&#xA;job.enque!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to start scheduling?&lt;/h3&gt; &#xA;&lt;p&gt;Just start Sidekiq workers by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sidekiq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Web UI for Cron Jobs&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Sidekiq&#39;s web UI and you would like to add cron jobs too to this web UI, add &lt;code&gt;require &#39;sidekiq/cron/web&#39;&lt;/code&gt; after &lt;code&gt;require &#39;sidekiq/web&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With this, you will get:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ondrejbartas/sidekiq-cron/master/examples/web-cron-ui.png&#34; alt=&#34;Web UI&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Forking Processes or problem with &lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using a forking web server like Unicorn you may run into an issue where the Redis connection is used before the process forks, causing the following exception to occur:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Redis::InheritedError: Tried to use a connection from a child process without reconnecting. You need to reconnect to Redis after forking.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid this, wrap your job creation in the call to &lt;code&gt;Sidekiq.configure_server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq.configure_server do |config|&#xA;  config.on(:startup) do&#xA;    schedule_file = &#34;config/schedule.yml&#34;&#xA;&#xA;    if File.exist?(schedule_file)&#xA;      Sidekiq::Cron::Job.load_from_hash YAML.load_file(schedule_file)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; This API is only available in Sidekiq 3.x.&lt;/p&gt; &#xA;&lt;h2&gt;Under the hood&lt;/h2&gt; &#xA;&lt;p&gt;When you start the Sidekiq process, it starts one thread with &lt;code&gt;Sidekiq::Poller&lt;/code&gt; instance, which perform the adding of scheduled jobs to queues, retries etc.&lt;/p&gt; &#xA;&lt;p&gt;Sidekiq-Cron adds itself into this start procedure and starts another thread with &lt;code&gt;Sidekiq::Cron::Poller&lt;/code&gt; which checks all enabled Sidekiq cron jobs every 30 seconds, if they should be added to queue (their cronline matches time of check).&lt;/p&gt; &#xA;&lt;p&gt;Sidekiq-Cron is checking jobs to be enqueued every 30s by default, you can change it by setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Sidekiq.options[:average_scheduled_poll_interval] = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sidekiq-Cron is safe to use with multiple Sidekiq processes or nodes. It uses a Redis sorted set to determine that only the first process who asks can enqueue scheduled jobs into the queue.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thanks to all &lt;a href=&#34;https://github.com/ondrejbartas/sidekiq-cron/graphs/contributors&#34;&gt;contributors&lt;/a&gt;, you’re awesome and this wouldn’t be possible without you!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out the latest master to make sure the feature hasn&#39;t been implemented or the bug hasn&#39;t been fixed yet.&lt;/li&gt; &#xA; &lt;li&gt;Check out the issue tracker to make sure someone already hasn&#39;t requested it and/or contributed it.&lt;/li&gt; &#xA; &lt;li&gt;Fork the project.&lt;/li&gt; &#xA; &lt;li&gt;Start a feature/bugfix branch.&lt;/li&gt; &#xA; &lt;li&gt;Commit and push until you are happy with your contribution.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to add tests for it. This is important so we don&#39;t break it in a future version unintentionally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;You can execute the test suite by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2013 Ondrej Bartas. See &lt;a href=&#34;https://raw.githubusercontent.com/ondrejbartas/sidekiq-cron/master/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt;</summary>
  </entry>
</feed>