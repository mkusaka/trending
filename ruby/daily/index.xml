<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:39:07Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheOdinProject/custom_enumerable_project</title>
    <updated>2022-09-20T01:39:07Z</updated>
    <id>tag:github.com,2022-09-20:/TheOdinProject/custom_enumerable_project</id>
    <link href="https://github.com/TheOdinProject/custom_enumerable_project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Custom Enumerable Project&lt;/h1&gt; &#xA;&lt;p&gt;This repository complements the &lt;a href=&#34;https://www.theodinproject.com/lessons/ruby-custom-enumerables&#34;&gt;Custom Enumerables Project&lt;/a&gt; in the Ruby Course for The Odin Project. The goal of this project is to reimplement common methods used frequently through the enumerables module with objects like arrays and hashes. This project will also familiarize you with how to work with blocks and procs. Some starter code and specs are provided to validate the correctness of your solutions.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First, clone this repository with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:TheOdinProject/custom_enumerable_project.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, navigate into the folder through your command line with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd custom_enumerable_project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and install the dependencies using the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You will add new methods to the &lt;code&gt;Enumerable&lt;/code&gt; module in &lt;code&gt;lib/my_enumerables.rb&lt;/code&gt;. Before you implement a method, go to the corresponding spec file and watch the test fail by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rspec &amp;lt;spec_file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find the associated spec file in the &lt;a href=&#34;https://raw.githubusercontent.com/TheOdinProject/custom_enumerable_project/main/#methods&#34;&gt;methods section&lt;/a&gt;. Then, add the method to the enumerable module. Run the tests again using the same command until they pass.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;As an example, before you start implementing the &lt;code&gt;my_each&lt;/code&gt; method, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rspec spec/my_each_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to see that the test fails as expected.&lt;/p&gt; &#xA;&lt;p&gt;Once you implement it, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# lib/my_enumerables.rb&#xA;&#xA;class Array&#xA;  def my_each&#xA;    # Complete code&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;run the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rspec spec/my_each_spec.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;again to see if your code is correct or not.&lt;/p&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;p&gt;The following table has the methods you will need to implement along with their associated specs, as outlined in the project instructions.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Spec File&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Array#my_each&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spec/my_each_spec.rb&lt;/td&gt; &#xA;   &lt;td&gt;You will define my_each on the Array class in &lt;code&gt;lib/my_enumerables.rb&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enumerable#my_each_with_index&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spec/my_each_with_index_spec.rb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enumerable#my_select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spec/my_select_spec.rb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enumerable#my_all?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spec/my_all_spec.rb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enumerable#my_any?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spec/my_any_spec.rb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enumerable#my_none?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spec/my_none_spec.rb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enumerable#my_count&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spec/my_count_spec.rb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enumerable#my_map&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spec/my_map_spec.rb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enumerable#my_inject&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;spec/my_inject_spec.rb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-4-rails-routing-basics-lab</title>
    <updated>2022-09-20T01:39:07Z</updated>
    <id>tag:github.com,2022-09-20:/learn-co-curriculum/phase-4-rails-routing-basics-lab</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-rails-routing-basics-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rails Routing Basics Lab&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a route&lt;/li&gt; &#xA; &lt;li&gt;Map a route to a controller/action&lt;/li&gt; &#xA; &lt;li&gt;Send JSON data as a response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ll continue building our API for viewing student data. In this lesson, we&#39;ll add some routes and controller logic for displaying data about our students.&lt;/p&gt; &#xA;&lt;p&gt;To get set up, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle install&#xA;$ rails db:migrate db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download all the dependencies for our app and set up the database.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Index Route&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a route for making a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/students&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate a &lt;code&gt;StudentsController&lt;/code&gt; with an &lt;code&gt;index&lt;/code&gt; action for handling the route; don&#39;t forget to pass the &lt;code&gt;--no-test-framework&lt;/code&gt; argument!&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;index&lt;/code&gt; action, return JSON data representing a list of all students&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Grades Route&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a route for making a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/students/grades&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;grades&lt;/code&gt; action in the &lt;code&gt;StudentsController&lt;/code&gt; for handling that route&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;grades&lt;/code&gt; action, return JSON data representing a list of all students, ordered by grade from highest to lowest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bonus: Highest Grade Route&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Un-comment out the last test in &lt;code&gt;/spec/requests/students_spec.rb&lt;/code&gt; to complete the bonus.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a route for making a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/students/highest-grade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;highest_grade&lt;/code&gt; action in the &lt;code&gt;StudentsController&lt;/code&gt; for handling that route&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;highest_grade&lt;/code&gt; action, return JSON data representing the one student with the highest grade&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: while the other two routes should return an array of data, this route should return just one student object!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/routing.html&#34;&gt;Rails Routing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/active_record_querying.html&#34;&gt;Active Record Query Interface&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-4-rails-and-active-record-readme</title>
    <updated>2022-09-20T01:39:07Z</updated>
    <id>tag:github.com,2022-09-20:/learn-co-curriculum/phase-4-rails-and-active-record-readme</id>
    <link href="https://github.com/learn-co-curriculum/phase-4-rails-and-active-record-readme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rails and Active Record&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use Rails to generate a model&lt;/li&gt; &#xA; &lt;li&gt;Create seed data&lt;/li&gt; &#xA; &lt;li&gt;Test code using the Rails console&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this code-along, we&#39;ll discuss how Active Record fits into a Rails application, as well as some tools to make it easier to set up models in your Rails apps.&lt;/p&gt; &#xA;&lt;p&gt;Fork and clone this repo, then run &lt;code&gt;bundle install&lt;/code&gt; to download the required dependencies before coding along.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This code-along has been set up as a Rails app for you, so you will be running all the terminal commands inside the lesson directory.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- ## Video Walkthrough --&gt; &#xA;&lt;!-- &amp;lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/AYr7juVVz7g?rel=0&amp;amp;showinfo=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&amp;lt;/iframe&gt; --&gt; &#xA;&lt;h2&gt;Active Record&#39;s Role&lt;/h2&gt; &#xA;&lt;p&gt;Active Record is the built-in ORM that Rails utilizes to manage the model aspects of an application. What is an ORM? An ORM is an Object Relational Mapper system — a module that enables your application to manage data in a method-driven structure. This means that you are able to run queries, add records, and perform all of the traditional database processes by leveraging methods as opposed to writing SQL manually. For example, below is the traditional way that we would query a database of &#39;cheeses&#39; using SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM cheeses&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compared with leveraging Active Record:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;Cheese.all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By using Active Record, you are also able to perform advanced query tasks, such as method chaining and scoping, which typically require less code and make for a more readable query.&lt;/p&gt; &#xA;&lt;h2&gt;Active Record Models&lt;/h2&gt; &#xA;&lt;p&gt;By using model files, we are able to create an organized layer of abstraction for our data. An important thing to remember is that at the end of the day the model file is a Ruby class. It will typically inherit from the &lt;code&gt;ActiveRecord::Base&lt;/code&gt; class, which means that it has access to a number of methods that assist in working with the database. However, you can treat it like a regular Ruby class, allowing you to create methods, data attributes, and everything else that you would want to do in a class file.&lt;/p&gt; &#xA;&lt;p&gt;A typical model file will contain code such as but not limited to the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html&#34;&gt;Custom scopes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Model instance methods&lt;/li&gt; &#xA; &lt;li&gt;Default settings for database columns&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveModel/Validations/ClassMethods.html&#34;&gt;Validations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html&#34;&gt;Model-to-model relationships&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html&#34;&gt;Callbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Custom algorithms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;If any/all of the items above aren&#39;t familiar to you yet, don&#39;t worry. We&#39;ll cover them in future lessons. It&#39;s important to have an idea of what can be included in a model file, even at this early stage.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Creating an Active Record Model&lt;/h2&gt; &#xA;&lt;p&gt;As a Rails developer, one common task you&#39;ll have is creating models that are connected to a database via Active Record. To simplify this task, and ensure that your code follows Rails conventions, Rails has a built-in generator to help write some of the code you&#39;ll need for a new model.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s start with a definition of what our model will be. For our Cheese Shop application, we&#39;ll want a way to keep track of all of our cheeses. In particular, we&#39;ll want to know our cheese&#39;s &lt;em&gt;name&lt;/em&gt;, its &lt;em&gt;price&lt;/em&gt; in dollars, and whether it&#39;s a &lt;em&gt;best seller&lt;/em&gt;. In the database, our &lt;code&gt;cheeses&lt;/code&gt; should look something like this:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;id&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;name&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;price&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;is_best_seller&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Cheddar&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Pepper Jack&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Limburger&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To set this up in our Rails app, we&#39;ll need a few things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;strong&gt;migration&lt;/strong&gt; with instructions on how the table should be created in the database&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;model&lt;/strong&gt; so we can interact with that table via Active Record&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Rails Generators&lt;/h2&gt; &#xA;&lt;p&gt;Rails gives us an easy way of creating both of these things using a &lt;strong&gt;generator&lt;/strong&gt; we can run from the command line.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you&#39;ve navigated into the directory for this lesson, then run this command in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails g model Cheese name price:integer is_best_seller:boolean --no-test-framework&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;re telling Rails to generate the code for a Cheese model, with a &lt;code&gt;name&lt;/code&gt; attribute (string, the default data type), &lt;code&gt;price&lt;/code&gt; (integer), and &lt;code&gt;is_best_seller&lt;/code&gt; (boolean).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Note that we have added the &lt;code&gt;no-test-framework&lt;/code&gt; argument to our &lt;code&gt;rails g&lt;/code&gt; command. &lt;strong&gt;You should add this argument to every Rails generator command you run while you&#39;re working in the Flatiron curriculum.&lt;/strong&gt; Without this flag, the Rails generator will automatically create spec files that can interfere with the lab tests. If you forget to add it, you will have to comb through your local repo and manually delete all of the newly-created, unnecessary tests. This is not fun!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please, remember the &lt;code&gt;--no-test-framework&lt;/code&gt; argument.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll see this code added in a &lt;code&gt;create_cheeses.rb&lt;/code&gt; file — the name of the file will be prepended with a time stamp — inside the &lt;code&gt;db/migrate&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class CreateCheeses &amp;lt; ActiveRecord::Migration[6.1]&#xA;  def change&#xA;    create_table :cheeses do |t|&#xA;      t.string :name&#xA;      t.integer :price&#xA;      t.boolean :is_best_seller&#xA;&#xA;      t.timestamps&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As well as this code in the &lt;code&gt;app/models&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app/models/cheese.rb&#xA;class Cheese &amp;lt; ApplicationRecord&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working With Migrations&lt;/h2&gt; &#xA;&lt;p&gt;Now that we&#39;ve created this migration, we have to run the migration, which will create this table for us and generate a schema file.&lt;/p&gt; &#xA;&lt;p&gt;Run the migration by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a refresher on migrations, see &lt;a href=&#34;http://edgeguides.rubyonrails.org/active_record_migrations.html&#34;&gt;this documentation&lt;/a&gt;. This migration follows the standard naming convention. When you want to create a table, the migration&#39;s class name should reflect that; hence, &lt;code&gt;CreateCheeses&lt;/code&gt;. This is then reiterated by the &lt;code&gt;:cheeses&lt;/code&gt; argument passed to the &lt;code&gt;create_table&lt;/code&gt; method. The filename itself needs to be unique, and you will notice that the migration file name is prepended with a timestamp value to make sure that we can run migrations in the order they were written.&lt;/p&gt; &#xA;&lt;p&gt;The timestamp also plays a role in making sure that only new migrations run when we run &lt;code&gt;rails db:migrate&lt;/code&gt;. The &lt;code&gt;db/schema.rb&lt;/code&gt; file is updated with a version number corresponding to the timestamp of the last migration you ran. When you run &lt;code&gt;rails db:migrate&lt;/code&gt; again, only migrations whose timestamps are greater than the schema&#39;s version number will run. So, the numbers at the beginning of the filenames of your migrations are required so Active Record can be sure to run each of your migrations just once and in the proper order.&lt;/p&gt; &#xA;&lt;p&gt;After running &lt;code&gt;rails db:migrate&lt;/code&gt; we can see that our &lt;code&gt;db/schema.rb&lt;/code&gt; file has been updated with our new &lt;code&gt;cheeses&lt;/code&gt; table!&lt;/p&gt; &#xA;&lt;h2&gt;Seeding Data&lt;/h2&gt; &#xA;&lt;p&gt;To add some initial data in our database, we can take advantage of the &#39;seeds&#39; feature of Rails. We can write some code in a &lt;code&gt;db/seeds.rb&lt;/code&gt; file that is responsible for setting up our database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# db/seeds.rb&#xA;Cheese.create!(name: &#39;Cheddar&#39;, price: 3, is_best_seller: true)&#xA;Cheese.create!(name: &#39;Pepper Jack&#39;, price: 4, is_best_seller: true)&#xA;Cheese.create!(name: &#39;Limburger&#39;, price: 8, is_best_seller: false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, run &lt;code&gt;rails db:seed&lt;/code&gt; to execute all the code in the &lt;code&gt;db/seeds.rb&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s test out our code using the Rails console. Open up the console by running &lt;code&gt;rails console&lt;/code&gt; or &lt;code&gt;rails c&lt;/code&gt;. Running the console will load the entire Rails environment and give you command line access to the app and the database. The console is a powerful tool that you can leverage in order to test out scripts, methods, and database queries.&lt;/p&gt; &#xA;&lt;p&gt;Once the session has started, run the following command to ensure it recognizes our new Cheese model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;Cheese.all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything is set up properly, you will see that it returns all the cheeses we created in the seed file! You can test out some other methods here as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;Cheese.last&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recall that Active Record also allows us to use method chaining to access the attributes we&#39;ve defined for our Cheese model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;Cheese.last.name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With our &lt;code&gt;Cheese&lt;/code&gt; model working, let&#39;s add a new feature that returns a summary of a cheese. Exit out of the Rails console with &lt;code&gt;control + d&lt;/code&gt;. Then add this to the Cheese model file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# app/models/cheese.rb&#xA;&#xA;def summary&#xA;  &#34;#{self.name}: $#{self.price}&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go ahead and test this new method out in the Rails console by running a query on one of our records, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;Cheese.last.summary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you didn&#39;t exit the Rails console before adding the new Cheese#summary method, you can get the console to reload all your code by running &lt;code&gt;reload!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It should return the summary value of the last cheese we created: &lt;code&gt;&#34;Limburger: $8&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As you may have noticed, we did not have to create a controller, route, view, etc. in order to get the &lt;code&gt;Cheese&lt;/code&gt; model working. The data aspect of the application can work separately from the view and data flow logic. This level of abstraction makes it possible to test the behavior of our models without having them strongly coupled to how they are rendered to the user.&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;We covered quite a bit of material in this lesson. You should now have a firm understanding of Active Record models in Rails. Active Record is a powerful tool that enables developers to focus on the logic of their applications while streamlining processes such as connecting to the database, running queries, and much more.&lt;/p&gt; &#xA;&lt;h2&gt;Check For Understanding&lt;/h2&gt; &#xA;&lt;p&gt;Before you move on, make sure you can answer the following questions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;What are some of the ways that using Active Record in Rails makes it easier to interact with model data stored in a database?&lt;/li&gt; &#xA; &lt;li&gt;What are the advantages of using a Rails generator to create our models?&lt;/li&gt; &#xA; &lt;li&gt;Why is it important for migration file names to have a timestamp prepended?&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>