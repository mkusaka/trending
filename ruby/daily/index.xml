<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-15T01:37:01Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>haml/haml</title>
    <updated>2023-08-15T01:37:01Z</updated>
    <id>tag:github.com,2023-08-15:/haml/haml</id>
    <link href="https://github.com/haml/haml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTML Abstraction Markup Language - A Markup Haiku&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haml&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rubygems.org/gems/haml&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/haml.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haml/haml/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/haml/haml/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/haml/haml&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/haml/haml/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inch-ci.org/github/haml/haml&#34;&gt;&lt;img src=&#34;https://inch-ci.org/github/haml/haml.svg?sanitize=true&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Haml is a templating engine for HTML. It&#39;s designed to make it both easier and more pleasant to write HTML documents, by eliminating redundancy, reflecting the underlying structure that the document represents, and providing an elegant syntax that&#39;s both powerful and easy to understand.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Haml can be used from the command line or as part of a Ruby web framework. The first step is to install the gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install haml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you write some Haml, you can run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;haml render document.haml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to compile it to HTML. For more information on these commands, check out&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;haml --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use Haml programmatically, check out the &lt;a href=&#34;http://haml.info/docs/yardoc/&#34;&gt;YARD documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using Haml with Rails&lt;/h2&gt; &#xA;&lt;p&gt;To use Haml with Rails, simply add Haml to your Gemfile and run &lt;code&gt;bundle&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;haml&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to replace Rails&#39;s ERB-based generators with Haml, add &lt;a href=&#34;https://github.com/haml/haml-rails&#34;&gt;haml-rails&lt;/a&gt; to your Gemfile as well.&lt;/p&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;p&gt;The most basic element of Haml is a shorthand for creating HTML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haml&#34;&gt;%tagname{:attr1 =&amp;gt; &#39;value1&#39;, :attr2 =&amp;gt; &#39;value2&#39;} Contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No end-tag is needed; Haml handles that automatically. If you prefer HTML-style attributes, you can also use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haml&#34;&gt;%tagname(attr1=&#39;value1&#39; attr2=&#39;value2&#39;) Contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; attributes is even easier. Haml uses the same syntax as the CSS that styles the document:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haml&#34;&gt;%tagname#id.class&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In fact, when you&#39;re using the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag, it becomes &lt;em&gt;even easier&lt;/em&gt;. Because &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is such a common element, a tag without a name defaults to a div. So&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haml&#34;&gt;#foo Hello!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;becomes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&#39;foo&#39;&amp;gt;Hello!&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Haml uses indentation to bring the individual elements to represent the HTML structure. A tag&#39;s children are indented beneath than the parent tag. Again, a closing tag is automatically added. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haml&#34;&gt;%ul&#xA;  %li Salt&#xA;  %li Pepper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li&amp;gt;Salt&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;Pepper&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also put plain text as a child of an element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haml&#34;&gt;%p&#xA;  Hello,&#xA;  World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to embed Ruby code into Haml documents. An equals sign, &lt;code&gt;=&lt;/code&gt;, will output the result of the code. A hyphen, &lt;code&gt;-&lt;/code&gt;, will run the code but not output the result. You can even use control statements like &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haml&#34;&gt;%p&#xA;  Date/Time:&#xA;  - now = DateTime.now&#xA;  %strong= now&#xA;  - if now &amp;gt; DateTime.parse(&#34;December 31, 2006&#34;)&#xA;    = &#34;Happy new &#34; + &#34;year!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Haml provides far more tools than those presented here. Check out the &lt;a href=&#34;http://haml.info/docs/yardoc/file.REFERENCE.html&#34;&gt;reference documentation&lt;/a&gt; for full details.&lt;/p&gt; &#xA;&lt;h3&gt;Indentation&lt;/h3&gt; &#xA;&lt;p&gt;Haml&#39;s indentation can be made up of one or more tabs or spaces. However, indentation must be consistent within a given document. Hard tabs and spaces can&#39;t be mixed, and the same number of tabs or spaces must be used throughout.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed, but before you get started please read the &lt;a href=&#34;http://haml.info/development.html#contributing&#34;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After forking and then cloning the repo locally, install Bundler and then use it to install the development gem dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install bundler&#xA;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once this is complete, you should be able to run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll get a warning that you need to install haml-spec, so run this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point &lt;code&gt;rake&lt;/code&gt; should run without error or warning and you are ready to start working on your patch!&lt;/p&gt; &#xA;&lt;p&gt;Note that you can also run just one test out of the test suite if you&#39;re working on a specific area:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ruby -Itest test/helper_test.rb -n test_buffer_access&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Haml currently supports Ruby 2.0.0 and higher, so please make sure your changes run on 2.0+.&lt;/p&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;h3&gt;Current Maintainers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amatsuda&#34;&gt;Akira Matsuda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattwildig&#34;&gt;Matt Wildig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teeparham&#34;&gt;Tee Parham&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/k0kubun&#34;&gt;Takashi Kokubun&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Alumni&lt;/h3&gt; &#xA;&lt;p&gt;Haml was created by &lt;a href=&#34;http://hamptoncatlin.com&#34;&gt;Hampton Catlin&lt;/a&gt;, the author of the original implementation. Hampton is no longer involved in day-to-day coding, but still consults on language issues.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://nex-3.com&#34;&gt;Natalie Weizenbaum&lt;/a&gt; was for many years the primary developer and architect of the &#34;modern&#34; Ruby implementation of Haml.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://github.com/norman&#34;&gt;Norman Clarke&lt;/a&gt; was the primary maintainer of Haml from 2012 to 2016.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Some of Natalie&#39;s work on Haml was supported by Unspace Interactive.&lt;/p&gt; &#xA;&lt;p&gt;Beyond that, the implementation is licensed under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2006-2019 Hampton Catlin, Natalie Weizenbaum and the Haml team&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>