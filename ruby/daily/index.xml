<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-15T09:02:58Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fnando/browser</title>
    <updated>2024-05-15T09:02:58Z</updated>
    <id>tag:github.com,2024-05-15:/fnando/browser</id>
    <link href="https://github.com/fnando/browser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Do some browser detection with Ruby. Includes ActionController integration.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Browser&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fnando/browser&#34;&gt;&lt;img src=&#34;https://github.com/fnando/browser/workflows/ruby-tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/browser&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/browser.svg?sanitize=true&#34; alt=&#34;Gem&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/browser&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/dt/browser.svg?sanitize=true&#34; alt=&#34;Gem&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Do some browser detection with Ruby. Includes ActionController integration.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;browser&#34;&#xA;&#xA;browser = Browser.new(&#34;Some User Agent&#34;, accept_language: &#34;en-us&#34;)&#xA;&#xA;# General info&#xA;browser.bot?&#xA;browser.chrome?&#xA;browser.chromium_based?&#xA;browser.core_media?&#xA;browser.duck_duck_go?&#xA;browser.edge?                # Newest MS browser&#xA;browser.electron?            # Electron Framework&#xA;browser.firefox?&#xA;browser.full_version&#xA;browser.ie?&#xA;browser.ie?(6)               # detect specific IE version&#xA;browser.ie?([&#34;&amp;gt;8&#34;, &#34;&amp;lt;10&#34;])   # detect specific IE (IE9).&#xA;browser.known?               # has the browser been successfully detected?&#xA;browser.unknown?             # the browser wasn&#39;t detected.&#xA;browser.meta                 # an array with several attributes&#xA;browser.name                 # readable browser name&#xA;browser.nokia?&#xA;browser.opera?&#xA;browser.opera_mini?&#xA;browser.phantom_js?&#xA;browser.quicktime?&#xA;browser.safari?&#xA;browser.safari_webapp_mode?&#xA;browser.samsung_browser?&#xA;browser.to_s            # the meta info joined by space&#xA;browser.uc_browser?&#xA;browser.version         # major version number&#xA;browser.webkit?&#xA;browser.webkit_full_version&#xA;browser.yandex?&#xA;browser.wechat?&#xA;browser.qq?&#xA;browser.weibo?&#xA;browser.sputnik?&#xA;browser.sougou_browser?&#xA;&#xA;# Get bot info&#xA;browser.bot.name&#xA;browser.bot.search_engine?&#xA;browser.bot?&#xA;browser.bot.why? # shows which matcher detected this user agent as a bot.&#xA;Browser::Bot.why?(ua)&#xA;&#xA;# Get device info&#xA;browser.device&#xA;browser.device.id&#xA;browser.device.name&#xA;browser.device.unknown?&#xA;browser.device.blackberry_playbook?&#xA;browser.device.console?&#xA;browser.device.ipad?&#xA;browser.device.iphone?&#xA;browser.device.ipod_touch?&#xA;browser.device.kindle?&#xA;browser.device.kindle_fire?&#xA;browser.device.mobile?&#xA;browser.device.nintendo?&#xA;browser.device.playstation?&#xA;browser.device.ps3?&#xA;browser.device.ps4?&#xA;browser.device.psp?&#xA;browser.device.silk?&#xA;browser.device.surface?&#xA;browser.device.tablet?&#xA;browser.device.tv?&#xA;browser.device.vita?&#xA;browser.device.wii?&#xA;browser.device.wiiu?&#xA;browser.device.samsung?&#xA;browser.device.switch?&#xA;browser.device.xbox?&#xA;browser.device.xbox_360?&#xA;browser.device.xbox_one?&#xA;&#xA;# Get platform info&#xA;browser.platform&#xA;browser.platform.id&#xA;browser.platform.name&#xA;browser.platform.version  # e.g. 9 (for iOS9)&#xA;browser.platform.adobe_air?&#xA;browser.platform.android?&#xA;browser.platform.android?(4.2)   # detect Android Jelly Bean 4.2&#xA;browser.platform.android_app?     # detect webview in an Android app&#xA;browser.platform.android_webview? # alias for android_app?&#xA;browser.platform.blackberry?&#xA;browser.platform.blackberry?(10) # detect specific BlackBerry version&#xA;browser.platform.chrome_os?&#xA;browser.platform.firefox_os?&#xA;browser.platform.ios?     # detect iOS&#xA;browser.platform.ios?(9)  # detect specific iOS version&#xA;browser.platform.ios_app?     # detect webview in an iOS app&#xA;browser.platform.ios_webview? # alias for ios_app?&#xA;browser.platform.linux?&#xA;browser.platform.mac?&#xA;browser.platform.unknown?&#xA;browser.platform.windows10?&#xA;browser.platform.windows7?&#xA;browser.platform.windows8?&#xA;browser.platform.windows8_1?&#xA;browser.platform.windows?&#xA;browser.platform.windows_mobile?&#xA;browser.platform.windows_phone?&#xA;browser.platform.windows_rt?&#xA;browser.platform.windows_touchscreen_desktop?&#xA;browser.platform.windows_vista?&#xA;browser.platform.windows_wow64?&#xA;browser.platform.windows_x64?&#xA;browser.platform.windows_x64_inclusive?&#xA;browser.platform.windows_xp?&#xA;browser.platform.kai_os?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Aliases&lt;/h3&gt; &#xA;&lt;p&gt;To add aliases like &lt;code&gt;mobile?&lt;/code&gt; and &lt;code&gt;tablet?&lt;/code&gt; to the base object (e.g &lt;code&gt;browser.mobile?&lt;/code&gt;), require the &lt;code&gt;browser/aliases&lt;/code&gt; file and extend the Browser::Base object like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;browser/aliases&#34;&#xA;Browser::Base.include(Browser::Aliases)&#xA;&#xA;browser = Browser.new(&#34;Some user agent&#34;)&#xA;browser.mobile? #=&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What&#39;s being detected?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For a list of platform detections, check &lt;a href=&#34;https://github.com/fnando/browser/raw/master/lib/browser/platform.rb&#34;&gt;lib/browser/platform.rb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For a list of device detections, check &lt;a href=&#34;https://github.com/fnando/browser/raw/master/lib/browser/device.rb&#34;&gt;lib/browser/device.rb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For a list of bot detections, check &lt;a href=&#34;https://github.com/fnando/browser/raw/master/bots.yml&#34;&gt;bots.yml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Detecting modern browsers&lt;/h3&gt; &#xA;&lt;p&gt;To detect whether a browser can be considered as modern or not, create a method that abstracts your versioning constraints. The following example will consider any of the following browsers as a modern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Expects an Browser instance,&#xA;# like in `Browser.new(user_agent, accept_language: language)`.&#xA;def modern_browser?(browser)&#xA;  [&#xA;    browser.chrome?(&#34;&amp;gt;= 65&#34;),&#xA;    browser.safari?(&#34;&amp;gt;= 10&#34;),&#xA;    browser.firefox?(&#34;&amp;gt;= 52&#34;),&#xA;    browser.ie?(&#34;&amp;gt;= 11&#34;) &amp;amp;&amp;amp; !browser.compatibility_view?,&#xA;    browser.edge?(&#34;&amp;gt;= 15&#34;),&#xA;    browser.opera?(&#34;&amp;gt;= 50&#34;),&#xA;    browser.facebook?&#xA;      &amp;amp;&amp;amp; browser.safari_webapp_mode?&#xA;      &amp;amp;&amp;amp; browser.webkit_full_version.to_i &amp;gt;= 602&#xA;  ].any?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rails integration&lt;/h3&gt; &#xA;&lt;p&gt;Just add it to the Gemfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;browser&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds a helper method called &lt;code&gt;browser&lt;/code&gt;, that inspects your current user agent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;% if browser.ie?(6) %&amp;gt;&#xA;  &amp;lt;p class=&#34;disclaimer&#34;&amp;gt;You&#39;re running an older IE version. Please update it!&amp;lt;/p&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use Browser on your Rails app but don&#39;t want to taint your controller, use the following line on your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;browser&#34;, require: &#34;browser/browser&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accept Language&lt;/h3&gt; &#xA;&lt;p&gt;Parses the accept-language header from an HTTP request and produces an array of language objects sorted by quality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser = Browser.new(&#34;Some User Agent&#34;, accept_language: &#34;en-us&#34;)&#xA;&#xA;browser.accept_language.class&#xA;#=&amp;gt; Array&#xA;&#xA;language = browser.accept_language.first&#xA;&#xA;language.code&#xA;#=&amp;gt; &#34;en&#34;&#xA;&#xA;language.region&#xA;#=&amp;gt; &#34;US&#34;&#xA;&#xA;language.full&#xA;#=&amp;gt; &#34;en-US&#34;&#xA;&#xA;language.quality&#xA;#=&amp;gt; 1.0&#xA;&#xA;language.name&#xA;#=&amp;gt; &#34;English/United States&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result is always sorted in quality order from highest to lowest. As per the HTTP spec:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;omitting the quality value implies 1.0.&lt;/li&gt; &#xA; &lt;li&gt;quality value equal to zero means that is not accepted by the client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Internet Explorer&lt;/h3&gt; &#xA;&lt;p&gt;Internet Explorer has a compatibility view mode that allows newer versions (IE8+) to run as an older version. Browser will always return the navigator version, ignoring the compatibility view version, when defined. If you need to get the engine&#39;s version, you have to use &lt;code&gt;Browser#msie_version&lt;/code&gt; and &lt;code&gt;Browser#msie_full_version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So, let&#39;s say an user activates compatibility view in a IE11 browser. This is what you&#39;ll get:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser.version&#xA;#=&amp;gt; 11&#xA;&#xA;browser.full_version&#xA;#=&amp;gt; 11.0&#xA;&#xA;browser.msie_version&#xA;#=&amp;gt; 7&#xA;&#xA;browser.msie_full_version&#xA;#=&amp;gt; 7.0&#xA;&#xA;browser.compatibility_view?&#xA;#=&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This behavior changed in &lt;code&gt;v1.0.0&lt;/code&gt;; previously there wasn&#39;t a way of getting the real browser version.&lt;/p&gt; &#xA;&lt;h3&gt;Safari&lt;/h3&gt; &#xA;&lt;p&gt;iOS webviews and web apps aren&#39;t detected as Safari anymore, so be aware of that if that&#39;s your case. You can use a combination of platform and webkit detection to do whatever you want.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# iPad&#39;s Safari running as web app mode.&#xA;browser = Browser.new(&#34;Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405&#34;)&#xA;&#xA;browser.safari?&#xA;#=&amp;gt; false&#xA;&#xA;browser.webkit?&#xA;#=&amp;gt; true&#xA;&#xA;browser.platform.ios?&#xA;#=&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bots&lt;/h3&gt; &#xA;&lt;p&gt;The bot detection is quite aggressive. Anything that matches at least one of the following requirements will be considered a bot.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Empty user agent string&lt;/li&gt; &#xA; &lt;li&gt;User agent that matches &lt;code&gt;/crawl|fetch|search|monitoring|spider|bot/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any known bot listed under &lt;a href=&#34;https://github.com/fnando/browser/raw/master/bots.yml&#34;&gt;bots.yml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add custom matchers, you can add a callable object to &lt;code&gt;Browser::Bot.matchers&lt;/code&gt;. The following example matches everything that has a &lt;code&gt;externalhit&lt;/code&gt; substring on it. The bot name will always be &lt;code&gt;General Bot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Browser::Bot.matchers &amp;lt;&amp;lt; -&amp;gt;(ua, _browser) { ua.match?(/externalhit/i) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To clear all matchers, including the ones that are bundled, use &lt;code&gt;Browser::Bot.matchers.clear&lt;/code&gt;. You can re-add built-in matchers by doing the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Browser::Bot.matchers += Browser::Bot.default_matchers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To restore v2&#39;s bot detection, remove the following matchers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Browser::Bot.matchers.delete(Browser::Bot::KeywordMatcher)&#xA;Browser::Bot.matchers.delete(Browser::Bot::EmptyUserAgentMatcher)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To extend the bot list, you can manipulate the methods below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Browser::Bot.bots.merge!(new_bots_hash)&#xA;Browser::Bot.bot_exceptions += new_exceptions&#xA;Browser::Bot.search_engines.merge!(new_search_engines_hash)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Middleware&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;Browser::Middleware&lt;/code&gt; to redirect user agents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use Browser::Middleware do&#xA;  redirect_to &#34;/upgrade&#34; if browser.ie?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using Rails, you can use the route helper methods. Just add something like the following to a initializer file (&lt;code&gt;config/initializers/browser.rb&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.configuration.middleware.use Browser::Middleware do&#xA;  redirect_to upgrade_path if browser.ie?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need access to the &lt;code&gt;Rack::Request&lt;/code&gt; object (e.g. to exclude a path), you can do so with &lt;code&gt;request&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.configuration.middleware.use Browser::Middleware do&#xA;  redirect_to upgrade_path if browser.ie? &amp;amp;&amp;amp; request.env[&#34;PATH_INFO&#34;] != &#34;/exclude_me&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Restrictions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User agent has a size limit of 2048 bytes. This can be customized through &lt;code&gt;Browser.user_agent_size_limit=(size)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Accept-Language has a size limit of 2048 bytes. This can be customized through &lt;code&gt;Browser.accept_language_size_limit=(size)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If size is not respected, then &lt;code&gt;Browser::Error&lt;/code&gt; is raised.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Browser.user_agent_size_limit = 4096&#xA;Browser.accept_language_size_limit = 4096&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;This library follows &lt;a href=&#34;http://semver.org&#34;&gt;http://semver.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Writing code&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve made your great commits (include tests, please):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://help.github.com/forking/&#34;&gt;Fork&lt;/a&gt; browser&lt;/li&gt; &#xA; &lt;li&gt;Create a topic branch - &lt;code&gt;git checkout -b my_branch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push to your branch - &lt;code&gt;git push origin my_branch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a pull request&lt;/li&gt; &#xA; &lt;li&gt;That&#39;s it!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please respect the indentation rules and code style. And use 2 spaces, not tabs. And don&#39;t touch the version thing.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring environment&lt;/h2&gt; &#xA;&lt;p&gt;To configure your environment, you must have Ruby and bundler installed. Then run &lt;code&gt;bundle install&lt;/code&gt; to install all dependencies.&lt;/p&gt; &#xA;&lt;p&gt;To run tests, execute &lt;code&gt;./bin/rake&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new features&lt;/h3&gt; &#xA;&lt;p&gt;Before using your time to code a new feature, open a ticket asking if it makes sense and if it&#39;s on this project&#39;s scope.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to add a new entry to &lt;code&gt;CHANGELOG.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Adding a new bot&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the user agent to &lt;code&gt;test/ua_bots.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the readable name to &lt;code&gt;bots.yml&lt;/code&gt;. The key must be something that matches the user agent, in lowercased text.&lt;/li&gt; &#xA; &lt;li&gt;Run tests.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Don&#39;t forget to add a new entry to &lt;code&gt;CHANGELOG.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Adding a new search engine&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the user agent to &lt;code&gt;test/ua_search_engines.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the same user agent to &lt;code&gt;test/ua_bots.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the readable name to &lt;code&gt;search_engines.yml&lt;/code&gt;. The key must be something that matches the user agent, in lowercased text.&lt;/li&gt; &#xA; &lt;li&gt;Run tests.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Don&#39;t forget to add a new entry to &lt;code&gt;CHANGELOG.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Wrong browser/platform/device detection&lt;/h4&gt; &#xA;&lt;p&gt;If you know how to fix it, follow the &#34;Writing code&#34; above. Open an issue otherwise; make sure you fill in the issue template with all the required information.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nando Vieira - &lt;a href=&#34;https://nandovieira.com&#34;&gt;https://nandovieira.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fnando/browser/contributors&#34;&gt;https://github.com/fnando/browser/contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;(The MIT License)&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#39;Software&#39;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#39;AS IS&#39;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>