<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-10T01:40:58Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ifmeorg/ifme</title>
    <updated>2022-10-10T01:40:58Z</updated>
    <id>tag:github.com,2022-10-10:/ifmeorg/ifme</id>
    <link href="https://github.com/ifmeorg/ifme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free, open source mental health communication web app to share experiences with loved ones&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/ifmeorg/ifme/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ifmeorg/ifme/tree/main.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/ifmeorg/ifme&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/ifmeorg/ifme/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/ifmeorg/ifme/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/f9444a4d4116720518fe/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ifmeorg/ifme/main/code_of_conduct.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.1%20adopted-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ifmeorg/ifme/main/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ifmeorg/ifme/main/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/humanetech-community/awesome-humane-tech&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/humanetech-community/awesome-humane-tech/main/humane-tech-badge.svg?sanitize=true&#34; alt=&#34;Awesome Humane Tech&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;README in: &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/README-ES.md&#34;&gt;Spanish&lt;/a&gt;, &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/README-PT.md&#34;&gt;Portuguese&lt;/a&gt;, &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/README-FR.md&#34;&gt;French&lt;/a&gt;, &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/README-KO.md&#34;&gt;Korean&lt;/a&gt;, &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/README-ID.md&#34;&gt;Indonesian&lt;/a&gt;, &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/README-TR.md&#34;&gt;Turkish&lt;/a&gt;, &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/README-LK.md&#34;&gt;Sinhala&lt;/a&gt;, &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/README-CN.md&#34;&gt;Chinese&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;if-me.org&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.if-me.org/&#34;&gt;if-me.org&lt;/a&gt; is a community for mental health experiences that encourages people to share their personal stories with trusted allies. Trusted allies are the people we interact with on a daily basis, including friends, family members, co-workers, teachers, and mental health workers.&lt;/p&gt; &#xA;&lt;p&gt;Dealing with mental health is what makes us human. But for a lot of us, it&#39;s a struggle to be open about it. Not everyone is a counsellor or therapist. The people who we interact with everyday shape our emotions and behavior. Getting them involved in mental health treatment is the key to recovery.&lt;/p&gt; &#xA;&lt;p&gt;The live site can be found at &lt;a href=&#34;https://www.if-me.org/&#34;&gt;if-me.org&lt;/a&gt;. The live design systems can be found at &lt;a href=&#34;http://design.if-me.org/&#34;&gt;design.if-me.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We use the wonderful &lt;a href=&#34;http://contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; for our code of conduct. Please &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/code_of_conduct.md&#34;&gt;read it&lt;/a&gt; before joining our project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read about our project goals and how to contribute (not just as a developer) &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please check out our &lt;a href=&#34;https://github.com/ifmeorg/ifme/wiki&#34;&gt;Wiki&lt;/a&gt; for full documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ifmeorg/ifme/wiki/Installation&#34;&gt;These are the instructions&lt;/a&gt; for setting up and installing the app. Test, development, and production instances are covered.&lt;/p&gt; &#xA;&lt;h3&gt;Contributor Blurb&lt;/h3&gt; &#xA;&lt;p&gt;Everyone is highly encouraged to &lt;a href=&#34;https://github.com/ifmeorg/ifme/wiki/Contributor-Blurb&#34;&gt;add themselves&lt;/a&gt; to our Contribute page.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;We also welcome financial contributions in full transparency on our &lt;a href=&#34;https://opencollective.com/ifme&#34;&gt;Open Collective&lt;/a&gt;. Anyone can file an expense. If the expense makes sense for the development of the community, it will be &#34;merged&#34; in the ledger of our Open Collective by the core contributors and the person who filed the expense will be reimbursed.&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to our Patreon backers &lt;a href=&#34;https://www.patreon.com/user?u=3251857&#34;&gt;Rob Drimmie&lt;/a&gt;, &lt;a href=&#34;https://www.patreon.com/user?u=2899171&#34;&gt;Joseph D. Marhee&lt;/a&gt;, and &lt;a href=&#34;https://www.patreon.com/user?u=202458&#34;&gt;Carol Willing&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Thank you to all our Open Collective backers! &lt;a href=&#34;https://opencollective.com/ifme#backer&#34;&gt;Become a backer!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ifme#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our sponsors! (please ask your company to also support this open source project by &lt;a href=&#34;https://opencollective.com/ifme#sponsor&#34;&gt;becoming a sponsor&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;section role=&#34;presentation&#34;&gt; &#xA; &lt;a href=&#34;https://opencollective.com/ifme/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://opencollective.com/ifme/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://opencollective.com/ifme/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://opencollective.com/ifme/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://opencollective.com/ifme/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://opencollective.com/ifme/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://opencollective.com/ifme/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://opencollective.com/ifme/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://opencollective.com/ifme/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://opencollective.com/ifme/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ifme/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA;&lt;/section&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The source code is licensed under GNU AGPLv3. For more information see &lt;a href=&#34;http://www.gnu.org/licenses/agpl-3.0.txt&#34;&gt;http://www.gnu.org/licenses/agpl-3.0.txt&lt;/a&gt; or &lt;a href=&#34;https://github.com/ifmeorg/ifme/raw/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ebobby/has-many-with-set</title>
    <updated>2022-10-10T01:40:58Z</updated>
    <id>tag:github.com,2022-10-10:/ebobby/has-many-with-set</id>
    <link href="https://github.com/ebobby/has-many-with-set" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A smarter way to have many-to-many relationships in Ruby on Rails.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;has-many-with-set&lt;/h1&gt; &#xA;&lt;h3&gt;A smarter way of doing many-to-many relationships in Ruby On Rails.&lt;/h3&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Update: Now works with Rails 5&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This technique is explained with more detail in this &lt;a href=&#34;https://ebobby.org/2018/09/25/using-sets-for-many-to-many-relationships/&#34;&gt;post&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rails has two ways to model many-to-many relationships: &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; and &lt;code&gt;has_many :through&lt;/code&gt;, this gem introduces a third one: &lt;code&gt;has_many_with_set&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;has_many_with_set&lt;/code&gt; is equivalent to &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; in functionality. It works only when you do not want information about a relationship but the relationship itself, behind the curtains though, they do not work anything alike, &lt;code&gt;has_many_with_set&lt;/code&gt; is far more efficient in terms of data size as it reduces the redundancy that occurs in a normal many-to-many relationships when the cardinality is low, that is, the same combination occurs many times. For example, in a blog application, when many posts share the same tags.&lt;/p&gt; &#xA;&lt;h2&gt;How so?&lt;/h2&gt; &#xA;&lt;p&gt;The regular way of doing many-to-many relationships is using a join table to relate two tables, both ways of doing it in Ruby On Rails use this method, the only difference is the degree of control they give you on the &#34;intermediary&#34; table, one hides it from you (which is nice) and the other allows you to put more data in it besides the relationship, use validations, callbacks, etc.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;join&lt;/em&gt; table model is a very redundant way of storing these relationships if the same combination happens more than once because you have to create the same amount rows in the join table each time you save this combination for each different &lt;em&gt;parent&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Tag.create(:name =&amp;gt; &#39;programming&#39;)&#xA;Tag.create(:name =&amp;gt; &#39;open source&#39;)&#xA;Tag.create(:name =&amp;gt; &#39;startups&#39;)&#xA;Tag.create(:name =&amp;gt; &#39;ruby&#39;)&#xA;Tag.create(:name =&amp;gt; &#39;development&#39;)&#xA;&#xA;tags = Tag.all&#xA;&#xA;1000.times do&#xA;  a = Article.new(:title =&amp;gt; &#34;Buzzword about buzzwords!&#34;,&#xA;                  :body =&amp;gt; &#34;Lorem ipsum&#34;)&#xA;&#xA;  a.tags = tags.sample(rand(tags.size + 1))&#xA;&#xA;  a.save&#xA;end&#xA;&#xA;ArticlesTags = Class.new(ApplicationRecord)&#xA;ArticlesTags.count # this class doesn&#39;t exist by default,&#xA;                   # I had to create it by hand for the example.&#xA;=&amp;gt; 1932&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So we create five tags, and we create 1000 articles with a random combination of tags, not surprisingly, our join table has plenty of rows to represent all the relationships between our articles and their tags, if this were to behave linearly, if we had 1,000,000 articles we would have 1,932,000 rows just to represent the relationship.&lt;/p&gt; &#xA;&lt;p&gt;This example (albeit a bit unrealistic) shows how redundant this is, even though we are using the same combination of tags over and over again we get more and more rows, if we are speaking about thousands it is not a big problem but when your databases grow to the hundreds of thousands or the millions, stuff like this starts to matter.&lt;/p&gt; &#xA;&lt;p&gt;This is what this gem fixes, it makes sure that when you create a combination of items it is unique and it gets used as many times as its needed when requested again, like a &lt;em&gt;set&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;has-many-with-set&lt;/code&gt; is here to help.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Rails 5.x&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use it, add it to your Gemfile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gem &#39;has-many-with-set&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s pretty much it!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To to use &lt;code&gt;has-many-with-set&lt;/code&gt; to relate two already existing models you have to create the underlying tables that are going to be used by it, this is very easily done by generating a migration for them:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rails generate has_many_with_set:migration PARENT CHILD&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And add the relationship to your parent model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class Parent &amp;lt; ApplicationRecord&#xA;  has_many_with_set :children&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that&#39;s it! You can start using it in your application. This can be done for as many models as you want, (you have to create migrations for all combinations!) you can even use multiple sets to relate different data to the same parent model (like Authors and Tags for your Articles).&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Using our previous example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails g model Article title:string body:text`&#xA;&#xA;rails g model Tag name:string&#xA;&#xA;rails g has_many_with_set:migration Article Tag&#xA;      create  db/migrate/20121106063326_create_articles_tags_set.rb&#xA;&#xA;class Article &amp;lt; ApplicationRecord&#xA;  has_many_with_set :tags   # &amp;lt;--- key part!&#xA;end&#xA;&#xA;Tag.create(:name =&amp;gt; &#39;programming&#39;)&#xA;Tag.create(:name =&amp;gt; &#39;open source&#39;)&#xA;Tag.create(:name =&amp;gt; &#39;startups&#39;)&#xA;Tag.create(:name =&amp;gt; &#39;ruby&#39;)&#xA;Tag.create(:name =&amp;gt; &#39;development&#39;)&#xA;&#xA;tags = Tag.all&#xA;&#xA;1000.times do&#xA;  a = Article.new(:title =&amp;gt; &#34;Buzzword about buzzwords!&#34;,&#xA;                  :body =&amp;gt; &#34;Lorem ipsum&#34;)&#xA;&#xA;  a.tags = tags.sample(rand(tags.size + 1))&#xA;&#xA;  a.save&#xA;end&#xA;&#xA;ArticlesTagsSetsTag = Class.new(ApplicationRecord)&#xA;ArticlesTagsSetsTag.count # this class doesn&#39;t exist by default,&#xA;                          # I had to create it by hand for the example.&#xA;=&amp;gt; 80&#xA;&#xA;Article.first.tags&#xA;=&amp;gt; [#&amp;lt;Tag id: 1, name: &#34;programming&#34;, ...&amp;gt;]&#xA;&#xA;Article.last.tags&#xA;=&amp;gt; [#&amp;lt;Tag id: 1, name: &#34;programming&#34;, ...&amp;gt;, #&amp;lt;Tag id: 5, name: &#34;development&#34;, ...]&#xA;&#xA;# The child model can also see to which parent models it relates to&#xA;&#xA;Tag.first.articles.size&#xA;=&amp;gt; 503&#xA;&#xA;Tag.first.articles.first&#xA;=&amp;gt; #&amp;lt;Article id: 2, title: &#34;Buzzword about buzzwords!&#34;, ..&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same example as before, just now using &lt;code&gt;has_many_with_set&lt;/code&gt;. We get the impressive number of 80 rows to represent the same information that we had before with thousands of rows (roughly the same, since we use random combinations is not &lt;em&gt;exactly&lt;/em&gt; the same article/tag layout).&lt;/p&gt; &#xA;&lt;p&gt;The funny thing in this particular example, is that since we have only five tags, there are only 32 possible ways to combine five tags together, these 32 combinations amount to 80 rows in our relationship table.... that is, even if we had a million articles we would still have the same 80 rows to represent our relationships, we don&#39;t need to create any more rows!!&lt;/p&gt; &#xA;&lt;h2&gt;Final remarks&lt;/h2&gt; &#xA;&lt;p&gt;Please keep in mind that &lt;code&gt;has-many-with-set&lt;/code&gt; is not without some caveats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It can only be used when you do not need to put extra information in the relationships rows since they are shared among many parents.&lt;/li&gt; &#xA; &lt;li&gt;It is only effective when there is a high natural redundancy in your data, that is, when many sets can be shared among many parents.&lt;/li&gt; &#xA; &lt;li&gt;Although the retrieval queries are the same as with regular &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; and have no extra cost, it does have a tiny bit of extra cost when saving or updating since we have to find or create a suitable set before actually saving the parent record to the database. This cost is probably negligible as opposed to writing all the time, but I can&#39;t say it&#39;s free.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is one humble attempt to help make Ruby On Rails a bit more useful with large data sets and applications, I hope you enjoy it and is useful to you, please email me with comments or suggestions (or even code!).&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Francisco Soto &lt;a href=&#34;mailto:ebobby@ebobby.org&#34;&gt;ebobby@ebobby.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Copyright © 2012 Francisco Soto (&lt;a href=&#34;http://ebobby.org&#34;&gt;http://ebobby.org&lt;/a&gt;) released under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>appdev-projects/if-statements-chapter</title>
    <updated>2022-10-10T01:40:58Z</updated>
    <id>tag:github.com,2022-10-10:/appdev-projects/if-statements-chapter</id>
    <link href="https://github.com/appdev-projects/if-statements-chapter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby Practice&lt;/h1&gt; &#xA;&lt;p&gt;Run your Ruby file by typing &lt;code&gt;ruby &lt;/code&gt; and then the name of the file you want to run in the Terminal.&lt;/p&gt; &#xA;&lt;p&gt;If we want to run &lt;code&gt;conditionals_rps.rb&lt;/code&gt;, we can write the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ruby conditionals_rps.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To re-run this command, you can use the UP and DOWN arrow keys to look at the history of commands you&#39;ve run in a Terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Conditionals&lt;/h2&gt; &#xA;&lt;h3&gt;conditionals_rps.rb&lt;/h3&gt; &#xA;&lt;p&gt;Write a program that:&lt;/p&gt; &#xA;&lt;p&gt;Asks the player to input rock, paper, or scissors. Based on what the player chose, prints &#34;You played rock!&#34; or &#34;You played paper!&#34; or &#34;You played scissors!&#34; The computer is pretty dumb in this version of our game; it always plays scissors. Print &#34;The computer played scissors!&#34; Based on what the player chose, prints &#34;You won!&#34; or &#34;You lost!&#34; or &#34;You tied!&#34; If you need a refresher on the rules of Rock, Paper, Scissors: &lt;a href=&#34;https://en.wikipedia.org/wiki/Rock%E2%80%93paper%E2%80%93scissors&#34;&gt;https://en.wikipedia.org/wiki/Rock%E2%80%93paper%E2%80%93scissors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;conditionals_palindrome.rb&lt;/h3&gt; &#xA;&lt;p&gt;Ask for a word, check if it is a palindrome, and display true if it is one and false if it isn&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;A word is a palindrome if it reads the same backwards as forwards, e.g. &#34;madam&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Remember to display the actual value true or false, not the strings containing the letters &#34;true&#34; or &#34;false&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Input: &lt;code&gt;hannah&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Key output: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Complete input and output example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;Enter one word&#34;&#xA;hannah&#xA;true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Specs&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click here to see names of each test&lt;/summary&gt; &#xA; &lt;p&gt;conditionals_rps.rb should output &#39;You lost!&#39; given the input &#39;paper&#39;&lt;/p&gt; &#xA; &lt;p&gt;conditionals_palindrome.rb should output &#39;true&#39; given the input &#39;HanNah&#39;&lt;/p&gt; &#xA; &lt;p&gt;conditionals_palindrome.rb should output &#39;false&#39; given the input &#39;candy&#39;&lt;/p&gt; &#xA; &lt;p&gt;conditionals_palindrome.rb should output &#39;false&#39; given the input &#39;racecars&#39;&lt;/p&gt; &#xA; &lt;p&gt;conditionals_palindrome.rb should output &#39;true&#39; given the input &#39;racecar&#39;&lt;/p&gt; &#xA; &lt;p&gt;conditionals_rps.rb should output &#39;You won!&#39; given the input &#39;rock&#39;&lt;/p&gt; &#xA; &lt;p&gt;conditionals_rps.rb should output &#39;You tied!&#39; given the input &#39;scissors&#39;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>