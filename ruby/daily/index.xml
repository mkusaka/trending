<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-17T01:44:09Z</updated>
  <subtitle>Daily Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>standardrb/standard</title>
    <updated>2023-05-17T01:44:09Z</updated>
    <id>tag:github.com,2023-05-17:/standardrb/standard</id>
    <link href="https://github.com/standardrb/standard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby&#39;s bikeshed-proof linter and formatter ðŸš²&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/79303/233717126-9fd13e6d-9a66-4f1c-b40c-fe875cb1d1b4.png&#34; style=&#34;width: 100%&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/standardrb/standard/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/standardrb/standard/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/standardrb/standard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/standard&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/standard.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;standard&lt;/code&gt; gem brings the ethos of &lt;a href=&#34;https://standardjs.com&#34;&gt;StandardJS&lt;/a&gt; to Ruby. It&#39;s a linter &amp;amp; formatter built on &lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;RuboCop&lt;/a&gt; and provides an &lt;strong&gt;unconfigurable configuration&lt;/strong&gt; to all of RuboCop&#39;s built-in rules as well as those included in &lt;a href=&#34;https://github.com/rubocop/rubocop-performance&#34;&gt;rubocop-performance&lt;/a&gt;. It also supports plugins built with &lt;a href=&#34;https://github.com/standardrb/lint_roller&#34;&gt;lint_roller&lt;/a&gt;, like &lt;a href=&#34;https://github.com/standardrb/standard-rails&#34;&gt;standard-rails&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Standard Ruby was created and is maintained by the team at &lt;a href=&#34;https://testdouble.com&#34;&gt;Test Double&lt;/a&gt;, because we appreciate the importance of balancing predictable, consistent code with preserving developer autonomy. ðŸ’š&lt;/p&gt; &#xA;&lt;p&gt;Topics covered in this README:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/standardrb/standard/main/#wait-did-you-say-unconfigurable-configuration&#34;&gt;Wait, what?!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/standardrb/standard/main/#usage&#34;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/standardrb/standard/main/#integrating-standard-into-your-workflow&#34;&gt;Editor &amp;amp; CI integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/standardrb/standard/main/#ignoring-errors&#34;&gt;Ignoring errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/standardrb/standard/main/#configuring-standard&#34;&gt;Configuration options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/standardrb/standard/main/#extending-standard&#34;&gt;Plugins and extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/standardrb/standard/main/#who-uses-standard-ruby&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wait, did you say unconfigurable configuration?&lt;/h2&gt; &#xA;&lt;p&gt;Yes, Standard is unconfigurable. See, pretty much every developer can agree that automatically identifying and fixing slow, insecure, and error-prone code is a good idea. People also agree it&#39;s easier to work in codebases that exhibit a consistent style and format. So, what&#39;s the problem? &lt;strong&gt;No two developers will ever agree on what all the rules and format should be.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This has resulted in innumerable teams arguing how to configure their linters and formatters over literal decades. Some teams routinely divert time and energy from whatever they&#39;re building to reach consensus on where commas should go. Other teams have an overzealous tech lead who sets up everything &lt;em&gt;his favorite way&lt;/em&gt; and then imposes his will on others. It&#39;s not uncommon to witness passive-aggressive programmers change a contentious rule back-and-forth, resulting in both acrimony and git churn (and acrimony &lt;em&gt;about&lt;/em&gt; git churn). Still, most developers give way to whoever cares more, often resulting in an inconsistent configuration that nobody understands and isn&#39;t kept up-to-date with changes to their linter and its target language. Whatever the approach, time spent &lt;a href=&#34;https://blog.testdouble.com/posts/2019-09-17-bike-shed-history/&#34;&gt;bikeshedding&lt;/a&gt; is time wasted.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;But you can&#39;t configure Standard Ruby.&lt;/strong&gt; You can take it or leave it. If this seems presumptive, constraining, and brusque: you&#39;re right, it usually does feel that way at first. But &lt;a href=&#34;https://www.youtube.com/watch?v=uLyV5hOqGQ8&#34;&gt;since 2018&lt;/a&gt;, the Ruby community has debated Standard Ruby&#39;s ruleset, ultimately landing us on a &lt;a href=&#34;https://raw.githubusercontent.com/standardrb/standard/main/config/base.yml&#34;&gt;sensible&lt;/a&gt; &lt;a href=&#34;https://github.com/standardrb/standard-performance/raw/main/config/base.yml&#34;&gt;set&lt;/a&gt; of &lt;a href=&#34;https://github.com/standardrb/standard-custom/raw/main/config/base.yml&#34;&gt;defaults&lt;/a&gt; thatâ€”&lt;em&gt;while no one person&#39;s favorite way to format Ruby&lt;/em&gt;â€”seems to be good enough for most of the ways people use Ruby, most of the time.&lt;/p&gt; &#xA;&lt;p&gt;If you adopt Standard Ruby, what&#39;s in it for you? Time saved that would&#39;ve been spent arguing over how to set things up. Also, seamless upgrades: we stay on top of each new RuboCop rule and update our configuration on a monthly release cadence. But the best part of adopting Standard as your linter and formatter? &lt;strong&gt;You&#39;ll spend a whole lot less time thinking about linters and formatters.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;So please, give Standard Ruby a try. If you&#39;re like &lt;a href=&#34;https://raw.githubusercontent.com/standardrb/standard/main/#who-uses-standard-ruby&#34;&gt;these folks&lt;/a&gt;, you&#39;ll soon realize that the value of a linter is in using one at all and not in the particulars of how it&#39;s configured.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Getting started is as easy as &lt;code&gt;gem install standard&lt;/code&gt; or throwing it in your project&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;standard&#34;, group: [:development, :test]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Standard&lt;/h3&gt; &#xA;&lt;p&gt;Once installed, you can either run it as a CLI or as a Rake task.&lt;/p&gt; &#xA;&lt;p&gt;The CLI is called &lt;code&gt;standardrb&lt;/code&gt; to distinguish it from &lt;a href=&#34;https://github.com/standard/standard&#34;&gt;StandardJS&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ standardrb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the Rake task can be run if your Rakefile includes &lt;code&gt;require &#34;standard/rake&#34;&lt;/code&gt;. This will load the &lt;code&gt;standard&lt;/code&gt; task, allowing you to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rake standard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Either way, Standard will inspect any Ruby files found in the current directory tree. If any errors are found, it&#39;ll report them. If your code is standard-compliant, it will get out of your way by quietly exiting code 0.&lt;/p&gt; &#xA;&lt;h3&gt;Fixing errors&lt;/h3&gt; &#xA;&lt;p&gt;A majority of Standard&#39;s rules can be safely fixed automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# CLI&#xA;$ standardrb --fix&#xA;&#xA;# Rake&#xA;$ rake standard:fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because we&#39;re confident Standard&#39;s fixes won&#39;t change the behavior of our code, we typically run with fix enabled &lt;em&gt;all the time&lt;/em&gt; because it saves us from having to look at and think about problems the computer can solve for us.&lt;/p&gt; &#xA;&lt;h3&gt;Applying unsafe fixes&lt;/h3&gt; &#xA;&lt;p&gt;There are a number of other rules that can be automatically remedied, but not without the risk of changing your code&#39;s behavior. While we wouldn&#39;t recommend running it all the time, if the CLI suggests that additional errors can be fixed &lt;em&gt;unsafely&lt;/em&gt;, here&#39;s how to do that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# CLI&#xA;$ standardrb --fix-unsafely&#xA;&#xA;# Rake&#xA;$ rake standard:fix_unsafely&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So long as your code is checked into source control, there&#39;s no mortal harm in running with unsafe fixes enabled. If the changes look good to you and your tests pass, then it&#39;s probably less error prone than manually editing everything by hand.&lt;/p&gt; &#xA;&lt;h2&gt;Integrating Standard into your workflow&lt;/h2&gt; &#xA;&lt;p&gt;Because code formatting is so integral to programming productivity and linter violations risk becoming bugs if released into production, tools like Standard Ruby are only as useful as their integration into code editors and continuous integration systems.&lt;/p&gt; &#xA;&lt;h3&gt;Editor support&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve added a number of editing guides for getting started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/standardrb/vscode-standard-ruby&#34;&gt;VS Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/standardrb/standard/wiki/IDE:-vim&#34;&gt;vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/standardrb/standard/wiki/IDE:-neovim&#34;&gt;neovim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/ruby/rubocop.html#disable_rubocop&#34;&gt;RubyMine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julianrubisch/flycheck-standardrb&#34;&gt;emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/standardrb/standard/wiki/IDE:-Atom&#34;&gt;Atom&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;d like to help by creating a guide, please draft one &lt;a href=&#34;https://github.com/standardrb/standard/issues/new&#34;&gt;in an issue&lt;/a&gt; and we&#39;ll get it added!&lt;/p&gt; &#xA;&lt;h4&gt;Language Server Protocol support&lt;/h4&gt; &#xA;&lt;p&gt;If you don&#39;t see your preferred editor above, Standard Ruby also ships with a built-in &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;language server&lt;/a&gt; that many modern editors can support natively, even without a Standard-specific plugin.&lt;/p&gt; &#xA;&lt;p&gt;You can run the server by supplying the &lt;code&gt;--lsp&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;standard --lsp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your editor offers LSP support, it probably has a place to configure the above command and will subsequently manage the server process for you.&lt;/p&gt; &#xA;&lt;h3&gt;CI support&lt;/h3&gt; &#xA;&lt;p&gt;Various continuous integration and quality-checking tools have been made to support Standard Ruby, as well.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andrewmcodes/standardrb-action&#34;&gt;Github Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/standardrb/standard/wiki/CI:-Code-Climate&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julianrubisch/pronto-standardrb&#34;&gt;Pronto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ashfurrow/danger-rubocop/&#34;&gt;Danger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of course, no special plugin is necessary to run Standard Ruby in a CI environment, as &lt;code&gt;standardrb&lt;/code&gt; and &lt;code&gt;rake standard&lt;/code&gt; work just fine on their own!&lt;/p&gt; &#xA;&lt;h3&gt;Other tools&lt;/h3&gt; &#xA;&lt;p&gt;These tool integrations are also available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JodyVanden/guard-standardrb&#34;&gt;Guard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lakim/spring-commands-standard&#34;&gt;Spring&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ignoring errors&lt;/h2&gt; &#xA;&lt;p&gt;While Standard is very strict in how each formatting and linting rule is configured, it&#39;s mercifully flexible when you need to ignore a violation to focus on a higher priority (like, say, keeping the build running). There are a number of ways to ignore any errors, with the right answer depending on the situation.&lt;/p&gt; &#xA;&lt;h3&gt;Ignoring a line with a comment&lt;/h3&gt; &#xA;&lt;p&gt;Individual lines can be ignored with a comment directive at the end of the line. As an example, the line &lt;code&gt;text = &#39;hi&#39;&lt;/code&gt; violates two rules, &lt;a href=&#34;https://docs.rubocop.org/rubocop/cops_lint.html#lintuselessassignment&#34;&gt;Lint/UselessAssignment&lt;/a&gt; and &lt;a href=&#34;https://docs.rubocop.org/rubocop/cops_style.html#stylestringliterals&#34;&gt;Style/StringLiterals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You could ignore one, both, or all errors with the following comments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Disable one error but keep Lint/UselessAssignment&#xA;text = &#39;hi&#39; # standard:disable Style/StringLiterals&#xA;&#xA;# Disable both errors explicitly&#xA;text = &#39;hi&#39; # standard:disable Style/StringLiterals, Lint/UselessAssignment&#xA;&#xA;# Disable all errors on the line with &#34;all&#34;&#xA;text = &#34;hi&#34; # standard:disable all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ignoring multiple lines with comments&lt;/h3&gt; &#xA;&lt;p&gt;Similarly to individual lines, you can also disable multiple lines by wrapping them in comments that disable and re-enable them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# standard:disable Style/StringLiterals, Lint/UselessAssignment&#xA;text = &#34;hi&#34;&#xA;puts &#39;bye&#39;&#xA;# standard:enable Style/StringLiterals, Lint/UselessAssignment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ignoring entire files and globs&lt;/h3&gt; &#xA;&lt;p&gt;You can ignore entire files and file patterns by adding them to &lt;code&gt;ignore:&lt;/code&gt; in your project&#39;s &lt;code&gt;.standard.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignore:&#xA;  - &#39;some/file/in/particular.rb&#39;&#xA;  - &#39;a/whole/directory/**/*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ignoring specific rules in files and globs&lt;/h3&gt; &#xA;&lt;p&gt;For a given file or glob, you can even ignore only specific rules by nesting an array of the rules you&#39;d like to ignore:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignore:&#xA;  - &#39;test/**/*&#39;:&#xA;    - Layout/AlignHash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ignoring every violation and converting them into a todo list&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re adopting Standard in a large codebase and you don&#39;t want to convert everything all at once, you can work incrementally by generating a &#34;todo&#34; file which will cause Standard to ignore every violation present in each file of the codebase.&lt;/p&gt; &#xA;&lt;p&gt;This way, you can gradually work through the todo list, removing ignore directives and fixing any associated errors, while also being alerted to any regressions if they&#39;re introduced into the project.&lt;/p&gt; &#xA;&lt;p&gt;Here are the commands you might run to get started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Start by clearing any auto-fixable errors:&#xA;$ standardrb --fix&#xA;&#xA;# Generate a `.standard_todo.yml&#39; to work from&#xA;$ standardrb --generate-todo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuring Standard&lt;/h2&gt; &#xA;&lt;p&gt;While the rules aren&#39;t configurable, Standard offers a number of options that can be configured as CLI flags and YAML properties.&lt;/p&gt; &#xA;&lt;h3&gt;CLI flags&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to summarize the available CLI flags is to invoke &lt;code&gt;standardrb -h&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: standardrb [--fix] [--lsp] [-vh] [--format &amp;lt;name&amp;gt;] [--] [FILE]...&#xA;&#xA;Options:&#xA;&#xA;  --fix             Apply automatic fixes that we&#39;re confident won&#39;t break your code&#xA;  --fix-unsafely    Apply even more fixes, including some that may change code behavior&#xA;  --no-fix          Do not automatically fix failures&#xA;  --format &amp;lt;name&amp;gt;   Format output with any RuboCop formatter (e.g. &#34;json&#34;)&#xA;  --generate-todo   Create a .standard_todo.yml that lists all the files that contain errors&#xA;  --lsp             Start a LSP server listening on STDIN&#xA;  -v, --version     Print the version of Standard&#xA;  -V, --verbose-version   Print the version of Standard and its dependencies.&#xA;  -h, --help        Print this message&#xA;  FILE              Files to lint [default: ./]&#xA;&#xA;Standard also forwards most CLI arguments to RuboCop. To see them, run:&#xA;&#xA;  $ rubocop --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run Standard via Rake, you can specify your CLI flags in an environment variable named &lt;code&gt;STANDARDOPTS&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rake standard STANDARDOPTS=&#34;--format progress&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;YAML options&lt;/h3&gt; &#xA;&lt;p&gt;In addition to CLI flags, Standard will search for a &lt;code&gt;.standard.yml&lt;/code&gt; file (ascending to parent directories if the current working directory doesn&#39;t contain one). If you find yourself repeatedly running Standard with the same CLI options, it probably makes more sense to set it once in a YAML file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;fix: true               # default: false&#xA;parallel: true          # default: false&#xA;format: progress        # default: Standard::Formatter&#xA;ruby_version: 3.0       # default: RUBY_VERSION&#xA;default_ignores: false  # default: true&#xA;&#xA;ignore:                 # default: []&#xA;  - &#39;vendor/**/*&#39;&#xA;&#xA;plugins:                # default: []&#xA;  - standard-rails&#xA;&#xA;extend_config:                # default: []&#xA;  - .standard_ext.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring ruby_version&lt;/h4&gt; &#xA;&lt;p&gt;One notable YAML setting is &lt;code&gt;ruby_version&lt;/code&gt;, which allows you to set the &lt;strong&gt;oldest version of Ruby the project needs to support&lt;/strong&gt; &lt;a href=&#34;https://docs.rubocop.org/rubocop/configuration.html#setting-the-target-ruby-version&#34;&gt;RuboCop&#39;s &lt;code&gt;TargetRubyVersion&lt;/code&gt; setting&lt;/a&gt; explicitly. Because this value is inferred from any &lt;code&gt;.ruby-version&lt;/code&gt;, &lt;code&gt;.tool-versions&lt;/code&gt;, &lt;code&gt;Gemfile.lock&lt;/code&gt;, and &lt;code&gt;*.gemspec&lt;/code&gt; files that might be present, most applications won&#39;t need to set this.&lt;/p&gt; &#xA;&lt;p&gt;However, gems and libraries that support older versions of Ruby will want to lock the &lt;code&gt;ruby-version:&lt;/code&gt; explicitly in their &lt;code&gt;.standard.yml&lt;/code&gt; file to ensure new rules don&#39;t break old rubies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ruby_version: 2.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extending Standard&lt;/h2&gt; &#xA;&lt;p&gt;Standard includes two extension mechanisms: plugins and configuration extensions. While neither can &lt;em&gt;change&lt;/em&gt; the rules configured out-of-the-box by Standard, they can define, require, and configure &lt;em&gt;additional&lt;/em&gt; RuboCop rules.&lt;/p&gt; &#xA;&lt;p&gt;Both are &#34;first-in-wins&#34;, meaning once a rule is configured by a plugin or extension, it can&#39;t be changed or reconfigured by a later plugin or extension. This way, each Standard plugin you add becomes a de facto &#34;standard&#34; of its own. Plugins have precedence over extensions as they are loaded first.&lt;/p&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Adding a plugin to your project is as easy as adding it to your Gemfile and specifying it in &lt;code&gt;.standard.yml&lt;/code&gt; in the root of your project. For example, after installing &lt;a href=&#34;https://github.com/standardrb/standard-rails&#34;&gt;standard-rails&lt;/a&gt;, you can configure it by adding it to &lt;code&gt;plugins&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;plugins:&#xA;  - standard-rails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each plugin can be passed configuration options by specifying them in a nested hash. For example, &lt;code&gt;standard-rails&lt;/code&gt; allows you to configure its rules for a particular version of Rails (though this will usually be detected for you automatically):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;plugins:&#xA;  - standard-rails:&#xA;      target_rails_version: 7.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can develop your own plugins, too! Check out the &lt;a href=&#34;https://github.com/standardrb/lint_roller&#34;&gt;lint_roller&lt;/a&gt; gem to learn how. For a simple example, you can look at &lt;a href=&#34;https://github.com/standardrb/standard-custom&#34;&gt;standard-custom&lt;/a&gt;, which is one of the default plugins included by Standard.&lt;/p&gt; &#xA;&lt;h3&gt;Extended config files&lt;/h3&gt; &#xA;&lt;p&gt;Of course, you may want to add more rules without going to the trouble of packaging them in a plugin gem. For cases like this, you can define one or more &lt;a href=&#34;https://docs.rubocop.org/rubocop/configuration.html&#34;&gt;RuboCop configuration files&lt;/a&gt; and then list them in your &lt;code&gt;.standard.yml&lt;/code&gt; file under &lt;code&gt;extend_config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, after installing the &lt;a href=&#34;https://github.com/Betterment/betterlint&#34;&gt;betterlint&lt;/a&gt; gem from our friends at &lt;a href=&#34;https://www.betterment.com&#34;&gt;Betterment&lt;/a&gt;, we could create a RuboCop config file named &lt;code&gt;.betterlint.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;require:&#xA;  - rubocop/cop/betterment.rb&#xA;&#xA;Betterment/UnscopedFind:&#xA;  Enabled: true&#xA;&#xA;  unauthenticated_models:&#xA;    - SystemConfiguration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then reference it in our &lt;code&gt;.standard.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;extend_config:&#xA;  - .betterlint.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Standard&#39;s rules via RuboCop&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note that the following usage is not supported and may break at any time. Use at your own risk and please refrain from opening GitHub issues with respect to loading Standard or its plugins&#39; YAML configurations for use by the &lt;code&gt;rubocop&lt;/code&gt; CLI.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you find that neither plugins or configuration extensions meet your needs or if you have some other reason to run Standard&#39;s rules with RuboCop&#39;s CLI (e.g., to continue using your favorite IDE/tooling/workflow with RuboCop support) Evil Martians also maintains &lt;a href=&#34;https://evilmartians.com/chronicles/rubocoping-with-legacy-bring-your-ruby-code-up-to-standard&#34;&gt;a regularly updated guide&lt;/a&gt; on how to configure RuboCop to load and execute Standard&#39;s ruleset.&lt;/p&gt; &#xA;&lt;p&gt;In short, you can configure this in your &lt;code&gt;.rubocop.yml&lt;/code&gt; to load Standard&#39;s three default rulesets, just as you would any other gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;require:&#xA;  - standard&#xA;  - rubocop-performance&#xA;&#xA;inherit_gem:&#xA;  standard: config/base.yml&#xA;  standard-performance: config/base.yml&#xA;  standard-custom: config/base.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Who uses Standard Ruby?&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few examples of Ruby Standard-compliant teams &amp;amp; projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testdouble.com/agency&#34;&gt;Test Double&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/&#34;&gt;Amazon Web Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arrows.to/&#34;&gt;Arrows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://avohq.io/&#34;&gt;Avo Admin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.babylist.com/&#34;&gt;Babylist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brandnewbox.com&#34;&gt;Brand New Box&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brave-intl/publishers&#34;&gt;Brave Software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://collectiveidea.com/&#34;&gt;Collective Idea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.culturefoundry.com/&#34;&gt;Culture Foundry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.donut.com/&#34;&gt;Donut&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elevatelabs.com&#34;&gt;Elevate Labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.envoy.com&#34;&gt;Envoy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evilmartians.com&#34;&gt;Evil Martians&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firstline.org/&#34;&gt;Firstline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hashrocket.com&#34;&gt;Hashrocket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.honeybadger.io&#34;&gt;Honeybadger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetthoughts.com/&#34;&gt;JetThoughts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://levups.com&#34;&gt;Level UP Solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.monterail.com&#34;&gt;Monterail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.myrent.co.nz&#34;&gt;myRent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oblsk.com/&#34;&gt;OBLSK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oysterhr.com/&#34;&gt;Oyster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.planetargon.com/&#34;&gt;Planet Argon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plt4m.com/&#34;&gt;PLT4M&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.podia.com/&#34;&gt;Podia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rebaseinteractive.com/&#34;&gt;Rebase Interactive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.renuo.ch/&#34;&gt;Renuo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruby.ci&#34;&gt;RubyCI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spinalcms.com/&#34;&gt;Spinal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.teamtailor.com/&#34;&gt;Teamtailor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thoughtbot.com/&#34;&gt;thoughtbot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Does your team use Standard? &lt;a href=&#34;https://github.com/standardrb/standard/edit/main/README.md&#34;&gt;Add your name to the list&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;If you really want to show off, you can also add a badge to your project&#39;s README, like this one:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/standardrb/standard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Code Style&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;[![Ruby Code Style](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://github.com/standardrb/standard)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project follows Test Double&#39;s &lt;a href=&#34;https://testdouble.com/code-of-conduct&#34;&gt;code of conduct&lt;/a&gt; for all community interactions, including (but not limited to) one-on-one communications, public posts/comments, code reviews, pull requests, and GitHub issues. If violations occur, Test Double will take any action they deem appropriate for the infraction, up to and including blocking a user from the organization&#39;s repositories.&lt;/p&gt;</summary>
  </entry>
</feed>