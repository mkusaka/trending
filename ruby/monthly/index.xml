<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-01T01:55:13Z</updated>
  <subtitle>Monthly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>urbanadventurer/WhatWeb</title>
    <updated>2024-08-01T01:55:13Z</updated>
    <id>tag:github.com,2024-08-01:/urbanadventurer/WhatWeb</id>
    <link href="https://github.com/urbanadventurer/WhatWeb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Next generation web scanner&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/urbanadventurer/whatweb/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv2-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/stable_release-0.5.5-blue.svg?sanitize=true&#34; alt=&#34;Stable Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/plugins-1824-brightgreen.svg?sanitize=true&#34; alt=&#34;WhatWeb Plugins&#34;&gt; &lt;a href=&#34;https://repology.org/project/whatweb/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/whatweb.svg?sanitize=true&#34; alt=&#34;Repositories&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://morningstarsecurity.com/wp-content/uploads/2019/02/WhatWeb-Logo-800px.png&#34; alt=&#34;logo&#34; title=&#34;WhatWeb Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WhatWeb - Next generation web scanner&lt;/h1&gt; &#xA;&lt;p&gt;Developed by Andrew Horton &lt;a href=&#34;https://github.com/urbanadventurer/&#34;&gt;urbanadventurer&lt;/a&gt; and Brendan Coles &lt;a href=&#34;https://github.com/bcoles/&#34;&gt;bcoles&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest Release: v0.5.5. January 16, 2021&lt;/p&gt; &#xA;&lt;p&gt;License: GPLv2&lt;/p&gt; &#xA;&lt;p&gt;This product is subject to the terms detailed in the license agreement. For more information about WhatWeb visit:&lt;/p&gt; &#xA;&lt;p&gt;Homepage: &lt;a href=&#34;https://morningstarsecurity.com/research/whatweb&#34;&gt;https://morningstarsecurity.com/research/whatweb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wiki: &lt;a href=&#34;https://github.com/urbanadventurer/WhatWeb/wiki/&#34;&gt;https://github.com/urbanadventurer/WhatWeb/wiki/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, comments or concerns regarding WhatWeb, please consult the documentation prior to contacting one of the developers. Your feedback is always welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About WhatWeb&lt;/li&gt; &#xA; &lt;li&gt;Example Usage&lt;/li&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA; &lt;li&gt;Logging &amp;amp; Output&lt;/li&gt; &#xA; &lt;li&gt;Plugins&lt;/li&gt; &#xA; &lt;li&gt;Aggression&lt;/li&gt; &#xA; &lt;li&gt;Performance &amp;amp; Stability&lt;/li&gt; &#xA; &lt;li&gt;Optional Dependencies&lt;/li&gt; &#xA; &lt;li&gt;Writing Plugins&lt;/li&gt; &#xA; &lt;li&gt;Updates &amp;amp; Additional Information&lt;/li&gt; &#xA; &lt;li&gt;Release History&lt;/li&gt; &#xA; &lt;li&gt;Credits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About WhatWeb&lt;/h2&gt; &#xA;&lt;p&gt;WhatWeb identifies websites. Its goal is to answer the question, &#34;What is that Website?&#34;. WhatWeb recognises web technologies including content management systems (CMS), blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices. WhatWeb has over 1800 plugins, each to recognise something different. WhatWeb also identifies version numbers, email addresses, account IDs, web framework modules, SQL errors, and more.&lt;/p&gt; &#xA;&lt;p&gt;WhatWeb can be stealthy and fast, or thorough but slow. WhatWeb supports an aggression level to control the trade off between speed and reliability. When you visit a website in your browser, the transaction includes many hints of what web technologies are powering that website. Sometimes a single webpage visit contains enough information to identify a website but when it does not, WhatWeb can interrogate the website further. The default level of aggression, called &#39;stealthy&#39;, is the fastest and requires only one HTTP request of a website. This is suitable for scanning public websites. More aggressive modes were developed for use in penetration tests.&lt;/p&gt; &#xA;&lt;p&gt;Most WhatWeb plugins are thorough and recognise a range of cues from subtle to obvious. For example, most WordPress websites can be identified by the meta HTML tag, e.g. &#39;&#xA; &lt;meta name=&#34;generator&#34; content=&#34;WordPress 2.6.5&#34;&gt;&#39;, but a minority of WordPress websites remove this identifying tag but this does not thwart WhatWeb. The WordPress WhatWeb plugin has over 15 tests, which include checking the favicon, default installation files, login pages, and checking for &#34;/wp-content/&#34; within relative links.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Over 1800 plugins&lt;/li&gt; &#xA; &lt;li&gt;Control the trade off between speed/stealth and reliability&lt;/li&gt; &#xA; &lt;li&gt;Performance tuning. Control how many websites to scan concurrently.&lt;/li&gt; &#xA; &lt;li&gt;Multiple log formats: Brief (greppable), Verbose (human readable), XML, JSON, MagicTree, RubyObject, MongoDB, ElasticSearch, SQL.&lt;/li&gt; &#xA; &lt;li&gt;Proxy support including TOR&lt;/li&gt; &#xA; &lt;li&gt;Custom HTTP headers&lt;/li&gt; &#xA; &lt;li&gt;Basic HTTP authentication&lt;/li&gt; &#xA; &lt;li&gt;Control over webpage redirection&lt;/li&gt; &#xA; &lt;li&gt;IP address ranges&lt;/li&gt; &#xA; &lt;li&gt;Fuzzy matching&lt;/li&gt; &#xA; &lt;li&gt;Result certainty awareness&lt;/li&gt; &#xA; &lt;li&gt;Custom plugins defined on the command line&lt;/li&gt; &#xA; &lt;li&gt;IDN (International Domain Name) support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;p&gt;Using WhatWeb to scan reddit.com.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./whatweb reddit.com&#xA;http://reddit.com [301 Moved Permanently] Country[UNITED STATES][US], HTTPServer[snooserv], IP[151.101.65.140], RedirectLocation[https://www.reddit.com/], UncommonHeaders[retry-after,x-served-by,x-cache-hits,x-timer], Via-Proxy[1.1 varnish]&#xA;https://www.reddit.com/ [200 OK] Cookies[edgebucket,eu_cookie_v2,loid,rabt,rseor3,session_tracker,token], Country[UNITED STATES][US], Email[banner@2x.png,snoo-home@2x.png], Frame, HTML5, HTTPServer[snooserv], HttpOnly[token], IP[151.101.37.140], Open-Graph-Protocol[website], Script[text/javascript], Strict-Transport-Security[max-age=15552000; includeSubDomains; preload], Title[reddit: the front page of the internet], UncommonHeaders[fastly-restarts,x-served-by,x-cache-hits,x-timer], Via-Proxy[1.1 varnish], X-Frame-Options[SAMEORIGIN]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;.$$$     $.                                   .$$$     $.         &#xA;$$$$     $$. .$$$  $$$ .$$$$$$.  .$$$$$$$$$$. $$$$     $$. .$$$$$$$. .$$$$$$. &#xA;$ $$     $$$ $ $$  $$$ $ $$$$$$. $$$$$ $$$$$$ $ $$     $$$ $ $$   $$ $ $$$$$$.&#xA;$ `$     $$$ $ `$  $$$ $ `$  $$$ $$&#39; $ `$ `$$ $ `$     $$$ $ `$      $ `$  $$$&#39;&#xA;$. $     $$$ $. $$$$$$ $. $$$$$$ `$  $. $  :&#39; $. $     $$$ $. $$$$   $. $$$$$.&#xA;$::$  .  $$$ $::$  $$$ $::$  $$$     $::$     $::$  .  $$$ $::$      $::$  $$$$&#xA;$;;$ $$$ $$$ $;;$  $$$ $;;$  $$$     $;;$     $;;$ $$$ $$$ $;;$      $;;$  $$$$&#xA;$$$$$$ $$$$$ $$$$  $$$ $$$$  $$$     $$$$     $$$$$$ $$$$$ $$$$$$$$$ $$$$$$$$$&#39;&#xA;&#xA;WhatWeb - Next generation web scanner version 0.5.5.&#xA;Developed by Andrew Horton (urbanadventurer) and Brendan Coles (bcoles)&#xA;Homepage: https://morningstarsecurity.com/research/whatweb&#xA;&#xA;Usage: whatweb [options] &amp;lt;URLs&amp;gt;&#xA;&#xA;TARGET SELECTION:&#xA;  &amp;lt;TARGETs&amp;gt;             Enter URLs, hostnames, IP addresses, filenames or&#xA;                        IP ranges in CIDR, x.x.x-x, or x.x.x.x-x.x.x.x&#xA;                        format.&#xA;  --input-file=FILE, -i Read targets from a file. You can pipe&#xA;                        hostnames or URLs directly with -i /dev/stdin.&#xA;&#xA;TARGET MODIFICATION:&#xA;  --url-prefix          Add a prefix to target URLs.&#xA;  --url-suffix          Add a suffix to target URLs.&#xA;  --url-pattern         Insert the targets into a URL. Requires --input-file,&#xA;                        eg. www.example.com/%insert%/robots.txt &#xA;&#xA;AGGRESSION:&#xA;  The aggression level controls the trade-off between speed/stealth and&#xA;  reliability.&#xA;  --aggression, -a=LEVEL Set the aggression level. Default: 1.&#xA;  Aggression levels are:&#xA;  1. Stealthy   Makes one HTTP request per target. Also follows redirects.&#xA;  3. Aggressive If a level 1 plugin is matched, additional requests will be&#xA;      made.&#xA;  4. Heavy      Makes a lot of HTTP requests per target. Aggressive tests from&#xA;      all plugins are used for all URLs.&#xA;&#xA;HTTP OPTIONS:&#xA;  --user-agent, -U=AGENT Identify as AGENT instead of WhatWeb/0.5.5.&#xA;  --header, -H          Add an HTTP header. eg &#34;Foo:Bar&#34;. Specifying a default&#xA;                        header will replace it. Specifying an empty value, eg.&#xA;                        &#34;User-Agent:&#34; will remove the header.&#xA;  --follow-redirect=WHEN Control when to follow redirects. WHEN may be `never&#39;,&#xA;                        `http-only&#39;, `meta-only&#39;, `same-site&#39;, or `always&#39;.&#xA;                        Default: always.&#xA;  --max-redirects=NUM   Maximum number of contiguous redirects. Default: 10.&#xA;&#xA;AUTHENTICATION:&#xA;  --user, -u=&amp;lt;user:password&amp;gt; HTTP basic authentication.&#xA;  --cookie, -c=COOKIES  Provide cookies, e.g. &#39;name=value; name2=value2&#39;.&#xA;  --cookiejar=FILE      Read cookies from a file.&#xA;&#xA;PROXY:&#xA;  --proxy           &amp;lt;hostname[:port]&amp;gt; Set proxy hostname and port.&#xA;                    Default: 8080.&#xA;  --proxy-user      &amp;lt;username:password&amp;gt; Set proxy user and password.&#xA;&#xA;PLUGINS:&#xA;  --list-plugins, -l            List all plugins.&#xA;  --info-plugins, -I=[SEARCH]   List all plugins with detailed information.&#xA;                                Optionally search with keywords in a comma&#xA;                                delimited list.&#xA;  --search-plugins=STRING       Search plugins for a keyword.&#xA;  --plugins, -p=LIST  Select plugins. LIST is a comma delimited set of &#xA;                      selected plugins. Default is all.&#xA;                      Each element can be a directory, file or plugin name and&#xA;                      can optionally have a modifier, eg. + or -&#xA;                      Examples: +/tmp/moo.rb,+/tmp/foo.rb&#xA;                      title,md5,+./plugins-disabled/&#xA;                      ./plugins-disabled,-md5&#xA;                      -p + is a shortcut for -p +plugins-disabled.&#xA;&#xA;  --grep, -g=STRING|REGEXP      Search for STRING or a Regular Expression. Shows &#xA;                                only the results that match.&#xA;                                Examples: --grep &#34;hello&#34;&#xA;                                --grep &#34;/he[l]*o/&#34;&#xA;  --custom-plugin=DEFINITION\tDefine a custom plugin named Custom-Plugin,&#xA;  --custom-plugin=DEFINITION  Define a custom plugin named Custom-Plugin,&#xA;                        Examples: &#34;:text=&amp;gt;&#39;powered by abc&#39;&#34;&#xA;                        &#34;:version=&amp;gt;/powered[ ]?by ab[0-9]/&#34;&#xA;                        &#34;:ghdb=&amp;gt;&#39;intitle:abc \&#34;powered by abc\&#34;&#39;&#34;&#xA;                        &#34;:md5=&amp;gt;&#39;8666257030b94d3bdb46e05945f60b42&#39;&#34;&#xA;  --dorks=PLUGIN        List Google dorks for the selected plugin.&#xA;&#xA;OUTPUT:&#xA;  --verbose, -v         Verbose output includes plugin descriptions. Use twice&#xA;                        for debugging.&#xA;  --colour,--color=WHEN control whether colour is used. WHEN may be `never&#39;,&#xA;                        `always&#39;, or `auto&#39;.&#xA;  --quiet, -q           Do not display brief logging to STDOUT.&#xA;  --no-errors           Suppress error messages.&#xA;&#xA;LOGGING:&#xA;  --log-brief=FILE        Log brief, one-line output.&#xA;  --log-verbose=FILE      Log verbose output.&#xA;  --log-errors=FILE       Log errors.&#xA;  --log-xml=FILE          Log XML format.&#xA;  --log-json=FILE         Log JSON format.&#xA;  --log-sql=FILE          Log SQL INSERT statements.&#xA;  --log-sql-create=FILE   Create SQL database tables.&#xA;  --log-json-verbose=FILE Log JSON Verbose format.&#xA;  --log-magictree=FILE    Log MagicTree XML format.&#xA;  --log-object=FILE       Log Ruby object inspection format.&#xA;  --log-mongo-database    Name of the MongoDB database.&#xA;  --log-mongo-collection  Name of the MongoDB collection. Default: whatweb.&#xA;  --log-mongo-host        MongoDB hostname or IP address. Default: 0.0.0.0.&#xA;  --log-mongo-username    MongoDB username. Default: nil.&#xA;  --log-mongo-password    MongoDB password. Default: nil.  &#xA;  --log-elastic-index     Name of the index to store results. Default: whatweb &#xA;  --log-elastic-host      Host:port of the elastic http interface. Default: 127.0.0.1:9200&#xA;  &#xA;PERFORMANCE &amp;amp; STABILITY:&#xA;  --max-threads, -t       Number of simultaneous threads. Default: 25.&#xA;  --open-timeout          Time in seconds. Default: 15.&#xA;  --read-timeout          Time in seconds. Default: 30.&#xA;  --wait=SECONDS          Wait SECONDS between connections.&#xA;                          This is useful when using a single thread.&#xA;&#xA;HELP &amp;amp; MISCELLANEOUS:&#xA;  --short-help            Short usage help.&#xA;  --help, -h              Complete usage help.&#xA;  --debug                 Raise errors in plugins.&#xA;  --version               Display version information. (WhatWeb 0.5.5).&#xA;&#xA;EXAMPLE USAGE:&#xA;* Scan example.com.&#xA;  ./whatweb example.com&#xA;* Scan reddit.com slashdot.org with verbose plugin descriptions.&#xA;  ./whatweb -v reddit.com slashdot.org&#xA;* An aggressive scan of wired.com detects the exact version of WordPress.&#xA;  ./whatweb -a 3 www.wired.com&#xA;* Scan the local network quickly and suppress errors.&#xA;  whatweb --no-errors 192.168.0.0/24&#xA;* Scan the local network for https websites.&#xA;  whatweb --no-errors --url-prefix https:// 192.168.0.0/24&#xA;* Scan for crossdomain policies in the Alexa Top 1000.&#xA;  ./whatweb -i plugin-development/alexa-top-100.txt \&#xA;  --url-suffix /crossdomain.xml -p crossdomain_xml&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging &amp;amp; Output&lt;/h2&gt; &#xA;&lt;p&gt;The following types of logging are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;--log-brief=FILE Brief, one-line, greppable format&lt;/li&gt; &#xA; &lt;li&gt;--log-verbose=FILE Verbose&lt;/li&gt; &#xA; &lt;li&gt;--log-xml=FILE XML format. XSL stylesheet is provided&lt;/li&gt; &#xA; &lt;li&gt;--log-json=FILE JSON format&lt;/li&gt; &#xA; &lt;li&gt;--log-json-verbose=FILE JSON verbose format&lt;/li&gt; &#xA; &lt;li&gt;--log-magictree=FILE MagicTree XML format&lt;/li&gt; &#xA; &lt;li&gt;--log-object=FILE Ruby object inspection format&lt;/li&gt; &#xA; &lt;li&gt;--log-mongo-database Name of the MongoDB database&lt;/li&gt; &#xA; &lt;li&gt;--log-mongo-collection Name of the MongoDB collection. Default: whatweb&lt;/li&gt; &#xA; &lt;li&gt;--log-mongo-host MongoDB hostname or IP address. Default: 0.0.0.0&lt;/li&gt; &#xA; &lt;li&gt;--log-mongo-username MongoDB username. Default: nil&lt;/li&gt; &#xA; &lt;li&gt;--log-mongo-password MongoDB password. Default: nil&lt;/li&gt; &#xA; &lt;li&gt;--log-elastic-index Name of the index to store results. Default: whatweb&lt;/li&gt; &#xA; &lt;li&gt;--log-elastic-host Host:port of the elastic http interface. Default: 127.0.0.1:9200&lt;/li&gt; &#xA; &lt;li&gt;--log-errors=FILE Log errors. This is usually printed to the screen in red.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can output to multiple logs simultaneously by specifying multiple command line logging options. Advanced users who want SQL output should read the source code to see unsupported features.&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Matches are made with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Text strings (case sensitive)&lt;/li&gt; &#xA; &lt;li&gt;Regular expressions&lt;/li&gt; &#xA; &lt;li&gt;Google Hack Database queries (limited set of keywords)&lt;/li&gt; &#xA; &lt;li&gt;MD5 hashes&lt;/li&gt; &#xA; &lt;li&gt;URL recognition&lt;/li&gt; &#xA; &lt;li&gt;HTML tag patterns&lt;/li&gt; &#xA; &lt;li&gt;Custom ruby code for passive and aggressive operations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To list the plugins supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./whatweb -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WhatWeb Plugin List&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plugin Name - Description&#xA;--------------------------------------------------------------------------------&#xA;1024-CMS - 1024 is one of a few CMS&#39;s leading the way with the implementation...&#xA;360-Web-Manager - 360-Web-Manager&#xA;3COM-NBX - 3COM NBX phone system. The NBX NetSet utility is a web interface i...&#xA;3dcart - 3dcart - The 3dcart Shopping Cart Software is a complete ecommerce s...&#xA;4D - 4D web application deployment server&#xA;4images - 4images is a powerful web-based image gallery management system. Fe...&#xA;... (truncated)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Search Plugins&lt;/h3&gt; &#xA;&lt;p&gt;To view more detail about a plugin or search plugins for a keyword:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./whatweb -I phpBB&#xA;&#xA;WhatWeb Detailed Plugin List&#xA;Searching for phpBB&#xA;================================================================================&#xA;Plugin:         phpBB&#xA;--------------------------------------------------------------------------------&#xA;Description:    phpBB is a free forum &#xA;Website:        http://phpbb.org/&#xA;&#xA;Author:         Andrew Horton&#xA;Version:        0.3&#xA;&#xA;Features:       [Yes]  Pattern Matching (7)&#xA;                [Yes]  Version detection from pattern matching&#xA;                [Yes]  Function for passive matches&#xA;                [Yes]  Function for aggressive matches&#xA;                [Yes]  Google Dorks (1)&#xA;&#xA;Google Dorks:&#xA;[1] &#34;Powered by phpBB&#34;&#xA;================================================================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin Selection&lt;/h3&gt; &#xA;&lt;p&gt;All plugins are loaded by default.&lt;/p&gt; &#xA;&lt;p&gt;Plugins can be selected by directories, files or plugin names as a comma delimited list with the -p or --plugin command line option.&lt;/p&gt; &#xA;&lt;p&gt;Each list item may have a modifier: + adds to the full set, - removes from the full set and no modifier overrides the defaults.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;--plugins +plugins-disabled,-foobar&lt;/li&gt; &#xA; &lt;li&gt;--plugins +/tmp/moo.rb&lt;/li&gt; &#xA; &lt;li&gt;--plugins foobar (only select foobar)&lt;/li&gt; &#xA; &lt;li&gt;-p title,md5,+./plugins-disabled/&lt;/li&gt; &#xA; &lt;li&gt;-p ./plugins-disabled,-md5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The --dorks &#xA; &lt;plugin name&gt;&#xA;   command line option returns google dorks for the selected plugin. For example, --dorks wordpress returns &#34;is proudly powered by WordPress&#34;&#xA; &lt;/plugin&gt;&lt;/p&gt; &#xA;&lt;p&gt;The --grep, -g command line option searches the target page for the selected string and returns a match in a plugin called Grep if it is found.&lt;/p&gt; &#xA;&lt;h2&gt;Aggression&lt;/h2&gt; &#xA;&lt;p&gt;WhatWeb features several levels of aggression. By default the aggression level is set to 1 (stealthy) which sends a single HTTP GET request and also follows redirects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--aggression, -a&#xA;&#xA;  1. Stealthy Makes one HTTP request per target. Also follows redirects.&#xA;    2. Unused&#xA;    3. Aggressive Can make a handful of HTTP requests per target. This triggers&#xA;        aggressive plugins for targets only when those plugins are&#xA;        identified with a level 1 request first.&#xA;  4. Heavy  Makes a lot of HTTP requests per target. Aggressive tests from&#xA;        all plugins are used for all URLs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Level 3 aggressive plugins will guess more URLs and perform actions that are potentially unsuitable without permission. WhatWeb currently does not support any intrusion/exploit level tests in plugins.&lt;/p&gt; &#xA;&lt;h3&gt;An example of the different results between level 1 and level 3:&lt;/h3&gt; &#xA;&lt;p&gt;A level 1, stealthy scan identifies that smartor.is-root.com/forum/ uses phpBB version 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./whatweb smartor.is-root.com/forum/&#xA;http://smartor.is-root.com/forum/ [200] PasswordField[password], HTTPServer[Apache/2.2.15], PoweredBy[phpBB], Apache[2.2.15], IP[88.198.177.36], phpBB[2], PHP[5.2.13], X-Powered-By[PHP/5.2.13], Cookies[phpbb2mysql_data,phpbb2mysql_sid], Title[Smartors Mods Forums - Reloaded], Country[GERMANY][DE]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A level 3, aggressive scan triggers additional tests in the phpBB plugin which identifies that the website uses phpBB version 2.0.20 or higher:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./whatweb -p plugins/phpbb.rb -a 3 smartor.is-root.com/forum/&#xA;http://smartor.is-root.com/forum/ [200] phpBB[2,&amp;gt;2.0.20]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the use of the -p argument to select only the phpBB plugin. It is advisable, but not mandatory, to select a specific plugin when attempting to fingerprint software versions in aggressive mode. This approach is far more stealthy as it will limit the number of requests.&lt;/p&gt; &#xA;&lt;p&gt;WhatWeb has no caching so if you use aggressive plugins on redirecting URLs you may fetch the same files multiple times.&lt;/p&gt; &#xA;&lt;h2&gt;Performance &amp;amp; Stability&lt;/h2&gt; &#xA;&lt;p&gt;WhatWeb features several options to increase performance and stability.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;--max-threads, -t Number of simultaneous threads. Default: 25.&lt;/li&gt; &#xA; &lt;li&gt;--open-timeout Time in seconds. Default: 15&lt;/li&gt; &#xA; &lt;li&gt;--read-timeout Time in seconds. Default: 30&lt;/li&gt; &#xA; &lt;li&gt;--wait=SECONDS Wait SECONDS between connections This is useful when using a single thread.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The --wait and --max-threads commands can be used to assist in IDS evasion.&lt;/p&gt; &#xA;&lt;p&gt;Changing the user-agent using the -U or --user-agent command line option will avoid the Snort IDS rule for WhatWeb.&lt;/p&gt; &#xA;&lt;p&gt;If you are scanning ranges of IP addresses, it is much more efficient to use a port scanner like massscan to discover which have port 80 open before scanning with WhatWeb.&lt;/p&gt; &#xA;&lt;p&gt;Character set detection, with the Charset plugin dramatically decreases performance by requiring more CPU. This is required by JSON and MongoDB logging.&lt;/p&gt; &#xA;&lt;h2&gt;Optional Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;To enable MongoDB logging install the mongo gem. gem install mongo&lt;/p&gt; &#xA;&lt;p&gt;To enable character set detection and MongoDB logging install the rchardet gem. gem install rchardet cp plugins-disabled/charset.rb my-plugins/&lt;/p&gt; &#xA;&lt;h2&gt;Writing Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Plugins are easy to write. Start by going through the plugin tutorials in the &lt;em&gt;my-plugins/&lt;/em&gt; folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/urbanadventurer/WhatWeb/tree/master/my-plugins&#34;&gt;Plugin Tutorials&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An overview of the plugin tutorials is here. &lt;a href=&#34;https://github.com/urbanadventurer/WhatWeb/tree/master/plugin-development/plugin-tutorials.txt&#34;&gt;plugin-tutorials.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After progressing through the tutorials read through the Development section of the &lt;a href=&#34;https://github.com/urbanadventurer/WhatWeb/wiki/&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/urbanadventurer/WhatWeb/wiki/Sources-for-Plugin-Writing&#34;&gt;Sources for Plugin Writing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/urbanadventurer/WhatWeb/wiki/How-to-develop-WhatWeb-plugins&#34;&gt;How to Develop WhatWeb Plugins (not up to date)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updates &amp;amp; Additional Information&lt;/h2&gt; &#xA;&lt;p&gt;The WhatWeb development build features regular updates.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check the development branches for unreleased updates.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Browse the wiki for more documentation and advanced usage techniques.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wiki: &lt;a href=&#34;https://github.com/urbanadventurer/WhatWeb/wiki/&#34;&gt;https://github.com/urbanadventurer/WhatWeb/wiki/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Release History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version 0.5.5 Released January 16th, 2021&lt;/li&gt; &#xA; &lt;li&gt;Version 0.5.4 Released December 14th, 2020&lt;/li&gt; &#xA; &lt;li&gt;Version 0.5.3 Released October 1st, 2020&lt;/li&gt; &#xA; &lt;li&gt;Version 0.5.2 Released June 9th, 2020&lt;/li&gt; &#xA; &lt;li&gt;Version 0.5.1 Released Feburary 25th, 2020&lt;/li&gt; &#xA; &lt;li&gt;Version 0.5.0 Released June 9th, 2019&lt;/li&gt; &#xA; &lt;li&gt;Version 0.4.9 Released November 23rd, 2017&lt;/li&gt; &#xA; &lt;li&gt;Version 0.4.8-dev (Continuous release from 2012 to 2017)&lt;/li&gt; &#xA; &lt;li&gt;Version 0.4.7 Released April 5th, 2011&lt;/li&gt; &#xA; &lt;li&gt;Version 0.4.6 Released March 25th, 2011&lt;/li&gt; &#xA; &lt;li&gt;Version 0.4.5 Released August 17th, 2010&lt;/li&gt; &#xA; &lt;li&gt;Version 0.4.4 Released June 29th, 2010&lt;/li&gt; &#xA; &lt;li&gt;Version 0.4.3 Released May 24th, 2010&lt;/li&gt; &#xA; &lt;li&gt;Version 0.4.2 Released April 30th, 2010&lt;/li&gt; &#xA; &lt;li&gt;Version 0.4.1 Released April 28th, 2010&lt;/li&gt; &#xA; &lt;li&gt;Version 0.4 Released March 14th, 2010&lt;/li&gt; &#xA; &lt;li&gt;Version 0.3 Released at Kiwicon III (kiwicon.org), November 2nd, 2009&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;h3&gt;Developers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Andrew Horton (@urbanadventurer)&lt;/li&gt; &#xA; &lt;li&gt;Brendan Coles (@bcoles)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to the following people who have contributed to WhatWeb.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emilio Casbas&lt;/li&gt; &#xA; &lt;li&gt;Louis Nyffenegger&lt;/li&gt; &#xA; &lt;li&gt;Patrik Wallström (@pawal)&lt;/li&gt; &#xA; &lt;li&gt;Caleb Anderson (@dirtyfilthy)&lt;/li&gt; &#xA; &lt;li&gt;Tonmoy Saikia&lt;/li&gt; &#xA; &lt;li&gt;Aung Khant (@yehgdotnet)&lt;/li&gt; &#xA; &lt;li&gt;Erik Inge Bolsø&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:nk@dsigned.gr&#34;&gt;nk@dsigned.gr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Steve Milner (@ashcrow)&lt;/li&gt; &#xA; &lt;li&gt;Michal Ambroz&lt;/li&gt; &#xA; &lt;li&gt;Gremwell&lt;/li&gt; &#xA; &lt;li&gt;Sagar Prakash Junnarkar (@sagarjunnarkar)&lt;/li&gt; &#xA; &lt;li&gt;GertBerger&lt;/li&gt; &#xA; &lt;li&gt;Quintin Poirier&lt;/li&gt; &#xA; &lt;li&gt;Eric Sesterhenn&lt;/li&gt; &#xA; &lt;li&gt;dengjw (@jawa)&lt;/li&gt; &#xA; &lt;li&gt;Pedro Worcel (@droop)&lt;/li&gt; &#xA; &lt;li&gt;Matthieu Keller (@maggick)&lt;/li&gt; &#xA; &lt;li&gt;Peter (2pvdl)&lt;/li&gt; &#xA; &lt;li&gt;Napz (@RootCon)&lt;/li&gt; &#xA; &lt;li&gt;@nilx042&lt;/li&gt; &#xA; &lt;li&gt;Fabian Affolter (@fabaff)&lt;/li&gt; &#xA; &lt;li&gt;Andrew Silvernail (@buff3r)&lt;/li&gt; &#xA; &lt;li&gt;Andre Ricardo (@andrericardo)&lt;/li&gt; &#xA; &lt;li&gt;nikosk&lt;/li&gt; &#xA; &lt;li&gt;Patrick Thomas (@coffeetocode)&lt;/li&gt; &#xA; &lt;li&gt;Guillaume Delcaour (@guikcd)&lt;/li&gt; &#xA; &lt;li&gt;Sean (@wiifm69)&lt;/li&gt; &#xA; &lt;li&gt;Matthieu Keller (@maggick)&lt;/li&gt; &#xA; &lt;li&gt;Raul (@raurodse)&lt;/li&gt; &#xA; &lt;li&gt;Andrew Petro (@apetro)&lt;/li&gt; &#xA; &lt;li&gt;Artem Taranyuk (@610)&lt;/li&gt; &#xA; &lt;li&gt;Matti Paksula (@matti)&lt;/li&gt; &#xA; &lt;li&gt;Tim Smith (@tas50)&lt;/li&gt; &#xA; &lt;li&gt;Sarthak Munshi (@saru95)&lt;/li&gt; &#xA; &lt;li&gt;@rdubourguais&lt;/li&gt; &#xA; &lt;li&gt;@SlivTaMere&lt;/li&gt; &#xA; &lt;li&gt;@Code0x58&lt;/li&gt; &#xA; &lt;li&gt;@iGeek098&lt;/li&gt; &#xA; &lt;li&gt;@andreas-becker&lt;/li&gt; &#xA; &lt;li&gt;@csalazar&lt;/li&gt; &#xA; &lt;li&gt;@golewski&lt;/li&gt; &#xA; &lt;li&gt;@Allactaga&lt;/li&gt; &#xA; &lt;li&gt;@lins05&lt;/li&gt; &#xA; &lt;li&gt;@eliasdorneles&lt;/li&gt; &#xA; &lt;li&gt;@sigit&lt;/li&gt; &#xA; &lt;li&gt;dewanto&lt;/li&gt; &#xA; &lt;li&gt;@elcodigok&lt;/li&gt; &#xA; &lt;li&gt;@SlivTaMere&lt;/li&gt; &#xA; &lt;li&gt;@anozoozian&lt;/li&gt; &#xA; &lt;li&gt;Bhavin Senjaliya (@bhavin1223)&lt;/li&gt; &#xA; &lt;li&gt;Janosch Maier (@Phylu)&lt;/li&gt; &#xA; &lt;li&gt;@rmaksimov&lt;/li&gt; &#xA; &lt;li&gt;Naglis Jonaitis (@naglis)&lt;/li&gt; &#xA; &lt;li&gt;Igor Rzegocki (@ajgon)&lt;/li&gt; &#xA; &lt;li&gt;Melvil Guillaume (@mguillau42)&lt;/li&gt; &#xA; &lt;li&gt;@LrsK&lt;/li&gt; &#xA; &lt;li&gt;Janosch Maier (@phylu)&lt;/li&gt; &#xA; &lt;li&gt;@abenson&lt;/li&gt; &#xA; &lt;li&gt;@blshkv&lt;/li&gt; &#xA; &lt;li&gt;Weidsom Nascimento (@weidsom)&lt;/li&gt; &#xA; &lt;li&gt;Marcelo Gimenes @cgimenes&lt;/li&gt; &#xA; &lt;li&gt;@xambroz&lt;/li&gt; &#xA; &lt;li&gt;Baptiste Fontaine (@bfontaine)&lt;/li&gt; &#xA; &lt;li&gt;@juananpe&lt;/li&gt; &#xA; &lt;li&gt;@definity&lt;/li&gt; &#xA; &lt;li&gt;@huntertl&lt;/li&gt; &#xA; &lt;li&gt;Max Davitt (@themaxdavitt)&lt;/li&gt; &#xA; &lt;li&gt;Gregory Boddin (@gboddin)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is difficult to keep track of all the people who have contributed to WhatWeb. If your name is missing then please let me know.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>activerecord-hackery/ransack</title>
    <updated>2024-08-01T01:55:13Z</updated>
    <id>tag:github.com,2024-08-01:/activerecord-hackery/ransack</id>
    <link href="https://github.com/activerecord-hackery/ransack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Object-based searching.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/activerecord-hackery/ransack/main/docs/static/logo/ransack-h.png&#34; alt=&#34;Ransack&#34; title=&#34;Ransack&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/activerecord-hackery/ransack/actions&#34;&gt;&lt;img src=&#34;https://github.com/activerecord-hackery/ransack/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/rb/ransack&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/ransack.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/activerecord-hackery/ransack&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/activerecord-hackery/ransack/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/activerecord-hackery/ransack/main/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/activerecord-hackery/ransack/main/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Ransack will help you easily add &lt;strong&gt;searching to your Rails application&lt;/strong&gt;, without any additional dependencies.&lt;/p&gt; &#xA;&lt;p&gt;There are advanced searching solutions around, like ElasticSearch or Algolia. &lt;strong&gt;Ransack&lt;/strong&gt; will do the job for many Rails websites, without the need to run additional infrastructure or work in a different language. With Ransack you do it all with standard Ruby and ERB.&lt;/p&gt; &#xA;&lt;p&gt;Ready to move beyond the basics? Use &lt;strong&gt;advanced features&lt;/strong&gt; like i18n and extensive configuration options.&lt;/p&gt; &#xA;&lt;p&gt;Ransack is supported for Rails 7.2, 7.1, 7.0, 6.1 on Ruby 3.1 and later.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install &lt;code&gt;ransack&lt;/code&gt; and add it to your Gemfile, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;ransack&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bleeding edge&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to use the latest updates not yet published to RubyGems, use the &lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;ransack&#39;, :github =&amp;gt; &#39;activerecord-hackery/ransack&#39;, :branch =&amp;gt; &#39;main&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;There is &lt;a href=&#34;https://activerecord-hackery.github.io/ransack/&#34;&gt;extensive documentation on Ransack&lt;/a&gt;, which is a &lt;a href=&#34;https://docusaurus.io/&#34;&gt;Docusaurus&lt;/a&gt; project and run as a GitHub Pages site.&lt;/p&gt; &#xA;&lt;h2&gt;Issues tracker&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Before filing an issue, please read the &lt;a href=&#34;https://raw.githubusercontent.com/activerecord-hackery/ransack/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;File an issue if a bug is caused by Ransack, is new (has not already been reported), and &lt;em&gt;can be reproduced from the information you provide&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please consider adding a branch with a failing spec describing the problem.&lt;/li&gt; &#xA; &lt;li&gt;Contributions are welcome. &lt;span&gt;😃&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Please do not use the issue tracker for personal support requests. Stack Overflow or &lt;a href=&#34;https://github.com/activerecord-hackery/ransack/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; is a better place for that where a wider community can help you!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;To support the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consider supporting us via &lt;a href=&#34;https://opencollective.com/ransack/backers/badge.svg&#34;&gt;Open Collective&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use Ransack in your apps, and let us know if you encounter anything that&#39;s broken or missing. A failing spec to demonstrate the issue is awesome. A pull request with passing tests is even better!&lt;/li&gt; &#xA; &lt;li&gt;Before filing an issue or pull request, be sure to read and follow the &lt;a href=&#34;https://raw.githubusercontent.com/activerecord-hackery/ransack/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please use Stack Overflow or &lt;a href=&#34;https://github.com/activerecord-hackery/ransack/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; for questions or discussion not directly related to bug reports, pull requests, or documentation improvements.&lt;/li&gt; &#xA; &lt;li&gt;Spread the word on social media if Ransack&#39;s been useful to you. The more people who are using the project, the quicker we can find and fix bugs!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Ransack was created by &lt;a href=&#34;http://twitter.com/erniemiller&#34;&gt;Ernie Miller&lt;/a&gt; and is developed and maintained by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scarroll32&#34;&gt;Sean Carroll&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deivid-rodriguez&#34;&gt;Deivid Rodriguez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gregmolnar&#34;&gt;Greg Molnar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/activerecord-hackery/ransack/graphs/contributors&#34;&gt;A great group of contributors&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ransack&#39;s logo is designed by &lt;a href=&#34;https://github.com/anilkilic&#34;&gt;Anıl Kılıç&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alumni Maintainers&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/jonatack&#34;&gt;Jon Atack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/ryanbigg&#34;&gt;Ryan Bigg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;img src=&#34;https://opencollective.com/ransack/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/ransack#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ransack#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/ransack#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ransack/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ransack/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ransack/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rails/solid_queue</title>
    <updated>2024-08-01T01:55:13Z</updated>
    <id>tag:github.com,2024-08-01:/rails/solid_queue</id>
    <link href="https://github.com/rails/solid_queue" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Database-backed Active Job backend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Solid Queue&lt;/h1&gt; &#xA;&lt;p&gt;Solid Queue is a DB-based queuing backend for &lt;a href=&#34;https://edgeguides.rubyonrails.org/active_job_basics.html&#34;&gt;Active Job&lt;/a&gt;, designed with simplicity and performance in mind.&lt;/p&gt; &#xA;&lt;p&gt;Besides regular job enqueuing and processing, Solid Queue supports delayed jobs, concurrency controls, pausing queues, numeric priorities per job, priorities by queue order, and bulk enqueuing (&lt;code&gt;enqueue_all&lt;/code&gt; for Active Job&#39;s &lt;code&gt;perform_all_later&lt;/code&gt;). &lt;em&gt;Improvements to logging and instrumentation, a better CLI tool, a way to run within an existing process in &#34;async&#34; mode, and some way of specifying unique jobs are coming very soon.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Solid Queue can be used with SQL databases such as MySQL, PostgreSQL or SQLite, and it leverages the &lt;code&gt;FOR UPDATE SKIP LOCKED&lt;/code&gt; clause, if available, to avoid blocking and waiting on locks when polling jobs. It relies on Active Job for retries, discarding, error handling, serialization, or delays, and it&#39;s compatible with Ruby on Rails multi-threading.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and usage&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;solid_queue&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install solid_queue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you need to install the necessary migrations and configure the Active Job&#39;s adapter. You can do both at once using the provided generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bin/rails generate solid_queue:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will set &lt;code&gt;solid_queue&lt;/code&gt; as the Active Job&#39;s adapter in production, and will copy the required migration over to your app.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can add only the migration to your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bin/rails solid_queue:install:migrations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And set Solid Queue as your Active Job&#39;s queue backend manually, in your environment config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/environments/production.rb&#xA;config.active_job.queue_adapter = :solid_queue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can set only specific jobs to use Solid Queue as their backend if you&#39;re migrating from another adapter and want to move jobs progressively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/jobs/my_job.rb&#xA;&#xA;class MyJob &amp;lt; ApplicationJob&#xA;  self.queue_adapter = :solid_queue&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you need to run the migrations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bin/rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this, you&#39;ll be ready to enqueue jobs using Solid Queue, but you need to start Solid Queue&#39;s supervisor to run them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec rake solid_queue:start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start processing jobs in all queues using the default configuration. See &lt;a href=&#34;https://raw.githubusercontent.com/rails/solid_queue/main/#configuration&#34;&gt;below&lt;/a&gt; to learn more about configuring Solid Queue.&lt;/p&gt; &#xA;&lt;p&gt;For small projects, you can run Solid Queue on the same machine as your webserver. When you&#39;re ready to scale, Solid Queue supports horizontal scaling out-of-the-box. You can run Solid Queue on a separate server from your webserver, or even run &lt;code&gt;bundle exec rake solid_queue:start&lt;/code&gt; on multiple machines at the same time. If you&#39;d like to designate some machines to be only dispatchers or only workers, use &lt;code&gt;bundle exec rake solid_queue:dispatch&lt;/code&gt; or &lt;code&gt;bundle exec rake solid_queue:work&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Besides Rails 7.1, Solid Queue works best with MySQL 8+ or PostgreSQL 9.5+, as they support &lt;code&gt;FOR UPDATE SKIP LOCKED&lt;/code&gt;. You can use it with older versions, but in that case, you might run into lock waits if you run multiple workers for the same queue.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Workers and dispatchers&lt;/h3&gt; &#xA;&lt;p&gt;We have three types of processes in Solid Queue:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Workers&lt;/em&gt; are in charge of picking jobs ready to run from queues and processing them. They work off the &lt;code&gt;solid_queue_ready_executions&lt;/code&gt; table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Dispatchers&lt;/em&gt; are in charge of selecting jobs scheduled to run in the future that are due and &lt;em&gt;dispatching&lt;/em&gt; them, which is simply moving them from the &lt;code&gt;solid_queue_scheduled_executions&lt;/code&gt; table over to the &lt;code&gt;solid_queue_ready_executions&lt;/code&gt; table so that workers can pick them up. They&#39;re also in charge of managing &lt;a href=&#34;https://raw.githubusercontent.com/rails/solid_queue/main/#recurring-tasks&#34;&gt;recurring tasks&lt;/a&gt;, dispatching jobs to process them according to their schedule. On top of that, they do some maintenance work related to &lt;a href=&#34;https://raw.githubusercontent.com/rails/solid_queue/main/#concurrency-controls&#34;&gt;concurrency controls&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;em&gt;supervisor&lt;/em&gt; forks workers and dispatchers according to the configuration, controls their heartbeats, and sends them signals to stop and start them when needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, Solid Queue will try to find your configuration under &lt;code&gt;config/solid_queue.yml&lt;/code&gt;, but you can set a different path using the environment variable &lt;code&gt;SOLID_QUEUE_CONFIG&lt;/code&gt;. This is what this configuration looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;production:&#xA;  dispatchers:&#xA;    - polling_interval: 1&#xA;      batch_size: 500&#xA;      concurrency_maintenance_interval: 300&#xA;  workers:&#xA;    - queues: &#34;*&#34;&#xA;      threads: 3&#xA;      polling_interval: 2&#xA;    - queues: [ real_time, background ]&#xA;      threads: 5&#xA;      polling_interval: 0.1&#xA;      processes: 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Everything is optional. If no configuration is provided, Solid Queue will run with one dispatcher and one worker with default settings.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;polling_interval&lt;/code&gt;: the time interval in seconds that workers and dispatchers will wait before checking for more jobs. This time defaults to &lt;code&gt;1&lt;/code&gt; second for dispatchers and &lt;code&gt;0.1&lt;/code&gt; seconds for workers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;batch_size&lt;/code&gt;: the dispatcher will dispatch jobs in batches of this size. The default is 500.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;concurrency_maintenance_interval&lt;/code&gt;: the time interval in seconds that the dispatcher will wait before checking for blocked jobs that can be unblocked. Read more about &lt;a href=&#34;https://raw.githubusercontent.com/rails/solid_queue/main/#concurrency-controls&#34;&gt;concurrency controls&lt;/a&gt; to learn more about this setting. It defaults to &lt;code&gt;600&lt;/code&gt; seconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;queues&lt;/code&gt;: the list of queues that workers will pick jobs from. You can use &lt;code&gt;*&lt;/code&gt; to indicate all queues (which is also the default and the behaviour you&#39;ll get if you omit this). You can provide a single queue, or a list of queues as an array. Jobs will be polled from those queues in order, so for example, with &lt;code&gt;[ real_time, background ]&lt;/code&gt;, no jobs will be taken from &lt;code&gt;background&lt;/code&gt; unless there aren&#39;t any more jobs waiting in &lt;code&gt;real_time&lt;/code&gt;. You can also provide a prefix with a wildcard to match queues starting with a prefix. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;staging:&#xA;  workers:&#xA;    - queues: staging*&#xA;      threads: 3&#xA;      polling_interval: 5&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will create a worker fetching jobs from all queues starting with &lt;code&gt;staging&lt;/code&gt;. The wildcard &lt;code&gt;*&lt;/code&gt; is only allowed on its own or at the end of a queue name; you can&#39;t specify queue names such as &lt;code&gt;*_some_queue&lt;/code&gt;. These will be ignored.&lt;/p&gt; &lt;p&gt;Finally, you can combine prefixes with exact names, like &lt;code&gt;[ staging*, background ]&lt;/code&gt;, and the behaviour with respect to order will be the same as with only exact names.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;threads&lt;/code&gt;: this is the max size of the thread pool that each worker will have to run jobs. Each worker will fetch this number of jobs from their queue(s), at most and will post them to the thread pool to be run. By default, this is &lt;code&gt;3&lt;/code&gt;. Only workers have this setting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;processes&lt;/code&gt;: this is the number of worker processes that will be forked by the supervisor with the settings given. By default, this is &lt;code&gt;1&lt;/code&gt;, just a single process. This setting is useful if you want to dedicate more than one CPU core to a queue or queues with the same configuration. Only workers have this setting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;concurrency_maintenance&lt;/code&gt;: whether the dispatcher will perform the concurrency maintenance work. This is &lt;code&gt;true&lt;/code&gt; by default, and it&#39;s useful if you don&#39;t use any &lt;a href=&#34;https://raw.githubusercontent.com/rails/solid_queue/main/#concurrency-controls&#34;&gt;concurrency controls&lt;/a&gt; and want to disable it or if you run multiple dispatchers and want some of them to just dispatch jobs without doing anything else.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recurring_tasks&lt;/code&gt;: a list of recurring tasks the dispatcher will manage. Read more details about this one in the &lt;a href=&#34;https://raw.githubusercontent.com/rails/solid_queue/main/#recurring-tasks&#34;&gt;Recurring tasks&lt;/a&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Queue order and priorities&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned above, if you specify a list of queues for a worker, these will be polled in the order given, such as for the list &lt;code&gt;real_time,background&lt;/code&gt;, no jobs will be taken from &lt;code&gt;background&lt;/code&gt; unless there aren&#39;t any more jobs waiting in &lt;code&gt;real_time&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Active Job also supports positive integer priorities when enqueuing jobs. In Solid Queue, the smaller the value, the higher the priority. The default is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is useful when you run jobs with different importance or urgency in the same queue. Within the same queue, jobs will be picked in order of priority, but in a list of queues, the queue order takes precedence, so in the previous example with &lt;code&gt;real_time,background&lt;/code&gt;, jobs in the &lt;code&gt;real_time&lt;/code&gt; queue will be picked before jobs in the &lt;code&gt;background&lt;/code&gt; queue, even if those in the &lt;code&gt;background&lt;/code&gt; queue have a higher priority (smaller value) set.&lt;/p&gt; &#xA;&lt;p&gt;We recommend not mixing queue order with priorities but either choosing one or the other, as that will make job execution order more straightforward for you.&lt;/p&gt; &#xA;&lt;h3&gt;Threads, processes and signals&lt;/h3&gt; &#xA;&lt;p&gt;Workers in Solid Queue use a thread pool to run work in multiple threads, configurable via the &lt;code&gt;threads&lt;/code&gt; parameter above. Besides this, parallelism can be achieved via multiple processes on one machine (configurable via different workers or the &lt;code&gt;processes&lt;/code&gt; parameter above) or by horizontal scaling.&lt;/p&gt; &#xA;&lt;p&gt;The supervisor is in charge of managing these processes, and it responds to the following signals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TERM&lt;/code&gt;, &lt;code&gt;INT&lt;/code&gt;: starts graceful termination. The supervisor will send a &lt;code&gt;TERM&lt;/code&gt; signal to its supervised processes, and it&#39;ll wait up to &lt;code&gt;SolidQueue.shutdown_timeout&lt;/code&gt; time until they&#39;re done. If any supervised processes are still around by then, it&#39;ll send a &lt;code&gt;QUIT&lt;/code&gt; signal to them to indicate they must exit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;QUIT&lt;/code&gt;: starts immediate termination. The supervisor will send a &lt;code&gt;QUIT&lt;/code&gt; signal to its supervised processes, causing them to exit immediately.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When receiving a &lt;code&gt;QUIT&lt;/code&gt; signal, if workers still have jobs in-flight, these will be returned to the queue when the processes are deregistered.&lt;/p&gt; &#xA;&lt;p&gt;If processes have no chance of cleaning up before exiting (e.g. if someone pulls a cable somewhere), in-flight jobs might remain claimed by the processes executing them. Processes send heartbeats, and the supervisor checks and prunes processes with expired heartbeats, which will release any claimed jobs back to their queues. You can configure both the frequency of heartbeats and the threshold to consider a process dead. See the section below for this.&lt;/p&gt; &#xA;&lt;h3&gt;Dedicated database configuration&lt;/h3&gt; &#xA;&lt;p&gt;Solid Queue can be configured to run on a different database than the main application.&lt;/p&gt; &#xA;&lt;p&gt;Configure the &lt;code&gt;connects_to&lt;/code&gt; option in &lt;code&gt;config/application.rb&lt;/code&gt; or your environment config, with the custom database configuration that will be used in the abstract &lt;code&gt;SolidQueue::Record&lt;/code&gt; Active Record model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # Use a separate DB for Solid Queue&#xA;  config.solid_queue.connects_to = { database: { writing: :solid_queue_primary, reading: :solid_queue_replica } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the dedicated database configuration to &lt;code&gt;config/database.yml&lt;/code&gt;, differentiating between the main app&#39;s database and the dedicated &lt;code&gt;solid_queue&lt;/code&gt; database. Make sure to include the &lt;code&gt;migrations_paths&lt;/code&gt; for the solid queue database. This is where migration files for Solid Queue tables will reside.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;default: &amp;amp;default&#xA;  adapter: sqlite3&#xA;  pool: &amp;lt;%= ENV.fetch(&#34;RAILS_MAX_THREADS&#34;) { 5 } %&amp;gt;&#xA;  timeout: 5000&#xA;&#xA;solid_queue: &amp;amp;solid_queue&#xA;  &amp;lt;&amp;lt;: *default&#xA;  migrations_paths: db/solid_queue_migrate&#xA;&#xA;development:&#xA;  primary:&#xA;    &amp;lt;&amp;lt;: *default&#xA;    # ...&#xA;  solid_queue_primary:&#xA;    &amp;lt;&amp;lt;: *solid_queue&#xA;    # ...&#xA;  solid_queue_replica:&#xA;    &amp;lt;&amp;lt;: *solid_queue&#xA;    # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install migrations and specify the dedicated database name with the &lt;code&gt;DATABASE&lt;/code&gt; option. This will create the Solid Queue migration files in a separate directory, matching the value provided in &lt;code&gt;migrations_paths&lt;/code&gt; in &lt;code&gt;config/database.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bin/rails solid_queue:install:migrations DATABASE=solid_queue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you&#39;ve already run the solid queue install command (&lt;code&gt;bin/rails generate solid_queue:install&lt;/code&gt;), the migration files will have already been generated under the primary database&#39;s &lt;code&gt;db/migrate/&lt;/code&gt; directory. You can remove these files and keep the ones generated by the database-specific migration installation above.&lt;/p&gt; &#xA;&lt;p&gt;Finally, run the migrations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bin/rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other configuration settings&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: The settings in this section should be set in your &lt;code&gt;config/application.rb&lt;/code&gt; or your environment config like this: &lt;code&gt;config.solid_queue.silence_polling = true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are several settings that control how Solid Queue works that you can set as well:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;logger&lt;/code&gt;: the logger you want Solid Queue to use. Defaults to the app logger.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;app_executor&lt;/code&gt;: the &lt;a href=&#34;https://guides.rubyonrails.org/threading_and_code_execution.html#executor&#34;&gt;Rails executor&lt;/a&gt; used to wrap asynchronous operations, defaults to the app executor&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;on_thread_error&lt;/code&gt;: custom lambda/Proc to call when there&#39;s an error within a thread that takes the exception raised as argument. Defaults to&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;-&amp;gt; (exception) { Rails.error.report(exception, handled: false) }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;use_skip_locked&lt;/code&gt;: whether to use &lt;code&gt;FOR UPDATE SKIP LOCKED&lt;/code&gt; when performing locking reads. This will be automatically detected in the future, and for now, you&#39;d only need to set this to &lt;code&gt;false&lt;/code&gt; if your database doesn&#39;t support it. For MySQL, that&#39;d be versions &amp;lt; 8, and for PostgreSQL, versions &amp;lt; 9.5. If you use SQLite, this has no effect, as writes are sequential.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;process_heartbeat_interval&lt;/code&gt;: the heartbeat interval that all processes will follow—defaults to 60 seconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;process_alive_threshold&lt;/code&gt;: how long to wait until a process is considered dead after its last heartbeat—defaults to 5 minutes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;shutdown_timeout&lt;/code&gt;: time the supervisor will wait since it sent the &lt;code&gt;TERM&lt;/code&gt; signal to its supervised processes before sending a &lt;code&gt;QUIT&lt;/code&gt; version to them requesting immediate termination—defaults to 5 seconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;silence_polling&lt;/code&gt;: whether to silence Active Record logs emitted when polling for both workers and dispatchers—defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;supervisor_pidfile&lt;/code&gt;: path to a pidfile that the supervisor will create when booting to prevent running more than one supervisor in the same host, or in case you want to use it for a health check. It&#39;s &lt;code&gt;nil&lt;/code&gt; by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;preserve_finished_jobs&lt;/code&gt;: whether to keep finished jobs in the &lt;code&gt;solid_queue_jobs&lt;/code&gt; table—defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clear_finished_jobs_after&lt;/code&gt;: period to keep finished jobs around, in case &lt;code&gt;preserve_finished_jobs&lt;/code&gt; is true—defaults to 1 day. &lt;strong&gt;Note:&lt;/strong&gt; Right now, there&#39;s no automatic cleanup of finished jobs. You&#39;d need to do this by periodically invoking &lt;code&gt;SolidQueue::Job.clear_finished_in_batches&lt;/code&gt;, but this will happen automatically in the near future.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;default_concurrency_control_period&lt;/code&gt;: the value to be used as the default for the &lt;code&gt;duration&lt;/code&gt; parameter in &lt;a href=&#34;https://raw.githubusercontent.com/rails/solid_queue/main/#concurrency-controls&#34;&gt;concurrency controls&lt;/a&gt;. It defaults to 3 minutes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;enqueue_after_transaction_commit&lt;/code&gt;: whether the job queuing is deferred to after the current Active Record transaction is committed. The default is &lt;code&gt;false&lt;/code&gt;. &lt;a href=&#34;https://github.com/rails/rails/pull/51426&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Errors when enqueuing&lt;/h2&gt; &#xA;&lt;p&gt;Solid Queue will raise a &lt;code&gt;SolidQueue::Job::EnqueueError&lt;/code&gt; for any Active Record errors that happen when enqueuing a job. The reason for not raising &lt;code&gt;ActiveJob::EnqueueError&lt;/code&gt; is that this one gets handled by Active Job, causing &lt;code&gt;perform_later&lt;/code&gt; to return &lt;code&gt;false&lt;/code&gt; and set &lt;code&gt;job.enqueue_error&lt;/code&gt;, yielding the job to a block that you need to pass to &lt;code&gt;perform_later&lt;/code&gt;. This works very well for your own jobs, but makes failure very hard to handle for jobs enqueued by Rails or other gems, such as &lt;code&gt;Turbo::Streams::BroadcastJob&lt;/code&gt; or &lt;code&gt;ActiveStorage::AnalyzeJob&lt;/code&gt;, because you don&#39;t control the call to &lt;code&gt;perform_later&lt;/code&gt; in that cases.&lt;/p&gt; &#xA;&lt;p&gt;In the case of recurring tasks, if such error is raised when enqueuing the job corresponding to the task, it&#39;ll be handled and logged but it won&#39;t bubble up.&lt;/p&gt; &#xA;&lt;h2&gt;Concurrency controls&lt;/h2&gt; &#xA;&lt;p&gt;Solid Queue extends Active Job with concurrency controls, that allows you to limit how many jobs of a certain type or with certain arguments can run at the same time. When limited in this way, jobs will be blocked from running, and they&#39;ll stay blocked until another job finishes and unblocks them, or after the set expiry time (concurrency limit&#39;s &lt;em&gt;duration&lt;/em&gt;) elapses. Jobs are never discarded or lost, only blocked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyJob &amp;lt; ApplicationJob&#xA;  limits_concurrency to: max_concurrent_executions, key: -&amp;gt;(arg1, arg2, **) { ... }, duration: max_interval_to_guarantee_concurrency_limit, group: concurrency_group&#xA;&#xA;  # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;key&lt;/code&gt; is the only required parameter, and it can be a symbol, a string or a proc that receives the job arguments as parameters and will be used to identify the jobs that need to be limited together. If the proc returns an Active Record record, the key will be built from its class name and &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;to&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; by default, and &lt;code&gt;duration&lt;/code&gt; is set to &lt;code&gt;SolidQueue.default_concurrency_control_period&lt;/code&gt; by default, which itself defaults to &lt;code&gt;3 minutes&lt;/code&gt;, but that you can configure as well.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;group&lt;/code&gt; is used to control the concurrency of different job classes together. It defaults to the job class name.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When a job includes these controls, we&#39;ll ensure that, at most, the number of jobs (indicated as &lt;code&gt;to&lt;/code&gt;) that yield the same &lt;code&gt;key&lt;/code&gt; will be performed concurrently, and this guarantee will last for &lt;code&gt;duration&lt;/code&gt; for each job enqueued. Note that there&#39;s no guarantee about &lt;em&gt;the order of execution&lt;/em&gt;, only about jobs being performed at the same time (overlapping).&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class DeliverAnnouncementToContactJob &amp;lt; ApplicationJob&#xA;  limits_concurrency to: 2, key: -&amp;gt;(contact) { contact.account }, duration: 5.minutes&#xA;&#xA;  def perform(contact)&#xA;    # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;contact&lt;/code&gt; and &lt;code&gt;account&lt;/code&gt; are &lt;code&gt;ActiveRecord&lt;/code&gt; records. In this case, we&#39;ll ensure that at most two jobs of the kind &lt;code&gt;DeliverAnnouncementToContact&lt;/code&gt; for the same account will run concurrently. If, for any reason, one of those jobs takes longer than 5 minutes or doesn&#39;t release its concurrency lock within 5 minutes of acquiring it, a new job with the same key might gain the lock.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s see another example using &lt;code&gt;group&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Box::MovePostingsByContactToDesignatedBoxJob &amp;lt; ApplicationJob&#xA;  limits_concurrency key: -&amp;gt;(contact) { contact }, duration: 15.minutes, group: &#34;ContactActions&#34;&#xA;&#xA;  def perform(contact)&#xA;    # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Bundle::RebundlePostingsJob &amp;lt; ApplicationJob&#xA;  limits_concurrency key: -&amp;gt;(bundle) { bundle.contact }, duration: 15.minutes, group: &#34;ContactActions&#34;&#xA;&#xA;  def perform(bundle)&#xA;    # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, if we have a &lt;code&gt;Box::MovePostingsByContactToDesignatedBoxJob&lt;/code&gt; job enqueued for a contact record with id &lt;code&gt;123&lt;/code&gt; and another &lt;code&gt;Bundle::RebundlePostingsJob&lt;/code&gt; job enqueued simultaneously for a bundle record that references contact &lt;code&gt;123&lt;/code&gt;, only one of them will be allowed to proceed. The other one will stay blocked until the first one finishes (or 15 minutes pass, whatever happens first).&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;duration&lt;/code&gt; setting depends indirectly on the value for &lt;code&gt;concurrency_maintenance_interval&lt;/code&gt; that you set for your dispatcher(s), as that&#39;d be the frequency with which blocked jobs are checked and unblocked. In general, you should set &lt;code&gt;duration&lt;/code&gt; in a way that all your jobs would finish well under that duration and think of the concurrency maintenance task as a failsafe in case something goes wrong.&lt;/p&gt; &#xA;&lt;p&gt;Finally, failed jobs that are automatically or manually retried work in the same way as new jobs that get enqueued: they get in the queue for gaining the lock, and whenever they get it, they&#39;ll be run. It doesn&#39;t matter if they had gained the lock already in the past.&lt;/p&gt; &#xA;&lt;h2&gt;Failed jobs and retries&lt;/h2&gt; &#xA;&lt;p&gt;Solid Queue doesn&#39;t include any automatic retry mechanism, it &lt;a href=&#34;https://edgeguides.rubyonrails.org/active_job_basics.html#retrying-or-discarding-failed-jobs&#34;&gt;relies on Active Job for this&lt;/a&gt;. Jobs that fail will be kept in the system, and a &lt;em&gt;failed execution&lt;/em&gt; (a record in the &lt;code&gt;solid_queue_failed_executions&lt;/code&gt; table) will be created for these. The job will stay there until manually discarded or re-enqueued. You can do this in a console as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;failed_execution = SolidQueue::FailedExecution.find(...) # Find the failed execution related to your job&#xA;failed_execution.error # inspect the error&#xA;&#xA;failed_execution.retry # This will re-enqueue the job as if it was enqueued for the first time&#xA;failed_execution.discard # This will delete the job from the system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, we recommend taking a look at &lt;a href=&#34;https://github.com/rails/mission_control-jobs&#34;&gt;mission_control-jobs&lt;/a&gt;, a dashboard where, among other things, you can examine and retry/discard failed jobs.&lt;/p&gt; &#xA;&lt;h2&gt;Puma plugin&lt;/h2&gt; &#xA;&lt;p&gt;We provide a Puma plugin if you want to run the Solid Queue&#39;s supervisor together with Puma and have Puma monitor and manage it. You just need to add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;plugin :solid_queue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to your &lt;code&gt;puma.rb&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Jobs and transactional integrity&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Having your jobs in the same ACID-compliant database as your application data enables a powerful yet sharp tool: taking advantage of transactional integrity to ensure some action in your app is not committed unless your job is also committed. This can be very powerful and useful, but it can also backfire if you base some of your logic on this behaviour, and in the future, you move to another active job backend, or if you simply move Solid Queue to its own database, and suddenly the behaviour changes under you.&lt;/p&gt; &#xA;&lt;p&gt;By default, Solid Queue runs in the same DB as your app, and job enqueuing is &lt;em&gt;not&lt;/em&gt; deferred until any ongoing transaction is committed, which means that by default, you&#39;ll be taking advantage of this transactional integrity.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer not to rely on this, or avoid relying on it unintentionally, you should make sure that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You set &lt;a href=&#34;https://edgeguides.rubyonrails.org/configuring.html#config-active-job-enqueue-after-transaction-commit&#34;&gt;&lt;code&gt;config.active_job.enqueue_after_transaction_commit&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;always&lt;/code&gt;, if you&#39;re using Rails 7.2+.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or, your jobs relying on specific records are always enqueued on &lt;a href=&#34;https://guides.rubyonrails.org/active_record_callbacks.html#after-commit-and-after-rollback&#34;&gt;&lt;code&gt;after_commit&lt;/code&gt; callbacks&lt;/a&gt; or otherwise from a place where you&#39;re certain that whatever data the job will use has been committed to the database before the job is enqueued.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or, you configure a different database for Solid Queue, even if it&#39;s the same as your app, ensuring that a different connection on the thread handling requests or running jobs for your app will be used to enqueue jobs. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationRecord &amp;lt; ActiveRecord::Base&#xA;  self.abstract_class = true&#xA;&#xA;  connects_to database: { writing: :primary, reading: :replica }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.solid_queue.connects_to = { database: { writing: :primary, reading: :replica } }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recurring tasks&lt;/h2&gt; &#xA;&lt;p&gt;Solid Queue supports defining recurring tasks that run at specific times in the future, on a regular basis like cron jobs. These are managed by dispatcher processes and as such, they can be defined in the dispatcher&#39;s configuration like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;  dispatchers:&#xA;    - polling_interval: 1&#xA;      batch_size: 500&#xA;      recurring_tasks:&#xA;        my_periodic_job:&#xA;          class: MyJob&#xA;          args: [ 42, { status: &#34;custom_status&#34; } ]&#xA;          schedule: every second&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;recurring_tasks&lt;/code&gt; is a hash/dictionary, and the key will be the task key internally. Each task needs to have a class, which will be the job class to enqueue, and a schedule. The schedule is parsed using &lt;a href=&#34;https://github.com/floraison/fugit&#34;&gt;Fugit&lt;/a&gt;, so it accepts anything &lt;a href=&#34;https://github.com/floraison/fugit?tab=readme-ov-file#fugitcron&#34;&gt;that Fugit accepts as a cron&lt;/a&gt;. You can also provide arguments to be passed to the job, as a single argument, a hash, or an array of arguments that can also include kwargs as the last element in the array.&lt;/p&gt; &#xA;&lt;p&gt;The job in the example configuration above will be enqueued every second as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;MyJob.perform_later(42, status: &#34;custom_status&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tasks are enqueued at their corresponding times by the dispatcher that owns them, and each task schedules the next one. This is pretty much &lt;a href=&#34;https://github.com/bensheldon/good_job/raw/994ecff5323bf0337e10464841128fda100750e6/lib/good_job/cron_manager.rb&#34;&gt;inspired by what GoodJob does&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to run multiple dispatchers with the same &lt;code&gt;recurring_tasks&lt;/code&gt; configuration. To avoid enqueuing duplicate tasks at the same time, an entry in a new &lt;code&gt;solid_queue_recurring_executions&lt;/code&gt; table is created in the same transaction as the job is enqueued. This table has a unique index on &lt;code&gt;task_key&lt;/code&gt; and &lt;code&gt;run_at&lt;/code&gt;, ensuring only one entry per task per time will be created. This only works if you have &lt;code&gt;preserve_finished_jobs&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; (the default), and the guarantee applies as long as you keep the jobs around.&lt;/p&gt; &#xA;&lt;p&gt;Finally, it&#39;s possible to configure jobs that aren&#39;t handled by Solid Queue. That is, you can have a job like this in your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyResqueJob &amp;lt; ApplicationJob&#xA;  self.queue_adapter = :resque&#xA;&#xA;  def perform(arg)&#xA;    # ..&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can still configure this in Solid Queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;  dispatchers:&#xA;    - recurring_tasks:&#xA;        my_periodic_resque_job:&#xA;          class: MyResqueJob&#xA;          args: 22&#xA;          schedule: &#34;*/5 * * * *&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the job will be enqueued via &lt;code&gt;perform_later&lt;/code&gt; so it&#39;ll run in Resque. However, in this case we won&#39;t track any &lt;code&gt;solid_queue_recurring_execution&lt;/code&gt; record for it and there won&#39;t be any guarantees that the job is enqueued only once each time.&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;Solid Queue has been inspired by &lt;a href=&#34;https://github.com/resque/resque&#34;&gt;resque&lt;/a&gt; and &lt;a href=&#34;https://github.com/bensheldon/good_job&#34;&gt;GoodJob&lt;/a&gt;. We recommend checking out these projects as they&#39;re great examples from which we&#39;ve learnt a lot.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>