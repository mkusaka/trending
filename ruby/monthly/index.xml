<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-01T02:21:14Z</updated>
  <subtitle>Monthly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alexrudall/ruby-openai</title>
    <updated>2023-04-01T02:21:14Z</updated>
    <id>tag:github.com,2023-04-01:/alexrudall/ruby-openai</id>
    <link href="https://github.com/alexrudall/ruby-openai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAI API + Ruby! ü§ñ‚ù§Ô∏è Now with ChatGPT and Whisper...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby OpenAI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/ruby-openai&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/ruby-openai.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alexrudall/ruby-openai/raw/main/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/alexrudall/ruby-openai&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/alexrudall/ruby-openai.svg?style=shield&#34; alt=&#34;CircleCI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/codeclimate/codeclimate/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/a99a88d28ad37a79dbf6/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://openai.com/blog/openai-api/&#34;&gt;OpenAI API&lt;/a&gt; with Ruby! ü§ñ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;p&gt;Generate text with ChatGPT, transcribe and translate audio with Whisper, or create images with DALL¬∑E...&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://discord.gg/k4Uc224xVD&#34;&gt;Ruby AI Builders&lt;/a&gt; on Discord!&lt;/p&gt; &#xA;&lt;h3&gt;Bundler&lt;/h3&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;ruby-openai&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;p&gt;$ bundle install&lt;/p&gt; &#xA;&lt;h3&gt;Gem install&lt;/h3&gt; &#xA;&lt;p&gt;Or install with:&lt;/p&gt; &#xA;&lt;p&gt;$ gem install ruby-openai&lt;/p&gt; &#xA;&lt;p&gt;and require with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;openai&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;::Ruby::OpenAI&lt;/code&gt; module has been removed and all classes have been moved under the top level &lt;code&gt;::OpenAI&lt;/code&gt; module. To upgrade, change &lt;code&gt;require &#39;ruby/openai&#39;&lt;/code&gt; to &lt;code&gt;require &#39;openai&#39;&lt;/code&gt; and change all references to &lt;code&gt;Ruby::OpenAI&lt;/code&gt; to &lt;code&gt;OpenAI&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get your API key from &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;https://beta.openai.com/account/api-keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you belong to multiple organizations, you can get your Organization ID from &lt;a href=&#34;https://beta.openai.com/account/org-settings&#34;&gt;https://beta.openai.com/account/org-settings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;For a quick test you can pass your token directly to a new client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = OpenAI::Client.new(access_token: &#34;access_token_goes_here&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With Config&lt;/h3&gt; &#xA;&lt;p&gt;For a more robust setup, you can configure the gem with your API keys, for example in an &lt;code&gt;openai.rb&lt;/code&gt; initializer file. Never hardcode secrets into your codebase - instead use something like &lt;a href=&#34;https://github.com/motdotla/dotenv&#34;&gt;dotenv&lt;/a&gt; to pass the keys safely into your environments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;OpenAI.configure do |config|&#xA;    config.access_token = ENV.fetch(&#39;OPENAI_ACCESS_TOKEN&#39;)&#xA;    config.organization_id = ENV.fetch(&#39;OPENAI_ORGANIZATION_ID&#39;) # Optional.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can create a client like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = OpenAI::Client.new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom timeout or base URI&lt;/h4&gt; &#xA;&lt;p&gt;The default timeout for any OpenAI request is 120 seconds. You can change that passing the &lt;code&gt;request_timeout&lt;/code&gt; when initializing the client. You can also change the base URI used for all requests, eg. to use observability tools like &lt;a href=&#34;https://docs.helicone.ai/quickstart/integrate-in-one-line-of-code&#34;&gt;Helicone&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = OpenAI::Client.new(&#xA;    access_token: &#34;access_token_goes_here&#34;,&#xA;    uri_base: &#34;https://oai.hconeai.com/&#34;,&#xA;    request_timeout: 240&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or when configuring the gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;OpenAI.configure do |config|&#xA;    config.access_token = ENV.fetch(&#34;OPENAI_ACCESS_TOKEN&#34;)&#xA;    config.organization_id = ENV.fetch(&#34;OPENAI_ORGANIZATION_ID&#34;) # Optional&#xA;    config.uri_base = &#34;https://oai.hconeai.com/&#34; # Optional&#xA;    config.request_timeout = 240 # Optional&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;p&gt;There are different models that can be used to generate text. For a full list and to retrieve information about a single models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.models.list&#xA;client.models.retrieve(id: &#34;text-ada-001&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/models/gpt-4&#34;&gt;GPT-4 (limited beta)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;gpt-4&lt;/li&gt; &#xA;   &lt;li&gt;gpt-4-0314&lt;/li&gt; &#xA;   &lt;li&gt;gpt-4-32k&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/models/gpt-3-5&#34;&gt;GPT-3.5&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;gpt-3.5-turbo&lt;/li&gt; &#xA;   &lt;li&gt;gpt-3.5-turbo-0301&lt;/li&gt; &#xA;   &lt;li&gt;text-davinci-003&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/models/gpt-3&#34;&gt;GPT-3&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;text-ada-001&lt;/li&gt; &#xA;   &lt;li&gt;text-babbage-001&lt;/li&gt; &#xA;   &lt;li&gt;text-curie-001&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ChatGPT&lt;/h3&gt; &#xA;&lt;p&gt;ChatGPT is a model that can be used to generate text in a conversational style. You can use it to &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat/create&#34;&gt;generate a response&lt;/a&gt; to a sequence of &lt;a href=&#34;https://platform.openai.com/docs/guides/chat/introduction&#34;&gt;messages&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.chat(&#xA;    parameters: {&#xA;        model: &#34;gpt-3.5-turbo&#34;, # Required.&#xA;        messages: [{ role: &#34;user&#34;, content: &#34;Hello!&#34;}], # Required.&#xA;        temperature: 0.7,&#xA;    })&#xA;puts response.dig(&#34;choices&#34;, 0, &#34;message&#34;, &#34;content&#34;)&#xA;# =&amp;gt; &#34;Hello! How may I assist you today?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Completions&lt;/h3&gt; &#xA;&lt;p&gt;Hit the OpenAI API for a completion using other GPT-3 models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.completions(&#xA;    parameters: {&#xA;        model: &#34;text-davinci-001&#34;,&#xA;        prompt: &#34;Once upon a time&#34;,&#xA;        max_tokens: 5&#xA;    })&#xA;puts response[&#34;choices&#34;].map { |c| c[&#34;text&#34;] }&#xA;# =&amp;gt; [&#34;, there lived a great&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edits&lt;/h3&gt; &#xA;&lt;p&gt;Send a string and some instructions for what to do to the string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.edits(&#xA;    parameters: {&#xA;        model: &#34;text-davinci-edit-001&#34;,&#xA;        input: &#34;What day of the wek is it?&#34;,&#xA;        instruction: &#34;Fix the spelling mistakes&#34;&#xA;    }&#xA;)&#xA;puts response.dig(&#34;choices&#34;, 0, &#34;text&#34;)&#xA;# =&amp;gt; What day of the week is it?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Embeddings&lt;/h3&gt; &#xA;&lt;p&gt;You can use the embeddings endpoint to get a vector of numbers representing an input. You can then compare these vectors for different inputs to efficiently check how similar the inputs are.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.embeddings(&#xA;    parameters: {&#xA;        model: &#34;babbage-similarity&#34;,&#xA;        input: &#34;The food was delicious and the waiter...&#34;&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Files&lt;/h3&gt; &#xA;&lt;p&gt;Put your data in a &lt;code&gt;.jsonl&lt;/code&gt; file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;prompt&#34;:&#34;Overjoyed with my new phone! -&amp;gt;&#34;, &#34;completion&#34;:&#34; positive&#34;}&#xA;{&#34;prompt&#34;:&#34;@lakers disappoint for a third straight night -&amp;gt;&#34;, &#34;completion&#34;:&#34; negative&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and pass the path to &lt;code&gt;client.files.upload&lt;/code&gt; to upload it to OpenAI, and then interact with it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.files.upload(parameters: { file: &#34;path/to/sentiment.jsonl&#34;, purpose: &#34;fine-tune&#34; })&#xA;client.files.list&#xA;client.files.retrieve(id: 123)&#xA;client.files.content(id: 123)&#xA;client.files.delete(id: 123)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fine-tunes&lt;/h3&gt; &#xA;&lt;p&gt;Upload your fine-tuning data in a &lt;code&gt;.jsonl&lt;/code&gt; file as above and get its ID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.files.upload(parameters: { file: &#34;path/to/sentiment.jsonl&#34;, purpose: &#34;fine-tune&#34; })&#xA;file_id = JSON.parse(response.body)[&#34;id&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then use this file ID to create a fine-tune model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.finetunes.create(&#xA;    parameters: {&#xA;    training_file: file_id,&#xA;    model: &#34;text-ada-001&#34;&#xA;})&#xA;fine_tune_id = JSON.parse(response.body)[&#34;id&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will give you the fine-tune ID. If you made a mistake you can cancel the fine-tune model before it is processed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.finetunes.cancel(id: fine_tune_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need to wait a short time for processing to complete. Once processed, you can use list or retrieve to get the name of the fine-tuned model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.finetunes.list&#xA;response = client.finetunes.retrieve(id: fine_tune_id)&#xA;fine_tuned_model = JSON.parse(response.body)[&#34;fine_tuned_model&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This fine-tuned model name can then be used in completions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.completions(&#xA;    parameters: {&#xA;        model: fine_tuned_model,&#xA;        prompt: &#34;I love Mondays!&#34;&#xA;    }&#xA;)&#xA;JSON.parse(response.body)[&#34;choices&#34;].map { |c| c[&#34;text&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can delete the fine-tuned model when you are done with it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.finetunes.delete(fine_tuned_model: fine_tuned_model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image Generation&lt;/h3&gt; &#xA;&lt;p&gt;Generate an image using DALL¬∑E! The size of any generated images must be one of &lt;code&gt;256x256&lt;/code&gt;, &lt;code&gt;512x512&lt;/code&gt; or &lt;code&gt;1024x1024&lt;/code&gt; - if not specified the image will default to &lt;code&gt;1024x1024&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.images.generate(parameters: { prompt: &#34;A baby sea otter cooking pasta wearing a hat of some sort&#34;, size: &#34;256x256&#34; })&#xA;puts response.dig(&#34;data&#34;, 0, &#34;url&#34;)&#xA;# =&amp;gt; &#34;https://oaidalleapiprodscus.blob.core.windows.net/private/org-Rf437IxKhh...&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/6y4HJFx/img-d-Tx-Rf-RHj-SO5-Gho-Cbd8o-LJvw3.png&#34; alt=&#34;Ruby&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Image Edit&lt;/h3&gt; &#xA;&lt;p&gt;Fill in the transparent part of an image, or upload a mask with transparent sections to indicate the parts of an image that can be changed according to your prompt...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.images.edit(parameters: { prompt: &#34;A solid red Ruby on a blue background&#34;, image: &#34;image.png&#34;, mask: &#34;mask.png&#34; })&#xA;puts response.dig(&#34;data&#34;, 0, &#34;url&#34;)&#xA;# =&amp;gt; &#34;https://oaidalleapiprodscus.blob.core.windows.net/private/org-Rf437IxKhh...&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/sWVh3BX/dalle-ruby.png&#34; alt=&#34;Ruby&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Image Variations&lt;/h3&gt; &#xA;&lt;p&gt;Create n variations of an image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.images.variations(parameters: { image: &#34;image.png&#34;, n: 2 })&#xA;puts response.dig(&#34;data&#34;, 0, &#34;url&#34;)&#xA;# =&amp;gt; &#34;https://oaidalleapiprodscus.blob.core.windows.net/private/org-Rf437IxKhh...&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/TWJLP2y/img-miu-Wk-Nl0-QNy-Xtj-Lerc3c0l-NW.png&#34; alt=&#34;Ruby&#34;&gt; &lt;img src=&#34;https://i.ibb.co/ScBhDGB/img-a9-Be-Rz-Au-Xwd-AV0-ERLUTSTGdi.png&#34; alt=&#34;Ruby&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Moderations&lt;/h3&gt; &#xA;&lt;p&gt;Pass a string to check if it violates OpenAI&#39;s Content Policy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.moderations(parameters: { input: &#34;I&#39;m worried about that.&#34; })&#xA;puts response.dig(&#34;results&#34;, 0, &#34;category_scores&#34;, &#34;hate&#34;)&#xA;# =&amp;gt; 5.505014632944949e-05&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Whisper&lt;/h3&gt; &#xA;&lt;p&gt;Whisper is a speech to text model that can be used to generate text based on audio files:&lt;/p&gt; &#xA;&lt;h4&gt;Translate&lt;/h4&gt; &#xA;&lt;p&gt;The translations API takes as input the audio file in any of the supported languages and transcribes the audio into English.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.translate(&#xA;    parameters: {&#xA;        model: &#34;whisper-1&#34;,&#xA;        file: File.open(&#39;path_to_file&#39;, &#39;rb&#39;),&#xA;    })&#xA;puts response.parsed_response[&#39;text&#39;]&#xA;# =&amp;gt; &#34;Translation of the text&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Transcribe&lt;/h4&gt; &#xA;&lt;p&gt;The transcriptions API takes as input the audio file you want to transcribe and returns the text in the desired output file format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response = client.transcribe(&#xA;    parameters: {&#xA;        model: &#34;whisper-1&#34;,&#xA;        file: File.open(&#39;path_to_file&#39;, &#39;rb&#39;),&#xA;    })&#xA;puts response.parsed_response[&#39;text&#39;]&#xA;# =&amp;gt; &#34;Transcription of the text&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. You can run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Release&lt;/h2&gt; &#xA;&lt;p&gt;First run the specs without VCR so they actually hit the API. This will cost about 2 cents. You&#39;ll need to add your &lt;code&gt;OPENAI_ACCESS_TOKEN=&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NO_VCR=true bundle exec rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then update the version number in &lt;code&gt;version.rb&lt;/code&gt;, update &lt;code&gt;CHANGELOG.md&lt;/code&gt;, run &lt;code&gt;bundle install&lt;/code&gt; to update Gemfile.lock, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and tags, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/alexrudall/ruby-openai&#34;&gt;https://github.com/alexrudall/ruby-openai&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://github.com/alexrudall/ruby-openai/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the Ruby OpenAI project&#39;s codebases, issue trackers, chat rooms and mailing lists is expected to follow the &lt;a href=&#34;https://github.com/alexrudall/ruby-openai/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ytti/oxidized</title>
    <updated>2023-04-01T02:21:14Z</updated>
    <id>tag:github.com,2023-04-01:/ytti/oxidized</id>
    <link href="https://github.com/ytti/oxidized" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Oxidized is a network device configuration backup tool. It&#39;s a RANCID replacement!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Oxidized&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ytti/oxidized/actions/workflows/ruby.yml&#34;&gt;&lt;img src=&#34;https://github.com/ytti/oxidized/actions/workflows/ruby.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ytti/oxidized?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ytti/oxidized/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/ytti/oxidized?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=ytti/oxidized&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/5a90cb22db6a4d5ea23ad0dfb53fe03a&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/ytti/oxidized&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/ytti/oxidized/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/rb/oxidized&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/oxidized.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/oxidized/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/oxidized/Lobby.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/oxidized/Lobby&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Oxidized is a network device configuration backup tool. It&#39;s a RANCID replacement!&lt;/p&gt; &#xA;&lt;p&gt;Light and extensible, Oxidized supports over 130 operating system types.&lt;/p&gt; &#xA;&lt;p&gt;Feature highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically adds/removes threads to meet configured retrieval interval&lt;/li&gt; &#xA; &lt;li&gt;Restful API to a move node immediately to head-of-queue (GET/POST /node/next/[NODE])&lt;/li&gt; &#xA; &lt;li&gt;Syslog udp+file example to catch config change events (IOS/JunOS) and trigger a config fetch &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Will signal which IOS/JunOS user made the change, can then be used by output modules (via POST)&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;git&lt;/code&gt; output module uses this info - &#39;git blame&#39; will show who changed each line, and when&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Restful API to reload list of nodes (GET /reload)&lt;/li&gt; &#xA; &lt;li&gt;Restful API to fetch configurations (/node/fetch/[NODE] or /node/fetch/group/[NODE])&lt;/li&gt; &#xA; &lt;li&gt;Restful API to show list of nodes (GET /nodes)&lt;/li&gt; &#xA; &lt;li&gt;Restful API to show list of version for a node (/node/version[NODE]) and diffs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;http://youtu.be/kBQ_CTUuqeU#t=3h&#34;&gt;Oxidized TREX 2014 presentation&lt;/a&gt; video on YouTube!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#help-needed&#34;&gt;Maintainer Wanted!&lt;/a&gt; &lt;span&gt;‚ö†&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;Is your company using Oxidized and has Ruby developers on staff? I&#39;d love help from an extra maintainer!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Supported-OS-Types.md&#34;&gt;Supported OS Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#debian-and-ubuntu&#34;&gt;Debian and Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#centos-oracle-linux-red-hat-linux&#34;&gt;CentOS, Oracle Linux, Red Hat Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#freebsd&#34;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#build-from-git&#34;&gt;Build from Git&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#running-with-docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#installing-ruby-23-using-rvm&#34;&gt;Installing Ruby 2.3 using RVM&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#configuration&#34;&gt;Initial Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#privileged-mode&#34;&gt;Privileged mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#disabling-ssh-exec-channels&#34;&gt;Disabling SSH exec channels&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md&#34;&gt;Sources&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-csv&#34;&gt;Source: CSV&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-sql&#34;&gt;Source: SQL&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-sqlite&#34;&gt;Source: SQLite&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-mysql&#34;&gt;Source: Mysql&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-http&#34;&gt;Source: HTTP&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md&#34;&gt;Outputs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md#output-git&#34;&gt;Output: GIT&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md#output-git-crypt&#34;&gt;Output: GIT-Crypt&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md#output-http&#34;&gt;Output: HTTP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md#output-file&#34;&gt;Output: File&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Outputs.md#output-types&#34;&gt;Output types&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#advanced-configuration&#34;&gt;Advanced Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#advanced-group-configuration&#34;&gt;Advanced Group Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md&#34;&gt;Hooks&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-exec&#34;&gt;Hook: exec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-githubrepo&#34;&gt;Hook: githubrepo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-awssns&#34;&gt;Hook: awssns&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-slackdiff&#34;&gt;Hook: slackdiff&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-xmppdiff&#34;&gt;Hook: xmppdiff&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Hooks.md#hook-type-ciscosparkdiff&#34;&gt;Hook: ciscosparkdiff&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Creating-Models.md&#34;&gt;Creating and Extending Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#help&#34;&gt;Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Ruby-API.md#ruby-api&#34;&gt;Ruby API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Ruby-API.md#input&#34;&gt;Input&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Ruby-API.md#output&#34;&gt;Output&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Ruby-API.md#source&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Ruby-API.md#model&#34;&gt;Model&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;Debian &#34;buster&#34; or newer and Ubuntu 17.10 (artful) or newer are recommended. On Ubuntu, begin by enabling the &lt;code&gt;universe&lt;/code&gt; repository (required for libssh2-1-dev):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;add-apt-repository universe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt-get install ruby ruby-dev libsqlite3-dev libssl-dev pkg-config cmake libssh2-1-dev libicu-dev zlib1g-dev g++&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, install the gems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install oxidized&#xA;gem install oxidized-script oxidized-web # If you don&#39;t install oxidized-web, ensure &#34;rest&#34; is removed from your Oxidized config.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS, Oracle Linux, Red Hat Linux&lt;/h3&gt; &#xA;&lt;p&gt;On CentOS 6 and 7 / RHEL 6 and 7, begin by installing Ruby 2.3 or greater. This can be accomplished in one of several ways:&lt;/p&gt; &#xA;&lt;p&gt;Install Ruby 2.3 from &lt;a href=&#34;https://www.softwarecollections.org/en/scls/rhscl/rh-ruby23/&#34;&gt;SCL&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install centos-release-scl&#xA;yum install rh-ruby23 rh-ruby23-ruby-devel&#xA;scl enable rh-ruby23 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following additional packages will be required to build the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install make cmake which sqlite-devel openssl-devel libssh2-devel ruby gcc ruby-devel libicu-devel gcc-c++&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, install Ruby 2.6 via RVM by following the instructions:&lt;/p&gt; &#xA;&lt;p&gt;Make sure you dont have any leftover ruby: &lt;code&gt;yum erase ruby&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, install gpg key and rvm&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sudo&#34;&gt;curl -sSL https://get.rvm.io | bash -s stable&#xA;source /etc/profile.d/rvm.sh&#xA;rvm requirements run&#xA;rvm install 2.6.0&#xA;rvm use 2.6.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install oxidized requirements: &lt;code&gt;yum install make cmake which sqlite-devel openssl-devel libssh2-devel gcc libicu-devel gcc-c++&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install the gems: &lt;code&gt;gem install oxidized oxidized-web&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You need to wrap the gem and reference the wrap in the systemctl service file: &lt;code&gt;rvm wrapper oxidized&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can see where the wrapped gem is via &lt;code&gt;rvm wrapper show oxidized&lt;/code&gt; Use that path in the oxidized.service file, restart the systemctl daemon, run oxidized by hand once, edit config file, start service.&lt;/p&gt; &#xA;&lt;h3&gt;FreeBSD&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/#installing-ruby-23-using-rvm&#34;&gt;Use RVM to install Ruby v2.3&lt;/a&gt;, then install all required packages and gems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pkg install cmake pkgconf&#xA;gem install oxidized&#xA;gem install oxidized-script oxidized-web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Oxidized is also available via &lt;a href=&#34;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=203374&#34;&gt;FreeBSD ports&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pkg install rubygem-oxidized rubygem-oxidized-script rubygem-oxidized-web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from Git&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/ytti/oxidized.git&#xA;cd oxidized/&#xA;gem install bundler&#xA;rake install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running with Docker&lt;/h3&gt; &#xA;&lt;p&gt;Currently, Docker Hub automatically builds the master branch as &lt;a href=&#34;https://hub.docker.com/r/oxidized/oxidized/&#34;&gt;oxidized/oxidized&lt;/a&gt;, you can make use of this container or build your own.&lt;/p&gt; &#xA;&lt;p&gt;To build your own, clone git repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/ytti/oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, build the container locally (requires docker 17.05.0-ce or higher):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -q -t oxidized/oxidized:latest oxidized/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve built the container (or chosen to make use of the automatically built container in Docker Hub, which will be downloaded for you by docker on the first &lt;code&gt;run&lt;/code&gt; command had you not built it), proceed as follows:&lt;/p&gt; &#xA;&lt;p&gt;Create a configuration directory in the host system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir /etc/oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the container for the first time to initialize the config:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: this step in only required for creating the Oxidized configuration file and can be skipped if you already have one.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -v /etc/oxidized:/home/oxidized/.config/oxidized -p 8888:8888/tcp -t oxidized/oxidized:latest oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the RESTful API and Web Interface are enabled, on the docker host running the container edit &lt;code&gt;/etc/oxidized/config&lt;/code&gt; and modify &lt;code&gt;rest: 127.0.0.1:8888&lt;/code&gt; to &lt;code&gt;rest: 0.0.0.0:8888&lt;/code&gt;. This will bind port 8888 to all interfaces, and expose the port so that it could be accessed externally. &lt;a href=&#34;https://github.com/ytti/oxidized/issues/445&#34;&gt;(Issue #445)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use docker-compose to launch the oxidized container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# docker-compose.yml&#xA;# docker-compose file example for oxidized that will start along with docker daemon&#xA;---&#xA;version: &#34;3&#34;&#xA;services:&#xA;  oxidized:&#xA;    restart: always&#xA;    image: oxidized/oxidized:latest&#xA;    ports:&#xA;      - 8888:8888/tcp&#xA;    environment:&#xA;      CONFIG_RELOAD_INTERVAL: 600&#xA;    volumes:&#xA;       - config:/home/oxidized/.config/oxidized/config&#xA;       - router.db:/home/oxidized/.config/oxidized/router.db&#xA;       - model:/home/oxidized/.config/oxidized/model&#xA;       # if git is use as input&#xA;       - data:/home/oxidized/.config/oxidized/backupcfg/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the &lt;code&gt;/etc/oxidized/router.db&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Sources.md#source-csv&#34;&gt;CSV Source&lt;/a&gt; for further info):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vim /etc/oxidized/router.db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run container again to start oxidized with your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -v /etc/oxidized:/home/oxidized/.config/oxidized -p 8888:8888/tcp -t oxidized/oxidized:latest&#xA;oxidized[1]: Oxidized starting, running as pid 1&#xA;oxidized[1]: Loaded 1 nodes&#xA;Puma 2.13.4 starting...&#xA;* Min threads: 0, max threads: 16&#xA;* Environment: development&#xA;* Listening on tcp://0.0.0.0:8888&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to have the config automatically reloaded (e.g. when using a http source that changes):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -v /etc/oxidized:/home/oxidized/.config/oxidized -p 8888:8888/tcp -e CONFIG_RELOAD_INTERVAL=3600 -t oxidized/oxidized:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to use an internal CA (e.g. to connect to an private github instance):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -v /etc/oxidized:/home/oxidized/.config/oxidized -v /path/to/MY-CA.crt:/usr/local/share/ca-certificates/MY-CA.crt -p 8888:8888/tcp -e UPDATE_CA_CERTIFICATES=true -t oxidized/oxidized:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing Ruby 2.3 using RVM&lt;/h3&gt; &#xA;&lt;p&gt;Install Ruby 2.3 build dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install curl gcc-c++ patch readline readline-devel zlib zlib-devel&#xA;yum install libyaml-devel libffi-devel openssl-devel make cmake&#xA;yum install bzip2 autoconf automake libtool bison iconv-devel libssh2-devel libicu-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install RVM&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -L get.rvm.io | bash -s stable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setup RVM environment and compile and install Ruby 2.3 and set it as default&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source /etc/profile.d/rvm.sh&#xA;rvm install 2.3&#xA;rvm use --default 2.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Oxidized configuration is in YAML format. Configuration files are subsequently sourced from &lt;code&gt;/etc/oxidized/config&lt;/code&gt; then &lt;code&gt;~/.config/oxidized/config&lt;/code&gt;. The hashes will be merged, this might be useful for storing source information in a system wide file and user specific configuration in the home directory (to only include a staff specific username and password). Eg. if many users are using &lt;code&gt;oxs&lt;/code&gt;, see &lt;a href=&#34;https://github.com/ytti/oxidized-script&#34;&gt;Oxidized::Script&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended practice to run Oxidized using its own username. This username can be added using standard command-line tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;useradd -s /bin/bash -m oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is recommended &lt;strong&gt;not&lt;/strong&gt; to run Oxidized as root.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To initialize a default configuration in your home directory &lt;code&gt;~/.config/oxidized/config&lt;/code&gt;, simply run &lt;code&gt;oxidized&lt;/code&gt; once. If you don&#39;t further configure anything from the output and source sections, it&#39;ll extend the examples on a subsequent &lt;code&gt;oxidized&lt;/code&gt; execution. This is useful to see what options for a specific source or output backend are available.&lt;/p&gt; &#xA;&lt;p&gt;You can set the env variable &lt;code&gt;OXIDIZED_HOME&lt;/code&gt; to change its home directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;OXIDIZED_HOME=/etc/oxidized&#xA;&#xA;$ tree -L 1 /etc/oxidized&#xA;/etc/oxidized/&#xA;‚îú‚îÄ‚îÄ config&#xA;‚îú‚îÄ‚îÄ log-router-ssh&#xA;‚îú‚îÄ‚îÄ log-router-telnet&#xA;‚îú‚îÄ‚îÄ pid&#xA;‚îú‚îÄ‚îÄ router.db&#xA;‚îî‚îÄ‚îÄ repository.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Source&lt;/h2&gt; &#xA;&lt;p&gt;Oxidized supports &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#source-csv&#34;&gt;CSV&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#source-sqlite&#34;&gt;SQLite&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#source-mysql&#34;&gt;MySQL&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#source-http&#34;&gt;HTTP&lt;/a&gt; as source backends. The CSV backend reads nodes from a rancid compatible router.db file. The SQLite and MySQL backends will fire queries against a database and map certain fields to model items. The HTTP backend will fire queries against a http/https url. Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md&#34;&gt;Configuration&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Outputs&lt;/h2&gt; &#xA;&lt;p&gt;Possible outputs are either &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#output-file&#34;&gt;File&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#output-git&#34;&gt;GIT&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#output-git-crypt&#34;&gt;GIT-Crypt&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md#output-http&#34;&gt;HTTP&lt;/a&gt;. The file backend takes a destination directory as argument and will keep a file per device, with most recent running version of a device. The GIT backend (recommended) will initialize an empty GIT repository in the specified path and create a new commit on every configuration change. The GIT-Crypt backend will also initialize a GIT repository but every configuration push to it will be encrypted on the fly by using &lt;code&gt;git-crypt&lt;/code&gt; tool. Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/ytti/oxidized/master/docs/Configuration.md&#34;&gt;Configuration&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Maps define how to map a model&#39;s fields to model &lt;a href=&#34;https://github.com/ytti/oxidized/tree/master/lib/oxidized/model&#34;&gt;model fields&lt;/a&gt;. Most of the settings should be self explanatory, log is ignored if &lt;code&gt;use_syslog&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First create the directory where the CSV &lt;code&gt;output&lt;/code&gt; is going to store device configs and start Oxidized once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir -p ~/.config/oxidized/configs&#xA;oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now tell Oxidized where it finds a list of network devices to backup configuration from. You can either use CSV or SQLite as source. To create a CSV source add the following snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;source:&#xA;  default: csv&#xA;  csv:&#xA;    file: ~/.config/oxidized/router.db&#xA;    delimiter: !ruby/regexp /:/&#xA;    map:&#xA;      name: 0&#xA;      model: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now lets create a file based device database (you might want to switch to SQLite later on). Put your routers in &lt;code&gt;~/.config/oxidized/router.db&lt;/code&gt; (file format is compatible with rancid). Simply add an item per line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;router01.example.com:ios&#xA;switch01.example.com:procurve&#xA;router02.example.com:ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;oxidized&lt;/code&gt; again to take the first backups.&lt;/p&gt; &#xA;&lt;h2&gt;Extra&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu init setup&lt;/h3&gt; &#xA;&lt;p&gt;The systemd service assumes that you have a user named &#39;oxidized&#39; and that oxidized is in one of the following paths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;/sbin&#xA;/bin&#xA;/usr/sbin&#xA;/usr/bin&#xA;/usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy systemd service file from extra/ folder to /etc/systemd/system&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo cp extra/oxidized.service /etc/systemd/system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Setup /var/run/&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir /run/oxidized&#xA;chown oxidized:oxidized /run/oxidized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Make oxidized start on boot&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo systemctl enable oxidized.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you need help with Oxidized then we have a few methods you can use to get in touch.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/oxidized/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;Gitter&lt;/a&gt; - You can join the Lobby on gitter to chat to other Oxidized users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ytti/oxidized/&#34;&gt;GitHub&lt;/a&gt; - For help and requests for code changes / updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.librenms.org/c/help/oxidized&#34;&gt;Forum&lt;/a&gt; - A user forum run by &lt;a href=&#34;https://github.com/librenms/librenms&#34;&gt;LibreNMS&lt;/a&gt; where you can ask for help and support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help Needed&lt;/h2&gt; &#xA;&lt;p&gt;As things stand right now, &lt;code&gt;oxidized&lt;/code&gt; is maintained by a single person. A great many &lt;a href=&#34;https://github.com/ytti/oxidized/graphs/contributors&#34;&gt;contributors&lt;/a&gt; have helped further the software, however contributions are not the same as ongoing owner- and maintainer-ship. It appears that many companies use the software to manage their network infrastructure, this is great news! But without additional help to maintain the software and put out releases, the future of oxidized might be less bright. The current pace of development and the much needed refactoring simply are not sustainable if they are to be driven by a single person.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to be a maintainer for Oxidized then please read through the below and see if it&#39;s something you would like to help with. It&#39;s not a requirement that you can tick all the boxes below but it helps :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Triage on issues, review pull requests and help answer any questions from users.&lt;/li&gt; &#xA; &lt;li&gt;Above average knowledge of the Ruby programming language.&lt;/li&gt; &#xA; &lt;li&gt;Professional experience with both oxidized and some other config backup tool (like rancid).&lt;/li&gt; &#xA; &lt;li&gt;Ability to keep a cool head, and enjoy interaction with end users! :)&lt;/li&gt; &#xA; &lt;li&gt;A desire and passion to help drive &lt;code&gt;oxidized&lt;/code&gt; towards its &lt;code&gt;1.x.x&lt;/code&gt; stage of life &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Help refactor the code&lt;/li&gt; &#xA;   &lt;li&gt;Rework the core infrastructure&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Permission from your employer to contribute to open source projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;YES, I WANT TO HELP&lt;/h2&gt; &#xA;&lt;p&gt;Awesome! Simply send an e-mail to Saku Ytti at &lt;a href=&#34;mailto:saku@ytti.fi&#34;&gt;saku@ytti.fi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Further reading&lt;/h2&gt; &#xA;&lt;p&gt;Brian Anderson (from Rust fame) wrote an &lt;a href=&#34;http://brson.github.io/2017/04/05/minimally-nice-maintainer&#34;&gt;excellent post&lt;/a&gt; on what it means to be a maintainer.&lt;/p&gt; &#xA;&lt;h2&gt;License and Copyright&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;      Copyright&#xA;      2013-2015 Saku Ytti &amp;lt;saku@ytti.fi&amp;gt;&#xA;      2013-2015 Samer Abdel-Hafez &amp;lt;sam@arahant.net&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mrsked/mrsk</title>
    <updated>2023-04-01T02:21:14Z</updated>
    <id>tag:github.com,2023-04-01:/mrsked/mrsk</id>
    <link href="https://github.com/mrsked/mrsk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deploy web apps anywhere.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MRSK&lt;/h1&gt; &#xA;&lt;p&gt;MRSK deploys web apps anywhere from bare metal to cloud VMs using Docker with zero downtime. It uses the dynamic reverse-proxy Traefik to hold requests while the new application container is started and the old one is stopped. It works seamlessly across multiple hosts, using SSHKit to execute commands. It was built for Rails applications, but works with any type of web app that can be containerized with Docker.&lt;/p&gt; &#xA;&lt;p&gt;Watch the screencast: &lt;a href=&#34;https://www.youtube.com/watch?v=LL1cV2FXZ5I&#34;&gt;https://www.youtube.com/watch?v=LL1cV2FXZ5I&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join us on Discord: &lt;a href=&#34;https://discord.gg/YgHVT7GCXS&#34;&gt;https://discord.gg/YgHVT7GCXS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you have a Ruby environment available, you can install MRSK globally with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install mrsk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...otherwise, you can run a dockerized version via an alias (add this to your ${SHELL}rc to simplify re-use):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias mrsk=&#39;docker run --rm -it -v $HOME/.ssh:/root/.ssh -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}/:/workdir  ghcr.io/mrsked/mrsk&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, inside your app directory, run &lt;code&gt;mrsk init&lt;/code&gt; (or &lt;code&gt;mrsk init --bundle&lt;/code&gt; within Rails apps where you want a bin/mrsk binstub). Now edit the new file &lt;code&gt;config/deploy.yml&lt;/code&gt;. It could look as simple as this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;service: hey&#xA;image: 37s/hey&#xA;servers:&#xA;  - 192.168.0.1&#xA;  - 192.168.0.2&#xA;registry:&#xA;  username: registry-user-name&#xA;  password:&#xA;    - MRSK_REGISTRY_PASSWORD&#xA;env:&#xA;  secret:&#xA;    - RAILS_MASTER_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then edit your &lt;code&gt;.env&lt;/code&gt; file to add your registry password as &lt;code&gt;MRSK_REGISTRY_PASSWORD&lt;/code&gt; (and your &lt;code&gt;RAILS_MASTER_KEY&lt;/code&gt; for production with a Rails app).&lt;/p&gt; &#xA;&lt;p&gt;Now you&#39;re ready to deploy to the servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mrsk deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect to the servers over SSH (using root by default, authenticated by your ssh key)&lt;/li&gt; &#xA; &lt;li&gt;Install Docker on any server that might be missing it (using apt-get): root access is needed via ssh for this.&lt;/li&gt; &#xA; &lt;li&gt;Log into the registry both locally and remotely&lt;/li&gt; &#xA; &lt;li&gt;Build the image using the standard Dockerfile in the root of the application.&lt;/li&gt; &#xA; &lt;li&gt;Push the image to the registry.&lt;/li&gt; &#xA; &lt;li&gt;Pull the image from the registry onto the servers.&lt;/li&gt; &#xA; &lt;li&gt;Ensure Traefik is running and accepting traffic on port 80.&lt;/li&gt; &#xA; &lt;li&gt;Ensure your app responds with &lt;code&gt;200 OK&lt;/code&gt; to &lt;code&gt;GET /up&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Start a new container with the version of the app that matches the current git version hash.&lt;/li&gt; &#xA; &lt;li&gt;Stop the old container running the previous version of the app.&lt;/li&gt; &#xA; &lt;li&gt;Prune unused images and stopped containers to ensure servers don&#39;t fill up.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Voila! All the servers are now serving the app on port 80. If you&#39;re just running a single server, you&#39;re ready to go. If you&#39;re running multiple servers, you need to put a load balancer in front of them.&lt;/p&gt; &#xA;&lt;h2&gt;Vision&lt;/h2&gt; &#xA;&lt;p&gt;In the past decade+, there&#39;s been an explosion in commercial offerings that make deploying web apps easier. Heroku kicked it off with an incredible offering that stayed ahead of the competition seemingly forever. These days we have excellent alternatives like Fly.io and Render. And hosted Kubernetes is making things easier too on AWS, GCP, Digital Ocean, and elsewhere. But these are all offerings that have you renting computers in the cloud at a premium. If you want to run on your own hardware, or even just have a clear migration path to do so in the future, you need to carefully consider how locked in you get to these commercial platforms. Preferably before the bills swallow your business whole!&lt;/p&gt; &#xA;&lt;p&gt;MRSK seeks to bring the advance in ergonomics pioneered by these commercial offerings to deploying web apps anywhere. Whether that&#39;s low-cost cloud options without the managed-service markup from the likes of Digital Ocean, Hetzner, OVH, etc, or it&#39;s your own colocated bare metal. To MRSK, it&#39;s all the same. Feed the config file a list of IP addresses with vanilla Ubuntu servers that have seen no prep beyond an added SSH key, and you&#39;ll be running in literally minutes.&lt;/p&gt; &#xA;&lt;p&gt;This approach gives you enormous portability. You can have your web app deployed on several clouds at ease like this. Or you can buy the baseline with your own hardware, then deploy to a cloud before a big seasonal spike to get more capacity. When you&#39;re not locked into a single provider from a tooling perspective, there are a lot of compelling options available.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, MRSK is meant to compress the complexity of going to production using open source tooling that isn&#39;t tied to any commercial offering. Not to zero, mind you. You&#39;re probably still better off with a fully managed service if basic Linux or Docker is still difficult, but as soon as those concepts are familiar, you&#39;ll be ready to go with MRSK.&lt;/p&gt; &#xA;&lt;h2&gt;Why not just run Capistrano, Kubernetes or Docker Swarm?&lt;/h2&gt; &#xA;&lt;p&gt;MRSK basically is Capistrano for Containers, without the need to carefully prepare servers in advance. No need to ensure that the servers have just the right version of Ruby or other dependencies you need. That all lives in the Docker image now. You can boot a brand new Ubuntu (or whatever) server, add it to the list of servers in MRSK, and it&#39;ll be auto-provisioned with Docker, and run right away. Docker&#39;s layer caching also speeds up deployments with less mucking about on the server. And the images built for MRSK can be used for CI or later introspection.&lt;/p&gt; &#xA;&lt;p&gt;Kubernetes is a beast. Running it yourself on your own hardware is not for the faint of heart. It&#39;s a fine option if you want to run on someone else&#39;s platform, either transparently &lt;a href=&#34;https://thenewstack.io/render-cloud-deployment-with-less-engineering/&#34;&gt;like Render&lt;/a&gt; or explicitly on AWS/GCP, but if you&#39;d like the freedom to move between cloud and your own hardware, or even mix the two, MRSK is much simpler. You can see everything that&#39;s going on, it&#39;s just basic Docker commands being called.&lt;/p&gt; &#xA;&lt;p&gt;Docker Swarm is much simpler than Kubernetes, but it&#39;s still built on the same declarative model that uses state reconciliation. MRSK is intentionally designed around imperative commands, like Capistrano.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, there are a myriad of ways to deploy web apps, but this is the toolkit we&#39;re using at &lt;a href=&#34;https://37signals.com&#34;&gt;37signals&lt;/a&gt; to bring &lt;a href=&#34;https://www.hey.com&#34;&gt;HEY&lt;/a&gt; &lt;a href=&#34;https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0&#34;&gt;home from the cloud&lt;/a&gt; without losing the advantages of modern containerization tooling.&lt;/p&gt; &#xA;&lt;h2&gt;Running MRSK from Docker&lt;/h2&gt; &#xA;&lt;p&gt;MRSK is packaged up in a Docker container similarly to &lt;a href=&#34;https://github.com/rails/docked&#34;&gt;rails/docked&lt;/a&gt;. This will allow you to run MRSK (from your application directory) without having to install any dependencies other than Docker. Add the following alias to your profile configuration to make working with the container more convenient:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias mrsk=&#34;docker run -it --rm -v &#39;${PWD}:/workdir&#39; -v &#39;${SSH_AUTH_SOCK}:/ssh-agent&#39; -v /var/run/docker.sock:/var/run/docker.sock -e &#39;SSH_AUTH_SOCK=/ssh-agent&#39; ghcr.io/mrsked/mrsk:latest&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since MRSK uses SSH to establish a remote connection, it will need access to your SSH agent. The above command uses a volume mount to make it available inside the container and configures the SSH agent inside the container to make use of it.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Using .env file to load required environment variables&lt;/h3&gt; &#xA;&lt;p&gt;MRSK uses &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;dotenv&lt;/a&gt; to automatically load environment variables set in the &lt;code&gt;.env&lt;/code&gt; file present in the application root. This file can be used to set variables like &lt;code&gt;MRSK_REGISTRY_PASSWORD&lt;/code&gt; or database passwords. But for this reason you must ensure that .env files are not checked into Git or included in your Dockerfile! The format is just key-value like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;MRSK_REGISTRY_PASSWORD=pw&#xA;DB_PASSWORD=secret123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a generated .env file&lt;/h3&gt; &#xA;&lt;h4&gt;1Password as a secret store&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using a centralized secret store, like 1Password, you can create &lt;code&gt;.env.erb&lt;/code&gt; as a template which looks up the secrets. Example of a .env.erb file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;% if (session_token = `op signin --account my-one-password-account --raw`.strip) != &#34;&#34; %&amp;gt;# Generated by mrsk envify&#xA;GITHUB_TOKEN=&amp;lt;%= `gh config get -h github.com oauth_token`.strip %&amp;gt;&#xA;MRSK_REGISTRY_PASSWORD=&amp;lt;%= `op read &#34;op://Vault/Docker Hub/password&#34; -n --session  #{session_token}` %&amp;gt;&#xA;RAILS_MASTER_KEY=&amp;lt;%= `op read &#34;op://Vault/My App/RAILS_MASTER_SECRET&#34; -n --session #{session_token}` %&amp;gt;&#xA;MYSQL_ROOT_PASSWORD=&amp;lt;%= `op read &#34;op://Vault/My App/MYSQL_ROOT_PASSWORD&#34; -n --session #{session_token}` %&amp;gt;&#xA;&amp;lt;% else raise ArgumentError, &#34;Session token missing&#34; end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This template can safely be checked into git. Then everyone deploying the app can run &lt;code&gt;mrsk envify&lt;/code&gt; when they setup the app for the first time or passwords change to get the correct &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you need separate env variables for different destinations, you can set them with &lt;code&gt;.env.destination.erb&lt;/code&gt; for the template, which will generate &lt;code&gt;.env.staging&lt;/code&gt; when run with &lt;code&gt;mrsk envify -d staging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Bitwarden as a secret store&lt;/h4&gt; &#xA;&lt;p&gt;If you are using open source secret store like bitwarden, you can create &lt;code&gt;.env.erb&lt;/code&gt; as a template which looks up the secrets.&lt;/p&gt; &#xA;&lt;p&gt;You can store &lt;code&gt;SOME_SECRET&lt;/code&gt; in a secure note in bitwarden vault.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bw list items --search SOME_SECRET | jq&#xA;? Master password: [hidden]&#xA;&#xA;[&#xA;  {&#xA;    &#34;object&#34;: &#34;item&#34;,&#xA;    &#34;id&#34;: &#34;123123123-1232-4224-222f-234234234234&#34;,&#xA;    &#34;organizationId&#34;: null,&#xA;    &#34;folderId&#34;: null,&#xA;    &#34;type&#34;: 2,&#xA;    &#34;reprompt&#34;: 0,&#xA;    &#34;name&#34;: &#34;SOME_SECRET&#34;,&#xA;    &#34;notes&#34;: &#34;yyy&#34;,&#xA;    &#34;favorite&#34;: false,&#xA;    &#34;secureNote&#34;: {&#xA;      &#34;type&#34;: 0&#xA;    },&#xA;    &#34;collectionIds&#34;: [],&#xA;    &#34;revisionDate&#34;: &#34;2023-02-28T23:54:47.868Z&#34;,&#xA;    &#34;creationDate&#34;: &#34;2022-11-07T03:16:05.828Z&#34;,&#xA;    &#34;deletedDate&#34;: null&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and extract the &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;SOME_SECRET&lt;/code&gt; from the &lt;code&gt;json&lt;/code&gt; above and use in the &lt;code&gt;erb&lt;/code&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;Example &lt;code&gt;.env.erb&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;% if (session_token=`bw unlock --raw`.strip) != &#34;&#34; %&amp;gt;# Generated by mrsk envify&#xA;SOME_SECRET=&amp;lt;%= `bw get notes 123123123-1232-4224-222f-234234234234 --session #{session_token}` %&amp;gt;&#xA;&amp;lt;% else raise ArgumentError, &#34;session_token token missing&#34; end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then everyone deploying the app can run &lt;code&gt;mrsk envify&lt;/code&gt; and mrsk will generate &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using another registry than Docker Hub&lt;/h3&gt; &#xA;&lt;p&gt;The default registry is Docker Hub, but you can change it using &lt;code&gt;registry/server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;registry:&#xA;  server: registry.digitalocean.com&#xA;  username:&#xA;    - DOCKER_REGISTRY_TOKEN&#xA;  password:&#xA;    - DOCKER_REGISTRY_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A reference to secret &lt;code&gt;DOCKER_REGISTRY_TOKEN&lt;/code&gt; will look for &lt;code&gt;ENV[&#34;DOCKER_REGISTRY_TOKEN&#34;]&lt;/code&gt; on the machine running MRSK.&lt;/p&gt; &#xA;&lt;h3&gt;Using a different SSH user than root&lt;/h3&gt; &#xA;&lt;p&gt;The default SSH user is root, but you can change it using &lt;code&gt;ssh/user&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  user: app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a proxy SSH host&lt;/h3&gt; &#xA;&lt;p&gt;If you need to connect to server through a proxy host, you can use &lt;code&gt;ssh/proxy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  proxy: &#34;192.168.0.1&#34; # defaults to root as the user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with specific user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  proxy: &#34;app@192.168.0.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using env variables&lt;/h3&gt; &#xA;&lt;p&gt;You can inject env variables into the app containers using &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  DATABASE_URL: mysql2://db1/hey_production/&#xA;  REDIS_URL: redis://redis1:6379/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using secret env variables&lt;/h3&gt; &#xA;&lt;p&gt;If you have env variables that are secret, you can divide the &lt;code&gt;env&lt;/code&gt; block into &lt;code&gt;clear&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  clear:&#xA;    DATABASE_URL: mysql2://db1/hey_production/&#xA;    REDIS_URL: redis://redis1:6379/1&#xA;  secret:&#xA;    - DATABASE_PASSWORD&#xA;    - REDIS_PASSWORD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The list of secret env variables will be expanded at run time from your local machine. So a reference to a secret &lt;code&gt;DATABASE_PASSWORD&lt;/code&gt; will look for &lt;code&gt;ENV[&#34;DATABASE_PASSWORD&#34;]&lt;/code&gt; on the machine running MRSK. Just like with build secrets.&lt;/p&gt; &#xA;&lt;p&gt;If the referenced secret ENVs are missing, the configuration will be halted with a &lt;code&gt;KeyError&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;p&gt;Note: Marking an ENV as secret currently only redacts its value in the output for MRSK. The ENV is still injected in the clear into the container at runtime.&lt;/p&gt; &#xA;&lt;h3&gt;Using volumes&lt;/h3&gt; &#xA;&lt;p&gt;You can add custom volumes into the app containers using &lt;code&gt;volumes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;volumes:&#xA;  - &#34;/local/path:/container/path&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MRSK env variables&lt;/h3&gt; &#xA;&lt;p&gt;The following env variables are set when your container runs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MRSK_CONTAINER_NAME&lt;/code&gt; : this contains the current container name and version&lt;/p&gt; &#xA;&lt;h3&gt;Using different roles for servers&lt;/h3&gt; &#xA;&lt;p&gt;If your application uses separate hosts for running jobs or other roles beyond the default web running, you can specify these hosts in a dedicated role with a new entrypoint command like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  job:&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;    cmd: bin/jobs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Traefik will only by default be installed and run on the servers in the &lt;code&gt;web&lt;/code&gt; role (and on all servers if no roles are defined). If you need Traefik on hosts in other roles than &lt;code&gt;web&lt;/code&gt;, add &lt;code&gt;traefik: true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  web2:&#xA;    traefik: true&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using container labels&lt;/h3&gt; &#xA;&lt;p&gt;You can specialize the default Traefik rules by setting labels on the containers that are being started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;labels:&#xA;  traefik.http.routers.hey.rule: Host(`app.hey.com`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The backticks are needed to ensure the rule is passed in correctly and not treated as command substitution by Bash!&lt;/p&gt; &#xA;&lt;p&gt;This allows you to run multiple applications on the same server sharing the same Traefik instance and port. See &lt;a href=&#34;https://doc.traefik.io/traefik/routing/routers/#rule&#34;&gt;https://doc.traefik.io/traefik/routing/routers/#rule&lt;/a&gt; for a full list of available routing rules.&lt;/p&gt; &#xA;&lt;p&gt;The labels can also be applied on a per-role basis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  job:&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;    cmd: bin/jobs&#xA;    labels:&#xA;      my-label: &#34;50&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using container options&lt;/h3&gt; &#xA;&lt;p&gt;You can specialize the options used to start containers using the &lt;code&gt;options&lt;/code&gt; definitions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  job:&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;    cmd: bin/jobs&#xA;    options:&#xA;      cap-add: true&#xA;      cpu-count: 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;ll start the job containers with &lt;code&gt;docker run ... --cap-add --cpu-count 4 ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring logging&lt;/h3&gt; &#xA;&lt;p&gt;You can configure the logging driver and options passed to Docker using &lt;code&gt;logging&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;logging:&#xA;  driver: awslogs&#xA;  options:&#xA;    awslogs-region: &#34;eu-central-2&#34;&#xA;    awslogs-group: &#34;my-app&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If nothing is configured, the default option &lt;code&gt;max-size=10m&lt;/code&gt; is used for all containers. The default logging driver of Docker is &lt;code&gt;json-file&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using a different stop wait time&lt;/h3&gt; &#xA;&lt;p&gt;On a new deploy, each old running container is gracefully shut down with a &lt;code&gt;SIGTERM&lt;/code&gt;, and after a grace period of &lt;code&gt;10&lt;/code&gt; seconds a &lt;code&gt;SIGKILL&lt;/code&gt; is sent. You can configure this value via the &lt;code&gt;stop_wait_time&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;stop_wait_time: 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using remote builder for native multi-arch&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on ARM64 (like Apple Silicon), but you want to deploy on AMD64 (x86 64-bit), you can use multi-architecture images. By default, MRSK will setup a local buildx configuration that does this through QEMU emulation. But this can be quite slow, especially on the first build.&lt;/p&gt; &#xA;&lt;p&gt;If you want to speed up this process by using a remote AMD64 host to natively build the AMD64 part of the image, while natively building the ARM64 part locally, you can do so using builder options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  local:&#xA;    arch: arm64&#xA;    host: unix:///Users/&amp;lt;%= `whoami`.strip %&amp;gt;/.docker/run/docker.sock&#xA;  remote:&#xA;    arch: amd64&#xA;    host: ssh://root@192.168.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: You must have Docker running on the remote host being used as a builder. This instance should only be shared for builds using the same registry and credentials.&lt;/p&gt; &#xA;&lt;h3&gt;Using remote builder for single-arch&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on ARM64 (like Apple Silicon), want to deploy on AMD64 (x86 64-bit), but don&#39;t need to run the image locally (or on other ARM64 hosts), you can configure a remote builder that just targets AMD64. This is a bit faster than building with multi-arch, as there&#39;s nothing to build locally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  remote:&#xA;    arch: amd64&#xA;    host: ssh://root@192.168.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using native builder when multi-arch isn&#39;t needed&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on the same architecture as the one you&#39;re deploying on, you can speed up the build by forgoing both multi-arch and remote building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  multiarch: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is also a good option if you&#39;re running MRSK from a CI server that shares architecture with the deployment servers.&lt;/p&gt; &#xA;&lt;h3&gt;Using a different Dockerfile or context when building&lt;/h3&gt; &#xA;&lt;p&gt;If you need to pass a different Dockerfile or context to the build command (e.g. if you&#39;re using a monorepo or you have different Dockerfiles), you can do so in the builder options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Use a different Dockerfile&#xA;builder:&#xA;  dockerfile: Dockerfile.xyz&#xA;&#xA;# Set context&#xA;builder:&#xA;  context: &#34;..&#34;&#xA;&#xA;# Set Dockerfile and context&#xA;builder:&#xA;  dockerfile: &#34;../Dockerfile.xyz&#34;&#xA;  context: &#34;..&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using build secrets for new images&lt;/h3&gt; &#xA;&lt;p&gt;Some images need a secret passed in during build time, like a GITHUB_TOKEN, to give access to private gem repositories. This can be done by having the secret in ENV, then referencing it in the builder configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  secrets:&#xA;    - GITHUB_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This build secret can then be referenced in the Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Copy Gemfiles&#xA;COPY Gemfile Gemfile.lock ./&#xA;&#xA;# Install dependencies, including private repositories via access token (then remove bundle cache with exposed GITHUB_TOKEN)&#xA;RUN --mount=type=secret,id=GITHUB_TOKEN \&#xA;  BUNDLE_GITHUB__COM=x-access-token:$(cat /run/secrets/GITHUB_TOKEN) \&#xA;  bundle install &amp;amp;&amp;amp; \&#xA;  rm -rf /usr/local/bundle/cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using command arguments for Traefik&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the traefik command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;traefik:&#xA;  args:&#xA;    accesslog: true&#xA;    accesslog.format: json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the traefik container with &lt;code&gt;--accesslog=true accesslog.format=json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Traefik&#39;s host port binding&lt;/h3&gt; &#xA;&lt;p&gt;By default Traefik binds to port 80 of the host machine, it can be configured to use an alternative port:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;traefik:&#xA;  host_port: 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure docker options for traefik&lt;/h3&gt; &#xA;&lt;p&gt;We allow users to pass additional docker options to the trafik container like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;traefik:&#xA;  options:&#xA;    publish:&#xA;    - 8080:8080&#xA;    volumes:&#xA;    - /tmp/example.json:/tmp/example.json&#xA;    memory: 512m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the traefik container with a command like: &lt;code&gt;docker run ... --volume /tmp/example.json:/tmp/example.json --publish 8080:8080 &lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configure alternate entrypoints for traefik&lt;/h3&gt; &#xA;&lt;p&gt;You can configure multiple entrypoints for traefik like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;service: myservice&#xA;&#xA;labels:&#xA;  traefik.tcp.routers.other.rule: &#39;HostSNI(`*`)&#39;&#xA;  traefik.tcp.routers.other.entrypoints: otherentrypoint&#xA;  traefik.tcp.services.other.loadbalancer.server.port: 9000&#xA;  traefik.http.routers.myservice.entrypoints: web&#xA;  traefik.http.services.myservice.loadbalancer.server.port: 8080&#xA;&#xA;traefik:&#xA;  options:&#xA;    publish:&#xA;      - 9000:9000&#xA;  args:&#xA;    entrypoints.web.address: &#39;:80&#39;&#xA;    entrypoints.otherentrypoint.address: &#39;:9000&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring build args for new images&lt;/h3&gt; &#xA;&lt;p&gt;Build arguments that aren&#39;t secret can also be configured:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  args:&#xA;    RUBY_VERSION: 3.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This build argument can then be used in the Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ARG RUBY_VERSION&#xA;FROM ruby:$RUBY_VERSION-slim as base&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using accessories for database, cache, search services&lt;/h3&gt; &#xA;&lt;p&gt;You can manage your accessory services via MRSK as well. Accessories are long-lived services that your app depends on. They are not updated when you deploy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;accessories:&#xA;  mysql:&#xA;    image: mysql:5.7&#xA;    host: 1.1.1.3&#xA;    port: 3306&#xA;    env:&#xA;      clear:&#xA;        MYSQL_ROOT_HOST: &#39;%&#39;&#xA;      secret:&#xA;        - MYSQL_ROOT_PASSWORD&#xA;    volumes:&#xA;      - /var/lib/mysql:/var/lib/mysql&#xA;    options:&#xA;      cpus: 4&#xA;      memory: &#34;2GB&#34;&#xA;  redis:&#xA;    image: redis:latest&#xA;    role:&#xA;      - web&#xA;    port: &#34;36379:6379&#34;&#xA;    volumes:&#xA;      - /var/lib/redis:/data&#xA;  internal-example:&#xA;    image: registry.digitalocean.com/user/otherservice:latest&#xA;    host: 1.1.1.5&#xA;    port: 44444&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The hosts that the accessories will run on can be specified by hosts or roles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  # Single host&#xA;  mysql:&#xA;    host: 1.1.1.1&#xA;  # Multiple hosts&#xA;  redis:&#xA;    hosts:&#xA;      - 1.1.1.1&#xA;      - 1.1.1.2&#xA;  # By role&#xA;  monitoring:&#xA;    roles:&#xA;      - web&#xA;      - jobs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run &lt;code&gt;mrsk accessory start mysql&lt;/code&gt; to start the MySQL server on 1.1.1.3. See &lt;code&gt;mrsk accessory&lt;/code&gt; for all the commands possible.&lt;/p&gt; &#xA;&lt;p&gt;Accessory images must be public or tagged in your private registry.&lt;/p&gt; &#xA;&lt;h3&gt;Using Cron&lt;/h3&gt; &#xA;&lt;p&gt;You can use a specific container to run your Cron jobs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  cron:&#xA;    hosts:&#xA;      - 192.168.0.1&#xA;    cmd:&#xA;      bash -c &#34;cat config/crontab | crontab - &amp;amp;&amp;amp; cron -f&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This assumes the Cron settings are stored in &lt;code&gt;config/crontab&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using audit broadcasts&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to broadcast audits of deploys, rollbacks, etc to a chatroom or elsewhere, you can configure the &lt;code&gt;audit_broadcast_cmd&lt;/code&gt; setting with the path to a bin file that will be passed the audit line as the first argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;audit_broadcast_cmd:&#xA;  bin/audit_broadcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The broadcast command could look something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash&#xA;curl -q -d content=&#34;[My App] ${1}&#34; https://3.basecamp.com/XXXXX/integrations/XXXXX/buckets/XXXXX/chats/XXXXX/lines&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;ll post a line like follows to a preconfigured chatbot in Basecamp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[My App] [dhh] Rolled back to version d264c4e92470ad1bd18590f04466787262f605de&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using custom healthcheck path or port&lt;/h3&gt; &#xA;&lt;p&gt;MRSK defaults to checking the health of your application again &lt;code&gt;/up&lt;/code&gt; on port 3000. You can tailor both with the &lt;code&gt;healthcheck&lt;/code&gt; setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;healthcheck:&#xA;  path: /healthz&#xA;  port: 4000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will ensure your application is configured with a traefik label for the healthcheck against &lt;code&gt;/healthz&lt;/code&gt; and that the pre-deploy healthcheck that MRSK performs is done against the same path on port 4000.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Running commands on servers&lt;/h3&gt; &#xA;&lt;p&gt;You can execute one-off commands on the servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Runs command on all servers&#xA;mrsk app exec &#39;ruby -v&#39;&#xA;App Host: 192.168.0.1&#xA;ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;&#xA;App Host: 192.168.0.2&#xA;ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;&#xA;# Runs command on primary server&#xA;mrsk app exec --primary &#39;cat .ruby-version&#39;&#xA;App Host: 192.168.0.1&#xA;3.1.3&#xA;&#xA;# Runs Rails command on all servers&#xA;mrsk app exec &#39;bin/rails about&#39;&#xA;App Host: 192.168.0.1&#xA;About your application&#39;s environment&#xA;Rails version             7.1.0.alpha&#xA;Ruby version              ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;RubyGems version          3.3.26&#xA;Rack version              2.2.5&#xA;Middleware                ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::Callbacks, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper&#xA;Application root          /rails&#xA;Environment               production&#xA;Database adapter          sqlite3&#xA;Database schema version   20221231233303&#xA;&#xA;App Host: 192.168.0.2&#xA;About your application&#39;s environment&#xA;Rails version             7.1.0.alpha&#xA;Ruby version              ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;RubyGems version          3.3.26&#xA;Rack version              2.2.5&#xA;Middleware                ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::Callbacks, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper&#xA;Application root          /rails&#xA;Environment               production&#xA;Database adapter          sqlite3&#xA;Database schema version   20221231233303&#xA;&#xA;# Run Rails runner on primary server&#xA;mrsk app exec -p &#39;bin/rails runner &#34;puts Rails.application.config.time_zone&#34;&#39;&#xA;UTC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running interactive commands over SSH&lt;/h3&gt; &#xA;&lt;p&gt;You can run interactive commands, like a Rails console or a bash session, on a server (default is primary, use &lt;code&gt;--hosts&lt;/code&gt; to connect to another):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Starts a bash session in a new container made from the most recent app image&#xA;mrsk app exec -i bash&#xA;&#xA;# Starts a bash session in the currently running container for the app&#xA;mrsk app exec -i --reuse bash&#xA;&#xA;# Starts a Rails console in a new container made from the most recent app image&#xA;mrsk app exec -i &#39;bin/rails console&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running details to show state of containers&lt;/h3&gt; &#xA;&lt;p&gt;You can see the state of your servers by running &lt;code&gt;mrsk details&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Traefik Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMES&#xA;6195b2a28c81   traefik   &#34;/entrypoint.sh --pr‚Ä¶&#34;   30 minutes ago   Up 19 minutes   0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp   traefik&#xA;&#xA;Traefik Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMES&#xA;de14a335d152   traefik   &#34;/entrypoint.sh --pr‚Ä¶&#34;   30 minutes ago   Up 19 minutes   0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp   traefik&#xA;&#xA;App Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS          PORTS      NAMES&#xA;badb1aa51db3   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e‚Ä¶&#34;   13 minutes ago   Up 13 minutes   3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;&#xA;App Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS          PORTS      NAMES&#xA;1d3c91ed1f55   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e‚Ä¶&#34;   13 minutes ago   Up 13 minutes   3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also see just info for app containers with &lt;code&gt;mrsk app details&lt;/code&gt; or just for Traefik with &lt;code&gt;mrsk traefik details&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running rollback to fix a bad deploy&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve discovered a bad deploy, you can quickly rollback by reactivating the old, paused container image. You can see what old containers are available for rollback by running &lt;code&gt;mrsk app containers&lt;/code&gt;. It&#39;ll give you a presentation similar to &lt;code&gt;mrsk app details&lt;/code&gt;, but include all the old containers as well. Showing something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;App Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS                      PORTS      NAMES&#xA;1d3c91ed1f51   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e‚Ä¶&#34;   19 minutes ago   Up 19 minutes               3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;539f26b28369   registry.digitalocean.com/user/app:e5d9d7c2b898289dfbc5f7f1334140d984eedae4   &#34;/rails/bin/docker-e‚Ä¶&#34;   31 minutes ago   Exited (1) 27 minutes ago              chat-e5d9d7c2b898289dfbc5f7f1334140d984eedae4&#xA;&#xA;App Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS                      PORTS      NAMES&#xA;badb1aa51db4   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e‚Ä¶&#34;   19 minutes ago   Up 19 minutes               3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;6f170d1172ae   registry.digitalocean.com/user/app:e5d9d7c2b898289dfbc5f7f1334140d984eedae4   &#34;/rails/bin/docker-e‚Ä¶&#34;   31 minutes ago   Exited (1) 27 minutes ago              chat-e5d9d7c2b898289dfbc5f7f1334140d984eedae4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the example above, we can see that &lt;code&gt;e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt; was the last version, so it&#39;s available as a rollback target. We can perform this rollback by running &lt;code&gt;mrsk rollback e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt;. That&#39;ll stop &lt;code&gt;6ef8a6a84c525b123c5245345a8483f86d05a123&lt;/code&gt; and then start &lt;code&gt;e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt;. Because the old container is still available, this is very quick. Nothing to download from the registry.&lt;/p&gt; &#xA;&lt;p&gt;Note that by default old containers are pruned after 3 days when you run &lt;code&gt;mrsk deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running removal to clean up servers&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to remove the entire application, including Traefik, containers, images, and registry session, you can run &lt;code&gt;mrsk remove&lt;/code&gt;. This will leave the servers clean.&lt;/p&gt; &#xA;&lt;h2&gt;Locking&lt;/h2&gt; &#xA;&lt;p&gt;Commands that are unsafe to run concurrently will take a deploy lock while they run. The lock is the &lt;code&gt;mrsk_lock&lt;/code&gt; directory on the primary server.&lt;/p&gt; &#xA;&lt;p&gt;You can check the lock status with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mrsk lock status&#xA;&#xA;Locked by: AN Other at 2023-03-24 09:49:03 UTC&#xA;Version: 77f45c0686811c68989d6576748475a60bf53fc2&#xA;Message: Automatic deploy lock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also manually acquire and release the lock&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mrsk lock acquire -m &#34;Doing maintanence&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;mrsk lock release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stage of development&lt;/h2&gt; &#xA;&lt;p&gt;This is beta software. Commands may still move around. But we&#39;re live in production at &lt;a href=&#34;https://37signals.com&#34;&gt;37signals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MRSK is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>