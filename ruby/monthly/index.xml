<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-01T01:57:53Z</updated>
  <subtitle>Monthly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>puma/puma</title>
    <updated>2024-12-01T01:57:53Z</updated>
    <id>tag:github.com,2024-12-01:/puma/puma</id>
    <link href="https://github.com/puma/puma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby/Rack web server built for parallelism&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://puma.io/images/logos/puma-logo-large.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Puma: A Ruby Web Server Built For Parallelism&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/puma/puma/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/puma/puma/workflows/Tests/badge.svg?branch=master&#34; alt=&#34;Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/puma/puma&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/puma/puma.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/puma&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-Puma-blue.svg?sanitize=true&#34; alt=&#34;StackOverflow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Puma is a &lt;strong&gt;simple, fast, multi-threaded, and highly parallel HTTP 1.1 server for Ruby/Rack applications&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Built For Speed &amp;amp; Parallelism&lt;/h2&gt; &#xA;&lt;p&gt;Puma is a server for &lt;a href=&#34;https://github.com/rack/rack&#34;&gt;Rack&lt;/a&gt;-powered HTTP applications written in Ruby. It is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-threaded&lt;/strong&gt;. Each request is served in a separate thread. This helps you serve more requests per second with less memory use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-process&lt;/strong&gt;. &#34;Pre-forks&#34; in cluster mode, using less memory per-process thanks to copy-on-write memory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standalone&lt;/strong&gt;. With SSL support, zero-downtime rolling restarts and a built-in request bufferer, you can deploy Puma without any reverse proxy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battle-tested&lt;/strong&gt;. Our HTTP parser is inherited from Mongrel and has over 15 years of production use. Puma is currently the most popular Ruby webserver, and is the default server for Ruby on Rails.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Originally designed as a server for &lt;a href=&#34;https://github.com/rubinius/rubinius&#34;&gt;Rubinius&lt;/a&gt;, Puma also works well with Ruby (MRI) and JRuby.&lt;/p&gt; &#xA;&lt;p&gt;On MRI, there is a Global VM Lock (GVL) that ensures only one thread can run Ruby code at a time. But if you&#39;re doing a lot of blocking IO (such as HTTP calls to external APIs like Twitter), Puma still improves MRI&#39;s throughput by allowing IO waiting to be done in parallel. Truly parallel Ruby implementations (TruffleRuby, JRuby) don&#39;t have this limitation.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install puma&#xA;$ puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without arguments, puma will look for a rackup (.ru) file in working directory called &lt;code&gt;config.ru&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SSL Connection Support&lt;/h2&gt; &#xA;&lt;p&gt;Puma will install/compile with support for ssl sockets, assuming OpenSSL development files are installed on the system.&lt;/p&gt; &#xA;&lt;p&gt;If the system does not have OpenSSL development files installed, Puma will install/compile, but it will not allow ssl connections.&lt;/p&gt; &#xA;&lt;h2&gt;Frameworks&lt;/h2&gt; &#xA;&lt;h3&gt;Rails&lt;/h3&gt; &#xA;&lt;p&gt;Puma is the default server for Rails, included in the generated Gemfile.&lt;/p&gt; &#xA;&lt;p&gt;Start your server with the &lt;code&gt;rails&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many configuration options and Puma features are not available when using &lt;code&gt;rails server&lt;/code&gt;. It is recommended that you use Puma&#39;s executable instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sinatra&lt;/h3&gt; &#xA;&lt;p&gt;You can run your Sinatra application with Puma from the command line like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ruby app.rb -s Puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to actually configure Puma using a config file, like &lt;code&gt;puma.rb&lt;/code&gt;, however, you need to use the &lt;code&gt;puma&lt;/code&gt; executable. To do this, you must add a rackup file to your Sinatra app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;require &#39;./app&#39;&#xA;run Sinatra::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then start your application using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Puma provides numerous options. Consult &lt;code&gt;puma -h&lt;/code&gt; (or &lt;code&gt;puma --help&lt;/code&gt;) for a full list of CLI options, or see &lt;code&gt;Puma::DSL&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/dsl.rb&#34;&gt;dsl.rb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also find several configuration examples as part of the &lt;a href=&#34;https://github.com/puma/puma/tree/master/test/config&#34;&gt;test&lt;/a&gt; suite.&lt;/p&gt; &#xA;&lt;p&gt;For debugging purposes, you can set the environment variable &lt;code&gt;PUMA_LOG_CONFIG&lt;/code&gt; with a value and the loaded configuration will be printed as part of the boot process.&lt;/p&gt; &#xA;&lt;h3&gt;Thread Pool&lt;/h3&gt; &#xA;&lt;p&gt;Puma uses a thread pool. You can set the minimum and maximum number of threads that are available in the pool with the &lt;code&gt;-t&lt;/code&gt; (or &lt;code&gt;--threads&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -t 8:32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Puma will automatically scale the number of threads, from the minimum until it caps out at the maximum, based on how much traffic is present. The current default is &lt;code&gt;0:16&lt;/code&gt; and on MRI is &lt;code&gt;0:5&lt;/code&gt;. Feel free to experiment, but be careful not to set the number of maximum threads to a large number, as you may exhaust resources on the system (or cause contention for the Global VM Lock, when using MRI).&lt;/p&gt; &#xA;&lt;p&gt;Be aware that additionally Puma creates threads on its own for internal purposes (e.g. handling slow clients). So, even if you specify -t 1:1, expect around 7 threads created in your application.&lt;/p&gt; &#xA;&lt;h3&gt;Clustered mode&lt;/h3&gt; &#xA;&lt;p&gt;Puma also offers &#34;clustered mode&#34;. Clustered mode &lt;code&gt;fork&lt;/code&gt;s workers from a master process. Each child process still has its own thread pool. You can tune the number of workers with the &lt;code&gt;-w&lt;/code&gt; (or &lt;code&gt;--workers&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -t 8:32 -w 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with the &lt;code&gt;WEB_CONCURRENCY&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ WEB_CONCURRENCY=3 puma -t 8:32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that threads are still used in clustered mode, and the &lt;code&gt;-t&lt;/code&gt; thread flag setting is per worker, so &lt;code&gt;-w 2 -t 16:16&lt;/code&gt; will spawn 32 threads in total, with 16 in each worker process.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;WEB_CONCURRENCY&lt;/code&gt; environment variable is set to &lt;code&gt;&#34;auto&#34;&lt;/code&gt; and the &lt;code&gt;concurrent-ruby&lt;/code&gt; gem is available in your application, Puma will set the worker process count to the result of &lt;a href=&#34;https://ruby-concurrency.github.io/concurrent-ruby/master/Concurrent.html#available_processor_count-class_method&#34;&gt;available processors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For an in-depth discussion of the tradeoffs of thread and process count settings, &lt;a href=&#34;https://github.com/puma/puma/raw/9282a8efa5a0c48e39c60d22ca70051a25df9f55/docs/kubernetes.md#workers-per-pod-and-other-config-issues&#34;&gt;see our docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In clustered mode, Puma can &#34;preload&#34; your application. This loads all the application code &lt;em&gt;prior&lt;/em&gt; to forking. Preloading reduces total memory usage of your application via an operating system feature called &lt;a href=&#34;https://en.wikipedia.org/wiki/Copy-on-write&#34;&gt;copy-on-write&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;WEB_CONCURRENCY&lt;/code&gt; environment variable is set to a value &amp;gt; 1 (and &lt;code&gt;--prune-bundler&lt;/code&gt; has not been specified), preloading will be enabled by default. Otherwise, you can use the &lt;code&gt;--preload&lt;/code&gt; flag from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -w 3 --preload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you&#39;re using a configuration file, you can use the &lt;code&gt;preload_app!&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/puma.rb&#xA;workers 3&#xA;preload_app!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Preloading canâ€™t be used with phased restart, since phased restart kills and restarts workers one-by-one, and preloading copies the code of master into the workers.&lt;/p&gt; &#xA;&lt;h4&gt;Clustered mode hooks&lt;/h4&gt; &#xA;&lt;p&gt;When using clustered mode, Puma&#39;s configuration DSL provides &lt;code&gt;before_fork&lt;/code&gt; and &lt;code&gt;on_worker_boot&lt;/code&gt; hooks to run code when the master process forks and child workers are booted respectively.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to use these hooks with &lt;code&gt;preload_app!&lt;/code&gt;, otherwise constants loaded by your application (such as &lt;code&gt;Rails&lt;/code&gt;) will not be available inside the hooks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/puma.rb&#xA;before_fork do&#xA;  # Add code to run inside the Puma master process before it forks a worker child.&#xA;end&#xA;&#xA;on_worker_boot do&#xA;  # Add code to run inside the Puma worker process after forking.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, there is an &lt;code&gt;on_refork&lt;/code&gt; and &lt;code&gt;after_refork&lt;/code&gt; hooks which are used only in &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/fork_worker.md&#34;&gt;&lt;code&gt;fork_worker&lt;/code&gt; mode&lt;/a&gt;, when the worker 0 child process forks a grandchild worker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;on_refork do&#xA;  # Used only when fork_worker mode is enabled. Add code to run inside the Puma worker 0&#xA;  # child process before it forks a grandchild worker.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;after_refork do&#xA;  # Used only when fork_worker mode is enabled. Add code to run inside the Puma worker 0&#xA;  # child process after it forks a grandchild worker.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Importantly, note the following considerations when Ruby forks a child process:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;File descriptors such as network sockets &lt;strong&gt;are&lt;/strong&gt; copied from the parent to the forked child process. Dual-use of the same sockets by parent and child will result in I/O conflicts such as &lt;code&gt;SocketError&lt;/code&gt;, &lt;code&gt;Errno::EPIPE&lt;/code&gt;, and &lt;code&gt;EOFError&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Background Ruby threads, including threads used by various third-party gems for connection monitoring, etc., are &lt;strong&gt;not&lt;/strong&gt; copied to the child process. Often this does not cause immediate problems until a third-party connection goes down, at which point there will be no supervisor to reconnect it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Therefore, we recommend the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If possible, do not establish any socket connections (HTTP, database connections, etc.) inside Puma&#39;s master process when booting.&lt;/li&gt; &#xA; &lt;li&gt;If (1) is not possible, use &lt;code&gt;before_fork&lt;/code&gt; and &lt;code&gt;on_refork&lt;/code&gt; to disconnect the parent&#39;s socket connections when forking, so that they are not accidentally copied to the child process.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;on_worker_boot&lt;/code&gt; to restart any background threads on the forked child.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;after_refork&lt;/code&gt; to restart any background threads on the parent.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Master process lifecycle hooks&lt;/h4&gt; &#xA;&lt;p&gt;Puma&#39;s configuration DSL provides master process lifecycle hooks &lt;code&gt;on_booted&lt;/code&gt;, &lt;code&gt;on_restart&lt;/code&gt;, and &lt;code&gt;on_stopped&lt;/code&gt; which may be used to specify code blocks to run on each event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/puma.rb&#xA;on_booted do&#xA;  # Add code to run in the Puma master process after it boots,&#xA;  # and also after a phased restart completes.&#xA;end&#xA;&#xA;on_restart do&#xA;  # Add code to run in the Puma master process when it receives&#xA;  # a restart command but before it restarts.&#xA;end&#xA;&#xA;on_stopped do&#xA;  # Add code to run in the Puma master process when it receives&#xA;  # a stop command but before it shuts down.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error handling&lt;/h3&gt; &#xA;&lt;p&gt;If Puma encounters an error outside of the context of your application, it will respond with a 400/500 and a simple textual error message (see &lt;code&gt;Puma::Server#lowlevel_error&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/server.rb&#34;&gt;server.rb&lt;/a&gt;). You can specify custom behavior for this scenario. For example, you can report the error to your third-party error-tracking service (in this example, &lt;a href=&#34;https://rollbar.com&#34;&gt;rollbar&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lowlevel_error_handler do |e, env, status|&#xA;  if status == 400&#xA;    message = &#34;The server could not process the request due to an error, such as an incorrectly typed URL, malformed syntax, or a URL that contains illegal characters.\n&#34;&#xA;  else&#xA;    message = &#34;An error has occurred, and engineers have been informed. Please reload the page. If you continue to have problems, contact support@example.com\n&#34;&#xA;    Rollbar.critical(e)&#xA;  end&#xA;&#xA;  [status, {}, [message]]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binding TCP / Sockets&lt;/h3&gt; &#xA;&lt;p&gt;Bind Puma to a socket with the &lt;code&gt;-b&lt;/code&gt; (or &lt;code&gt;--bind&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b tcp://127.0.0.1:9292&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a UNIX Socket instead of TCP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b unix:///var/run/puma.sock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to change the permissions of the UNIX socket, just add a umask parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;unix:///var/run/puma.sock?umask=0111&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Need a bit of security? Use SSL sockets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Self-signed SSL certificates (via the &lt;a href=&#34;https://github.com/socketry/localhost&#34;&gt;&lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt; gem, for development use):&lt;/h4&gt; &#xA;&lt;p&gt;Puma supports the &lt;a href=&#34;https://github.com/socketry/localhost&#34;&gt;&lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt; gem for self-signed certificates. This is particularly useful if you want to use Puma with SSL locally, and self-signed certificates will work for your use-case. Currently, the integration can only be used in MRI.&lt;/p&gt; &#xA;&lt;p&gt;Puma automatically configures SSL when the &lt;a href=&#34;https://github.com/socketry/localhost&#34;&gt;&lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt; gem is loaded in a &lt;code&gt;development&lt;/code&gt; environment:&lt;/p&gt; &#xA;&lt;p&gt;Add the gem to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group(:development) do&#xA;  gem &#39;localhost&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And require it implicitly using bundler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;bundler&#34;&#xA;Bundler.require(:default, ENV[&#34;RACK_ENV&#34;].to_sym)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can require the gem in your configuration file, either &lt;code&gt;config/puma/development.rb&lt;/code&gt;, &lt;code&gt;config/puma.rb&lt;/code&gt;, or set via the &lt;code&gt;-C&lt;/code&gt; cli option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;localhost&#39;&#xA;# configuration methods (from Puma::DSL) as needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, Puma must be listening to an SSL socket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ puma -b &#39;ssl://localhost:9292&#39; -C config/use_local_host.rb&#xA;&#xA;# The following options allow you to reach Puma over HTTP as well:&#xA;$ puma -b ssl://localhost:9292 -b tcp://localhost:9393 -C config/use_local_host.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Controlling SSL Cipher Suites&lt;/h4&gt; &#xA;&lt;p&gt;To use or avoid specific SSL ciphers for TLSv1.2 and below, use &lt;code&gt;ssl_cipher_filter&lt;/code&gt; or &lt;code&gt;ssl_cipher_list&lt;/code&gt; options.&lt;/p&gt; &#xA;&lt;h5&gt;Ruby:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;ssl_cipher_filter=!aNULL:AES+SHA&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;JRuby:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?keystore=path_to_keystore&amp;amp;keystore-pass=keystore_password&amp;amp;ssl_cipher_list=TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure the available TLSv1.3 ciphersuites, use &lt;code&gt;ssl_ciphersuites&lt;/code&gt; option (not available for JRuby).&lt;/p&gt; &#xA;&lt;h5&gt;Ruby:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;ssl_ciphersuites=TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html&#34;&gt;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html&lt;/a&gt; for cipher filter format and full list of cipher suites.&lt;/p&gt; &#xA;&lt;p&gt;Disable TLS v1 with the &lt;code&gt;no_tlsv1&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;no_tlsv1=true&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Controlling OpenSSL Verification Flags&lt;/h4&gt; &#xA;&lt;p&gt;To enable verification flags offered by OpenSSL, use &lt;code&gt;verification_flags&lt;/code&gt; (not available for JRuby):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;verification_flags=PARTIAL_CHAIN&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set multiple verification flags (by separating them with a comma):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;verification_flags=PARTIAL_CHAIN,CRL_CHECK&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List of available flags: &lt;code&gt;USE_CHECK_TIME&lt;/code&gt;, &lt;code&gt;CRL_CHECK&lt;/code&gt;, &lt;code&gt;CRL_CHECK_ALL&lt;/code&gt;, &lt;code&gt;IGNORE_CRITICAL&lt;/code&gt;, &lt;code&gt;X509_STRICT&lt;/code&gt;, &lt;code&gt;ALLOW_PROXY_CERTS&lt;/code&gt;, &lt;code&gt;POLICY_CHECK&lt;/code&gt;, &lt;code&gt;EXPLICIT_POLICY&lt;/code&gt;, &lt;code&gt;INHIBIT_ANY&lt;/code&gt;, &lt;code&gt;INHIBIT_MAP&lt;/code&gt;, &lt;code&gt;NOTIFY_POLICY&lt;/code&gt;, &lt;code&gt;EXTENDED_CRL_SUPPORT&lt;/code&gt;, &lt;code&gt;USE_DELTAS&lt;/code&gt;, &lt;code&gt;CHECK_SS_SIGNATURE&lt;/code&gt;, &lt;code&gt;TRUSTED_FIRST&lt;/code&gt;, &lt;code&gt;SUITEB_128_LOS_ONLY&lt;/code&gt;, &lt;code&gt;SUITEB_192_LOS&lt;/code&gt;, &lt;code&gt;SUITEB_128_LOS&lt;/code&gt;, &lt;code&gt;PARTIAL_CHAIN&lt;/code&gt;, &lt;code&gt;NO_ALT_CHAINS&lt;/code&gt;, &lt;code&gt;NO_CHECK_TIME&lt;/code&gt; (see &lt;a href=&#34;https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_hostflags.html#VERIFICATION-FLAGS&#34;&gt;https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_hostflags.html#VERIFICATION-FLAGS&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Controlling OpenSSL Password Decryption&lt;/h4&gt; &#xA;&lt;p&gt;To enable runtime decryption of an encrypted SSL key (not available for JRuby), use &lt;code&gt;key_password_command&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;key_password_command=/path/to/command.sh&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;key_password_command&lt;/code&gt; must:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Be executable by Puma.&lt;/li&gt; &#xA; &lt;li&gt;Print the decryption password to stdout.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/sh&#xA;&#xA;echo &#34;this is my password&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;key_password_command&lt;/code&gt; can be used with &lt;code&gt;key&lt;/code&gt; or &lt;code&gt;key_pem&lt;/code&gt;. If the key is not encrypted, the executable will not be called.&lt;/p&gt; &#xA;&lt;h3&gt;Control/Status Server&lt;/h3&gt; &#xA;&lt;p&gt;Puma has a built-in status and control app that can be used to query and control Puma.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma --control-url tcp://127.0.0.1:9293 --control-token foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Puma will start the control server on localhost port 9293. All requests to the control server will need to include control token (in this case, &lt;code&gt;token=foo&lt;/code&gt;) as a query parameter. This allows for simple authentication. Check out &lt;code&gt;Puma::App::Status&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/app/status.rb&#34;&gt;status.rb&lt;/a&gt; to see what the status app has available.&lt;/p&gt; &#xA;&lt;p&gt;You can also interact with the control server via &lt;code&gt;pumactl&lt;/code&gt;. This command will restart Puma:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pumactl --control-url &#39;tcp://127.0.0.1:9293&#39; --control-token foo restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a list of &lt;code&gt;pumactl&lt;/code&gt; options, use &lt;code&gt;pumactl --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration File&lt;/h3&gt; &#xA;&lt;p&gt;You can also provide a configuration file with the &lt;code&gt;-C&lt;/code&gt; (or &lt;code&gt;--config&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -C /path/to/config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no configuration file is specified, Puma will look for a configuration file at &lt;code&gt;config/puma.rb&lt;/code&gt;. If an environment is specified (via the &lt;code&gt;--environment&lt;/code&gt; flag or through the &lt;code&gt;APP_ENV&lt;/code&gt;, &lt;code&gt;RACK_ENV&lt;/code&gt;, or &lt;code&gt;RAILS_ENV&lt;/code&gt; environment variables) Puma looks for a configuration file at &lt;code&gt;config/puma/&amp;lt;environment_name&amp;gt;.rb&lt;/code&gt; and then falls back to &lt;code&gt;config/puma.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to prevent Puma from looking for a configuration file in those locations, include the &lt;code&gt;--no-config&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma --no-config&#xA;&#xA;# or&#xA;&#xA;$ puma -C &#34;-&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other side-effects of setting the environment are whether to show stack traces (in &lt;code&gt;development&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt;), and setting RACK_ENV may potentially affect middleware looking for this value to change their behavior. The default puma RACK_ENV value is &lt;code&gt;development&lt;/code&gt;. You can see all config default values in &lt;code&gt;Puma::Configuration#puma_default_options&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/61c6213fbab/lib/puma/configuration.rb#L182-L204&#34;&gt;configuration.rb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;code&gt;Puma::DSL&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/dsl.rb&#34;&gt;dsl.rb&lt;/a&gt; to see all available options.&lt;/p&gt; &#xA;&lt;h2&gt;Restart&lt;/h2&gt; &#xA;&lt;p&gt;Puma includes the ability to restart itself. When available (MRI, Rubinius, JRuby), Puma performs a &#34;hot restart&#34;. This is the same functionality available in &lt;em&gt;Unicorn&lt;/em&gt; and &lt;em&gt;NGINX&lt;/em&gt; which keep the server sockets open between restarts. This makes sure that no pending requests are dropped while the restart is taking place.&lt;/p&gt; &#xA;&lt;p&gt;For more, see the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/restart.md&#34;&gt;Restart documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Signals&lt;/h2&gt; &#xA;&lt;p&gt;Puma responds to several signals. A detailed guide to using UNIX signals with Puma can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/signals.md&#34;&gt;Signals documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Constraints&lt;/h2&gt; &#xA;&lt;p&gt;Some platforms do not support all Puma features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JRuby&lt;/strong&gt;, &lt;strong&gt;Windows&lt;/strong&gt;: server sockets are not seamless on restart, they must be closed and reopened. These platforms have no way to pass descriptors into a new process that is exposed to Ruby. Also, cluster mode is not supported due to a lack of fork(2).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: Cluster mode is not supported due to a lack of fork(2).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;: The way Kubernetes handles pod shutdowns interacts poorly with server processes implementing graceful shutdown, like Puma. See the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/kubernetes.md&#34;&gt;kubernetes section of the documentation&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Bugs&lt;/h2&gt; &#xA;&lt;p&gt;For MRI versions 2.2.7, 2.2.8, 2.2.9, 2.2.10, 2.3.4 and 2.4.1, you may see &lt;code&gt;stream closed in another thread (IOError)&lt;/code&gt;. It may be caused by a &lt;a href=&#34;https://bugs.ruby-lang.org/issues/13632&#34;&gt;Ruby bug&lt;/a&gt;. It can be fixed with the gem &lt;a href=&#34;https://rubygems.org/gems/stopgap_13632&#34;&gt;https://rubygems.org/gems/stopgap_13632&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if %w(2.2.7 2.2.8 2.2.9 2.2.10 2.3.4 2.4.1).include? RUBY_VERSION&#xA;  begin&#xA;    require &#39;stopgap_13632&#39;&#xA;  rescue LoadError&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Puma has support for Capistrano with an &lt;a href=&#34;https://github.com/seuros/capistrano-puma&#34;&gt;external gem&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Additionally, Puma has support for built-in daemonization via the &lt;a href=&#34;https://github.com/kigster/puma-daemon&#34;&gt;puma-daemon&lt;/a&gt; ruby gem. The gem restores the &lt;code&gt;daemonize&lt;/code&gt; option that was removed from Puma starting version 5, but only for MRI Ruby.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is common to use process monitors with Puma. Modern process monitors like systemd or rc.d provide continuous monitoring and restarts for increased reliability in production environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/jungle/rc.d/README.md&#34;&gt;rc.d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/systemd.md&#34;&gt;systemd&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Community guides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/anon987654321/4532cf8d6c59c1f43ec8973faa031103&#34;&gt;Deploying Puma on OpenBSD using relayd and httpd&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community Extensions&lt;/h2&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/harmjanblok/puma-metrics&#34;&gt;puma-metrics&lt;/a&gt; â€”&amp;nbsp;export Puma metrics to Prometheus&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yob/puma-plugin-statsd&#34;&gt;puma-plugin-statsd&lt;/a&gt; â€”&amp;nbsp;send Puma metrics to statsd&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sj26/puma-plugin-systemd&#34;&gt;puma-plugin-systemd&lt;/a&gt; â€”&amp;nbsp;deeper integration with systemd for notify, status and watchdog. Puma 5.1.0 integrated notify and watchdog, which probably conflicts with this plugin. Puma 6.1.0 added status support which obsoletes the plugin entirely.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/babbel/puma-plugin-telemetry&#34;&gt;puma-plugin-telemetry&lt;/a&gt; - telemetry plugin for Puma offering various targets to publish&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anchordotdev/puma-acme&#34;&gt;puma-acme&lt;/a&gt; - automatic SSL/HTTPS certificate provisioning and setup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Monitoring&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ylecuyer/puma-status&#34;&gt;puma-status&lt;/a&gt; â€”&amp;nbsp;Monitor CPU/Mem/Load of running puma instances from the CLI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Find details for contributing in the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Puma is copyright Evan Phoenix and contributors, licensed under the BSD 3-Clause license. See the included LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>endoflife-date/endoflife.date</title>
    <updated>2024-12-01T01:57:53Z</updated>
    <id>tag:github.com,2024-12-01:/endoflife-date/endoflife.date</id>
    <link href="https://github.com/endoflife-date/endoflife.date" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Informative site with EoL dates of everything&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;endoflife.date&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlify.com/sites/endoflife-date/deploys&#34;&gt;&lt;img src=&#34;https://api.netlify.com/api/v1/badges/92f7a2a9-3cca-4916-a75e-f9db4ec39d48/deploy-status&#34; alt=&#34;Netlify Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.guide/how-to-contribute/#opening-a-pull-request&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/powered_by-Jekyll-blue.svg?sanitize=true&#34; alt=&#34;powered by Jekyll&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://endoflife.date/&#34;&gt;&lt;img src=&#34;https://img.shields.io/website-up-down-green-red/https/endoflife.date.svg?sanitize=true&#34; alt=&#34;Website shields.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://commonmark.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with-Markdown-1f425f.svg?sanitize=true&#34; alt=&#34;made-with-Markdown&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/endoflife-date/endoflife.date/master/CODE-OF-CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.0-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/endoflife-date/community&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/endoflife-date/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/endoflife_date&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url.svg?label=@endoflife_date&amp;amp;style=social&amp;amp;url=https%3A%2F%2Ftwitter.com%2Fendoflife_date&#34; alt=&#34;Twitter Follow Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Keep track of various End of Life dates and support lifecycles for various products. Visit &lt;a href=&#34;https://endoflife.date&#34;&gt;https://endoflife.date&lt;/a&gt; for a list of supported products. This information is very often &lt;a href=&#34;https://twitter.com/captn3m0/status/1110504412064239617&#34;&gt;hard to track or badly presented&lt;/a&gt;. This project collates this data and presents it in an easily accessible format, with URLs that are easy to guess and remember.&lt;/p&gt; &#xA;&lt;p&gt;If you maintain release information (end-of-life dates, or support information) for a product, we have a &lt;a href=&#34;https://endoflife.date/recommendations&#34;&gt;set of recommendations&lt;/a&gt; along with a checklist on some best practices for publishing this information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://endoflife.date/contribute&#34;&gt;the contributing guide&lt;/a&gt; for details. While participating in the project, you must abide by its &lt;a href=&#34;https://raw.githubusercontent.com/endoflife-date/endoflife.date/master/CODE-OF-CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;An API is available for integration with CI platforms. API documentation is available at &lt;a href=&#34;https://endoflife.date/docs/api&#34;&gt;https://endoflife.date/docs/api&lt;/a&gt;. The API is currently in Alpha, and breaking changes can happen.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/endoflife-date/endoflife.date/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;endoflife.date is relying on various amazing software and components :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;, an Internet hosting service for software development and version control,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, a static site generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt;, a dynamic and open source programming language with a focus on simplicity and productivity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/just-the-docs/just-the-docs&#34;&gt;Just the Docs&lt;/a&gt;, a documentation theme for Jekyll.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stoplight.io/open-source/elements&#34;&gt;Stoplight Elements&lt;/a&gt;, a collection of UI components for displaying beautiful developer documentation from any OpenAPI document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://simpleicons.org/&#34;&gt;Simple Icons&lt;/a&gt;, free SVG icons for popular brands.&lt;/li&gt; &#xA; &lt;li&gt;Our icon is derived from &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Hourglass_icon_%28orange%29.svg&#34;&gt;Hourglass icon (orange)&lt;/a&gt; by David AbiÃ¡n and Serhio Magpie on the English Wikipedia. Remixed under the CC-BY-SA-4.0 license.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://realfavicongenerator.net/&#34;&gt;RealFaviconGenerator&lt;/a&gt;, a favicon Generator, for real.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;, an all-in-one platform for automating modern web projects.&lt;/li&gt; &#xA; &lt;li&gt;Product descriptions are adapted from the &lt;a href=&#34;https://en.wikipedia.org/&#34;&gt;English Wikipedia&lt;/a&gt;, under &lt;a href=&#34;https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License&#34;&gt;CC BY-SA 3.0&lt;/a&gt; license.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sinatra/sinatra</title>
    <updated>2024-12-01T01:57:53Z</updated>
    <id>tag:github.com,2024-12-01:/sinatra/sinatra</id>
    <link href="https://github.com/sinatra/sinatra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Classy web-development dressed in a DSL (official / canonical repo)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sinatra&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/sinatra&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/sinatra.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sinatra/sinatra/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/sinatra/sinatra/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Testing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sinatra is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;DSL&lt;/a&gt; for quickly creating web applications in Ruby with minimal effort:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# myapp.rb&#xA;require &#39;sinatra&#39;&#xA;&#xA;get &#39;/&#39; do&#xA;  &#39;Hello world!&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the gems needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install sinatra rackup puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruby myapp.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View at: &lt;a href=&#34;http://localhost:4567&#34;&gt;http://localhost:4567&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The code you changed will not take effect until you restart the server. Please restart the server every time you change or use a code reloader like &lt;a href=&#34;https://github.com/alexch/rerun&#34;&gt;rerun&lt;/a&gt; or &lt;a href=&#34;https://github.com/jeremyevans/rack-unreloader&#34;&gt;rack-unreloader&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to also run &lt;code&gt;gem install puma&lt;/code&gt;, which Sinatra will pick up if available.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#sinatra&#34;&gt;Sinatra&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#routes&#34;&gt;Routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#conditions&#34;&gt;Conditions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#return-values&#34;&gt;Return Values&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#custom-route-matchers&#34;&gt;Custom Route Matchers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#static-files&#34;&gt;Static Files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#views--templates&#34;&gt;Views / Templates&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#literal-templates&#34;&gt;Literal Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#available-template-languages&#34;&gt;Available Template Languages&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#haml-templates&#34;&gt;Haml Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#erb-templates&#34;&gt;Erb Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#builder-templates&#34;&gt;Builder Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#nokogiri-templates&#34;&gt;Nokogiri Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#sass-templates&#34;&gt;Sass Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#scss-templates&#34;&gt;Scss Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#liquid-templates&#34;&gt;Liquid Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#markdown-templates&#34;&gt;Markdown Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#rdoc-templates&#34;&gt;RDoc Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#asciidoc-templates&#34;&gt;AsciiDoc Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#markaby-templates&#34;&gt;Markaby Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#rabl-templates&#34;&gt;RABL Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#slim-templates&#34;&gt;Slim Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#yajl-templates&#34;&gt;Yajl Templates&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#accessing-variables-in-templates&#34;&gt;Accessing Variables in Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#templates-with-yield-and-nested-layouts&#34;&gt;Templates with &lt;code&gt;yield&lt;/code&gt; and nested layouts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#inline-templates&#34;&gt;Inline Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#named-templates&#34;&gt;Named Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#associating-file-extensions&#34;&gt;Associating File Extensions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#adding-your-own-template-engine&#34;&gt;Adding Your Own Template Engine&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#using-custom-logic-for-template-lookup&#34;&gt;Using Custom Logic for Template Lookup&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#filters&#34;&gt;Filters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#helpers&#34;&gt;Helpers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#using-sessions&#34;&gt;Using Sessions&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#session-secret-security&#34;&gt;Session Secret Security&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#session-config&#34;&gt;Session Config&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#choosing-your-own-session-middleware&#34;&gt;Choosing Your Own Session Middleware&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#halting&#34;&gt;Halting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#passing&#34;&gt;Passing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#triggering-another-route&#34;&gt;Triggering Another Route&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#setting-body-status-code-and-headers&#34;&gt;Setting Body, Status Code, and Headers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#streaming-responses&#34;&gt;Streaming Responses&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#mime-types&#34;&gt;Mime Types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#generating-urls&#34;&gt;Generating URLs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#browser-redirect&#34;&gt;Browser Redirect&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#cache-control&#34;&gt;Cache Control&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#sending-files&#34;&gt;Sending Files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#accessing-the-request-object&#34;&gt;Accessing the Request Object&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#attachments&#34;&gt;Attachments&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#dealing-with-date-and-time&#34;&gt;Dealing with Date and Time&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#looking-up-template-files&#34;&gt;Looking Up Template Files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#configuring-attack-protection&#34;&gt;Configuring attack protection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#available-settings&#34;&gt;Available Settings&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#lifecycle-events&#34;&gt;Lifecycle Events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#environments&#34;&gt;Environments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#error-handling&#34;&gt;Error Handling&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#not-found&#34;&gt;Not Found&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#error&#34;&gt;Error&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#rack-middleware&#34;&gt;Rack Middleware&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#sinatrabase---middleware-libraries-and-modular-apps&#34;&gt;Sinatra::Base - Middleware, Libraries, and Modular Apps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#modular-vs-classic-style&#34;&gt;Modular vs. Classic Style&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#serving-a-modular-application&#34;&gt;Serving a Modular Application&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#using-a-classic-style-application-with-a-configru&#34;&gt;Using a Classic Style Application with a config.ru&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#when-to-use-a-configru&#34;&gt;When to use a config.ru?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#using-sinatra-as-middleware&#34;&gt;Using Sinatra as Middleware&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#dynamic-application-creation&#34;&gt;Dynamic Application Creation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#scopes-and-binding&#34;&gt;Scopes and Binding&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#applicationclass-scope&#34;&gt;Application/Class Scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#requestinstance-scope&#34;&gt;Request/Instance Scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#delegation-scope&#34;&gt;Delegation Scope&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#command-line&#34;&gt;Command Line&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#multi-threading&#34;&gt;Multi-threading&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#requirement&#34;&gt;Requirement&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#the-bleeding-edge&#34;&gt;The Bleeding Edge&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#with-bundler&#34;&gt;With Bundler&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#further-reading&#34;&gt;Further Reading&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Routes&lt;/h2&gt; &#xA;&lt;p&gt;In Sinatra, a route is an HTTP method paired with a URL-matching pattern. Each route is associated with a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  .. show something ..&#xA;end&#xA;&#xA;post &#39;/&#39; do&#xA;  .. create something ..&#xA;end&#xA;&#xA;put &#39;/&#39; do&#xA;  .. replace something ..&#xA;end&#xA;&#xA;patch &#39;/&#39; do&#xA;  .. modify something ..&#xA;end&#xA;&#xA;delete &#39;/&#39; do&#xA;  .. annihilate something ..&#xA;end&#xA;&#xA;options &#39;/&#39; do&#xA;  .. appease something ..&#xA;end&#xA;&#xA;link &#39;/&#39; do&#xA;  .. affiliate something ..&#xA;end&#xA;&#xA;unlink &#39;/&#39; do&#xA;  .. separate something ..&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Routes are matched in the order they are defined. The first route that matches the request is invoked.&lt;/p&gt; &#xA;&lt;p&gt;Routes with trailing slashes are different from the ones without:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  # Does not match &#34;GET /foo/&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route patterns may include named parameters, accessible via the &lt;code&gt;params&lt;/code&gt; hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/hello/:name&#39; do&#xA;  # matches &#34;GET /hello/foo&#34; and &#34;GET /hello/bar&#34;&#xA;  # params[&#39;name&#39;] is &#39;foo&#39; or &#39;bar&#39;&#xA;  &#34;Hello #{params[&#39;name&#39;]}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also access named parameters via block parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/hello/:name&#39; do |n|&#xA;  # matches &#34;GET /hello/foo&#34; and &#34;GET /hello/bar&#34;&#xA;  # params[&#39;name&#39;] is &#39;foo&#39; or &#39;bar&#39;&#xA;  # n stores params[&#39;name&#39;]&#xA;  &#34;Hello #{n}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route patterns may also include splat (or wildcard) parameters, accessible via the &lt;code&gt;params[&#39;splat&#39;]&lt;/code&gt; array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/say/*/to/*&#39; do&#xA;  # matches /say/hello/to/world&#xA;  params[&#39;splat&#39;] # =&amp;gt; [&#34;hello&#34;, &#34;world&#34;]&#xA;end&#xA;&#xA;get &#39;/download/*.*&#39; do&#xA;  # matches /download/path/to/file.xml&#xA;  params[&#39;splat&#39;] # =&amp;gt; [&#34;path/to/file&#34;, &#34;xml&#34;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with block parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/download/*.*&#39; do |path, ext|&#xA;  [path, ext] # =&amp;gt; [&#34;path/to/file&#34;, &#34;xml&#34;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route matching with Regular Expressions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get /\/hello\/([\w]+)/ do&#xA;  &#34;Hello, #{params[&#39;captures&#39;].first}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a block parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get %r{/hello/([\w]+)} do |c|&#xA;  # Matches &#34;GET /meta/hello/world&#34;, &#34;GET /hello/world/1234&#34; etc.&#xA;  &#34;Hello, #{c}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route patterns may have optional parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/posts/:format?&#39; do&#xA;  # matches &#34;GET /posts/&#34; and any extension &#34;GET /posts/json&#34;, &#34;GET /posts/xml&#34; etc&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Routes may also utilize query parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/posts&#39; do&#xA;  # matches &#34;GET /posts?title=foo&amp;amp;author=bar&#34;&#xA;  title = params[&#39;title&#39;]&#xA;  author = params[&#39;author&#39;]&#xA;  # uses title and author variables; query is optional to the /posts route&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, unless you disable the path traversal attack protection (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#configuring-attack-protection&#34;&gt;below&lt;/a&gt;), the request path might be modified before matching against your routes.&lt;/p&gt; &#xA;&lt;p&gt;You may customize the &lt;a href=&#34;https://github.com/sinatra/mustermann#readme&#34;&gt;Mustermann&lt;/a&gt; options used for a given route by passing in a &lt;code&gt;:mustermann_opts&lt;/code&gt; hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;\A/posts\z&#39;, :mustermann_opts =&amp;gt; { :type =&amp;gt; :regexp, :check_anchors =&amp;gt; false } do&#xA;  # matches /posts exactly, with explicit anchoring&#xA;  &#34;If you match an anchored pattern clap your hands!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It looks like a &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#conditions&#34;&gt;condition&lt;/a&gt;, but it isn&#39;t one! These options will be merged into the global &lt;code&gt;:mustermann_opts&lt;/code&gt; hash described &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#available-settings&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Conditions&lt;/h2&gt; &#xA;&lt;p&gt;Routes may include a variety of matching conditions, such as the user agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39;, :agent =&amp;gt; /Songbird (\d\.\d)[\d\/]*?/ do&#xA;  &#34;You&#39;re using Songbird version #{params[&#39;agent&#39;][0]}&#34;&#xA;end&#xA;&#xA;get &#39;/foo&#39; do&#xA;  # Matches non-songbird browsers&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other available conditions are &lt;code&gt;host_name&lt;/code&gt; and &lt;code&gt;provides&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39;, :host_name =&amp;gt; /^admin\./ do&#xA;  &#34;Admin Area, Access denied!&#34;&#xA;end&#xA;&#xA;get &#39;/&#39;, :provides =&amp;gt; &#39;html&#39; do&#xA;  haml :index&#xA;end&#xA;&#xA;get &#39;/&#39;, :provides =&amp;gt; [&#39;rss&#39;, &#39;atom&#39;, &#39;xml&#39;] do&#xA;  builder :feed&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;provides&lt;/code&gt; searches the request&#39;s Accept header.&lt;/p&gt; &#xA;&lt;p&gt;You can easily define your own conditions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set(:probability) { |value| condition { rand &amp;lt;= value } }&#xA;&#xA;get &#39;/win_a_car&#39;, :probability =&amp;gt; 0.1 do&#xA;  &#34;You won!&#34;&#xA;end&#xA;&#xA;get &#39;/win_a_car&#39; do&#xA;  &#34;Sorry, you lost.&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a condition that takes multiple values use a splat:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set(:auth) do |*roles|   # &amp;lt;- notice the splat here&#xA;  condition do&#xA;    unless logged_in? &amp;amp;&amp;amp; roles.any? {|role| current_user.in_role? role }&#xA;      redirect &#34;/login/&#34;, 303&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;get &#34;/my/account/&#34;, :auth =&amp;gt; [:user, :admin] do&#xA;  &#34;Your Account Details&#34;&#xA;end&#xA;&#xA;get &#34;/only/admin/&#34;, :auth =&amp;gt; :admin do&#xA;  &#34;Only admins are allowed here!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Return Values&lt;/h2&gt; &#xA;&lt;p&gt;The return value of a route block determines at least the response body passed on to the HTTP client or at least the next middleware in the Rack stack. Most commonly, this is a string, as in the above examples. But other values are also accepted.&lt;/p&gt; &#xA;&lt;p&gt;You can return an object that would either be a valid Rack response, Rack body object or HTTP status code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An Array with three elements: &lt;code&gt;[status (Integer), headers (Hash), response body (responds to #each)]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An Array with two elements: &lt;code&gt;[status (Integer), response body (responds to #each)]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An object that responds to &lt;code&gt;#each&lt;/code&gt; and passes nothing but strings to the given block&lt;/li&gt; &#xA; &lt;li&gt;A Integer representing the status code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That way we can, for instance, easily implement a streaming example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Stream&#xA;  def each&#xA;    100.times { |i| yield &#34;#{i}\n&#34; }&#xA;  end&#xA;end&#xA;&#xA;get(&#39;/&#39;) { Stream.new }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;stream&lt;/code&gt; helper method (&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#streaming-responses&#34;&gt;described below&lt;/a&gt;) to reduce boilerplate and embed the streaming logic in the route.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Route Matchers&lt;/h2&gt; &#xA;&lt;p&gt;As shown above, Sinatra ships with built-in support for using String patterns and regular expressions as route matches. However, it does not stop there. You can easily define your own matchers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AllButPattern&#xA;  def initialize(except)&#xA;    @except = except&#xA;  end&#xA;&#xA;  def to_pattern(options)&#xA;    return self&#xA;  end&#xA;&#xA;  def params(route)&#xA;    return {} unless @except === route&#xA;  end&#xA;end&#xA;&#xA;def all_but(pattern)&#xA;  AllButPattern.new(pattern)&#xA;end&#xA;&#xA;get all_but(&#34;/index&#34;) do&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the above example might be over-engineered, as it can also be expressed as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get /.*/ do&#xA;  pass if request.path_info == &#34;/index&#34;&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Static Files&lt;/h2&gt; &#xA;&lt;p&gt;Static files are served from the &lt;code&gt;./public&lt;/code&gt; directory. You can specify a different location by setting the &lt;code&gt;:public_folder&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :public_folder, __dir__ + &#39;/static&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the public directory name is not included in the URL. A file &lt;code&gt;./public/css/style.css&lt;/code&gt; is made available as &lt;code&gt;http://example.com/css/style.css&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;:static_cache_control&lt;/code&gt; setting (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#cache-control&#34;&gt;below&lt;/a&gt;) to add &lt;code&gt;Cache-Control&lt;/code&gt; header info.&lt;/p&gt; &#xA;&lt;h2&gt;Views / Templates&lt;/h2&gt; &#xA;&lt;p&gt;Each template language is exposed via its own rendering method. These methods simply return a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  erb :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This renders &lt;code&gt;views/index.erb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead of a template name, you can also just pass in the template content directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  code = &#34;&amp;lt;%= Time.now %&amp;gt;&#34;&#xA;  erb code&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Templates take a second argument, the options hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  erb :index, :layout =&amp;gt; :post&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will render &lt;code&gt;views/index.erb&lt;/code&gt; embedded in the &lt;code&gt;views/post.erb&lt;/code&gt; (default is &lt;code&gt;views/layout.erb&lt;/code&gt;, if it exists).&lt;/p&gt; &#xA;&lt;p&gt;Any options not understood by Sinatra will be passed on to the template engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml :index, :format =&amp;gt; :html5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set options per template language in general:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :haml, :format =&amp;gt; :html5&#xA;&#xA;get &#39;/&#39; do&#xA;  haml :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options passed to the render method override options set via &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available Options:&lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  locals&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   List of locals passed to the document. Handy with partials. Example: &#xA;  &lt;tt&gt;erb &#34;&amp;lt;%= foo %&amp;gt;&#34;, :locals =&amp;gt; {:foo =&amp;gt; &#34;bar&#34;}&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  default_encoding&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   String encoding to use if uncertain. Defaults to &#xA;  &lt;tt&gt;settings.default_encoding&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  views&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Views folder to load templates from. Defaults to &#xA;  &lt;tt&gt;settings.views&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  layout&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether to use a layout (&#xA;  &lt;tt&gt;true&lt;/tt&gt; or &#xA;  &lt;tt&gt;false&lt;/tt&gt;). If it&#39;s a Symbol, specifies what template to use. Example: &#xA;  &lt;tt&gt;erb :index, :layout =&amp;gt; !request.xhr?&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  content_type&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Content-Type the template produces. Default depends on template language. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  scope&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Scope to render template under. Defaults to the application instance. If you change this, instance variables and helper methods will not be available. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  layout_engine&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Template engine to use for rendering the layout. Useful for languages that do not support layouts otherwise. Defaults to the engine used for the template. Example: &#xA;  &lt;tt&gt;set :rdoc, :layout_engine =&amp;gt; :erb&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  layout_options&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Special options only used for rendering the layout. Example: &#xA;  &lt;tt&gt;set :rdoc, :layout_options =&amp;gt; { :views =&amp;gt; &#39;views/layouts&#39; }&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;p&gt;Templates are assumed to be located directly under the &lt;code&gt;./views&lt;/code&gt; directory. To use a different views directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :views, settings.root + &#39;/templates&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One important thing to remember is that you always have to reference templates with symbols, even if they&#39;re in a subdirectory (in this case, use: &lt;code&gt;:&#39;subdir/template&#39;&lt;/code&gt; or &lt;code&gt;&#39;subdir/template&#39;.to_sym&lt;/code&gt;). You must use a symbol because otherwise rendering methods will render any strings passed to them directly.&lt;/p&gt; &#xA;&lt;h3&gt;Literal Templates&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml &#39;%div.title Hello World&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Renders the template string. You can optionally specify &lt;code&gt;:path&lt;/code&gt; and &lt;code&gt;:line&lt;/code&gt; for a clearer backtrace if there is a filesystem path or line associated with that string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml &#39;%div.title Hello World&#39;, :path =&amp;gt; &#39;examples/file.haml&#39;, :line =&amp;gt; 3&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available Template Languages&lt;/h3&gt; &#xA;&lt;p&gt;Some languages have multiple implementations. To specify what implementation to use (and to be thread-safe), you should simply require it first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rdiscount&#39;&#xA;get(&#39;/&#39;) { markdown :index }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Haml Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://haml.info/&#34; title=&#34;haml&#34;&gt;haml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.haml&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;haml :index, :format =&amp;gt; :html5&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Erb Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/jeremyevans/erubi&#34; title=&#34;erubi&#34;&gt;erubi&lt;/a&gt; or erb (included in Ruby) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.erb&lt;/tt&gt;, &lt;tt&gt;.rhtml&lt;/tt&gt; or &lt;tt&gt;.erubi&lt;/tt&gt; (Erubi only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;erb :index&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Builder Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/jimweirich/builder&#34; title=&#34;builder&#34;&gt;builder&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.builder&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;builder { |xml| xml.em &#34;hi&#34; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It also takes a block for inline templates (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#inline-templates&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Nokogiri Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.nokogiri.org/&#34; title=&#34;nokogiri&#34;&gt;nokogiri&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.nokogiri&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;nokogiri { |xml| xml.em &#34;hi&#34; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It also takes a block for inline templates (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#inline-templates&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Sass Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ntkme/sass-embedded-host-ruby&#34; title=&#34;sass-embedded&#34;&gt;sass-embedded&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.sass&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;sass :stylesheet, :style =&amp;gt; :expanded&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Scss Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ntkme/sass-embedded-host-ruby&#34; title=&#34;sass-embedded&#34;&gt;sass-embedded&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.scss&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;scss :stylesheet, :style =&amp;gt; :expanded&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Liquid Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://shopify.github.io/liquid/&#34; title=&#34;liquid&#34;&gt;liquid&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.liquid&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;liquid :index, :locals =&amp;gt; { :key =&amp;gt; &#39;value&#39; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Since you cannot call Ruby methods (except for &lt;code&gt;yield&lt;/code&gt;) from a Liquid template, you almost always want to pass locals to it.&lt;/p&gt; &#xA;&lt;h4&gt;Markdown Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt; Anyone of: &lt;a href=&#34;https://github.com/davidfstr/rdiscount&#34; title=&#34;RDiscount&#34;&gt;RDiscount&lt;/a&gt;, &lt;a href=&#34;https://github.com/vmg/redcarpet&#34; title=&#34;RedCarpet&#34;&gt;RedCarpet&lt;/a&gt;, &lt;a href=&#34;https://kramdown.gettalong.org/&#34; title=&#34;kramdown&#34;&gt;kramdown&lt;/a&gt;, &lt;a href=&#34;https://github.com/gjtorikian/commonmarker&#34; title=&#34;commonmarker&#34;&gt;commonmarker&lt;/a&gt; &lt;a href=&#34;https://github.com/alphabetum/pandoc-ruby&#34; title=&#34;pandoc&#34;&gt;pandoc&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.markdown&lt;/tt&gt;, &lt;tt&gt;.mkd&lt;/tt&gt; and &lt;tt&gt;.md&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;markdown :index, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It is not possible to call methods from Markdown, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :overview, :locals =&amp;gt; { :text =&amp;gt; markdown(:introduction) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may also call the &lt;code&gt;markdown&lt;/code&gt; method from within other templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%h1 Hello From Haml!&#xA;%p= markdown(:greetings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you cannot call Ruby from Markdown, you cannot use layouts written in Markdown. However, it is possible to use another rendering engine for the template than for the layout by passing the &lt;code&gt;:layout_engine&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;RDoc Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://rdoc.sourceforge.net/&#34; title=&#34;RDoc&#34;&gt;RDoc&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.rdoc&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;rdoc :README, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It is not possible to call methods from RDoc, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :overview, :locals =&amp;gt; { :text =&amp;gt; rdoc(:introduction) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may also call the &lt;code&gt;rdoc&lt;/code&gt; method from within other templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%h1 Hello From Haml!&#xA;%p= rdoc(:greetings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you cannot call Ruby from RDoc, you cannot use layouts written in RDoc. However, it is possible to use another rendering engine for the template than for the layout by passing the &lt;code&gt;:layout_engine&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;AsciiDoc Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://asciidoctor.org/&#34; title=&#34;Asciidoctor&#34;&gt;Asciidoctor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.asciidoc&lt;/tt&gt;, &lt;tt&gt;.adoc&lt;/tt&gt; and &lt;tt&gt;.ad&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;asciidoc :README, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Since you cannot call Ruby methods directly from an AsciiDoc template, you almost always want to pass locals to it.&lt;/p&gt; &#xA;&lt;h4&gt;Markaby Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://markaby.github.io/&#34; title=&#34;Markaby&#34;&gt;Markaby&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.mab&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;markaby { h1 &#34;Welcome!&#34; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It also takes a block for inline templates (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#inline-templates&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;RABL Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nesquena/rabl&#34; title=&#34;Rabl&#34;&gt;Rabl&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.rabl&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;rabl :index&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Slim Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://slim-template.github.io/&#34; title=&#34;Slim Lang&#34;&gt;Slim Lang&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.slim&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;slim :index&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Yajl Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/brianmario/yajl-ruby&#34; title=&#34;yajl-ruby&#34;&gt;yajl-ruby&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.yajl&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt; &lt;tt&gt; yajl :index, :locals =&amp;gt; { :key =&amp;gt; &#39;qux&#39; }, :callback =&amp;gt; &#39;present&#39;, :variable =&amp;gt; &#39;resource&#39; &lt;/tt&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;The template source is evaluated as a Ruby string, and the resulting json variable is converted using &lt;code&gt;#to_json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json = { :foo =&amp;gt; &#39;bar&#39; }&#xA;json[:baz] = key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:callback&lt;/code&gt; and &lt;code&gt;:variable&lt;/code&gt; options can be used to decorate the rendered object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var resource = {&#34;foo&#34;:&#34;bar&#34;,&#34;baz&#34;:&#34;qux&#34;};&#xA;present(resource);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing Variables in Templates&lt;/h3&gt; &#xA;&lt;p&gt;Templates are evaluated within the same context as route handlers. Instance variables set in route handlers are directly accessible by templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/:id&#39; do&#xA;  @foo = Foo.find(params[&#39;id&#39;])&#xA;  haml &#39;%h1= @foo.name&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, specify an explicit Hash of local variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/:id&#39; do&#xA;  foo = Foo.find(params[&#39;id&#39;])&#xA;  haml &#39;%h1= bar.name&#39;, :locals =&amp;gt; { :bar =&amp;gt; foo }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is typically used when rendering templates as partials from within other templates.&lt;/p&gt; &#xA;&lt;h3&gt;Templates with &lt;code&gt;yield&lt;/code&gt; and nested layouts&lt;/h3&gt; &#xA;&lt;p&gt;A layout is usually just a template that calls &lt;code&gt;yield&lt;/code&gt;. Such a template can be used either through the &lt;code&gt;:template&lt;/code&gt; option as described above, or it can be rendered with a block as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :post, :layout =&amp;gt; false do&#xA;  erb :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code is mostly equivalent to &lt;code&gt;erb :index, :layout =&amp;gt; :post&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Passing blocks to rendering methods is most useful for creating nested layouts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :main_layout, :layout =&amp;gt; false do&#xA;  erb :admin_layout do&#xA;    erb :user&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be done in fewer lines of code with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :admin_layout, :layout =&amp;gt; :main_layout do&#xA;  erb :user&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, the following rendering methods accept a block: &lt;code&gt;erb&lt;/code&gt;, &lt;code&gt;haml&lt;/code&gt;, &lt;code&gt;liquid&lt;/code&gt;, &lt;code&gt;slim &lt;/code&gt;. Also, the general &lt;code&gt;render&lt;/code&gt; method accepts a block.&lt;/p&gt; &#xA;&lt;h3&gt;Inline Templates&lt;/h3&gt; &#xA;&lt;p&gt;Templates may be defined at the end of the source file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra&#39;&#xA;&#xA;get &#39;/&#39; do&#xA;  haml :index&#xA;end&#xA;&#xA;__END__&#xA;&#xA;@@ layout&#xA;%html&#xA;  != yield&#xA;&#xA;@@ index&#xA;%div.title Hello world.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Inline templates defined in the source file that requires Sinatra are automatically loaded. Call &lt;code&gt;enable :inline_templates&lt;/code&gt; explicitly if you have inline templates in other source files.&lt;/p&gt; &#xA;&lt;h3&gt;Named Templates&lt;/h3&gt; &#xA;&lt;p&gt;Templates may also be defined using the top-level &lt;code&gt;template&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template :layout do&#xA;  &#34;%html\n  =yield\n&#34;&#xA;end&#xA;&#xA;template :index do&#xA;  &#39;%div.title Hello World!&#39;&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  haml :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a template named &#34;layout&#34; exists, it will be used each time a template is rendered. You can individually disable layouts by passing &lt;code&gt;:layout =&amp;gt; false&lt;/code&gt; or disable them by default via &lt;code&gt;set :haml, :layout =&amp;gt; false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml :index, :layout =&amp;gt; !request.xhr?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Associating File Extensions&lt;/h3&gt; &#xA;&lt;p&gt;To associate a file extension with a template engine, use &lt;code&gt;Tilt.register&lt;/code&gt;. For instance, if you like to use the file extension &lt;code&gt;tt&lt;/code&gt; for Haml templates, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Tilt.register Tilt[:haml], :tt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Your Own Template Engine&lt;/h3&gt; &#xA;&lt;p&gt;First, register your engine with Tilt, then create a rendering method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Tilt.register MyAwesomeTemplateEngine, :myat&#xA;&#xA;helpers do&#xA;  def myat(*args) render(:myat, *args) end&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  myat :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Renders &lt;code&gt;./views/index.myat&lt;/code&gt;. Learn more about &lt;a href=&#34;https://github.com/rtomayko/tilt#readme&#34;&gt;Tilt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using Custom Logic for Template Lookup&lt;/h3&gt; &#xA;&lt;p&gt;To implement your own template lookup mechanism you can write your own &lt;code&gt;#find_template&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  set :views, [ &#39;./views/a&#39;, &#39;./views/b&#39; ]&#xA;end&#xA;&#xA;def find_template(views, name, engine, &amp;amp;block)&#xA;  Array(views).each do |v|&#xA;    super(v, name, engine, &amp;amp;block)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Filters&lt;/h2&gt; &#xA;&lt;p&gt;Before filters are evaluated before each request within the same context as the routes will be and can modify the request and response. Instance variables set in filters are accessible by routes and templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  @note = &#39;Hi!&#39;&#xA;  request.path_info = &#39;/foo/bar/baz&#39;&#xA;end&#xA;&#xA;get &#39;/foo/*&#39; do&#xA;  @note #=&amp;gt; &#39;Hi!&#39;&#xA;  params[&#39;splat&#39;] #=&amp;gt; &#39;bar/baz&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After filters are evaluated after each request within the same context as the routes will be and can also modify the request and response. Instance variables set in before filters and routes are accessible by after filters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;after do&#xA;  puts response.status&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Unless you use the &lt;code&gt;body&lt;/code&gt; method rather than just returning a String from the routes, the body will not yet be available in the after filter, since it is generated later on.&lt;/p&gt; &#xA;&lt;p&gt;Filters optionally take a pattern, causing them to be evaluated only if the request path matches that pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before &#39;/protected/*&#39; do&#xA;  authenticate!&#xA;end&#xA;&#xA;after &#39;/create/:slug&#39; do |slug|&#xA;  session[:last_slug] = slug&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like routes, filters also take conditions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before :agent =&amp;gt; /Songbird/ do&#xA;  # ...&#xA;end&#xA;&#xA;after &#39;/blog/*&#39;, :host_name =&amp;gt; &#39;example.com&#39; do&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;p&gt;Use the top-level &lt;code&gt;helpers&lt;/code&gt; method to define helper methods for use in route handlers and templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;helpers do&#xA;  def bar(name)&#xA;    &#34;#{name}bar&#34;&#xA;  end&#xA;end&#xA;&#xA;get &#39;/:name&#39; do&#xA;  bar(params[&#39;name&#39;])&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, helper methods can be separately defined in a module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module FooUtils&#xA;  def foo(name) &#34;#{name}foo&#34; end&#xA;end&#xA;&#xA;module BarUtils&#xA;  def bar(name) &#34;#{name}bar&#34; end&#xA;end&#xA;&#xA;helpers FooUtils, BarUtils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The effect is the same as including the modules in the application class.&lt;/p&gt; &#xA;&lt;h3&gt;Using Sessions&lt;/h3&gt; &#xA;&lt;p&gt;A session is used to keep state during requests. If activated, you have one session hash per user session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;enable :sessions&#xA;&#xA;get &#39;/&#39; do&#xA;  &#34;value = &#34; &amp;lt;&amp;lt; session[:value].inspect&#xA;end&#xA;&#xA;get &#39;/:value&#39; do&#xA;  session[&#39;value&#39;] = params[&#39;value&#39;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Session Secret Security&lt;/h4&gt; &#xA;&lt;p&gt;To improve security, the session data in the cookie is signed with a session secret using &lt;code&gt;HMAC-SHA1&lt;/code&gt;. This session secret should optimally be a cryptographically secure random value of an appropriate length which for &lt;code&gt;HMAC-SHA1&lt;/code&gt; is greater than or equal to 64 bytes (512 bits, 128 hex characters). You would be advised not to use a secret that is less than 32 bytes of randomness (256 bits, 64 hex characters). It is therefore &lt;strong&gt;very important&lt;/strong&gt; that you don&#39;t just make the secret up, but instead use a secure random number generator to create it. Humans are extremely bad at generating random values.&lt;/p&gt; &#xA;&lt;p&gt;By default, a 32 byte secure random session secret is generated for you by Sinatra, but it will change with every restart of your application. If you have multiple instances of your application, and you let Sinatra generate the key, each instance would then have a different session key which is probably not what you want.&lt;/p&gt; &#xA;&lt;p&gt;For better security and usability it&#39;s &lt;a href=&#34;https://12factor.net/config&#34;&gt;recommended&lt;/a&gt; that you generate a secure random secret and store it in an environment variable on each host running your application so that all of your application instances will share the same secret. You should periodically rotate this session secret to a new value. Here are some examples of how you might create a 64-byte secret and set it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret Generation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ruby -e &#34;require &#39;securerandom&#39;; puts SecureRandom.hex(64)&#34;&#xA;99ae8af...snip...ec0f262ac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret Environment Variable&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set a &lt;code&gt;SESSION_SECRET&lt;/code&gt; environment variable for Sinatra to the value you generated. Make this value persistent across reboots of your host. Since the method for doing this will vary across systems this is for illustrative purposes only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# echo &#34;export SESSION_SECRET=99ae8af...snip...ec0f262ac&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret App Config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set up your app config to fail-safe to a secure random secret if the &lt;code&gt;SESSION_SECRET&lt;/code&gt; environment variable is not available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;securerandom&#39;&#xA;set :session_secret, ENV.fetch(&#39;SESSION_SECRET&#39;) { SecureRandom.hex(64) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Session Config&lt;/h4&gt; &#xA;&lt;p&gt;If you want to configure it further, you may also store a hash with options in the &lt;code&gt;sessions&lt;/code&gt; setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :sessions, :domain =&amp;gt; &#39;foo.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To share your session across other apps on subdomains of foo.com, prefix the domain with a &lt;em&gt;.&lt;/em&gt; like this instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :sessions, :domain =&amp;gt; &#39;.foo.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Choosing Your Own Session Middleware&lt;/h4&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;enable :sessions&lt;/code&gt; actually stores all data in a cookie. This might not always be what you want (storing lots of data will increase your traffic, for instance). You can use any Rack session middleware in order to do so, one of the following methods can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;enable :sessions&#xA;set :session_store, Rack::Session::Pool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to set up sessions with a hash of options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :sessions, :expire_after =&amp;gt; 2592000&#xA;set :session_store, Rack::Session::Pool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option is to &lt;strong&gt;not&lt;/strong&gt; call &lt;code&gt;enable :sessions&lt;/code&gt;, but instead pull in your middleware of choice as you would any other middleware.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note that when using this method, session based protection &lt;strong&gt;will not be enabled by default&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Rack middleware to do that will also need to be added:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use Rack::Session::Pool, :expire_after =&amp;gt; 2592000&#xA;use Rack::Protection::RemoteToken&#xA;use Rack::Protection::SessionHijacking&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &#39;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#configuring-attack-protection&#34;&gt;Configuring attack protection&lt;/a&gt;&#39; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Halting&lt;/h3&gt; &#xA;&lt;p&gt;To immediately stop a request within a filter or route use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify the status when halting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt 410&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or the body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt &#39;this will be the body&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or both:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt 401, &#39;go away!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt 402, {&#39;Content-Type&#39; =&amp;gt; &#39;text/plain&#39;}, &#39;revenge&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is of course possible to combine a template with &lt;code&gt;halt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt erb(:error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passing&lt;/h3&gt; &#xA;&lt;p&gt;A route can punt processing to the next matching route using &lt;code&gt;pass&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/guess/:who&#39; do&#xA;  pass unless params[&#39;who&#39;] == &#39;Frank&#39;&#xA;  &#39;You got me!&#39;&#xA;end&#xA;&#xA;get &#39;/guess/*&#39; do&#xA;  &#39;You missed!&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The route block is immediately exited and control continues with the next matching route. If no matching route is found, a 404 is returned.&lt;/p&gt; &#xA;&lt;h3&gt;Triggering Another Route&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes &lt;code&gt;pass&lt;/code&gt; is not what you want, instead, you would like to get the result of calling another route. Simply use &lt;code&gt;call&lt;/code&gt; to achieve this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  status, headers, body = call env.merge(&#34;PATH_INFO&#34; =&amp;gt; &#39;/bar&#39;)&#xA;  [status, headers, body.map(&amp;amp;:upcase)]&#xA;end&#xA;&#xA;get &#39;/bar&#39; do&#xA;  &#34;bar&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in the example above, you would ease testing and increase performance by simply moving &lt;code&gt;&#34;bar&#34;&lt;/code&gt; into a helper used by both &lt;code&gt;/foo&lt;/code&gt; and &lt;code&gt;/bar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want the request to be sent to the same application instance rather than a duplicate, use &lt;code&gt;call!&lt;/code&gt; instead of &lt;code&gt;call&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out the Rack specification if you want to learn more about &lt;code&gt;call&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting Body, Status Code, and Headers&lt;/h3&gt; &#xA;&lt;p&gt;It is possible and recommended to set the status code and response body with the return value of the route block. However, in some scenarios, you might want to set the body at an arbitrary point in the execution flow. You can do so with the &lt;code&gt;body&lt;/code&gt; helper method. If you do so, you can use that method from thereon to access the body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  body &#34;bar&#34;&#xA;end&#xA;&#xA;after do&#xA;  puts body&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to pass a block to &lt;code&gt;body&lt;/code&gt;, which will be executed by the Rack handler (this can be used to implement streaming, &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#return-values&#34;&gt;see &#34;Return Values&#34;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Similar to the body, you can also set the status code and headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  status 418&#xA;  headers \&#xA;    &#34;Allow&#34;   =&amp;gt; &#34;BREW, POST, GET, PROPFIND, WHEN&#34;,&#xA;    &#34;Refresh&#34; =&amp;gt; &#34;Refresh: 20; https://ietf.org/rfc/rfc2324.txt&#34;&#xA;  body &#34;I&#39;m a teapot!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt; with no arguments can be used to access their current values.&lt;/p&gt; &#xA;&lt;h3&gt;Streaming Responses&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you want to start sending out data while still generating parts of the response body. In extreme examples, you want to keep sending data until the client closes the connection. You can use the &lt;code&gt;stream&lt;/code&gt; helper to avoid creating your own wrapper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  stream do |out|&#xA;    out &amp;lt;&amp;lt; &#34;It&#39;s gonna be legen -\n&#34;&#xA;    sleep 0.5&#xA;    out &amp;lt;&amp;lt; &#34; (wait for it) \n&#34;&#xA;    sleep 1&#xA;    out &amp;lt;&amp;lt; &#34;- dary!\n&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows you to implement streaming APIs, &lt;a href=&#34;https://w3c.github.io/eventsource/&#34;&gt;Server Sent Events&lt;/a&gt;, and can be used as the basis for &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;WebSockets&lt;/a&gt;. It can also be used to increase throughput if some but not all content depends on a slow resource.&lt;/p&gt; &#xA;&lt;p&gt;Note that the streaming behavior, especially the number of concurrent requests, highly depends on the webserver used to serve the application. Some servers might not even support streaming at all. If the server does not support streaming, the body will be sent all at once after the block passed to &lt;code&gt;stream&lt;/code&gt; finishes executing. Streaming does not work at all with Shotgun.&lt;/p&gt; &#xA;&lt;p&gt;If the optional parameter is set to &lt;code&gt;keep_open&lt;/code&gt;, it will not call &lt;code&gt;close&lt;/code&gt; on the stream object, allowing you to close it at any later point in the execution flow.&lt;/p&gt; &#xA;&lt;p&gt;You can have a look at the &lt;a href=&#34;https://github.com/sinatra/sinatra/raw/main/examples/chat.rb&#34;&gt;chat example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also possible for the client to close the connection when trying to write to the socket. Because of this, it&#39;s recommended to check &lt;code&gt;out.closed?&lt;/code&gt; before trying to write.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;In the request scope, the &lt;code&gt;logger&lt;/code&gt; helper exposes a &lt;code&gt;Logger&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  logger.info &#34;loading data&#34;&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This logger will automatically take your Rack handler&#39;s logging settings into account. If logging is disabled, this method will return a dummy object, so you do not have to worry about it in your routes and filters.&lt;/p&gt; &#xA;&lt;p&gt;Note that logging is only enabled for &lt;code&gt;Sinatra::Application&lt;/code&gt; by default, so if you inherit from &lt;code&gt;Sinatra::Base&lt;/code&gt;, you probably want to enable it yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyApp &amp;lt; Sinatra::Base&#xA;  configure :production, :development do&#xA;    enable :logging&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid any logging middleware to be set up, set the &lt;code&gt;logging&lt;/code&gt; option to &lt;code&gt;nil&lt;/code&gt;. However, keep in mind that &lt;code&gt;logger&lt;/code&gt; will in that case return &lt;code&gt;nil&lt;/code&gt;. A common use case is when you want to set your own logger. Sinatra will use whatever it will find in &lt;code&gt;env[&#39;rack.logger&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mime Types&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;code&gt;send_file&lt;/code&gt; or static files you may have mime types Sinatra doesn&#39;t understand. Use &lt;code&gt;mime_type&lt;/code&gt; to register them by file extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  mime_type :foo, &#39;text/foo&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use it with the &lt;code&gt;content_type&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  content_type :foo&#xA;  &#34;foo foo foo&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating URLs&lt;/h3&gt; &#xA;&lt;p&gt;For generating URLs you should use the &lt;code&gt;url&lt;/code&gt; helper method, for instance, in Haml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%a{:href =&amp;gt; url(&#39;/foo&#39;)} foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It takes reverse proxies and Rack routers into account - if present.&lt;/p&gt; &#xA;&lt;p&gt;This method is also aliased to &lt;code&gt;to&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#browser-redirect&#34;&gt;below&lt;/a&gt; for an example).&lt;/p&gt; &#xA;&lt;h3&gt;Browser Redirect&lt;/h3&gt; &#xA;&lt;p&gt;You can trigger a browser redirect with the &lt;code&gt;redirect&lt;/code&gt; helper method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  redirect to(&#39;/bar&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any additional parameters are handled like arguments passed to &lt;code&gt;halt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redirect to(&#39;/bar&#39;), 303&#xA;redirect &#39;http://www.google.com/&#39;, &#39;wrong place, buddy&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also easily redirect back to the page the user came from with &lt;code&gt;redirect back&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  &#34;&amp;lt;a href=&#39;/bar&#39;&amp;gt;do something&amp;lt;/a&amp;gt;&#34;&#xA;end&#xA;&#xA;get &#39;/bar&#39; do&#xA;  do_something&#xA;  redirect back&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass arguments with a redirect, either add them to the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redirect to(&#39;/bar?sum=42&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use a session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;enable :sessions&#xA;&#xA;get &#39;/foo&#39; do&#xA;  session[:secret] = &#39;foo&#39;&#xA;  redirect to(&#39;/bar&#39;)&#xA;end&#xA;&#xA;get &#39;/bar&#39; do&#xA;  session[:secret]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cache Control&lt;/h3&gt; &#xA;&lt;p&gt;Setting your headers correctly is the foundation for proper HTTP caching.&lt;/p&gt; &#xA;&lt;p&gt;You can easily set the Cache-Control header like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  cache_control :public&#xA;  &#34;cache it!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pro tip: Set up caching in a before filter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  cache_control :public, :must_revalidate, :max_age =&amp;gt; 60&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;expires&lt;/code&gt; helper to set the corresponding header, &lt;code&gt;Cache-Control&lt;/code&gt; will be set automatically for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  expires 500, :public, :must_revalidate&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To properly use caches, you should consider using &lt;code&gt;etag&lt;/code&gt; or &lt;code&gt;last_modified&lt;/code&gt;. It is recommended to call those helpers &lt;em&gt;before&lt;/em&gt; doing any heavy lifting, as they will immediately flush a response if the client already has the current version in its cache:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#34;/article/:id&#34; do&#xA;  @article = Article.find params[&#39;id&#39;]&#xA;  last_modified @article.updated_at&#xA;  etag @article.sha1&#xA;  erb :article&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to use a &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation&#34;&gt;weak ETag&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;etag @article.sha1, :weak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These helpers will not do any caching for you, but rather feed the necessary information to your cache. If you are looking for a quick reverse-proxy caching solution, try &lt;a href=&#34;https://github.com/rtomayko/rack-cache#readme&#34;&gt;rack-cache&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;rack/cache&#34;&#xA;require &#34;sinatra&#34;&#xA;&#xA;use Rack::Cache&#xA;&#xA;get &#39;/&#39; do&#xA;  cache_control :public, :max_age =&amp;gt; 36000&#xA;  sleep 5&#xA;  &#34;hello&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;:static_cache_control&lt;/code&gt; setting (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#cache-control&#34;&gt;below&lt;/a&gt;) to add &lt;code&gt;Cache-Control&lt;/code&gt; header info to static files.&lt;/p&gt; &#xA;&lt;p&gt;According to RFC 2616, your application should behave differently if the If-Match or If-None-Match header is set to &lt;code&gt;*&lt;/code&gt;, depending on whether the resource requested is already in existence. Sinatra assumes resources for safe (like get) and idempotent (like put) requests are already in existence, whereas other resources (for instance post requests) are treated as new resources. You can change this behavior by passing in a &lt;code&gt;:new_resource&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/create&#39; do&#xA;  etag &#39;&#39;, :new_resource =&amp;gt; true&#xA;  Article.create&#xA;  erb :new_article&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you still want to use a weak ETag, pass in a &lt;code&gt;:kind&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;etag &#39;&#39;, :new_resource =&amp;gt; true, :kind =&amp;gt; :weak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending Files&lt;/h3&gt; &#xA;&lt;p&gt;To return the contents of a file as the response, you can use the &lt;code&gt;send_file&lt;/code&gt; helper method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  send_file &#39;foo.png&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also takes options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;send_file &#39;foo.png&#39;, :type =&amp;gt; :jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The options are:&lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  filename&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  File name to be used in the response, defaults to the real file name.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  last_modified&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Value for Last-Modified header, defaults to the file&#39;s mtime.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  type&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Value for Content-Type header, guessed from the file extension if missing.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  disposition&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Value for Content-Disposition header, possible values: &#xA;  &lt;tt&gt;nil&lt;/tt&gt; (default), &#xA;  &lt;tt&gt;:attachment&lt;/tt&gt; and &#xA;  &lt;tt&gt;:inline&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  length&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Value for Content-Length header, defaults to file size.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  status&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Status code to be sent. Useful when sending a static file as an error page. If supported by the Rack handler, other means than streaming from the Ruby process will be used. If you use this helper method, Sinatra will automatically handle range requests. &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;h3&gt;Accessing the Request Object&lt;/h3&gt; &#xA;&lt;p&gt;The incoming request object can be accessed from request level (filter, routes, error handlers) through the &lt;code&gt;request&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app running on http://example.com/example&#xA;get &#39;/foo&#39; do&#xA;  t = %w[text/css text/html application/javascript]&#xA;  request.accept              # [&#39;text/html&#39;, &#39;*/*&#39;]&#xA;  request.accept? &#39;text/xml&#39;  # true&#xA;  request.preferred_type(t)   # &#39;text/html&#39;&#xA;  request.body                # request body sent by the client (see below)&#xA;  request.scheme              # &#34;http&#34;&#xA;  request.script_name         # &#34;/example&#34;&#xA;  request.path_info           # &#34;/foo&#34;&#xA;  request.port                # 80&#xA;  request.request_method      # &#34;GET&#34;&#xA;  request.query_string        # &#34;&#34;&#xA;  request.content_length      # length of request.body&#xA;  request.media_type          # media type of request.body&#xA;  request.host                # &#34;example.com&#34;&#xA;  request.get?                # true (similar methods for other verbs)&#xA;  request.form_data?          # false&#xA;  request[&#34;some_param&#34;]       # value of some_param parameter. [] is a shortcut to the params hash.&#xA;  request.referrer            # the referrer of the client or &#39;/&#39;&#xA;  request.user_agent          # user agent (used by :agent condition)&#xA;  request.cookies             # hash of browser cookies&#xA;  request.xhr?                # is this an ajax request?&#xA;  request.url                 # &#34;http://example.com/example/foo&#34;&#xA;  request.path                # &#34;/example/foo&#34;&#xA;  request.ip                  # client IP address&#xA;  request.secure?             # false (would be true over ssl)&#xA;  request.forwarded?          # true (if running behind a reverse proxy)&#xA;  request.env                 # raw env hash handed in by Rack&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some options, like &lt;code&gt;script_name&lt;/code&gt; or &lt;code&gt;path_info&lt;/code&gt;, can also be written:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before { request.path_info = &#34;/&#34; }&#xA;&#xA;get &#34;/&#34; do&#xA;  &#34;all requests end up here&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;request.body&lt;/code&gt; is an IO or StringIO object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post &#34;/api&#34; do&#xA;  request.body.rewind  # in case someone already read it&#xA;  data = JSON.parse request.body.read&#xA;  &#34;Hello #{data[&#39;name&#39;]}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attachments&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;attachment&lt;/code&gt; helper to tell the browser the response should be stored on disk rather than displayed in the browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  attachment&#xA;  &#34;store it!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass it a file name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  attachment &#34;info.txt&#34;&#xA;  &#34;store it!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dealing with Date and Time&lt;/h3&gt; &#xA;&lt;p&gt;Sinatra offers a &lt;code&gt;time_for&lt;/code&gt; helper method that generates a Time object from the given value. It is also able to convert &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt; and similar classes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  pass if Time.now &amp;gt; time_for(&#39;Dec 23, 2016&#39;)&#xA;  &#34;still time&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method is used internally by &lt;code&gt;expires&lt;/code&gt;, &lt;code&gt;last_modified&lt;/code&gt; and akin. You can therefore easily extend the behavior of those methods by overriding &lt;code&gt;time_for&lt;/code&gt; in your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;helpers do&#xA;  def time_for(value)&#xA;    case value&#xA;    when :yesterday then Time.now - 24*60*60&#xA;    when :tomorrow  then Time.now + 24*60*60&#xA;    else super&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  last_modified :yesterday&#xA;  expires :tomorrow&#xA;  &#34;hello&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Looking Up Template Files&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;find_template&lt;/code&gt; helper is used to find template files for rendering:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find_template settings.views, &#39;foo&#39;, Tilt[:haml] do |file|&#xA;  puts &#34;could be #{file}&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is not really useful. But it is useful that you can actually override this method to hook in your own lookup mechanism. For instance, if you want to be able to use more than one view directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :views, [&#39;views&#39;, &#39;templates&#39;]&#xA;&#xA;helpers do&#xA;  def find_template(views, name, engine, &amp;amp;block)&#xA;    Array(views).each { |v| super(v, name, engine, &amp;amp;block) }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another example would be using different directories for different engines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :views, :haml =&amp;gt; &#39;templates&#39;, :default =&amp;gt; &#39;views&#39;&#xA;&#xA;helpers do&#xA;  def find_template(views, name, engine, &amp;amp;block)&#xA;    _, folder = views.detect { |k,v| engine == Tilt[k] }&#xA;    folder ||= views[:default]&#xA;    super(folder, name, engine, &amp;amp;block)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also easily wrap this up in an extension and share it with others!&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;find_template&lt;/code&gt; does not check if the file really exists but rather calls the given block for all possible paths. This is not a performance issue, since &lt;code&gt;render&lt;/code&gt; will use &lt;code&gt;break&lt;/code&gt; as soon as a file is found. Also, template locations (and content) will be cached if you are not running in development mode. You should keep that in mind if you write a really crazy method.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Run once, at startup, in any environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  # setting one option&#xA;  set :option, &#39;value&#39;&#xA;&#xA;  # setting multiple options&#xA;  set :a =&amp;gt; 1, :b =&amp;gt; 2&#xA;&#xA;  # same as `set :option, true`&#xA;  enable :option&#xA;&#xA;  # same as `set :option, false`&#xA;  disable :option&#xA;&#xA;  # you can also have dynamic settings with blocks&#xA;  set(:css_dir) { File.join(views, &#39;css&#39;) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run only when the environment (&lt;code&gt;APP_ENV&lt;/code&gt; environment variable) is set to &lt;code&gt;:production&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure :production do&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run when the environment is set to either &lt;code&gt;:production&lt;/code&gt; or &lt;code&gt;:test&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure :production, :test do&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access those options via &lt;code&gt;settings&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  set :foo, &#39;bar&#39;&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  settings.foo? # =&amp;gt; true&#xA;  settings.foo  # =&amp;gt; &#39;bar&#39;&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring attack protection&lt;/h3&gt; &#xA;&lt;p&gt;Sinatra is using &lt;a href=&#34;https://github.com/sinatra/sinatra/tree/main/rack-protection#readme&#34;&gt;Rack::Protection&lt;/a&gt; to defend your application against common, opportunistic attacks. You can easily disable this behavior (which will open up your application to tons of common vulnerabilities):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;disable :protection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To skip a single defense layer, set &lt;code&gt;protection&lt;/code&gt; to an options hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :protection, :except =&amp;gt; :path_traversal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also hand in an array in order to disable a list of protections:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :protection, :except =&amp;gt; [:path_traversal, :remote_token]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Sinatra will only set up session based protection if &lt;code&gt;:sessions&lt;/code&gt; have been enabled. See &#39;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/main/#using-sessions&#34;&gt;Using Sessions&lt;/a&gt;&#39;. Sometimes you may want to set up sessions &#34;outside&#34; of the Sinatra app, such as in the config.ru or with a separate &lt;code&gt;Rack::Builder&lt;/code&gt; instance. In that case, you can still set up session based protection by passing the &lt;code&gt;:session&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :protection, :session =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available Settings&lt;/h3&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  absolute_redirects&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If disabled, Sinatra will allow relative redirects, however, Sinatra will no longer conform with RFC 2616 (HTTP 1.1), which only allows absolute redirects. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Enable if your app is running behind a reverse proxy that has not been set up properly. Note that the &#xA;  &lt;tt&gt;url&lt;/tt&gt; helper will still produce absolute URLs, unless you pass in &#xA;  &lt;tt&gt;false&lt;/tt&gt; as the second parameter. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Disabled by default.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  add_charset&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Mime types the &#xA;  &lt;tt&gt;content_type&lt;/tt&gt; helper will automatically add the charset info to. You should add to it rather than overriding this option: &#xA;  &lt;tt&gt;settings.add_charset &amp;lt;&amp;lt; &#34;application/foobar&#34;&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  app_file&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to the main application file, used to detect project root, views and public folder and inline templates. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  bind&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   IP address to bind to (default: &#xA;  &lt;tt&gt;0.0.0.0&lt;/tt&gt; &#xA;  &lt;em&gt;or&lt;/em&gt; &#xA;  &lt;tt&gt;localhost&lt;/tt&gt; if your `environment` is set to development). Only used for built-in server. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  default_content_type&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Content-Type to assume if unknown (defaults to &#xA;  &lt;tt&gt;&#34;text/html&#34;&lt;/tt&gt;). Set to &#xA;  &lt;tt&gt;nil&lt;/tt&gt; to not set a default Content-Type on every response; when configured so, you must set the Content-Type manually when emitting content or the user-agent will have to sniff it (or, if &#xA;  &lt;tt&gt;nosniff&lt;/tt&gt; is enabled in Rack::Protection::XSSHeader, assume &#xA;  &lt;tt&gt;application/octet-stream&lt;/tt&gt;). &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  default_encoding&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Encoding to assume if unknown (defaults to &#xA;  &lt;tt&gt;&#34;utf-8&#34;&lt;/tt&gt;).&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  dump_errors&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Display errors in the log. Enabled by default unless environment is &#34;test&#34;.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  environment&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Current environment. Defaults to &#xA;  &lt;tt&gt;ENV[&#39;APP_ENV&#39;]&lt;/tt&gt;, or &#xA;  &lt;tt&gt;&#34;development&#34;&lt;/tt&gt; if not available. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  host_authorization&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt; &#xA;  &lt;p&gt; You can pass a hash of options to &lt;tt&gt;host_authorization&lt;/tt&gt;, to be used by the &lt;tt&gt;Rack::Protection::HostAuthorization&lt;/tt&gt; middleware. &lt;/p&gt; &#xA;  &lt;p&gt; The middleware can block requests with unrecognized hostnames, to prevent DNS rebinding and other host header attacks. It checks the &lt;tt&gt;Host&lt;/tt&gt;, &lt;tt&gt;X-Forwarded-Host&lt;/tt&gt; and &lt;tt&gt;Forwarded&lt;/tt&gt; headers. &lt;/p&gt; &#xA;  &lt;p&gt; Useful options are: &lt;/p&gt;&#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;tt&gt;permitted_hosts&lt;/tt&gt; â€“ an array of hostnames (and &lt;tt&gt;IPAddr&lt;/tt&gt; objects) your app recognizes &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;in the &lt;tt&gt;development&lt;/tt&gt; environment, it is set to &lt;tt&gt;.localhost&lt;/tt&gt;, &lt;tt&gt;.test&lt;/tt&gt; and any IPv4/IPv6 address&lt;/li&gt; &#xA;     &lt;li&gt;if empty, any hostname is permitted (the default for any other environment)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;tt&gt;status&lt;/tt&gt; â€“ the HTTP status code used in the response when a request is blocked (defaults to &lt;tt&gt;403&lt;/tt&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;tt&gt;message&lt;/tt&gt; â€“ the body used in the response when a request is blocked (defaults to &lt;tt&gt;Host not permitted&lt;/tt&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;tt&gt;allow_if&lt;/tt&gt; â€“ supply a &lt;tt&gt;Proc&lt;/tt&gt; to use custom allow/deny logic, the proc is passed the request environment&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;&lt;/p&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  logging&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Use the logger.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  lock&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Places a lock around every request, only running processing on request per Ruby process concurrently. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Enabled if your app is not thread-safe. Disabled by default.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  method_override&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Use &#xA;  &lt;tt&gt;_method&lt;/tt&gt; magic to allow put/delete forms in browsers that don&#39;t support it. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  mustermann_opts&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   A default hash of options to pass to Mustermann.new when compiling routing paths. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  port&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Port to listen on. Only used for built-in server.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  prefixed_redirects&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to insert &#xA;  &lt;tt&gt;request.script_name&lt;/tt&gt; into redirects if no absolute path is given. That way &#xA;  &lt;tt&gt;redirect &#39;/foo&#39;&lt;/tt&gt; would behave like &#xA;  &lt;tt&gt;redirect to(&#39;/foo&#39;)&lt;/tt&gt;. Disabled by default. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  protection&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to enable web attack protections. See protection section above. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  public_dir&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Alias for &#xA;  &lt;tt&gt;public_folder&lt;/tt&gt;. See below.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  public_folder&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to the folder public files are served from. Only used if static file serving is enabled (see &#xA;  &lt;tt&gt;static&lt;/tt&gt; setting below). Inferred from &#xA;  &lt;tt&gt;app_file&lt;/tt&gt; setting if not set. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  quiet&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Disables logs generated by Sinatra&#39;s start and stop commands. &#xA;  &lt;tt&gt;false&lt;/tt&gt; by default. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  reload_templates&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to reload templates between requests. Enabled in development mode. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  root&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to project root folder. Inferred from &#xA;  &lt;tt&gt;app_file&lt;/tt&gt; setting if not set. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  raise_errors&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Raise unhandled errors (will stop application). Enabled by default when &#xA;  &lt;tt&gt;environment&lt;/tt&gt; is set to &#xA;  &lt;tt&gt;&#34;test&#34;&lt;/tt&gt;, disabled otherwise. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Any explicitly defined error handlers always override this setting. See the &#34;Error&#34; section below. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  run&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If enabled, Sinatra will handle starting the web server. Do not enable if using rackup or other means. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  running&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Is the built-in server running now? Do not change this setting!&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  server&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Server or list of servers to use for built-in server. Order indicates priority, default depends on Ruby implementation. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  server_settings&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   You can pass a hash of options to &#xA;  &lt;tt&gt;server_settings&lt;/tt&gt;, such as &#xA;  &lt;tt&gt;Host&lt;/tt&gt; or &#xA;  &lt;tt&gt;Port&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  sessions&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Enable cookie-based sessions support using &#xA;  &lt;tt&gt;Rack::Session::Cookie&lt;/tt&gt;. See &#39;Using Sessions&#39; section for more information. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  session_store&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   The Rack session middleware used. Defaults to &#xA;  &lt;tt&gt;Rack::Session::Cookie&lt;/tt&gt;. See &#39;Using Sessions&#39; section for more information. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  show_exceptions&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Show a stack trace in the browser when an exception happens. Enabled by default when &#xA;  &lt;tt&gt;environment&lt;/tt&gt; is set to &#xA;  &lt;tt&gt;&#34;development&#34;&lt;/tt&gt;, disabled otherwise. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Can also be set to &#xA;  &lt;tt&gt;:after_handler&lt;/tt&gt; to trigger app-specified error handling before showing a stack trace in the browser. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  static&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Whether Sinatra should handle serving static files.&#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Disable when using a server able to do this on its own.&#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Disabling will boost performance.&#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Enabled by default in classic style, disabled for modular apps. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  static_cache_control&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   When Sinatra is serving static files, set this to add &#xA;  &lt;tt&gt;Cache-Control&lt;/tt&gt; headers to the responses. Uses the &#xA;  &lt;tt&gt;cache_control&lt;/tt&gt; helper. Disabled by default. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Use an explicit array when setting multiple values: &#xA;  &lt;tt&gt;set :static_cache_control, [:public, :max_age =&amp;gt; 300]&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  threaded&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If set to &#xA;  &lt;tt&gt;true&lt;/tt&gt;, will tell server to use &#xA;  &lt;tt&gt;EventMachine.defer&lt;/tt&gt; for processing the request. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  traps&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Whether Sinatra should handle system signals.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  views&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to the views folder. Inferred from &#xA;  &lt;tt&gt;app_file&lt;/tt&gt; setting if not set. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  x_cascade&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to set the X-Cascade header if no route matches. Defaults to &#xA;  &lt;tt&gt;true&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;h2&gt;Lifecycle Events&lt;/h2&gt; &#xA;&lt;p&gt;There are 2 lifecycle events currently exposed by Sinatra. One when the server starts and one when it stops.&lt;/p&gt; &#xA;&lt;p&gt;They can be used like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;on_start do&#xA;  puts &#34;===== Booting up =====&#34;&#xA;end&#xA;&#xA;on_stop do&#xA;  puts &#34;===== Shutting down =====&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that these callbacks only work when using Sinatra to start the web server.&lt;/p&gt; &#xA;&lt;h2&gt;Environments&lt;/h2&gt; &#xA;&lt;p&gt;There are three predefined &lt;code&gt;environments&lt;/code&gt;: &lt;code&gt;&#34;development&#34;&lt;/code&gt;, &lt;code&gt;&#34;production&#34;&lt;/code&gt; and &lt;code&gt;&#34;test&#34;&lt;/code&gt;. Environments can be set through the &lt;code&gt;APP_ENV&lt;/code&gt; environment variable. The default value is &lt;code&gt;&#34;development&#34;&lt;/code&gt;. In the &lt;code&gt;&#34;development&#34;&lt;/code&gt; environment all templates are reloaded between requests, and special &lt;code&gt;not_found&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; handlers display stack traces in your browser. In the &lt;code&gt;&#34;production&#34;&lt;/code&gt; and &lt;code&gt;&#34;test&#34;&lt;/code&gt; environments, templates are cached by default.&lt;/p&gt; &#xA;&lt;p&gt;To run different environments, set the &lt;code&gt;APP_ENV&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;APP_ENV=production ruby my_app.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use predefined methods: &lt;code&gt;development?&lt;/code&gt;, &lt;code&gt;test?&lt;/code&gt; and &lt;code&gt;production?&lt;/code&gt; to check the current environment setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  if settings.development?&#xA;    &#34;development!&#34;&#xA;  else&#xA;    &#34;not development!&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;p&gt;Error handlers run within the same context as routes and before filters, which means you get all the goodies it has to offer, like &lt;code&gt;haml&lt;/code&gt;, &lt;code&gt;erb&lt;/code&gt;, &lt;code&gt;halt&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Not Found&lt;/h3&gt; &#xA;&lt;p&gt;When a &lt;code&gt;Sinatra::NotFound&lt;/code&gt; exception is raised, or the response&#39;s status code is 404, the &lt;code&gt;not_found&lt;/code&gt; handler is invoked:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;not_found do&#xA;  &#39;This is nowhere to be found.&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;error&lt;/code&gt; handler is invoked any time an exception is raised from a route block or a filter. But note in development it will only run if you set the show exceptions option to &lt;code&gt;:after_handler&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :show_exceptions, :after_handler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A catch-all error handler can be defined with &lt;code&gt;error&lt;/code&gt; and a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error do&#xA;  &#39;Sorry there was a nasty error&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The exception object can be obtained from the &lt;code&gt;sinatra.error&lt;/code&gt; Rack variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error do&#xA;  &#39;Sorry there was a nasty error - &#39; + env[&#39;sinatra.error&#39;].message&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pass an error class as an argument to create handlers for custom errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error MyCustomError do&#xA;  &#39;So what happened was...&#39; + env[&#39;sinatra.error&#39;].message&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, if this happens:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  raise MyCustomError, &#39;something bad&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You get this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;So what happened was... something bad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can install an error handler for a status code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error 403 do&#xA;  &#39;Access forbidden&#39;&#xA;end&#xA;&#xA;get &#39;/secret&#39; do&#xA;  403&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a range:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error 400..510 do&#xA;  &#39;Boom&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sinatra installs special &lt;code&gt;not_found&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; handlers when running under the development environment to display nice stack traces and additional debugging information in your browser.&lt;/p&gt; &#xA;&lt;h3&gt;Behavior with &lt;code&gt;raise_errors&lt;/code&gt; option&lt;/h3&gt; &#xA;&lt;p&gt;When &lt;code&gt;raise_errors&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;, errors that are unhandled are raised outside of the application. Additionally, any errors that would have been caught by the catch-all error handler are raised.&lt;/p&gt; &#xA;&lt;p&gt;For example, consider the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# First handler&#xA;error MyCustomError do&#xA;  &#39;A custom message&#39;&#xA;end&#xA;&#xA;# Second handler&#xA;error do&#xA;  &#39;A catch-all message&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;raise_errors&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When &lt;code&gt;MyCustomError&lt;/code&gt; or descendant is raised, the first handler is invoked. The HTTP response body will contain &lt;code&gt;&#34;A custom message&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When any other error is raised, the second handler is invoked. The HTTP response body will contain &lt;code&gt;&#34;A catch-all message&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If &lt;code&gt;raise_errors&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When &lt;code&gt;MyCustomError&lt;/code&gt; or descendant is raised, the behavior is identical to when &lt;code&gt;raise_errors&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, described above.&lt;/li&gt; &#xA; &lt;li&gt;When any other error is raised, the second handler is &lt;em&gt;not&lt;/em&gt; invoked, and the error is raised outside of the application. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the environment is &lt;code&gt;production&lt;/code&gt;, the HTTP response body will contain a generic error message, e.g. &lt;code&gt;&#34;An unhandled lowlevel error occurred. The application logs may have details.&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If the environment is not &lt;code&gt;production&lt;/code&gt;, the HTTP response body will contain the verbose error backtrace.&lt;/li&gt; &#xA;   &lt;li&gt;Regardless of environment, if &lt;code&gt;show_exceptions&lt;/code&gt; is set to &lt;code&gt;:after_handler&lt;/code&gt;, the HTTP response body will contain the verbose error backtrace.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the &lt;code&gt;test&lt;/code&gt; environment, &lt;code&gt;raise_errors&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; by default. This means that in order to write a test for a catch-all error handler, &lt;code&gt;raise_errors&lt;/code&gt; must temporarily be set to &lt;code&gt;false&lt;/code&gt; for that particular test.&lt;/p&gt; &#xA;&lt;h2&gt;Rack Middleware&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra rides on &lt;a href=&#34;https://rack.github.io/&#34;&gt;Rack&lt;/a&gt;, a minimal standard interface for Ruby web frameworks. One of Rack&#39;s most interesting capabilities for application developers is support for &#34;middleware&#34; -- components that sit between the server and your application monitoring and/or manipulating the HTTP request/response to provide various types of common functionality.&lt;/p&gt; &#xA;&lt;p&gt;Sinatra makes building Rack middleware pipelines a cinch via a top-level &lt;code&gt;use&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra&#39;&#xA;require &#39;my_custom_middleware&#39;&#xA;&#xA;use Rack::Lint&#xA;use MyCustomMiddleware&#xA;&#xA;get &#39;/hello&#39; do&#xA;  &#39;Hello World&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The semantics of &lt;code&gt;use&lt;/code&gt; are identical to those defined for the &lt;a href=&#34;https://www.rubydoc.info/github/rack/rack/main/Rack/Builder&#34;&gt;Rack::Builder&lt;/a&gt; DSL (most frequently used from rackup files). For example, the &lt;code&gt;use&lt;/code&gt; method accepts multiple/variable args as well as blocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use Rack::Auth::Basic do |username, password|&#xA;  username == &#39;admin&#39; &amp;amp;&amp;amp; password == &#39;secret&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rack is distributed with a variety of standard middleware for logging, debugging, URL routing, authentication, and session handling. Sinatra uses many of these components automatically based on configuration so you typically don&#39;t have to &lt;code&gt;use&lt;/code&gt; them explicitly.&lt;/p&gt; &#xA;&lt;p&gt;You can find useful middleware in &lt;a href=&#34;https://github.com/rack/rack/tree/main/lib/rack&#34;&gt;rack&lt;/a&gt;, &lt;a href=&#34;https://github.com/rack/rack-contrib#readme&#34;&gt;rack-contrib&lt;/a&gt;, or in the &lt;a href=&#34;https://github.com/rack/rack/wiki/List-of-Middleware&#34;&gt;Rack wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra tests can be written using any Rack-based testing library or framework. &lt;a href=&#34;https://www.rubydoc.info/github/rack/rack-test/main/frames&#34;&gt;Rack::Test&lt;/a&gt; is recommended:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;my_sinatra_app&#39;&#xA;require &#39;minitest/autorun&#39;&#xA;require &#39;rack/test&#39;&#xA;&#xA;class MyAppTest &amp;lt; Minitest::Test&#xA;  include Rack::Test::Methods&#xA;&#xA;  def app&#xA;    Sinatra::Application&#xA;  end&#xA;&#xA;  def test_my_default&#xA;    get &#39;/&#39;&#xA;    assert_equal &#39;Hello World!&#39;, last_response.body&#xA;  end&#xA;&#xA;  def test_with_params&#xA;    get &#39;/meet&#39;, :name =&amp;gt; &#39;Frank&#39;&#xA;    assert_equal &#39;Hello Frank!&#39;, last_response.body&#xA;  end&#xA;&#xA;  def test_with_user_agent&#xA;    get &#39;/&#39;, {}, &#39;HTTP_USER_AGENT&#39; =&amp;gt; &#39;Songbird&#39;&#xA;    assert_equal &#34;You&#39;re using Songbird!&#34;, last_response.body&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you are using Sinatra in the modular style, replace &lt;code&gt;Sinatra::Application&lt;/code&gt; above with the class name of your app.&lt;/p&gt; &#xA;&lt;h2&gt;Sinatra::Base - Middleware, Libraries, and Modular Apps&lt;/h2&gt; &#xA;&lt;p&gt;Defining your app at the top-level works well for micro-apps but has considerable drawbacks when building reusable components such as Rack middleware, Rails metal, simple libraries with a server component, or even Sinatra extensions. The top-level assumes a micro-app style configuration (e.g., a single application file, &lt;code&gt;./public&lt;/code&gt; and &lt;code&gt;./views&lt;/code&gt; directories, logging, exception detail page, etc.). That&#39;s where &lt;code&gt;Sinatra::Base&lt;/code&gt; comes into play:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;class MyApp &amp;lt; Sinatra::Base&#xA;  set :sessions, true&#xA;  set :foo, &#39;bar&#39;&#xA;&#xA;  get &#39;/&#39; do&#xA;    &#39;Hello world!&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The methods available to &lt;code&gt;Sinatra::Base&lt;/code&gt; subclasses are exactly the same as those available via the top-level DSL. Most top-level apps can be converted to &lt;code&gt;Sinatra::Base&lt;/code&gt; components with two modifications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your file should require &lt;code&gt;sinatra/base&lt;/code&gt; instead of &lt;code&gt;sinatra&lt;/code&gt;; otherwise, all of Sinatra&#39;s DSL methods are imported into the main namespace.&lt;/li&gt; &#xA; &lt;li&gt;Put your app&#39;s routes, error handlers, filters, and options in a subclass of &lt;code&gt;Sinatra::Base&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Sinatra::Base&lt;/code&gt; is a blank slate. Most options are disabled by default, including the built-in server. See &lt;a href=&#34;http://www.sinatrarb.com/configuration.html&#34;&gt;Configuring Settings&lt;/a&gt; for details on available options and their behavior. If you want behavior more similar to when you define your app at the top level (also known as Classic style), you can subclass &lt;code&gt;Sinatra::Application&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;class MyApp &amp;lt; Sinatra::Application&#xA;  get &#39;/&#39; do&#xA;    &#39;Hello world!&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modular vs. Classic Style&lt;/h3&gt; &#xA;&lt;p&gt;Contrary to common belief, there is nothing wrong with the classic style. If it suits your application, you do not have to switch to a modular application.&lt;/p&gt; &#xA;&lt;p&gt;The main disadvantage of using the classic style rather than the modular style is that you will only have one Sinatra application per Ruby process. If you plan to use more than one, switch to the modular style. There is no reason you cannot mix the modular and classic styles.&lt;/p&gt; &#xA;&lt;p&gt;If switching from one style to the other, you should be aware of slightly different default settings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting&lt;/th&gt; &#xA;   &lt;th&gt;Classic&lt;/th&gt; &#xA;   &lt;th&gt;Modular&lt;/th&gt; &#xA;   &lt;th&gt;Modular&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;app_file&lt;/td&gt; &#xA;   &lt;td&gt;file loading sinatra&lt;/td&gt; &#xA;   &lt;td&gt;file subclassing Sinatra::Base&lt;/td&gt; &#xA;   &lt;td&gt;file subclassing Sinatra::Application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;run&lt;/td&gt; &#xA;   &lt;td&gt;$0 == app_file&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;logging&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;method_override&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inline_templates&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;static&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;File.exist?(public_folder)&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Serving a Modular Application&lt;/h3&gt; &#xA;&lt;p&gt;There are two common options for starting a modular app, actively starting with &lt;code&gt;run!&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# my_app.rb&#xA;require &#39;sinatra/base&#39;&#xA;&#xA;class MyApp &amp;lt; Sinatra::Base&#xA;  # ... app code here ...&#xA;&#xA;  # start the server if ruby file executed directly&#xA;  run! if app_file == $0&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruby my_app.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a &lt;code&gt;config.ru&lt;/code&gt; file, which allows using any Rack handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru (run with rackup)&#xA;require &#39;./my_app&#39;&#xA;run MyApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rackup -p 4567&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a Classic Style Application with a config.ru&lt;/h3&gt; &#xA;&lt;p&gt;Write your app file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app.rb&#xA;require &#39;sinatra&#39;&#xA;&#xA;get &#39;/&#39; do&#xA;  &#39;Hello world!&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a corresponding &lt;code&gt;config.ru&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;./app&#39;&#xA;run Sinatra::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When to use a config.ru?&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;config.ru&lt;/code&gt; file is recommended if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You want to deploy with a different Rack handler (Passenger, Unicorn, Heroku, ...).&lt;/li&gt; &#xA; &lt;li&gt;You want to use more than one subclass of &lt;code&gt;Sinatra::Base&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You want to use Sinatra only for middleware, and not as an endpoint.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;There is no need to switch to a &lt;code&gt;config.ru&lt;/code&gt; simply because you switched to the modular style, and you don&#39;t have to use the modular style for running with a &lt;code&gt;config.ru&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using Sinatra as Middleware&lt;/h3&gt; &#xA;&lt;p&gt;Not only is Sinatra able to use other Rack middleware, any Sinatra application can, in turn, be added in front of any Rack endpoint as middleware itself. This endpoint could be another Sinatra application, or any other Rack-based application (Rails/Hanami/Roda/...):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;class LoginScreen &amp;lt; Sinatra::Base&#xA;  enable :sessions&#xA;&#xA;  get(&#39;/login&#39;) { haml :login }&#xA;&#xA;  post(&#39;/login&#39;) do&#xA;    if params[&#39;name&#39;] == &#39;admin&#39; &amp;amp;&amp;amp; params[&#39;password&#39;] == &#39;admin&#39;&#xA;      session[&#39;user_name&#39;] = params[&#39;name&#39;]&#xA;    else&#xA;      redirect &#39;/login&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class MyApp &amp;lt; Sinatra::Base&#xA;  # middleware will run before filters&#xA;  use LoginScreen&#xA;&#xA;  before do&#xA;    unless session[&#39;user_name&#39;]&#xA;      halt &#34;Access denied, please &amp;lt;a href=&#39;/login&#39;&amp;gt;login&amp;lt;/a&amp;gt;.&#34;&#xA;    end&#xA;  end&#xA;&#xA;  get(&#39;/&#39;) { &#34;Hello #{session[&#39;user_name&#39;]}.&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamic Application Creation&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you want to create new applications at runtime without having to assign them to a constant. You can do this with &lt;code&gt;Sinatra.new&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;my_app = Sinatra.new { get(&#39;/&#39;) { &#34;hi&#34; } }&#xA;my_app.run!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It takes the application to inherit from as an optional argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru (run with rackup)&#xA;require &#39;sinatra/base&#39;&#xA;&#xA;controller = Sinatra.new do&#xA;  enable :logging&#xA;  helpers MyHelpers&#xA;end&#xA;&#xA;map(&#39;/a&#39;) do&#xA;  run Sinatra.new(controller) { get(&#39;/&#39;) { &#39;a&#39; } }&#xA;end&#xA;&#xA;map(&#39;/b&#39;) do&#xA;  run Sinatra.new(controller) { get(&#39;/&#39;) { &#39;b&#39; } }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is especially useful for testing Sinatra extensions or using Sinatra in your own library.&lt;/p&gt; &#xA;&lt;p&gt;This also makes using Sinatra as middleware extremely easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;use Sinatra do&#xA;  get(&#39;/&#39;) { ... }&#xA;end&#xA;&#xA;run RailsProject::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scopes and Binding&lt;/h2&gt; &#xA;&lt;p&gt;The scope you are currently in determines what methods and variables are available.&lt;/p&gt; &#xA;&lt;h3&gt;Application/Class Scope&lt;/h3&gt; &#xA;&lt;p&gt;Every Sinatra application corresponds to a subclass of &lt;code&gt;Sinatra::Base&lt;/code&gt;. If you are using the top-level DSL (&lt;code&gt;require &#39;sinatra&#39;&lt;/code&gt;), then this class is &lt;code&gt;Sinatra::Application&lt;/code&gt;, otherwise it is the subclass you created explicitly. At the class level, you have methods like &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;before&lt;/code&gt;, but you cannot access the &lt;code&gt;request&lt;/code&gt; or &lt;code&gt;session&lt;/code&gt; objects, as there is only a single application class for all requests.&lt;/p&gt; &#xA;&lt;p&gt;Options created via &lt;code&gt;set&lt;/code&gt; are methods at class level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyApp &amp;lt; Sinatra::Base&#xA;  # Hey, I&#39;m in the application scope!&#xA;  set :foo, 42&#xA;  foo # =&amp;gt; 42&#xA;&#xA;  get &#39;/foo&#39; do&#xA;    # Hey, I&#39;m no longer in the application scope!&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You have the application scope binding inside:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your application class body&lt;/li&gt; &#xA; &lt;li&gt;Methods defined by extensions&lt;/li&gt; &#xA; &lt;li&gt;The block passed to &lt;code&gt;helpers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Procs/blocks used as a value for &lt;code&gt;set&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The block passed to &lt;code&gt;Sinatra.new&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can reach the scope object (the class) like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Via the object passed to configure blocks (&lt;code&gt;configure { |c| ... }&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;settings&lt;/code&gt; from within the request scope&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Request/Instance Scope&lt;/h3&gt; &#xA;&lt;p&gt;For every incoming request, a new instance of your application class is created, and all handler blocks run in that scope. From within this scope you can access the &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; objects or call rendering methods like &lt;code&gt;erb&lt;/code&gt; or &lt;code&gt;haml&lt;/code&gt;. You can access the application scope from within the request scope via the &lt;code&gt;settings&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyApp &amp;lt; Sinatra::Base&#xA;  # Hey, I&#39;m in the application scope!&#xA;  get &#39;/define_route/:name&#39; do&#xA;    # Request scope for &#39;/define_route/:name&#39;&#xA;    @value = 42&#xA;&#xA;    settings.get(&#34;/#{params[&#39;name&#39;]}&#34;) do&#xA;      # Request scope for &#34;/#{params[&#39;name&#39;]}&#34;&#xA;      @value # =&amp;gt; nil (not the same request)&#xA;    end&#xA;&#xA;    &#34;Route defined!&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You have the request scope binding inside:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;get, head, post, put, delete, options, patch, link and unlink blocks&lt;/li&gt; &#xA; &lt;li&gt;before and after filters&lt;/li&gt; &#xA; &lt;li&gt;helper methods&lt;/li&gt; &#xA; &lt;li&gt;templates/views&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Delegation Scope&lt;/h3&gt; &#xA;&lt;p&gt;The delegation scope just forwards methods to the class scope. However, it does not behave exactly like the class scope, as you do not have the class binding. Only methods explicitly marked for delegation are available, and you do not share variables/state with the class scope (read: you have a different &lt;code&gt;self&lt;/code&gt;). You can explicitly add method delegations by calling &lt;code&gt;Sinatra::Delegator.delegate :method_name&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You have the delegate scope binding inside:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The top-level binding, if you did &lt;code&gt;require &#34;sinatra&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An object extended with the &lt;code&gt;Sinatra::Delegator&lt;/code&gt; mixin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have a look at the code for yourself: here&#39;s the &lt;a href=&#34;https://github.com/sinatra/sinatra/raw/ca06364/lib/sinatra/base.rb#L1609-1633&#34;&gt;Sinatra::Delegator mixin&lt;/a&gt; being &lt;a href=&#34;https://github.com/sinatra/sinatra/raw/ca06364/lib/sinatra/main.rb#L28-30&#34;&gt;extending the main object&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra applications can be run directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruby myapp.rb [-h] [-x] [-q] [-e ENVIRONMENT] [-p PORT] [-o HOST] [-s HANDLER]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-h # help&#xA;-p # set the port (default is 4567)&#xA;-o # set the host (default is 0.0.0.0)&#xA;-e # set the environment (default is development)&#xA;-s # specify rack server/handler (default is puma)&#xA;-q # turn on quiet mode for server (default is off)&#xA;-x # turn on the mutex lock (default is off)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multi-threading&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Paraphrasing from &lt;a href=&#34;https://stackoverflow.com/a/6282999/5245129&#34;&gt;this StackOverflow answer&lt;/a&gt; by Konstantin&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sinatra doesn&#39;t impose any concurrency model but leaves that to the underlying Rack handler (server) like Puma or Falcon. Sinatra itself is thread-safe, so there won&#39;t be any problem if the Rack handler uses a threaded model of concurrency.&lt;/p&gt; &#xA;&lt;h2&gt;Requirement&lt;/h2&gt; &#xA;&lt;p&gt;The following Ruby versions are officially supported:&lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  Ruby&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt; &#xA;  &lt;a href=&#34;https://www.ruby-lang.org/en/downloads/&#34;&gt;The stable releases&lt;/a&gt; are fully supported and recommended. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  TruffleRuby&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   The latest stable release of TruffleRuby is supported. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  JRuby&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   The latest stable release of JRuby is supported. It is not recommended to use C extensions with JRuby. &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;p&gt;Versions of Ruby before 2.7.8 are no longer supported as of Sinatra 4.0.0.&lt;/p&gt; &#xA;&lt;p&gt;Sinatra should work on any operating system supported by the chosen Ruby implementation.&lt;/p&gt; &#xA;&lt;p&gt;Running Sinatra on a not officially supported Ruby flavor means that if things only break there we assume it&#39;s not our issue but theirs.&lt;/p&gt; &#xA;&lt;h2&gt;The Bleeding Edge&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to use Sinatra&#39;s latest bleeding-edge code, feel free to run your application against the main branch, it should be rather stable.&lt;/p&gt; &#xA;&lt;p&gt;We also push out prerelease gems from time to time, so you can do a&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install sinatra --pre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to get some of the latest features.&lt;/p&gt; &#xA;&lt;h3&gt;With Bundler&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run your application with the latest Sinatra, using &lt;a href=&#34;https://bundler.io&#34;&gt;Bundler&lt;/a&gt; is the recommended way.&lt;/p&gt; &#xA;&lt;p&gt;First, install bundler, if you haven&#39;t:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in your project directory, create a &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://rubygems.org&#39;&#xA;gem &#39;sinatra&#39;, :github =&amp;gt; &#39;sinatra/sinatra&#39;&#xA;&#xA;# other dependencies&#xA;gem &#39;haml&#39;                    # for instance, if you use haml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you will have to list all your application&#39;s dependencies in the &lt;code&gt;Gemfile&lt;/code&gt;. Sinatra&#39;s direct dependencies (Rack and Tilt) will, however, be automatically fetched and added by Bundler.&lt;/p&gt; &#xA;&lt;p&gt;Now you can run your app like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle exec ruby myapp.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra follows &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;, both SemVer and SemVerTag.&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sinatrarb.com/&#34;&gt;Project Website&lt;/a&gt; - Additional documentation, news, and links to other resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sinatrarb.com/contributing&#34;&gt;Contributing&lt;/a&gt; - Find a bug? Need help? Have a patch?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sinatra/sinatra/issues&#34;&gt;Issue tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/sinatra&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/sinatrarb&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;a href=&#34;irc://chat.freenode.net/#sinatra&#34;&gt;#sinatra&lt;/a&gt; on &lt;a href=&#34;https://freenode.net&#34;&gt;Freenode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/ncjsfsNHh7&#34;&gt;Sinatra &amp;amp; Friends&lt;/a&gt; on Discord&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sinatra/sinatra-book&#34;&gt;Sinatra Book&lt;/a&gt; - Cookbook Tutorial&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://recipes.sinatrarb.com/&#34;&gt;Sinatra Recipes&lt;/a&gt; - Community contributed recipes&lt;/li&gt; &#xA; &lt;li&gt;API documentation for the &lt;a href=&#34;https://www.rubydoc.info/gems/sinatra&#34;&gt;latest release&lt;/a&gt; or the &lt;a href=&#34;https://www.rubydoc.info/github/sinatra/sinatra&#34;&gt;current HEAD&lt;/a&gt; on &lt;a href=&#34;https://www.rubydoc.info/&#34;&gt;RubyDoc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sinatra/sinatra/actions&#34;&gt;CI Actions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>