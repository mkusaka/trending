<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-01T01:55:36Z</updated>
  <subtitle>Monthly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Freika/dawarich</title>
    <updated>2025-01-01T01:55:36Z</updated>
    <id>tag:github.com,2025-01-01:/Freika/dawarich</id>
    <link href="https://github.com/Freika/dawarich" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Self-hosted alternative to Google Location History (Google Maps Timeline)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🌍 Dawarich: Your Self-Hosted Location History Tracker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/pHsBjpt5J8&#34;&gt;&lt;img src=&#34;https://dcbadge.limes.pink/api/server/pHsBjpt5J8&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; | &lt;a href=&#34;https://ko-fi.com/H2H3IDYDD&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt; | &lt;a href=&#34;https://www.patreon.com/freika&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Dfreika%26type%3Dpatrons&amp;amp;style=for-the-badge&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt; Donate using crypto: &lt;a href=&#34;https://etherscan.io/address/0x6bAd13667692632f1bF926cA9B421bEe7EaEB8D4&#34;&gt;0x6bAd13667692632f1bF926cA9B421bEe7EaEB8D4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.circleci.com/pipelines/github/Freika/dawarich&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/Freika/dawarich.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📸 Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Freika/dawarich/master/screenshots/map.jpeg&#34; alt=&#34;Map&#34;&gt; &lt;em&gt;Map View&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Freika/dawarich/master/screenshots/stats.jpeg&#34; alt=&#34;Stats&#34;&gt; &lt;em&gt;Statistics Overview&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Freika/dawarich/master/screenshots/imports.jpeg&#34; alt=&#34;Import&#34;&gt; &lt;em&gt;Imports page&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🗺️ About Dawarich&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dawarich&lt;/strong&gt; is a self-hosted web app designed to replace Google Timeline (aka Google Location History). It enables you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visualize your data on an interactive map.&lt;/li&gt; &#xA; &lt;li&gt;Import your location history from Google Maps Timeline and Owntracks.&lt;/li&gt; &#xA; &lt;li&gt;Explore statistics like the number of countries and cities visited, total distance traveled, and more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;📄 &lt;strong&gt;Changelog&lt;/strong&gt;: Find the latest updates &lt;a href=&#34;https://raw.githubusercontent.com/Freika/dawarich/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;⚠️ Disclaimer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💔 &lt;strong&gt;DO NOT UPDATE AUTOMATICALLY&lt;/strong&gt;: Read release notes before updating. Automatic updates may break your setup.&lt;/li&gt; &#xA; &lt;li&gt;🛠️ &lt;strong&gt;Under active development&lt;/strong&gt;: Expect frequent updates, bugs, and breaking changes.&lt;/li&gt; &#xA; &lt;li&gt;❌ &lt;strong&gt;Do not delete your original data&lt;/strong&gt; after importing into Dawarich.&lt;/li&gt; &#xA; &lt;li&gt;📦 &lt;strong&gt;Backup before updates&lt;/strong&gt;: Always &lt;a href=&#34;https://dawarich.app/docs/tutorials/backup-and-restore&#34;&gt;backup your data&lt;/a&gt; before upgrading.&lt;/li&gt; &#xA; &lt;li&gt;🔄 &lt;strong&gt;Stay up-to-date&lt;/strong&gt;: Make sure you&#39;re running the latest version for the best experience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🧭 Supported Location Tracking&lt;/h2&gt; &#xA;&lt;p&gt;You can track your location with the following apps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🌍 &lt;a href=&#34;https://dawarich.app/docs/tutorials/track-your-location#overland&#34;&gt;Overland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🛰️ &lt;a href=&#34;https://dawarich.app/docs/tutorials/track-your-location#owntracks&#34;&gt;OwnTracks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🗺️ &lt;a href=&#34;https://dawarich.app/docs/tutorials/track-your-location#gps-logger&#34;&gt;GPSLogger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🏡 &lt;a href=&#34;https://dawarich.app/docs/tutorials/track-your-location#homeassistant&#34;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Simply install one of the supported apps on your device and configure it to send location updates to your Dawarich instance.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🚀 How to Start Dawarich Locally&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository.&lt;/li&gt; &#xA; &lt;li&gt;Run the following command to start the app: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Access the app at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;⏹️ &lt;strong&gt;To stop the app&lt;/strong&gt;, press &lt;code&gt;Ctrl+C&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🔧 How to Install Dawarich&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://dawarich.app/docs/intro#setup-your-dawarich-instance&#34;&gt;Docker Setup&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://dawarich.app/docs/tutorials/platforms/synology&#34;&gt;Synology&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🆕 &lt;strong&gt;Default Credentials&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Username&lt;/strong&gt;: &lt;code&gt;demo@dawarich.app&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Password&lt;/strong&gt;: &lt;code&gt;password&lt;/code&gt; (Feel free to change them in the account settings.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📊 Features&lt;/h2&gt; &#xA;&lt;h3&gt;🔍 Location Tracking&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Track your live location using one of the &lt;a href=&#34;https://raw.githubusercontent.com/Freika/dawarich/master/#-supported-location-tracking&#34;&gt;supported apps&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🗺️ Location History Visualization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View your historical data on a map with customizable layers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Heatmap&lt;/li&gt; &#xA;   &lt;li&gt;Points&lt;/li&gt; &#xA;   &lt;li&gt;Lines between points&lt;/li&gt; &#xA;   &lt;li&gt;Fog of War&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🔵 Areas&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Draw areas on the map so Dawarich could suggest your visits there.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📍 Visits (Beta)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dawarich can suggest places you&#39;ve visited and allow you to confirm or reject them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📊 Statistics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Analyze your travel history: number of countries/cities visited, distance traveled, and time spent, broken down by year and month.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📸 Integrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide credentials for Immich or Photoprism (or both!) and Dawarich will automatically import geodata from your photos.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ll also be able to visualize your photos on the map!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📥 Import Your Data&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Import from various sources: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Google Maps Timeline&lt;/li&gt; &#xA;   &lt;li&gt;OwnTracks&lt;/li&gt; &#xA;   &lt;li&gt;Strava&lt;/li&gt; &#xA;   &lt;li&gt;Immich&lt;/li&gt; &#xA;   &lt;li&gt;GPX/GeoJSON files&lt;/li&gt; &#xA;   &lt;li&gt;Photos’ EXIF data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📤 Export Your Data&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Export your data to GeoJSON or GPX formats.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📚 Guides and Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dawarich.app/docs/tutorials/reverse-proxy&#34;&gt;Set up Reverse Proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dawarich.app/docs/tutorials/import-existing-data#sources-of-data&#34;&gt;Import Google Takeout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dawarich.app/docs/tutorials/track-your-location#overland&#34;&gt;Track Location with Overland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dawarich.app/docs/tutorials/track-your-location#owntracks&#34;&gt;Track Location with OwnTracks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dawarich.app/docs/tutorials/export-your-data&#34;&gt;Export Your Data&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🛠️ More guides available in the &lt;a href=&#34;https://dawarich.app/docs/intro&#34;&gt;Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🛠️ Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;Check the documentation on the &lt;a href=&#34;https://dawarich.app/docs/environment-variables-and-settings&#34;&gt;website&lt;/a&gt; for detailed information about environment variables and settings.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;💫 Star History&lt;/h2&gt; &#xA;&lt;p&gt;As you could probably guess, I like statistics.&lt;/p&gt; &#xA;&lt;a href=&#34;https://star-history.com/#Freika/dawarich&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=Freika/dawarich&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=Freika/dawarich&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=Freika/dawarich&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>carrierwaveuploader/carrierwave</title>
    <updated>2025-01-01T01:55:36Z</updated>
    <id>tag:github.com,2025-01-01:/carrierwaveuploader/carrierwave</id>
    <link href="https://github.com/carrierwaveuploader/carrierwave" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Classier solution for file uploads for Rails, Sinatra and other Ruby web frameworks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CarrierWave&lt;/h1&gt; &#xA;&lt;p&gt;This gem provides a simple and extremely flexible way to upload files from Ruby applications. It works well with Rack based web applications, such as Ruby on Rails.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave/actions&#34;&gt;&lt;img src=&#34;https://github.com/carrierwaveuploader/carrierwave/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/carrierwaveuploader/carrierwave&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/carrierwaveuploader/carrierwave.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dependabot.com/compatibility-score.html?dependency-name=carrierwave&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34;&gt;&lt;img src=&#34;https://api.dependabot.com/badges/compatibility_score?dependency-name=carrierwave&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34; alt=&#34;SemVer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RDoc documentation &lt;a href=&#34;https://rubydoc.info/gems/carrierwave&#34;&gt;available on RubyDoc.info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Source code &lt;a href=&#34;http://github.com/carrierwaveuploader/carrierwave&#34;&gt;available on GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;More information, known limitations, and how-tos &lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave/wiki&#34;&gt;available on the wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please ask the community on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/carrierwave&#34;&gt;Stack Overflow&lt;/a&gt; for help if you have any questions. Please do not post usage questions on the issue tracker.&lt;/li&gt; &#xA; &lt;li&gt;Please report bugs on the &lt;a href=&#34;http://github.com/carrierwaveuploader/carrierwave/issues&#34;&gt;issue tracker&lt;/a&gt; but read the &#34;getting help&#34; section in the wiki first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the latest release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install carrierwave&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Rails, add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;carrierwave&#39;, &#39;~&amp;gt; 3.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, restart the server to apply the changes.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading from 2.x or earlier&lt;/h2&gt; &#xA;&lt;p&gt;CarrierWave 3.0 comes with a change in the way of handling the file extension on conversion. This results in following issues if you use &lt;code&gt;process convert: :format&lt;/code&gt; to change the file format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have it on the uploader itself (not within a version), the file extension of the cached file will change. That means if you serve both CarrierWave 2.x and 3.x simultaneously on the same workload (e.g. using blue-green deployment), a cache file stored by 2.x can&#39;t be retrieved by 3.x and vice versa.&lt;/li&gt; &#xA; &lt;li&gt;If you have it within a version, the file extension of the stored file will change. You need to perform &lt;code&gt;#recreate_versions!&lt;/code&gt; to make it usable again.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To preserve the 2.x behavior, you can set &lt;code&gt;force_extension false&lt;/code&gt; right after calling &lt;code&gt;process convert: :format&lt;/code&gt;. See &lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave/pull/2659&#34;&gt;#2659&lt;/a&gt; for the detail.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Start off by generating an uploader:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails generate uploader Avatar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this should give you a file in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;app/uploaders/avatar_uploader.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out this file for some hints on how you can customize your uploader. It should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AvatarUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  storage :file&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use your uploader class to store and retrieve files like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;uploader = AvatarUploader.new&#xA;&#xA;uploader.store!(my_file)&#xA;&#xA;uploader.retrieve_from_store!(&#39;my_file.png&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CarrierWave gives you a &lt;code&gt;store&lt;/code&gt; for permanent storage, and a &lt;code&gt;cache&lt;/code&gt; for temporary storage. You can use different stores, including filesystem and cloud storage.&lt;/p&gt; &#xA;&lt;p&gt;Most of the time you are going to want to use CarrierWave together with an ORM. It is quite simple to mount uploaders on columns in your model, so you can simply assign files and get going:&lt;/p&gt; &#xA;&lt;h3&gt;ActiveRecord&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you are loading CarrierWave after loading your ORM, otherwise you&#39;ll need to require the relevant extension manually, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;carrierwave/orm/activerecord&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a string column to the model you want to mount the uploader by creating a migration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails g migration add_avatar_to_users avatar:string&#xA;rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your model file and mount the uploader:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord&#xA;  mount_uploader :avatar, AvatarUploader&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can cache files by assigning them to the attribute, they will automatically be stored when the record is saved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;u = User.new&#xA;u.avatar = params[:file] # Assign a file like this, or&#xA;&#xA;# like this&#xA;File.open(&#39;somewhere&#39;) do |f|&#xA;  u.avatar = f&#xA;end&#xA;&#xA;u.save!&#xA;u.avatar.url # =&amp;gt; &#39;/url/to/file.png&#39;&#xA;u.avatar.current_path # =&amp;gt; &#39;path/to/file.png&#39;&#xA;u.avatar_identifier # =&amp;gt; &#39;file.png&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;u.avatar&lt;/code&gt; will never return nil, even if there is no photo associated to it. To check if a photo was saved to the model, use &lt;code&gt;u.avatar.file.nil?&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;DataMapper, Mongoid, Sequel&lt;/h3&gt; &#xA;&lt;p&gt;Other ORM support has been extracted into separate gems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave-datamapper&#34;&gt;carrierwave-datamapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave-mongoid&#34;&gt;carrierwave-mongoid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave-sequel&#34;&gt;carrierwave-sequel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are more extensions listed in &lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave/wiki&#34;&gt;the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Multiple file uploads&lt;/h2&gt; &#xA;&lt;p&gt;CarrierWave also has convenient support for multiple file upload fields.&lt;/p&gt; &#xA;&lt;h3&gt;ActiveRecord&lt;/h3&gt; &#xA;&lt;p&gt;Add a column which can store an array. This could be an array column or a JSON column for example. Your choice depends on what your database supports. For example, create a migration like this:&lt;/p&gt; &#xA;&lt;h4&gt;For databases with ActiveRecord json data type support (e.g. PostgreSQL, MySQL)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails g migration add_avatars_to_users avatars:json&#xA;rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For database without ActiveRecord json data type support (e.g. SQLite)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails g migration add_avatars_to_users avatars:string&#xA;rails db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: JSON datatype doesn&#39;t exists in SQLite adapter, that&#39;s why you can use a string datatype which will be serialized in model.&lt;/p&gt; &#xA;&lt;p&gt;Open your model file and mount the uploader:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord&#xA;  mount_uploaders :avatars, AvatarUploader&#xA;  serialize :avatars, JSON # If you use SQLite, add this line.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that you mount the uploader with write (mount_uploaders) with &lt;code&gt;s&lt;/code&gt; not (mount_uploader) in order to avoid errors when uploading multiple files&lt;/p&gt; &#xA;&lt;p&gt;Make sure your file input fields are set up as multiple file fields. For example in Rails you&#39;ll want to do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= form.file_field :avatars, multiple: true %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, make sure your upload controller permits the multiple file upload attribute, &lt;em&gt;pointing to an empty array in a hash&lt;/em&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;params.require(:user).permit(:email, :first_name, :last_name, {avatars: []})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can select multiple files in the upload dialog (e.g. SHIFT+SELECT), and they will automatically be stored when the record is saved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;u = User.new(params[:user])&#xA;u.save!&#xA;u.avatars[0].url # =&amp;gt; &#39;/url/to/file.png&#39;&#xA;u.avatars[0].current_path # =&amp;gt; &#39;path/to/file.png&#39;&#xA;u.avatars[0].identifier # =&amp;gt; &#39;file.png&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to preserve existing files on uploading new one, you can go like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;% user.avatars.each do |avatar| %&amp;gt;&#xA;  &amp;lt;%= hidden_field :user, :avatars, multiple: true, value: avatar.identifier %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&amp;lt;%= form.file_field :avatars, multiple: true %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sorting avatars is supported as well by reordering &lt;code&gt;hidden_field&lt;/code&gt;, an example using jQuery UI Sortable is available &lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave/wiki/How-to%3A-Add%2C-remove-and-reorder-images-using-multiple-file-upload&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changing the storage directory&lt;/h2&gt; &#xA;&lt;p&gt;In order to change where uploaded files are put, just override the &lt;code&gt;store_dir&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  def store_dir&#xA;    &#39;public/my/upload/directory&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This works for the file storage as well as Amazon S3 and Rackspace Cloud Files. Define &lt;code&gt;store_dir&lt;/code&gt; as &lt;code&gt;nil&lt;/code&gt; if you&#39;d like to store files at the root level.&lt;/p&gt; &#xA;&lt;p&gt;If you store files outside the project root folder, you may want to define &lt;code&gt;cache_dir&lt;/code&gt; in the same way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  def cache_dir&#xA;    &#39;/tmp/projectname-cache&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changing the filename&lt;/h2&gt; &#xA;&lt;p&gt;To change the filename of uploaded files, you can override &lt;code&gt;#filename&lt;/code&gt; method in the uploader.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  def filename&#xA;    &#34;image.#{file.extension}&#34; # If you upload &#39;file.jpg&#39;, you&#39;ll get &#39;image.jpg&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some old documentations (like &lt;a href=&#34;https://stackoverflow.com/a/5865117&#34;&gt;this&lt;/a&gt;) may instruct you to safeguard the filename value with &lt;code&gt;if original_filename&lt;/code&gt;, but it&#39;s no longer necessary with CarrierWave 3.0 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Securing uploads&lt;/h2&gt; &#xA;&lt;p&gt;Certain files might be dangerous if uploaded to the wrong location, such as PHP files or other script files. CarrierWave allows you to specify an allowlist of allowed extensions or content types.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re mounting the uploader, uploading a file with the wrong extension will make the record invalid instead. Otherwise, an error is raised.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  def extension_allowlist&#xA;    %w(jpg jpeg gif png)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same thing could be done using content types. Let&#39;s say we need an uploader that accepts only images. This can be done like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  def content_type_allowlist&#xA;    /image\//&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use a denylist to reject content types. Let&#39;s say we need an uploader that reject JSON files. This can be done like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class NoJsonUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  def content_type_denylist&#xA;    [&#39;application/text&#39;, &#39;application/json&#39;]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CVE-2016-3714 (ImageTragick)&lt;/h3&gt; &#xA;&lt;p&gt;This version of CarrierWave has the ability to mitigate CVE-2016-3714. However, you &lt;strong&gt;MUST&lt;/strong&gt; set a content_type_allowlist in your uploaders for this protection to be effective, and you &lt;strong&gt;MUST&lt;/strong&gt; either disable ImageMagick&#39;s default SVG delegate or use the RSVG delegate for SVG processing.&lt;/p&gt; &#xA;&lt;p&gt;A valid allowlist that will restrict your uploader to images only, and mitigate the CVE is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  def content_type_allowlist&#xA;    [/image\//]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: A &lt;code&gt;content_type_allowlist&lt;/code&gt; is the only form of allowlist or denylist supported by CarrierWave that can effectively mitigate against CVE-2016-3714. Use of &lt;code&gt;extension_allowlist&lt;/code&gt; will not inspect the file headers, and thus still leaves your application open to the vulnerability.&lt;/p&gt; &#xA;&lt;h3&gt;Filenames and unicode chars&lt;/h3&gt; &#xA;&lt;p&gt;Another security issue you should care for is the file names (see &lt;a href=&#34;http://guides.rubyonrails.org/security.html#file-uploads&#34;&gt;Ruby On Rails Security Guide&lt;/a&gt;). By default, CarrierWave provides only English letters, arabic numerals and some symbols as allowlisted characters in the file name. If you want to support local scripts (Cyrillic letters, letters with diacritics and so on), you have to override &lt;code&gt;sanitize_regexp&lt;/code&gt; method. It should return regular expression which would match all &lt;em&gt;non&lt;/em&gt;-allowed symbols.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CarrierWave::SanitizedFile.sanitize_regexp = /[^[:word:]\.\-\+]/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also make sure that allowing non-latin characters won&#39;t cause a compatibility issue with a third-party plugins or client-side software.&lt;/p&gt; &#xA;&lt;h2&gt;Setting the content type&lt;/h2&gt; &#xA;&lt;p&gt;As of v0.11.0, the &lt;code&gt;mime-types&lt;/code&gt; gem is a runtime dependency and the content type is set automatically. You no longer need to do this manually.&lt;/p&gt; &#xA;&lt;h2&gt;Adding versions&lt;/h2&gt; &#xA;&lt;p&gt;Often you&#39;ll want to add different versions of the same file. The classic example is generating image thumbnails while preserving the original file to be used for high-quality representation. In this section we&#39;ll explore how CarrierWave supports working with multiple versions. The image manipulation itself is covered in &lt;a href=&#34;https://raw.githubusercontent.com/carrierwaveuploader/carrierwave/master/#manipulating-images&#34;&gt;another section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  include CarrierWave::MiniMagick&#xA;&#xA;  process resize_to_fit: [800, 800]&#xA;&#xA;  version :thumb do&#xA;    process resize_to_fill: [200,200]&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this uploader is used, an uploaded image would be scaled to be no larger than 800 by 800 pixels. The original aspect ratio will be kept.&lt;/p&gt; &#xA;&lt;p&gt;A version called &lt;code&gt;:thumb&lt;/code&gt; is then created, which is scaled to exactly 200 by 200 pixels. The thumbnail uses &lt;code&gt;resize_to_fill&lt;/code&gt; which makes sure that the width and height specified are filled, only cropping if the aspect ratio requires it.&lt;/p&gt; &#xA;&lt;p&gt;The above uploader could be used like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;uploader = AvatarUploader.new&#xA;uploader.store!(my_file)                              # size: 1024x768&#xA;&#xA;uploader.url # =&amp;gt; &#39;/url/to/my_file.png&#39;               # size: 800x800&#xA;uploader.thumb.url # =&amp;gt; &#39;/url/to/thumb_my_file.png&#39;   # size: 200x200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One important thing to remember is that process is called &lt;em&gt;before&lt;/em&gt; versions are created. This can cut down on processing cost.&lt;/p&gt; &#xA;&lt;h3&gt;Conditional processing&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use conditional process, you can only use &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;carrierwave/uploader/processing.rb&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  process :scale =&amp;gt; [200, 200], :if =&amp;gt; :image?&#xA;  &#xA;  def image?(carrier_wave_sanitized_file)&#xA;    true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nested versions&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to nest versions within versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;&#xA;  version :animal do&#xA;    version :human&#xA;    version :monkey&#xA;    version :llama&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional versions&lt;/h3&gt; &#xA;&lt;p&gt;Occasionally you want to restrict the creation of versions on certain properties within the model or based on the picture itself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;&#xA;  version :human, if: :is_human?&#xA;  version :monkey, if: :is_monkey?&#xA;  version :banner, if: :is_landscape?&#xA;&#xA;private&#xA;&#xA;  def is_human? picture&#xA;    model.can_program?(:ruby)&#xA;  end&#xA;&#xA;  def is_monkey? picture&#xA;    model.favorite_food == &#39;banana&#39;&#xA;  end&#xA;&#xA;  def is_landscape? picture&#xA;    image = MiniMagick::Image.new(picture.path)&#xA;    image[:width] &amp;gt; image[:height]&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;model&lt;/code&gt; variable points to the instance object the uploader is attached to.&lt;/p&gt; &#xA;&lt;h3&gt;Create versions from existing versions&lt;/h3&gt; &#xA;&lt;p&gt;For performance reasons, it is often useful to create versions from existing ones instead of using the original file. If your uploader generates several versions where the next is smaller than the last, it will take less time to generate from a smaller, already processed image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;&#xA;  version :thumb do&#xA;    process resize_to_fill: [280, 280]&#xA;  end&#xA;&#xA;  version :small_thumb, from_version: :thumb do&#xA;    process resize_to_fill: [20, 20]&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing version filenames&lt;/h3&gt; &#xA;&lt;p&gt;CarrierWave supports &lt;a href=&#34;https://raw.githubusercontent.com/carrierwaveuploader/carrierwave/master/#changing-the-filename&#34;&gt;customization of filename&lt;/a&gt; by overriding an uploader&#39;s #filename method, but this doesn&#39;t work for versions because of the limitation on how CarrierWave re-constructs the filename on retrieval of the stored file. Instead, you can override &lt;code&gt;#full_filename&lt;/code&gt; with providing a version-aware name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  version :thumb do&#xA;    def full_filename(for_file)&#xA;      &#39;thumb.png&#39;&#xA;    end&#xA;    process convert: &#39;png&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that &lt;code&gt;#full_filename&lt;/code&gt; mustn&#39;t be constructed based on a dynamic value that can change from the time of store and time of retrieval, since it will result in being unable to retrieve a file previously stored.&lt;/p&gt; &#xA;&lt;h2&gt;Making uploads work across form redisplays&lt;/h2&gt; &#xA;&lt;p&gt;Often you&#39;ll notice that uploaded files disappear when a validation fails. CarrierWave has a feature that makes it easy to remember the uploaded file even in that case. Suppose your &lt;code&gt;user&lt;/code&gt; model has an uploader mounted on &lt;code&gt;avatar&lt;/code&gt; file, just add a hidden field called &lt;code&gt;avatar_cache&lt;/code&gt; (don&#39;t forget to add it to the attr_accessible list as necessary). In Rails, this would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= form_for @user, html: { multipart: true } do |f| %&amp;gt;&#xA;  &amp;lt;p&amp;gt;&#xA;    &amp;lt;label&amp;gt;My Avatar&amp;lt;/label&amp;gt;&#xA;    &amp;lt;%= f.file_field :avatar %&amp;gt;&#xA;    &amp;lt;%= f.hidden_field :avatar_cache %&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It might be a good idea to show the user that a file has been uploaded, in the case of images, a small thumbnail would be a good indicator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= form_for @user, html: { multipart: true } do |f| %&amp;gt;&#xA;  &amp;lt;p&amp;gt;&#xA;    &amp;lt;label&amp;gt;My Avatar&amp;lt;/label&amp;gt;&#xA;    &amp;lt;%= image_tag(@user.avatar_url) if @user.avatar? %&amp;gt;&#xA;    &amp;lt;%= f.file_field :avatar %&amp;gt;&#xA;    &amp;lt;%= f.hidden_field :avatar_cache %&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Removing uploaded files&lt;/h2&gt; &#xA;&lt;p&gt;If you want to remove a previously uploaded file on a mounted uploader, you can easily add a checkbox to the form which will remove the file when checked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= form_for @user, html: { multipart: true } do |f| %&amp;gt;&#xA;  &amp;lt;p&amp;gt;&#xA;    &amp;lt;label&amp;gt;My Avatar&amp;lt;/label&amp;gt;&#xA;    &amp;lt;%= image_tag(@user.avatar_url) if @user.avatar? %&amp;gt;&#xA;    &amp;lt;%= f.file_field :avatar %&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;&#xA;  &amp;lt;p&amp;gt;&#xA;    &amp;lt;label&amp;gt;&#xA;      &amp;lt;%= f.check_box :remove_avatar %&amp;gt;&#xA;      Remove avatar&#xA;    &amp;lt;/label&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to remove the file manually, you can call &lt;code&gt;remove_avatar!&lt;/code&gt;, then save the object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;@user.remove_avatar!&#xA;@user.save&#xA;#=&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Uploading files from a remote location&lt;/h2&gt; &#xA;&lt;p&gt;Your users may find it convenient to upload a file from a location on the Internet via a URL. CarrierWave makes this simple, just add the appropriate attribute to your form and you&#39;re good to go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= form_for @user, html: { multipart: true } do |f| %&amp;gt;&#xA;  &amp;lt;p&amp;gt;&#xA;    &amp;lt;label&amp;gt;My Avatar URL:&amp;lt;/label&amp;gt;&#xA;    &amp;lt;%= image_tag(@user.avatar_url) if @user.avatar? %&amp;gt;&#xA;    &amp;lt;%= f.text_field :remote_avatar_url %&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using ActiveRecord, CarrierWave will indicate invalid URLs and download failures automatically with attribute validation errors. If you aren&#39;t, or you disable CarrierWave&#39;s &lt;code&gt;validate_download&lt;/code&gt; option, you&#39;ll need to handle those errors yourself.&lt;/p&gt; &#xA;&lt;h3&gt;Retry option for download from remote location&lt;/h3&gt; &#xA;&lt;p&gt;If you want to retry the download from the Remote URL, enable the download_retry_count option, an error occurs during download, it will try to execute the specified number of times. This option is effective when the remote destination is unstable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;CarrierWave.configure do |config|&#xA;  config.download_retry_count = 3 # Default 0&#xA;  config.download_retry_wait_time = 3 # Default 5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Providing a default URL&lt;/h2&gt; &#xA;&lt;p&gt;In many cases, especially when working with images, it might be a good idea to provide a default url, a fallback in case no file has been uploaded. You can do this easily by overriding the &lt;code&gt;default_url&lt;/code&gt; method in your uploader:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  def default_url(*args)&#xA;    &#34;/images/fallback/&#34; + [version_name, &#34;default.png&#34;].compact.join(&#39;_&#39;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are using the Rails asset pipeline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  def default_url(*args)&#xA;    ActionController::Base.helpers.asset_path(&#34;fallback/&#34; + [version_name, &#34;default.png&#34;].compact.join(&#39;_&#39;))&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recreating versions&lt;/h2&gt; &#xA;&lt;p&gt;You might come to a situation where you want to retroactively change a version or add a new one. You can use the &lt;code&gt;recreate_versions!&lt;/code&gt; method to recreate the versions from the base file. This uses a naive approach which will re-upload and process the specified version or all versions, if none is passed as an argument.&lt;/p&gt; &#xA;&lt;p&gt;When you are generating random unique filenames you have to call &lt;code&gt;save!&lt;/code&gt; on the model after using &lt;code&gt;recreate_versions!&lt;/code&gt;. This is necessary because &lt;code&gt;recreate_versions!&lt;/code&gt; doesn&#39;t save the new filename to the database. Calling &lt;code&gt;save!&lt;/code&gt; yourself will prevent that the database and file system are running out of sync.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;instance = MyUploader.new&#xA;instance.recreate_versions!(:thumb, :large)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or on a mounted uploader:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.find_each do |user|&#xA;  user.avatar.recreate_versions!&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;recreate_versions!&lt;/code&gt; will throw an exception on records without an image. To avoid this, scope the records to those with images or check if an image exists within the block. If you&#39;re using ActiveRecord, recreating versions for a user avatar might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.find_each do |user|&#xA;  user.avatar.recreate_versions! if user.avatar?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuring CarrierWave&lt;/h2&gt; &#xA;&lt;p&gt;CarrierWave has a broad range of configuration options, which you can configure, both globally and on a per-uploader basis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CarrierWave.configure do |config|&#xA;  config.permissions = 0666&#xA;  config.directory_permissions = 0777&#xA;  config.storage = :file&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or alternatively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AvatarUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  permissions 0777&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using Rails, create an initializer for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;config/initializers/carrierwave.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want CarrierWave to fail noisily in development, you can change these configs in your environment file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CarrierWave.configure do |config|&#xA;  config.ignore_integrity_errors = false&#xA;  config.ignore_processing_errors = false&#xA;  config.ignore_download_errors = false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing with CarrierWave&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s a good idea to test your uploaders in isolation. In order to speed up your tests, it&#39;s recommended to switch off processing in your tests, and to use the file storage. Also, you can disable SSRF protection at your own risk using the &lt;code&gt;skip_ssrf_protection&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;p&gt;In Rails you could do that by adding an initializer with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if Rails.env.test? or Rails.env.cucumber?&#xA;  CarrierWave.configure do |config|&#xA;    config.storage = :file&#xA;    config.enable_processing = false&#xA;    config.skip_ssrf_protection = true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember, if you have already set &lt;code&gt;storage :something&lt;/code&gt; in your uploader, the &lt;code&gt;storage&lt;/code&gt; setting from this initializer will be ignored.&lt;/p&gt; &#xA;&lt;p&gt;If you need to test your processing, you should test it in isolation, and enable processing only for those tests that need it.&lt;/p&gt; &#xA;&lt;p&gt;CarrierWave comes with some RSpec matchers which you may find useful:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;carrierwave/test/matchers&#39;&#xA;&#xA;describe MyUploader do&#xA;  include CarrierWave::Test::Matchers&#xA;&#xA;  let(:user) { double(&#39;user&#39;) }&#xA;  let(:uploader) { MyUploader.new(user, :avatar) }&#xA;&#xA;  before do&#xA;    MyUploader.enable_processing = true&#xA;    File.open(path_to_file) { |f| uploader.store!(f) }&#xA;  end&#xA;&#xA;  after do&#xA;    MyUploader.enable_processing = false&#xA;    uploader.remove!&#xA;  end&#xA;&#xA;  context &#39;the thumb version&#39; do&#xA;    it &#34;scales down a landscape image to be exactly 64 by 64 pixels&#34; do&#xA;      expect(uploader.thumb).to have_dimensions(64, 64)&#xA;    end&#xA;  end&#xA;&#xA;  context &#39;the small version&#39; do&#xA;    it &#34;scales down a landscape image to fit within 200 by 200 pixels&#34; do&#xA;      expect(uploader.small).to be_no_larger_than(200, 200)&#xA;    end&#xA;  end&#xA;&#xA;  it &#34;makes the image readable only to the owner and not executable&#34; do&#xA;    expect(uploader).to have_permissions(0600)&#xA;  end&#xA;&#xA;  it &#34;has the correct format&#34; do&#xA;    expect(uploader).to be_format(&#39;png&#39;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re looking for minitest asserts, checkout &lt;a href=&#34;https://github.com/hcfairbanks/carrierwave_asserts&#34;&gt;carrierwave_asserts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Setting the enable_processing flag on an uploader will prevent any of the versions from processing as well. Processing can be enabled for a single version by setting the processing flag on the version like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@uploader.thumb.enable_processing = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fog&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use fog you must add in your CarrierWave initializer the following lines&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.fog_credentials = { ... } # Provider specific credentials&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Amazon S3&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://github.com/fog/fog-aws&#34;&gt;Fog AWS&lt;/a&gt; is used to support Amazon S3. Ensure you have it in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;fog-aws&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll need to provide your fog_credentials and a fog_directory (also known as a bucket) in an initializer. For the sake of performance it is assumed that the directory already exists, so please create it if it needs to be. You can also pass in additional options, as documented fully in lib/carrierwave/storage/fog.rb. Here&#39;s a full example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CarrierWave.configure do |config|&#xA;  config.fog_credentials = {&#xA;    provider:              &#39;AWS&#39;,                        # required&#xA;    aws_access_key_id:     &#39;xxx&#39;,                        # required unless using use_iam_profile&#xA;    aws_secret_access_key: &#39;yyy&#39;,                        # required unless using use_iam_profile&#xA;    use_iam_profile:       true,                         # optional, defaults to false&#xA;    region:                &#39;eu-west-1&#39;,                  # optional, defaults to &#39;us-east-1&#39;&#xA;    host:                  &#39;s3.example.com&#39;,             # optional, defaults to nil&#xA;    endpoint:              &#39;https://s3.example.com:8080&#39; # optional, defaults to nil&#xA;  }&#xA;  config.fog_directory  = &#39;name_of_bucket&#39;                                      # required&#xA;  config.fog_public     = false                                                 # optional, defaults to true&#xA;  config.fog_attributes = { cache_control: &#34;public, max-age=#{365.days.to_i}&#34; } # optional, defaults to {}&#xA;  # Use this if you have AWS S3 ACLs disabled.&#xA;  # config.fog_attributes = { &#39;x-amz-acl&#39; =&amp;gt; &#39;bucket-owner-full-control&#39; }&#xA;  # Use this if you have Google Cloud Storage uniform bucket-level access enabled.&#xA;  # config.fog_attributes = { uniform: true }&#xA;  # For an application which utilizes multiple servers but does not need caches persisted across requests,&#xA;  # uncomment the line :file instead of the default :storage.  Otherwise, it will use AWS as the temp cache store.&#xA;  # config.cache_storage = :file&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your uploader, set the storage to :fog&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AvatarUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  storage :fog&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! You can still use the &lt;code&gt;CarrierWave::Uploader#url&lt;/code&gt; method to return the url to the file on Amazon S3.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: for Carrierwave to work properly it needs credentials with the following permissions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;s3:ListBucket&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s3:PutObject&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s3:GetObject&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s3:DeleteObject&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s3:PutObjectAcl&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Rackspace Cloud Files&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://github.com/fog/fog&#34;&gt;Fog&lt;/a&gt; is used to support Rackspace Cloud Files. Ensure you have it in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;fog&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll need to configure a directory (also known as a container), username and API key in the initializer. For the sake of performance it is assumed that the directory already exists, so please create it if needs to be.&lt;/p&gt; &#xA;&lt;p&gt;Using a US-based account:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CarrierWave.configure do |config|&#xA;  config.fog_credentials = {&#xA;    provider:           &#39;Rackspace&#39;,&#xA;    rackspace_username: &#39;xxxxxx&#39;,&#xA;    rackspace_api_key:  &#39;yyyyyy&#39;,&#xA;    rackspace_region:   :ord                      # optional, defaults to :dfw&#xA;  }&#xA;  config.fog_directory = &#39;name_of_directory&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using a UK-based account:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CarrierWave.configure do |config|&#xA;  config.fog_credentials = {&#xA;    provider:           &#39;Rackspace&#39;,&#xA;    rackspace_username: &#39;xxxxxx&#39;,&#xA;    rackspace_api_key:  &#39;yyyyyy&#39;,&#xA;    rackspace_auth_url: Fog::Rackspace::UK_AUTH_ENDPOINT,&#xA;    rackspace_region:   :lon&#xA;  }&#xA;  config.fog_directory = &#39;name_of_directory&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally include your CDN host name in the configuration. This is &lt;em&gt;highly&lt;/em&gt; recommended, as without it every request requires a lookup of this information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.asset_host = &#34;http://c000000.cdn.rackspacecloud.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your uploader, set the storage to :fog&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AvatarUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  storage :fog&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! You can still use the &lt;code&gt;CarrierWave::Uploader#url&lt;/code&gt; method to return the url to the file on Rackspace Cloud Files.&lt;/p&gt; &#xA;&lt;h2&gt;Using Google Cloud Storage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://github.com/fog/fog-google&#34;&gt;Fog&lt;/a&gt; is used to support Google Cloud Storage. Ensure you have it in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;fog-google&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll need to configure a directory (also known as a bucket) and the credentials in the initializer. For the sake of performance it is assumed that the directory already exists, so please create it if needs to be.&lt;/p&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://github.com/fog/fog-google/raw/master/README.md&#34;&gt;fog-google README&lt;/a&gt; on how to get credentials.&lt;/p&gt; &#xA;&lt;p&gt;For Google Storage JSON API (recommended):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CarrierWave.configure do |config|&#xA;    config.fog_credentials = {&#xA;        provider:               &#39;Google&#39;,&#xA;        google_project:         &#39;my-project&#39;,&#xA;        google_json_key_string: &#39;xxxxxx&#39;&#xA;        # or use google_json_key_location if using an actual file&#xA;    }&#xA;    config.fog_directory = &#39;google_cloud_storage_bucket_name&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Google Storage XML API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CarrierWave.configure do |config|&#xA;    config.fog_credentials = {&#xA;        provider:                         &#39;Google&#39;,&#xA;        google_storage_access_key_id:     &#39;xxxxxx&#39;,&#xA;        google_storage_secret_access_key: &#39;yyyyyy&#39;&#xA;    }&#xA;    config.fog_directory = &#39;google_cloud_storage_bucket_name&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your uploader, set the storage to :fog&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AvatarUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  storage :fog&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! You can still use the &lt;code&gt;CarrierWave::Uploader#url&lt;/code&gt; method to return the url to the file on Google.&lt;/p&gt; &#xA;&lt;h2&gt;Optimized Loading of Fog&lt;/h2&gt; &#xA;&lt;p&gt;Since Carrierwave doesn&#39;t know which parts of Fog you intend to use, it will just load the entire library (unless you use e.g. [&lt;code&gt;fog-aws&lt;/code&gt;, &lt;code&gt;fog-google&lt;/code&gt;] instead of fog proper). If you prefer to load fewer classes into your application, you need to load those parts of Fog yourself &lt;em&gt;before&lt;/em&gt; loading CarrierWave in your Gemfile. Ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;fog&#34;, &#34;~&amp;gt; 1.27&#34;, require: &#34;fog/rackspace/storage&#34;&#xA;gem &#34;carrierwave&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A couple of notes about versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This functionality was introduced in Fog v1.20.&lt;/li&gt; &#xA; &lt;li&gt;This functionality is slated for CarrierWave v1.0.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re not relying on Gemfile entries alone and are requiring &#34;carrierwave&#34; anywhere, ensure you require &#34;fog/rackspace/storage&#34; before it. Ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;fog/rackspace/storage&#34;&#xA;require &#34;carrierwave&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Beware that this specific require is only needed when working with a fog provider that was not extracted to its own gem yet. A list of the extracted providers can be found in the page of the &lt;code&gt;fog&lt;/code&gt; organizations &lt;a href=&#34;https://github.com/fog&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When in doubt, inspect &lt;code&gt;Fog.constants&lt;/code&gt; to see what has been loaded.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic Asset Host&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;asset_host&lt;/code&gt; config property can be assigned a proc (or anything that responds to &lt;code&gt;call&lt;/code&gt;) for generating the host dynamically. The proc-compliant object gets an instance of the current &lt;code&gt;CarrierWave::Storage::Fog::File&lt;/code&gt; or &lt;code&gt;CarrierWave::SanitizedFile&lt;/code&gt; as its only argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CarrierWave.configure do |config|&#xA;  config.asset_host = proc do |file|&#xA;    identifier = # some logic&#xA;    &#34;http://#{identifier}.cdn.rackspacecloud.com&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manipulating images&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re uploading images, you&#39;ll probably want to manipulate them in some way, you might want to create thumbnail images for example.&lt;/p&gt; &#xA;&lt;h3&gt;Using MiniMagick&lt;/h3&gt; &#xA;&lt;p&gt;MiniMagick performs all the operations using the &#39;convert&#39; CLI which is part of the standard ImageMagick kit. This allows you to have the power of ImageMagick without having to worry about installing all the RMagick libraries, it often results in higher memory footprint.&lt;/p&gt; &#xA;&lt;p&gt;See the MiniMagick site for more details:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/minimagick/minimagick&#34;&gt;https://github.com/minimagick/minimagick&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To install Imagemagick on OSX with homebrew type the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install imagemagick&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the ImageMagick command line options for more for what&#39;s on offer:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.imagemagick.org/script/command-line-options.php&#34;&gt;http://www.imagemagick.org/script/command-line-options.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently, the MiniMagick carrierwave processor provides exactly the same methods as for the RMagick processor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AvatarUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  include CarrierWave::MiniMagick&#xA;&#xA;  process resize_to_fill: [200, 200]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;carrierwave/processing/mini_magick.rb&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Using RMagick&lt;/h3&gt; &#xA;&lt;p&gt;CarrierWave also comes with support for RMagick, a well-known image processing library. To use it, you&#39;ll need to include this in your Uploader:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AvatarUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  include CarrierWave::RMagick&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The RMagick module gives you a few methods, like &lt;code&gt;CarrierWave::RMagick#resize_to_fill&lt;/code&gt; which manipulate the image file in some way. You can set a &lt;code&gt;process&lt;/code&gt; callback, which will call that method any time a file is uploaded. There is a demonstration of convert here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AvatarUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  include CarrierWave::RMagick&#xA;&#xA;  process resize_to_fill: [200, 200]&#xA;  process convert: &#39;png&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the manipulate! method, which makes it easy for you to write your own manipulation methods.&lt;/p&gt; &#xA;&lt;h3&gt;Using Vips&lt;/h3&gt; &#xA;&lt;p&gt;CarrierWave version 2.2.0 added support for the &lt;code&gt;libvips&lt;/code&gt; image processing library, through &lt;a href=&#34;https://github.com/janko/image_processing/raw/master/doc/vips.md&#34;&gt;ImageProcessing::Vips&lt;/a&gt;. Its functionality matches that of the RMagick and MiniMagick processors, but it uses less memory and offers &lt;a href=&#34;https://github.com/libvips/libvips/wiki/Speed-and-memory-use&#34;&gt;faster processing&lt;/a&gt;. To use the Vips processing module you must first install &lt;code&gt;libvips&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt install libvips&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to tell your uploader to use Vips:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ImageFileUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  include CarrierWave::Vips&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List of available processing methods:&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] While the intention is to provide uniform interfaces to all three processing libraries the availability and implementation of processing methods can &lt;a href=&#34;https://raw.githubusercontent.com/carrierwaveuploader/carrierwave/master/supported-processing-methods&#34;&gt;vary slightly between them&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;convert&lt;/code&gt; - Changes the image encoding format to the given format (eg. jpg). This operation is treated specially to trigger the change of the file extension, so it matches with the format of the resulting file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resize_to_limit&lt;/code&gt; - Resize the image to fit within the specified dimensions while retaining the original aspect ratio. Will only resize the image if it is larger than the specified dimensions. The resulting image may be shorter or narrower than specified in the smaller dimension but will not be larger than the specified values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resize_to_fit&lt;/code&gt; - Resize the image to fit within the specified dimensions while retaining the original aspect ratio. The image may be shorter or narrower than specified in the smaller dimension but will not be larger than the specified values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resize_to_fill&lt;/code&gt; - Resize the image to fit within the specified dimensions while retaining the aspect ratio of the original image. If necessary, crop the image in the larger dimension. Optionally, a &#34;gravity&#34; may be specified, for example &#34;Center&#34;, or &#34;NorthEast&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resize_and_pad&lt;/code&gt; - Resize the image to fit within the specified dimensions while retaining the original aspect ratio. If necessary, will pad the remaining area with the given color, which defaults to transparent (for gif and png, white for jpeg). Optionally, a &#34;gravity&#34; may be specified, as above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;crop&lt;/code&gt; - Crop the image to the contents of a box with the specified height and width, positioned a given number of pixels from the top and left. The original image edge will be retained should the bottom and/or right edge of the box fall outside the image bounds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Supported processing methods&lt;/h4&gt; &#xA;&lt;p&gt;The following table shows which processing methods are supported by each processing library, and which parameters they accept:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;RMagick&lt;/th&gt; &#xA;   &lt;th&gt;MiniMagick&lt;/th&gt; &#xA;   &lt;th&gt;Vips&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;convert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;format&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;format&lt;/code&gt;, &lt;code&gt;page&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;format&lt;/code&gt;, &lt;code&gt;page&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resize_to_limit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resize_to_fit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resize_to_fill&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;gravity&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;gravity&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resize_and_pad&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;background&lt;/code&gt;, &lt;code&gt;gravity&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;background&lt;/code&gt;, &lt;code&gt;gravity&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;background&lt;/code&gt;, &lt;code&gt;gravity&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resize_to_geometry_string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;geometry_string&lt;/code&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not implemented&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;not implemented&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;crop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;left&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;left&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;left&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;code&gt;page&lt;/code&gt; refers to the page number when converting from PDF, frame number when converting from GIF, and layer number when converting from PSD.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;code&gt;gravity&lt;/code&gt; refers to an image position given as one of &lt;code&gt;Center&lt;/code&gt;, &lt;code&gt;North&lt;/code&gt;, &lt;code&gt;NorthWest&lt;/code&gt;, &lt;code&gt;West&lt;/code&gt;, &lt;code&gt;SouthWest&lt;/code&gt;, &lt;code&gt;South&lt;/code&gt;, &lt;code&gt;SouthEast&lt;/code&gt;, &lt;code&gt;East&lt;/code&gt;, or &lt;code&gt;NorthEast&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;code&gt;geometry_string&lt;/code&gt; is an &lt;a href=&#34;https://rmagick.github.io/imusage.html#geometry&#34;&gt;ImageMagick geometry string&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migrating from Paperclip&lt;/h2&gt; &#xA;&lt;p&gt;If you are using Paperclip, you can use the provided compatibility module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AvatarUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  include CarrierWave::Compatibility::Paperclip&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the documentation for &lt;code&gt;CarrierWave::Compatibility::Paperclip&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to use mount_on to specify the correct column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mount_uploader :avatar, AvatarUploader, mount_on: :avatar_file_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;I18n&lt;/h2&gt; &#xA;&lt;p&gt;The Active Record validations use the Rails &lt;code&gt;i18n&lt;/code&gt; framework. Add these keys to your translations file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;errors:&#xA;  messages:&#xA;    carrierwave_processing_error: failed to be processed&#xA;    carrierwave_integrity_error: is not of an allowed file type&#xA;    carrierwave_download_error: could not be downloaded&#xA;    extension_allowlist_error: &#34;You are not allowed to upload %{extension} files, allowed types: %{allowed_types}&#34;&#xA;    extension_denylist_error: &#34;You are not allowed to upload %{extension} files, prohibited types: %{prohibited_types}&#34;&#xA;    content_type_allowlist_error: &#34;You are not allowed to upload %{content_type} files, allowed types: %{allowed_types}&#34;&#xA;    content_type_denylist_error: &#34;You are not allowed to upload %{content_type} files&#34;&#xA;    processing_error: &#34;Failed to manipulate, maybe it is not an image?&#34;&#xA;    min_size_error: &#34;File size should be greater than %{min_size}&#34;&#xA;    max_size_error: &#34;File size should be less than %{max_size}&#34;&#xA;    min_width_error: &#34;Image width should be greater than %{min_width}px&#34;&#xA;    max_width_error: &#34;Image width should be less than %{max_width}px&#34;&#xA;    min_height_error: &#34;Image height should be greater than %{min_height}px&#34;&#xA;    max_height_error: &#34;Image height should be less than %{max_height}px&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave-i18n&#34;&gt;&lt;code&gt;carrierwave-i18n&lt;/code&gt;&lt;/a&gt; library adds support for additional locales.&lt;/p&gt; &#xA;&lt;h2&gt;Large files&lt;/h2&gt; &#xA;&lt;p&gt;By default, CarrierWave copies an uploaded file twice, first copying the file into the cache, then copying the file into the store. For large files, this can be prohibitively time consuming.&lt;/p&gt; &#xA;&lt;p&gt;You may change this behavior by overriding either or both of the &lt;code&gt;move_to_cache&lt;/code&gt; and &lt;code&gt;move_to_store&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; CarrierWave::Uploader::Base&#xA;  def move_to_cache&#xA;    true&#xA;  end&#xA;&#xA;  def move_to_store&#xA;    true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the &lt;code&gt;move_to_cache&lt;/code&gt; and/or &lt;code&gt;move_to_store&lt;/code&gt; methods return true, files will be moved (instead of copied) to the cache and store respectively.&lt;/p&gt; &#xA;&lt;p&gt;This has only been tested with the local filesystem store.&lt;/p&gt; &#xA;&lt;h2&gt;Skipping ActiveRecord callbacks&lt;/h2&gt; &#xA;&lt;p&gt;By default, mounting an uploader into an ActiveRecord model will add a few callbacks. For example, this code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  mount_uploader :avatar, AvatarUploader&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will add these callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before_save :write_avatar_identifier&#xA;after_save :store_previous_changes_for_avatar&#xA;after_commit :remove_avatar!, on: :destroy&#xA;after_commit :mark_remove_avatar_false, on: :update&#xA;after_commit :remove_previously_stored_avatar, on: :update&#xA;after_commit :store_avatar!, on: [:create, :update]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to skip any of these callbacks (eg. you want to keep the existing avatar, even after uploading a new one), you can use ActiveRecord’s &lt;code&gt;skip_callback&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  mount_uploader :avatar, AvatarUploader&#xA;  skip_callback :commit, :after, :remove_previously_stored_avatar&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Uploader Callbacks&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the ActiveRecord callbacks described above, uploaders also have callbacks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyUploader &amp;lt; ::CarrierWave::Uploader::Base&#xA;  before :remove, :log_removal&#xA;  private&#xA;  def log_removal&#xA;    ::Rails.logger.info(format(&#39;Deleting file on S3: %s&#39;, @file))&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uploader callbacks can be &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;after&lt;/code&gt; the following events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cache&#xA;process&#xA;remove&#xA;retrieve_from_cache&#xA;retrieve_from_store&#xA;store&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing to CarrierWave&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2008 Jonas Nicklas&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>freeCodeCamp/how-to-contribute-to-open-source</title>
    <updated>2025-01-01T01:55:36Z</updated>
    <id>tag:github.com,2025-01-01:/freeCodeCamp/how-to-contribute-to-open-source</id>
    <link href="https://github.com/freeCodeCamp/how-to-contribute-to-open-source" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A guide to contributing to open source&lt;/p&gt;&lt;hr&gt;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; Read this guide in other languages &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README.md&#34;&gt; English &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-MR.md&#34;&gt; मराठी &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-BN.md&#34;&gt; বাংলা &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-CN.md&#34;&gt; 中文 &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-RU.md&#34;&gt; русский &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-RO.md&#34;&gt; Românesc &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-IT.md&#34;&gt; Italiano &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-ID.md&#34;&gt; Indonesia &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-ES.md&#34;&gt; Español &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-pt-BR.md&#34;&gt; Português (BR) &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-DE.md&#34;&gt; Deutsch &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-HE.md&#34;&gt; עברית &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-GR.md&#34;&gt; Ελληνικά &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-FR.md&#34;&gt; Français &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-TR.md&#34;&gt; Turkish &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-KO.md&#34;&gt; 한국어 &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-JA.md&#34;&gt; 日本語 &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-UZ.md&#34;&gt; O&#39;zbek&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-HI.md&#34;&gt; हिंदी &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-FA.md&#34;&gt; فارسی &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-UR.md&#34;&gt;اردو &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-AR.md&#34;&gt;اللغة العربية &lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-TA.md&#34;&gt;தமிழ்&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-NE.md&#34;&gt;नेपाली&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/README-ML.md&#34;&gt;മലയാളം&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- Do not translate this --&gt; &#xA;&lt;h1&gt;Welcome Newbie Open Source Contributors!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&#34; alt=&#34;Pull Requests Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.firsttimersonly.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/first--timers--only-friendly-blue.svg?sanitize=true&#34; alt=&#34;first-timers-only Friendly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/freeCodeCamp/how-to-contribute-to-open-source/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/freeCodeCamp/how-to-contribute-to-open-source/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Check Resources&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a list of resources for people who are new to contributing to Open Source.&lt;/p&gt; &#xA;&lt;p&gt;If you find additional resources, please create a pull request.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions or comments, please create an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/#contributing-to-open-source-in-general&#34;&gt;Contributing to Open Source in general&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/#direct-github-searches&#34;&gt;Direct GitHub searches&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/#mozillas-contributor-ecosystem&#34;&gt;Mozilla&#39;s contributor ecosystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/#useful-articles-for-new-open-source-contributors&#34;&gt;Useful articles for new Open Source contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/#using-version-control&#34;&gt;Using Version Control&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/#open-source-books&#34;&gt;Open Source books&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/#open-source-contribution-initiatives&#34;&gt;Open Source contribution initiatives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/#open-source-programs-to-participate-in&#34;&gt;Open Source programs to participate in&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/how-to-contribute-to-open-source/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Open Source in general&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Articles and resources that discuss the world and culture of Open Source.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-definitive-guide-to-contributing-to-open-source-900d5f9f2282/&#34;&gt;The Definitive Guide to Contributing to Open Source&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/DoomHammerNG&#34;&gt;@DoomHammerNG&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorial_series/an-introduction-to-open-source&#34;&gt;An Intro to Open Source&lt;/a&gt; - Tutorials by DigitalOcean to guide you on your way to contribution success here on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLR0CKdeR_FyscaxEksDVXc4UQvlOFLYS6&#34;&gt;Complete Guide on Open Source Contributions&lt;/a&gt; - YouTube tutorials playlist by &#34;Dev Sense&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codetriage.com/&#34;&gt;Code Triage&lt;/a&gt; - A tool for finding popular repositories and issues filtered by language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pragprog.com/titles/vbopens/forge-your-future-with-open-source/&#34;&gt;Forge Your Future with Open Source&lt;/a&gt; ($) - Book devoted to explaining open source, how to find a project, and how to start contributing. Inclusive of all roles in software development, not just programmers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunGell/awesome-for-beginners&#34;&gt;Awesome-for-beginners&lt;/a&gt; - a GitHub repo that amasses projects with good bugs for new contributors, and applies labels to describe them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensource.guide/&#34;&gt;Open Source Guides&lt;/a&gt; - Collection of resources for individuals, communities, and companies who want to learn how to run and contribute to an Open Source project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackernoon.com/45-github-issues-dos-and-donts-dfec9ab4b612&#34;&gt;45 Github Issues Dos and Don’ts&lt;/a&gt; - Do&#39;s and Don&#39;ts on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en&#34;&gt;GitHub Guides&lt;/a&gt; - basic guides on how to use GitHub effectively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danthareja/contribute-to-open-source&#34;&gt;Contribute to Open Source&lt;/a&gt; - Learn the GitHub workflow by contributing code to a simulation project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linuxfoundation.org/resources/open-source-guides&#34;&gt;Linux Foundation&#39;s Open Source Guides for the Enterprise&lt;/a&gt; - The Linux Foundation&#39;s guides to Open Source projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://css-tricks.com/open-source-etiquette-guidebook/&#34;&gt;CSS Tricks An Open Source Etiquette Guidebook&lt;/a&gt; - An Open Source Etiquette Guidebook, written by Kent C. Dodds And Sarah Drasner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dipakkr/A-to-Z-Resources-for-Students&#34;&gt;A to Z Resources for Students&lt;/a&gt; - Curated list of resources and opportunities for college students to learn a new coding language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github&#34;&gt;&#34;How to Contribute to an Open Source Project on GitHub&#34; by Egghead.io&lt;/a&gt; - A step-by-step video guide of how to start contributing to Open Source projects on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@kevinjin/contributing-to-open-source-walkthrough-part-0-b3dc43e6b720&#34;&gt;Contributing to Open Source: A Live Walkthrough from Beginning to End&lt;/a&gt; - This walkthrough of an open source contribution covers everything from picking a suitable project, working on an issue, to getting the PR merged in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://css-tricks.com/how-to-contribute-to-an-open-source-project/&#34;&gt;&#34;How to Contribute to Open Source Project&#34; by Sarah Drasner&lt;/a&gt; - They are focusing on the nitty-gritty of contributing a pull request (PR) to someone else’s project on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackerearth.com:443/getstarted-opensource/&#34;&gt;&#34;How to get started with Open Source&#34; by Sayan Chowdhury&lt;/a&gt; - This article covers the resources for contributing to open source for beginners based on their favorite language interest.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.blog/2020-01-22-browse-good-first-issues-to-start-contributing-to-open-source/&#34;&gt;&#34;Browse good first issues to start contributing to open source&#34;&lt;/a&gt; - GitHub now helps you find good first issues to start contributing to open source.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubygarage.org/blog/how-contribute-to-open-source-projects&#34;&gt;&#34;How to Contribute to Open Source Project&#34; by Maryna Z&lt;/a&gt; - This comprehensive article is directed towards businesses (but still useful for individual contributors) where it talks about why, how, and what open-source projects to contribute to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zero-to-mastery/start-here-guidelines&#34;&gt;&#34;start-here-guidelines&#34; by Andrei&lt;/a&gt; - Lets Git started in the world of opensource, starting in the opensource playground. Especially designed for education and practical experience purposes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/numfocus/getting-started-with-open-source&#34;&gt;&#34;Getting Started with Open Source&#34; by NumFocus&lt;/a&gt; - a GitHub repo that helps contributors overcome barriers to entry in open-source.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chryz-hub/opensource-4-everyone&#34;&gt;&#34;Opensource-4-everyone&#34; by Chryz-hub&lt;/a&gt; - A repository on everything related to open source. This is a project to help with GitHub membership visibility, practice with basic and advance git commands, getting started with open source, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://open-advice.org/&#34;&gt;&#34;Open Advice&#34;&lt;/a&gt; - Knowledge collection from a wide variety of Free Software projects. It answers the question what 42 prominent contributors would have liked to know when they started so you can get a head-start no matter how and where you contribute.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://skills.github.com&#34;&gt;&#34;GitHub Skills&#34;&lt;/a&gt; - Level up your skills with GitHub Skills. Our friendly bot will take you through a series of fun, practical projects to learn the skills you need in no time—and share helpful feedback along the way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doi.org/10.1371/journal.pcbi.1007296&#34;&gt;&#34;Ten simple rules for helping newcomers become contributors to open projects&#34;&lt;/a&gt; - This article covers rules based on studies of many communities and experiences of members, leaders, and observers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dataschool.io/how-to-contribute-on-github/&#34;&gt;&#34;Step-by-Step guide to contributing on GitHub&#34;&lt;/a&gt; - a step-by-step guide with supporting visuals and links regarding the whole process of contributing to an open source project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Pradumnasaraf/open-source-with-pradumna&#34;&gt;Open Source with Pradumna&lt;/a&gt; - This repo contains resources and materials to learn and get yourself started with Open Source, Git, and GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/d-edge/foss-acronyms&#34;&gt;&#34;FOSS Community Acronyms&#34;&lt;/a&gt; - This repo contains a list of abbreviations used within the FOSS (Free and Open Source) community, along with their definitions and usages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zubi.gitbook.io/open-source-fiesta/&#34;&gt;&#34;Open Source Fiesta - Open Source Fiesta&#34;&lt;/a&gt; - Step-by-step instruction on how to contribute to GitHub repositories, and includes a git command line cheatsheet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doordash.engineering/2022/08/23/6-best-practices-to-manage-pull-request-creation-and-feedback/&#34;&gt;&#34;6 Best Practices to Manage Pull Request Creation and Feedback&#34;&lt;/a&gt; from Jenna Kiyasu, software engineer at DoorDash Engineering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arijitgoswami.hashnode.dev/contribute-to-the-open-source-community&#34;&gt;&#34;Contribute to the Open-Source Community&#34;&lt;/a&gt; - Advantages of open-source software, how to understand the inner workings of an open-source project and make the first contribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yzeVMecydCE&#34;&gt;&#34;Complete Guide to Open Source - How to Contribute&#34;&lt;/a&gt; (41:52) - Learn why and how to contribute to open source software with Eddie Jaoude.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Direct GitHub searches&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Search links that point directly to suitable issues to contribute to on GitHub.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=is%3Aissue+is%3Aopen+label%3Abeginner&amp;amp;type=issues&#34;&gt;is:issue is:open label:beginner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=is%3Aissue+is%3Aopen+label%3Aeasy&amp;amp;type=issues&#34;&gt;is:issue is:open label:easy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=is%3Aissue+is%3Aopen+label%3Afirst-timers-only&amp;amp;type=issues&#34;&gt;is:issue is:open label:first-timers-only&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=is%3Aissue+is%3Aopen+label%3Agood-first-bug&amp;amp;type=issues&#34;&gt;is:issue is:open label:good-first-bug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&amp;amp;type=issues&#34;&gt;is:issue is:open label:&#34;good first issue&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=is%3Aissue+is%3Aopen+label%3Astarter&amp;amp;type=issues&#34;&gt;is:issue is:open label:starter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=is%3Aissue+is%3Aopen+label%3Aup-for-grabs&amp;amp;type=issues&#34;&gt;is:issue is:open label:up-for-grabs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=is%3Aissue+is%3Aopen+label%3Aeasy-fix&amp;amp;type=issues&#34;&gt;is:issue is:open label:easy-fix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=is%3Aissue+is%3Aopen+label%3A%22beginner+friendly%22&amp;amp;type=issues&#34;&gt;is:issue is:open label:&#34;beginner friendly&#34;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mozilla&#39;s contributor ecosystem&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Mozilla pledges for a healthy internet and with it, has opportunities to contribute to its open-source projects.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugzilla.mozilla.org/buglist.cgi?quicksearch=good-first-bug&#34;&gt;Good First Bugs&lt;/a&gt; - bugs that developers have identified as a good introduction to the project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/MDN/Contribute&#34;&gt;MDN Web Docs&lt;/a&gt; - help the MDN Web Docs team in documenting the web platform by fixing content issues and platform bugs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugzilla.mozilla.org/buglist.cgi?quicksearch=mentor%3A%40&#34;&gt;Mentored Bugs&lt;/a&gt; - bugs that have a mentor assigned who will be there on IRC to help you when you get stuck while working on a fix.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.joshmatthews.net/bugsahoy/&#34;&gt;Bugs Ahoy&lt;/a&gt; - a site dedicated to finding bugs on Bugzilla.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firefox-dev.tools/&#34;&gt;Firefox DevTools&lt;/a&gt; - a site dedicated to bugs filed for the developer tools in the Firefox browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/StartMozilla&#34;&gt;Start Mozilla&lt;/a&gt; - a Twitter account that tweets about issues fit for contributors new to the Mozilla ecosystem.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful articles for new Open Source contributors&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Helpful articles and blogs directed at new contributors on how to get started.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://contributing.md/starting-an-open-source-project/&#34;&gt;Contributing.md&lt;/a&gt; - A series of guides on open source contribution&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/get-started/exploring-projects-on-github/finding-ways-to-contribute-to-open-source-on-github&#34;&gt;Finding ways to contribute to open source on GitHub&lt;/a&gt; by &lt;a href=&#34;https://github.com/github&#34;&gt;@GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/collections/choosing-projects&#34;&gt;How to choose (and contribute to) your first Open Source project&lt;/a&gt; by &lt;a href=&#34;https://github.com/collections&#34;&gt;@GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/finding-your-first-open-source-project-or-bug-to-work-on-1712f651e5ba/&#34;&gt;How to find your first Open Source bug to fix&lt;/a&gt; by &lt;a href=&#34;https://github.com/Shubheksha&#34;&gt;@Shubheksha&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kentcdodds.com/blog/first-timers-only&#34;&gt;First Timers Only&lt;/a&gt; by &lt;a href=&#34;https://github.com/kentcdodds&#34;&gt;@kentcdodds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20201009150545/https://www.hanselman.com/blog/bring-kindness-back-to-open-source&#34;&gt;Bring Kindness Back to Open Source&lt;/a&gt; by &lt;a href=&#34;https://github.com/shanselman&#34;&gt;@shanselman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nearform.com/blog/getting-into-open-source-for-the-first-time/&#34;&gt;Getting into Open Source for the First Time&lt;/a&gt; by &lt;a href=&#34;https://github.com/mcdonnelldean&#34;&gt;@mcdonnelldean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensource.guide/how-to-contribute/&#34;&gt;How to Contribute to Open Source&lt;/a&gt; by &lt;a href=&#34;https://github.com/github/opensource.guide&#34;&gt;@GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://8thlight.com/insights/how-to-find-a-bug-in-your-code&#34;&gt;How to Find a Bug in Your Code&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/dougbradbury&#34;&gt;@dougbradbury&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax&#34;&gt;Mastering Markdown&lt;/a&gt; by &lt;a href=&#34;https://github.com/github/docs&#34;&gt;@GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forcrowd.medium.com/first-mission-contributors-page-df24e6e70705&#34;&gt;First mission: Contributors page&lt;/a&gt; by &lt;a href=&#34;https://github.com/forCrowd&#34;&gt;@forCrowd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/how-to-make-your-first-open-source-contribution-in-just-5-minutes-aaad1fc59c9a/&#34;&gt;How to make your first Open Source contribution in just 5 minutes&lt;/a&gt; by &lt;a href=&#34;https://github.com/Roshanjossey/&#34;&gt;@roshanjossey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/i-just-got-my-free-hacktoberfest-shirt-heres-a-quick-way-you-can-get-yours-fa78d6e24307/&#34;&gt;I just got my free Hacktoberfest shirt. Here’s a quick way you can get yours.&lt;/a&gt; by &lt;a href=&#34;https://www.freecodecamp.org/news/author/quincylarson/&#34;&gt;@quincylarson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/codezillas/a-bitter-guide-to-open-source-a8e3b6a3c1c4&#34;&gt;A Bitter Guide To Open Source&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@ken_wheeler&#34;&gt;@ken_wheeler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackernoon.com/contributing-to-open-source-the-sharks-are-photoshopped-47e22db1ab86&#34;&gt;A junior developer’s step-by-step guide to contributing to Open Source for the first time&lt;/a&gt; by &lt;a href=&#34;https://hackernoon.com/u/letakeane&#34;&gt;@LetaKeane&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/illumination/path-to-learning-git-and-github-be93518e06dc&#34;&gt;Learn Git and GitHub Step By Step (on Windows)&lt;/a&gt; by &lt;a href=&#34;https://ows-ali.medium.com/&#34;&gt;@ows-ali&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://careerkarma.com/blog/open-source-projects-for-beginners/&#34;&gt;Why Open Source and How?&lt;/a&gt; by &lt;a href=&#34;https://careerkarma.com/blog/author/jamesgallagher/&#34;&gt;@james-gallagher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackerearth.com/getstarted-opensource/&#34;&gt;How to get started with Open Source - By Sayan Chowdhury&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kentcdodds.com/blog/what-open-source-project-should-i-contribute-to&#34;&gt;What open-source should I contribute to&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/kentcdodds&#34;&gt;@kentcdodds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developeraspire.hashnode.dev/an-immersive-introductory-guide-to-open-source&#34;&gt;An immersive introductory guide to Open-source&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/DeveloperAspire&#34;&gt;Franklin Okolie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.blog/2020/08/03/getting-started-with-contributing-to-open-source/&#34;&gt;Getting started with contributing to open source&lt;/a&gt; by &lt;a href=&#34;https://stackoverflow.blog/author/zara-cooper/&#34;&gt;Zara Cooper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://workat.tech/general/article/open-source-contribution-guide-xmhf1k601vdj&#34;&gt;Beginner&#39;s guide to open-source contribution&lt;/a&gt; by &lt;a href=&#34;https://github.com/pydevsg&#34;&gt;Sudipto Ghosh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensource.com/life/16/1/8-ways-contribute-open-source-without-writing-code&#34;&gt;8 non-code ways to contribute to open source&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/OpenSourceWay&#34;&gt;OpenSource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/what-is-open-source-software-explained-in-plain-english/&#34;&gt;What is Open Source Software? OSS Explained in Plain English&lt;/a&gt; by &lt;a href=&#34;https://www.freecodecamp.org/news/author/jessica-wilkins/&#34;&gt;Jessica Wilkins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/how-to-start-an-open-source-project-on-github-tips-from-building-my-trending-repo/&#34;&gt;How to Start an Open Source Project on GitHub – Tips from Building My Trending Repo&lt;/a&gt; by &lt;a href=&#34;https://github.com/Rishit-dagli&#34;&gt;@Rishit-dagli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.codenewbie.org/bdougie/finding-good-first-issues-33a6&#34;&gt;Finding Good First Issues&lt;/a&gt; by &lt;a href=&#34;https://community.codenewbie.org/bdougie&#34;&gt;Brian Douglas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@juliafmorgado/how-can-i-become-an-open-source-contributor-the-ultimate-guide-d746e380e011&#34;&gt;How can I become an Open Source contributor? (The ultimate guide)&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@juliafmorgado&#34;&gt;Julia Furst Morgado&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Version Control&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tutorials and resources of varying levels on using version control, typically Git and GitHub.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NcoBAfJ6l2Q&#34;&gt;Video tutorial for Git and Github by Harvard University&lt;/a&gt; - Tutorial by Harvard University, part of their CS50 Web Development course on understanding Git and GitHub and working with Git commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://think-like-a-git.net/&#34;&gt;Think Like (a) Git&lt;/a&gt; - Git introduction for &#34;advanced beginners&#34;, but are still struggling, in order to give you a simple strategy to safely experiment with git.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/set-up-git&#34;&gt;Quickstart - Set up Git&lt;/a&gt; - Learn how to set up Git locally and set up authentication, along with next steps on your learning journey.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/giteveryday&#34;&gt;Everyday Git&lt;/a&gt; - A useful minimum set of commands for Everyday Git.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ohshitgit.com/&#34;&gt;Oh shit, git!&lt;/a&gt; - how to get out of common &lt;code&gt;git&lt;/code&gt; mistakes described in plain English; also see &lt;a href=&#34;https://dangitgit.com/&#34;&gt;Dangit, git!&lt;/a&gt; for the page without swears.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials&#34;&gt;Atlassian Git Tutorials&lt;/a&gt; - various tutorials on using &lt;code&gt;git&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://education.github.com/git-cheat-sheet-education.pdf&#34;&gt;GitHub Git Cheat Sheet&lt;/a&gt; (PDF)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.freecodecamp.org/t/wiki-git-resources/13136&#34;&gt;freeCodeCamp&#39;s Wiki on Git Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=juLIxo42A_s&#34;&gt;GitHub Flow&lt;/a&gt; (42:06) - GitHub talk on how to make a pull request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/git-and-github-learning-resources&#34;&gt;Quickstart - GitHub Learning Resources&lt;/a&gt; - Git and GitHub learning resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2&#34;&gt;Pro Git&lt;/a&gt; - The entire Pro Git book, written by Scott Chacon and Ben Straub and published by Apress.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jlord/git-it-electron&#34;&gt;Git-it&lt;/a&gt; - Step by step Git tutorial desktop app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/k88hudson/git-flight-rules&#34;&gt;Flight Rules for Git&lt;/a&gt; - A guide about what to do when things go wrong.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platzi.github.io/git-slides/#/&#34;&gt;Git Guide for Beginners in Spanish&lt;/a&gt; - A complete guide of slides about git and GitHub explained in Spanish. Una guía completa de diapositivas sobre git y GitHub explicadas en Español.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gitkraken.com/git-client&#34;&gt;Git Kraken&lt;/a&gt; - Visual, cross-platform, and interactive &lt;code&gt;git&lt;/code&gt; desktop application for version control.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/git-tips/tips&#34;&gt;Git Tips&lt;/a&gt; - Collection of most commonly used git tips and tricks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sethrobertson.github.io/GitBestPractices/&#34;&gt;Git Best Practices&lt;/a&gt; - Commit Often, Perfect Later, Publish Once: Git Best Practices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learngitbranching.js.org/&#34;&gt;Git Interactive Tutorial&lt;/a&gt; - Learn Git in the most visual and interactive way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devhints.io/?q=git&#34;&gt;Git Cheat Sheets&lt;/a&gt; - A set of graphical cheat sheets on git.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=apGV9Kg7ics&#34;&gt;Complete Git and GitHub Tutorial&lt;/a&gt; (1:12:39) - Full Git and GitHub walkthrough by &lt;a href=&#34;https://www.youtube.com/channel/UCBGOUQHNNtNGcGzVq5rIXjw&#34;&gt;Kunal Kushwaha&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/gittutorial&#34;&gt;A Tutorial Introduction to Git&lt;/a&gt; - A Tutorial for Beginners by Git.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firstaidgit.io/#/&#34;&gt;First Aid Git&lt;/a&gt; - A searchable collection of the most frequently asked Git questions. Answers for these questions were collected from personal experience, Stackoverflow, and the official Git documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aosabook.org/en/git.html&#34;&gt;Git by Susan Potter&lt;/a&gt; - Show how various technical aspects of Git work under the covers to enable distributed workflows, and how it differs from other version control systems (VCSs).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8JJ101D3knE&#34;&gt;Git Tutorial for Beginners: Learn Git in 1 Hour&lt;/a&gt; - A beginner friendly git video by Mosh that explain the fundmental commands and also uses intelligible illustration to aid comprehension.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Open Source books&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Books on all things Open Source: The Culture, History, Best Practices, etc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://producingoss.com/&#34;&gt;Producing Open Source Software&lt;/a&gt; - Producing Open Source Software is a book about the human side of Open Source development. It describes how successful projects operate, the expectations of users and developers, and the culture of free software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aosabook.org/en/index.html&#34;&gt;The Architecture of Open Source Applications&lt;/a&gt; - The authors of twenty-four open source applications explain how their software is structured, and why. From web servers and compilers to health record management systems, they are covered here to help you become a better developer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensource.com/resources/ebooks&#34;&gt;Open Source Book Series&lt;/a&gt; - Learn more about Open Source and the growing Open Source movement with a comprehensive list of free eBooks from &lt;a href=&#34;https://opensource.com&#34;&gt;https://opensource.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tldp.org/HOWTO/Software-Release-Practice-HOWTO/&#34;&gt;Software Release Practice HOWTO&lt;/a&gt; - This HOWTO describes good release practices for Linux and other Open-Source projects. By following these practices, you will make it as easy as possible for users to build your code and use it, and for other developers to understand your code and cooperate with you to improve it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://archive.org/details/opensources2.000diborich&#34;&gt;Open Sources 2.0 : The Continuing Evolution&lt;/a&gt; (2005) - Open Sources 2.0 is a collection of insightful and thought-provoking essays from today&#39;s technology leaders that continues painting the evolutionary picture that developed in the 1999 book, Open Sources: Voices from the Revolution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/openbook/opensources/book/&#34;&gt;Open Sources: Voices from the Open Source Revolution&lt;/a&gt; - Essays from open-source pioneers such as Linus Torvalds (Linux), Larry Wall (Perl), and Richard Stallman (GNU).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer-success-lab.gitbook.io/code-review-anxiety-workbook-1&#34;&gt;Code Review Anxiety Workbook&lt;/a&gt; - Code Review Anxiety Workbook is for New contributors and seasoned contributor programmers. It describes more about managing anxiety when making pull requests and contributions to repositories.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Open Source contribution initiatives&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;List of initiatives that aggregate beginner friendly issues to work on or seasonal events.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://up-for-grabs.net/&#34;&gt;Up For Grabs&lt;/a&gt; - Contains projects with beginner-friendly issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firstcontributions.github.io/&#34;&gt;First Contributions&lt;/a&gt; - Make your first Open Source contribution in 5 minutes. A tool and tutorial to help beginners get started with contributions. &lt;a href=&#34;https://github.com/firstcontributions/first-contributions&#34;&gt;Here&lt;/a&gt; is the GitHub source code for the site and opportunity to make a contribution to the repository itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.firsttimersonly.com/&#34;&gt;First Timers Only&lt;/a&gt; - A list of bugs that are labelled &#34;first-timers-only&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hacktoberfest.digitalocean.com/&#34;&gt;Hacktoberfest&lt;/a&gt; - A program to encourage Open Source contributions. Earn gifts like t-shirts and stickers by making at least 4 pull requests in the month of October.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://24pullrequests.com&#34;&gt;24 Pull Requests&lt;/a&gt; - 24 Pull Requests is a project to promote Open Source collaboration during the month of December.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ovio.org&#34;&gt;Ovio&lt;/a&gt; - A platform with a curated selection of contributor-friendly projects. It has a &lt;a href=&#34;https://ovio.org/issues&#34;&gt;powerful issue search tool&lt;/a&gt; and let&#39;s you save projects and issues for later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Syknapse/Contribute-To-This-Project&#34;&gt;Contribute-To-This-Project&lt;/a&gt; - This is a tutorial to help first-time contributors to participate in a simple and easy project and get comfortable in using GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oswc.is/&#34;&gt;Open Source Welcome Committee&lt;/a&gt; - The Open Source Welcome Committee (OSWC) helps newcomers join the extraordinary world of Open Source. Come submit your open-source projects with us!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Open Source programs to participate in&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A program, internship, or fellowship hosted by a community to help match beginning contributors with mentors and resources to contribute to open source software projects.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mentorship.lfx.linuxfoundation.org/#projects_all&#34;&gt;All Linux Foundation (LF) Mentorships&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arpit456jain/Open-Source-Programs&#34;&gt;Beginner friendly Open Source programs with their timelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fossasia.org&#34;&gt;FossAsia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fsf.org/volunteer/internships&#34;&gt;Free Software Foundation (FSF) Internship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://summerofcode.withgoogle.com/&#34;&gt;Google Summer of Code&lt;/a&gt; - An annually run paid program by Google focused on bringing more student developers into open-source software development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gssoc.girlscript.tech/&#34;&gt;Girlscript Summer of Code&lt;/a&gt; - A three-month-long Open-Source Program conducted every summer by the Girlscript Foundation. With constant efforts, participants contribute to numerous projects under the extreme guidance of skilled mentors over these months. With such exposure, students begin to contribute to real-world projects from the comfort of their homes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hacktoberfest.digitalocean.com&#34;&gt;Hacktoberfest&lt;/a&gt; - An annual event hosted every October to encourage people to contribute to open source!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/INTERN&#34;&gt;Hyperledger Mentorship Program&lt;/a&gt; - If you’re into the blockchain, this is for you. You can contribute to Hyperledger. This mentorship program allows you to get practical exposure to Hyperledger open source development.You will be allotted mentors who are quite active in the Hyperledger developers community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.lfnetworking.org/display/LN/LFN+Mentorship+Program&#34;&gt;LF Networking Mentorship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/research/academic-program/rl-open-source-fest/&#34;&gt;Microsoft Reinforcement Learning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fellowship.mlh.io/&#34;&gt;Major League Hacking (MLH) Fellowship&lt;/a&gt; - A remote internship alternative for aspiring technologists where they build, or contribute to open-source projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://osoc.be/students&#34;&gt;Open Summer of Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openmainframeproject.org/all-projects/mentorship-program&#34;&gt;Open Mainframe&lt;/a&gt; - Open Mainframe Project also has its own open-source program and the mentees will be able to expand their knowledge on the mainframe technology&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.outreachy.org&#34;&gt;Outreachy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://processingfoundation.org/fellowships/&#34;&gt;Processing Foundation Internship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://railsgirlssummerofcode.org/&#34;&gt;Rails Girls Summer of Code&lt;/a&gt; - A global fellowship program for women and non-binary coders where they work on existing open-source projects and expand their skillset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.redox-os.org/rsoc/&#34;&gt;Redox OS Summer of Code&lt;/a&gt; - The Redox OS Summer of Code is the primary use of donations to the Redox OS project. Students are selected who have already demonstrated a desire and ability to contribute to Redox OS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ssoc.devfolio.co/&#34;&gt;Social Summer of Code&lt;/a&gt; - Social foundation offers this two-month long summer program for students to learn about the open-source culture and get involved in the community. Participants contribute to real-life projects under the guidance of experienced mentors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://season.kde.org/&#34;&gt;Season of KDE&lt;/a&gt; - The Season of KDE, hosted by the KDE community, is an outreach program for all individuals across the world. KDE is an international free software community that develops free and open-source software and you can contribute to KDE through the Season of KDE program&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a rel=&#34;license&#34; href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34; src=&#34;https://licensebuttons.net/l/by-sa/4.0/88x31.png&#34;&gt;&lt;/a&gt;&lt;br&gt;This work is licensed under a &lt;a rel=&#34;license&#34; href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>