<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-01T01:49:40Z</updated>
  <subtitle>Monthly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rswag/rswag</title>
    <updated>2025-05-01T01:49:40Z</updated>
    <id>tag:github.com,2025-05-01:/rswag/rswag</id>
    <link href="https://github.com/rswag/rswag" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seamlessly adds a Swagger to Rails-based API&#39;s&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rswag&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rswag/rswag/actions/workflows/ruby.yml?query=branch%3Amaster+&#34;&gt;&lt;img src=&#34;https://github.com/rswag/rswag/actions/workflows/ruby.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rswag/rswag/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/1175b984edc4610f82ab/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenApi 3.0 compatible!&lt;/p&gt; &#xA;&lt;p&gt;Seeking maintainers! Got a pet-bug that needs fixing? Just let us know in your issue/pr that you&#39;d like to step up to help.&lt;/p&gt; &#xA;&lt;p&gt;Rswag extends rspec-rails &#34;request specs&#34; with a Swagger-based DSL for describing and testing API operations. You describe your API operations with a succinct, intuitive syntax, and it automatically runs the tests. Once you have green tests, run a rake task to auto-generate corresponding OpenAPI files and expose them as YAML or JSON endpoints. Rswag also provides an embedded version of the awesome &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;swagger-ui&lt;/a&gt; that&#39;s powered by the exposed file. This toolchain makes it seamless to go from integration specs, which you&#39;re probably doing in some form already, to living documentation for your API consumers.&lt;/p&gt; &#xA;&lt;p&gt;Api Rswag creates &lt;a href=&#34;http://swagger.io&#34;&gt;Swagger&lt;/a&gt; tooling for Rails API&#39;s. Generate beautiful API documentation, including a UI to explore and test operations, directly from your rspec integration tests.&lt;/p&gt; &#xA;&lt;p&gt;And that&#39;s not all ...&lt;/p&gt; &#xA;&lt;p&gt;Once you have an API that can describe itself in Swagger, you&#39;ve opened the treasure chest of Swagger-based tools including a client generator that can be targeted to a wide range of popular platforms. See &lt;a href=&#34;https://github.com/swagger-api/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#rswag&#34;&gt;rswag&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#the-rspec-dsl&#34;&gt;The rspec DSL&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#paths-operations-and-responses&#34;&gt;Paths, Operations and Responses&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#null-values&#34;&gt;Null Values&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#support-for-oneof-anyof-or-allof-schemas&#34;&gt;Support for oneOf, anyOf or AllOf schemas&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#global-metadata&#34;&gt;Global Metadata&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#supporting-multiple-versions-of-api&#34;&gt;Supporting multiple versions of API&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#formatting-the-description-literals&#34;&gt;Formatting the description literals:&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#specifyingtesting-api-security&#34;&gt;Specifying/Testing API Security&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#configuration--customization&#34;&gt;Configuration &amp;amp; Customization&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#output-location-for-generated-openapi-files&#34;&gt;Output Location for Generated OpenAPI Files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#input-location-for-rspec-tests&#34;&gt;Input Location for Rspec Tests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#referenced-parameters-and-schema-definitions&#34;&gt;Referenced Parameters and Schema Definitions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#request-examples&#34;&gt;Request examples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#response-headers&#34;&gt;Response headers&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#nullable-or-optional-response-headers&#34;&gt;Nullable or Optional Response Headers&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#response-examples&#34;&gt;Response examples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#enable-auto-generation-examples-from-responses&#34;&gt;Enable auto generation examples from responses&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#dry-run-option&#34;&gt;Dry Run Option&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#running-tests-without-documenting&#34;&gt;Running tests without documenting&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#rswag-helper-methods&#34;&gt;rswag helper methods&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#route-prefix-for-openapi-json-endpoints&#34;&gt;Route Prefix for OpenAPI JSON Endpoints&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#root-location-for-openapi-files&#34;&gt;Root Location for OpenAPI Files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#dynamic-values-for-openapi-json&#34;&gt;Dynamic Values for OpenAPI JSON&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#custom-headers-for-openapi-files&#34;&gt;Custom Headers for OpenAPI Files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#enable-swagger-endpoints-for-swagger-ui&#34;&gt;Enable Swagger Endpoints for swagger-ui&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#enable-simple-basic-auth-for-swagger-ui&#34;&gt;Enable Simple Basic Auth for swagger-ui&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#route-prefix-for-the-swagger-ui&#34;&gt;Route Prefix for the swagger-ui&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#customizing-the-swagger-ui&#34;&gt;Customizing the swagger-ui&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rswag/rswag/master/#serve-ui-assets-directly-from-your-web-server&#34;&gt;Serve UI Assets Directly from your Web Server&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add this line to your applications &lt;em&gt;Gemfile&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rswag&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or if you like to avoid loading rspec in other bundler groups load the rswag-specs component separately. Note: Adding it to the :development group is not strictly necessary, but without it, generators and rake tasks must be preceded by RAILS_ENV=test.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile&#xA;gem &#39;rswag-api&#39;&#xA;gem &#39;rswag-ui&#39;&#xA;&#xA;group :development, :test do&#xA;  gem &#39;rspec-rails&#39;&#xA;  gem &#39;rswag-specs&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the install generator&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rails g rswag:install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or run the install generators for each package separately if you installed Rswag as separate gems, as indicated above:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rails g rswag:api:install&#xA;rails g rswag:ui:install&#xA;RAILS_ENV=test rails g rswag:specs:install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an integration spec to describe and test your API. There is also a generator which can help get you started &lt;code&gt;rails generate rspec:swagger API::MyController&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/requests/blogs_spec.rb&#xA;require &#39;openapi_helper&#39;&#xA;&#xA;describe &#39;Blogs API&#39; do&#xA;&#xA;  path &#39;/blogs&#39; do&#xA;&#xA;    post &#39;Creates a blog&#39; do&#xA;      tags &#39;Blogs&#39;&#xA;      consumes &#39;application/json&#39;&#xA;      parameter name: &#39;blog&#39;, in: :body, schema: {&#xA;        type: :object,&#xA;        properties: {&#xA;          title: { type: :string },&#xA;          content: { type: :string }&#xA;        },&#xA;        required: [ &#39;title&#39;, &#39;content&#39; ]&#xA;      }&#xA;&#xA;      response &#39;201&#39;, &#39;blog created&#39; do&#xA;        let(:request_params) { { &#39;blog&#39; =&amp;gt; { title: &#39;foo&#39;, content: &#39;bar&#39; } } } }&#xA;        run_test!&#xA;      end&#xA;&#xA;      response &#39;422&#39;, &#39;invalid request&#39; do&#xA;        let(:request_params) { { &#39;blog&#39; =&amp;gt; { title: &#39;foo&#39; } } }&#xA;        run_test!&#xA;      end&#xA;    end&#xA;  end&#xA;&#xA;  path &#39;/blogs/{id}&#39; do&#xA;&#xA;    get &#39;Retrieves a blog&#39; do&#xA;      tags &#39;Blogs&#39;, &#39;Another Tag&#39;&#xA;      produces &#39;application/json&#39;, &#39;application/xml&#39;&#xA;      parameter name: &#39;id&#39;, in: :path, type: :string&#xA;      request_body_example value: { some_field: &#39;Foo&#39; }, name: &#39;basic&#39;, summary: &#39;Request example description&#39;&#xA;&#xA;      response &#39;200&#39;, &#39;blog found&#39; do&#xA;        schema type: :object,&#xA;          properties: {&#xA;            id: { type: :integer },&#xA;            title: { type: :string },&#xA;            content: { type: :string }&#xA;          },&#xA;          required: [ &#39;id&#39;, &#39;title&#39;, &#39;content&#39; ]&#xA;&#xA;        let(:request_params) { &#39;id&#39; =&amp;gt; { Blog.create(title: &#39;foo&#39;, content: &#39;bar&#39;).id } }&#xA;        run_test!&#xA;      end&#xA;&#xA;      response &#39;404&#39;, &#39;blog not found&#39; do&#xA;        let(:request_params) { { &#39;id&#39; =&amp;gt; &#39;invalid&#39; } }&#xA;        run_test!&#xA;      end&#xA;&#xA;      response &#39;406&#39;, &#39;unsupported accept header&#39; do&#xA;        let(:request_headers) { { &#39;Accept&#39; =&amp;gt; &#39;application/foo&#39; } }&#xA;        run_test!&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By default, the above command will create spec under &lt;em&gt;spec/requests&lt;/em&gt; folder. You can pass an option to change this default path as in &lt;code&gt;rails generate rspec:swagger API::BlogsController --spec_path integration&lt;/code&gt;. This will create the spec file &lt;em&gt;spec/integration/blogs_spec.rb&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate the OpenAPI JSON file(s)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rake rswag:specs:swaggerize&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This common command is also aliased as &lt;code&gt;rake rswag&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Or if you installed your gems separately:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;RAILS_ENV=test rails rswag&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Spin up your app and check out the awesome, auto-generated docs at &lt;em&gt;/api-docs&lt;/em&gt;!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;The rspec DSL&lt;/h2&gt; &#xA;&lt;h3&gt;Paths, Operations and Responses&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve used &lt;a href=&#34;http://swagger.io/specification&#34;&gt;Swagger&lt;/a&gt; before, then the syntax should be very familiar. To describe your API operations, start by specifying a path and then list the supported operations (i.e. HTTP verbs) for that path. Path parameters must be surrounded by curly braces ({}). Within an operation block (see &#34;post&#34; or &#34;get&#34; in the example above), most of the fields supported by the &lt;a href=&#34;http://swagger.io/specification/#operationObject&#34;&gt;Swagger &#34;Operation&#34; object&lt;/a&gt; are available as methods on the example group. To list (and test) the various responses for an operation, create one or more response blocks. Again, you can reference the &lt;a href=&#34;http://swagger.io/specification/#responseObject&#34;&gt;Swagger &#34;Response&#34; object&lt;/a&gt; for available fields.&lt;/p&gt; &#xA;&lt;p&gt;Take special note of the &lt;strong&gt;run_test!&lt;/strong&gt; method that&#39;s called within each response block. This tells rswag to create and execute a corresponding example. It builds and submits a request based on parameter descriptions and corresponding values that have been provided using the &lt;code&gt;request_params&lt;/code&gt; rspec variable. For example, the &#34;post&#34; description in the example above specifies a &#34;body&#34; parameter called &#34;blog&#34;. It also lists 2 different responses. For the success case (i.e. the 201 response), notice how &lt;code&gt;request_params&lt;/code&gt; is used to set the blog parameter to a value that matches the provided schema. For the failure case (i.e. the 422 response), notice how it&#39;s set to a value that does not match the provided schema. When the test is executed, rswag also validates the actual response code and, where applicable, the response body against the provided &lt;a href=&#34;https://json-schema.org/specification&#34;&gt;JSON Schema&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to add metadata to the example, you can pass keyword arguments to the &lt;strong&gt;run_test!&lt;/strong&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# to run particular test case&#xA;response &#39;201&#39;, &#39;blog created&#39; do&#xA;  run_test! focus: true&#xA;end&#xA;&#xA;# to write vcr cassette&#xA;response &#39;201&#39;, &#39;blog created&#39; do&#xA;  run_test! vcr: true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to customize the description of the generated specification, a description can be passed to &lt;strong&gt;run_test!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response &#39;201&#39;, &#39;blog created&#39; do&#xA;  run_test! &#34;custom spec description&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to do additional validation on the response, pass a block to the &lt;strong&gt;run_test!&lt;/strong&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response &#39;201&#39;, &#39;blog created&#39; do&#xA;  run_test! do |response|&#xA;    data = JSON.parse(response.body)&#xA;    expect(data[&#39;title&#39;]).to eq(&#39;foo&#39;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like your specs to be a little more explicit about what&#39;s going on here, you can replace the call to &lt;strong&gt;run_test!&lt;/strong&gt; with equivalent &#34;before&#34; and &#34;it&#34; blocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;response &#39;201&#39;, &#39;blog created&#39; do&#xA;  let(:request_params) { { &#39;blog&#39; =&amp;gt; { title: &#39;foo&#39;, content: &#39;bar&#39; } } }&#xA;&#xA;  before do |example|&#xA;    submit_request(example.metadata)&#xA;  end&#xA;&#xA;  it &#39;returns a valid 201 response&#39; do |example|&#xA;    assert_response_matches_metadata(example.metadata)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also note that the examples generated with &lt;strong&gt;run_test!&lt;/strong&gt; are tagged with the &lt;code&gt;:rswag&lt;/code&gt; so they can easily be filtered. E.g. &lt;code&gt;rspec --tag rswag&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;date-time in query parameters&lt;/h3&gt; &#xA;&lt;p&gt;Input sent in queries of Rspec tests is HTML safe, including date-time strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;parameter name: &#39;date_time&#39;, in: :query, type: :string&#xA;&#xA;response &#39;200&#39;, &#39;blog found&#39; do&#xA;  let(:date_time) { DateTime.new(2001, 2, 3, 4, 5, 6, &#39;-7&#39;).to_s }&#xA;  let(:request_params) { { &#39;date_time&#39; =&amp;gt; date_time } }&#xA;&#xA;  run_test! do&#xA;    expect(request[:path]).to eq(&#39;/blogs?date_time=2001-02-03T04%3A05%3A06-07%3A00&#39;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enum description&lt;/h3&gt; &#xA;&lt;p&gt;If you want to output a description of each enum value, the description can be passed to each value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;parameter name: &#39;status&#39;, in: :query,&#xA;          enum: { &#39;draft&#39;: &#39;Retrieves draft blogs&#39;, &#39;published&#39;: &#39;Retrieves published blogs&#39;, &#39;archived&#39;: &#39;Retrieves archived blogs&#39; },&#xA;          description: &#39;Filter by status&#39;&#xA;&#xA;response &#39;200&#39;, &#39;success&#39; do&#xA;  let(:request_params) { {&#39;status&#39; =&amp;gt; &#39;published&#39;} }&#xA;&#xA;  run_test!&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Schema validations&lt;/h3&gt; &#xA;&lt;h4&gt;Additional properties&lt;/h4&gt; &#xA;&lt;p&gt;If you want to disallow additional properties in response body, you can set the option &lt;code&gt;openapi_no_additional_properties&lt;/code&gt; to true:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/swagger_helper.rb&#xA;RSpec.configure do |config|&#xA;  config.openapi_no_additional_properties = true # default false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set similarly the option per individual example as shown in Strict (deprecated) sections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;      response &#39;200&#39;, &#39;blog found&#39;, :openapi_no_additional_properties do&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;      response &#39;200&#39;, &#39;blog found&#39;, openapi_no_additional_properties: true do&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;All required properties&lt;/h4&gt; &#xA;&lt;p&gt;If you want to disallow missing required properties in response body, you can set the &lt;code&gt;openapi_all_properties_required&lt;/code&gt; option to true: &lt;strong&gt;Important&lt;/strong&gt; it will allow the additional properties&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/swagger_helper.rb&#xA;RSpec.configure do |config|&#xA;  config.openapi_all_properties_required = true # default false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set similarly the option per individual example as shown in Strict (deprecated) sections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;      response &#39;200&#39;, &#39;blog found&#39;, :openapi_all_properties_required do&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;      response &#39;200&#39;, &#39;blog found&#39;, openapi_all_properties_required: true do&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Null Values&lt;/h3&gt; &#xA;&lt;p&gt;This library is currently using JSON::Draft4 for validation of response models. Nullable properties can be supported with the non-standard property &#39;x-nullable&#39; to a definition to allow null/nil values to pass. Or you can add the new standard &lt;code&gt;nullable&lt;/code&gt; property to a definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;Blogs API&#39; do&#xA;  path &#39;/blogs&#39; do&#xA;    post &#39;Creates a blog&#39; do&#xA;      ...&#xA;&#xA;      response &#39;200&#39;, &#39;blog found&#39; do&#xA;        schema type: :object,&#xA;          properties: {&#xA;            id: { type: :integer },&#xA;            title: { type: :string, nullable: true }, # preferred syntax&#xA;            content: { type: :string, &#39;x-nullable&#39;: true } # legacy syntax, but still works&#xA;          }&#xA;        ....&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Support for oneOf, anyOf or AllOf schemas&lt;/h3&gt; &#xA;&lt;p&gt;OpenAPI 3.0 supports more flexible schema validation with the &lt;code&gt;oneOf&lt;/code&gt;, &lt;code&gt;anyOf&lt;/code&gt; and &lt;code&gt;allOf&lt;/code&gt; directives. rswag will handle these definitions and validate them properly.&lt;/p&gt; &#xA;&lt;p&gt;Notice the &lt;code&gt;schema&lt;/code&gt; inside the &lt;code&gt;response&lt;/code&gt; section. Placing a &lt;code&gt;schema&lt;/code&gt; method inside the response will validate (and fail the tests) if during the integration test run the endpoint response does not match the response schema. This test validation can handle anyOf and allOf as well. See below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;  path &#39;/blogs/flexible&#39; do&#xA;    post &#39;Creates a blog flexible body&#39; do&#xA;      tags &#39;Blogs&#39;&#xA;      description &#39;Creates a flexible blog from provided data&#39;&#xA;      operationId &#39;createFlexibleBlog&#39;&#xA;      consumes &#39;application/json&#39;&#xA;      produces &#39;application/json&#39;&#xA;&#xA;      parameter name: &#39;blog&#39;, in: :body, schema: {&#xA;          oneOf: [&#xA;            { &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/blog&#39; },&#xA;            { &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/flexible_blog&#39; }&#xA;          ]&#xA;        }&#xA;&#xA;      response &#39;201&#39;, &#39;flexible blog created&#39; do&#xA;        schema oneOf: [{ &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/blog&#39; }, { &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/flexible_blog&#39; }]&#xA;        run_test!&#xA;      end&#xA;    end&#xA;  end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This automatic schema validation is a powerful feature of rswag.&lt;/p&gt; &#xA;&lt;h3&gt;Global Metadata&lt;/h3&gt; &#xA;&lt;p&gt;In addition to paths, operations and responses, OpenAPI also supports global API metadata. When you install rswag, a file called &lt;em&gt;openapi_helper.rb&lt;/em&gt; is added to your spec folder. This is where you define one or more OpenAPI documents and provide global metadata. Again, the format is based on OpenAPI so most of the global fields supported by the top level &lt;a href=&#34;http://swagger.io/specification/#swaggerObject&#34;&gt;&#34;Swagger&#34; object&lt;/a&gt; can be provided with each document definition. As an example, you could define an OpenAPI document for each version of your API and in each case specify a title, version string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/openapi_helper.rb&#xA;RSpec.configure do |config|&#xA;  config.openapi_root = Rails.root.to_s + &#39;/openapi&#39;&#xA;&#xA;  config.openapi_specs = {&#xA;    &#39;v1/openapi.json&#39; =&amp;gt; {&#xA;      openapi: &#39;3.0.1&#39;,&#xA;      info: {&#xA;        title: &#39;API V1&#39;,&#xA;        version: &#39;v1&#39;,&#xA;        description: &#39;This is the first version of my API&#39;&#xA;      },&#xA;      servers: [&#xA;        {&#xA;          url: &#39;https://{defaultHost}&#39;,&#xA;          variables: {&#xA;            defaultHost: {&#xA;                default: &#39;www.example.com&#39;&#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    },&#xA;&#xA;    &#39;v2/openapi.yaml&#39; =&amp;gt; {&#xA;      openapi: &#39;3.0.1&#39;,&#xA;      info: {&#xA;        title: &#39;API V2&#39;,&#xA;        version: &#39;v2&#39;,&#xA;        description: &#39;This is the second version of my API&#39;&#xA;      },&#xA;      servers: [&#xA;        {&#xA;          url: &#39;{protocol}://{defaultHost}&#39;,&#xA;          variables: {&#xA;            protocol: {&#xA;              default: :https&#xA;            },&#xA;            defaultHost: {&#xA;                default: &#39;www.example.com&#39;&#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Supporting multiple versions of API&lt;/h4&gt; &#xA;&lt;p&gt;By default, the paths, operations and responses defined in your spec files will be associated with the first OpenAPI document in &lt;em&gt;openapi_helper.rb&lt;/em&gt;. If your API has multiple versions, you should be using separate documents to describe each of them. In order to assign a file with a given version of API, you&#39;ll need to add the &lt;code&gt;openapi_spec&lt;/code&gt; tag to each spec specifying its target document name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/requests/v2/blogs_spec.rb&#xA;describe &#39;Blogs API&#39;, openapi_spec: &#39;v2/openapi.yaml&#39; do&#xA;&#xA;  path &#39;/blogs&#39; do&#xA;  ...&#xA;&#xA;  path &#39;/blogs/{id}&#39; do&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Supporting YAML format&lt;/h4&gt; &#xA;&lt;p&gt;By default, the OpenAPI specs are generated in JSON format. If you want to generate them in YAML format, you can specify the OpenAPI format in the &lt;code&gt;openapi_helper.rb&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/openapi_helper.rb&#xA;RSpec.configure do |config|&#xA;  config.openapi_root = Rails.root.to_s + &#39;/openapi&#39;&#xA;&#xA;  # Use if you want to see which test is running&#xA;  # config.formatter = :documentation&#xA;&#xA;  # Generate OpenAPI docs in YAML format&#xA;  config.openapi_format = :yaml&#xA;&#xA;  config.openapi_specs = {&#xA;    &#39;v1/openapi.yaml&#39; =&amp;gt; {&#xA;      openapi: &#39;3.0.1&#39;,&#xA;      info: {&#xA;        title: &#39;API V1&#39;,&#xA;        version: &#39;v1&#39;,&#xA;        description: &#39;This is the first version of my API&#39;&#xA;      },&#xA;      servers: [&#xA;        {&#xA;          url: &#39;https://{defaultHost}&#39;,&#xA;          variables: {&#xA;            defaultHost: {&#xA;                default: &#39;www.example.com&#39;&#xA;            }&#xA;          }&#xA;        }&#xA;      ]&#xA;    },&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Formatting the description literals:&lt;/h4&gt; &#xA;&lt;p&gt;OpenAPI supports the Markdown syntax to format strings. This can be especially handy if you were to provide a long description of a given API version or endpoint. Use &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;this guide&lt;/a&gt; for reference.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; There is one difference between the official Markdown syntax and OpenAPI interpretation, namely tables. To create a table like this:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column1&lt;/th&gt; &#xA;   &lt;th&gt;Column2&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cell1&lt;/td&gt; &#xA;   &lt;td&gt;cell2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;you should use the following syntax, making sure there is no whitespace at the start of any of the lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;amp;#13;&#xA;| Column1 | Column2 | &amp;amp;#13; |&#xA;| ------- | ------- |&amp;amp;#13;&#xA;| cell1   | cell2    |&amp;amp;#13;&#xA;&amp;amp;#13;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying/Testing API Security&lt;/h3&gt; &#xA;&lt;p&gt;OpenAPI allows for the specification of different security schemes and their applicability to operations in an API. To leverage this in rswag, you define the schemes globally in &lt;em&gt;openapi_helper.rb&lt;/em&gt; and then use the &#34;security&#34; attribute at the operation level to specify which schemes, if any, are applicable to that operation. OpenAPI supports :basic, :bearer, :apiKey and :oauth2 and :openIdConnect scheme types. See &lt;a href=&#34;https://swagger.io/docs/specification/authentication/&#34;&gt;the spec&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/openapi_helper.rb&#xA;RSpec.configure do |config|&#xA;  config.openapi_root = Rails.root.to_s + &#39;/openapi&#39;&#xA;&#xA;  config.openapi_specs = {&#xA;    &#39;v1/openapi.json&#39; =&amp;gt; {&#xA;      ...  # note the new Open API 3.0 compliant security structure here, under &#34;components&#34;&#xA;      components: {&#xA;        securitySchemes: {&#xA;          basic_auth: {&#xA;            type: :http,&#xA;            scheme: :basic&#xA;          },&#xA;          api_key: {&#xA;            type: :apiKey,&#xA;            name: &#39;api_key&#39;,&#xA;            in: :header&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;end&#xA;&#xA;# spec/requests/blogs_spec.rb&#xA;describe &#39;Blogs API&#39; do&#xA;&#xA;  path &#39;/blogs&#39; do&#xA;&#xA;    post &#39;Creates a blog&#39; do&#xA;      tags &#39;Blogs&#39;&#xA;      security [ basic_auth: [] ]&#xA;      ...&#xA;&#xA;      response &#39;201&#39;, &#39;blog created&#39; do&#xA;        let(:request_headers) { { &#39;Authorization&#39; =&amp;gt; &#34;Basic #{::Base64.strict_encode64(&#39;jsmith:jspass&#39;)}&#34; } }&#xA;        run_test!&#xA;      end&#xA;&#xA;      response &#39;401&#39;, &#39;authentication failed&#39; do&#xA;        let(:request_headers) { { &#39;Authorization&#39; =&amp;gt; &#34;Basic #{::Base64.strict_encode64(&#39;bogus:bogus&#39;)}&#34; } }&#xA;        run_test!&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;# example of documenting an endpoint that handles basic auth and api key based security&#xA;describe &#39;Auth examples API&#39; do&#xA;  path &#39;/auth-tests/basic-and-api-key&#39; do&#xA;    post &#39;Authenticates with basic auth and api key&#39; do&#xA;      tags &#39;Auth Tests&#39;&#xA;      operationId &#39;testBasicAndApiKey&#39;&#xA;      security [{ basic_auth: [], api_key: [] }]&#xA;&#xA;      response &#39;204&#39;, &#39;Valid credentials&#39; do&#xA;        let(:request_headers) {&#xA;          {&#xA;            &#39;Authorization&#39; =&amp;gt; &#34;Basic #{::Base64.strict_encode64(&#39;jsmith:jspass&#39;)}&#34;&#xA;            &#39;api_key&#39; =&amp;gt; &#39;foobar&#39;,&#xA;          }&#xA;        }&#xA;        run_test!&#xA;      end&#xA;&#xA;      response &#39;401&#39;, &#39;Invalid credentials&#39; do&#xA;        let(:request_headers) {&#xA;          {&#xA;            &#39;Authorization&#39; =&amp;gt; &#34;Basic #{::Base64.strict_encode64(&#39;jsmith:jspass&#39;)}&#34;&#xA;            &#39;api_key&#39; =&amp;gt; &#39;bar-foo&#39;,&#xA;          }&#xA;        }&#xA;        run_test!&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Depending on the scheme types, you&#39;ll be required to assign a corresponding parameter value with each example. For example, :basic auth is required above and so the :Authorization (header) parameter must be set accordingly&lt;/p&gt; &#xA;&lt;h2&gt;Configuration &amp;amp; Customization&lt;/h2&gt; &#xA;&lt;p&gt;The steps described above will get you up and running with minimal setup. However, rswag offers a lot of flexibility to customize as you see fit. Before exploring the various options, you&#39;ll need to be aware of its different components. The following table lists each of them and the files that get added/updated as part of a standard install.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Gem&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added/Updated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;rswag-specs&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Swagger-based DSL for rspec &amp;amp; accompanying rake task for generating OpenAPI files&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;spec/openapi_helper.rb&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;rswag-api&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rails Engine that exposes your OpenAPI files as JSON endpoints&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;config/initializers/rswag_api.rb, config/routes.rb&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;rswag-ui&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rails Engine that includes &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;swagger-ui&lt;/a&gt; and powers it from your Swagger endpoints&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;config/initializers/rswag_ui.rb, config/routes.rb&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Output Location for Generated OpenAPI Files&lt;/h3&gt; &#xA;&lt;p&gt;You can adjust this in the &lt;em&gt;openapi_helper.rb&lt;/em&gt; that&#39;s installed with &lt;strong&gt;rswag-specs&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/openapi_helper.rb&#xA;RSpec.configure do |config|&#xA;  config.openapi_root = Rails.root.to_s + &#39;/your-custom-folder-name&#39;&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you do change this, you&#39;ll also need to update the rswag_api.rb initializer (assuming you&#39;re using rswag-api). More on this later.&lt;/p&gt; &#xA;&lt;h3&gt;Input Location for Rspec Tests&lt;/h3&gt; &#xA;&lt;p&gt;By default, rswag will search for integration tests in &lt;em&gt;spec/requests&lt;/em&gt;, &lt;em&gt;spec/api&lt;/em&gt; and &lt;em&gt;spec/integration&lt;/em&gt;. If you want to use tests from other locations, provide the PATTERN argument to rake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# search for tests in spec/openapi&#xA;rake rswag:specs:swaggerize PATTERN=&#34;spec/openapi/**/*_spec.rb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Additional rspec options&lt;/h3&gt; &#xA;&lt;p&gt;You can add additional rspec parameters using the ADDITIONAL_RSPEC_OPTS env variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Only include tests tagged &#34;rswag&#34;&#xA;rake rswag:specs:swaggerize ADDITIONAL_RSPEC_OPTS=&#34;--tag rswag&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Referenced Parameters and Schema Definitions&lt;/h3&gt; &#xA;&lt;p&gt;OpenAPI allows you to describe JSON structures inline with your operation descriptions OR as referenced globals. For example, you might have a standard response structure for all failed operations. Rather than repeating the schema in every operation spec, you can define it globally and provide a reference to it in each spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/openapi_helper.rb&#xA;config.openapi_specs = {&#xA;  &#39;v1/openapi.json&#39; =&amp;gt; {&#xA;    openapi: &#39;3.0.0&#39;,&#xA;    info: {&#xA;      title: &#39;API V1&#39;&#xA;    },&#xA;    components: {&#xA;      schemas: {&#xA;        errors_object: {&#xA;          type: &#39;object&#39;,&#xA;          properties: {&#xA;            errors: { &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/errors_map&#39; }&#xA;          }&#xA;        },&#xA;        errors_map: {&#xA;          type: &#39;object&#39;,&#xA;          additionalProperties: {&#xA;            type: &#39;array&#39;,&#xA;            items: { type: &#39;string&#39; }&#xA;          }&#xA;        },&#xA;        blog: {&#xA;          type: &#39;object&#39;,&#xA;          properties: {&#xA;            id: { type: &#39;integer&#39; },&#xA;            title: { type: &#39;string&#39; },&#xA;            content: { type: &#39;string&#39;, nullable: true },&#xA;            thumbnail: { type: &#39;string&#39;, nullable: true }&#xA;          },&#xA;          required: %w[id title]&#xA;        },&#xA;        new_blog: {&#xA;          type: &#39;object&#39;,&#xA;          properties: {&#xA;            title: { type: &#39;string&#39; },&#xA;            content: { type: &#39;string&#39;, nullable: true },&#xA;            thumbnail: { type: &#39;string&#39;, format: &#39;binary&#39;, nullable: true }&#xA;          },&#xA;          required: %w[title]&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;# spec/requests/blogs_spec.rb&#xA;describe &#39;Blogs API&#39; do&#xA;&#xA;  path &#39;/blogs&#39; do&#xA;&#xA;    post &#39;Creates a blog&#39; do&#xA;&#xA;      parameter name: &#39;new_blog&#39;, in: :body, schema: { &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/new_blog&#39; }&#xA;&#xA;      response 422, &#39;invalid request&#39; do&#xA;        schema &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/errors_object&#39;&#xA;  ...&#xA;end&#xA;&#xA;# spec/requests/comments_spec.rb&#xA;describe &#39;Blogs API&#39; do&#xA;&#xA;  path &#39;/blogs/{blog_id}/comments&#39; do&#xA;&#xA;    post &#39;Creates a comment&#39; do&#xA;&#xA;      response 422, &#39;invalid request&#39; do&#xA;        schema &#39;$ref&#39; =&amp;gt; &#39;#/components/schemas/errors_object&#39;&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/integration/blogs_spec.rb&#xA;describe &#39;Blogs API&#39; do&#xA;&#xA;  path &#39;/blogs/{blog_id}&#39; do&#xA;&#xA;    get &#39;Retrieves a blog&#39; do&#xA;&#xA;      request_body_example value: { some_field: &#39;Foo&#39; }, name: &#39;request_example_1&#39;, summary: &#39;A request example&#39;&#xA;&#xA;      response 200, &#39;blog found&#39; do&#xA;        ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to use the actual request from the spec as the example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.after(:each, operation: true, use_as_request_example: true) do |spec|&#xA;  spec.metadata[:operation][:request_examples] ||= []&#xA;&#xA;  example = {&#xA;    value: JSON.parse(request.body.string, symbolize_names: true),&#xA;    name: &#39;request_example_1&#39;,&#xA;    summary: &#39;A request example&#39;&#xA;  }&#xA;&#xA;  spec.metadata[:operation][:request_examples] &amp;lt;&amp;lt; example&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response headers&lt;/h3&gt; &#xA;&lt;p&gt;In Rswag, you could use &lt;code&gt;header&lt;/code&gt; method inside the response block to specify header objects for this response. Rswag will validate your response headers with those header objects and inject them into the generated OpenAPI spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/requests/comments_spec.rb&#xA;describe &#39;Blogs API&#39; do&#xA;&#xA;  path &#39;/blogs/{blog_id}/comments&#39; do&#xA;&#xA;    post &#39;Creates a comment&#39; do&#xA;&#xA;      response 422, &#39;invalid request&#39; do&#xA;        header &#39;X-Rate-Limit-Limit&#39;, schema: { type: :integer }, description: &#39;The number of allowed requests in the current period&#39;&#xA;        header &#39;X-Rate-Limit-Remaining&#39;, schema: { type: :integer }, description: &#39;The number of remaining requests in the current period&#39;&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nullable or Optional Response Headers&lt;/h4&gt; &#xA;&lt;p&gt;You can include &lt;code&gt;nullable&lt;/code&gt; or &lt;code&gt;required&lt;/code&gt; to specify whether a response header must be present or may be null. When &lt;code&gt;nullable&lt;/code&gt; is not included, the headers validation validates that the header response is non-null. When &lt;code&gt;required&lt;/code&gt; is not included, the headers validation validates the the header response is passed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/integration/comments_spec.rb&#xA;describe &#39;Blogs API&#39; do&#xA;&#xA;  path &#39;/blogs/{blog_id}/comments&#39; do&#xA;&#xA;    get &#39;Gets a list of comments&#39; do&#xA;&#xA;      response 200, &#39;blog found&#39; do&#xA;        header &#39;X-Cursor&#39;, schema: { type: :string, nullable: true }, description: &#39;The cursor to get the next page of comments.&#39;&#xA;        header &#39;X-Per-Page&#39;, schema: { type: :integer }, required: false, description: &#39;The number of comments per page.&#39;&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response examples&lt;/h3&gt; &#xA;&lt;p&gt;You can provide custom response examples to the generated OpenAPI spec by calling the method &lt;code&gt;examples&lt;/code&gt; inside the response block: However, auto generated example responses are now enabled by default in rswag. See below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/requests/blogs_spec.rb&#xA;describe &#39;Blogs API&#39; do&#xA;&#xA;  path &#39;/blogs/{blog_id}&#39; do&#xA;&#xA;    get &#39;Retrieves a blog&#39; do&#xA;&#xA;      response 200, &#39;blog found&#39; do&#xA;        example &#39;application/json&#39;, :example_key, {&#xA;            id: 1,&#xA;            title: &#39;Hello world!&#39;,&#xA;            content: &#39;...&#39;&#xA;          }&#xA;        example &#39;application/json&#39;, :example_key_2, {&#xA;            id: 1,&#xA;            title: &#39;Hello world!&#39;,&#xA;            content: &#39;...&#39;&#xA;          }, &#34;Summary of the example&#34;, &#34;Longer description of the example&#34;&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enable auto generation examples from responses&lt;/h3&gt; &#xA;&lt;p&gt;To enable examples generation from responses add callback above run_test! like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;after do |example|&#xA;  content = example.metadata[:response][:content] || {}&#xA;  example_spec = {&#xA;    &#34;application/json&#34;=&amp;gt;{&#xA;      examples: {&#xA;        test_example: {&#xA;          value: JSON.parse(response.body, symbolize_names: true)&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;  example.metadata[:response][:content] = content.deep_merge(example_spec)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note you will need to disable the &lt;code&gt;--dry-run&lt;/code&gt; option for Rspec 3.0.0 or higher to run the after callback. See below for more information.&lt;/p&gt; &#xA;&lt;h4&gt;Dry Run Option&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;--dry-run&lt;/code&gt; option is enabled by default for Rspec 3, but if you need to disable it you can use the environment variable &lt;code&gt;RSWAG_DRY_RUN=0&lt;/code&gt; during the generation command or add the following to your &lt;code&gt;config/environments/test.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.rswag_dry_run = false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running tests without documenting&lt;/h4&gt; &#xA;&lt;p&gt;If you want to use Rswag for testing without adding it to you OpenAPI specs, you can provide the document tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;Blogs API&#39; do&#xA;  path &#39;/blogs/{blog_id}&#39; do&#xA;    get &#39;Retrieves a blog&#39; do&#xA;      # documentation is now disabled for this response only&#xA;      response 200, &#39;blog found&#39;, document: false do&#xA;        ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also reenable documentation for specific responses only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# documentation is now disabled&#xA;describe &#39;Blogs API&#39;, document: false do&#xA;  path &#39;/blogs/{blog_id}&#39; do&#xA;    get &#39;Retrieves a blog&#39; do&#xA;      # documentation is reenabled for this response only&#xA;      response 200, &#39;blog found&#39;, document: true do&#xA;        ...&#xA;      end&#xA;&#xA;      response 401, &#39;special case&#39; do&#xA;        ...&#xA;      end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;rswag helper methods&lt;/h5&gt; &#xA;&lt;!--&#xA;There are some helper methods to help with documenting request bodies.&#xA;```ruby&#xA;describe &#39;Blogs API&#39;, type: :request, openapi_spec: &#39;v1/openapi.json&#39; do&#xA;  let(:request_headers) { { &#39;api_key&#39; =&gt; &#39;fake_key&#39; } }&#xA;&#xA;  path &#39;/blogs&#39; do&#xA;    post &#39;Creates a blog&#39; do&#xA;      tags &#39;Blogs&#39;&#xA;      description &#39;Creates a new blog from provided data&#39;&#xA;      operationId &#39;createBlog&#39;&#xA;      consumes &#39;application/json&#39;&#xA;      produces &#39;application/json&#39;&#xA;&#xA;      request_body_json schema: { &#39;$ref&#39; =&gt; &#39;#/components/schemas/blog&#39; },&#xA;                        examples: :blog&#xA;&#xA;      request_body_text_plain&#xA;      request_body_xml schema: { &#39;$ref&#39; =&gt; &#39;#/components/schemas/blog&#39; }&#xA;&#xA;      let(:blog) { { blog: { title: &#39;foo&#39;, content: &#39;bar&#39; } } }&#xA;&#xA;      response &#39;201&#39;, &#39;blog created&#39; do&#xA;        schema &#39;$ref&#39; =&gt; &#39;#/components/schemas/blog&#39;&#xA;        run_test!&#xA;      end&#xA;&#xA;      response &#39;422&#39;, &#39;invalid request&#39; do&#xA;        schema &#39;$ref&#39; =&gt; &#39;#/components/schemas/errors_object&#39;&#xA;        let(:blog) { { blog: { title: &#39;foo&#39; } } }&#xA;&#xA;        run_test! do |response|&#xA;          expect(response.body).to include(&#34;can&#39;t be blank&#34;)&#xA;        end&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;```&#xA;&#xA;In the above example, we see methods ```request_body_json``` ```request_body_plain``` ```request_body_xml```.&#xA;These methods can be used to describe json, plain text and xml body. They are just wrapper methods to setup posting JSON, plain text or xml into your endpoint.&#xA;The simplest most common usage is for json formatted body to use the schema: to specify the location of the schema for the request body&#xA;and the examples: :blog which will create a named example &#34;blog&#34; under the &#34;requestBody / content / application/json / examples&#34; section.&#xA;Again, documenting request response examples changed in OpenAPI 3.0. The example above would generate a openapi.json snippet that looks like this:&#xA;&#xA;```json&#xA;        ...&#xA;        {&#34;requestBody&#34;: {&#xA;          &#34;required&#34;: true,&#xA;          &#34;content&#34;: {&#xA;            &#34;application/json&#34;: {&#xA;              &#34;examples&#34;: {&#xA;                &#34;blog&#34;: {  // takes the name from  examples: :blog above&#xA;                  &#34;value&#34;: {  // this is OpenAPI 3.0 structure -&gt; https://swagger.io/docs/specification/adding-examples/&#xA;                    &#34;blog&#34;: { // here is the actual JSON payload that is submitted to the service, and shows up in swagger UI as an example&#xA;                      &#34;title&#34;: &#34;foo&#34;,&#xA;                      &#34;content&#34;: &#34;bar&#34;&#xA;                    }&#xA;                  }&#xA;                }&#xA;              },&#xA;              &#34;schema&#34;: {&#xA;                &#34;$ref&#34;: &#34;#/components/schemas/blog&#34;&#xA;              }&#xA;            },&#xA;            &#34;test/plain&#34;: {&#xA;              &#34;schema&#34;: {&#xA;                &#34;type&#34;: &#34;string&#34;&#xA;              }&#xA;            },&#xA;            &#34;application/xml&#34;: {&#xA;              &#34;schema&#34;: {&#xA;                &#34;$ref&#34;: &#34;#/components/schemas/blog&#34;&#xA;              }&#xA;            }&#xA;          }&#xA;        },&#xA;        }&#xA;```&#xA;&#xA;*NOTE:* for this example request body to work in the tests properly, you need to ``let`` a variable named *blog*.&#xA;The variable with the matching name (blog in this case) is eval-ed and captured to be placed in the examples section.&#xA;This ```let``` value is used in the integration test to run the test AND captured and injected into the requestBody section.&#xA;&#xA;##### rswag response examples #####&#xA;&#xA;In the same way that requestBody examples can be captured and injected into the output, response examples can also be captured.&#xA;Using the above example, when the integration test is run - the OpenAPI spec would include the following snippet providing more useful real world examples&#xA;capturing the response from the execution of the integration test.&#xA;&#xA;```json&#xA;       ...  &#34;responses&#34;: {&#xA;          &#34;201&#34;: {&#xA;            &#34;description&#34;: &#34;blog created&#34;,&#xA;            &#34;content&#34;: {&#xA;              &#34;application/json&#34;: {&#xA;                &#34;example&#34;: {&#xA;                  &#34;id&#34;: 1,&#xA;                  &#34;title&#34;: &#34;foo&#34;,&#xA;                  &#34;content&#34;: &#34;bar&#34;,&#xA;                  &#34;thumbnail&#34;: null&#xA;                },&#xA;                &#34;schema&#34;: {&#xA;                  &#34;$ref&#34;: &#34;#/components/schemas/blog&#34;&#xA;                }&#xA;              }&#xA;            }&#xA;          },&#xA;          &#34;422&#34;: {&#xA;            &#34;description&#34;: &#34;invalid request&#34;,&#xA;            &#34;content&#34;: {&#xA;              &#34;application/json&#34;: {&#xA;                &#34;example&#34;: {&#xA;                  &#34;errors&#34;: {&#xA;                    &#34;content&#34;: [&#xA;                      &#34;can&#39;t be blank&#34;&#xA;                    ]&#xA;                  }&#xA;                },&#xA;                &#34;schema&#34;: {&#xA;                  &#34;$ref&#34;: &#34;#/components/schemas/errors_object&#34;&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;```&#xA; --&gt; &#xA;&lt;h3&gt;Route Prefix for OpenAPI JSON Endpoints&lt;/h3&gt; &#xA;&lt;p&gt;The functionality to expose OpenAPI files, such as those generated by rswag-specs, as JSON endpoints is implemented as a Rails Engine. As with any Engine, you can change its mount prefix in &lt;em&gt;routes.rb&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;TestApp::Application.routes.draw do&#xA;  ...&#xA;&#xA;  mount Rswag::Api::Engine =&amp;gt; &#39;your-custom-prefix&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming a OpenAPI file exists at &amp;lt;openapi_root&amp;gt;/v1/openapi.json, this configuration would expose the file as the following JSON endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET http://&amp;lt;hostname&amp;gt;/your-custom-prefix/v1/openapi.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Root Location for OpenAPI Files&lt;/h3&gt; &#xA;&lt;p&gt;You can adjust this in the &lt;em&gt;rswag_api.rb&lt;/em&gt; initializer that&#39;s installed with &lt;strong&gt;rspec-api&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rswag::Api.configure do |c|&#xA;  c.openapi_root = Rails.root.to_s + &#39;/your-custom-folder-name&#39;&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you&#39;re using rswag-specs to generate OpenAPI files, you&#39;ll want to ensure they both use the same &amp;lt;openapi_root&amp;gt;. The reason for separate settings is to maintain independence between the two gems. For example, you could install rswag-api independently and create your OpenAPI files manually.&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic Values for OpenAPI JSON&lt;/h3&gt; &#xA;&lt;p&gt;There may be cases where you need to add dynamic values to the OpenAPI JSON that&#39;s returned by rswag-api. For example, you may want to provide an explicit host name. Rather than hardcoding it, you can configure a filter that&#39;s executed prior to serializing every OpenAPI document:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rswag::Api.configure do |c|&#xA;  ...&#xA;&#xA;  c.openapi_filter = lambda { |openapi, env| openapi[&#39;host&#39;] = env[&#39;HTTP_HOST&#39;] }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note how the filter is passed the rack env for the current request. This provides a lot of flexibility. For example, you can assign the &#34;host&#34; property (as shown) or you could inspect session information or an Authorization header and remove operations based on user permissions.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Headers for OpenAPI Files&lt;/h3&gt; &#xA;&lt;p&gt;You can specify custom headers for serving your generated OpenAPI JSON. For example you may want to force a specific charset for the &#39;Content-Type&#39; header. You can configure a hash of headers to be sent with the request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rswag::Api.configure do |c|&#xA;  ...&#xA;&#xA;  c.openapi_headers = { &#39;Content-Type&#39; =&amp;gt; &#39;application/json; charset=UTF-8&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take care when overriding Content-Type if you serve both YAML and JSON files as it will no longer switch the Content-Type header correctly.&lt;/p&gt; &#xA;&lt;h3&gt;Enable Swagger Endpoints for swagger-ui&lt;/h3&gt; &#xA;&lt;p&gt;You can update the &lt;em&gt;rswag_ui.rb&lt;/em&gt; initializer, installed with rswag-ui, to specify which Swagger endpoints should be available to power the documentation UI. If you&#39;re using rswag-api, these should correspond to the Swagger endpoints it exposes. When the UI is rendered, you&#39;ll see these listed in a drop-down to the top right of the page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rswag::Ui.configure do |c|&#xA;  c.openapi_endpoint &#39;/api-docs/v1/openapi.json&#39;, &#39;API V1 Docs&#39;&#xA;  c.openapi_endpoint &#39;/api-docs/v2/openapi.json&#39;, &#39;API V2 Docs&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enable Simple Basic Auth for swagger-ui&lt;/h3&gt; &#xA;&lt;p&gt;You can also update the &lt;em&gt;rswag_ui.rb&lt;/em&gt; initializer, installed with rswag-ui to specify a username and password should you want to keep your documentation private.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rswag::Ui.configure do |c|&#xA;  c.basic_auth_enabled = true&#xA;  c.basic_auth_credentials &#39;username&#39;, &#39;password&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Route Prefix for the swagger-ui&lt;/h3&gt; &#xA;&lt;p&gt;Similar to rswag-api, you can customize the swagger-ui path by changing its mount prefix in &lt;em&gt;routes.rb&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;TestApp::Application.routes.draw do&#xA;  ...&#xA;&#xA;  mount Rswag::Api::Engine =&amp;gt; &#39;api-docs&#39;&#xA;  mount Rswag::Ui::Engine =&amp;gt; &#39;your-custom-prefix&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing the swagger-ui&lt;/h3&gt; &#xA;&lt;p&gt;The swagger-ui provides several options for customizing its behavior, all of which are documented here &lt;a href=&#34;https://github.com/swagger-api/swagger-ui/tree/2.x#swaggerui&#34;&gt;https://github.com/swagger-api/swagger-ui/tree/2.x#swaggerui&lt;/a&gt;. If you need to tweak these or customize the overall look and feel of your swagger-ui, then you&#39;ll need to provide your own version of index.html. You can do this with the following generator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rails g rswag:ui:custom&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add a local version that you can modify at &lt;em&gt;app/views/rswag/ui/home/index.html.erb&lt;/em&gt;. For example, it will let you to add your own &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; and favicon.&lt;/p&gt; &#xA;&lt;p&gt;To replace the &lt;em&gt;&#34;Swagger sponsored by&#34;&lt;/em&gt; brand image, you can add the following script to the generated file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;&#xA;  (function () {&#xA;  window.addEventListener(&#34;load&#34;, function () {&#xA;      setTimeout(function () {&#xA;&#xA;          var logo = document.getElementsByClassName(&#39;link&#39;);&#xA;&#xA;          logo[0].children[0].alt = &#34;My API&#34;;&#xA;          logo[0].children[0].src = &#34;/favicon.png&#34;;&#xA;      });&#xA;  }); })();&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above script would expect to find an image named &lt;code&gt;favicon.png&lt;/code&gt; in the public folder.&lt;/p&gt; &#xA;&lt;p&gt;You can also customize the swagger ui with &lt;em&gt;configuration objects.&lt;/em&gt; Rswag&#39;s &lt;code&gt;config_object&lt;/code&gt; can be used with swagger&#39;s configuration parameters found here: &lt;a href=&#34;https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/&#34;&gt;https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/&lt;/a&gt; The ui can be configured in the &lt;em&gt;config/initializers/rswag-ui.rb&lt;/em&gt; file like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rswag::Ui.configure do |c|&#xA;  c.config_object[&#39;defaultModelsExpandDepth&#39;] = 1&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serve UI Assets Directly from your Web Server&lt;/h3&gt; &#xA;&lt;p&gt;Rswag ships with an embedded version of the &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;swagger-ui&lt;/a&gt;, which is a static collection of JavaScript and CSS files. These assets are served by the rswag-ui middleware. However, for optimal performance you may want to serve them directly from your web server (e.g. Apache or NGINX). To do this, you&#39;ll need to copy them to the web server root. This is the &#34;public&#34; folder in a typical Rails application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec rake rswag:ui:copy_assets[public/api-docs]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;: The provided subfolder MUST correspond to the UI mount prefix - &#34;api-docs&#34; by default.&lt;/p&gt; &#xA;&lt;p&gt;Notes to test OpenAPI output locally with Swagger editor&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull swaggerapi/swagger-editor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 80:8080 swaggerapi/swagger-editor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run the swagger editor in the docker daemon and can be accessed at &lt;code&gt;http://localhost&lt;/code&gt;. From here, you can use the UI to load the generated openapi.json to validate the output.&lt;/p&gt; &#xA;&lt;h3&gt;Linting with RuboCop RSpec&lt;/h3&gt; &#xA;&lt;p&gt;When you lint your RSpec spec files with &lt;code&gt;rubocop-rspec&lt;/code&gt;, it will fail to detect RSpec aliases that Rswag defines. Make sure to use &lt;code&gt;rubocop-rspec&lt;/code&gt; 2.0 or newer and add the following to your &lt;code&gt;.rubocop.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;inherit_gem:&#xA;  rswag-specs: .rubocop_rspec_alias_config.yml&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>prawnpdf/prawn</title>
    <updated>2025-05-01T01:49:40Z</updated>
    <id>tag:github.com,2025-05-01:/prawnpdf/prawn</id>
    <link href="https://github.com/prawnpdf/prawn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, Nimble PDF Writer for Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prawn: Fast, Nimble PDF Generation For Ruby&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/prawn&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/prawn.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prawnpdf/prawn/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/prawnpdf/prawn/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/prawnpdf/prawn&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/prawnpdf/prawn/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/maintained-yes-brightgreen.svg?sanitize=true&#34; alt=&#34;Maintained: yes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prawn is a pure Ruby PDF generation library that provides a lot of great functionality while trying to remain simple and reasonably performant. Here are some of the important features we provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vector drawing support, including lines, polygons, curves, ellipses, etc.&lt;/li&gt; &#xA; &lt;li&gt;Extensive text rendering support, including flowing text and limited inline formatting options.&lt;/li&gt; &#xA; &lt;li&gt;Support for both PDF builtin fonts as well as embedded TrueType fonts&lt;/li&gt; &#xA; &lt;li&gt;A variety of low level tools for basic layout needs, including a simple grid system&lt;/li&gt; &#xA; &lt;li&gt;PNG and JPG image embedding, with flexible scaling options&lt;/li&gt; &#xA; &lt;li&gt;Security features including encryption and password protection&lt;/li&gt; &#xA; &lt;li&gt;Tools for rendering repeatable content (i.e headers, footers, and page numbers)&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive internationalization features, including full support for UTF-8 based fonts, right-to-left text rendering, fallback font support, and extension points for customizable text wrapping.&lt;/li&gt; &#xA; &lt;li&gt;Support for PDF outlines for document navigation&lt;/li&gt; &#xA; &lt;li&gt;Low level PDF features, allowing users to create custom extensions by dropping down all the way to the PDF object tree layer. (Mostly useful to those with knowledge of the PDF specification)&lt;/li&gt; &#xA; &lt;li&gt;Lots of other stuff!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Should You Use Prawn?&lt;/h2&gt; &#xA;&lt;p&gt;If you are looking for a highly flexible PDF document generation system, Prawn might be the tool for you. It is not a reporting tool or a publishing toolchain, though it could be fairly easily used to build those things.&lt;/p&gt; &#xA;&lt;p&gt;One thing Prawn is not, and will never be, is an HTML to PDF generator. For those needs, consider looking into &lt;a href=&#34;https://github.com/excid3/ferrum_pdf&#34;&gt;Ferrum&lt;/a&gt;. We do have basic support for inline styling but it is limited to a very small subset of functionality and is not suitable for rendering rich HTML documents.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Ruby Versions and Implementations&lt;/h2&gt; &#xA;&lt;p&gt;Because Prawn is pure Ruby and all of its runtime dependencies are maintained by us, it should work pretty much anywhere. We officially support all Ruby versions suported by Ruby Core Team and JRuby versions of matching Ruby version. However we will accept patches to fix problems on other Ruby platforms if they aren&#39;t too invasive.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Prawn&lt;/h2&gt; &#xA;&lt;p&gt;Prawn is distributed via RubyGems, and can be installed the usual way that you install gems: by simply typing &lt;code&gt;gem install prawn&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;p&gt;You can also install from git if you&#39;d like, the &lt;em&gt;master&lt;/em&gt; branch contains the latest developments. We&#39;re trying to keep &lt;code&gt;master&lt;/code&gt; branch in working order but you may encounter some rough edges and fresh bugs along with bugfixes. We encourage you to try &lt;code&gt;master&lt;/code&gt; branch with your application.&lt;/p&gt; &#xA;&lt;h2&gt;Hello World!&lt;/h2&gt; &#xA;&lt;p&gt;If the following code runs and produces a working PDF file, you&#39;ve successfully installed Prawn.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;prawn&#34;&#xA;&#xA;Prawn::Document.generate(&#34;hello.pdf&#34;) do&#xA;  text &#34;Hello World!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you&#39;ll probably want to do more interesting things than that...&lt;/p&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;p&gt;The manual is a series of examples that demonstrate use of the wide range of features Prawn provides. You can get a generated version of the latest released Prawn version on the &lt;a href=&#34;https://prawnpdf.org/&#34;&gt;Prawn website&lt;/a&gt;. The examples themselves can be found in the &lt;code&gt;manual&lt;/code&gt; directory in this repository.&lt;/p&gt; &#xA;&lt;p&gt;Please note that while the manual is a great introduction and guide to Prawn it&#39;s not exhaustive. Please refer to API docs for more complete information on what Prawn provides and how to use it.&lt;/p&gt; &#xA;&lt;p&gt;To build the manual, here&#39;s what you need to do:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;gem install -g&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rake manual&lt;/code&gt;, which will generate &lt;em&gt;manual.pdf&lt;/em&gt; in the project root&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Release Policies&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re trying to not break things unnecessarily but we don&#39;t formally follow Semantic Versioning. The reason is that we release a number of experimental APIs. We don&#39;t make any promises on their stability. You can assume the stable portion of the API follows Semantic Versioning.&lt;/p&gt; &#xA;&lt;p&gt;Also note that bug fixes can change behaviour. We don&#39;t consider that to be a breaking change for the purposes of versioning. Please test your applications after updating Prawn.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to read the release notes in &lt;a href=&#34;https://github.com/prawnpdf/prawn/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; each time we cut a new release, and lock your gems accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get help with Prawn is to post a message to our &lt;a href=&#34;https://github.com/orgs/prawnpdf/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to post any Prawn related question there, our community is very responsive and will be happy to help you figure out how to use Prawn, or help you determine whether it&#39;s the right tool for the task you are working on.&lt;/p&gt; &#xA;&lt;p&gt;Please make your posts as specific as possible, including code samples and output where relevant. Do not post any information that should not be shared publicly, and be sure to reduce your example code as much as possible so that those who are responding to your question can more easily see what the issue might be.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Prawn adheres to the &lt;a href=&#34;https://raw.githubusercontent.com/prawnpdf/prawn/master/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant&lt;/a&gt;. Unacceptable behavior can be reported to &lt;a href=&#34;mailto:conduct@prawnpdf.org&#34;&gt;conduct@prawnpdf.org&lt;/a&gt; which is monitored by the core team.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve found a bug or want to submit a patch, please enter a ticket into our &lt;a href=&#34;http://github.com/prawnpdf/prawn/issues&#34;&gt;GitHub tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We strongly encourage bug reports to come with failing tests or at least a reduced example that demonstrates the problem. Similarly, patches should include tests, API documentation, and an update to the manual where relevant. Feel free to send a pull request early though, if you just want some feedback or a code review before preparing your code to be merged.&lt;/p&gt; &#xA;&lt;p&gt;If you are unsure about whether or not you&#39;ve found a bug, or want to check to see whether we&#39;d be interested in the feature you want to add before you start working on it, feel free to post to our mailing list.&lt;/p&gt; &#xA;&lt;p&gt;You can run our test suite in a few different ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Running &lt;code&gt;rake&lt;/code&gt; will run the entire test suite excluding any unresolved issues&lt;/li&gt; &#xA; &lt;li&gt;Running &lt;code&gt;rspec&lt;/code&gt; will run the entire test suite including unresolved issues&lt;/li&gt; &#xA; &lt;li&gt;Running &lt;code&gt;rspec -t unresolved&lt;/code&gt; will run &lt;em&gt;only&lt;/em&gt; unresolved issues&lt;/li&gt; &#xA; &lt;li&gt;Running &lt;code&gt;rspec -t issue:NUMBER&lt;/code&gt; will run the tests for a specific issue&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;These filters make it possible for us to add failing test cases for bugs that are currently being researched or worked on, without breaking the typical full suite run.&lt;/p&gt; &#xA;&lt;h2&gt;Maintenance team&lt;/h2&gt; &#xA;&lt;p&gt;Prawn has always been heavily dependent on community contributions, with dozens of people contributing code over the years. In that sense, the lines have blurred to the point where we no longer have a strong distinction between core developers and contributors.&lt;/p&gt; &#xA;&lt;p&gt;That said, there are a few folks who have been responsible for cutting releases, merging important pull requests, and making major decisions about the overall direction of the project.&lt;/p&gt; &#xA;&lt;h3&gt;Current maintainers&lt;/h3&gt; &#xA;&lt;p&gt;These are the folks to contact if you have a maintenance-related issue with Prawn:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alexander Mankuta (&lt;a href=&#34;https://github.com/PointlessOne&#34;&gt;PointlessOne&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inactive maintainers&lt;/h3&gt; &#xA;&lt;p&gt;These folks have helped out in a maintenance role in the past, but are no longer actively involved in the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gregory Brown (&lt;a href=&#34;https://github.com/practicingruby&#34;&gt;practicingruby&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Brad Ediger (&lt;a href=&#34;https://github.com/bradediger&#34;&gt;bradediger&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;James Healy (&lt;a href=&#34;https://github.com/yob&#34;&gt;yob&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Daniel Nelson (&lt;a href=&#34;https://github.com/Bluejade&#34;&gt;Bluejade&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Jonathan Greenberg (&lt;a href=&#34;https://github.com/jonsgreen&#34;&gt;jonsgreen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Jamis Buck (&lt;a href=&#34;https://github.com/jamis&#34;&gt;jamis&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Evan Sharp (&lt;a href=&#34;https://github.com/PacketMonkey&#34;&gt;PacketMonkey&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Prawn is released under a slightly modified form of the License of Ruby, allowing you to choose between Matz&#39;s terms, the GPLv2, or GPLv3. For details, please see the LICENSE, GPLv2, and GPLv3 files.&lt;/p&gt; &#xA;&lt;p&gt;If you contribute to Prawn, you will retain your own copyright but must agree to license your code under the same terms as the project itself.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;Prawn was originally developed by &lt;a href=&#34;https://practicingdeveloper.com/&#34;&gt;Gregory Brown&lt;/a&gt;, under the auspices of the Ruby Mendicant Project, a grassroots initiative in which the Ruby community collectively provided funding so that Gregory could take several months off from work to focus on this project.&lt;/p&gt; &#xA;&lt;p&gt;Over the last several years, we&#39;ve received code contributions from dozens of people, which is amazing considering the low-level nature of this project. You can find the full list of folks who have at least one patch accepted to Prawn on GitHub &lt;a href=&#34;https://github.com/prawnpdf/prawn/contributors&#34;&gt;Contributors&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;After a long period of inactivity, Prawn reached its 1.0 milestone in 2014 thanks to some modest funding provided to Gregory by Madriska, Inc. (Brad Ediger&#39;s company).&lt;/p&gt;</summary>
  </entry>
</feed>