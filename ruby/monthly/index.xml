<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-01T02:11:23Z</updated>
  <subtitle>Monthly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gitlabhq/gitlabhq</title>
    <updated>2024-03-01T02:11:23Z</updated>
    <id>tag:github.com,2024-03-01:/gitlabhq/gitlabhq</id>
    <link href="https://github.com/gitlabhq/gitlabhq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitLab CE Mirror | Please open new issues in our issue tracker on GitLab.com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitLab&lt;/h1&gt; &#xA;&lt;h2&gt;Canonical source&lt;/h2&gt; &#xA;&lt;p&gt;The canonical source of GitLab where all development takes place is &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab&#34;&gt;hosted on GitLab.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to clone a copy of GitLab without proprietary code, you can use the read-only mirror of GitLab located at &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-foss/&#34;&gt;https://gitlab.com/gitlab-org/gitlab-foss/&lt;/a&gt;. However, please do not submit any issues and/or merge requests to that project.&lt;/p&gt; &#xA;&lt;h2&gt;Free trial&lt;/h2&gt; &#xA;&lt;p&gt;You can request a free trial of GitLab Ultimate &lt;a href=&#34;https://about.gitlab.com/free-trial/&#34;&gt;on our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Open source software to collaborate on code&lt;/h2&gt; &#xA;&lt;p&gt;To see how GitLab looks please see the &lt;a href=&#34;https://about.gitlab.com/features/&#34;&gt;features page on our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manage Git repositories with fine grained access controls that keep your code secure&lt;/li&gt; &#xA; &lt;li&gt;Perform code reviews and enhance collaboration with merge requests&lt;/li&gt; &#xA; &lt;li&gt;Complete continuous integration (CI) and continuous deployment/delivery (CD) pipelines to build, test, and deploy your applications&lt;/li&gt; &#xA; &lt;li&gt;Each project can also have an issue tracker, issue board, and a wiki&lt;/li&gt; &#xA; &lt;li&gt;Used by more than 100,000 organizations, GitLab is the most popular solution to manage Git repositories on-premises&lt;/li&gt; &#xA; &lt;li&gt;Completely free and open source (MIT Expat license)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Editions&lt;/h2&gt; &#xA;&lt;p&gt;There are three editions of GitLab:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitLab Community Edition (CE) is available freely under the MIT Expat license.&lt;/li&gt; &#xA; &lt;li&gt;GitLab Enterprise Edition (EE) includes &lt;a href=&#34;https://about.gitlab.com/pricing/#compare-options&#34;&gt;extra features&lt;/a&gt; that are more useful for organizations with more than 100 users. To use EE and get official support please &lt;a href=&#34;https://about.gitlab.com/pricing/&#34;&gt;become a subscriber&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;JiHu Edition (JH) tailored specifically for the &lt;a href=&#34;https://about.gitlab.cn/&#34;&gt;Chinese market&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/gitlabhq/gitlabhq/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for licensing information as it pertains to files in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Hiring&lt;/h2&gt; &#xA;&lt;p&gt;We are hiring developers, support people, and production engineers all the time, please see our &lt;a href=&#34;https://about.gitlab.com/jobs/&#34;&gt;jobs page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;p&gt;On &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;about.gitlab.com&lt;/a&gt; you can find more information about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/pricing/&#34;&gt;Subscriptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/services/&#34;&gt;Professional Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/community/&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/gitlab-com/&#34;&gt;Hosted GitLab.com&lt;/a&gt; use GitLab as a free service&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/features/#enterprise&#34;&gt;GitLab Enterprise Edition&lt;/a&gt; with additional features aimed at larger organizations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/solutions/continuous-integration/&#34;&gt;GitLab CI&lt;/a&gt; a continuous integration (CI) server that is easy to integrate with GitLab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/gitlabhq/gitlabhq/master/doc/install/requirements.md&#34;&gt;requirements documentation&lt;/a&gt; for system requirements and more information about the supported operating systems.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install GitLab is with the &lt;a href=&#34;https://about.gitlab.com/downloads/&#34;&gt;Omnibus packages&lt;/a&gt; on our package server. Compared to an installation from source, this is faster and less error prone. Just select your operating system, download the respective package (Debian or RPM) and install it using the system&#39;s package manager.&lt;/p&gt; &#xA;&lt;p&gt;There are various other options to install GitLab, please refer to the &lt;a href=&#34;https://about.gitlab.com/installation/&#34;&gt;installation page on the GitLab website&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;GitLab is an open source project and we are very happy to accept community contributions. Please refer to &lt;a href=&#34;https://about.gitlab.com/contributing/&#34;&gt;Contributing to GitLab page&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Install a development environment&lt;/h2&gt; &#xA;&lt;p&gt;To work on GitLab itself, we recommend setting up your development environment with &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-development-kit&#34;&gt;the GitLab Development Kit&lt;/a&gt;. If you do not use the GitLab Development Kit you need to install and configure all the dependencies yourself, this is a lot of work and error prone. One small thing you also have to do when installing it yourself is to copy the example development Puma configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp config/puma.example.development.rb config/puma.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instructions on how to start GitLab and how to run the tests can be found in the &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-development-kit#getting-started&#34;&gt;getting started section of the GitLab Development Kit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Software stack&lt;/h2&gt; &#xA;&lt;p&gt;GitLab is a Ruby on Rails application that runs on the following software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu/Debian/CentOS/RHEL/OpenSUSE&lt;/li&gt; &#xA; &lt;li&gt;Ruby (MRI) 3.1.4&lt;/li&gt; &#xA; &lt;li&gt;Git 2.33+&lt;/li&gt; &#xA; &lt;li&gt;Redis 6.0+&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL 12+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information please see the &lt;a href=&#34;https://docs.gitlab.com/ee/development/architecture.html&#34;&gt;architecture&lt;/a&gt; and &lt;a href=&#34;https://docs.gitlab.com/ee/install/requirements.html&#34;&gt;requirements&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h2&gt;UX design&lt;/h2&gt; &#xA;&lt;p&gt;Please adhere to the &lt;a href=&#34;https://design.gitlab.com/&#34;&gt;UX Guide&lt;/a&gt; when creating designs and implementing code.&lt;/p&gt; &#xA;&lt;h2&gt;Third-party applications&lt;/h2&gt; &#xA;&lt;p&gt;There are a lot of &lt;a href=&#34;https://about.gitlab.com/applications/&#34;&gt;third-party applications integrating with GitLab&lt;/a&gt;. These include GUI Git clients, mobile applications and API wrappers for various languages.&lt;/p&gt; &#xA;&lt;h2&gt;GitLab release cycle&lt;/h2&gt; &#xA;&lt;p&gt;For more information about the release process see the &lt;a href=&#34;https://gitlab.com/gitlab-org/release-tools/blob/master/README.md&#34;&gt;release documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;For upgrading information please see our &lt;a href=&#34;https://about.gitlab.com/update/&#34;&gt;update page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All documentation can be found on &lt;a href=&#34;https://docs.gitlab.com&#34;&gt;https://docs.gitlab.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://about.gitlab.com/getting-help/&#34;&gt;Getting help for GitLab&lt;/a&gt; on our website for the many options to get help.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://about.gitlab.com/why/&#34;&gt;Read here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Is it any good?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://about.gitlab.com/is-it-any-good/&#34;&gt;Yes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Is it awesome?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/gitlab/followers&#34;&gt;These people&lt;/a&gt; seem to like it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brianmario/mysql2</title>
    <updated>2024-03-01T02:11:23Z</updated>
    <id>tag:github.com,2024-03-01:/brianmario/mysql2</id>
    <link href="https://github.com/brianmario/mysql2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern, simple and very fast Mysql library for Ruby - binding to libmysql&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mysql2 - A modern, simple and very fast MySQL library for Ruby - binding to libmysql&lt;/h1&gt; &#xA;&lt;p&gt;GitHub Actions &lt;a href=&#34;https://github.com/brianmario/mysql2/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/brianmario/mysql2/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Status: Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brianmario/mysql2/actions/workflows/container.yml&#34;&gt;&lt;img src=&#34;https://github.com/brianmario/mysql2/actions/workflows/container.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Status: Container&#34;&gt;&lt;/a&gt; Travis CI &lt;a href=&#34;https://travis-ci.org/brianmario/mysql2&#34;&gt;&lt;img src=&#34;https://travis-ci.org/brianmario/mysql2.png&#34; alt=&#34;Travis CI Status&#34;&gt;&lt;/a&gt; Appveyor CI &lt;a href=&#34;https://ci.appveyor.com/project/sodabrew/mysql2&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/sodabrew/mysql2&#34; alt=&#34;Appveyor CI Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Mysql2 gem is meant to serve the extremely common use-case of connecting, querying and iterating on results. Some database libraries out there serve as direct 1:1 mappings of the already complex C APIs available. This one is not.&lt;/p&gt; &#xA;&lt;p&gt;It also forces the use of UTF-8 [or binary] for the connection and uses encoding-aware MySQL API calls where it can.&lt;/p&gt; &#xA;&lt;p&gt;The API consists of three classes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Mysql2::Client&lt;/code&gt; - your connection to the database.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Mysql2::Result&lt;/code&gt; - returned from issuing a #query on the connection. It includes Enumerable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Mysql2::Statement&lt;/code&gt; - returned from issuing a #prepare on the connection. Execute the statement to get a Result.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;General Instructions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install mysql2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gem links against MySQL&#39;s &lt;code&gt;libmysqlclient&lt;/code&gt; library or &lt;code&gt;Connector/C&lt;/code&gt; library, and compatible alternatives such as MariaDB. You may need to install a package such as &lt;code&gt;libmariadb-dev&lt;/code&gt;, &lt;code&gt;libmysqlclient-dev&lt;/code&gt;, &lt;code&gt;mysql-devel&lt;/code&gt;, or other appropriate package for your system. See below for system-specific instructions.&lt;/p&gt; &#xA;&lt;p&gt;By default, the mysql2 gem will try to find a copy of MySQL in this order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option &lt;code&gt;--with-mysql-dir&lt;/code&gt;, if provided (see below).&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;code&gt;--with-mysql-config&lt;/code&gt;, if provided (see below).&lt;/li&gt; &#xA; &lt;li&gt;Several typical paths for &lt;code&gt;mysql_config&lt;/code&gt; (default for the majority of users).&lt;/li&gt; &#xA; &lt;li&gt;The directory &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration options&lt;/h3&gt; &#xA;&lt;p&gt;Use these options by &lt;code&gt;gem install mysql2 -- [--optionA] [--optionB=argument]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-mysql-dir[=/path/to/mysqldir]&lt;/code&gt; - Specify the directory where MySQL is installed. The mysql2 gem will not use &lt;code&gt;mysql_config&lt;/code&gt;, but will instead look at &lt;code&gt;mysqldir/lib&lt;/code&gt; and &lt;code&gt;mysqldir/include&lt;/code&gt; for the library and header files. This option is mutually exclusive with &lt;code&gt;--with-mysql-config&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-mysql-config[=/path/to/mysql_config]&lt;/code&gt; - Specify a path to the &lt;code&gt;mysql_config&lt;/code&gt; binary provided by your copy of MySQL. The mysql2 gem will ask this &lt;code&gt;mysql_config&lt;/code&gt; binary about the compiler and linker arguments needed. This option is mutually exclusive with &lt;code&gt;--with-mysql-dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-mysql-rpath=/path/to/mysql/lib&lt;/code&gt; / &lt;code&gt;--without-mysql-rpath&lt;/code&gt; - Override the runtime path used to find the MySQL libraries. This may be needed if you deploy to a system where these libraries are located somewhere different than on your build system. This overrides any rpath calculated by default or by the options above.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-openssl-dir[=/path/to/openssl]&lt;/code&gt; - Specify the directory where OpenSSL is installed. In most cases, the Ruby runtime and MySQL client libraries will link against a system-installed OpenSSL library and this option is not needed. Use this option when non-default library paths are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-sanitize[=address,cfi,integer,memory,thread,undefined]&lt;/code&gt; - Enable sanitizers for Clang / GCC. If no argument is given, try to enable all sanitizers or fail if none are available. If a command-separated list of specific sanitizers is given, configure will fail unless they all are available. Note that the some sanitizers may incur a performance penalty, and the Address Sanitizer may require a runtime library. To see line numbers in backtraces, declare these environment variables (adjust the llvm-symbolizer path as needed for your system):&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-3.4&#xA;  export ASAN_OPTIONS=symbolize=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux and other Unixes&lt;/h3&gt; &#xA;&lt;p&gt;You may need to install a package such as &lt;code&gt;libmariadb-dev&lt;/code&gt;, &lt;code&gt;libmysqlclient-dev&lt;/code&gt;, &lt;code&gt;mysql-devel&lt;/code&gt;, or &lt;code&gt;default-libmysqlclient-dev&lt;/code&gt;; refer to your distribution&#39;s package guide to find the particular package. The most common issue we see is a user who has the library file &lt;code&gt;libmysqlclient.so&lt;/code&gt; but is missing the header file &lt;code&gt;mysql.h&lt;/code&gt; -- double check that you have the &lt;em&gt;-dev&lt;/em&gt; packages installed.&lt;/p&gt; &#xA;&lt;h3&gt;Mac OS X&lt;/h3&gt; &#xA;&lt;p&gt;You may use Homebrew, MacPorts, or a native MySQL installer package. The most common paths will be automatically searched. If you want to select a specific MySQL directory, use the &lt;code&gt;--with-mysql-dir&lt;/code&gt; or &lt;code&gt;--with-mysql-config&lt;/code&gt; options above.&lt;/p&gt; &#xA;&lt;p&gt;If you have not done so already, you will need to install the XCode select tools by running &lt;code&gt;xcode-select --install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Later versions of MacOS no longer distribute a linkable OpenSSL library. It is common to use Homebrew or MacPorts to install OpenSSL. Make sure that both the Ruby runtime and MySQL client libraries are compiled with the same OpenSSL family, 1.0 or 1.1 or 3.0, since only one can be loaded at runtime.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install openssl@1.1&#xA;$ gem install mysql2 -- --with-openssl-dir=$(brew --prefix openssl@1.1)&#xA;&#xA;or&#xA;&#xA;$ sudo port install openssl11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since most Ruby projects use Bundler, you can set build options in the Bundler config rather than manually installing a global mysql2 gem. This example shows how to set build arguments with &lt;a href=&#34;https://bundler.io/man/bundle-config.1.html&#34;&gt;Bundler config&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle config --local build.mysql2 -- --with-openssl-dir=$(brew --prefix openssl@1.1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another helpful trick is to use the same OpenSSL library that your Ruby was built with, if it was built with an alternate OpenSSL path. This example finds the argument &lt;code&gt;--with-openssl-dir=/some/path&lt;/code&gt; from the Ruby build and adds that to the &lt;a href=&#34;https://bundler.io/man/bundle-config.1.html&#34;&gt;Bundler config&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle config --local build.mysql2 -- $(ruby -r rbconfig -e &#39;puts RbConfig::CONFIG[&#34;configure_args&#34;]&#39; | xargs -n1 | grep with-openssl-dir)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the additional double dashes (&lt;code&gt;--&lt;/code&gt;) these separate command-line arguments that &lt;code&gt;gem&lt;/code&gt; or &lt;code&gt;bundler&lt;/code&gt; interpret from the addiitonal arguments that are passed to the mysql2 build process.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Make sure that you have Ruby and the DevKit compilers installed. We recommend the &lt;a href=&#34;http://rubyinstaller.org&#34;&gt;Ruby Installer&lt;/a&gt; distribution.&lt;/p&gt; &#xA;&lt;p&gt;By default, the mysql2 gem will download and use MySQL Connector/C from mysql.com. If you prefer to use a local installation of Connector/C, add the flag &lt;code&gt;--with-mysql-dir=c:/mysql-connector-c-x-y-z&lt;/code&gt; (&lt;em&gt;this path may use forward slashes&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;libmysql.dll&lt;/code&gt; library will be copied into the mysql2 gem directory. To prevent this, add the flag &lt;code&gt;--no-vendor-libmysql&lt;/code&gt;. The mysql2 gem will search for &lt;code&gt;libmysql.dll&lt;/code&gt; in the following paths, in order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Environment variable &lt;code&gt;RUBY_MYSQL2_LIBMYSQL_DLL=C:\path\to\libmysql.dll&lt;/code&gt; (&lt;em&gt;note the Windows-style backslashes&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;In the mysql2 gem&#39;s own directory &lt;code&gt;vendor/libmysql.dll&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the system&#39;s default library search paths.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Connect to a database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# this takes a hash of options, almost all of which map directly&#xA;# to the familiar database.yml in rails&#xA;# See http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html&#xA;client = Mysql2::Client.new(:host =&amp;gt; &#34;localhost&#34;, :username =&amp;gt; &#34;root&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then query it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;results = client.query(&#34;SELECT * FROM users WHERE group=&#39;githubbers&#39;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Need to escape something first?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;escaped = client.escape(&#34;gi&#39;thu\&#34;bbe\0r&#39;s&#34;)&#xA;results = client.query(&#34;SELECT * FROM users WHERE group=&#39;#{escaped}&#39;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get a count of your results with &lt;code&gt;results.count&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, iterate over the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;results.each do |row|&#xA;  # conveniently, row is a hash&#xA;  # the keys are the fields, as you&#39;d expect&#xA;  # the values are pre-built ruby primitives mapped from their corresponding field types in MySQL&#xA;  puts row[&#34;id&#34;] # row[&#34;id&#34;].is_a? Integer&#xA;  if row[&#34;dne&#34;]  # non-existent hash entry is nil&#xA;    puts row[&#34;dne&#34;]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you might just keep it simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.query(&#34;SELECT * FROM users WHERE group=&#39;githubbers&#39;&#34;).each do |row|&#xA;  # do something with row, it&#39;s ready to rock&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How about with symbolized keys?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.query(&#34;SELECT * FROM users WHERE group=&#39;githubbers&#39;&#34;, :symbolize_keys =&amp;gt; true).each do |row|&#xA;  # do something with row, it&#39;s ready to rock&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get the headers, columns, and the field types in the order that they were returned by the query like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;headers = results.fields # &amp;lt;= that&#39;s an array of field names, in order&#xA;types = results.field_types # &amp;lt;= that&#39;s an array of field types, in order&#xA;results.each(:as =&amp;gt; :array) do |row|&#xA;  # Each row is an array, ordered the same as the query results&#xA;  # An otter&#39;s den is called a &#34;holt&#34; or &#34;couch&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prepared statements are supported, as well. In a prepared statement, use a &lt;code&gt;?&lt;/code&gt; in place of each value and then execute the statement to retrieve a result set. Pass your arguments to the execute method in the same number and order as the question marks in the statement. Query options can be passed as keyword arguments to the execute method.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to read about the known limitations of prepared statements at &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/en/c-api-prepared-statement-problems.html&#34;&gt;https://dev.mysql.com/doc/refman/5.6/en/c-api-prepared-statement-problems.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;statement = @client.prepare(&#34;SELECT * FROM users WHERE login_count = ?&#34;)&#xA;result1 = statement.execute(1)&#xA;result2 = statement.execute(2)&#xA;&#xA;statement = @client.prepare(&#34;SELECT * FROM users WHERE last_login &amp;gt;= ? AND location LIKE ?&#34;)&#xA;result = statement.execute(1, &#34;CA&#34;)&#xA;&#xA;statement = @client.prepare(&#34;SELECT * FROM users WHERE last_login &amp;gt;= ? AND location LIKE ?&#34;)&#xA;result = statement.execute(1, &#34;CA&#34;, :as =&amp;gt; :array)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Session Tracking information can be accessed with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;c = Mysql2::Client.new(&#xA;  host: &#34;127.0.0.1&#34;,&#xA;  username: &#34;root&#34;,&#xA;  flags: &#34;SESSION_TRACK&#34;,&#xA;  init_command: &#34;SET @@SESSION.session_track_schema=ON&#34;&#xA;)&#xA;c.query(&#34;INSERT INTO test VALUES (1)&#34;)&#xA;session_track_type = Mysql2::Client::SESSION_TRACK_SCHEMA&#xA;session_track_data = c.session_track(session_track_type)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The types of session track types can be found at &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/session-state-tracking.html&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/session-state-tracking.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Connection options&lt;/h2&gt; &#xA;&lt;p&gt;You may set the following connection options in Mysql2::Client.new(...):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Mysql2::Client.new(&#xA;  :host,&#xA;  :username,&#xA;  :password,&#xA;  :port,&#xA;  :database,&#xA;  :socket = &#39;/path/to/mysql.sock&#39;,&#xA;  :flags = REMEMBER_OPTIONS | LONG_PASSWORD | LONG_FLAG | TRANSACTIONS | PROTOCOL_41 | SECURE_CONNECTION | MULTI_STATEMENTS,&#xA;  :encoding = &#39;utf8&#39;,&#xA;  :read_timeout = seconds,&#xA;  :write_timeout = seconds,&#xA;  :connect_timeout = seconds,&#xA;  :connect_attrs = {:program_name =&amp;gt; $PROGRAM_NAME, ...},&#xA;  :reconnect = true/false,&#xA;  :local_infile = true/false,&#xA;  :secure_auth = true/false,&#xA;  :default_file = &#39;/path/to/my.cfg&#39;,&#xA;  :default_group = &#39;my.cfg section&#39;,&#xA;  :default_auth = &#39;authentication_windows_client&#39;&#xA;  :init_command =&amp;gt; sql&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connecting to MySQL on localhost and elsewhere&lt;/h3&gt; &#xA;&lt;p&gt;The underlying MySQL client library uses the &lt;code&gt;:host&lt;/code&gt; parameter to determine the type of connection to make, with special interpretation you should be aware of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An empty value or &lt;code&gt;&#34;localhost&#34;&lt;/code&gt; will attempt a local connection: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On Unix, connect to the default local socket path. (To set a custom socket path, use the &lt;code&gt;:socket&lt;/code&gt; parameter).&lt;/li&gt; &#xA;   &lt;li&gt;On Windows, connect using a shared-memory connection, if enabled, or TCP.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A value of &lt;code&gt;&#34;.&#34;&lt;/code&gt; on Windows specifies a named-pipe connection.&lt;/li&gt; &#xA; &lt;li&gt;An IPv4 or IPv6 address will result in a TCP connection.&lt;/li&gt; &#xA; &lt;li&gt;Any other value will be looked up as a hostname for a TCP connection.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SSL/TLS options&lt;/h3&gt; &#xA;&lt;p&gt;Setting any of the following options will enable an SSL/TLS connection, but only if your MySQL client library and server have been compiled with SSL support. MySQL client library defaults will be used for any parameters that are left out or set to nil. Relative paths are allowed, and may be required by managed hosting providers such as Heroku.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Mysql2::Client.new(&#xA;  # ...options as above...,&#xA;  :sslkey =&amp;gt; &#39;/path/to/client-key.pem&#39;,&#xA;  :sslcert =&amp;gt; &#39;/path/to/client-cert.pem&#39;,&#xA;  :sslca =&amp;gt; &#39;/path/to/ca-cert.pem&#39;,&#xA;  :sslcapath =&amp;gt; &#39;/path/to/cacerts&#39;,&#xA;  :sslcipher =&amp;gt; &#39;DHE-RSA-AES256-SHA&#39;,&#xA;  :sslverify =&amp;gt; true, # Removed in MySQL 8.0&#xA;  :ssl_mode =&amp;gt; :disabled / :preferred / :required / :verify_ca / :verify_identity,&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For MySQL versions 5.7.11 and higher, use &lt;code&gt;:ssl_mode&lt;/code&gt; to prefer or require an SSL connection and certificate validation. For earlier versions of MySQL, use the &lt;code&gt;:sslverify&lt;/code&gt; boolean. For details on each of the &lt;code&gt;:ssl_mode&lt;/code&gt; options, see &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/connection-options.html#option_general_ssl-mode&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/connection-options.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;:ssl_mode&lt;/code&gt; option will also set the appropriate MariaDB connection flags:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;:ssl_mode&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;MariaDB option value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:disabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MYSQL_OPT_SSL_ENFORCE = 0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:required&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MYSQL_OPT_SSL_ENFORCE = 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:verify_identity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MYSQL_OPT_SSL_VERIFY_SERVER_CERT = 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;MariaDB does not support the &lt;code&gt;:preferred&lt;/code&gt; or &lt;code&gt;:verify_ca&lt;/code&gt; options. For more information about SSL/TLS in MariaDB, see &lt;a href=&#34;https://mariadb.com/kb/en/securing-connections-for-client-and-server/&#34;&gt;https://mariadb.com/kb/en/securing-connections-for-client-and-server/&lt;/a&gt; and &lt;a href=&#34;https://mariadb.com/kb/en/mysql_optionsv/#tls-options&#34;&gt;https://mariadb.com/kb/en/mysql_optionsv/#tls-options&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Secure auth&lt;/h3&gt; &#xA;&lt;p&gt;Starting with MySQL 5.6.5, secure_auth is enabled by default on servers (it was disabled by default prior to this). When secure_auth is enabled, the server will refuse a connection if the account password is stored in old pre-MySQL 4.1 format. The MySQL 5.6.5 client library may also refuse to attempt a connection if provided an older format password. To bypass this restriction in the client, pass the option &lt;code&gt;:secure_auth =&amp;gt; false&lt;/code&gt; to Mysql2::Client.new().&lt;/p&gt; &#xA;&lt;h3&gt;Flags option parsing&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;:flags&lt;/code&gt; parameter accepts an integer, a string, or an array. The integer form allows the client to assemble flags from constants defined under &lt;code&gt;Mysql2::Client&lt;/code&gt; such as &lt;code&gt;Mysql2::Client::FOUND_ROWS&lt;/code&gt;. Use a bitwise &lt;code&gt;|&lt;/code&gt; (OR) to specify several flags.&lt;/p&gt; &#xA;&lt;p&gt;The string form will be split on whitespace and parsed as with the array form: Plain flags are added to the default flags, while flags prefixed with &lt;code&gt;-&lt;/code&gt; (minus) are removed from the default flags.&lt;/p&gt; &#xA;&lt;h3&gt;Using Active Record&#39;s database.yml&lt;/h3&gt; &#xA;&lt;p&gt;Active Record typically reads its configuration from a file named &lt;code&gt;database.yml&lt;/code&gt; or an environment variable &lt;code&gt;DATABASE_URL&lt;/code&gt;. Use the value &lt;code&gt;mysql2&lt;/code&gt; as the adapter name. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;development:&#xA;  adapter: mysql2&#xA;  encoding: utf8&#xA;  database: my_db_name&#xA;  username: root&#xA;  password: my_password&#xA;  host: 127.0.0.1&#xA;  port: 3306&#xA;  flags:&#xA;    - -COMPRESS&#xA;    - FOUND_ROWS&#xA;    - MULTI_STATEMENTS&#xA;  secure_auth: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the compression flag is negated with &lt;code&gt;-COMPRESS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using Active Record&#39;s DATABASE_URL&lt;/h3&gt; &#xA;&lt;p&gt;Active Record typically reads its configuration from a file named &lt;code&gt;database.yml&lt;/code&gt; or an environment variable &lt;code&gt;DATABASE_URL&lt;/code&gt;. Use the value &lt;code&gt;mysql2&lt;/code&gt; as the protocol name. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DATABASE_URL=mysql2://sql_user:sql_pass@sql_host_name:port/sql_db_name?option1=value1&amp;amp;option2=value2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading a MySQL config file&lt;/h3&gt; &#xA;&lt;p&gt;You may read configuration options from a MySQL configuration file by passing the &lt;code&gt;:default_file&lt;/code&gt; and &lt;code&gt;:default_group&lt;/code&gt; parameters. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Mysql2::Client.new(:default_file =&amp;gt; &#39;/user/.my.cnf&#39;, :default_group =&amp;gt; &#39;client&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Initial command on connect and reconnect&lt;/h3&gt; &#xA;&lt;p&gt;If you specify the &lt;code&gt;:init_command&lt;/code&gt; option, the SQL string you provide will be executed after the connection is established. If &lt;code&gt;:reconnect&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, init_command will also be executed after a successful reconnect. It is useful if you want to provide session options which survive reconnection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Mysql2::Client.new(:init_command =&amp;gt; &#34;SET @@SESSION.sql_mode = &#39;STRICT_ALL_TABLES&#39;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple result sets&lt;/h3&gt; &#xA;&lt;p&gt;You can also retrieve multiple result sets. For this to work you need to connect with flags &lt;code&gt;Mysql2::Client::MULTI_STATEMENTS&lt;/code&gt;. Multiple result sets can be used with stored procedures that return more than one result set, and for bundling several SQL statements into a single call to &lt;code&gt;client.query&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Mysql2::Client.new(:host =&amp;gt; &#34;localhost&#34;, :username =&amp;gt; &#34;root&#34;, :flags =&amp;gt; Mysql2::Client::MULTI_STATEMENTS)&#xA;result = client.query(&#39;CALL sp_customer_list( 25, 10 )&#39;)&#xA;# result now contains the first result set&#xA;while client.next_result&#xA;  result = client.store_result&#xA;  # result now contains the next result set&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Repeated calls to &lt;code&gt;client.next_result&lt;/code&gt; will return true, false, or raise an exception if the respective query erred. When &lt;code&gt;client.next_result&lt;/code&gt; returns true, call &lt;code&gt;client.store_result&lt;/code&gt; to retrieve a result object. Exceptions are not raised until &lt;code&gt;client.next_result&lt;/code&gt; is called to find the status of the respective query. Subsequent queries are not executed if an earlier query raised an exception. Subsequent calls to &lt;code&gt;client.next_result&lt;/code&gt; will return false.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;result = client.query(&#39;SELECT 1; SELECT 2; SELECT A; SELECT 3&#39;)&#xA;p result.first&#xA;&#xA;while client.next_result&#xA;  result = client.store_result&#xA;  p result.first&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{&#34;1&#34;=&amp;gt;1}&#xA;{&#34;2&#34;=&amp;gt;2}&#xA;next_result: Unknown column &#39;A&#39; in &#39;field list&#39; (Mysql2::Error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cascading config&lt;/h2&gt; &#xA;&lt;p&gt;The default config hash is at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Mysql2::Client.default_query_options&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which defaults to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{:async =&amp;gt; false, :as =&amp;gt; :hash, :symbolize_keys =&amp;gt; false}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;that can be used as so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# these are the defaults all Mysql2::Client instances inherit&#xA;Mysql2::Client.default_query_options.merge!(:as =&amp;gt; :array)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# this will change the defaults for all future results returned by the #query method _for this connection only_&#xA;c = Mysql2::Client.new&#xA;c.query_options.merge!(:symbolize_keys =&amp;gt; true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# this will set the options for the Mysql2::Result instance returned from the #query method&#xA;c = Mysql2::Client.new&#xA;c.query(sql, :symbolize_keys =&amp;gt; true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# this will set the options for the Mysql2::Result instance returned from the #execute method&#xA;c = Mysql2::Client.new&#xA;s = c.prepare(sql)&#xA;s.execute(arg1, args2, :symbolize_keys =&amp;gt; true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Result types&lt;/h2&gt; &#xA;&lt;h3&gt;Array of Arrays&lt;/h3&gt; &#xA;&lt;p&gt;Pass the &lt;code&gt;:as =&amp;gt; :array&lt;/code&gt; option to any of the above methods of configuration&lt;/p&gt; &#xA;&lt;h3&gt;Array of Hashes&lt;/h3&gt; &#xA;&lt;p&gt;The default result type is set to &lt;code&gt;:hash&lt;/code&gt;, but you can override a previous setting to something else with &lt;code&gt;:as =&amp;gt; :hash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Timezones&lt;/h3&gt; &#xA;&lt;p&gt;Mysql2 now supports two timezone options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;:database_timezone # this is the timezone Mysql2 will assume fields are already stored as, and will use this when creating the initial Time objects in ruby&#xA;:application_timezone # this is the timezone Mysql2 will convert to before finally handing back to the caller&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In other words, if &lt;code&gt;:database_timezone&lt;/code&gt; is set to &lt;code&gt;:utc&lt;/code&gt; - Mysql2 will create the Time objects using &lt;code&gt;Time.utc(...)&lt;/code&gt; from the raw value libmysql hands over initially. Then, if &lt;code&gt;:application_timezone&lt;/code&gt; is set to say - &lt;code&gt;:local&lt;/code&gt; - Mysql2 will then convert the just-created UTC Time object to local time.&lt;/p&gt; &#xA;&lt;p&gt;Both options only allow two values - &lt;code&gt;:local&lt;/code&gt; or &lt;code&gt;:utc&lt;/code&gt; - with the exception that &lt;code&gt;:application_timezone&lt;/code&gt; can be [and defaults to] nil&lt;/p&gt; &#xA;&lt;h3&gt;Casting &#34;boolean&#34; columns&lt;/h3&gt; &#xA;&lt;p&gt;You can now tell Mysql2 to cast &lt;code&gt;tinyint(1)&lt;/code&gt; fields to boolean values in Ruby with the &lt;code&gt;:cast_booleans&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Mysql2::Client.new&#xA;result = client.query(&#34;SELECT * FROM table_with_boolean_field&#34;, :cast_booleans =&amp;gt; true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that this works only with fields and not with computed values, e.g. this result will contain &lt;code&gt;1&lt;/code&gt;, not &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Mysql2::Client.new&#xA;result = client.query(&#34;SELECT true&#34;, :cast_booleans =&amp;gt; true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CAST function wouldn&#39;t help here as there&#39;s no way to cast to TINYINT(1). Apparently the only way to solve this is to use a stored procedure with return type set to TINYINT(1).&lt;/p&gt; &#xA;&lt;h3&gt;Skipping casting&lt;/h3&gt; &#xA;&lt;p&gt;Mysql2 casting is fast, but not as fast as not casting data. In rare cases where typecasting is not needed, it will be faster to disable it by providing :cast =&amp;gt; false. (Note that :cast =&amp;gt; false overrides :cast_booleans =&amp;gt; true.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Mysql2::Client.new&#xA;result = client.query(&#34;SELECT * FROM table&#34;, :cast =&amp;gt; false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are the results from the &lt;code&gt;query_without_mysql_casting.rb&lt;/code&gt; script in the benchmarks folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;                           user     system      total        real&#xA;Mysql2 (cast: true)    0.340000   0.000000   0.340000 (  0.405018)&#xA;Mysql2 (cast: false)   0.160000   0.010000   0.170000 (  0.209937)&#xA;Mysql                  0.080000   0.000000   0.080000 (  0.129355)&#xA;do_mysql               0.520000   0.010000   0.530000 (  0.574619)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although Mysql2 performs reasonably well at retrieving uncasted data, it (currently) is not as fast as the Mysql gem. In spite of this small disadvantage, Mysql2 still sports a friendlier interface and doesn&#39;t block the entire ruby process when querying.&lt;/p&gt; &#xA;&lt;h3&gt;Async&lt;/h3&gt; &#xA;&lt;p&gt;NOTE: Not supported on Windows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Mysql2::Client&lt;/code&gt; takes advantage of the MySQL C API&#39;s (undocumented) non-blocking function mysql_send_query for &lt;em&gt;all&lt;/em&gt; queries. But, in order to take full advantage of it in your Ruby code, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.query(&#34;SELECT sleep(5)&#34;, :async =&amp;gt; true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will return nil immediately. At this point you&#39;ll probably want to use some socket monitoring mechanism like EventMachine or even IO.select. Once the socket becomes readable, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# result will be a Mysql2::Result instance&#xA;result = client.async_result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Because of the way MySQL&#39;s query API works, this method will block until the result is ready. So if you really need things to stay async, it&#39;s best to just monitor the socket with something like EventMachine. If you need multiple query concurrency take a look at using a connection pool.&lt;/p&gt; &#xA;&lt;h3&gt;Row Caching&lt;/h3&gt; &#xA;&lt;p&gt;By default, Mysql2 will cache rows that have been created in Ruby (since this happens lazily). This is especially helpful since it saves the cost of creating the row in Ruby if you were to iterate over the collection again.&lt;/p&gt; &#xA;&lt;p&gt;If you only plan on using each row once, then it&#39;s much more efficient to disable this behavior by setting the &lt;code&gt;:cache_rows&lt;/code&gt; option to false. This would be helpful if you wanted to iterate over the results in a streaming manner. Meaning the GC would cleanup rows you don&#39;t need anymore as you&#39;re iterating over the result set.&lt;/p&gt; &#xA;&lt;h3&gt;Streaming&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Mysql2::Client&lt;/code&gt; can optionally only fetch rows from the server on demand by setting &lt;code&gt;:stream =&amp;gt; true&lt;/code&gt;. This is handy when handling very large result sets which might not fit in memory on the client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;result = client.query(&#34;SELECT * FROM really_big_Table&#34;, :stream =&amp;gt; true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a few things that need to be kept in mind while using streaming:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:cache_rows&lt;/code&gt; is ignored currently. (if you want to use &lt;code&gt;:cache_rows&lt;/code&gt; you probably don&#39;t want to be using &lt;code&gt;:stream&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You must fetch all rows in the result set of your query before you can make new queries. (i.e. with &lt;code&gt;Mysql2::Result#each&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about the consequences of using &lt;code&gt;mysql_use_result&lt;/code&gt; (what streaming is implemented with) here: &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/mysql-use-result.html&#34;&gt;http://dev.mysql.com/doc/refman/5.0/en/mysql-use-result.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Lazy Everything&lt;/h3&gt; &#xA;&lt;p&gt;Well... almost ;)&lt;/p&gt; &#xA;&lt;p&gt;Field name strings/symbols are shared across all the rows so only one object is ever created to represent the field name for an entire dataset.&lt;/p&gt; &#xA;&lt;p&gt;Rows themselves are lazily created in ruby-land when an attempt to yield it is made via #each. For example, if you were to yield 4 rows from a 100 row dataset, only 4 hashes will be created. The rest will sit and wait in C-land until you want them (or when the GC goes to cleanup your &lt;code&gt;Mysql2::Result&lt;/code&gt; instance). Now say you were to iterate over that same collection again, this time yielding 15 rows - the 4 previous rows that had already been turned into ruby hashes would be pulled from an internal cache, then 11 more would be created and stored in that cache. Once the entire dataset has been converted into ruby objects, Mysql2::Result will free the Mysql C result object as it&#39;s no longer needed.&lt;/p&gt; &#xA;&lt;p&gt;This caching behavior can be disabled by setting the &lt;code&gt;:cache_rows&lt;/code&gt; option to false.&lt;/p&gt; &#xA;&lt;p&gt;As for field values themselves, I&#39;m workin on it - but expect that soon.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;This gem is tested with the following Ruby versions on Linux and Mac OS X:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby MRI 2.0 through 2.7 (all versions to date)&lt;/li&gt; &#xA; &lt;li&gt;Ruby MRI 3.0, 3.1, 3.2 (all versions to date)&lt;/li&gt; &#xA; &lt;li&gt;Rubinius 2.x and 3.x do work but may fail under some workloads&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This gem is tested with the following MySQL and MariaDB versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MySQL 5.5, 5.6, 5.7, 8.0&lt;/li&gt; &#xA; &lt;li&gt;MySQL Connector/C 6.0, 6.1, 8.0 (primarily on Windows)&lt;/li&gt; &#xA; &lt;li&gt;MariaDB 5.5, 10.x, with a focus on 10.6 LTS and 10.11 LTS&lt;/li&gt; &#xA; &lt;li&gt;MariaDB Connector/C 2.x, 3.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ruby on Rails / Active Record&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mysql2 0.5.x works with Rails / Active Record 4.2.11, 5.0.7, 5.1.6, and higher.&lt;/li&gt; &#xA; &lt;li&gt;mysql2 0.4.x works with Rails / Active Record 4.2.5 - 5.0 and higher.&lt;/li&gt; &#xA; &lt;li&gt;mysql2 0.3.x works with Rails / Active Record 3.1, 3.2, 4.x, 5.0.&lt;/li&gt; &#xA; &lt;li&gt;mysql2 0.2.x works with Rails / Active Record 2.3 - 3.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Asynchronous Active Record&lt;/h3&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/igrigorik/em-synchrony&#34;&gt;em-synchrony&lt;/a&gt; project for details about using EventMachine with mysql2 and Rails.&lt;/p&gt; &#xA;&lt;h3&gt;Sequel&lt;/h3&gt; &#xA;&lt;p&gt;Sequel includes a mysql2 adapter in all releases since 3.15 (2010-09-01). Use the prefix &#34;mysql2://&#34; in your connection specification.&lt;/p&gt; &#xA;&lt;h3&gt;EventMachine&lt;/h3&gt; &#xA;&lt;p&gt;The mysql2 EventMachine deferrable api allows you to make async queries using EventMachine, while specifying callbacks for success for failure. Here&#39;s a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;mysql2/em&#39;&#xA;&#xA;EM.run do&#xA;  client1 = Mysql2::EM::Client.new&#xA;  defer1 = client1.query &#34;SELECT sleep(3) as first_query&#34;&#xA;  defer1.callback do |result|&#xA;    puts &#34;Result: #{result.to_a.inspect}&#34;&#xA;  end&#xA;&#xA;  client2 = Mysql2::EM::Client.new&#xA;  defer2 = client2.query &#34;SELECT sleep(1) second_query&#34;&#xA;  defer2.callback do |result|&#xA;    puts &#34;Result: #{result.to_a.inspect}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarks and Comparison&lt;/h2&gt; &#xA;&lt;p&gt;The mysql2 gem converts MySQL field types to Ruby data types in C code, providing a serious speed benefit.&lt;/p&gt; &#xA;&lt;p&gt;The do_mysql gem also converts MySQL fields types, but has a considerably more complex API and is still ~2x slower than mysql2.&lt;/p&gt; &#xA;&lt;p&gt;The mysql gem returns only nil or string data types, leaving you to convert field values to Ruby types in Ruby-land, which is much slower than mysql2&#39;s C code.&lt;/p&gt; &#xA;&lt;p&gt;For a comparative benchmark, the script below performs a basic &#34;SELECT * FROM&#34; query on a table with 30k rows and fields of nearly every Ruby-representable data type, then iterating over every row using an #each like method yielding a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;         user       system     total       real&#xA;Mysql2   0.750000   0.180000   0.930000   (1.821655)&#xA;do_mysql 1.650000   0.200000   1.850000   (2.811357)&#xA;Mysql    7.500000   0.210000   7.710000   (8.065871)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These results are from the &lt;code&gt;query_with_mysql_casting.rb&lt;/code&gt; script in the benchmarks folder.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Use &#39;bundle install&#39; to install the necessary development and testing gems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle install&#xA;rake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tests require the &#34;test&#34; database to exist, and expect to connect both as root and the running user, both with a blank password:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE test;&#xA;CREATE USER &#39;&amp;lt;user&amp;gt;&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;&#39;;&#xA;GRANT ALL PRIVILEGES ON test.* TO &#39;&amp;lt;user&amp;gt;&#39;@&#39;localhost&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change these defaults in the spec/configuration.yml which is generated automatically when you run rake (or explicitly &lt;code&gt;rake spec/configuration.yml&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For a normal installation on a Mac, you most likely do not need to do anything, though.&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Eric Wong - for the contribution (and the informative explanations) of some thread-safety, non-blocking I/O and cleanup patches. You rock dude&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/yury&#34;&gt;Yury Korolev&lt;/a&gt; - for TONS of help testing the Active Record adapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/tenderlove&#34;&gt;Aaron Patterson&lt;/a&gt; - tons of contributions, suggestions and general badassness&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/mperham&#34;&gt;Mike Perham&lt;/a&gt; - Async Active Record adapter (uses Fibers and EventMachine)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/sodabrew&#34;&gt;Aaron Stone&lt;/a&gt; - additional client settings, local files, microsecond time, maintenance support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nyaxt&#34;&gt;Kouhei Ueno&lt;/a&gt; - for the original work on Prepared Statements way back in 2012&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/johncant&#34;&gt;John Cant&lt;/a&gt; - polishing and updating Prepared Statements support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/justincase&#34;&gt;Justin Case&lt;/a&gt; - polishing and updating Prepared Statements support and getting it merged&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/tamird&#34;&gt;Tamir Duberstein&lt;/a&gt; - for help with timeouts and all around updates and cleanups&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/junaruga&#34;&gt;Jun Aruga&lt;/a&gt; - for migrating CI tests to GitHub Actions and other improvements&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>maybe-finance/maybe</title>
    <updated>2024-03-01T02:11:23Z</updated>
    <id>tag:github.com,2024-03-01:/maybe-finance/maybe</id>
    <link href="https://github.com/maybe-finance/maybe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The OS for your personal finances&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;1440&#34; alt=&#34;dashboard_mockup&#34; src=&#34;https://github.com/maybe-finance/maybe/assets/35243/a7763d0e-a942-42db-bde7-eb8d28106917&#34;&gt; &#xA;&lt;sup&gt;&lt;i&gt;(Note: The image above is a mockup of what we&#39;re working towards. We&#39;re rapidly approaching the functionality shown, but not all of the parts are ready just yet.)&lt;/i&gt;&lt;/sup&gt; &#xA;&lt;h1&gt;Maybe: The OS for your personal finances&lt;/h1&gt; &#xA;&lt;p&gt;&lt;b&gt;Get involved: &lt;a href=&#34;https://link.maybe.co/discord&#34;&gt;Discord&lt;/a&gt; • &lt;a href=&#34;https://maybe.co&#34;&gt;Website&lt;/a&gt; • &lt;a href=&#34;https://github.com/maybe-finance/maybe/issues&#34;&gt;Issues&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you&#39;re looking for the previous React codebase, you can find it at &lt;a href=&#34;https://github.com/maybe-finance/maybe-archive&#34;&gt;maybe-finance/maybe-archive&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backstory&lt;/h2&gt; &#xA;&lt;p&gt;We spent the better part of 2021/2022 building a personal finance + wealth management app called, Maybe. Very full-featured, including an &#34;Ask an Advisor&#34; feature which connected users with an actual CFP/CFA to help them with their finances (all included in your subscription).&lt;/p&gt; &#xA;&lt;p&gt;The business end of things didn&#39;t work out, and so we shut things down mid-2023.&lt;/p&gt; &#xA;&lt;p&gt;We spent the better part of $1,000,000 building the app (employees + contractors, data providers/services, infrastructure, etc.).&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re now reviving the product as a fully open-source project. The goal is to let you run the app yourself, for free, and use it to manage your own finances and eventually offer a hosted version of the app for a small monthly fee.&lt;/p&gt; &#xA;&lt;h2&gt;Local Development Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby &amp;gt;3 (see &lt;code&gt;Gemfile&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL &amp;gt;9.3 (ideally, latest stable version)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After cloning the repo, the basic setup commands are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd maybe&#xA;cp .env.example .env&#xA;bin/setup&#xA;bin/dev&#xA;&#xA;# Optionally, load demo data&#xA;rake demo_data:reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And visit &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to see the app. You can use the following credentials to log in (generated by DB seed):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;code&gt;user@maybe.local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: &lt;code&gt;password&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For further instructions, see guides below.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-currency support&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like multi-currency support, there are a few extra steps to follow.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sign up for an API key at &lt;a href=&#34;https://openexchangerates.org/signup&#34;&gt;Open Exchange Rates&lt;/a&gt;. For now, you&#39;ll need the Developer plan, which is $12/mo.&lt;/li&gt; &#xA; &lt;li&gt;Add your API key to your &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Set the currencies you&#39;d like to support in the &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rake currencies:seed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rake exchange_rates:sync&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Setup Guides&lt;/h3&gt; &#xA;&lt;h4&gt;Dev Container (optional)&lt;/h4&gt; &#xA;&lt;p&gt;This is 100% optional and meant for devs who don&#39;t want to worry about installing requirements manually for their platform. You can follow &lt;a href=&#34;https://code.visualstudio.com/docs/devcontainers/containers&#34;&gt;this guide&lt;/a&gt; to learn more about Dev Containers.&lt;/p&gt; &#xA;&lt;p&gt;If you run into &lt;code&gt;could not connect to server&lt;/code&gt; errors, you may need to change your &lt;code&gt;.env&lt;/code&gt;&#39;s &lt;code&gt;DB_HOST&lt;/code&gt; environment variable value to &lt;code&gt;db&lt;/code&gt; to point to the Postgres container.&lt;/p&gt; &#xA;&lt;h4&gt;Mac&lt;/h4&gt; &#xA;&lt;p&gt;Please visit our &lt;a href=&#34;https://github.com/maybe-finance/maybe/wiki/Mac-Dev-Setup-Guide&#34;&gt;Mac dev setup guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;Please visit our &lt;a href=&#34;https://github.com/maybe-finance/maybe/wiki/Linux-Dev-Setup-Guide&#34;&gt;Linux dev setup guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Please visit our &lt;a href=&#34;https://github.com/maybe-finance/maybe/wiki/Windows-Dev-Setup-Guide&#34;&gt;Windows dev setup guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Testing Emails&lt;/h3&gt; &#xA;&lt;p&gt;In development, we use &lt;code&gt;letter_opener&lt;/code&gt; to automatically open emails in your browser. When an email sends locally, a new browser tab will open with a preview.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Before contributing, you&#39;ll likely find it helpful to &lt;a href=&#34;https://github.com/maybe-finance/maybe/wiki&#34;&gt;understand context and general vision/direction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve done that, please visit our &lt;a href=&#34;https://github.com/maybe-finance/maybe/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to get started!&lt;/p&gt; &#xA;&lt;h2&gt;Self Hosting&lt;/h2&gt; &#xA;&lt;p&gt;Our long term goal is to make self-hosting as easy as possible. That said, during these early stages of building the product, we are focusing our efforts on development.&lt;/p&gt; &#xA;&lt;p&gt;We will update this section as we get closer to an initial release.&lt;/p&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://github.com/maybe-finance/maybe/wiki/Self-Hosting-Setup-Guide&#34;&gt;guide on self hosting here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Repo Activity&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/7866c9790deba0baf63ca1688b209130b306ea4e.svg?sanitize=true&#34; alt=&#34;Repo Activity&#34; title=&#34;Repobeats analytics image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Copyright &amp;amp; license&lt;/h2&gt; &#xA;&lt;p&gt;Maybe is distributed under an &lt;a href=&#34;https://github.com/maybe-finance/maybe/raw/main/LICENSE&#34;&gt;AGPLv3 license&lt;/a&gt;. &#34;Maybe&#34; is a trademark of Maybe Finance, Inc.&lt;/p&gt;</summary>
  </entry>
</feed>