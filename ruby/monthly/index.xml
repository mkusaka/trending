<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-01T01:54:41Z</updated>
  <subtitle>Monthly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheOdinProject/theodinproject</title>
    <updated>2024-07-01T01:54:41Z</updated>
    <id>tag:github.com,2024-07-01:/TheOdinProject/theodinproject</id>
    <link href="https://github.com/TheOdinProject/theodinproject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main Website for The Odin Project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Odin Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.theodinproject.com/&#34;&gt;The Odin Project&lt;/a&gt; (TOP) is an open-source curriculum for learning full-stack web development. Our mission is to provide a comprehensive curriculum to learn web development for free. We help users learn the skills and build the impressive portfolio of projects they need to get hired as a web developer.&lt;/p&gt; &#xA;&lt;p&gt;Some of the topics we cover include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA; &lt;li&gt;Ruby on Rails&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;HTML and CSS&lt;/li&gt; &#xA; &lt;li&gt;Javascript&lt;/li&gt; &#xA; &lt;li&gt;Node&lt;/li&gt; &#xA; &lt;li&gt;React&lt;/li&gt; &#xA; &lt;li&gt;How to go about getting a job in the industry&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo contains the TOP app which pulls in lesson content as well as front-end and back-end code. To see the actual lesson content that gets pulled in, please go to the &lt;a href=&#34;https://github.com/TheOdinProject/curriculum&#34;&gt;TOP curriculum repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our community can be found on the &lt;a href=&#34;https://discord.gg/fbFCkYabZB&#34;&gt;TOP Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.circleci.com/pipelines/github/TheOdinProject/theodinproject&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/TheOdinProject/theodinproject.svg?style=svg&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Odin Project depends on open-source contributions to improve, grow, and thrive. We welcome contributors of all experience levels and backgrounds to help maintain this awesome curriculum and community. If you would like to contribute to our curriculum, be sure to thoroughly read our &lt;a href=&#34;https://github.com/TheOdinProject/theodinproject/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to also watch this &lt;a href=&#34;https://scrimba.com/scrim/cEggQncE&#34;&gt;scrimba walkthrough of The Odin Project web app repo&lt;/a&gt;, which will give you an introduction to this repository. Note that since this scrimba was recorded, the content and/or structure may have changed in this repo. The focus of this scrimba is less on the actual content, but more of a high level overview.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>heartcombo/simple_form</title>
    <updated>2024-07-01T01:54:41Z</updated>
    <id>tag:github.com,2024-07-01:/heartcombo/simple_form</id>
    <link href="https://github.com/heartcombo/simple_form" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Forms made easy for Rails! It&#39;s tied to a simple DSL, with no opinion on markup.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/heartcombo/simple_form/main/simple_form.png&#34; alt=&#34;Simple Form Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rails forms made easy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; aims to be as flexible as possible while helping you with powerful components to create your forms. The basic goal of &lt;strong&gt;Simple Form&lt;/strong&gt; is to not touch your way of defining the layout, letting you find the better design for your eyes. Most of the DSL was inherited from Formtastic, which we are thankful for and should make you feel right at home.&lt;/p&gt; &#xA;&lt;p&gt;INFO: This README refers to &lt;strong&gt;Simple Form&lt;/strong&gt; 5.0. For older releases, check the related branch for your version.&lt;/p&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#bootstrap-5&#34;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#zurb-foundation-5&#34;&gt;Zurb Foundation 5&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#country-select&#34;&gt;Country Select&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#stripping-away-all-wrapper-divs&#34;&gt;Stripping away all wrapper divs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#collections&#34;&gt;Collections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#priority&#34;&gt;Priority&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#associations&#34;&gt;Associations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#buttons&#34;&gt;Buttons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#wrapping-rails-form-helpers&#34;&gt;Wrapping Rails Form Helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#extra-helpers&#34;&gt;Extra helpers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#simple-fields-for&#34;&gt;Simple Fields For&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#collection-radio-buttons&#34;&gt;Collection Radio Buttons&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#collection-check-boxes&#34;&gt;Collection Check Boxes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#available-input-types-and-defaults-for-each-column-type&#34;&gt;Available input types and defaults for each column type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#custom-inputs&#34;&gt;Custom inputs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#custom-form-builder&#34;&gt;Custom form builder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#i18n&#34;&gt;I18n&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#the-wrappers-api&#34;&gt;The wrappers API&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#custom-components&#34;&gt;Custom Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#html-5-notice&#34;&gt;HTML 5 Notice&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#using-non-active-record-objects&#34;&gt;Using non Active Record objects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#information&#34;&gt;Information&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#rdocs&#34;&gt;RDocs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#supported-ruby--rails-versions&#34;&gt;Supported Ruby / Rails versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#bug-reports&#34;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/simple_form/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;simple_form&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following command to install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;rails generate simple_form:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bootstrap 5&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; can be easily integrated with &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap 5&lt;/a&gt;. Use the &lt;code&gt;bootstrap&lt;/code&gt; option in the install generator, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;rails generate simple_form:install --bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add an initializer that configures &lt;strong&gt;Simple Form&lt;/strong&gt; wrappers for Bootstrap 5&#39;s &lt;a href=&#34;https://getbootstrap.com/docs/5.0/forms/overview/&#34;&gt;form controls&lt;/a&gt;. You have to be sure that you added a copy of the &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; assets on your application.&lt;/p&gt; &#xA;&lt;p&gt;For more information see the generator output, our &lt;a href=&#34;https://github.com/heartcombo/simple_form-bootstrap&#34;&gt;example application code&lt;/a&gt; and &lt;a href=&#34;https://simple-form-bootstrap.herokuapp.com/&#34;&gt;the live example app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Zurb Foundation 5&lt;/h3&gt; &#xA;&lt;p&gt;To generate wrappers that are compatible with &lt;a href=&#34;http://foundation.zurb.com/&#34;&gt;Zurb Foundation 5&lt;/a&gt;, pass the &lt;code&gt;foundation&lt;/code&gt; option to the generator, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;rails generate simple_form:install --foundation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the Foundation wrapper does not support the &lt;code&gt;:hint&lt;/code&gt; option by default. In order to enable hints, please uncomment the appropriate line in &lt;code&gt;config/initializers/simple_form_foundation.rb&lt;/code&gt;. You will need to provide your own CSS styles for hints.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;http://foundation.zurb.com/docs/applications.html&#34;&gt;instructions on how to install Foundation in a Rails app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Country Select&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the country select, you will need the &lt;a href=&#34;https://rubygems.org/gems/country_select&#34;&gt;country_select gem&lt;/a&gt;, add it to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;country_select&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use the gem you can easily override this behaviour by mapping the country inputs to something else, with a line like this in your &lt;code&gt;simple_form.rb&lt;/code&gt; initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.input_mappings = { /country/ =&amp;gt; :string }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; was designed to be customized as you need to. Basically it&#39;s a stack of components that are invoked to create a complete html input for you, which by default contains label, hints, errors and the input itself. It does not aim to create a lot of different logic from the default Rails form helpers, as they do a great job by themselves. Instead, &lt;strong&gt;Simple Form&lt;/strong&gt; acts as a DSL and just maps your input type (retrieved from the column definition in the database) to a specific helper method.&lt;/p&gt; &#xA;&lt;p&gt;To start using &lt;strong&gt;Simple Form&lt;/strong&gt; you just have to use the helper it provides:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username %&amp;gt;&#xA;  &amp;lt;%= f.input :password %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate an entire form with labels for user name and password as well, and render errors by default when you render the form with invalid data (after submitting for example).&lt;/p&gt; &#xA;&lt;p&gt;You can overwrite the default label by passing it to the input method. You can also add a hint, an error, or even a placeholder. For boolean inputs, you can add an inline label as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, label: &#39;Your username please&#39;, error: &#39;Username is mandatory, please specify one&#39; %&amp;gt;&#xA;  &amp;lt;%= f.input :password, hint: &#39;No special characters.&#39; %&amp;gt;&#xA;  &amp;lt;%= f.input :email, placeholder: &#39;user@domain.com&#39; %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, inline_label: &#39;Yes, remember me&#39; %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In some cases you may want to disable labels, hints or errors. Or you may want to configure the html of any of them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, label_html: { class: &#39;my_class&#39; }, hint_html: { class: &#39;hint_class&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, hint: false, error_html: { id: &#39;password_error&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password_confirmation, label: false %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to pass any html attribute straight to the input, by using the &lt;code&gt;:input_html&lt;/code&gt; option, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, input_html: { class: &#39;special&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, input_html: { maxlength: 20 } %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, input_html: { value: &#39;1&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to pass the same options to all inputs in the form (for example, a default class), you can use the &lt;code&gt;:defaults&lt;/code&gt; option in &lt;code&gt;simple_form_for&lt;/code&gt;. Specific options in &lt;code&gt;input&lt;/code&gt; call will overwrite the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user, defaults: { input_html: { class: &#39;default_class&#39; } } do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, input_html: { class: &#39;special&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, input_html: { maxlength: 20 } %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, input_html: { value: &#39;1&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;strong&gt;Simple Form&lt;/strong&gt; generates a wrapper div around your label and input by default, you can pass any html attribute to that wrapper as well using the &lt;code&gt;:wrapper_html&lt;/code&gt; option, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, wrapper_html: { class: &#39;username&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :password, wrapper_html: { id: &#39;password&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.input :remember_me, wrapper_html: { class: &#39;options&#39; } %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Required fields are marked with an * prepended to their labels.&lt;/p&gt; &#xA;&lt;p&gt;By default all inputs are required. When the form object includes &lt;code&gt;ActiveModel::Validations&lt;/code&gt; (which, for example, happens with Active Record models), fields are required only when there is &lt;code&gt;presence&lt;/code&gt; validation. Otherwise, &lt;strong&gt;Simple Form&lt;/strong&gt; will mark fields as optional. For performance reasons, this detection is skipped on validations that make use of conditional options, such as &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And of course, the &lt;code&gt;required&lt;/code&gt; property of any input can be overwritten as needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name, required: false %&amp;gt;&#xA;  &amp;lt;%= f.input :username %&amp;gt;&#xA;  &amp;lt;%= f.input :password %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;Simple Form&lt;/strong&gt; will look at the column type in the database and use an appropriate input for the column. For example, a column created with type &lt;code&gt;:text&lt;/code&gt; in the database will use a &lt;code&gt;textarea&lt;/code&gt; input by default. See the section &lt;a href=&#34;https://github.com/heartcombo/simple_form#available-input-types-and-defaults-for-each-column-type&#34;&gt;Available input types and defaults for each column type&lt;/a&gt; for a complete list of defaults.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also lets you overwrite the default input type it creates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username %&amp;gt;&#xA;  &amp;lt;%= f.input :password %&amp;gt;&#xA;  &amp;lt;%= f.input :description, as: :text %&amp;gt;&#xA;  &amp;lt;%= f.input :accepts,     as: :radio_buttons %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So instead of a checkbox for the &lt;em&gt;accepts&lt;/em&gt; attribute, you&#39;ll have a pair of radio buttons with yes/no labels and a textarea instead of a text field for the description. You can also render boolean attributes using &lt;code&gt;as: :select&lt;/code&gt; to show a dropdown.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to give the &lt;code&gt;:disabled&lt;/code&gt; option to &lt;strong&gt;Simple Form&lt;/strong&gt;, and it&#39;ll automatically mark the wrapper as disabled with a CSS class, so you can style labels, hints and other components inside the wrapper as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :username, disabled: true, hint: &#39;You cannot change your username.&#39; %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; inputs accept the same options as their corresponding input type helper in Rails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :date_of_birth, as: :date, start_year: Date.today.year - 90,&#xA;                              end_year: Date.today.year - 12, discard_day: true,&#xA;                              order: [:month, :year] %&amp;gt;&#xA;  &amp;lt;%= f.input :accepts, as: :boolean, checked_value: &#39;positive&#39;, unchecked_value: &#39;negative&#39; %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;Simple Form&lt;/strong&gt; generates a hidden field to handle the un-checked case for boolean fields. Passing &lt;code&gt;unchecked_value: false&lt;/code&gt; in the options for boolean fields will cause this hidden field to be omitted, following the convention in Rails. You can also specify &lt;code&gt;include_hidden: false&lt;/code&gt; to skip the hidden field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :just_the_checked_case, as: :boolean, include_hidden: false %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also allows you to use label, hint, input_field, error and full_error helpers (please take a look at the rdocs for each method for more info):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.label :username %&amp;gt;&#xA;  &amp;lt;%= f.input_field :username %&amp;gt;&#xA;  &amp;lt;%= f.hint &#39;No special characters, please!&#39; %&amp;gt;&#xA;  &amp;lt;%= f.error :username, id: &#39;user_name_error&#39; %&amp;gt;&#xA;  &amp;lt;%= f.full_error :token %&amp;gt;&#xA;  &amp;lt;%= f.submit &#39;Save&#39; %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any extra option passed to these methods will be rendered as html option.&lt;/p&gt; &#xA;&lt;h3&gt;Stripping away all wrapper divs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also allows you to strip away all the div wrappers around the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field that is generated with the usual &lt;code&gt;f.input&lt;/code&gt;. The easiest way to achieve this is to use &lt;code&gt;f.input_field&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;simple_form_for @user do |f|&#xA;  f.input_field :name&#xA;  f.input_field :remember_me, as: :boolean&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form&amp;gt;&#xA;  ...&#xA;  &amp;lt;input class=&#34;string required&#34; id=&#34;user_name&#34; maxlength=&#34;255&#34; name=&#34;user[name]&#34; size=&#34;255&#34; type=&#34;text&#34;&amp;gt;&#xA;  &amp;lt;input name=&#34;user[remember_me]&#34; type=&#34;hidden&#34; value=&#34;0&#34;&amp;gt;&#xA;  &amp;lt;label class=&#34;checkbox&#34;&amp;gt;&#xA;    &amp;lt;input class=&#34;boolean optional&#34; id=&#34;user_published&#34; name=&#34;user[remember_me]&#34; type=&#34;checkbox&#34; value=&#34;1&#34;&amp;gt;&#xA;  &amp;lt;/label&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For check boxes and radio buttons you can remove the label changing &lt;code&gt;boolean_style&lt;/code&gt; from default value &lt;code&gt;:nested&lt;/code&gt; to &lt;code&gt;:inline&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;simple_form_for @user do |f|&#xA;  f.input_field :name&#xA;  f.input_field :remember_me, as: :boolean, boolean_style: :inline&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form&amp;gt;&#xA;  ...&#xA;  &amp;lt;input class=&#34;string required&#34; id=&#34;user_name&#34; maxlength=&#34;255&#34; name=&#34;user[name]&#34; size=&#34;255&#34; type=&#34;text&#34;&amp;gt;&#xA;  &amp;lt;input name=&#34;user[remember_me]&#34; type=&#34;hidden&#34; value=&#34;0&#34;&amp;gt;&#xA;  &amp;lt;input class=&#34;boolean optional&#34; id=&#34;user_remember_me&#34; name=&#34;user[remember_me]&#34; type=&#34;checkbox&#34; value=&#34;1&#34;&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view the actual RDocs for this, check them out here - &lt;a href=&#34;http://rubydoc.info/github/heartcombo/simple_form/main/SimpleForm/FormBuilder:input_field&#34;&gt;http://rubydoc.info/github/heartcombo/simple_form/main/SimpleForm/FormBuilder:input_field&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Collections&lt;/h3&gt; &#xA;&lt;p&gt;And what if you want to create a select containing the age from 18 to 60 in your form? You can do it overriding the &lt;code&gt;:collection&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :user %&amp;gt;&#xA;  &amp;lt;%= f.input :age, collection: 18..60 %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Collections can be arrays or ranges, and when a &lt;code&gt;:collection&lt;/code&gt; is given the &lt;code&gt;:select&lt;/code&gt; input will be rendered by default, so we don&#39;t need to pass the &lt;code&gt;as: :select&lt;/code&gt; option. Other types of collection are &lt;code&gt;:radio_buttons&lt;/code&gt; and &lt;code&gt;:check_boxes&lt;/code&gt;. Those are added by &lt;strong&gt;Simple Form&lt;/strong&gt; to Rails set of form helpers (read Extra Helpers section below for more information).&lt;/p&gt; &#xA;&lt;p&gt;Collection inputs accept two other options beside collections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;label_method&lt;/em&gt; =&amp;gt; the label method to be applied to the collection to retrieve the label (use this instead of the &lt;code&gt;text_method&lt;/code&gt; option in &lt;code&gt;collection_select&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;value_method&lt;/em&gt; =&amp;gt; the value method to be applied to the collection to retrieve the value&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Those methods are useful to manipulate the given collection. Both of these options also accept lambda/procs in case you want to calculate the value or label in a special way eg. custom translation. You can also define a &lt;code&gt;to_label&lt;/code&gt; method on your model as &lt;strong&gt;Simple Form&lt;/strong&gt; will search for and use &lt;code&gt;:to_label&lt;/code&gt; as a &lt;code&gt;:label_method&lt;/code&gt; first if it is found.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;Simple Form&lt;/strong&gt; will use the first item from an array as the label and the second one as the value. If you want to change this behavior you must make it explicit, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :gender, as: :radio_buttons, collection: [[&#39;0&#39;, &#39;female&#39;], [&#39;1&#39;, &#39;male&#39;]], label_method: :second, value_method: :first %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All other options given are sent straight to the underlying Rails helper(s): &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select&#34;&gt;&lt;code&gt;collection_select&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_check_boxes&#34;&gt;&lt;code&gt;collection_check_boxes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_radio_buttons&#34;&gt;&lt;code&gt;collection_radio_buttons&lt;/code&gt;&lt;/a&gt;. For example, you can pass &lt;code&gt;prompt&lt;/code&gt; and &lt;code&gt;selected&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :age, collection: 18..60, prompt: &#34;Select your age&#34;, selected: 21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may also be useful to explicitly pass a value to the optional &lt;code&gt;:selected&lt;/code&gt; like above, especially if passing a collection of nested objects.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to create grouped collection selects, that will use the html &lt;em&gt;optgroup&lt;/em&gt; tags, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :country_id, collection: @continents, as: :grouped_select, group_method: :countries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grouped collection inputs accept the same &lt;code&gt;:label_method&lt;/code&gt; and &lt;code&gt;:value_method&lt;/code&gt; options, which will be used to retrieve label/value attributes for the &lt;code&gt;option&lt;/code&gt; tags. Besides that, you can give:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;group_method&lt;/em&gt; =&amp;gt; the method to be called on the given collection to generate the options for each group (required)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;group_label_method&lt;/em&gt; =&amp;gt; the label method to be applied on the given collection to retrieve the label for the &lt;em&gt;optgroup&lt;/em&gt; (&lt;strong&gt;Simple Form&lt;/strong&gt; will attempt to guess the best one the same way it does with &lt;code&gt;:label_method&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Priority&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also supports &lt;code&gt;:time_zone&lt;/code&gt; and &lt;code&gt;:country&lt;/code&gt;. When using such helpers, you can give &lt;code&gt;:priority&lt;/code&gt; as an option to select which time zones and/or countries should be given higher priority:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :residence_country, priority: [ &#34;Brazil&#34; ]&#xA;f.input :time_zone, priority: /US/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those values can also be configured with a default value to be used on the site through the &lt;code&gt;SimpleForm.country_priority&lt;/code&gt; and &lt;code&gt;SimpleForm.time_zone_priority&lt;/code&gt; helpers.&lt;/p&gt; &#xA;&lt;p&gt;Note: While using &lt;code&gt;country_select&lt;/code&gt; if you want to restrict to only a subset of countries for a specific drop down then you may use the &lt;code&gt;:collection&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :shipping_country, priority: [ &#34;Brazil&#34; ], collection: [ &#34;Australia&#34;, &#34;Brazil&#34;, &#34;New Zealand&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Associations&lt;/h3&gt; &#xA;&lt;p&gt;To deal with associations, &lt;strong&gt;Simple Form&lt;/strong&gt; can generate select inputs, a series of radios buttons or checkboxes. Lets see how it works: imagine you have a user model that belongs to a company and &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; roles. The structure would be something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  belongs_to :company&#xA;  has_and_belongs_to_many :roles&#xA;end&#xA;&#xA;class Company &amp;lt; ActiveRecord::Base&#xA;  has_many :users&#xA;end&#xA;&#xA;class Role &amp;lt; ActiveRecord::Base&#xA;  has_and_belongs_to_many :users&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we have the user form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name %&amp;gt;&#xA;  &amp;lt;%= f.association :company %&amp;gt;&#xA;  &amp;lt;%= f.association :roles %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple enough, right? This is going to render a &lt;code&gt;:select&lt;/code&gt; input for choosing the &lt;code&gt;:company&lt;/code&gt;, and another &lt;code&gt;:select&lt;/code&gt; input with &lt;code&gt;:multiple&lt;/code&gt; option for the &lt;code&gt;:roles&lt;/code&gt;. You can, of course, change it to use radio buttons and checkboxes as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.association :company, as: :radio_buttons&#xA;f.association :roles,   as: :check_boxes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The association helper just invokes &lt;code&gt;input&lt;/code&gt; under the hood, so all options available to &lt;code&gt;:select&lt;/code&gt;, &lt;code&gt;:radio_buttons&lt;/code&gt; and &lt;code&gt;:check_boxes&lt;/code&gt; are also available to association. Additionally, you can specify the collection by hand, all together with the prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.association :company, collection: Company.active.order(:name), prompt: &#34;Choose a Company&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you want to declare different labels and values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.association :company, label_method: :company_name, value_method: :id, include_blank: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the association helper is currently only tested with Active Record. It currently does not work well with Mongoid and depending on the ORM you&#39;re using your mileage may vary.&lt;/p&gt; &#xA;&lt;h3&gt;Buttons&lt;/h3&gt; &#xA;&lt;p&gt;All web forms need buttons, right? &lt;strong&gt;Simple Form&lt;/strong&gt; wraps them in the DSL, acting like a proxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @user do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name %&amp;gt;&#xA;  &amp;lt;%= f.button :submit %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will simply call submit. You choose to use it or not, it&#39;s just a question of taste.&lt;/p&gt; &#xA;&lt;p&gt;The button method also accepts optional parameters, that are delegated to the underlying submit call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.button :submit, &#34;Custom Button Text&#34;, class: &#34;my-button&#34; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element, use the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.button :button, &#34;Custom Button Text&#34; %&amp;gt;&#xA;&#xA;&amp;lt;%= f.button :button do %&amp;gt;&#xA;  Custom Button Text&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wrapping Rails Form Helpers&lt;/h3&gt; &#xA;&lt;p&gt;Say you wanted to use a rails form helper but still wrap it in &lt;strong&gt;Simple Form&lt;/strong&gt; goodness? You can, by calling input with a block like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.input :role do %&amp;gt;&#xA;  &amp;lt;%= f.select :role, Role.all.map { |r| [r.name, r.id, { class: r.company.id }] }, include_blank: true %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example, we&#39;re taking advantage of Rails 3&#39;s select method that allows us to pass in a hash of additional attributes for each option.&lt;/p&gt; &#xA;&lt;h3&gt;Extra helpers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also comes with some extra helpers you can use inside rails default forms without relying on &lt;code&gt;simple_form_for&lt;/code&gt; helper. They are listed below.&lt;/p&gt; &#xA;&lt;h4&gt;Simple Fields For&lt;/h4&gt; &#xA;&lt;p&gt;Wrapper to use &lt;strong&gt;Simple Form&lt;/strong&gt; inside a default rails form. It works in the same way that the &lt;code&gt;fields_for&lt;/code&gt; Rails helper, but change the builder to use the &lt;code&gt;SimpleForm::FormBuilder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.simple_fields_for :posts do |posts_form|&#xA;    # Here you have all simple_form methods available&#xA;    posts_form.input :title&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Collection Radio Buttons&lt;/h4&gt; &#xA;&lt;p&gt;Creates a collection of radio inputs with labels associated (same API as &lt;code&gt;collection_select&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.collection_radio_buttons :options, [[true, &#39;Yes&#39;], [false, &#39;No&#39;]], :first, :last&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input id=&#34;user_options_true&#34; name=&#34;user[options]&#34; type=&#34;radio&#34; value=&#34;true&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_radio_buttons&#34; for=&#34;user_options_true&#34;&amp;gt;Yes&amp;lt;/label&amp;gt;&#xA;&amp;lt;input id=&#34;user_options_false&#34; name=&#34;user[options]&#34; type=&#34;radio&#34; value=&#34;false&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_radio_buttons&#34; for=&#34;user_options_false&#34;&amp;gt;No&amp;lt;/label&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Collection Check Boxes&lt;/h4&gt; &#xA;&lt;p&gt;Creates a collection of checkboxes with labels associated (same API as &lt;code&gt;collection_select&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.collection_check_boxes :options, [[true, &#39;Yes&#39;], [false, &#39;No&#39;]], :first, :last&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input name=&#34;user[options][]&#34; type=&#34;hidden&#34; value=&#34;&#34; /&amp;gt;&#xA;&amp;lt;input id=&#34;user_options_true&#34; name=&#34;user[options][]&#34; type=&#34;checkbox&#34; value=&#34;true&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_check_box&#34; for=&#34;user_options_true&#34;&amp;gt;Yes&amp;lt;/label&amp;gt;&#xA;&amp;lt;input name=&#34;user[options][]&#34; type=&#34;hidden&#34; value=&#34;&#34; /&amp;gt;&#xA;&amp;lt;input id=&#34;user_options_false&#34; name=&#34;user[options][]&#34; type=&#34;checkbox&#34; value=&#34;false&#34; /&amp;gt;&#xA;&amp;lt;label class=&#34;collection_check_box&#34; for=&#34;user_options_false&#34;&amp;gt;No&amp;lt;/label&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this with associations in your model, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;form_for @user do |f|&#xA;  f.collection_check_boxes :role_ids, Role.all, :id, :name # using :roles here is not going to work.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add a CSS class to the label item, you can use the &lt;code&gt;item_label_class&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.collection_check_boxes :role_ids, Role.all, :id, :name, item_label_class: &#39;my-custom-class&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available input types and defaults for each column type&lt;/h2&gt; &#xA;&lt;p&gt;The following table shows the html element you will get for each attribute according to its database definition. These defaults can be changed by specifying the helper method in the column &lt;code&gt;Mapping&lt;/code&gt; as the &lt;code&gt;as:&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mapping&lt;/th&gt; &#xA;   &lt;th&gt;Generated HTML Element&lt;/th&gt; &#xA;   &lt;th&gt;Database Column Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=checkbox]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=text]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;citext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=text]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;citext&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=email]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /email/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=url]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /url/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=tel]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /phone/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;password&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=password]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /password/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;search&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=search]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=text]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=color]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hstore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hstore&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;json&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;textarea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonb&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=file]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; responding to file methods&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hidden&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=hidden]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=number]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=number]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=number]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;range&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;input[type=range]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime/timestamp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;date&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;date select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;date&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;time select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to&lt;/code&gt;/&lt;code&gt;has_many&lt;/code&gt;/&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; associations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;radio_buttons&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;collection of &lt;code&gt;input[type=radio]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to&lt;/code&gt; associations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;check_boxes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;collection of &lt;code&gt;input[type=checkbox]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many&lt;/code&gt;/&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; associations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;country&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt; (countries as options)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /country/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time_zone&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;select&lt;/code&gt; (timezones as options)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; with &lt;code&gt;name =~ /time_zone/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rich_text_area&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;trix-editor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom inputs&lt;/h2&gt; &#xA;&lt;p&gt;It is very easy to add custom inputs to &lt;strong&gt;Simple Form&lt;/strong&gt;. For instance, if you want to add a custom input that extends the string one, you just need to add this file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/currency_input.rb&#xA;class CurrencyInput &amp;lt; SimpleForm::Inputs::Base&#xA;  def input(wrapper_options)&#xA;    merged_input_options = merge_wrapper_options(input_html_options, wrapper_options)&#xA;&#xA;    &#34;$ #{@builder.text_field(attribute_name, merged_input_options)}&#34;.html_safe&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use it in your views:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :money, as: :currency&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, you may have to create the &lt;code&gt;app/inputs/&lt;/code&gt; directory and restart your webserver.&lt;/p&gt; &#xA;&lt;p&gt;You can also redefine existing &lt;strong&gt;Simple Form&lt;/strong&gt; inputs by creating a new class with the same name. For instance, if you want to wrap date/time/datetime in a div, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/date_time_input.rb&#xA;class DateTimeInput &amp;lt; SimpleForm::Inputs::DateTimeInput&#xA;  def input(wrapper_options)&#xA;    template.content_tag(:div, super)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to add a class to all the select fields you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/collection_select_input.rb&#xA;class CollectionSelectInput &amp;lt; SimpleForm::Inputs::CollectionSelectInput&#xA;  def input_html_classes&#xA;    super.push(&#39;chosen&#39;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If needed, you can namespace your custom inputs in a module and tell &lt;strong&gt;Simple Form&lt;/strong&gt; to look for their definitions in this module. This can avoid conflicts with other form libraries (like Formtastic) that look up the global context to find inputs definition too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/inputs/custom_inputs/numeric_input&#xA;module CustomInputs&#xA;  class NumericInput &amp;lt; SimpleForm::Inputs::NumericInput&#xA;    def input_html_classes&#xA;      super.push(&#39;no-spinner&#39;)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in the &lt;strong&gt;SimpleForm&lt;/strong&gt; initializer :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/simple_form.rb&#xA;config.custom_inputs_namespaces &amp;lt;&amp;lt; &#34;CustomInputs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom form builder&lt;/h2&gt; &#xA;&lt;p&gt;You can create a custom form builder that uses &lt;strong&gt;Simple Form&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create a helper method that calls &lt;code&gt;simple_form_for&lt;/code&gt; with a custom builder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def custom_form_for(object, *args, &amp;amp;block)&#xA;  options = args.extract_options!&#xA;  simple_form_for(object, *(args &amp;lt;&amp;lt; options.merge(builder: CustomFormBuilder)), &amp;amp;block)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a form builder class that inherits from &lt;code&gt;SimpleForm::FormBuilder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CustomFormBuilder &amp;lt; SimpleForm::FormBuilder&#xA;  def input(attribute_name, options = {}, &amp;amp;block)&#xA;    super(attribute_name, options.merge(label: false), &amp;amp;block)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;I18n&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; uses all power of I18n API to lookup labels, hints, prompts and placeholders. To customize your forms you can create a locale file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      user:&#xA;        username: &#39;User name&#39;&#xA;        password: &#39;Password&#39;&#xA;    hints:&#xA;      user:&#xA;        username: &#39;User name to sign in.&#39;&#xA;        password: &#39;No special characters, please.&#39;&#xA;    placeholders:&#xA;      user:&#xA;        username: &#39;Your username&#39;&#xA;        password: &#39;****&#39;&#xA;    include_blanks:&#xA;      user:&#xA;        age: &#39;Rather not say&#39;&#xA;    prompts:&#xA;      user:&#xA;        role: &#39;Select your role&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And your forms will use this information to render the components for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also lets you be more specific, separating lookups through actions. Let&#39;s say you want a different label for new and edit actions, the locale file would be something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      user:&#xA;        username: &#39;User name&#39;&#xA;        password: &#39;Password&#39;&#xA;        edit:&#xA;          username: &#39;Change user name&#39;&#xA;          password: &#39;Change password&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way &lt;strong&gt;Simple Form&lt;/strong&gt; will figure out the right translation for you, based on the action being rendered. And to be a little bit DRYer with your locale file, you can specify defaults for all models under the &#39;defaults&#39; key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      defaults:&#xA;        username: &#39;User name&#39;&#xA;        password: &#39;Password&#39;&#xA;        new:&#xA;          username: &#39;Choose a user name&#39;&#xA;    hints:&#xA;      defaults:&#xA;        username: &#39;User name to sign in.&#39;&#xA;        password: &#39;No special characters, please.&#39;&#xA;    placeholders:&#xA;      defaults:&#xA;        username: &#39;Your username&#39;&#xA;        password: &#39;****&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; will always look for a default attribute translation under the &#34;defaults&#34; key if no specific is found inside the model key.&lt;/p&gt; &#xA;&lt;p&gt;In addition, &lt;strong&gt;Simple Form&lt;/strong&gt; will fallback to default &lt;code&gt;human_attribute_name&lt;/code&gt; from Rails when no other translation is found for labels. Finally, you can also overwrite any label, hint or placeholder inside your view, just by passing the option manually. This way the I18n lookup will be skipped.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;:prompt&lt;/code&gt; and &lt;code&gt;:include_blank&lt;/code&gt; the I18n lookup is optional and to enable it is necessary to pass &lt;code&gt;:translate&lt;/code&gt; as value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :role, prompt: :translate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also has support for translating options in collection helpers. For instance, given a User with a &lt;code&gt;:role&lt;/code&gt; attribute, you might want to create a select box showing translated labels that would post either &lt;code&gt;:admin&lt;/code&gt; or &lt;code&gt;:editor&lt;/code&gt; as value. With &lt;strong&gt;Simple Form&lt;/strong&gt; you could create an input like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;f.input :role, collection: [:admin, :editor]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;strong&gt;Simple Form&lt;/strong&gt; will try a lookup like this in your locale file, to find the right labels to show:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    options:&#xA;      user:&#xA;        role:&#xA;          admin: &#39;Administrator&#39;&#xA;          editor: &#39;Editor&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;defaults&lt;/code&gt; key as you would do with labels, hints and placeholders. It is important to notice that &lt;strong&gt;Simple Form&lt;/strong&gt; will only do the lookup for options if you give a collection composed of symbols only. This is to avoid constant lookups to I18n.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also possible to translate buttons, using Rails&#39; built-in I18n support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  helpers:&#xA;    submit:&#xA;      user:&#xA;        create: &#34;Add %{model}&#34;&#xA;        update: &#34;Save Changes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are other options that can be configured through I18n API, such as required text and boolean. Be sure to check our locale file or the one copied to your application after you run &lt;code&gt;rails generate simple_form:install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It should be noted that translations for labels, hints and placeholders for a namespaced model, e.g. &lt;code&gt;Admin::User&lt;/code&gt;, should be placed under &lt;code&gt;admin_user&lt;/code&gt;, not under &lt;code&gt;admin/user&lt;/code&gt;. This is different from how translations for namespaced model and attribute names are defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  activerecord:&#xA;    models:&#xA;        admin/user: User&#xA;    attributes:&#xA;        admin/user:&#xA;            name: Name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They should be placed under &lt;code&gt;admin/user&lt;/code&gt;. Form labels, hints and placeholders for those attributes, though, should be placed under &lt;code&gt;admin_user&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;        admin_user:&#xA;            name: Name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This difference exists because &lt;strong&gt;Simple Form&lt;/strong&gt; relies on &lt;code&gt;object_name&lt;/code&gt; provided by Rails&#39; FormBuilder to determine the translation path for a given object instead of &lt;code&gt;i18n_key&lt;/code&gt; from the object itself. Thus, similarly, if a form for an &lt;code&gt;Admin::User&lt;/code&gt; object is defined by calling &lt;code&gt;simple_form_for @admin_user, as: :some_user&lt;/code&gt;, &lt;strong&gt;Simple Form&lt;/strong&gt; will look for translations under &lt;code&gt;some_user&lt;/code&gt; instead of &lt;code&gt;admin_user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When translating &lt;code&gt;simple_fields_for&lt;/code&gt; attributes be sure to use the same name you pass to it, e.g. &lt;code&gt;simple_fields_for :posts&lt;/code&gt; should be placed under &lt;code&gt;posts&lt;/code&gt; not &lt;code&gt;post&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  simple_form:&#xA;    labels:&#xA;      posts:&#xA;        title: &#39;Post title&#39;&#xA;    hints:&#xA;      posts:&#xA;        title: &#39;A good title&#39;&#xA;    placeholders:&#xA;      posts:&#xA;        title: &#39;Once upon a time...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; has several configuration options. You can read and change them in the initializer created by &lt;strong&gt;Simple Form&lt;/strong&gt;, so if you haven&#39;t executed the command below yet, please do:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rails generate simple_form:install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The wrappers API&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;strong&gt;Simple Form&lt;/strong&gt; you can configure how your components will be rendered using the wrappers API. The syntax looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers tag: :div, class: :input,&#xA;                error_class: :field_with_errors,&#xA;                valid_class: :field_without_errors do |b|&#xA;&#xA;  # Form extensions&#xA;  b.use :html5&#xA;  b.optional :pattern&#xA;  b.use :maxlength&#xA;  b.use :placeholder&#xA;  b.use :readonly&#xA;&#xA;  # Form components&#xA;  b.use :label_input&#xA;  b.use :hint,  wrap_with: { tag: :span, class: :hint }&#xA;  b.use :error, wrap_with: { tag: :span, class: :error }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;Form components&lt;/em&gt; will generate the form tags like labels, inputs, hints or errors contents. The available components are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;:label         # The &amp;lt;label&amp;gt; tag alone&#xA;:input         # The &amp;lt;input&amp;gt; tag alone&#xA;:label_input   # The &amp;lt;label&amp;gt; and the &amp;lt;input&amp;gt; tags&#xA;:hint          # The hint for the input&#xA;:error         # The error for the input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;Form extensions&lt;/em&gt; are used to generate some attributes or perform some lookups on the model to add extra information to your components.&lt;/p&gt; &#xA;&lt;p&gt;You can create new &lt;em&gt;Form components&lt;/em&gt; using the wrappers API as in the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;  b.wrapper tag: :div, class: &#39;separator&#39; do |component|&#xA;    component.use :hint,  wrap_with: { tag: :span, class: :hint }&#xA;    component.use :error, wrap_with: { tag: :span, class: :error }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will wrap the hint and error components within a &lt;code&gt;div&lt;/code&gt; tag using the class &lt;code&gt;&#39;separator&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can customize &lt;em&gt;Form components&lt;/em&gt; passing options to them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers do |b|&#xA;  b.use :label_input, class: &#39;label-input-class&#39;, error_class: &#39;is-invalid&#39;, valid_class: &#39;is-valid&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the input and label classes to &lt;code&gt;&#39;label-input-class&#39;&lt;/code&gt; and will set the class &lt;code&gt;&#39;is-invalid&#39;&lt;/code&gt; if the input has errors and &lt;code&gt;&#39;is-valid&#39;&lt;/code&gt; if the input is valid.&lt;/p&gt; &#xA;&lt;p&gt;If you want to customize the custom &lt;em&gt;Form components&lt;/em&gt; on demand you can give it a name like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;  b.wrapper :my_wrapper, tag: :div, class: &#39;separator&#39;, html: { id: &#39;my_wrapper_id&#39; } do |component|&#xA;    component.use :hint,  wrap_with: { tag: :span, class: :hint }&#xA;    component.use :error, wrap_with: { tag: :span, class: :error }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and now you can pass options to your &lt;code&gt;input&lt;/code&gt; calls to customize the &lt;code&gt;:my_wrapper&lt;/code&gt; &lt;em&gt;Form component&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Completely turns off the custom wrapper&#xA;f.input :name, my_wrapper: false&#xA;&#xA;# Configure the html&#xA;f.input :name, my_wrapper_html: { id: &#39;special_id&#39; }&#xA;&#xA;# Configure the tag&#xA;f.input :name, my_wrapper_tag: :p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define more than one wrapper and pick one to render in a specific form or input. To define another wrapper you have to give it a name, as the follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers :small do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use it in this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Specifying to whole form&#xA;simple_form_for @user, wrapper: :small do |f|&#xA;  f.input :name&#xA;end&#xA;&#xA;# Specifying to one input&#xA;simple_form_for @user do |f|&#xA;  f.input :name, wrapper: :small&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; also allows you to use optional elements. For instance, let&#39;s suppose you want to use hints or placeholders, but you don&#39;t want them to be generated automatically. You can set their default values to &lt;code&gt;false&lt;/code&gt; or use the &lt;code&gt;optional&lt;/code&gt; method. Is preferable to use the &lt;code&gt;optional&lt;/code&gt; syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers placeholder: false do |b|&#xA;  b.use :placeholder&#xA;  b.use :label_input&#xA;  b.wrapper tag: :div, class: &#39;separator&#39; do |component|&#xA;    component.optional :hint, wrap_with: { tag: :span, class: :hint }&#xA;    component.use :error, wrap_with: { tag: :span, class: :error }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By setting it as &lt;code&gt;optional&lt;/code&gt;, a hint will only be generated when &lt;code&gt;hint: true&lt;/code&gt; is explicitly used. The same for placeholder.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to give the option &lt;code&gt;:unless_blank&lt;/code&gt; to the wrapper if you want to render it only when the content is present.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  b.wrapper tag: :span, class: &#39;hint&#39;, unless_blank: true do |component|&#xA;    component.optional :hint&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Components&lt;/h2&gt; &#xA;&lt;p&gt;When you use custom wrappers, you might also be looking for a way to add custom components to your wrapper. The default components are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;:label         # The &amp;lt;label&amp;gt; tag alone&#xA;:input         # The &amp;lt;input&amp;gt; tag alone&#xA;:label_input   # The &amp;lt;label&amp;gt; and the &amp;lt;input&amp;gt; tags&#xA;:hint          # The hint for the input&#xA;:error         # The error for the input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A custom component might be interesting for you if your views look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @blog do |f| %&amp;gt;&#xA;  &amp;lt;div class=&#34;row&#34;&amp;gt;&#xA;    &amp;lt;div class=&#34;span1 number&#34;&amp;gt;&#xA;      1&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div class=&#34;span8&#34;&amp;gt;&#xA;      &amp;lt;%= f.input :title %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;  &amp;lt;div class=&#34;row&#34;&amp;gt;&#xA;    &amp;lt;div class=&#34;span1 number&#34;&amp;gt;&#xA;      2&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div class=&#34;span8&#34;&amp;gt;&#xA;      &amp;lt;%= f.input :body, as: :text %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A cleaner method to create your views would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for @blog, wrapper: :with_numbers do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :title, number: 1 %&amp;gt;&#xA;  &amp;lt;%= f.input :body, as: :text, number: 2 %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the number option on the input, first, tells to Simple Form the place where the components will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/simple_form.rb&#xA;Dir[Rails.root.join(&#39;lib/components/**/*.rb&#39;)].each { |f| require f }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new component within the path specified above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/components/numbers_component.rb&#xA;module NumbersComponent&#xA;  # To avoid deprecation warning, you need to make the wrapper_options explicit&#xA;  # even when they won&#39;t be used.&#xA;  def number(wrapper_options = nil)&#xA;    @number ||= begin&#xA;      options[:number].to_s.html_safe if options[:number].present?&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;SimpleForm.include_component(NumbersComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, add a new wrapper to the config/initializers/simple_form.rb file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers :with_numbers, tag: &#39;div&#39;, class: &#39;row&#39;, error_class: &#39;error&#39; do |b|&#xA;  b.use :html5&#xA;  b.use :number, wrap_with: { tag: &#39;div&#39;, class: &#39;span1 number&#39; }&#xA;  b.wrapper tag: &#39;div&#39;, class: &#39;span8&#39; do |ba|&#xA;    ba.use :placeholder&#xA;    ba.use :label&#xA;    ba.use :input&#xA;    ba.use :error, wrap_with: { tag: &#39;span&#39;, class: &#39;help-inline&#39; }&#xA;    ba.use :hint,  wrap_with: { tag: &#39;p&#39;, class: &#39;help-block&#39; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTML 5 Notice&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;Simple Form&lt;/strong&gt; will generate input field types and attributes that are supported in HTML5, but are considered invalid HTML for older document types such as HTML4 or XHTML1.0. The HTML5 extensions include the new field types such as email, number, search, url, tel, and the new attributes such as required, autofocus, maxlength, min, max, step.&lt;/p&gt; &#xA;&lt;p&gt;Most browsers will not care, but some of the newer ones - in particular Chrome 10+ - use the required attribute to force a value into an input and will prevent form submission without it. Depending on the design of the application this may or may not be desired. In many cases it can break existing UI&#39;s.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to disable all HTML 5 extensions in &lt;strong&gt;Simple Form&lt;/strong&gt; by removing the &lt;code&gt;html5&lt;/code&gt; component from the wrapper used to render the inputs.&lt;/p&gt; &#xA;&lt;p&gt;For example, change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers tag: :div do |b|&#xA;  b.use :html5&#xA;&#xA;  b.use :label_input&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.wrappers tag: :div do |b|&#xA;  b.use :label_input&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to have all other HTML 5 features, such as the new field types, you can disable only the browser validation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SimpleForm.browser_validations = false # default is true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option adds a new &lt;code&gt;novalidate&lt;/code&gt; property to the form, instructing it to skip all HTML 5 validation. The inputs will still be generated with the required and other attributes, that might help you to use some generic javascript validation.&lt;/p&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;novalidate&lt;/code&gt; to a specific form by setting the option on the form itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for(resource, html: { novalidate: true }) do |form| %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please notice that none of the configurations above will disable the &lt;code&gt;placeholder&lt;/code&gt; component, which is an HTML 5 feature. We believe most of the newest browsers are handling this attribute just fine, and if they aren&#39;t, any plugin you use would take care of applying the placeholder. In any case, you can disable it if you really want to, by removing the placeholder component from the components list in the &lt;strong&gt;Simple Form&lt;/strong&gt; configuration file.&lt;/p&gt; &#xA;&lt;p&gt;HTML 5 date / time inputs are not generated by &lt;strong&gt;Simple Form&lt;/strong&gt; by default, so using &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; or &lt;code&gt;datetime&lt;/code&gt; will all generate select boxes using normal Rails helpers. We believe browsers are not totally ready for these yet, but you can easily opt-in on a per-input basis by passing the html5 option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= f.input :expires_at, as: :date, html5: true %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using non Active Record objects&lt;/h2&gt; &#xA;&lt;p&gt;There are few ways to build forms with objects that don&#39;t inherit from Active Record, as follows:&lt;/p&gt; &#xA;&lt;p&gt;You can include the module &lt;code&gt;ActiveModel::Model&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  include ActiveModel::Model&#xA;&#xA;  attr_accessor :id, :name&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Presenters or Decorators that inherit from &lt;code&gt;SimpleDelegator&lt;/code&gt; you can delegate it to the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class UserPresenter &amp;lt; SimpleDelegator&#xA;  # Without that, Simple Form will consider the user model as the object.&#xA;  def to_model&#xA;    self&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define all methods required by the helpers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  extend ActiveModel::Naming&#xA;&#xA;  attr_accessor :id, :name&#xA;&#xA;  def to_model&#xA;    self&#xA;  end&#xA;&#xA;  def to_key&#xA;    id&#xA;  end&#xA;&#xA;  def persisted?&#xA;    false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To have SimpleForm infer the attributes&#39; types, you can provide &lt;code&gt;#has_attribute?&lt;/code&gt; and &lt;code&gt;#type_for_attribute&lt;/code&gt; methods. The later should return an object that responds to &lt;code&gt;#type&lt;/code&gt; with the attribute type. This is useful for generating the correct input types (eg: checkboxes for booleans).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; Struct.new(:id, :name, :age, :registered)&#xA;  def to_model&#xA;    self&#xA;  end&#xA;&#xA;  def model_name&#xA;    OpenStruct.new(param_key: &#34;user&#34;)&#xA;  end&#xA;&#xA;  def to_key&#xA;    id&#xA;  end&#xA;&#xA;  def persisted?&#xA;    id.present?&#xA;  end&#xA;&#xA;  def has_attribute?(attr_name)&#xA;    %w(id name age registered).include?(attr_name.to_s)&#xA;  end&#xA;&#xA;  def type_for_attribute(attr_name)&#xA;    case attr_name.to_s&#xA;      when &#34;id&#34; then OpenStruct.new(type: :integer)&#xA;      when &#34;name&#34; then OpenStruct.new(type: :string)&#xA;      when &#34;age&#34; then OpenStruct.new(type: :integer)&#xA;      when &#34;registered&#34; then OpenStruct.new(type: :boolean)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your object doesn&#39;t implement those methods, you must make explicit it when you are building the form&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User&#xA;  attr_accessor :id, :name&#xA;&#xA;  # The only method required to use the f.submit helper.&#xA;  def persisted?&#xA;    false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= simple_form_for(@user, as: :user, method: :post, url: users_path) do |f| %&amp;gt;&#xA;  &amp;lt;%= f.input :name %&amp;gt;&#xA;  &amp;lt;%= f.submit &#39;New user&#39; %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;h3&gt;RDocs&lt;/h3&gt; &#xA;&lt;p&gt;You can view the &lt;strong&gt;Simple Form&lt;/strong&gt; documentation in RDoc format here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rubydoc.info/github/heartcombo/simple_form/main/frames&#34;&gt;http://rubydoc.info/github/heartcombo/simple_form/main/frames&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported Ruby / Rails versions&lt;/h3&gt; &#xA;&lt;p&gt;We intend to maintain support for all Ruby / Rails versions that haven&#39;t reached end-of-life.&lt;/p&gt; &#xA;&lt;p&gt;For more information about specific versions please check &lt;a href=&#34;https://www.ruby-lang.org/en/downloads/branches/&#34;&gt;Ruby&lt;/a&gt; and &lt;a href=&#34;https://guides.rubyonrails.org/maintenance_policy.html&#34;&gt;Rails&lt;/a&gt; maintenance policies, and our test matrix.&lt;/p&gt; &#xA;&lt;h3&gt;Bug reports&lt;/h3&gt; &#xA;&lt;p&gt;If you discover any bugs, feel free to create an issue on GitHub. Please add as much information as possible to help us in fixing the potential bug. We also encourage you to help even more by forking and sending us a pull request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/simple_form/issues&#34;&gt;https://github.com/heartcombo/simple_form/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have discovered a security related bug, please do NOT use the GitHub issue tracker. Send an e-mail to &lt;a href=&#34;mailto:heartcombo@googlegroups.com&#34;&gt;heartcombo@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carlos Antonio da Silva (&lt;a href=&#34;https://github.com/carlosantoniodasilva&#34;&gt;https://github.com/carlosantoniodasilva&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Rafael Mendonça França (&lt;a href=&#34;https://github.com/rafaelfranca&#34;&gt;https://github.com/rafaelfranca&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Felipe Renan (&lt;a href=&#34;https://github.com/feliperenan&#34;&gt;https://github.com/feliperenan&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/simple_form&#34;&gt;&lt;img src=&#34;https://fury-badge.herokuapp.com/rb/simple_form.png&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/heartcombo/simple_form&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/heartcombo/simple_form.png&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License. Copyright 2020-2024 Rafael França, Carlos Antônio da Silva. Copyright 2009-2019 Plataformatec.&lt;/p&gt; &#xA;&lt;p&gt;The Simple Form logo is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hartator/wayback-machine-downloader</title>
    <updated>2024-07-01T01:54:41Z</updated>
    <id>tag:github.com,2024-07-01:/hartator/wayback-machine-downloader</id>
    <link href="https://github.com/hartator/wayback-machine-downloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Download an entire website from the Wayback Machine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wayback Machine Downloader&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/wayback_machine_downloader/&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/wayback_machine_downloader.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/hartator/wayback-machine-downloader&#34;&gt;&lt;img src=&#34;https://travis-ci.org/hartator/wayback-machine-downloader.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download an entire website from the Internet Archive Wayback Machine.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You need to install Ruby on your system (&amp;gt;= 1.9.2) - if you don&#39;t already have it. Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install wayback_machine_downloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If you run into permission errors, you might have to add &lt;code&gt;sudo&lt;/code&gt; in front of this command.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run wayback_machine_downloader with the base url of the website you want to retrieve as a parameter (e.g., &lt;a href=&#34;http://example.com&#34;&gt;http://example.com&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;It will download the last version of every file present on Wayback Machine to &lt;code&gt;./websites/example.com/&lt;/code&gt;. It will also re-create a directory structure and auto-create &lt;code&gt;index.html&lt;/code&gt; pages to work seamlessly with Apache and Nginx. All files downloaded are the original ones and not Wayback Machine rewritten versions. This way, URLs and links structure are the same as before.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: wayback_machine_downloader http://example.com&#xA;&#xA;Download an entire website from the Wayback Machine.&#xA;&#xA;Optional options:&#xA;    -d, --directory PATH             Directory to save the downloaded files into&#xA;&#x9;&#x9;&#x9;&#x9;     Default is ./websites/ plus the domain name&#xA;    -s, --all-timestamps             Download all snapshots/timestamps for a given website&#xA;    -f, --from TIMESTAMP             Only files on or after timestamp supplied (ie. 20060716231334)&#xA;    -t, --to TIMESTAMP               Only files on or before timestamp supplied (ie. 20100916231334)&#xA;    -e, --exact-url                  Download only the url provided and not the full site&#xA;    -o, --only ONLY_FILTER           Restrict downloading to urls that match this filter&#xA;&#x9;&#x9;&#x9;&#x9;     (use // notation for the filter to be treated as a regex)&#xA;    -x, --exclude EXCLUDE_FILTER     Skip downloading of urls that match this filter&#xA;&#x9;&#x9;&#x9;&#x9;     (use // notation for the filter to be treated as a regex)&#xA;    -a, --all                        Expand downloading to error files (40x and 50x) and redirections (30x)&#xA;    -c, --concurrency NUMBER         Number of multiple files to download at a time&#xA;&#x9;&#x9;&#x9;&#x9;     Default is one file at a time (ie. 20)&#xA;    -p, --maximum-snapshot NUMBER    Maximum snapshot pages to consider (Default is 100)&#xA;&#x9;&#x9;&#x9;&#x9;     Count an average of 150,000 snapshots per page&#xA;    -l, --list                       Only list file urls in a JSON format with the archived timestamps, won&#39;t download anything&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Specify directory to save files to&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;-d, --directory PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional. By default, Wayback Machine Downloader will download files to &lt;code&gt;./websites/&lt;/code&gt; followed by the domain name of the website. You may want to save files in a specific directory using this option.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --directory downloaded-backup/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;All Timestamps&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;-s, --all-timestamps &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional. This option will download all timestamps/snapshots for a given website. It will uses the timestamp of each snapshot as directory.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --all-timestamps &#xA;&#xA;Will download:&#xA;&#x9;websites/example.com/20060715085250/index.html&#xA;&#x9;websites/example.com/20051120005053/index.html&#xA;&#x9;websites/example.com/20060111095815/img/logo.png&#xA;&#x9;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;From Timestamp&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;-f, --from TIMESTAMP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional. You may want to supply a from timestamp to lock your backup to a specific version of the website. Timestamps can be found inside the urls of the regular Wayback Machine website (e.g., &lt;a href=&#34;https://web.archive.org/web/20060716231334/http://example.com&#34;&gt;https://web.archive.org/web/20060716231334/http://example.com&lt;/a&gt;). You can also use years (2006), years + month (200607), etc. It can be used in combination of To Timestamp. Wayback Machine Downloader will then fetch only file versions on or after the timestamp specified.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --from 20060716231334&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;To Timestamp&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;-t, --to TIMESTAMP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional. You may want to supply a to timestamp to lock your backup to a specific version of the website. Timestamps can be found inside the urls of the regular Wayback Machine website (e.g., &lt;a href=&#34;https://web.archive.org/web/20100916231334/http://example.com&#34;&gt;https://web.archive.org/web/20100916231334/http://example.com&lt;/a&gt;). You can also use years (2010), years + month (201009), etc. It can be used in combination of From Timestamp. Wayback Machine Downloader will then fetch only file versions on or before the timestamp specified.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --to 20100916231334&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exact Url&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;-e, --exact-url &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional. If you want to retrieve only the file matching exactly the url provided, you can use this flag. It will avoid downloading anything else.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you only want to download only the html homepage file of example.com:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --exact-url &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Only URL Filter&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; -o, --only ONLY_FILTER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional. You may want to retrieve files which are of a certain type (e.g., .pdf, .jpg, .wrd...) or are in a specific directory. To do so, you can supply the &lt;code&gt;--only&lt;/code&gt; flag with a string or a regex (using the &#39;/regex/&#39; notation) to limit which files Wayback Machine Downloader will download.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you only want to download files inside a specific &lt;code&gt;my_directory&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --only my_directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to download every images without anything else:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --only &#34;/\.(gif|jpg|jpeg)$/i&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exclude URL Filter&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; -x, --exclude EXCLUDE_FILTER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional. You may want to retrieve files which aren&#39;t of a certain type (e.g., .pdf, .jpg, .wrd...) or aren&#39;t in a specific directory. To do so, you can supply the &lt;code&gt;--exclude&lt;/code&gt; flag with a string or a regex (using the &#39;/regex/&#39; notation) to limit which files Wayback Machine Downloader will download.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to avoid downloading files inside &lt;code&gt;my_directory&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --exclude my_directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to download everything except images:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --exclude &#34;/\.(gif|jpg|jpeg)$/i&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Expand downloading to all file types&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; -a, --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional. By default, Wayback Machine Downloader limits itself to files that responded with 200 OK code. If you also need errors files (40x and 50x codes) or redirections files (30x codes), you can use the &lt;code&gt;--all&lt;/code&gt; or &lt;code&gt;-a&lt;/code&gt; flag and Wayback Machine Downloader will download them in addition of the 200 OK files. It will also keep empty files that are removed by default.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Only list files without downloading&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; -l, --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will just display the files to be downloaded with their snapshot timestamps and urls. The output format is JSON. It won&#39;t download anything. It&#39;s useful for debugging or to connect to another application.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maximum number of snapshot pages to consider&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;-p, --snapshot-pages NUMBER    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional. Specify the maximum number of snapshot pages to consider. Count an average of 150,000 snapshots per page. 100 is the default maximum number of snapshot pages and should be sufficient for most websites. Use a bigger number if you want to download a very large website.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --snapshot-pages 300    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Download multiple files at a time&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;-c, --concurrency NUMBER  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional. Specify the number of multiple files you want to download at the same time. Allows one to speed up the download of a website significantly. Default is to download one file at a time.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wayback_machine_downloader http://example.com --concurrency 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the Docker image&lt;/h2&gt; &#xA;&lt;p&gt;As an alternative installation way, we have a Docker image! Retrieve the wayback-machine-downloader Docker image this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull hartator/wayback-machine-downloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you should be able to use the Docker image to download websites. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -v $PWD/websites:/websites hartator/wayback-machine-downloader http://example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Just submit a pull request via GitHub.&lt;/p&gt; &#xA;&lt;p&gt;To run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>