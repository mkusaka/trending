<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T02:30:48Z</updated>
  <subtitle>Monthly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KrauseFx/FxLifeSheet</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/KrauseFx/FxLifeSheet</id>
    <link href="https://github.com/KrauseFx/FxLifeSheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tracking the key metrics of my life&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FxLifeSheet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/KrauseFx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contact-@KrauseFx-blue.svg?style=flat&#34; alt=&#34;Twitter: @KrauseFx&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;See the outcome on &lt;a href=&#34;https://howisFelix.today/&#34;&gt;howisFelix.today&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/KrauseFx/howisFelix.today/master/screenshots/Desktop-1.png&#34;&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;See the resulting work on &lt;a href=&#34;https://howisFelix.today/&#34;&gt;howisFelix.today&lt;/a&gt; &lt;p&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KrauseFx/howisFelix.today/master/screenshots/iPhone-1.png&#34;&gt; &lt;/td&gt; &#xA;    &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KrauseFx/howisFelix.today/master/screenshots/iPhone-2.png&#34;&gt; &lt;/td&gt; &#xA;    &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KrauseFx/howisFelix.today/master/screenshots/iPhone-3.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA; &lt;hr&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KrauseFx/howisFelix.today/master/screenshots/Overview-Portrait-1.png&#34;&gt; &#xA; &lt;hr&gt; &lt;/h3&gt;&#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;To answer questions about my life, like&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How does living in different cities affect other factors like fitness, productivity and happiness?&lt;/li&gt; &#xA; &lt;li&gt;How does sleep affect my day, my fitness level, and happiness?&lt;/li&gt; &#xA; &lt;li&gt;How does the weather, and the different seasons affect my life?&lt;/li&gt; &#xA; &lt;li&gt;Are there any trends over the last few years?&lt;/li&gt; &#xA; &lt;li&gt;How does computer time, work and hours in meetings affect my personal life?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key decisions for this project:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use a single database, owned and hosted by me, with all the data I&#39;ve collected over the years&lt;/li&gt; &#xA; &lt;li&gt;Be able to &lt;a href=&#34;https://github.com/KrauseFx/FxLifeSheet/raw/master/lifesheet.json&#34;&gt;easily add and remove questions&lt;/a&gt; on the fly, as I learn what&#39;s beneficial to track&lt;/li&gt; &#xA; &lt;li&gt;Full control of how the data is visualized&lt;/li&gt; &#xA; &lt;li&gt;Works well for frequent flyers with mixed time zones&lt;/li&gt; &#xA; &lt;li&gt;100% fully open source, MIT licensed and self-hosted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;This repo contains&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/KrauseFx/FxLifeSheet/raw/master/worker.ts&#34;&gt;Telegram bot&lt;/a&gt; for entering data manually&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/KrauseFx/FxLifeSheet/tree/master/visual_playground&#34;&gt;data visualization&lt;/a&gt;, check out the results on &lt;a href=&#34;https://howisFelix.today&#34;&gt;howisFelix.today&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/KrauseFx/FxLifeSheet/raw/master/db/create_tables.sql&#34;&gt;database info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Questions to answer&lt;/h3&gt; &#xA;&lt;p&gt;There are many questions that can be answered using this data, here are some main ones I want to look into over the next few months&lt;/p&gt; &#xA;&lt;h4&gt;Mood/Happines related:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How does the city I&#39;m in influence my level of happiness?&lt;/li&gt; &#xA; &lt;li&gt;How does the weather/climate influence my mood&lt;/li&gt; &#xA; &lt;li&gt;How does travel affect my mood?&lt;/li&gt; &#xA; &lt;li&gt;How do certain macro nutrition goals affect my mood?&lt;/li&gt; &#xA; &lt;li&gt;What amount of hours of sleep have the best influence on mood?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Fitness related&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How do certain macro goals influence my lean body mass and fat levels?&lt;/li&gt; &#xA; &lt;li&gt;How does my daily kcal intake affect my social life?&lt;/li&gt; &#xA; &lt;li&gt;How does alcohol affect my training and fitness progress?&lt;/li&gt; &#xA; &lt;li&gt;Do more daily steps influence &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;my mood&lt;/li&gt; &#xA;   &lt;li&gt;the amount of audio books I&#39;m reading&lt;/li&gt; &#xA;   &lt;li&gt;feeling connected with family &amp;amp; friends as often calling them&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;What are the areas in life that suffer while cutting (kcal deficit): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;mood&lt;/li&gt; &#xA;   &lt;li&gt;stress&lt;/li&gt; &#xA;   &lt;li&gt;productivity&lt;/li&gt; &#xA;   &lt;li&gt;energy&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Travel&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What are the areas in life that suffer when I travel? Investigate: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;fitness progress&lt;/li&gt; &#xA;   &lt;li&gt;productivity&lt;/li&gt; &#xA;   &lt;li&gt;stress&lt;/li&gt; &#xA;   &lt;li&gt;health&lt;/li&gt; &#xA;   &lt;li&gt;sleep&lt;/li&gt; &#xA;   &lt;li&gt;feeling connected with friends&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Productivity&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How many hours did I spend on my phone and laptop over the months?&lt;/li&gt; &#xA; &lt;li&gt;Do I stick to my yearly book goals and how do other factors influence how much I&#39;m reading?&lt;/li&gt; &#xA; &lt;li&gt;Am I more productive when I set the goals for the day the night before?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Assumptions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The user is in random time zones at random times and switches often, therefore the bot can&#39;t know about your daily schedule. This puts a lot of focus on averages, as it doesn&#39;t matter if a value was entered at 11pm that day, or 8am the next one, the numbers will even out, as only daily, weekly and monthly averages are considered when rendering graphs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo contains the Telegram bot that is responsible for collecting the data.&lt;/p&gt; &#xA;&lt;p&gt;There are 2 ways to input data: by the user telling the bot to ask for all the values, and by a regular interval of the bot asking you (similar to the deprecated &lt;a href=&#34;https://github.com/krausefx/mood&#34;&gt;mood bot&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/KrauseFx/FxLifeSheet/master/lifesheet.json&#34;&gt;&lt;code&gt;lifesheet.json&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Available values for &lt;code&gt;schedule&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;eightTimesADay&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;daily&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;weekly&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manual&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;User initiates data inputs&lt;/h3&gt; &#xA;&lt;h4&gt;Mood&lt;/h4&gt; &#xA;&lt;p&gt;Using &lt;code&gt;fourTimesADay&lt;/code&gt;, this will replace the mood bot&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How are you feeling today?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Morning&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;/awake&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will trigger the morning questions, like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sleep duration&lt;/li&gt; &#xA; &lt;li&gt;Sleep quality&lt;/li&gt; &#xA; &lt;li&gt;Body weight&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Evening&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;/asleep&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will trigger the end-of-day questions like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fitness related: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Alcohol intake&lt;/li&gt; &#xA;   &lt;li&gt;Macro adherence&lt;/li&gt; &#xA;   &lt;li&gt;Hunger issues?&lt;/li&gt; &#xA;   &lt;li&gt;Fatigu/Lethargy?&lt;/li&gt; &#xA;   &lt;li&gt;Feel stressed?&lt;/li&gt; &#xA;   &lt;li&gt;Caffeine intake?&lt;/li&gt; &#xA;   &lt;li&gt;How healthy do you feel today?&lt;/li&gt; &#xA;   &lt;li&gt;Number of steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Productivity related &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Did I solve actual programming/technical problems?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Social &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Felt like enough time by myself?&lt;/li&gt; &#xA;   &lt;li&gt;Felt like enough in control of my own time and schedule?&lt;/li&gt; &#xA;   &lt;li&gt;Felt like enough socializing?&lt;/li&gt; &#xA;   &lt;li&gt;Felt like enough going out, bars, restaurants, dancing etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Personal growth &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Learned new skills or things?&lt;/li&gt; &#xA;   &lt;li&gt;Went out of my comfort zone?&lt;/li&gt; &#xA;   &lt;li&gt;Number of minutes of Audible&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Meditated&lt;/li&gt; &#xA;   &lt;li&gt;Note: what was the main thing I did today?&lt;/li&gt; &#xA;   &lt;li&gt;Boolean: Did I set goals for the next day?&lt;/li&gt; &#xA;   &lt;li&gt;Do you feel excited about what&#39;s ahead in the future?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Week&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;/week&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will trigger questions that take longer to reply, so they&#39;re only done weekly&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fitness related &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Current macros &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;g of Carbs&lt;/li&gt; &#xA;     &lt;li&gt;g of Protein&lt;/li&gt; &#xA;     &lt;li&gt;g of Fat&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Body measurements&lt;/li&gt; &#xA;   &lt;li&gt;Overall training adherence&lt;/li&gt; &#xA;   &lt;li&gt;Note: Comments on fitness&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Productivity &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Overall happiness with life progress of the week, do I go into the right direction?&lt;/li&gt; &#xA;   &lt;li&gt;Number of open Trello tasks (from &lt;a href=&#34;https://howisFelix.today&#34;&gt;howisFelix.today&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Number of emails in Inbox less than 5?&lt;/li&gt; &#xA;   &lt;li&gt;Average daily hours on computer&lt;/li&gt; &#xA;   &lt;li&gt;Average daily iOS screen time (minus MyFitnessPal and Strong app)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Social &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Felt like spent enough time with family?&lt;/li&gt; &#xA;   &lt;li&gt;Had deep conversations with close friends?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Did I travel, this includes every city more than 1h away, this is relevant for both fitness and productivity&lt;/li&gt; &#xA;   &lt;li&gt;Note of all locations I was at (cities)&lt;/li&gt; &#xA;   &lt;li&gt;Got out of my comfort zone &amp;amp; experienced/tried new things?&lt;/li&gt; &#xA;   &lt;li&gt;Do you feel like having to travel somewhere?&lt;/li&gt; &#xA;   &lt;li&gt;Do you feel like you&#39;re missing out on things?&lt;/li&gt; &#xA;   &lt;li&gt;Played computer games by myself&lt;/li&gt; &#xA;   &lt;li&gt;Played computer games with friends or family?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Telegram&lt;/h2&gt; &#xA;&lt;h3&gt;Insert for available commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;skip - Skip a question that was asked&#xA;report - Generate one page report&#xA;track - Track a specific value only&#xA;mood - Track your mood&#xA;awake - First thing in the morning&#xA;asleep - Right before going to sleep&#xA;week - Once per week metrics&#xA;skip_all - Remove all queued questions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Running locally&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;After using &lt;code&gt;npm run dev&lt;/code&gt;, open &lt;a href=&#34;chrome://inspect&#34;&gt;chrome://inspect&lt;/a&gt; to use the Chrome Dev Tools&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.keys&lt;/code&gt; file or however you manage your secret env variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export TELEGRAM_BOT_TOKEN=&#34;&#34;&#xA;export TELEGRAM_USER_ID=&#34;&#34;&#xA;export TELEGRAM_CHAT_ID=&#34;&#34;&#xA;&#xA;export DATABASE_URL=&#34;&#34;&#xA;&#xA;export LIFESHEET_JSON_URL=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scheduler&lt;/h3&gt; &#xA;&lt;p&gt;Use the Heroku scheduler, and set it to run every hour to remind you to run certain commands according to the defined schedule (&lt;code&gt;weekly&lt;/code&gt;, etc)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run reminder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Postgres&lt;/h3&gt; &#xA;&lt;p&gt;Create a new Postgres database, and run the SQL queries defined in &lt;a href=&#34;https://raw.githubusercontent.com/KrauseFx/FxLifeSheet/master/db/create_tables.sql&#34;&gt;db/create_tables.sql&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/KrauseFx/FxLifeSheet/master/screenshots/Database1.png&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/KrauseFx/FxLifeSheet/master/screenshots/Database2.png&#34;&gt; &#xA;&lt;h3&gt;Data Visualization&lt;/h3&gt; &#xA;&lt;p&gt;To analyze the data, check out the &lt;code&gt;visual_playground&lt;/code&gt; subfolder &lt;a href=&#34;https://github.com/KrauseFx/FxLifeSheet/tree/master/visual_playground&#34;&gt;https://github.com/KrauseFx/FxLifeSheet/tree/master/visual_playground&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Origins&lt;/h2&gt; &#xA;&lt;p&gt;The original implementation abused Google Sheets as a database, and I used Google Data Studio to visualize the data. Both implementations ended up not working pretty quickly.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/KrauseFx/FxLifeSheet/master/screenshots/Dashboard1.png&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/KrauseFx/FxLifeSheet/master/screenshots/Dashboard2.png&#34;&gt;</summary>
  </entry>
  <entry>
    <title>joemasilotti/railsdevs.com</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/joemasilotti/railsdevs.com</id>
    <link href="https://github.com/joemasilotti/railsdevs.com" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The reverse job board for Ruby on Rails developers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rails Devs&lt;/h1&gt; &#xA;&lt;p&gt;The reverse job board for Rails developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2092156/147028085-eea40303-c572-48c0-b107-0be93cce067c.png&#34; alt=&#34;railsdevs homepage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;railsdevs&lt;/code&gt; empowers independent developers available for their next gig. It is being built around &lt;a href=&#34;https://railsdevs.com/about&#34;&gt;three core values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Empowering the independent developer&lt;/li&gt; &#xA; &lt;li&gt;Doing everything in public&lt;/li&gt; &#xA; &lt;li&gt;Creating a safe, inclusive environment&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You will need a few non-Ruby packages installed. Install these at once via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew bundle install --no-upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or manually:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 3.1.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/9.5/libpq.html&#34;&gt;libpq&lt;/a&gt; - &lt;code&gt;brew install libpq&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;libpg&lt;/code&gt; is needed to use the native &lt;code&gt;pg&lt;/code&gt; gem without Rosetta on M1 macs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org&#34;&gt;postgresql&lt;/a&gt; - &lt;code&gt;brew install postgresql&lt;/code&gt; [Note: PostgreSQL 13+ is required]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node&lt;/a&gt; - &lt;code&gt;brew install node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yarnpkg.com&#34;&gt;Yarn&lt;/a&gt; - &lt;code&gt;brew install yarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt; - &lt;code&gt;brew install redis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://imagemagick.org&#34;&gt;Imagemagick&lt;/a&gt; - &lt;code&gt;brew install imagemagick&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stripe.com/docs/stripe-cli&#34;&gt;Stripe CLI&lt;/a&gt; - &lt;code&gt;brew install stripe/stripe-cli/stripe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddollar/foreman&#34;&gt;foreman&lt;/a&gt; - &lt;code&gt;gem install foreman&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Chrome + Chromedriver for system tests - &lt;code&gt;brew install --cask google-chrome chromedriver&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Initial setup&lt;/h3&gt; &#xA;&lt;p&gt;Start PostgreSQL server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services start postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start Redis server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services start redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An installation script is included with the repository that will automatically get the application setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Run the following to start the server and automatically build assets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires &lt;code&gt;foreman&lt;/code&gt; or &lt;code&gt;overmind&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Requires &lt;code&gt;stripe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Seeds&lt;/h3&gt; &#xA;&lt;p&gt;Seeding the database, either via &lt;code&gt;rails db:seed&lt;/code&gt; or during &lt;code&gt;bin/setup&lt;/code&gt;, creates a few accounts. Most importantly, use &lt;code&gt;developer@example.com&lt;/code&gt; and &lt;code&gt;business@example.com&lt;/code&gt; with password &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More information is in &lt;a href=&#34;https://raw.githubusercontent.com/joemasilotti/railsdevs.com/main/docs/seeds.md&#34;&gt;the docs on seeds&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stripe&lt;/h3&gt; &#xA;&lt;p&gt;You will need to configure Stripe or do a mock configuration (ie set dummy values for the last step listed below) if you are working on anything related to payments.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dashboard.stripe.com/register&#34;&gt;Register for Stripe&lt;/a&gt; and add an account&lt;/li&gt; &#xA; &lt;li&gt;Download the Stripe CLI via &lt;code&gt;brew install stripe/stripe-cli/stripe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Login to the Stripe CLI via &lt;code&gt;stripe login&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure your development credentials &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dashboard.stripe.com/test/apikeys&#34;&gt;Create a Stripe secret key for test mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;stripe listen --forward-to localhost:3000/pay/webhooks/stripe&lt;/code&gt; in order to generate your webhook signing secret.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dashboard.stripe.com/test/products/create&#34;&gt;Create a product&lt;/a&gt; with a recurring, monthly price&lt;/li&gt; &#xA;   &lt;li&gt;Generate your editable development credentials file via &lt;code&gt;EDITOR=&#34;mate --wait&#34; bin/rails credentials:edit --environment development&lt;/code&gt;. You may need to install and provide terminal access to the editor first (mate, subl, and atom should all work). If you run the code above and receive the message &#34;New credentials encrypted and saved&#34;, without having had the opportunity to edit the file first, things have gone astray. You will need to troubleshoot this step based on your OS and desired editor, to ensure you are able to edit the development.yml file before it is encoded and saved. &lt;a href=&#34;https://stackoverflow.com/questions/52370065/issue-to-open-credentials-file&#34;&gt;See here for more details.&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add the secret key, the price, and your webhook signing secret to your development credentials in the following format, and save/close the file:&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;stripe:&#xA;  private_key: sk_test_YOUR_TEST_STRIPE_KEY&#xA;  signing_secret: whsec_YOUR_SIGNING_SECRET&#xA;  price_ids:&#xA;    part_time_plan: price_YOUR_PRODUCT_PRICE_ID&#xA;    full_time_plan: price_ANOTHER_PRODUCT_PRICE_ID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monitoring&lt;/h2&gt; &#xA;&lt;p&gt;Application monitoring is powered by &lt;a href=&#34;https://scoutapm.com&#34;&gt;Scout APM&lt;/a&gt;. This helps identify N+1 queries, slow queries, memory bloats, and more. Scout APM is free for open source.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rails test&lt;/code&gt; to run unit/integration tests.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rails test:system&lt;/code&gt; to run system tests, using &lt;code&gt;headless_chrome&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;HEADFUL=1 rails test:system&lt;/code&gt; to run system tests, using &lt;code&gt;headful_chrome&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Significant changes and product updates are documented in the &lt;a href=&#34;https://raw.githubusercontent.com/joemasilotti/railsdevs.com/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Open source support&lt;/h2&gt; &#xA;&lt;p&gt;railsdevs uses a free or discounted open source plan from the following companies. Thank you for the support!&lt;/p&gt; &#xA;&lt;a href=&#34;https://tracking.scoutapm.com/t/102858/c/24eac3db-39dd-4863-b972-a35a3e35b72b/NB2HI4DTHIXS65DFOIXGY2JPNA4GWMRZOI======/ter-li-h8k29r&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2092156/169346365-12f3806f-5a04-494a-a2d6-45611666c57c.png&#34; width=&#34;250&#34; alt=&#34;Scout APM logo&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>github/markup</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/github/markup</id>
    <link href="https://github.com/github/markup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Determines which markup library to use to render a content file (e.g. README) on GitHub&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub Markup&lt;/h1&gt; &#xA;&lt;p&gt;This library is the &lt;strong&gt;first step&lt;/strong&gt; of a journey that every markup file in a repository goes on before it is rendered on GitHub.com:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;github-markup&lt;/code&gt; selects an &lt;em&gt;underlying library&lt;/em&gt; to convert the raw markup to HTML. See the list of &lt;a href=&#34;https://raw.githubusercontent.com/github/markup/master/#markups&#34;&gt;supported markup formats&lt;/a&gt; below.&lt;/li&gt; &#xA; &lt;li&gt;The HTML is sanitized, aggressively removing things that could harm you and your kin—such as &lt;code&gt;script&lt;/code&gt; tags, inline-styles, and &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; attributes.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting is performed on code blocks. See &lt;a href=&#34;https://github.com/github/linguist#syntax-highlighting&#34;&gt;github/linguist&lt;/a&gt; for more information about syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;The HTML is passed through other filters that add special sauce, such as emoji, task lists, named anchors, CDN caching for images, and autolinking.&lt;/li&gt; &#xA; &lt;li&gt;The resulting HTML is rendered on GitHub.com.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please note that &lt;strong&gt;only the first step&lt;/strong&gt; is covered by this gem — the rest happens on GitHub.com. In particular, &lt;code&gt;markup&lt;/code&gt; itself does no sanitization of the resulting HTML, as it expects that to be covered by whatever pipeline is consuming the HTML.&lt;/p&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/github/markup/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; before reporting an issue.&lt;/p&gt; &#xA;&lt;h2&gt;Markups&lt;/h2&gt; &#xA;&lt;p&gt;The following markups are supported. The dependencies listed are required if you wish to run the library. You can also run &lt;code&gt;script/bootstrap&lt;/code&gt; to fetch them all.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;.markdown, .mdown, .mkdn, .md&lt;/a&gt; -- &lt;code&gt;gem install commonmarker&lt;/code&gt; (&lt;a href=&#34;https://github.com/gjtorikian/commonmarker&#34;&gt;https://github.com/gjtorikian/commonmarker&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.promptworks.com/textile&#34;&gt;.textile&lt;/a&gt; -- &lt;code&gt;gem install RedCloth&lt;/code&gt; (&lt;a href=&#34;https://github.com/jgarber/redcloth&#34;&gt;https://github.com/jgarber/redcloth&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruby.github.io/rdoc/&#34;&gt;.rdoc&lt;/a&gt; -- &lt;code&gt;gem install rdoc -v 3.6.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://orgmode.org/&#34;&gt;.org&lt;/a&gt; -- &lt;code&gt;gem install org-ruby&lt;/code&gt; (&lt;a href=&#34;https://github.com/wallyqs/org-ruby&#34;&gt;https://github.com/wallyqs/org-ruby&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wikicreole.org/&#34;&gt;.creole&lt;/a&gt; -- &lt;code&gt;gem install creole&lt;/code&gt; (&lt;a href=&#34;https://github.com/larsch/creole&#34;&gt;https://github.com/larsch/creole&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;.mediawiki, .wiki&lt;/a&gt; -- &lt;code&gt;gem install wikicloth&lt;/code&gt; (&lt;a href=&#34;https://github.com/nricciar/wikicloth&#34;&gt;https://github.com/nricciar/wikicloth&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docutils.sourceforge.net/rst.html&#34;&gt;.rst&lt;/a&gt; -- &lt;code&gt;pip install docutils&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://asciidoc.org/&#34;&gt;.asciidoc, .adoc, .asc&lt;/a&gt; -- &lt;code&gt;gem install asciidoctor&lt;/code&gt; (&lt;a href=&#34;http://asciidoctor.org&#34;&gt;http://asciidoctor.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://search.cpan.org/dist/perl/pod/perlpod.pod&#34;&gt;.pod&lt;/a&gt; -- &lt;code&gt;Pod::Simple::XHTML&lt;/code&gt; comes with Perl &amp;gt;= 5.10. Lower versions should install Pod::Simple from CPAN.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install github-markup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from this directory.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Basic form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;github/markup&#39;&#xA;&#xA;GitHub::Markup.render(&#39;README.markdown&#39;, &#34;* One\n* Two&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More realistic form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;github/markup&#39;&#xA;&#xA;GitHub::Markup.render(file, File.read(file))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a convenience form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;github/markup&#39;&#xA;&#xA;GitHub::Markup.render_s(GitHub::Markups::MARKUP_MARKDOWN, &#34;* One\n* Two&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/github/markup/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>heartcombo/devise</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/heartcombo/devise</id>
    <link href="https://github.com/heartcombo/devise" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible authentication solution for Rails with Warden.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/heartcombo/devise/main/devise.png&#34; alt=&#34;Devise Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codeclimate.com/github/heartcombo/devise&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/heartcombo/devise.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Devise is a flexible authentication solution for Rails based on Warden. It:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is Rack based;&lt;/li&gt; &#xA; &lt;li&gt;Is a complete MVC solution based on Rails engines;&lt;/li&gt; &#xA; &lt;li&gt;Allows you to have multiple models signed in at the same time;&lt;/li&gt; &#xA; &lt;li&gt;Is based on a modularity concept: use only what you really need.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s composed of 10 modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/DatabaseAuthenticatable&#34;&gt;Database Authenticatable&lt;/a&gt;: hashes and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Omniauthable&#34;&gt;Omniauthable&lt;/a&gt;: adds OmniAuth (&lt;a href=&#34;https://github.com/omniauth/omniauth&#34;&gt;https://github.com/omniauth/omniauth&lt;/a&gt;) support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Confirmable&#34;&gt;Confirmable&lt;/a&gt;: sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Recoverable&#34;&gt;Recoverable&lt;/a&gt;: resets the user password and sends reset instructions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Registerable&#34;&gt;Registerable&lt;/a&gt;: handles signing up users through a registration process, also allowing them to edit and destroy their account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Rememberable&#34;&gt;Rememberable&lt;/a&gt;: manages generating and clearing a token for remembering the user from a saved cookie.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Trackable&#34;&gt;Trackable&lt;/a&gt;: tracks sign in count, timestamps and IP address.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Timeoutable&#34;&gt;Timeoutable&lt;/a&gt;: expires sessions that have not been active in a specified period of time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Validatable&#34;&gt;Validatable&lt;/a&gt;: provides validations of email and password. It&#39;s optional and can be customized, so you&#39;re able to define your own validations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Lockable&#34;&gt;Lockable&lt;/a&gt;: locks an account after a specified number of failed sign-in attempts. Can unlock via email or after a specified time period.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- TOC depthFrom:1 depthTo:6 withLinks:1 orderedList:0 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#information&#34;&gt;Information&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#the-devise-wiki&#34;&gt;The Devise wiki&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#bug-reports&#34;&gt;Bug reports&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#stackoverflow-and-mailing-list&#34;&gt;StackOverflow and Mailing List&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#rdocs&#34;&gt;RDocs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#example-applications&#34;&gt;Example applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#starting-with-rails&#34;&gt;Starting with Rails?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#controller-filters-and-helpers&#34;&gt;Controller filters and helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-models&#34;&gt;Configuring Models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#strong-parameters&#34;&gt;Strong Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-views&#34;&gt;Configuring views&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-controllers&#34;&gt;Configuring controllers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-routes&#34;&gt;Configuring routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#i18n&#34;&gt;I18n&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#test-helpers&#34;&gt;Test helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#controller-tests&#34;&gt;Controller tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#integration-tests&#34;&gt;Integration tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#omniauth&#34;&gt;OmniAuth&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#configuring-multiple-models&#34;&gt;Configuring multiple models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#activejob-integration&#34;&gt;ActiveJob Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#password-reset-tokens-and-rails-logs&#34;&gt;Password reset tokens and Rails logs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#other-orms&#34;&gt;Other ORMs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#rails-api-mode&#34;&gt;Rails API mode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#additional-information&#34;&gt;Additional information&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#warden&#34;&gt;Warden&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;h3&gt;The Devise wiki&lt;/h3&gt; &#xA;&lt;p&gt;The Devise Wiki has lots of additional information about Devise including many &#34;how-to&#34; articles and answers to the most frequently asked questions. Please browse the Wiki after finishing this README:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki&#34;&gt;https://github.com/heartcombo/devise/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Bug reports&lt;/h3&gt; &#xA;&lt;p&gt;If you discover a problem with Devise, we would like to know about it. However, we ask that you please review these guidelines before submitting a bug report:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Bug-reports&#34;&gt;https://github.com/heartcombo/devise/wiki/Bug-reports&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have discovered a security related bug, please do &lt;em&gt;NOT&lt;/em&gt; use the GitHub issue tracker. Send an email to &lt;a href=&#34;mailto:heartcombo@googlegroups.com&#34;&gt;heartcombo@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;StackOverflow and Mailing List&lt;/h3&gt; &#xA;&lt;p&gt;If you have any questions, comments, or concerns, please use StackOverflow instead of the GitHub issue tracker:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/devise&#34;&gt;http://stackoverflow.com/questions/tagged/devise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The deprecated mailing list can still be read on&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/plataformatec-devise&#34;&gt;https://groups.google.com/group/plataformatec-devise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;RDocs&lt;/h3&gt; &#xA;&lt;p&gt;You can view the Devise documentation in RDoc format here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rubydoc.info/github/heartcombo/devise/main/frames&#34;&gt;http://rubydoc.info/github/heartcombo/devise/main/frames&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you need to use Devise with previous versions of Rails, you can always run &#34;gem server&#34; from the command line after you install the gem to access the old documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Example applications&lt;/h3&gt; &#xA;&lt;p&gt;There are a few example applications available on GitHub that demonstrate various features of Devise with different versions of Rails. You can view them here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Example-Applications&#34;&gt;https://github.com/heartcombo/devise/wiki/Example-Applications&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Our community has created a number of extensions that add functionality above and beyond what is included with Devise. You can view a list of available extensions and add your own here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Extensions&#34;&gt;https://github.com/heartcombo/devise/wiki/Extensions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We hope that you will consider contributing to Devise. Please read this short overview for some information about how to get started:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/Contributing&#34;&gt;https://github.com/heartcombo/devise/wiki/Contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will usually want to write tests for your changes. To run the test suite, go into Devise&#39;s top-level directory and run &lt;code&gt;bundle install&lt;/code&gt; and &lt;code&gt;bin/test&lt;/code&gt;. Devise works with multiple Ruby and Rails versions, and ActiveRecord and Mongoid ORMs, which means you can run the test suite with some modifiers: &lt;code&gt;DEVISE_ORM&lt;/code&gt; and &lt;code&gt;BUNDLE_GEMFILE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;DEVISE_ORM&lt;/h3&gt; &#xA;&lt;p&gt;Since Devise supports both Mongoid and ActiveRecord, we rely on this variable to run specific code for each ORM. The default value of &lt;code&gt;DEVISE_ORM&lt;/code&gt; is &lt;code&gt;active_record&lt;/code&gt;. To run the tests for Mongoid, you can pass &lt;code&gt;mongoid&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DEVISE_ORM=mongoid bin/test&#xA;&#xA;==&amp;gt; Devise.orm = :mongoid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When running the tests for Mongoid, you will need to have a MongoDB server (version 2.0 or newer) running on your system.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the command output will show the variable value being used.&lt;/p&gt; &#xA;&lt;h3&gt;BUNDLE_GEMFILE&lt;/h3&gt; &#xA;&lt;p&gt;We can use this variable to tell bundler what Gemfile it should use (instead of the one in the current directory). Inside the &lt;a href=&#34;https://github.com/heartcombo/devise/tree/main/gemfiles&#34;&gt;gemfiles&lt;/a&gt; directory, we have one for each version of Rails we support. When you send us a pull request, it may happen that the test suite breaks using some of them. If that&#39;s the case, you can simulate the same environment using the &lt;code&gt;BUNDLE_GEMFILE&lt;/code&gt; variable. For example, if the tests broke using Ruby 2.4.2 and Rails 4.1, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rbenv shell 2.4.2 # or rvm use 2.4.2&#xA;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bundle install&#xA;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also combine both of them if the tests broke for Mongoid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bundle install&#xA;BUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable DEVISE_ORM=mongoid bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;Devise uses &lt;a href=&#34;https://github.com/seattlerb/minitest&#34;&gt;Mini Test&lt;/a&gt; as test framework.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running all tests:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running tests for an specific file:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test test/models/trackable_test.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running a specific test given a regex:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test test/models/trackable_test.rb:16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Starting with Rails?&lt;/h2&gt; &#xA;&lt;p&gt;If you are building your first Rails application, we recommend you &lt;em&gt;do not&lt;/em&gt; use Devise. Devise requires a good understanding of the Rails Framework. In such cases, we advise you to start a simple authentication system from scratch. Here&#39;s a few resources that should help you get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Michael Hartl&#39;s online book: &lt;a href=&#34;https://www.railstutorial.org/book/modeling_users&#34;&gt;https://www.railstutorial.org/book/modeling_users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ryan Bates&#39; Railscasts: &lt;a href=&#34;http://railscasts.com/episodes/250-authentication-from-scratch&#34;&gt;http://railscasts.com/episodes/250-authentication-from-scratch&lt;/a&gt; and &lt;a href=&#34;http://railscasts.com/episodes/250-authentication-from-scratch-revised&#34;&gt;http://railscasts.com/episodes/250-authentication-from-scratch-revised&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Codecademy&#39;s Ruby on Rails: Authentication and Authorization: &lt;a href=&#34;https://www.codecademy.com/learn/rails-auth&#34;&gt;https://www.codecademy.com/learn/rails-auth&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have solidified your understanding of Rails and authentication mechanisms, we assure you Devise will be very pleasant to work with. &lt;span&gt;😃&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Devise 4.0 works with Rails 4.1 onwards. Add the following line to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;devise&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next, you need to run the generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, a number of instructions will appear in the console. Among these instructions, you&#39;ll need to set up the default URL options for the Devise mailer in each environment. Here is a possible configuration for &lt;code&gt;config/environments/development.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generator will install an initializer which describes ALL of Devise&#39;s configuration options. It is &lt;em&gt;imperative&lt;/em&gt; that you take a look at it. When you are done, you are ready to add Devise to any of your models using the generator.&lt;/p&gt; &#xA;&lt;p&gt;In the following command you will replace &lt;code&gt;MODEL&lt;/code&gt; with the class name used for the application’s users (it’s frequently &lt;code&gt;User&lt;/code&gt; but could also be &lt;code&gt;Admin&lt;/code&gt;). This will create a model (if one does not exist) and configure it with the default Devise modules. The generator also configures your &lt;code&gt;config/routes.rb&lt;/code&gt; file to point to the Devise controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise MODEL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, check the MODEL for any additional configuration options you might want to add, such as confirmable or lockable. If you add an option, be sure to inspect the migration file (created by the generator if your ORM supports them) and uncomment the appropriate section. For example, if you add the confirmable option in the model, you&#39;ll need to uncomment the Confirmable section in the migration.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;rails db:migrate&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You should restart your application after changing Devise&#39;s configuration options (this includes stopping spring). Otherwise, you will run into strange errors, for example, users being unable to login and route helpers being undefined.&lt;/p&gt; &#xA;&lt;h3&gt;Controller filters and helpers&lt;/h3&gt; &#xA;&lt;p&gt;Devise will create some helpers to use inside your controllers and views. To set up a controller with user authentication, just add this before_action (assuming your devise model is &#39;User&#39;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before_action :authenticate_user!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Rails 5, note that &lt;code&gt;protect_from_forgery&lt;/code&gt; is no longer prepended to the &lt;code&gt;before_action&lt;/code&gt; chain, so if you have set &lt;code&gt;authenticate_user&lt;/code&gt; before &lt;code&gt;protect_from_forgery&lt;/code&gt;, your request will result in &#34;Can&#39;t verify CSRF token authenticity.&#34; To resolve this, either change the order in which you call them, or use &lt;code&gt;protect_from_forgery prepend: true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your devise model is something other than User, replace &#34;_user&#34; with &#34;_yourmodel&#34;. The same logic applies to the instructions below.&lt;/p&gt; &#xA;&lt;p&gt;To verify if a user is signed in, use the following helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user_signed_in?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the current signed-in user, this helper is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;current_user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access the session for this scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user_session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After signing in a user, confirming the account or updating the password, Devise will look for a scoped root path to redirect to. For instance, when using a &lt;code&gt;:user&lt;/code&gt; resource, the &lt;code&gt;user_root_path&lt;/code&gt; will be used if it exists; otherwise, the default &lt;code&gt;root_path&lt;/code&gt; will be used. This means that you need to set the root inside your routes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;root to: &#39;home#index&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also override &lt;code&gt;after_sign_in_path_for&lt;/code&gt; and &lt;code&gt;after_sign_out_path_for&lt;/code&gt; to customize your redirect hooks.&lt;/p&gt; &#xA;&lt;p&gt;Notice that if your Devise model is called &lt;code&gt;Member&lt;/code&gt; instead of &lt;code&gt;User&lt;/code&gt;, for example, then the helpers available are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before_action :authenticate_member!&#xA;&#xA;member_signed_in?&#xA;&#xA;current_member&#xA;&#xA;member_session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Models&lt;/h3&gt; &#xA;&lt;p&gt;The Devise method in your models also accepts some options to configure its modules. For example, you can choose the cost of the hashing algorithm with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise :database_authenticatable, :registerable, :confirmable, :recoverable, stretches: 13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides &lt;code&gt;:stretches&lt;/code&gt;, you can define &lt;code&gt;:pepper&lt;/code&gt;, &lt;code&gt;:encryptor&lt;/code&gt;, &lt;code&gt;:confirm_within&lt;/code&gt;, &lt;code&gt;:remember_for&lt;/code&gt;, &lt;code&gt;:timeout_in&lt;/code&gt;, &lt;code&gt;:unlock_in&lt;/code&gt; among other options. For more details, see the initializer file that was created when you invoked the &#34;devise:install&#34; generator described above. This file is usually located at &lt;code&gt;/config/initializers/devise.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Strong Parameters&lt;/h3&gt; &#xA;&lt;p&gt;The Parameter Sanitizer API has changed for Devise 4 &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For previous Devise versions see &lt;a href=&#34;https://github.com/heartcombo/devise/tree/3-stable#strong-parameters&#34;&gt;https://github.com/heartcombo/devise/tree/3-stable#strong-parameters&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you customize your own views, you may end up adding new attributes to forms. Rails 4 moved the parameter sanitization from the model to the controller, causing Devise to handle this concern at the controller as well.&lt;/p&gt; &#xA;&lt;p&gt;There are just three actions in Devise that allow any set of parameters to be passed down to the model, therefore requiring sanitization. Their names and default permitted parameters are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sign_in&lt;/code&gt; (&lt;code&gt;Devise::SessionsController#create&lt;/code&gt;) - Permits only the authentication keys (like &lt;code&gt;email&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sign_up&lt;/code&gt; (&lt;code&gt;Devise::RegistrationsController#create&lt;/code&gt;) - Permits authentication keys plus &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;password_confirmation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;account_update&lt;/code&gt; (&lt;code&gt;Devise::RegistrationsController#update&lt;/code&gt;) - Permits authentication keys plus &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;password_confirmation&lt;/code&gt; and &lt;code&gt;current_password&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In case you want to permit additional parameters (the lazy way™), you can do so using a simple before action in your &lt;code&gt;ApplicationController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  before_action :configure_permitted_parameters, if: :devise_controller?&#xA;&#xA;  protected&#xA;&#xA;  def configure_permitted_parameters&#xA;    devise_parameter_sanitizer.permit(:sign_up, keys: [:username])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above works for any additional fields where the parameters are simple scalar types. If you have nested attributes (say you&#39;re using &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;), then you will need to tell devise about those nestings and types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  before_action :configure_permitted_parameters, if: :devise_controller?&#xA;&#xA;  protected&#xA;&#xA;  def configure_permitted_parameters&#xA;    devise_parameter_sanitizer.permit(:sign_up, keys: [:first_name, :last_name, address_attributes: [:country, :state, :city, :area, :postal_code]])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Devise allows you to completely change Devise defaults or invoke custom behavior by passing a block:&lt;/p&gt; &#xA;&lt;p&gt;To permit simple scalar values for username and email, use this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def configure_permitted_parameters&#xA;  devise_parameter_sanitizer.permit(:sign_in) do |user_params|&#xA;    user_params.permit(:username, :email)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have some checkboxes that express the roles a user may take on registration, the browser will send those selected checkboxes as an array. An array is not one of Strong Parameters&#39; permitted scalars, so we need to configure Devise in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def configure_permitted_parameters&#xA;  devise_parameter_sanitizer.permit(:sign_up) do |user_params|&#xA;    user_params.permit({ roles: [] }, :email, :password, :password_confirmation)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the list of permitted scalars, and how to declare permitted keys in nested hashes and arrays, see&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rails/strong_parameters#nested-parameters&#34;&gt;https://github.com/rails/strong_parameters#nested-parameters&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have multiple Devise models, you may want to set up a different parameter sanitizer per model. In this case, we recommend inheriting from &lt;code&gt;Devise::ParameterSanitizer&lt;/code&gt; and adding your own logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User::ParameterSanitizer &amp;lt; Devise::ParameterSanitizer&#xA;  def initialize(*)&#xA;    super&#xA;    permit(:sign_up, keys: [:username, :email])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then configure your controllers to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  protected&#xA;&#xA;  def devise_parameter_sanitizer&#xA;    if resource_class == User&#xA;      User::ParameterSanitizer.new(User, :user, params)&#xA;    else&#xA;      super # Use the default one&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above overrides the permitted parameters for the user to be both &lt;code&gt;:username&lt;/code&gt; and &lt;code&gt;:email&lt;/code&gt;. The non-lazy way to configure parameters would be by defining the before filter above in a custom controller. We detail how to configure and customize controllers in some sections below.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring views&lt;/h3&gt; &#xA;&lt;p&gt;We built Devise to help you quickly develop an application that uses authentication. However, we don&#39;t want to be in your way when you need to customize it.&lt;/p&gt; &#xA;&lt;p&gt;Since Devise is an engine, all its views are packaged inside the gem. These views will help you get started, but after some time you may want to change them. If this is the case, you just need to invoke the following generator, and it will copy all views to your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:views&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have more than one Devise model in your application (such as &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Admin&lt;/code&gt;), you will notice that Devise uses the same views for all models. Fortunately, Devise offers an easy way to customize views. All you need to do is set &lt;code&gt;config.scoped_views = true&lt;/code&gt; inside the &lt;code&gt;config/initializers/devise.rb&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;After doing so, you will be able to have views based on the role like &lt;code&gt;users/sessions/new&lt;/code&gt; and &lt;code&gt;admins/sessions/new&lt;/code&gt;. If no view is found within the scope, Devise will use the default view at &lt;code&gt;devise/sessions/new&lt;/code&gt;. You can also use the generator to generate scoped views:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:views users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to generate only a few sets of views, like the ones for the &lt;code&gt;registerable&lt;/code&gt; and &lt;code&gt;confirmable&lt;/code&gt; module, you can pass a list of modules to the generator with the &lt;code&gt;-v&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:views -v registrations confirmations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring controllers&lt;/h3&gt; &#xA;&lt;p&gt;If the customization at the views level is not enough, you can customize each controller by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your custom controllers using the generator which requires a scope:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rails generate devise:controllers [scope]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you specify &lt;code&gt;users&lt;/code&gt; as the scope, controllers will be created in &lt;code&gt;app/controllers/users/&lt;/code&gt;. And the sessions controller will look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController&#xA;  # GET /resource/sign_in&#xA;  # def new&#xA;  #   super&#xA;  # end&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Use the -c flag to specify a controller, for example: &lt;code&gt;rails generate devise:controllers users -c=sessions&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tell the router to use this controller:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_for :users, controllers: { sessions: &#39;users/sessions&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the views from &lt;code&gt;devise/sessions&lt;/code&gt; to &lt;code&gt;users/sessions&lt;/code&gt;. Since the controller was changed, it won&#39;t use the default views located in &lt;code&gt;devise/sessions&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, change or extend the desired controller actions.&lt;/p&gt; &lt;p&gt;You can completely override a controller action:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController&#xA;  def create&#xA;    # custom sign-in code&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or you can simply add new behavior to it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Devise::SessionsController&#xA;  def create&#xA;    super do |resource|&#xA;      BackgroundWorker.trigger(resource)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful for triggering background jobs or logging events during certain actions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Remember that Devise uses flash messages to let users know if sign in was successful or unsuccessful. Devise expects your application to call &lt;code&gt;flash[:notice]&lt;/code&gt; and &lt;code&gt;flash[:alert]&lt;/code&gt; as appropriate. Do not print the entire flash hash, print only specific keys. In some circumstances, Devise adds a &lt;code&gt;:timedout&lt;/code&gt; key to the flash hash, which is not meant for display. Remove this key from the hash if you intend to print the entire hash.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring routes&lt;/h3&gt; &#xA;&lt;p&gt;Devise also ships with default routes. If you need to customize them, you should probably be able to do it through the devise_for method. It accepts several options like :class_name, :path_prefix and so on, including the possibility to change path names for I18n:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_for :users, path: &#39;auth&#39;, path_names: { sign_in: &#39;login&#39;, sign_out: &#39;logout&#39;, password: &#39;secret&#39;, confirmation: &#39;verification&#39;, unlock: &#39;unblock&#39;, registration: &#39;register&#39;, sign_up: &#39;cmon_let_me_in&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to check &lt;code&gt;devise_for&lt;/code&gt; &lt;a href=&#34;http://www.rubydoc.info/github/heartcombo/devise/main/ActionDispatch/Routing/Mapper%3Adevise_for&#34;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;If you have the need for more deep customization, for instance to also allow &#34;/sign_in&#34; besides &#34;/users/sign_in&#34;, all you need to do is create your routes normally and wrap them in a &lt;code&gt;devise_scope&lt;/code&gt; block in the router:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_scope :user do&#xA;  get &#39;sign_in&#39;, to: &#39;devise/sessions#new&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, you tell Devise to use the scope &lt;code&gt;:user&lt;/code&gt; when &#34;/sign_in&#34; is accessed. Notice &lt;code&gt;devise_scope&lt;/code&gt; is also aliased as &lt;code&gt;as&lt;/code&gt; in your router.&lt;/p&gt; &#xA;&lt;p&gt;Please note: You will still need to add &lt;code&gt;devise_for&lt;/code&gt; in your routes in order to use helper methods such as &lt;code&gt;current_user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;devise_for :users, skip: :all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;I18n&lt;/h3&gt; &#xA;&lt;p&gt;Devise uses flash messages with I18n, in conjunction with the flash keys :notice and :alert. To customize your app, you can set up your locale file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  devise:&#xA;    sessions:&#xA;      signed_in: &#39;Signed in successfully.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create distinct messages based on the resource you&#39;ve configured using the singular name given in routes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  devise:&#xA;    sessions:&#xA;      user:&#xA;        signed_in: &#39;Welcome user, you are signed in.&#39;&#xA;      admin:&#xA;        signed_in: &#39;Hello admin!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Devise mailer uses a similar pattern to create subject messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  devise:&#xA;    mailer:&#xA;      confirmation_instructions:&#xA;        subject: &#39;Hello everybody!&#39;&#xA;        user_subject: &#39;Hello User! Please confirm your email&#39;&#xA;      reset_password_instructions:&#xA;        subject: &#39;Reset instructions&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at our locale file to check all available messages. You may also be interested in one of the many translations that are available on our wiki:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/I18n&#34;&gt;https://github.com/heartcombo/devise/wiki/I18n&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Caution: Devise Controllers inherit from ApplicationController. If your app uses multiple locales, you should be sure to set I18n.locale in ApplicationController.&lt;/p&gt; &#xA;&lt;h3&gt;Test helpers&lt;/h3&gt; &#xA;&lt;p&gt;Devise includes some test helpers for controller and integration tests. In order to use them, you need to include the respective module in your test cases/specs.&lt;/p&gt; &#xA;&lt;h3&gt;Controller tests&lt;/h3&gt; &#xA;&lt;p&gt;Controller tests require that you include &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt; on your test case or its parent &lt;code&gt;ActionController::TestCase&lt;/code&gt; superclass. For Rails versions prior to 5, include &lt;code&gt;Devise::Test::ControllerHelpers&lt;/code&gt; instead, since the superclass for controller tests was changed to ActionDispatch::IntegrationTest (for more details, see the &lt;a href=&#34;https://raw.githubusercontent.com/heartcombo/devise/main/#integration-tests&#34;&gt;Integration tests&lt;/a&gt; section).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsControllerTest &amp;lt; ActionController::TestCase&#xA;  include Devise::Test::IntegrationHelpers # Rails &amp;gt;= 5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsControllerTest &amp;lt; ActionController::TestCase&#xA;  include Devise::Test::ControllerHelpers # Rails &amp;lt; 5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using RSpec, you can put the following inside a file named &lt;code&gt;spec/support/devise.rb&lt;/code&gt; or in your &lt;code&gt;spec/spec_helper.rb&lt;/code&gt; (or &lt;code&gt;spec/rails_helper.rb&lt;/code&gt; if you are using &lt;code&gt;rspec-rails&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.include Devise::Test::ControllerHelpers, type: :controller&#xA;  config.include Devise::Test::ControllerHelpers, type: :view&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just be sure that this inclusion is made &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;require &#39;rspec/rails&#39;&lt;/code&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;Now you are ready to use the &lt;code&gt;sign_in&lt;/code&gt; and &lt;code&gt;sign_out&lt;/code&gt; methods on your controller tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sign_in @user&#xA;sign_in @user, scope: :admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are testing Devise internal controllers or a controller that inherits from Devise&#39;s, you need to tell Devise which mapping should be used before a request. This is necessary because Devise gets this information from the router, but since controller tests do not pass through the router, it needs to be stated explicitly. For example, if you are testing the user scope, simply use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;test &#39;GET new&#39; do&#xA;  # Mimic the router behavior of setting the Devise scope through the env.&#xA;  @request.env[&#39;devise.mapping&#39;] = Devise.mappings[:user]&#xA;&#xA;  # Use the sign_in helper to sign in a fixture `User` record.&#xA;  sign_in users(:alice)&#xA;&#xA;  get :new&#xA;&#xA;  # assert something&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration tests&lt;/h3&gt; &#xA;&lt;p&gt;Integration test helpers are available by including the &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostsTests &amp;lt; ActionDispatch::IntegrationTest&#xA;  include Devise::Test::IntegrationHelpers&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use the following &lt;code&gt;sign_in&lt;/code&gt; and &lt;code&gt;sign_out&lt;/code&gt; methods in your integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sign_in users(:bob)&#xA;sign_in users(:bob), scope: :admin&#xA;&#xA;sign_out :user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSpec users can include the &lt;code&gt;IntegrationHelpers&lt;/code&gt; module on their &lt;code&gt;:feature&lt;/code&gt; specs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|&#xA;  config.include Devise::Test::IntegrationHelpers, type: :feature&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike controller tests, integration tests do not need to supply the &lt;code&gt;devise.mapping&lt;/code&gt; &lt;code&gt;env&lt;/code&gt; value, as the mapping can be inferred by the routes that are executed in your tests.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about testing your Rails 3 - Rails 4 controllers with RSpec in the wiki:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Test-controllers-with-Rails-(and-RSpec)&#34;&gt;https://github.com/heartcombo/devise/wiki/How-To:-Test-controllers-with-Rails-(and-RSpec)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;OmniAuth&lt;/h3&gt; &#xA;&lt;p&gt;Devise comes with OmniAuth support out of the box to authenticate with other providers. To use it, simply specify your OmniAuth configuration in &lt;code&gt;config/initializers/devise.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.omniauth :github, &#39;APP_ID&#39;, &#39;APP_SECRET&#39;, scope: &#39;user,public_repo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read more about OmniAuth support in the wiki:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview&#34;&gt;https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuring multiple models&lt;/h3&gt; &#xA;&lt;p&gt;Devise allows you to set up as many Devise models as you want. If you want to have an Admin model with just authentication and timeout features, in addition to the User model above, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Create a migration with the required fields&#xA;create_table :admins do |t|&#xA;  t.string :email&#xA;  t.string :encrypted_password&#xA;  t.timestamps null: false&#xA;end&#xA;&#xA;# Inside your Admin model&#xA;devise :database_authenticatable, :timeoutable&#xA;&#xA;# Inside your routes&#xA;devise_for :admins&#xA;&#xA;# Inside your protected controller&#xA;before_action :authenticate_admin!&#xA;&#xA;# Inside your controllers and views&#xA;admin_signed_in?&#xA;current_admin&#xA;admin_session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can simply run the Devise generator.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that those models will have completely different routes. They &lt;strong&gt;do not&lt;/strong&gt; and &lt;strong&gt;cannot&lt;/strong&gt; share the same controller for sign in, sign out and so on. In case you want to have different roles sharing the same actions, we recommend that you use a role-based approach, by either providing a role column or using a dedicated gem for authorization.&lt;/p&gt; &#xA;&lt;h3&gt;ActiveJob Integration&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Rails 4.2 and ActiveJob to deliver ActionMailer messages in the background through a queuing back-end, you can send Devise emails through your existing queue by overriding the &lt;code&gt;send_devise_notification&lt;/code&gt; method in your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def send_devise_notification(notification, *args)&#xA;  devise_mailer.send(notification, self, *args).deliver_later&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Password reset tokens and Rails logs&lt;/h3&gt; &#xA;&lt;p&gt;If you enable the &lt;a href=&#34;http://rubydoc.info/github/heartcombo/devise/main/Devise/Models/Recoverable&#34;&gt;Recoverable&lt;/a&gt; module, note that a stolen password reset token could give an attacker access to your application. Devise takes effort to generate random, secure tokens, and stores only token digests in the database, never plaintext. However the default logging behavior in Rails can cause plaintext tokens to leak into log files:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Action Mailer logs the entire contents of all outgoing emails to the DEBUG level. Password reset tokens delivered to users in email will be leaked.&lt;/li&gt; &#xA; &lt;li&gt;Active Job logs all arguments to every enqueued job at the INFO level. If you configure Devise to use &lt;code&gt;deliver_later&lt;/code&gt; to send password reset emails, password reset tokens will be leaked.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Rails sets the production logger level to INFO by default. Consider changing your production logger level to WARN if you wish to prevent tokens from being leaked into your logs. In &lt;code&gt;config/environments/production.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.log_level = :warn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other ORMs&lt;/h3&gt; &#xA;&lt;p&gt;Devise supports ActiveRecord (default) and Mongoid. To select another ORM, simply require it in the initializer file.&lt;/p&gt; &#xA;&lt;h3&gt;Rails API Mode&lt;/h3&gt; &#xA;&lt;p&gt;Rails 5+ has a built-in &lt;a href=&#34;https://edgeguides.rubyonrails.org/api_app.html&#34;&gt;API Mode&lt;/a&gt; which optimizes Rails for use as an API (only). Devise is &lt;em&gt;somewhat&lt;/em&gt; able to handle applications that are built in this mode without additional modifications in the sense that it should not raise exceptions and the like. But some issues may still arise during &lt;code&gt;development&lt;/code&gt;/&lt;code&gt;testing&lt;/code&gt;, as we still don&#39;t know the full extent of this compatibility. (For more information, see &lt;a href=&#34;https://github.com/heartcombo/devise/issues/4947/&#34;&gt;issue #4947&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Supported Authentication Strategies&lt;/h4&gt; &#xA;&lt;p&gt;API-only applications don&#39;t support browser-based authentication via cookies, which is devise&#39;s default. Yet, devise can still provide authentication out of the box in those cases with the &lt;code&gt;http_authenticatable&lt;/code&gt; strategy, which uses HTTP Basic Auth and authenticates the user on each request. (For more info, see this wiki article for &lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Use-HTTP-Basic-Authentication&#34;&gt;How To: Use HTTP Basic Authentication&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;The devise default for HTTP Auth is disabled, so it will need to be enabled in the devise initializer for the database strategy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.http_authenticatable = [:database]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This restriction does not limit you from implementing custom warden strategies, either in your application or via gem-based extensions for devise. A common authentication strategy for APIs is token-based authentication. For more information on extending devise to support this type of authentication and others, see the wiki article for &lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Simple-Token-Authentication-Example#alternatives&#34;&gt;Simple Token Authentication Examples and alternatives&lt;/a&gt; or this blog post on &lt;a href=&#34;http://blog.plataformatec.com.br/2019/01/custom-authentication-methods-with-devise/&#34;&gt;Custom authentication methods with Devise&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;API Mode changes the order of the middleware stack, and this can cause problems for &lt;code&gt;Devise::Test::IntegrationHelpers&lt;/code&gt;. This problem usually surfaces as an &lt;code&gt;undefined method `[]=&#39; for nil:NilClass&lt;/code&gt; error when using integration test helpers, such as &lt;code&gt;#sign_in&lt;/code&gt;. The solution is simply to reorder the middlewares by adding the following to test.rb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Cookies&#xA;Rails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Session::CookieStore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a deeper understanding of this, review &lt;a href=&#34;https://github.com/heartcombo/devise/issues/4696&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally be mindful that without views supported, some email-based flows from Confirmable, Recoverable and Lockable are not supported directly at this time.&lt;/p&gt; &#xA;&lt;h2&gt;Additional information&lt;/h2&gt; &#xA;&lt;h3&gt;Warden&lt;/h3&gt; &#xA;&lt;p&gt;Devise is based on Warden, which is a general Rack authentication framework created by Daniel Neighman. We encourage you to read more about Warden here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wardencommunity/warden&#34;&gt;https://github.com/wardencommunity/warden&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;We have a long list of valued contributors. Check them all at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/graphs/contributors&#34;&gt;https://github.com/heartcombo/devise/graphs/contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License. Copyright 2020 Rafael França, Leonardo Tegon, Carlos Antônio da Silva. Copyright 2009-2019 Plataformatec.&lt;/p&gt; &#xA;&lt;p&gt;The Devise logo is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheOdinProject/theodinproject</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/TheOdinProject/theodinproject</id>
    <link href="https://github.com/TheOdinProject/theodinproject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main Website for The Odin Project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Odin Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.theodinproject.com/&#34;&gt;The Odin Project&lt;/a&gt; (TOP) is an open-source curriculum for learning full-stack web development. Our mission is to provide a comprehensive curriculum to learn web development for free. We help users learn the skills and build the impressive portfolio of projects they need to get hired as a web developer.&lt;/p&gt; &#xA;&lt;p&gt;Some of the topics we cover include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA; &lt;li&gt;Ruby on Rails&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;HTML and CSS&lt;/li&gt; &#xA; &lt;li&gt;Javascript&lt;/li&gt; &#xA; &lt;li&gt;Node&lt;/li&gt; &#xA; &lt;li&gt;React&lt;/li&gt; &#xA; &lt;li&gt;How to go about getting a job in the industry&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo contains the TOP app which pulls in lesson content as well as front-end and back-end code. To see the actual lesson content that gets pulled in, please go to the &lt;a href=&#34;https://github.com/TheOdinProject/curriculum&#34;&gt;TOP curriculum repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our community can be found on the &lt;a href=&#34;https://discord.gg/fbFCkYabZB&#34;&gt;TOP Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.circleci.com/pipelines/github/TheOdinProject/theodinproject&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/TheOdinProject/theodinproject.svg?style=svg&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Odin Project depends on open-source contributions to improve, grow, and thrive. We welcome contributors of all experience levels and backgrounds to help maintain this awesome curriculum and community. If you would like to contribute to our curriculum, be sure to thoroughly read our &lt;a href=&#34;https://github.com/TheOdinProject/theodinproject/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Significant Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eriktrautman&#34;&gt;Erik Trautman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/afshinator&#34;&gt;Afshin Moktari&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gorchov&#34;&gt;Josh Gorchov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zkay&#34;&gt;Joe Sawyer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mach1010&#34;&gt;Bill Walker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ngehani&#34;&gt;Neil Gehani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/Iawhite76&#34;&gt;Ian White&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/dominathan&#34;&gt;Nathan Hall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/AbbyJonesDev&#34;&gt;Abby Jones&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KevinMulhern&#34;&gt;Kevin Mulhern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arku&#34;&gt;Arun Kumar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codyloyd&#34;&gt;Cody Loyd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CouchofTomato&#34;&gt;Austin Mason&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/I3uckwheat&#34;&gt;Briggs Elsperger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/105ron&#34;&gt;Rhys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leosoaivan&#34;&gt;L. P. Soai-Van&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mindovermiles262&#34;&gt;Andy Duss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adachiu&#34;&gt;Ada Chiu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marvingay&#34;&gt;Marvin Gay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rlmoser99&#34;&gt;Rachel Moser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CatQueenCodes&#34;&gt;Grace Schwartz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twalton83&#34;&gt;Tatiana Walton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kashura&#34;&gt;Valera Kushnir&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;http://www.github.com/eriktrautman&#34;&gt;Erik Trautman&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/explore</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/github/explore</id>
    <link href="https://github.com/github/explore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Community-curated topic and collection pages on GitHub&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub Explore&lt;/h1&gt; &#xA;&lt;p&gt;This repository houses all of the community-curated content for GitHub Topics and Collections.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/about-topics/&#34;&gt;Topics&lt;/a&gt; help you explore repositories in a particular subject area, learn more about that subject, and find projects to contribute to.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/collections&#34;&gt;Collections&lt;/a&gt; help you discover hand-picked repositories, developers, organizations, videos, and articles that share a common theme.&lt;/p&gt; &#xA;&lt;p&gt;If you want to suggest edits to an existing topic page or collection, or curate a new one, read our &lt;a href=&#34;https://raw.githubusercontent.com/github/explore/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to get started. You can also &lt;a href=&#34;https://raw.githubusercontent.com/github/explore/main/topics-todo.md&#34;&gt;review a list of popular topics that need more context&lt;/a&gt; to get an idea of where to start.&lt;/p&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;There are some lint tests in place to ensure each topic is formatted in the way we expect. Travis CI will run the tests automatically. If you want to run the tests yourself locally, you will need Ruby and Bundler installed.&lt;/p&gt; &#xA;&lt;p&gt;You can run the tests using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;script/cibuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;Content is released under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC-BY-4.0&lt;/a&gt; which gives you permission to use content for almost any purpose (but does not grant you any trademark permissions). See &lt;a href=&#34;https://raw.githubusercontent.com/github/explore/main/notices.md&#34;&gt;notices&lt;/a&gt; for complete details, including attribution guidelines, contribution terms, and software and third-party licenses and permissions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mastodon/mastodon</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/mastodon/mastodon</id>
    <link href="https://github.com/mastodon/mastodon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Your self-hosted, globally interconnected microblogging community&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://i.imgur.com/NhZc40l.png&#34; alt=&#34;Mastodon&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mastodon/mastodon/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/mastodon/mastodon.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/mastodon/mastodon&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/mastodon/mastodon.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/mastodon/mastodon&#34;&gt;&lt;img src=&#34;https://img.shields.io/codeclimate/maintainability/mastodon/mastodon.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/mastodon&#34;&gt;&lt;img src=&#34;https://d322cqt584bo4o.cloudfront.net/mastodon/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/tootsuite/mastodon/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/tootsuite/mastodon.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mastodon is a &lt;strong&gt;free, open-source social network server&lt;/strong&gt; based on ActivityPub where users can follow friends and discover new ones. On Mastodon, users can publish anything they want: links, pictures, text, video. All Mastodon servers are interoperable as a federated network (users on one server can seamlessly communicate with users from another one, including non-Mastodon software that implements ActivityPub)!&lt;/p&gt; &#xA;&lt;p&gt;Click below to &lt;strong&gt;learn more&lt;/strong&gt; in a video:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=IPSbNdBmWKE&#34;&gt;&lt;img src=&#34;https://blog.joinmastodon.org/2018/06/why-activitypub-is-the-future/ezgif-2-60f1b00403.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Navigation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://joinmastodon.org&#34;&gt;Project homepage 🐘&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.patreon.com/mastodon&#34;&gt;Support the development via Patreon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://joinmastodon.org/sponsors&#34;&gt;View sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.joinmastodon.org&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.joinmastodon.org&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://joinmastodon.org/communities&#34;&gt;Browse Mastodon servers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://joinmastodon.org/apps&#34;&gt;Browse Mastodon apps&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;img src=&#34;https://docs.joinmastodon.org/elephant.svg?sanitize=true&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt; &#xA;&lt;h3&gt;No vendor lock-in: Fully interoperable with any conforming platform&lt;/h3&gt; &#xA;&lt;p&gt;It doesn&#39;t have to be Mastodon; whatever implements ActivityPub is part of the social network! &lt;a href=&#34;https://blog.joinmastodon.org/2018/06/why-activitypub-is-the-future/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Real-time, chronological timeline updates&lt;/h3&gt; &#xA;&lt;p&gt;Updates of people you&#39;re following appear in real-time in the UI via WebSockets. There&#39;s a firehose view as well!&lt;/p&gt; &#xA;&lt;h3&gt;Media attachments like images and short videos&lt;/h3&gt; &#xA;&lt;p&gt;Upload and view images and WebM/MP4 videos attached to the updates. Videos with no audio track are treated like GIFs; normal videos loop continuously!&lt;/p&gt; &#xA;&lt;h3&gt;Safety and moderation tools&lt;/h3&gt; &#xA;&lt;p&gt;Mastodon includes private posts, locked accounts, phrase filtering, muting, blocking and all sorts of other features, along with a reporting and moderation system. &lt;a href=&#34;https://blog.joinmastodon.org/2018/07/cage-the-mastodon/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OAuth2 and a straightforward REST API&lt;/h3&gt; &#xA;&lt;p&gt;Mastodon acts as an OAuth2 provider, so 3rd party apps can use the REST and Streaming APIs. This results in a rich app ecosystem with a lot of choices!&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;h3&gt;Tech stack:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ruby on Rails&lt;/strong&gt; powers the REST API and other web pages&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;React.js&lt;/strong&gt; and Redux are used for the dynamic parts of the interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; powers the streaming API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; 9.5+&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Redis&lt;/strong&gt; 4+&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ruby&lt;/strong&gt; 2.5+&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; 12+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The repository includes deployment configurations for &lt;strong&gt;Docker and docker-compose&lt;/strong&gt; as well as specific platforms like &lt;strong&gt;Heroku&lt;/strong&gt;, &lt;strong&gt;Scalingo&lt;/strong&gt;, and &lt;strong&gt;Nanobox&lt;/strong&gt;. The &lt;a href=&#34;https://docs.joinmastodon.org/admin/install/&#34;&gt;&lt;strong&gt;standalone&lt;/strong&gt; installation guide&lt;/a&gt; is available in the documentation.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;Vagrant&lt;/strong&gt; configuration is included for development purposes. To use it, complete following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Vagrant and Virtualbox&lt;/li&gt; &#xA; &lt;li&gt;Install the &lt;code&gt;vagrant-hostsupdater&lt;/code&gt; plugin: &lt;code&gt;vagrant plugin install vagrant-hostsupdater&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;vagrant up&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;vagrant ssh -c &#34;cd /vagrant &amp;amp;&amp;amp; foreman start&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;http://mastodon.local&lt;/code&gt; in your browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Mastodon is &lt;strong&gt;free, open-source software&lt;/strong&gt; licensed under &lt;strong&gt;AGPLv3&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can open issues for bugs you&#39;ve found or features you think are missing. You can also submit pull requests to this repository or submit translations using Crowdin. To get started, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/mastodon/mastodon/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. If your contributions are accepted into Mastodon, you can request to be paid through &lt;a href=&#34;https://opencollective.com/mastodon&#34;&gt;our OpenCollective&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IRC channel&lt;/strong&gt;: #mastodon on irc.libera.chat&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2016-2022 Eugen Rochko &amp;amp; other Mastodon contributors (see &lt;a href=&#34;https://raw.githubusercontent.com/mastodon/mastodon/main/AUTHORS.md&#34;&gt;AUTHORS.md&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU Affero General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/liquid</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/Shopify/liquid</id>
    <link href="https://github.com/Shopify/liquid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Liquid markup language. Safe, customer facing template language for flexible web apps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/Shopify/liquid&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/Shopify/liquid.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/Shopify/liquid&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/Shopify/liquid.svg?branch=master&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Liquid template engine&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/liquid/master/CONTRIBUTING.md&#34;&gt;Contributing guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/liquid/master/History.md&#34;&gt;Version history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shopify.dev/api/liquid&#34;&gt;Liquid documentation from Shopify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/liquid/wiki&#34;&gt;Liquid Wiki at GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://liquidmarkup.org/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Liquid is a template engine which was written with very specific requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It has to have beautiful and simple markup. Template engines which don&#39;t produce good looking markup are no fun to use.&lt;/li&gt; &#xA; &lt;li&gt;It needs to be non evaling and secure. Liquid templates are made so that users can edit them. You don&#39;t want to run code on your server which your users wrote.&lt;/li&gt; &#xA; &lt;li&gt;It has to be stateless. Compile and render steps have to be separate so that the expensive parsing and compiling can be done once and later on you can just render it passing in a hash with local variables and objects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why you should use Liquid&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You want to allow your users to edit the appearance of your application but don&#39;t want them to run &lt;strong&gt;insecure code on your server&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You want to render templates directly from the database.&lt;/li&gt; &#xA; &lt;li&gt;You like smarty (PHP) style template engines.&lt;/li&gt; &#xA; &lt;li&gt;You need a template engine which does HTML just as well as emails.&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t like the markup of your current templating engine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What does it look like?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ul id=&#34;products&#34;&amp;gt;&#xA;  {% for product in products %}&#xA;    &amp;lt;li&amp;gt;&#xA;      &amp;lt;h2&amp;gt;{{ product.name }}&amp;lt;/h2&amp;gt;&#xA;      Only {{ product.price | price }}&#xA;&#xA;      {{ product.description | prettyprint | paragraph }}&#xA;    &amp;lt;/li&amp;gt;&#xA;  {% endfor %}&#xA;&amp;lt;/ul&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use Liquid&lt;/h2&gt; &#xA;&lt;p&gt;Install Liquid by adding &lt;code&gt;gem &#39;liquid&#39;&lt;/code&gt; to your gemfile.&lt;/p&gt; &#xA;&lt;p&gt;Liquid supports a very simple API based around the Liquid::Template class. For standard use you can just pass it the content of a file and call render with a parameters hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@template = Liquid::Template.parse(&#34;hi {{name}}&#34;) # Parses and compiles the template&#xA;@template.render(&#39;name&#39; =&amp;gt; &#39;tobi&#39;)                # =&amp;gt; &#34;hi tobi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error Modes&lt;/h3&gt; &#xA;&lt;p&gt;Setting the error mode of Liquid lets you specify how strictly you want your templates to be interpreted. Normally the parser is very lax and will accept almost anything without error. Unfortunately this can make it very hard to debug and can lead to unexpected behaviour.&lt;/p&gt; &#xA;&lt;p&gt;Liquid also comes with a stricter parser that can be used when editing templates to give better error messages when templates are invalid. You can enable this new parser like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Liquid::Template.error_mode = :strict # Raises a SyntaxError when invalid syntax is used&#xA;Liquid::Template.error_mode = :warn # Adds strict errors to template.errors but continues as normal&#xA;Liquid::Template.error_mode = :lax # The default mode, accepts almost anything.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to set the error mode only on specific templates you can pass &lt;code&gt;:error_mode&lt;/code&gt; as an option to &lt;code&gt;parse&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Liquid::Template.parse(source, error_mode: :strict)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful for doing things like enabling strict mode only in the theme editor.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended that you enable &lt;code&gt;:strict&lt;/code&gt; or &lt;code&gt;:warn&lt;/code&gt; mode on new apps to stop invalid templates from being created. It is also recommended that you use it in the template editors of existing apps to give editors better error messages.&lt;/p&gt; &#xA;&lt;h3&gt;Undefined variables and filters&lt;/h3&gt; &#xA;&lt;p&gt;By default, the renderer doesn&#39;t raise or in any other way notify you if some variables or filters are missing, i.e. not passed to the &lt;code&gt;render&lt;/code&gt; method. You can improve this situation by passing &lt;code&gt;strict_variables: true&lt;/code&gt; and/or &lt;code&gt;strict_filters: true&lt;/code&gt; options to the &lt;code&gt;render&lt;/code&gt; method. When one of these options is set to true, all errors about undefined variables and undefined filters will be stored in &lt;code&gt;errors&lt;/code&gt; array of a &lt;code&gt;Liquid::Template&lt;/code&gt; instance. Here are some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template = Liquid::Template.parse(&#34;{{x}} {{y}} {{z.a}} {{z.b}}&#34;)&#xA;template.render({ &#39;x&#39; =&amp;gt; 1, &#39;z&#39; =&amp;gt; { &#39;a&#39; =&amp;gt; 2 } }, { strict_variables: true })&#xA;#=&amp;gt; &#39;1  2 &#39; # when a variable is undefined, it&#39;s rendered as nil&#xA;template.errors&#xA;#=&amp;gt; [#&amp;lt;Liquid::UndefinedVariable: Liquid error: undefined variable y&amp;gt;, #&amp;lt;Liquid::UndefinedVariable: Liquid error: undefined variable b&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template = Liquid::Template.parse(&#34;{{x | filter1 | upcase}}&#34;)&#xA;template.render({ &#39;x&#39; =&amp;gt; &#39;foo&#39; }, { strict_filters: true })&#xA;#=&amp;gt; &#39;&#39; # when at least one filter in the filter chain is undefined, a whole expression is rendered as nil&#xA;template.errors&#xA;#=&amp;gt; [#&amp;lt;Liquid::UndefinedFilter: Liquid error: undefined filter filter1&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to raise on a first exception instead of pushing all of them in &lt;code&gt;errors&lt;/code&gt;, you can use &lt;code&gt;render!&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template = Liquid::Template.parse(&#34;{{x}} {{y}}&#34;)&#xA;template.render!({ &#39;x&#39; =&amp;gt; 1}, { strict_variables: true })&#xA;#=&amp;gt; Liquid::UndefinedVariable: Liquid error: undefined variable y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage tracking&lt;/h3&gt; &#xA;&lt;p&gt;To help track usages of a feature or code path in production, we have released opt-in usage tracking. To enable this, we provide an empty &lt;code&gt;Liquid:: Usage.increment&lt;/code&gt; method which you can customize to your needs. The feature is well suited to &lt;a href=&#34;https://github.com/Shopify/statsd-instrument&#34;&gt;https://github.com/Shopify/statsd-instrument&lt;/a&gt;. However, the choice of implementation is up to you.&lt;/p&gt; &#xA;&lt;p&gt;Once you have enabled usage tracking, we recommend reporting any events through Github Issues that your system may be logging. It is highly likely this event has been added to consider deprecating or improving code specific to this event, so please raise any concerns.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rails/rails</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/rails/rails</id>
    <link href="https://github.com/rails/rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby on Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Rails&lt;/h1&gt; &#xA;&lt;h2&gt;What&#39;s Rails?&lt;/h2&gt; &#xA;&lt;p&gt;Rails is a web-application framework that includes everything needed to create database-backed web applications according to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Model-view-controller&#34;&gt;Model-View-Controller (MVC)&lt;/a&gt; pattern.&lt;/p&gt; &#xA;&lt;p&gt;Understanding the MVC pattern is key to understanding Rails. MVC divides your application into three layers: Model, View, and Controller, each with a specific responsibility.&lt;/p&gt; &#xA;&lt;h2&gt;Model layer&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;strong&gt;Model layer&lt;/strong&gt;&lt;/em&gt; represents the domain model (such as Account, Product, Person, Post, etc.) and encapsulates the business logic specific to your application. In Rails, database-backed model classes are derived from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activerecord/README.rdoc&#34;&gt;Active Record&lt;/a&gt; allows you to present the data from database rows as objects and embellish these data objects with business logic methods. Although most Rails models are backed by a database, models can also be ordinary Ruby classes, or Ruby classes that implement a set of interfaces as provided by the &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activemodel/README.rdoc&#34;&gt;Active Model&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;h2&gt;View layer&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;strong&gt;View layer&lt;/strong&gt;&lt;/em&gt; is composed of &#34;templates&#34; that are responsible for providing appropriate representations of your application&#39;s resources. Templates can come in a variety of formats, but most view templates are HTML with embedded Ruby code (ERB files). Views are typically rendered to generate a controller response or to generate the body of an email. In Rails, View generation is handled by &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionview/README.rdoc&#34;&gt;Action View&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Controller layer&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;strong&gt;Controller layer&lt;/strong&gt;&lt;/em&gt; is responsible for handling incoming HTTP requests and providing a suitable response. Usually, this means returning HTML, but Rails controllers can also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and manipulate models, and render view templates in order to generate the appropriate HTTP response. In Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and controller classes are derived from &lt;code&gt;ActionController::Base&lt;/code&gt;. Action Dispatch and Action Controller are bundled together in &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionpack/README.rdoc&#34;&gt;Action Pack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Frameworks and libraries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activerecord/README.rdoc&#34;&gt;Active Record&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activemodel/README.rdoc&#34;&gt;Active Model&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionpack/README.rdoc&#34;&gt;Action Pack&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionview/README.rdoc&#34;&gt;Action View&lt;/a&gt; can each be used independently outside Rails.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that, Rails also comes with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionmailer/README.rdoc&#34;&gt;Action Mailer&lt;/a&gt;, a library to generate and send emails&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actionmailbox/README.md&#34;&gt;Action Mailbox&lt;/a&gt;, a library to receive emails within a Rails application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activejob/README.md&#34;&gt;Active Job&lt;/a&gt;, a framework for declaring jobs and making them run on a variety of queuing backends&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actioncable/README.md&#34;&gt;Action Cable&lt;/a&gt;, a framework to integrate WebSockets with a Rails application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activestorage/README.md&#34;&gt;Active Storage&lt;/a&gt;, a library to attach cloud and local files to Rails applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/actiontext/README.md&#34;&gt;Action Text&lt;/a&gt;, a library to handle rich text content&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/rails/main/activesupport/README.rdoc&#34;&gt;Active Support&lt;/a&gt;, a collection of utility classes and standard library extensions that are useful for Rails, and may also be used independently outside Rails&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Rails at the command prompt if you haven&#39;t yet:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ gem install rails&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;At the command prompt, create a new Rails application:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ rails new myapp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where &#34;myapp&#34; is the application name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directory to &lt;code&gt;myapp&lt;/code&gt; and start the web server:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ cd myapp&#xA; $ bin/rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run with &lt;code&gt;--help&lt;/code&gt; or &lt;code&gt;-h&lt;/code&gt; for options.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;code&gt;http://localhost:3000&lt;/code&gt; and you&#39;ll see the Rails bootscreen with your Rails and Ruby versions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the guidelines to start developing your application. You may find the following resources handy:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org/getting_started.html&#34;&gt;Getting Started with Rails&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://guides.rubyonrails.org&#34;&gt;Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://api.rubyonrails.org&#34;&gt;The API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to contribute to Ruby on Rails! Please check out the &lt;a href=&#34;https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html&#34;&gt;Contributing to Ruby on Rails guide&lt;/a&gt; for guidelines about how to proceed. &lt;a href=&#34;https://contributors.rubyonrails.org&#34;&gt;Join us!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Trying to report a possible security vulnerability in Rails? Please check out our &lt;a href=&#34;https://rubyonrails.org/security&#34;&gt;security policy&lt;/a&gt; for guidelines about how to proceed.&lt;/p&gt; &#xA;&lt;p&gt;Everyone interacting in Rails and its sub-projects&#39; codebases, issue trackers, chat rooms, and mailing lists is expected to follow the Rails &lt;a href=&#34;https://rubyonrails.org/conduct&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Ruby on Rails is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>opf/openproject</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/opf/openproject</id>
    <link href="https://github.com/opf/openproject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenProject is the leading open source project management software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenProject&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/opf/openproject&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/opf/openproject&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/checks-status/opf/openproject/dev&#34; alt=&#34;GitHub branch checks state&#34;&gt; &lt;a href=&#34;https://github.com/opf/openproject/actions/workflows/test-core.yml&#34;&gt;&lt;img src=&#34;https://github.com/opf/openproject/actions/workflows/test-core.yml/badge.svg?branch=dev&#34; alt=&#34;Github Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenProject is a web-based project management software. Its key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#project-planning&#34;&gt;Project planning and scheduling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#product-management&#34;&gt;Product roadmap and release planning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#task-management&#34;&gt;Task management and team collaboration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#agile-scrum&#34;&gt;Agile and Scrum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#time-tracking&#34;&gt;Time tracking, cost reporting and budgeting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/collaboration-software-features/#bug-tracking&#34;&gt;Bug tracking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/docs/user-guide/wysiwyg/&#34;&gt;Wikis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/docs/user-guide/forums/&#34;&gt;Forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openproject.org/docs/user-guide/meetings/&#34;&gt;Meeting agendas and meeting minutes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More information and screenshots can be found on our &lt;a href=&#34;https://www.openproject.org&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to run an instance of OpenProject in production (or for evaluation), refer to our in-depth &lt;a href=&#34;https://www.openproject.org/download-and-installation/&#34;&gt;installation guides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;You found a bug? Please &lt;a href=&#34;https://www.openproject.org/docs/development/report-a-bug/&#34;&gt;report it&lt;/a&gt; to our &lt;a href=&#34;https://community.openproject.com/projects/openproject&#34;&gt;OpenProject community&lt;/a&gt;. Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;OpenProject is supported by its community members, both companies and individuals.&lt;/p&gt; &#xA;&lt;p&gt;We are always looking for new members to our community, so if you are interested in improving OpenProject we would be glad to welcome and support you getting into the code. There are guides as well, e.g. a &lt;a href=&#34;https://www.openproject.org/development/setting-up-development-environment/&#34;&gt;Quick Start for Developers&lt;/a&gt;, but don&#39;t hesitate to simply &lt;a href=&#34;https://www.openproject.org/contact-us&#34;&gt;contact us&lt;/a&gt; if you have questions.&lt;/p&gt; &#xA;&lt;p&gt;Working on OpenProject comes with the satisfaction of working on a widely used open source application.&lt;/p&gt; &#xA;&lt;p&gt;Also, if you do not want to be limited to working on open source in your free time, OpenProject GmbH, the company contributing to the OpenProject development, &lt;a href=&#34;https://www.openproject.org/career/&#34;&gt;is hiring&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Here you can find our &lt;a href=&#34;https://www.openproject.org/contact-us&#34;&gt;contact information&lt;/a&gt;. If you are interested in development or have general questions, feel free to also join our &lt;a href=&#34;https://community.openproject.org/projects/openproject/forums&#34;&gt;community discussion forums&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security / responsible disclosure&lt;/h2&gt; &#xA;&lt;p&gt;We take security very seriously at OpenProject. We value any kind of feedback that will keep our community secure. If you happen to come across a security issue we urge you to disclose it to us privately to allow our users and community enough time to upgrade. Security issues will always take precedence over anything else in the pipeline.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to disclose a security vulnerability, &lt;a href=&#34;https://raw.githubusercontent.com/opf/openproject/dev/docs/development/security/README.md&#34;&gt;please see this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenProject is licensed under the terms of the GNU General Public License version 3. See &lt;a href=&#34;https://raw.githubusercontent.com/opf/openproject/dev/COPYRIGHT&#34;&gt;COPYRIGHT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/opf/openproject/dev/LICENSE&#34;&gt;LICENSE&lt;/a&gt; files for details.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;h3&gt;Icons&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to Vincent Le Moign and his fabulous Minicons icons on &lt;a href=&#34;http://www.webalys.com/minicons/icons-free-pack.php&#34;&gt;webalys.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Lato Font&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to Łukasz Dziedzic (aka &#34;tyPoland&#34;) for his &#39;Lato&#39; font.&lt;/p&gt; &#xA;&lt;h3&gt;OpenProject icon font&lt;/h3&gt; &#xA;&lt;p&gt;Published and created by the OpenProject Foundation (OPF) under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt; with icons from the following sources &lt;a href=&#34;http://www.webalys.com/minicons&#34;&gt;Minicons Free Vector Icons Pack&lt;/a&gt; and &lt;a href=&#34;http://www.webalys.com/design-interface-application-framework.php&#34;&gt;User Interface Design framework&lt;/a&gt; both by webalys&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Creative Commons License&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenProject Icon Font by the OpenProject Foundation (OPF) is licensed under Creative Commons Attribution 3.0 Unported License and Free for both personal and commercial use. You can copy, adapt, remix, distribute or transmit it.&lt;/p&gt; &#xA;&lt;p&gt;Under this condition: provide a mention of the &#34;OpenProject Foundation&#34; and a link back to OpenProject &lt;a href=&#34;http://www.openproject.org&#34;&gt;www.openproject.org&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sinatra/sinatra</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/sinatra/sinatra</id>
    <link href="https://github.com/sinatra/sinatra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Classy web-development dressed in a DSL (official / canonical repo)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sinatra&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/sinatra&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/sinatra.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sinatra/sinatra/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/sinatra/sinatra/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dependabot.com/compatibility-score.html?dependency-name=sinatra&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34;&gt;&lt;img src=&#34;https://api.dependabot.com/badges/compatibility_score?dependency-name=sinatra&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34; alt=&#34;SemVer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sinatra is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;DSL&lt;/a&gt; for quickly creating web applications in Ruby with minimal effort:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# myapp.rb&#xA;require &#39;sinatra&#39;&#xA;&#xA;get &#39;/&#39; do&#xA;  &#39;Hello world!&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install sinatra&#xA;gem install puma # or any other server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruby myapp.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View at: &lt;a href=&#34;http://localhost:4567&#34;&gt;http://localhost:4567&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The code you changed will not take effect until you restart the server. Please restart the server every time you change or use &lt;a href=&#34;http://www.sinatrarb.com/contrib/reloader&#34;&gt;sinatra/reloader&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to also run &lt;code&gt;gem install puma&lt;/code&gt;, which Sinatra will pick up if available.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#sinatra&#34;&gt;Sinatra&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#routes&#34;&gt;Routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#conditions&#34;&gt;Conditions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#return-values&#34;&gt;Return Values&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#custom-route-matchers&#34;&gt;Custom Route Matchers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#static-files&#34;&gt;Static Files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#views--templates&#34;&gt;Views / Templates&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#literal-templates&#34;&gt;Literal Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#available-template-languages&#34;&gt;Available Template Languages&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#haml-templates&#34;&gt;Haml Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#erb-templates&#34;&gt;Erb Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#builder-templates&#34;&gt;Builder Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#nokogiri-templates&#34;&gt;Nokogiri Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#liquid-templates&#34;&gt;Liquid Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#markdown-templates&#34;&gt;Markdown Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#rdoc-templates&#34;&gt;RDoc Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#asciidoc-templates&#34;&gt;AsciiDoc Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#radius-templates&#34;&gt;Radius Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#markaby-templates&#34;&gt;Markaby Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#rabl-templates&#34;&gt;RABL Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#slim-templates&#34;&gt;Slim Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#creole-templates&#34;&gt;Creole Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#mediawiki-templates&#34;&gt;MediaWiki Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#coffeescript-templates&#34;&gt;CoffeeScript Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#yajl-templates&#34;&gt;Yajl Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#wlang-templates&#34;&gt;WLang Templates&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#accessing-variables-in-templates&#34;&gt;Accessing Variables in Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#templates-with-yield-and-nested-layouts&#34;&gt;Templates with &lt;code&gt;yield&lt;/code&gt; and nested layouts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#inline-templates&#34;&gt;Inline Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#named-templates&#34;&gt;Named Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#associating-file-extensions&#34;&gt;Associating File Extensions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#adding-your-own-template-engine&#34;&gt;Adding Your Own Template Engine&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#using-custom-logic-for-template-lookup&#34;&gt;Using Custom Logic for Template Lookup&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#filters&#34;&gt;Filters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#helpers&#34;&gt;Helpers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#using-sessions&#34;&gt;Using Sessions&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#session-secret-security&#34;&gt;Session Secret Security&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#session-config&#34;&gt;Session Config&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#choosing-your-own-session-middleware&#34;&gt;Choosing Your Own Session Middleware&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#halting&#34;&gt;Halting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#passing&#34;&gt;Passing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#triggering-another-route&#34;&gt;Triggering Another Route&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#setting-body-status-code-and-headers&#34;&gt;Setting Body, Status Code and Headers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#streaming-responses&#34;&gt;Streaming Responses&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#mime-types&#34;&gt;Mime Types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#generating-urls&#34;&gt;Generating URLs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#browser-redirect&#34;&gt;Browser Redirect&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#cache-control&#34;&gt;Cache Control&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#sending-files&#34;&gt;Sending Files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#accessing-the-request-object&#34;&gt;Accessing the Request Object&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#attachments&#34;&gt;Attachments&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#dealing-with-date-and-time&#34;&gt;Dealing with Date and Time&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#looking-up-template-files&#34;&gt;Looking Up Template Files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#configuring-attack-protection&#34;&gt;Configuring attack protection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#available-settings&#34;&gt;Available Settings&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#environments&#34;&gt;Environments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#not-found&#34;&gt;Not Found&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#error&#34;&gt;Error&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#rack-middleware&#34;&gt;Rack Middleware&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#sinatrabase---middleware-libraries-and-modular-apps&#34;&gt;Sinatra::Base - Middleware, Libraries, and Modular Apps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#modular-vs-classic-style&#34;&gt;Modular vs. Classic Style&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#serving-a-modular-application&#34;&gt;Serving a Modular Application&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#using-a-classic-style-application-with-a-configru&#34;&gt;Using a Classic Style Application with a config.ru&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#when-to-use-a-configru&#34;&gt;When to use a config.ru?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#using-sinatra-as-middleware&#34;&gt;Using Sinatra as Middleware&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#dynamic-application-creation&#34;&gt;Dynamic Application Creation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#scopes-and-binding&#34;&gt;Scopes and Binding&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#applicationclass-scope&#34;&gt;Application/Class Scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#requestinstance-scope&#34;&gt;Request/Instance Scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#delegation-scope&#34;&gt;Delegation Scope&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#command-line&#34;&gt;Command Line&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#multi-threading&#34;&gt;Multi-threading&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#requirement&#34;&gt;Requirement&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#the-bleeding-edge&#34;&gt;The Bleeding Edge&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#with-bundler&#34;&gt;With Bundler&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#further-reading&#34;&gt;Further Reading&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Routes&lt;/h2&gt; &#xA;&lt;p&gt;In Sinatra, a route is an HTTP method paired with a URL-matching pattern. Each route is associated with a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  .. show something ..&#xA;end&#xA;&#xA;post &#39;/&#39; do&#xA;  .. create something ..&#xA;end&#xA;&#xA;put &#39;/&#39; do&#xA;  .. replace something ..&#xA;end&#xA;&#xA;patch &#39;/&#39; do&#xA;  .. modify something ..&#xA;end&#xA;&#xA;delete &#39;/&#39; do&#xA;  .. annihilate something ..&#xA;end&#xA;&#xA;options &#39;/&#39; do&#xA;  .. appease something ..&#xA;end&#xA;&#xA;link &#39;/&#39; do&#xA;  .. affiliate something ..&#xA;end&#xA;&#xA;unlink &#39;/&#39; do&#xA;  .. separate something ..&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Routes are matched in the order they are defined. The first route that matches the request is invoked.&lt;/p&gt; &#xA;&lt;p&gt;Routes with trailing slashes are different from the ones without:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  # Does not match &#34;GET /foo/&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route patterns may include named parameters, accessible via the &lt;code&gt;params&lt;/code&gt; hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/hello/:name&#39; do&#xA;  # matches &#34;GET /hello/foo&#34; and &#34;GET /hello/bar&#34;&#xA;  # params[&#39;name&#39;] is &#39;foo&#39; or &#39;bar&#39;&#xA;  &#34;Hello #{params[&#39;name&#39;]}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also access named parameters via block parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/hello/:name&#39; do |n|&#xA;  # matches &#34;GET /hello/foo&#34; and &#34;GET /hello/bar&#34;&#xA;  # params[&#39;name&#39;] is &#39;foo&#39; or &#39;bar&#39;&#xA;  # n stores params[&#39;name&#39;]&#xA;  &#34;Hello #{n}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route patterns may also include splat (or wildcard) parameters, accessible via the &lt;code&gt;params[&#39;splat&#39;]&lt;/code&gt; array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/say/*/to/*&#39; do&#xA;  # matches /say/hello/to/world&#xA;  params[&#39;splat&#39;] # =&amp;gt; [&#34;hello&#34;, &#34;world&#34;]&#xA;end&#xA;&#xA;get &#39;/download/*.*&#39; do&#xA;  # matches /download/path/to/file.xml&#xA;  params[&#39;splat&#39;] # =&amp;gt; [&#34;path/to/file&#34;, &#34;xml&#34;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with block parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/download/*.*&#39; do |path, ext|&#xA;  [path, ext] # =&amp;gt; [&#34;path/to/file&#34;, &#34;xml&#34;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route matching with Regular Expressions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get /\/hello\/([\w]+)/ do&#xA;  &#34;Hello, #{params[&#39;captures&#39;].first}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a block parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get %r{/hello/([\w]+)} do |c|&#xA;  # Matches &#34;GET /meta/hello/world&#34;, &#34;GET /hello/world/1234&#34; etc.&#xA;  &#34;Hello, #{c}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route patterns may have optional parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/posts/:format?&#39; do&#xA;  # matches &#34;GET /posts/&#34; and any extension &#34;GET /posts/json&#34;, &#34;GET /posts/xml&#34; etc&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Routes may also utilize query parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/posts&#39; do&#xA;  # matches &#34;GET /posts?title=foo&amp;amp;author=bar&#34;&#xA;  title = params[&#39;title&#39;]&#xA;  author = params[&#39;author&#39;]&#xA;  # uses title and author variables; query is optional to the /posts route&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, unless you disable the path traversal attack protection (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#configuring-attack-protection&#34;&gt;below&lt;/a&gt;), the request path might be modified before matching against your routes.&lt;/p&gt; &#xA;&lt;p&gt;You may customize the &lt;a href=&#34;https://github.com/sinatra/mustermann#readme&#34;&gt;Mustermann&lt;/a&gt; options used for a given route by passing in a &lt;code&gt;:mustermann_opts&lt;/code&gt; hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;\A/posts\z&#39;, :mustermann_opts =&amp;gt; { :type =&amp;gt; :regexp, :check_anchors =&amp;gt; false } do&#xA;  # matches /posts exactly, with explicit anchoring&#xA;  &#34;If you match an anchored pattern clap your hands!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It looks like a &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#conditions&#34;&gt;condition&lt;/a&gt;, but it isn&#39;t one! These options will be merged into the global &lt;code&gt;:mustermann_opts&lt;/code&gt; hash described &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#available-settings&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Conditions&lt;/h2&gt; &#xA;&lt;p&gt;Routes may include a variety of matching conditions, such as the user agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39;, :agent =&amp;gt; /Songbird (\d\.\d)[\d\/]*?/ do&#xA;  &#34;You&#39;re using Songbird version #{params[&#39;agent&#39;][0]}&#34;&#xA;end&#xA;&#xA;get &#39;/foo&#39; do&#xA;  # Matches non-songbird browsers&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other available conditions are &lt;code&gt;host_name&lt;/code&gt; and &lt;code&gt;provides&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39;, :host_name =&amp;gt; /^admin\./ do&#xA;  &#34;Admin Area, Access denied!&#34;&#xA;end&#xA;&#xA;get &#39;/&#39;, :provides =&amp;gt; &#39;html&#39; do&#xA;  haml :index&#xA;end&#xA;&#xA;get &#39;/&#39;, :provides =&amp;gt; [&#39;rss&#39;, &#39;atom&#39;, &#39;xml&#39;] do&#xA;  builder :feed&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;provides&lt;/code&gt; searches the request&#39;s Accept header.&lt;/p&gt; &#xA;&lt;p&gt;You can easily define your own conditions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set(:probability) { |value| condition { rand &amp;lt;= value } }&#xA;&#xA;get &#39;/win_a_car&#39;, :probability =&amp;gt; 0.1 do&#xA;  &#34;You won!&#34;&#xA;end&#xA;&#xA;get &#39;/win_a_car&#39; do&#xA;  &#34;Sorry, you lost.&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a condition that takes multiple values use a splat:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set(:auth) do |*roles|   # &amp;lt;- notice the splat here&#xA;  condition do&#xA;    unless logged_in? &amp;amp;&amp;amp; roles.any? {|role| current_user.in_role? role }&#xA;      redirect &#34;/login/&#34;, 303&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;get &#34;/my/account/&#34;, :auth =&amp;gt; [:user, :admin] do&#xA;  &#34;Your Account Details&#34;&#xA;end&#xA;&#xA;get &#34;/only/admin/&#34;, :auth =&amp;gt; :admin do&#xA;  &#34;Only admins are allowed here!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Return Values&lt;/h2&gt; &#xA;&lt;p&gt;The return value of a route block determines at least the response body passed on to the HTTP client or at least the next middleware in the Rack stack. Most commonly, this is a string, as in the above examples. But other values are also accepted.&lt;/p&gt; &#xA;&lt;p&gt;You can return an object that would either be a valid Rack response, Rack body object or HTTP status code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An Array with three elements: &lt;code&gt;[status (Integer), headers (Hash), response body (responds to #each)]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An Array with two elements: &lt;code&gt;[status (Integer), response body (responds to #each)]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An object that responds to &lt;code&gt;#each&lt;/code&gt; and passes nothing but strings to the given block&lt;/li&gt; &#xA; &lt;li&gt;A Integer representing the status code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That way we can, for instance, easily implement a streaming example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Stream&#xA;  def each&#xA;    100.times { |i| yield &#34;#{i}\n&#34; }&#xA;  end&#xA;end&#xA;&#xA;get(&#39;/&#39;) { Stream.new }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;stream&lt;/code&gt; helper method (&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#streaming-responses&#34;&gt;described below&lt;/a&gt;) to reduce boilerplate and embed the streaming logic in the route.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Route Matchers&lt;/h2&gt; &#xA;&lt;p&gt;As shown above, Sinatra ships with built-in support for using String patterns and regular expressions as route matches. However, it does not stop there. You can easily define your own matchers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AllButPattern&#xA;  Match = Struct.new(:captures)&#xA;&#xA;  def initialize(except)&#xA;    @except   = except&#xA;    @captures = Match.new([])&#xA;  end&#xA;&#xA;  def match(str)&#xA;    @captures unless @except === str&#xA;  end&#xA;end&#xA;&#xA;def all_but(pattern)&#xA;  AllButPattern.new(pattern)&#xA;end&#xA;&#xA;get all_but(&#34;/index&#34;) do&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the above example might be over-engineered, as it can also be expressed as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get // do&#xA;  pass if request.path_info == &#34;/index&#34;&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, using negative look ahead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get %r{(?!/index)} do&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Static Files&lt;/h2&gt; &#xA;&lt;p&gt;Static files are served from the &lt;code&gt;./public&lt;/code&gt; directory. You can specify a different location by setting the &lt;code&gt;:public_folder&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :public_folder, __dir__ + &#39;/static&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the public directory name is not included in the URL. A file &lt;code&gt;./public/css/style.css&lt;/code&gt; is made available as &lt;code&gt;http://example.com/css/style.css&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;:static_cache_control&lt;/code&gt; setting (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#cache-control&#34;&gt;below&lt;/a&gt;) to add &lt;code&gt;Cache-Control&lt;/code&gt; header info.&lt;/p&gt; &#xA;&lt;h2&gt;Views / Templates&lt;/h2&gt; &#xA;&lt;p&gt;Each template language is exposed via its own rendering method. These methods simply return a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  erb :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This renders &lt;code&gt;views/index.erb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead of a template name, you can also just pass in the template content directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  code = &#34;&amp;lt;%= Time.now %&amp;gt;&#34;&#xA;  erb code&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Templates take a second argument, the options hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  erb :index, :layout =&amp;gt; :post&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will render &lt;code&gt;views/index.erb&lt;/code&gt; embedded in the &lt;code&gt;views/post.erb&lt;/code&gt; (default is &lt;code&gt;views/layout.erb&lt;/code&gt;, if it exists).&lt;/p&gt; &#xA;&lt;p&gt;Any options not understood by Sinatra will be passed on to the template engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml :index, :format =&amp;gt; :html5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set options per template language in general:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :haml, :format =&amp;gt; :html5&#xA;&#xA;get &#39;/&#39; do&#xA;  haml :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options passed to the render method override options set via &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available Options:&lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  locals&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   List of locals passed to the document. Handy with partials. Example: &#xA;  &lt;tt&gt;erb &#34;&amp;lt;%= foo %&amp;gt;&#34;, :locals =&amp;gt; {:foo =&amp;gt; &#34;bar&#34;}&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  default_encoding&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   String encoding to use if uncertain. Defaults to &#xA;  &lt;tt&gt;settings.default_encoding&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  views&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Views folder to load templates from. Defaults to &#xA;  &lt;tt&gt;settings.views&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  layout&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether to use a layout (&#xA;  &lt;tt&gt;true&lt;/tt&gt; or &#xA;  &lt;tt&gt;false&lt;/tt&gt;). If it&#39;s a Symbol, specifies what template to use. Example: &#xA;  &lt;tt&gt;erb :index, :layout =&amp;gt; !request.xhr?&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  content_type&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Content-Type the template produces. Default depends on template language. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  scope&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Scope to render template under. Defaults to the application instance. If you change this, instance variables and helper methods will not be available. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  layout_engine&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Template engine to use for rendering the layout. Useful for languages that do not support layouts otherwise. Defaults to the engine used for the template. Example: &#xA;  &lt;tt&gt;set :rdoc, :layout_engine =&amp;gt; :erb&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  layout_options&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Special options only used for rendering the layout. Example: &#xA;  &lt;tt&gt;set :rdoc, :layout_options =&amp;gt; { :views =&amp;gt; &#39;views/layouts&#39; }&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;p&gt;Templates are assumed to be located directly under the &lt;code&gt;./views&lt;/code&gt; directory. To use a different views directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :views, settings.root + &#39;/templates&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One important thing to remember is that you always have to reference templates with symbols, even if they&#39;re in a subdirectory (in this case, use: &lt;code&gt;:&#39;subdir/template&#39;&lt;/code&gt; or &lt;code&gt;&#39;subdir/template&#39;.to_sym&lt;/code&gt;). You must use a symbol because otherwise rendering methods will render any strings passed to them directly.&lt;/p&gt; &#xA;&lt;h3&gt;Literal Templates&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml &#39;%div.title Hello World&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Renders the template string. You can optionally specify &lt;code&gt;:path&lt;/code&gt; and &lt;code&gt;:line&lt;/code&gt; for a clearer backtrace if there is a filesystem path or line associated with that string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml &#39;%div.title Hello World&#39;, :path =&amp;gt; &#39;examples/file.haml&#39;, :line =&amp;gt; 3&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available Template Languages&lt;/h3&gt; &#xA;&lt;p&gt;Some languages have multiple implementations. To specify what implementation to use (and to be thread-safe), you should simply require it first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rdiscount&#39;&#xA;get(&#39;/&#39;) { markdown :index }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Haml Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://haml.info/&#34; title=&#34;haml&#34;&gt;haml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.haml&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;haml :index, :format =&amp;gt; :html5&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Erb Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/jeremyevans/erubi&#34; title=&#34;erubi&#34;&gt;erubi&lt;/a&gt; or erb (included in Ruby) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.erb&lt;/tt&gt;, &lt;tt&gt;.rhtml&lt;/tt&gt; or &lt;tt&gt;.erubi&lt;/tt&gt; (Erubi only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;erb :index&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Builder Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/jimweirich/builder&#34; title=&#34;builder&#34;&gt;builder&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.builder&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;builder { |xml| xml.em &#34;hi&#34; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It also takes a block for inline templates (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#inline-templates&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Nokogiri Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.nokogiri.org/&#34; title=&#34;nokogiri&#34;&gt;nokogiri&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.nokogiri&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;nokogiri { |xml| xml.em &#34;hi&#34; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It also takes a block for inline templates (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#inline-templates&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Liquid Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://shopify.github.io/liquid/&#34; title=&#34;liquid&#34;&gt;liquid&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.liquid&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;liquid :index, :locals =&amp;gt; { :key =&amp;gt; &#39;value&#39; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Since you cannot call Ruby methods (except for &lt;code&gt;yield&lt;/code&gt;) from a Liquid template, you almost always want to pass locals to it.&lt;/p&gt; &#xA;&lt;h4&gt;Markdown Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt; Anyone of: &lt;a href=&#34;https://github.com/davidfstr/rdiscount&#34; title=&#34;RDiscount&#34;&gt;RDiscount&lt;/a&gt;, &lt;a href=&#34;https://github.com/vmg/redcarpet&#34; title=&#34;RedCarpet&#34;&gt;RedCarpet&lt;/a&gt;, &lt;a href=&#34;https://kramdown.gettalong.org/&#34; title=&#34;kramdown&#34;&gt;kramdown&lt;/a&gt;, &lt;a href=&#34;https://github.com/gjtorikian/commonmarker&#34; title=&#34;commonmarker&#34;&gt;commonmarker&lt;/a&gt; &lt;a href=&#34;https://github.com/alphabetum/pandoc-ruby&#34; title=&#34;pandoc&#34;&gt;pandoc&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.markdown&lt;/tt&gt;, &lt;tt&gt;.mkd&lt;/tt&gt; and &lt;tt&gt;.md&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;markdown :index, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It is not possible to call methods from Markdown, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :overview, :locals =&amp;gt; { :text =&amp;gt; markdown(:introduction) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may also call the &lt;code&gt;markdown&lt;/code&gt; method from within other templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%h1 Hello From Haml!&#xA;%p= markdown(:greetings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you cannot call Ruby from Markdown, you cannot use layouts written in Markdown. However, it is possible to use another rendering engine for the template than for the layout by passing the &lt;code&gt;:layout_engine&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;RDoc Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://rdoc.sourceforge.net/&#34; title=&#34;RDoc&#34;&gt;RDoc&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.rdoc&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;rdoc :README, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It is not possible to call methods from RDoc, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :overview, :locals =&amp;gt; { :text =&amp;gt; rdoc(:introduction) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may also call the &lt;code&gt;rdoc&lt;/code&gt; method from within other templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%h1 Hello From Haml!&#xA;%p= rdoc(:greetings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you cannot call Ruby from RDoc, you cannot use layouts written in RDoc. However, it is possible to use another rendering engine for the template than for the layout by passing the &lt;code&gt;:layout_engine&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;AsciiDoc Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://asciidoctor.org/&#34; title=&#34;Asciidoctor&#34;&gt;Asciidoctor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.asciidoc&lt;/tt&gt;, &lt;tt&gt;.adoc&lt;/tt&gt; and &lt;tt&gt;.ad&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;asciidoc :README, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Since you cannot call Ruby methods directly from an AsciiDoc template, you almost always want to pass locals to it.&lt;/p&gt; &#xA;&lt;h4&gt;Radius Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jlong/radius&#34; title=&#34;Radius&#34;&gt;Radius&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.radius&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;radius :index, :locals =&amp;gt; { :key =&amp;gt; &#39;value&#39; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Since you cannot call Ruby methods directly from a Radius template, you almost always want to pass locals to it.&lt;/p&gt; &#xA;&lt;h4&gt;Markaby Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://markaby.github.io/&#34; title=&#34;Markaby&#34;&gt;Markaby&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.mab&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;markaby { h1 &#34;Welcome!&#34; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It also takes a block for inline templates (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#inline-templates&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;RABL Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nesquena/rabl&#34; title=&#34;Rabl&#34;&gt;Rabl&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.rabl&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;rabl :index&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Slim Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://slim-lang.com/&#34; title=&#34;Slim Lang&#34;&gt;Slim Lang&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.slim&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;slim :index&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Creole Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/minad/creole&#34; title=&#34;Creole&#34;&gt;Creole&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.creole&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;creole :wiki, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It is not possible to call methods from Creole, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :overview, :locals =&amp;gt; { :text =&amp;gt; creole(:introduction) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may also call the &lt;code&gt;creole&lt;/code&gt; method from within other templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%h1 Hello From Haml!&#xA;%p= creole(:greetings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you cannot call Ruby from Creole, you cannot use layouts written in Creole. However, it is possible to use another rendering engine for the template than for the layout by passing the &lt;code&gt;:layout_engine&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;MediaWiki Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nricciar/wikicloth&#34; title=&#34;WikiCloth&#34;&gt;WikiCloth&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.mediawiki&lt;/tt&gt; and &lt;tt&gt;.mw&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;mediawiki :wiki, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It is not possible to call methods from MediaWiki markup, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :overview, :locals =&amp;gt; { :text =&amp;gt; mediawiki(:introduction) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may also call the &lt;code&gt;mediawiki&lt;/code&gt; method from within other templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%h1 Hello From Haml!&#xA;%p= mediawiki(:greetings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you cannot call Ruby from MediaWiki, you cannot use layouts written in MediaWiki. However, it is possible to use another rendering engine for the template than for the layout by passing the &lt;code&gt;:layout_engine&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;CoffeeScript Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/josh/ruby-coffee-script&#34; title=&#34;Ruby CoffeeScript&#34;&gt; CoffeeScript &lt;/a&gt; and a &lt;a href=&#34;https://github.com/sstephenson/execjs&#34; title=&#34;ExecJS&#34;&gt; way to execute javascript &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.coffee&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;coffee :index&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Yajl Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/brianmario/yajl-ruby&#34; title=&#34;yajl-ruby&#34;&gt;yajl-ruby&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.yajl&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt; &lt;tt&gt; yajl :index, :locals =&amp;gt; { :key =&amp;gt; &#39;qux&#39; }, :callback =&amp;gt; &#39;present&#39;, :variable =&amp;gt; &#39;resource&#39; &lt;/tt&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;The template source is evaluated as a Ruby string, and the resulting json variable is converted using &lt;code&gt;#to_json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json = { :foo =&amp;gt; &#39;bar&#39; }&#xA;json[:baz] = key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:callback&lt;/code&gt; and &lt;code&gt;:variable&lt;/code&gt; options can be used to decorate the rendered object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var resource = {&#34;foo&#34;:&#34;bar&#34;,&#34;baz&#34;:&#34;qux&#34;};&#xA;present(resource);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;WLang Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/blambeau/wlang&#34; title=&#34;WLang&#34;&gt;WLang&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.wlang&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;wlang :index, :locals =&amp;gt; { :key =&amp;gt; &#39;value&#39; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Since calling ruby methods is not idiomatic in WLang, you almost always want to pass locals to it. Layouts written in WLang and &lt;code&gt;yield&lt;/code&gt; are supported, though.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing Variables in Templates&lt;/h3&gt; &#xA;&lt;p&gt;Templates are evaluated within the same context as route handlers. Instance variables set in route handlers are directly accessible by templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/:id&#39; do&#xA;  @foo = Foo.find(params[&#39;id&#39;])&#xA;  haml &#39;%h1= @foo.name&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, specify an explicit Hash of local variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/:id&#39; do&#xA;  foo = Foo.find(params[&#39;id&#39;])&#xA;  haml &#39;%h1= bar.name&#39;, :locals =&amp;gt; { :bar =&amp;gt; foo }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is typically used when rendering templates as partials from within other templates.&lt;/p&gt; &#xA;&lt;h3&gt;Templates with &lt;code&gt;yield&lt;/code&gt; and nested layouts&lt;/h3&gt; &#xA;&lt;p&gt;A layout is usually just a template that calls &lt;code&gt;yield&lt;/code&gt;. Such a template can be used either through the &lt;code&gt;:template&lt;/code&gt; option as described above, or it can be rendered with a block as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :post, :layout =&amp;gt; false do&#xA;  erb :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code is mostly equivalent to &lt;code&gt;erb :index, :layout =&amp;gt; :post&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Passing blocks to rendering methods is most useful for creating nested layouts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :main_layout, :layout =&amp;gt; false do&#xA;  erb :admin_layout do&#xA;    erb :user&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be done in fewer lines of code with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :admin_layout, :layout =&amp;gt; :main_layout do&#xA;  erb :user&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, the following rendering methods accept a block: &lt;code&gt;erb&lt;/code&gt;, &lt;code&gt;haml&lt;/code&gt;, &lt;code&gt;liquid&lt;/code&gt;, &lt;code&gt;slim &lt;/code&gt;, &lt;code&gt;wlang&lt;/code&gt;. Also, the general &lt;code&gt;render&lt;/code&gt; method accepts a block.&lt;/p&gt; &#xA;&lt;h3&gt;Inline Templates&lt;/h3&gt; &#xA;&lt;p&gt;Templates may be defined at the end of the source file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra&#39;&#xA;&#xA;get &#39;/&#39; do&#xA;  haml :index&#xA;end&#xA;&#xA;__END__&#xA;&#xA;@@ layout&#xA;%html&#xA;  = yield&#xA;&#xA;@@ index&#xA;%div.title Hello world.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Inline templates defined in the source file that requires Sinatra are automatically loaded. Call &lt;code&gt;enable :inline_templates&lt;/code&gt; explicitly if you have inline templates in other source files.&lt;/p&gt; &#xA;&lt;h3&gt;Named Templates&lt;/h3&gt; &#xA;&lt;p&gt;Templates may also be defined using the top-level &lt;code&gt;template&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template :layout do&#xA;  &#34;%html\n  =yield\n&#34;&#xA;end&#xA;&#xA;template :index do&#xA;  &#39;%div.title Hello World!&#39;&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  haml :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a template named &#34;layout&#34; exists, it will be used each time a template is rendered. You can individually disable layouts by passing &lt;code&gt;:layout =&amp;gt; false&lt;/code&gt; or disable them by default via &lt;code&gt;set :haml, :layout =&amp;gt; false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml :index, :layout =&amp;gt; !request.xhr?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Associating File Extensions&lt;/h3&gt; &#xA;&lt;p&gt;To associate a file extension with a template engine, use &lt;code&gt;Tilt.register&lt;/code&gt;. For instance, if you like to use the file extension &lt;code&gt;tt&lt;/code&gt; for Haml templates, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Tilt.register :tt, Tilt[:haml]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Your Own Template Engine&lt;/h3&gt; &#xA;&lt;p&gt;First, register your engine with Tilt, then create a rendering method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Tilt.register :myat, MyAwesomeTemplateEngine&#xA;&#xA;helpers do&#xA;  def myat(*args) render(:myat, *args) end&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  myat :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Renders &lt;code&gt;./views/index.myat&lt;/code&gt;. Learn more about &lt;a href=&#34;https://github.com/rtomayko/tilt#readme&#34;&gt;Tilt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using Custom Logic for Template Lookup&lt;/h3&gt; &#xA;&lt;p&gt;To implement your own template lookup mechanism you can write your own &lt;code&gt;#find_template&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  set :views, [ &#39;./views/a&#39;, &#39;./views/b&#39; ]&#xA;end&#xA;&#xA;def find_template(views, name, engine, &amp;amp;block)&#xA;  Array(views).each do |v|&#xA;    super(v, name, engine, &amp;amp;block)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Filters&lt;/h2&gt; &#xA;&lt;p&gt;Before filters are evaluated before each request within the same context as the routes will be and can modify the request and response. Instance variables set in filters are accessible by routes and templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  @note = &#39;Hi!&#39;&#xA;  request.path_info = &#39;/foo/bar/baz&#39;&#xA;end&#xA;&#xA;get &#39;/foo/*&#39; do&#xA;  @note #=&amp;gt; &#39;Hi!&#39;&#xA;  params[&#39;splat&#39;] #=&amp;gt; &#39;bar/baz&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After filters are evaluated after each request within the same context as the routes will be and can also modify the request and response. Instance variables set in before filters and routes are accessible by after filters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;after do&#xA;  puts response.status&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Unless you use the &lt;code&gt;body&lt;/code&gt; method rather than just returning a String from the routes, the body will not yet be available in the after filter, since it is generated later on.&lt;/p&gt; &#xA;&lt;p&gt;Filters optionally take a pattern, causing them to be evaluated only if the request path matches that pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before &#39;/protected/*&#39; do&#xA;  authenticate!&#xA;end&#xA;&#xA;after &#39;/create/:slug&#39; do |slug|&#xA;  session[:last_slug] = slug&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like routes, filters also take conditions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before :agent =&amp;gt; /Songbird/ do&#xA;  # ...&#xA;end&#xA;&#xA;after &#39;/blog/*&#39;, :host_name =&amp;gt; &#39;example.com&#39; do&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;p&gt;Use the top-level &lt;code&gt;helpers&lt;/code&gt; method to define helper methods for use in route handlers and templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;helpers do&#xA;  def bar(name)&#xA;    &#34;#{name}bar&#34;&#xA;  end&#xA;end&#xA;&#xA;get &#39;/:name&#39; do&#xA;  bar(params[&#39;name&#39;])&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, helper methods can be separately defined in a module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module FooUtils&#xA;  def foo(name) &#34;#{name}foo&#34; end&#xA;end&#xA;&#xA;module BarUtils&#xA;  def bar(name) &#34;#{name}bar&#34; end&#xA;end&#xA;&#xA;helpers FooUtils, BarUtils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The effect is the same as including the modules in the application class.&lt;/p&gt; &#xA;&lt;h3&gt;Using Sessions&lt;/h3&gt; &#xA;&lt;p&gt;A session is used to keep state during requests. If activated, you have one session hash per user session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;enable :sessions&#xA;&#xA;get &#39;/&#39; do&#xA;  &#34;value = &#34; &amp;lt;&amp;lt; session[:value].inspect&#xA;end&#xA;&#xA;get &#39;/:value&#39; do&#xA;  session[&#39;value&#39;] = params[&#39;value&#39;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Session Secret Security&lt;/h4&gt; &#xA;&lt;p&gt;To improve security, the session data in the cookie is signed with a session secret using &lt;code&gt;HMAC-SHA1&lt;/code&gt;. This session secret should optimally be a cryptographically secure random value of an appropriate length which for &lt;code&gt;HMAC-SHA1&lt;/code&gt; is greater than or equal to 64 bytes (512 bits, 128 hex characters). You would be advised not to use a secret that is less than 32 bytes of randomness (256 bits, 64 hex characters). It is therefore &lt;strong&gt;very important&lt;/strong&gt; that you don&#39;t just make the secret up, but instead use a secure random number generator to create it. Humans are extremely bad at generating random values.&lt;/p&gt; &#xA;&lt;p&gt;By default, a 32 byte secure random session secret is generated for you by Sinatra, but it will change with every restart of your application. If you have multiple instances of your application, and you let Sinatra generate the key, each instance would then have a different session key which is probably not what you want.&lt;/p&gt; &#xA;&lt;p&gt;For better security and usability it&#39;s &lt;a href=&#34;https://12factor.net/config&#34;&gt;recommended&lt;/a&gt; that you generate a secure random secret and store it in an environment variable on each host running your application so that all of your application instances will share the same secret. You should periodically rotate this session secret to a new value. Here are some examples of how you might create a 64-byte secret and set it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret Generation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ruby -e &#34;require &#39;securerandom&#39;; puts SecureRandom.hex(64)&#34;&#xA;99ae8af...snip...ec0f262ac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret Generation (Bonus Points)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://github.com/cryptosphere/sysrandom#readme&#34;&gt;sysrandom gem&lt;/a&gt; to use the system RNG facilities to generate random values instead of userspace &lt;code&gt;OpenSSL&lt;/code&gt; which MRI Ruby currently defaults to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gem install sysrandom&#xA;Building native extensions.  This could take a while...&#xA;Successfully installed sysrandom-1.x&#xA;1 gem installed&#xA;&#xA;$ ruby -e &#34;require &#39;sysrandom/securerandom&#39;; puts SecureRandom.hex(64)&#34;&#xA;99ae8af...snip...ec0f262ac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret Environment Variable&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set a &lt;code&gt;SESSION_SECRET&lt;/code&gt; environment variable for Sinatra to the value you generated. Make this value persistent across reboots of your host. Since the method for doing this will vary across systems this is for illustrative purposes only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# echo &#34;export SESSION_SECRET=99ae8af...snip...ec0f262ac&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret App Config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set up your app config to fail-safe to a secure random secret if the &lt;code&gt;SESSION_SECRET&lt;/code&gt; environment variable is not available.&lt;/p&gt; &#xA;&lt;p&gt;For bonus points use the &lt;a href=&#34;https://github.com/cryptosphere/sysrandom#readme&#34;&gt;sysrandom gem&lt;/a&gt; here as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;securerandom&#39;&#xA;# -or- require &#39;sysrandom/securerandom&#39;&#xA;set :session_secret, ENV.fetch(&#39;SESSION_SECRET&#39;) { SecureRandom.hex(64) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Session Config&lt;/h4&gt; &#xA;&lt;p&gt;If you want to configure it further, you may also store a hash with options in the &lt;code&gt;sessions&lt;/code&gt; setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :sessions, :domain =&amp;gt; &#39;foo.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To share your session across other apps on subdomains of foo.com, prefix the domain with a &lt;em&gt;.&lt;/em&gt; like this instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :sessions, :domain =&amp;gt; &#39;.foo.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Choosing Your Own Session Middleware&lt;/h4&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;enable :sessions&lt;/code&gt; actually stores all data in a cookie. This might not always be what you want (storing lots of data will increase your traffic, for instance). You can use any Rack session middleware in order to do so, one of the following methods can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;enable :sessions&#xA;set :session_store, Rack::Session::Pool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to set up sessions with a hash of options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :sessions, :expire_after =&amp;gt; 2592000&#xA;set :session_store, Rack::Session::Pool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option is to &lt;strong&gt;not&lt;/strong&gt; call &lt;code&gt;enable :sessions&lt;/code&gt;, but instead pull in your middleware of choice as you would any other middleware.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note that when using this method, session based protection &lt;strong&gt;will not be enabled by default&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Rack middleware to do that will also need to be added:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use Rack::Session::Pool, :expire_after =&amp;gt; 2592000&#xA;use Rack::Protection::RemoteToken&#xA;use Rack::Protection::SessionHijacking&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &#39;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#configuring-attack-protection&#34;&gt;Configuring attack protection&lt;/a&gt;&#39; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Halting&lt;/h3&gt; &#xA;&lt;p&gt;To immediately stop a request within a filter or route use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify the status when halting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt 410&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or the body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt &#39;this will be the body&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or both:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt 401, &#39;go away!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt 402, {&#39;Content-Type&#39; =&amp;gt; &#39;text/plain&#39;}, &#39;revenge&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is of course possible to combine a template with &lt;code&gt;halt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt erb(:error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passing&lt;/h3&gt; &#xA;&lt;p&gt;A route can punt processing to the next matching route using &lt;code&gt;pass&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/guess/:who&#39; do&#xA;  pass unless params[&#39;who&#39;] == &#39;Frank&#39;&#xA;  &#39;You got me!&#39;&#xA;end&#xA;&#xA;get &#39;/guess/*&#39; do&#xA;  &#39;You missed!&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The route block is immediately exited and control continues with the next matching route. If no matching route is found, a 404 is returned.&lt;/p&gt; &#xA;&lt;h3&gt;Triggering Another Route&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes &lt;code&gt;pass&lt;/code&gt; is not what you want, instead, you would like to get the result of calling another route. Simply use &lt;code&gt;call&lt;/code&gt; to achieve this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  status, headers, body = call env.merge(&#34;PATH_INFO&#34; =&amp;gt; &#39;/bar&#39;)&#xA;  [status, headers, body.map(&amp;amp;:upcase)]&#xA;end&#xA;&#xA;get &#39;/bar&#39; do&#xA;  &#34;bar&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in the example above, you would ease testing and increase performance by simply moving &lt;code&gt;&#34;bar&#34;&lt;/code&gt; into a helper used by both &lt;code&gt;/foo&lt;/code&gt; and &lt;code&gt;/bar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want the request to be sent to the same application instance rather than a duplicate, use &lt;code&gt;call!&lt;/code&gt; instead of &lt;code&gt;call&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out the Rack specification if you want to learn more about &lt;code&gt;call&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting Body, Status Code, and Headers&lt;/h3&gt; &#xA;&lt;p&gt;It is possible and recommended to set the status code and response body with the return value of the route block. However, in some scenarios, you might want to set the body at an arbitrary point in the execution flow. You can do so with the &lt;code&gt;body&lt;/code&gt; helper method. If you do so, you can use that method from thereon to access the body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  body &#34;bar&#34;&#xA;end&#xA;&#xA;after do&#xA;  puts body&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to pass a block to &lt;code&gt;body&lt;/code&gt;, which will be executed by the Rack handler (this can be used to implement streaming, &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#return-values&#34;&gt;see &#34;Return Values&#34;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Similar to the body, you can also set the status code and headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  status 418&#xA;  headers \&#xA;    &#34;Allow&#34;   =&amp;gt; &#34;BREW, POST, GET, PROPFIND, WHEN&#34;,&#xA;    &#34;Refresh&#34; =&amp;gt; &#34;Refresh: 20; https://ietf.org/rfc/rfc2324.txt&#34;&#xA;  body &#34;I&#39;m a teapot!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt; with no arguments can be used to access their current values.&lt;/p&gt; &#xA;&lt;h3&gt;Streaming Responses&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you want to start sending out data while still generating parts of the response body. In extreme examples, you want to keep sending data until the client closes the connection. You can use the &lt;code&gt;stream&lt;/code&gt; helper to avoid creating your own wrapper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  stream do |out|&#xA;    out &amp;lt;&amp;lt; &#34;It&#39;s gonna be legen -\n&#34;&#xA;    sleep 0.5&#xA;    out &amp;lt;&amp;lt; &#34; (wait for it) \n&#34;&#xA;    sleep 1&#xA;    out &amp;lt;&amp;lt; &#34;- dary!\n&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows you to implement streaming APIs, &lt;a href=&#34;https://w3c.github.io/eventsource/&#34;&gt;Server Sent Events&lt;/a&gt;, and can be used as the basis for &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;WebSockets&lt;/a&gt;. It can also be used to increase throughput if some but not all content depends on a slow resource.&lt;/p&gt; &#xA;&lt;p&gt;Note that the streaming behavior, especially the number of concurrent requests, highly depends on the webserver used to serve the application. Some servers might not even support streaming at all. If the server does not support streaming, the body will be sent all at once after the block passed to &lt;code&gt;stream&lt;/code&gt; finishes executing. Streaming does not work at all with Shotgun.&lt;/p&gt; &#xA;&lt;p&gt;If the optional parameter is set to &lt;code&gt;keep_open&lt;/code&gt;, it will not call &lt;code&gt;close&lt;/code&gt; on the stream object, allowing you to close it at any later point in the execution flow. This only works on evented servers, like Rainbows. Other servers will still close the stream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;require &#39;sinatra/base&#39;&#xA;&#xA;class App &amp;lt; Sinatra::Base&#xA;  connections = []&#xA;&#xA;  get &#39;/subscribe&#39;, provides: &#39;text/event-stream&#39;  do&#xA;    # register a client&#39;s interest in server events&#xA;    stream(:keep_open) do |out|&#xA;      connections &amp;lt;&amp;lt; out&#xA;      # purge dead connections&#xA;      connections.reject!(&amp;amp;:closed?)&#xA;    end&#xA;  end&#xA;&#xA;  post &#39;/&#39; do&#xA;    connections.each do |out|&#xA;      # notify client that a new message has arrived&#xA;      out &amp;lt;&amp;lt; &#34;data: #{params[:msg]}\n\n&#34;&#xA;&#xA;      #&amp;nbsp;indicate client to connect again&#xA;      out.close&#xA;    end&#xA;&#xA;    204 # response without entity body&#xA;  end&#xA;end&#xA;&#xA;run App&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# rainbows.conf&#xA;Rainbows! do&#xA;  use :EventMachine&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rainbows -c rainbows.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible for the client to close the connection when trying to write to the socket. Because of this, it&#39;s recommended to check &lt;code&gt;out.closed?&lt;/code&gt; before trying to write.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;In the request scope, the &lt;code&gt;logger&lt;/code&gt; helper exposes a &lt;code&gt;Logger&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  logger.info &#34;loading data&#34;&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This logger will automatically take your Rack handler&#39;s logging settings into account. If logging is disabled, this method will return a dummy object, so you do not have to worry about it in your routes and filters.&lt;/p&gt; &#xA;&lt;p&gt;Note that logging is only enabled for &lt;code&gt;Sinatra::Application&lt;/code&gt; by default, so if you inherit from &lt;code&gt;Sinatra::Base&lt;/code&gt;, you probably want to enable it yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyApp &amp;lt; Sinatra::Base&#xA;  configure :production, :development do&#xA;    enable :logging&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid any logging middleware to be set up, set the &lt;code&gt;logging&lt;/code&gt; option to &lt;code&gt;nil&lt;/code&gt;. However, keep in mind that &lt;code&gt;logger&lt;/code&gt; will in that case return &lt;code&gt;nil&lt;/code&gt;. A common use case is when you want to set your own logger. Sinatra will use whatever it will find in &lt;code&gt;env[&#39;rack.logger&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mime Types&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;code&gt;send_file&lt;/code&gt; or static files you may have mime types Sinatra doesn&#39;t understand. Use &lt;code&gt;mime_type&lt;/code&gt; to register them by file extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  mime_type :foo, &#39;text/foo&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use it with the &lt;code&gt;content_type&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  content_type :foo&#xA;  &#34;foo foo foo&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating URLs&lt;/h3&gt; &#xA;&lt;p&gt;For generating URLs you should use the &lt;code&gt;url&lt;/code&gt; helper method, for instance, in Haml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%a{:href =&amp;gt; url(&#39;/foo&#39;)} foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It takes reverse proxies and Rack routers into account - if present.&lt;/p&gt; &#xA;&lt;p&gt;This method is also aliased to &lt;code&gt;to&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#browser-redirect&#34;&gt;below&lt;/a&gt; for an example).&lt;/p&gt; &#xA;&lt;h3&gt;Browser Redirect&lt;/h3&gt; &#xA;&lt;p&gt;You can trigger a browser redirect with the &lt;code&gt;redirect&lt;/code&gt; helper method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  redirect to(&#39;/bar&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any additional parameters are handled like arguments passed to &lt;code&gt;halt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redirect to(&#39;/bar&#39;), 303&#xA;redirect &#39;http://www.google.com/&#39;, &#39;wrong place, buddy&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also easily redirect back to the page the user came from with &lt;code&gt;redirect back&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  &#34;&amp;lt;a href=&#39;/bar&#39;&amp;gt;do something&amp;lt;/a&amp;gt;&#34;&#xA;end&#xA;&#xA;get &#39;/bar&#39; do&#xA;  do_something&#xA;  redirect back&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass arguments with a redirect, either add them to the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redirect to(&#39;/bar?sum=42&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use a session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;enable :sessions&#xA;&#xA;get &#39;/foo&#39; do&#xA;  session[:secret] = &#39;foo&#39;&#xA;  redirect to(&#39;/bar&#39;)&#xA;end&#xA;&#xA;get &#39;/bar&#39; do&#xA;  session[:secret]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cache Control&lt;/h3&gt; &#xA;&lt;p&gt;Setting your headers correctly is the foundation for proper HTTP caching.&lt;/p&gt; &#xA;&lt;p&gt;You can easily set the Cache-Control header like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  cache_control :public&#xA;  &#34;cache it!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pro tip: Set up caching in a before filter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  cache_control :public, :must_revalidate, :max_age =&amp;gt; 60&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;expires&lt;/code&gt; helper to set the corresponding header, &lt;code&gt;Cache-Control&lt;/code&gt; will be set automatically for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  expires 500, :public, :must_revalidate&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To properly use caches, you should consider using &lt;code&gt;etag&lt;/code&gt; or &lt;code&gt;last_modified&lt;/code&gt;. It is recommended to call those helpers &lt;em&gt;before&lt;/em&gt; doing any heavy lifting, as they will immediately flush a response if the client already has the current version in its cache:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#34;/article/:id&#34; do&#xA;  @article = Article.find params[&#39;id&#39;]&#xA;  last_modified @article.updated_at&#xA;  etag @article.sha1&#xA;  erb :article&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to use a &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation&#34;&gt;weak ETag&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;etag @article.sha1, :weak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These helpers will not do any caching for you, but rather feed the necessary information to your cache. If you are looking for a quick reverse-proxy caching solution, try &lt;a href=&#34;https://github.com/rtomayko/rack-cache#readme&#34;&gt;rack-cache&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;rack/cache&#34;&#xA;require &#34;sinatra&#34;&#xA;&#xA;use Rack::Cache&#xA;&#xA;get &#39;/&#39; do&#xA;  cache_control :public, :max_age =&amp;gt; 36000&#xA;  sleep 5&#xA;  &#34;hello&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;:static_cache_control&lt;/code&gt; setting (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#cache-control&#34;&gt;below&lt;/a&gt;) to add &lt;code&gt;Cache-Control&lt;/code&gt; header info to static files.&lt;/p&gt; &#xA;&lt;p&gt;According to RFC 2616, your application should behave differently if the If-Match or If-None-Match header is set to &lt;code&gt;*&lt;/code&gt;, depending on whether the resource requested is already in existence. Sinatra assumes resources for safe (like get) and idempotent (like put) requests are already in existence, whereas other resources (for instance post requests) are treated as new resources. You can change this behavior by passing in a &lt;code&gt;:new_resource&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/create&#39; do&#xA;  etag &#39;&#39;, :new_resource =&amp;gt; true&#xA;  Article.create&#xA;  erb :new_article&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you still want to use a weak ETag, pass in a &lt;code&gt;:kind&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;etag &#39;&#39;, :new_resource =&amp;gt; true, :kind =&amp;gt; :weak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending Files&lt;/h3&gt; &#xA;&lt;p&gt;To return the contents of a file as the response, you can use the &lt;code&gt;send_file&lt;/code&gt; helper method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  send_file &#39;foo.png&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also takes options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;send_file &#39;foo.png&#39;, :type =&amp;gt; :jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The options are:&lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  filename&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  File name to be used in the response, defaults to the real file name.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  last_modified&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Value for Last-Modified header, defaults to the file&#39;s mtime.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  type&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Value for Content-Type header, guessed from the file extension if missing.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  disposition&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Value for Content-Disposition header, possible values: &#xA;  &lt;tt&gt;nil&lt;/tt&gt; (default), &#xA;  &lt;tt&gt;:attachment&lt;/tt&gt; and &#xA;  &lt;tt&gt;:inline&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  length&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Value for Content-Length header, defaults to file size.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  status&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Status code to be sent. Useful when sending a static file as an error page. If supported by the Rack handler, other means than streaming from the Ruby process will be used. If you use this helper method, Sinatra will automatically handle range requests. &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;h3&gt;Accessing the Request Object&lt;/h3&gt; &#xA;&lt;p&gt;The incoming request object can be accessed from request level (filter, routes, error handlers) through the &lt;code&gt;request&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app running on http://example.com/example&#xA;get &#39;/foo&#39; do&#xA;  t = %w[text/css text/html application/javascript]&#xA;  request.accept              # [&#39;text/html&#39;, &#39;*/*&#39;]&#xA;  request.accept? &#39;text/xml&#39;  # true&#xA;  request.preferred_type(t)   # &#39;text/html&#39;&#xA;  request.body                # request body sent by the client (see below)&#xA;  request.scheme              # &#34;http&#34;&#xA;  request.script_name         # &#34;/example&#34;&#xA;  request.path_info           # &#34;/foo&#34;&#xA;  request.port                # 80&#xA;  request.request_method      # &#34;GET&#34;&#xA;  request.query_string        # &#34;&#34;&#xA;  request.content_length      # length of request.body&#xA;  request.media_type          # media type of request.body&#xA;  request.host                # &#34;example.com&#34;&#xA;  request.get?                # true (similar methods for other verbs)&#xA;  request.form_data?          # false&#xA;  request[&#34;some_param&#34;]       # value of some_param parameter. [] is a shortcut to the params hash.&#xA;  request.referrer            # the referrer of the client or &#39;/&#39;&#xA;  request.user_agent          # user agent (used by :agent condition)&#xA;  request.cookies             # hash of browser cookies&#xA;  request.xhr?                # is this an ajax request?&#xA;  request.url                 # &#34;http://example.com/example/foo&#34;&#xA;  request.path                # &#34;/example/foo&#34;&#xA;  request.ip                  # client IP address&#xA;  request.secure?             # false (would be true over ssl)&#xA;  request.forwarded?          # true (if running behind a reverse proxy)&#xA;  request.env                 # raw env hash handed in by Rack&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some options, like &lt;code&gt;script_name&lt;/code&gt; or &lt;code&gt;path_info&lt;/code&gt;, can also be written:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before { request.path_info = &#34;/&#34; }&#xA;&#xA;get &#34;/&#34; do&#xA;  &#34;all requests end up here&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;request.body&lt;/code&gt; is an IO or StringIO object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post &#34;/api&#34; do&#xA;  request.body.rewind  # in case someone already read it&#xA;  data = JSON.parse request.body.read&#xA;  &#34;Hello #{data[&#39;name&#39;]}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attachments&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;attachment&lt;/code&gt; helper to tell the browser the response should be stored on disk rather than displayed in the browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  attachment&#xA;  &#34;store it!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass it a file name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  attachment &#34;info.txt&#34;&#xA;  &#34;store it!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dealing with Date and Time&lt;/h3&gt; &#xA;&lt;p&gt;Sinatra offers a &lt;code&gt;time_for&lt;/code&gt; helper method that generates a Time object from the given value. It is also able to convert &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt; and similar classes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  pass if Time.now &amp;gt; time_for(&#39;Dec 23, 2016&#39;)&#xA;  &#34;still time&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method is used internally by &lt;code&gt;expires&lt;/code&gt;, &lt;code&gt;last_modified&lt;/code&gt; and akin. You can therefore easily extend the behavior of those methods by overriding &lt;code&gt;time_for&lt;/code&gt; in your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;helpers do&#xA;  def time_for(value)&#xA;    case value&#xA;    when :yesterday then Time.now - 24*60*60&#xA;    when :tomorrow  then Time.now + 24*60*60&#xA;    else super&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  last_modified :yesterday&#xA;  expires :tomorrow&#xA;  &#34;hello&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Looking Up Template Files&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;find_template&lt;/code&gt; helper is used to find template files for rendering:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find_template settings.views, &#39;foo&#39;, Tilt[:haml] do |file|&#xA;  puts &#34;could be #{file}&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is not really useful. But it is useful that you can actually override this method to hook in your own lookup mechanism. For instance, if you want to be able to use more than one view directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :views, [&#39;views&#39;, &#39;templates&#39;]&#xA;&#xA;helpers do&#xA;  def find_template(views, name, engine, &amp;amp;block)&#xA;    Array(views).each { |v| super(v, name, engine, &amp;amp;block) }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another example would be using different directories for different engines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :views, :haml =&amp;gt; &#39;templates&#39;, :default =&amp;gt; &#39;views&#39;&#xA;&#xA;helpers do&#xA;  def find_template(views, name, engine, &amp;amp;block)&#xA;    _, folder = views.detect { |k,v| engine == Tilt[k] }&#xA;    folder ||= views[:default]&#xA;    super(folder, name, engine, &amp;amp;block)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also easily wrap this up in an extension and share it with others!&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;find_template&lt;/code&gt; does not check if the file really exists but rather calls the given block for all possible paths. This is not a performance issue, since &lt;code&gt;render&lt;/code&gt; will use &lt;code&gt;break&lt;/code&gt; as soon as a file is found. Also, template locations (and content) will be cached if you are not running in development mode. You should keep that in mind if you write a really crazy method.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Run once, at startup, in any environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  # setting one option&#xA;  set :option, &#39;value&#39;&#xA;&#xA;  # setting multiple options&#xA;  set :a =&amp;gt; 1, :b =&amp;gt; 2&#xA;&#xA;  # same as `set :option, true`&#xA;  enable :option&#xA;&#xA;  # same as `set :option, false`&#xA;  disable :option&#xA;&#xA;  # you can also have dynamic settings with blocks&#xA;  set(:css_dir) { File.join(views, &#39;css&#39;) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run only when the environment (&lt;code&gt;APP_ENV&lt;/code&gt; environment variable) is set to &lt;code&gt;:production&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure :production do&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run when the environment is set to either &lt;code&gt;:production&lt;/code&gt; or &lt;code&gt;:test&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure :production, :test do&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access those options via &lt;code&gt;settings&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  set :foo, &#39;bar&#39;&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  settings.foo? # =&amp;gt; true&#xA;  settings.foo  # =&amp;gt; &#39;bar&#39;&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring attack protection&lt;/h3&gt; &#xA;&lt;p&gt;Sinatra is using &lt;a href=&#34;https://github.com/sinatra/sinatra/tree/master/rack-protection#readme&#34;&gt;Rack::Protection&lt;/a&gt; to defend your application against common, opportunistic attacks. You can easily disable this behavior (which will open up your application to tons of common vulnerabilities):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;disable :protection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To skip a single defense layer, set &lt;code&gt;protection&lt;/code&gt; to an options hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :protection, :except =&amp;gt; :path_traversal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also hand in an array in order to disable a list of protections:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :protection, :except =&amp;gt; [:path_traversal, :session_hijacking]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Sinatra will only set up session based protection if &lt;code&gt;:sessions&lt;/code&gt; have been enabled. See &#39;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#using-sessions&#34;&gt;Using Sessions&lt;/a&gt;&#39;. Sometimes you may want to set up sessions &#34;outside&#34; of the Sinatra app, such as in the config.ru or with a separate &lt;code&gt;Rack::Builder&lt;/code&gt; instance. In that case, you can still set up session based protection by passing the &lt;code&gt;:session&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :protection, :session =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available Settings&lt;/h3&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  absolute_redirects&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If disabled, Sinatra will allow relative redirects, however, Sinatra will no longer conform with RFC 2616 (HTTP 1.1), which only allows absolute redirects. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Enable if your app is running behind a reverse proxy that has not been set up properly. Note that the &#xA;  &lt;tt&gt;url&lt;/tt&gt; helper will still produce absolute URLs, unless you pass in &#xA;  &lt;tt&gt;false&lt;/tt&gt; as the second parameter. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Disabled by default.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  add_charset&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Mime types the &#xA;  &lt;tt&gt;content_type&lt;/tt&gt; helper will automatically add the charset info to. You should add to it rather than overriding this option: &#xA;  &lt;tt&gt;settings.add_charset &amp;lt;&amp;lt; &#34;application/foobar&#34;&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  app_file&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to the main application file, used to detect project root, views and public folder and inline templates. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  bind&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   IP address to bind to (default: &#xA;  &lt;tt&gt;0.0.0.0&lt;/tt&gt; &#xA;  &lt;em&gt;or&lt;/em&gt; &#xA;  &lt;tt&gt;localhost&lt;/tt&gt; if your `environment` is set to development). Only used for built-in server. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  default_content_type&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Content-Type to assume if unknown (defaults to &#xA;  &lt;tt&gt;&#34;text/html&#34;&lt;/tt&gt;). Set to &#xA;  &lt;tt&gt;nil&lt;/tt&gt; to not set a default Content-Type on every response; when configured so, you must set the Content-Type manually when emitting content or the user-agent will have to sniff it (or, if &#xA;  &lt;tt&gt;nosniff&lt;/tt&gt; is enabled in Rack::Protection::XSSHeader, assume &#xA;  &lt;tt&gt;application/octet-stream&lt;/tt&gt;). &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  default_encoding&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Encoding to assume if unknown (defaults to &#xA;  &lt;tt&gt;&#34;utf-8&#34;&lt;/tt&gt;).&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  dump_errors&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Display errors in the log. Enabled by default unless environment is &#34;test&#34;.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  environment&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Current environment. Defaults to &#xA;  &lt;tt&gt;ENV[&#39;APP_ENV&#39;]&lt;/tt&gt;, or &#xA;  &lt;tt&gt;&#34;development&#34;&lt;/tt&gt; if not available. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  logging&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Use the logger.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  lock&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Places a lock around every request, only running processing on request per Ruby process concurrently. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Enabled if your app is not thread-safe. Disabled by default.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  method_override&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Use &#xA;  &lt;tt&gt;_method&lt;/tt&gt; magic to allow put/delete forms in browsers that don&#39;t support it. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  mustermann_opts&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   A default hash of options to pass to Mustermann.new when compiling routing paths. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  port&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Port to listen on. Only used for built-in server.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  prefixed_redirects&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to insert &#xA;  &lt;tt&gt;request.script_name&lt;/tt&gt; into redirects if no absolute path is given. That way &#xA;  &lt;tt&gt;redirect &#39;/foo&#39;&lt;/tt&gt; would behave like &#xA;  &lt;tt&gt;redirect to(&#39;/foo&#39;)&lt;/tt&gt;. Disabled by default. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  protection&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to enable web attack protections. See protection section above. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  public_dir&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Alias for &#xA;  &lt;tt&gt;public_folder&lt;/tt&gt;. See below.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  public_folder&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to the folder public files are served from. Only used if static file serving is enabled (see &#xA;  &lt;tt&gt;static&lt;/tt&gt; setting below). Inferred from &#xA;  &lt;tt&gt;app_file&lt;/tt&gt; setting if not set. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  quiet&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Disables logs generated by Sinatra&#39;s start and stop commands. &#xA;  &lt;tt&gt;false&lt;/tt&gt; by default. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  reload_templates&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to reload templates between requests. Enabled in development mode. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  root&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to project root folder. Inferred from &#xA;  &lt;tt&gt;app_file&lt;/tt&gt; setting if not set. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  raise_errors&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Raise exceptions (will stop application). Enabled by default when &#xA;  &lt;tt&gt;environment&lt;/tt&gt; is set to &#xA;  &lt;tt&gt;&#34;test&#34;&lt;/tt&gt;, disabled otherwise. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  run&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If enabled, Sinatra will handle starting the web server. Do not enable if using rackup or other means. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  running&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Is the built-in server running now? Do not change this setting!&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  server&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Server or list of servers to use for built-in server. Order indicates priority, default depends on Ruby implementation. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  server_settings&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If you are using a WEBrick web server, presumably for your development environment, you can pass a hash of options to &#xA;  &lt;tt&gt;server_settings&lt;/tt&gt;, such as &#xA;  &lt;tt&gt;SSLEnable&lt;/tt&gt; or &#xA;  &lt;tt&gt;SSLVerifyClient&lt;/tt&gt;. However, web servers such as Puma do not support this, so you can set &#xA;  &lt;tt&gt;server_settings&lt;/tt&gt; by defining it as a method when you call &#xA;  &lt;tt&gt;configure&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  sessions&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Enable cookie-based sessions support using &#xA;  &lt;tt&gt;Rack::Session::Cookie&lt;/tt&gt;. See &#39;Using Sessions&#39; section for more information. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  session_store&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   The Rack session middleware used. Defaults to &#xA;  &lt;tt&gt;Rack::Session::Cookie&lt;/tt&gt;. See &#39;Using Sessions&#39; section for more information. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  show_exceptions&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Show a stack trace in the browser when an exception happens. Enabled by default when &#xA;  &lt;tt&gt;environment&lt;/tt&gt; is set to &#xA;  &lt;tt&gt;&#34;development&#34;&lt;/tt&gt;, disabled otherwise. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Can also be set to &#xA;  &lt;tt&gt;:after_handler&lt;/tt&gt; to trigger app-specified error handling before showing a stack trace in the browser. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  static&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Whether Sinatra should handle serving static files.&#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Disable when using a server able to do this on its own.&#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Disabling will boost performance.&#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Enabled by default in classic style, disabled for modular apps. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  static_cache_control&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   When Sinatra is serving static files, set this to add &#xA;  &lt;tt&gt;Cache-Control&lt;/tt&gt; headers to the responses. Uses the &#xA;  &lt;tt&gt;cache_control&lt;/tt&gt; helper. Disabled by default. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Use an explicit array when setting multiple values: &#xA;  &lt;tt&gt;set :static_cache_control, [:public, :max_age =&amp;gt; 300]&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  threaded&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If set to &#xA;  &lt;tt&gt;true&lt;/tt&gt;, will tell server to use &#xA;  &lt;tt&gt;EventMachine.defer&lt;/tt&gt; for processing the request. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  traps&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Whether Sinatra should handle system signals.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  views&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to the views folder. Inferred from &#xA;  &lt;tt&gt;app_file&lt;/tt&gt; setting if not set. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  x_cascade&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to set the X-Cascade header if no route matches. Defaults to &#xA;  &lt;tt&gt;true&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;h2&gt;Environments&lt;/h2&gt; &#xA;&lt;p&gt;There are three predefined &lt;code&gt;environments&lt;/code&gt;: &lt;code&gt;&#34;development&#34;&lt;/code&gt;, &lt;code&gt;&#34;production&#34;&lt;/code&gt; and &lt;code&gt;&#34;test&#34;&lt;/code&gt;. Environments can be set through the &lt;code&gt;APP_ENV&lt;/code&gt; environment variable. The default value is &lt;code&gt;&#34;development&#34;&lt;/code&gt;. In the &lt;code&gt;&#34;development&#34;&lt;/code&gt; environment all templates are reloaded between requests, and special &lt;code&gt;not_found&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; handlers display stack traces in your browser. In the &lt;code&gt;&#34;production&#34;&lt;/code&gt; and &lt;code&gt;&#34;test&#34;&lt;/code&gt; environments, templates are cached by default.&lt;/p&gt; &#xA;&lt;p&gt;To run different environments, set the &lt;code&gt;APP_ENV&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;APP_ENV=production ruby my_app.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use predefined methods: &lt;code&gt;development?&lt;/code&gt;, &lt;code&gt;test?&lt;/code&gt; and &lt;code&gt;production?&lt;/code&gt; to check the current environment setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  if settings.development?&#xA;    &#34;development!&#34;&#xA;  else&#xA;    &#34;not development!&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;p&gt;Error handlers run within the same context as routes and before filters, which means you get all the goodies it has to offer, like &lt;code&gt;haml&lt;/code&gt;, &lt;code&gt;erb&lt;/code&gt;, &lt;code&gt;halt&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Not Found&lt;/h3&gt; &#xA;&lt;p&gt;When a &lt;code&gt;Sinatra::NotFound&lt;/code&gt; exception is raised, or the response&#39;s status code is 404, the &lt;code&gt;not_found&lt;/code&gt; handler is invoked:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;not_found do&#xA;  &#39;This is nowhere to be found.&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;error&lt;/code&gt; handler is invoked any time an exception is raised from a route block or a filter. But note in development it will only run if you set the show exceptions option to &lt;code&gt;:after_handler&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :show_exceptions, :after_handler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The exception object can be obtained from the &lt;code&gt;sinatra.error&lt;/code&gt; Rack variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error do&#xA;  &#39;Sorry there was a nasty error - &#39; + env[&#39;sinatra.error&#39;].message&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error MyCustomError do&#xA;  &#39;So what happened was...&#39; + env[&#39;sinatra.error&#39;].message&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, if this happens:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  raise MyCustomError, &#39;something bad&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You get this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;So what happened was... something bad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can install an error handler for a status code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error 403 do&#xA;  &#39;Access forbidden&#39;&#xA;end&#xA;&#xA;get &#39;/secret&#39; do&#xA;  403&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a range:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error 400..510 do&#xA;  &#39;Boom&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sinatra installs special &lt;code&gt;not_found&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; handlers when running under the development environment to display nice stack traces and additional debugging information in your browser.&lt;/p&gt; &#xA;&lt;h2&gt;Rack Middleware&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra rides on &lt;a href=&#34;https://rack.github.io/&#34;&gt;Rack&lt;/a&gt;, a minimal standard interface for Ruby web frameworks. One of Rack&#39;s most interesting capabilities for application developers is support for &#34;middleware&#34; -- components that sit between the server and your application monitoring and/or manipulating the HTTP request/response to provide various types of common functionality.&lt;/p&gt; &#xA;&lt;p&gt;Sinatra makes building Rack middleware pipelines a cinch via a top-level &lt;code&gt;use&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra&#39;&#xA;require &#39;my_custom_middleware&#39;&#xA;&#xA;use Rack::Lint&#xA;use MyCustomMiddleware&#xA;&#xA;get &#39;/hello&#39; do&#xA;  &#39;Hello World&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The semantics of &lt;code&gt;use&lt;/code&gt; are identical to those defined for the &lt;a href=&#34;http://www.rubydoc.info/github/rack/rack/master/Rack/Builder&#34;&gt;Rack::Builder&lt;/a&gt; DSL (most frequently used from rackup files). For example, the &lt;code&gt;use&lt;/code&gt; method accepts multiple/variable args as well as blocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use Rack::Auth::Basic do |username, password|&#xA;  username == &#39;admin&#39; &amp;amp;&amp;amp; password == &#39;secret&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rack is distributed with a variety of standard middleware for logging, debugging, URL routing, authentication, and session handling. Sinatra uses many of these components automatically based on configuration so you typically don&#39;t have to &lt;code&gt;use&lt;/code&gt; them explicitly.&lt;/p&gt; &#xA;&lt;p&gt;You can find useful middleware in &lt;a href=&#34;https://github.com/rack/rack/tree/master/lib/rack&#34;&gt;rack&lt;/a&gt;, &lt;a href=&#34;https://github.com/rack/rack-contrib#readme&#34;&gt;rack-contrib&lt;/a&gt;, or in the &lt;a href=&#34;https://github.com/rack/rack/wiki/List-of-Middleware&#34;&gt;Rack wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra tests can be written using any Rack-based testing library or framework. &lt;a href=&#34;http://www.rubydoc.info/github/brynary/rack-test/master/frames&#34;&gt;Rack::Test&lt;/a&gt; is recommended:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;my_sinatra_app&#39;&#xA;require &#39;minitest/autorun&#39;&#xA;require &#39;rack/test&#39;&#xA;&#xA;class MyAppTest &amp;lt; Minitest::Test&#xA;  include Rack::Test::Methods&#xA;&#xA;  def app&#xA;    Sinatra::Application&#xA;  end&#xA;&#xA;  def test_my_default&#xA;    get &#39;/&#39;&#xA;    assert_equal &#39;Hello World!&#39;, last_response.body&#xA;  end&#xA;&#xA;  def test_with_params&#xA;    get &#39;/meet&#39;, :name =&amp;gt; &#39;Frank&#39;&#xA;    assert_equal &#39;Hello Frank!&#39;, last_response.body&#xA;  end&#xA;&#xA;  def test_with_user_agent&#xA;    get &#39;/&#39;, {}, &#39;HTTP_USER_AGENT&#39; =&amp;gt; &#39;Songbird&#39;&#xA;    assert_equal &#34;You&#39;re using Songbird!&#34;, last_response.body&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you are using Sinatra in the modular style, replace &lt;code&gt;Sinatra::Application&lt;/code&gt; above with the class name of your app.&lt;/p&gt; &#xA;&lt;h2&gt;Sinatra::Base - Middleware, Libraries, and Modular Apps&lt;/h2&gt; &#xA;&lt;p&gt;Defining your app at the top-level works well for micro-apps but has considerable drawbacks when building reusable components such as Rack middleware, Rails metal, simple libraries with a server component, or even Sinatra extensions. The top-level assumes a micro-app style configuration (e.g., a single application file, &lt;code&gt;./public&lt;/code&gt; and &lt;code&gt;./views&lt;/code&gt; directories, logging, exception detail page, etc.). That&#39;s where &lt;code&gt;Sinatra::Base&lt;/code&gt; comes into play:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;class MyApp &amp;lt; Sinatra::Base&#xA;  set :sessions, true&#xA;  set :foo, &#39;bar&#39;&#xA;&#xA;  get &#39;/&#39; do&#xA;    &#39;Hello world!&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The methods available to &lt;code&gt;Sinatra::Base&lt;/code&gt; subclasses are exactly the same as those available via the top-level DSL. Most top-level apps can be converted to &lt;code&gt;Sinatra::Base&lt;/code&gt; components with two modifications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your file should require &lt;code&gt;sinatra/base&lt;/code&gt; instead of &lt;code&gt;sinatra&lt;/code&gt;; otherwise, all of Sinatra&#39;s DSL methods are imported into the main namespace.&lt;/li&gt; &#xA; &lt;li&gt;Put your app&#39;s routes, error handlers, filters, and options in a subclass of &lt;code&gt;Sinatra::Base&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Sinatra::Base&lt;/code&gt; is a blank slate. Most options are disabled by default, including the built-in server. See &lt;a href=&#34;http://www.sinatrarb.com/configuration.html&#34;&gt;Configuring Settings&lt;/a&gt; for details on available options and their behavior. If you want behavior more similar to when you define your app at the top level (also known as Classic style), you can subclass &lt;code&gt;Sinatra::Application&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;class MyApp &amp;lt; Sinatra::Application&#xA;  get &#39;/&#39; do&#xA;    &#39;Hello world!&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modular vs. Classic Style&lt;/h3&gt; &#xA;&lt;p&gt;Contrary to common belief, there is nothing wrong with the classic style. If it suits your application, you do not have to switch to a modular application.&lt;/p&gt; &#xA;&lt;p&gt;The main disadvantage of using the classic style rather than the modular style is that you will only have one Sinatra application per Ruby process. If you plan to use more than one, switch to the modular style. There is no reason you cannot mix the modular and classic styles.&lt;/p&gt; &#xA;&lt;p&gt;If switching from one style to the other, you should be aware of slightly different default settings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting&lt;/th&gt; &#xA;   &lt;th&gt;Classic&lt;/th&gt; &#xA;   &lt;th&gt;Modular&lt;/th&gt; &#xA;   &lt;th&gt;Modular&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;app_file&lt;/td&gt; &#xA;   &lt;td&gt;file loading sinatra&lt;/td&gt; &#xA;   &lt;td&gt;file subclassing Sinatra::Base&lt;/td&gt; &#xA;   &lt;td&gt;file subclassing Sinatra::Application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;run&lt;/td&gt; &#xA;   &lt;td&gt;$0 == app_file&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;logging&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;method_override&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inline_templates&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;static&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;File.exist?(public_folder)&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Serving a Modular Application&lt;/h3&gt; &#xA;&lt;p&gt;There are two common options for starting a modular app, actively starting with &lt;code&gt;run!&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# my_app.rb&#xA;require &#39;sinatra/base&#39;&#xA;&#xA;class MyApp &amp;lt; Sinatra::Base&#xA;  # ... app code here ...&#xA;&#xA;  # start the server if ruby file executed directly&#xA;  run! if app_file == $0&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruby my_app.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a &lt;code&gt;config.ru&lt;/code&gt; file, which allows using any Rack handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru (run with rackup)&#xA;require &#39;./my_app&#39;&#xA;run MyApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rackup -p 4567&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a Classic Style Application with a config.ru&lt;/h3&gt; &#xA;&lt;p&gt;Write your app file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app.rb&#xA;require &#39;sinatra&#39;&#xA;&#xA;get &#39;/&#39; do&#xA;  &#39;Hello world!&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a corresponding &lt;code&gt;config.ru&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;./app&#39;&#xA;run Sinatra::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When to use a config.ru?&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;config.ru&lt;/code&gt; file is recommended if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You want to deploy with a different Rack handler (Passenger, Unicorn, Heroku, ...).&lt;/li&gt; &#xA; &lt;li&gt;You want to use more than one subclass of &lt;code&gt;Sinatra::Base&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You want to use Sinatra only for middleware, and not as an endpoint.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;There is no need to switch to a &lt;code&gt;config.ru&lt;/code&gt; simply because you switched to the modular style, and you don&#39;t have to use the modular style for running with a &lt;code&gt;config.ru&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using Sinatra as Middleware&lt;/h3&gt; &#xA;&lt;p&gt;Not only is Sinatra able to use other Rack middleware, any Sinatra application can, in turn, be added in front of any Rack endpoint as middleware itself. This endpoint could be another Sinatra application, or any other Rack-based application (Rails/Hanami/Roda/...):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;class LoginScreen &amp;lt; Sinatra::Base&#xA;  enable :sessions&#xA;&#xA;  get(&#39;/login&#39;) { haml :login }&#xA;&#xA;  post(&#39;/login&#39;) do&#xA;    if params[&#39;name&#39;] == &#39;admin&#39; &amp;amp;&amp;amp; params[&#39;password&#39;] == &#39;admin&#39;&#xA;      session[&#39;user_name&#39;] = params[&#39;name&#39;]&#xA;    else&#xA;      redirect &#39;/login&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class MyApp &amp;lt; Sinatra::Base&#xA;  # middleware will run before filters&#xA;  use LoginScreen&#xA;&#xA;  before do&#xA;    unless session[&#39;user_name&#39;]&#xA;      halt &#34;Access denied, please &amp;lt;a href=&#39;/login&#39;&amp;gt;login&amp;lt;/a&amp;gt;.&#34;&#xA;    end&#xA;  end&#xA;&#xA;  get(&#39;/&#39;) { &#34;Hello #{session[&#39;user_name&#39;]}.&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamic Application Creation&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you want to create new applications at runtime without having to assign them to a constant. You can do this with &lt;code&gt;Sinatra.new&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;my_app = Sinatra.new { get(&#39;/&#39;) { &#34;hi&#34; } }&#xA;my_app.run!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It takes the application to inherit from as an optional argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru (run with rackup)&#xA;require &#39;sinatra/base&#39;&#xA;&#xA;controller = Sinatra.new do&#xA;  enable :logging&#xA;  helpers MyHelpers&#xA;end&#xA;&#xA;map(&#39;/a&#39;) do&#xA;  run Sinatra.new(controller) { get(&#39;/&#39;) { &#39;a&#39; } }&#xA;end&#xA;&#xA;map(&#39;/b&#39;) do&#xA;  run Sinatra.new(controller) { get(&#39;/&#39;) { &#39;b&#39; } }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is especially useful for testing Sinatra extensions or using Sinatra in your own library.&lt;/p&gt; &#xA;&lt;p&gt;This also makes using Sinatra as middleware extremely easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;use Sinatra do&#xA;  get(&#39;/&#39;) { ... }&#xA;end&#xA;&#xA;run RailsProject::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scopes and Binding&lt;/h2&gt; &#xA;&lt;p&gt;The scope you are currently in determines what methods and variables are available.&lt;/p&gt; &#xA;&lt;h3&gt;Application/Class Scope&lt;/h3&gt; &#xA;&lt;p&gt;Every Sinatra application corresponds to a subclass of &lt;code&gt;Sinatra::Base&lt;/code&gt;. If you are using the top-level DSL (&lt;code&gt;require &#39;sinatra&#39;&lt;/code&gt;), then this class is &lt;code&gt;Sinatra::Application&lt;/code&gt;, otherwise it is the subclass you created explicitly. At the class level, you have methods like &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;before&lt;/code&gt;, but you cannot access the &lt;code&gt;request&lt;/code&gt; or &lt;code&gt;session&lt;/code&gt; objects, as there is only a single application class for all requests.&lt;/p&gt; &#xA;&lt;p&gt;Options created via &lt;code&gt;set&lt;/code&gt; are methods at class level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyApp &amp;lt; Sinatra::Base&#xA;  # Hey, I&#39;m in the application scope!&#xA;  set :foo, 42&#xA;  foo # =&amp;gt; 42&#xA;&#xA;  get &#39;/foo&#39; do&#xA;    # Hey, I&#39;m no longer in the application scope!&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You have the application scope binding inside:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your application class body&lt;/li&gt; &#xA; &lt;li&gt;Methods defined by extensions&lt;/li&gt; &#xA; &lt;li&gt;The block passed to &lt;code&gt;helpers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Procs/blocks used as a value for &lt;code&gt;set&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The block passed to &lt;code&gt;Sinatra.new&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can reach the scope object (the class) like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Via the object passed to configure blocks (&lt;code&gt;configure { |c| ... }&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;settings&lt;/code&gt; from within the request scope&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Request/Instance Scope&lt;/h3&gt; &#xA;&lt;p&gt;For every incoming request, a new instance of your application class is created, and all handler blocks run in that scope. From within this scope you can access the &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; objects or call rendering methods like &lt;code&gt;erb&lt;/code&gt; or &lt;code&gt;haml&lt;/code&gt;. You can access the application scope from within the request scope via the &lt;code&gt;settings&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyApp &amp;lt; Sinatra::Base&#xA;  # Hey, I&#39;m in the application scope!&#xA;  get &#39;/define_route/:name&#39; do&#xA;    # Request scope for &#39;/define_route/:name&#39;&#xA;    @value = 42&#xA;&#xA;    settings.get(&#34;/#{params[&#39;name&#39;]}&#34;) do&#xA;      # Request scope for &#34;/#{params[&#39;name&#39;]}&#34;&#xA;      @value # =&amp;gt; nil (not the same request)&#xA;    end&#xA;&#xA;    &#34;Route defined!&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You have the request scope binding inside:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;get, head, post, put, delete, options, patch, link and unlink blocks&lt;/li&gt; &#xA; &lt;li&gt;before and after filters&lt;/li&gt; &#xA; &lt;li&gt;helper methods&lt;/li&gt; &#xA; &lt;li&gt;templates/views&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Delegation Scope&lt;/h3&gt; &#xA;&lt;p&gt;The delegation scope just forwards methods to the class scope. However, it does not behave exactly like the class scope, as you do not have the class binding. Only methods explicitly marked for delegation are available, and you do not share variables/state with the class scope (read: you have a different &lt;code&gt;self&lt;/code&gt;). You can explicitly add method delegations by calling &lt;code&gt;Sinatra::Delegator.delegate :method_name&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You have the delegate scope binding inside:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The top-level binding, if you did &lt;code&gt;require &#34;sinatra&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An object extended with the &lt;code&gt;Sinatra::Delegator&lt;/code&gt; mixin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have a look at the code for yourself: here&#39;s the &lt;a href=&#34;https://github.com/sinatra/sinatra/raw/ca06364/lib/sinatra/base.rb#L1609-1633&#34;&gt;Sinatra::Delegator mixin&lt;/a&gt; being &lt;a href=&#34;https://github.com/sinatra/sinatra/raw/ca06364/lib/sinatra/main.rb#L28-30&#34;&gt;extending the main object&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra applications can be run directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruby myapp.rb [-h] [-x] [-q] [-e ENVIRONMENT] [-p PORT] [-o HOST] [-s HANDLER]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-h # help&#xA;-p # set the port (default is 4567)&#xA;-o # set the host (default is 0.0.0.0)&#xA;-e # set the environment (default is development)&#xA;-s # specify rack server/handler (default is puma)&#xA;-q # turn on quiet mode for server (default is off)&#xA;-x # turn on the mutex lock (default is off)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multi-threading&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Paraphrasing from &lt;a href=&#34;https://stackoverflow.com/a/6282999/5245129&#34;&gt;this StackOverflow answer&lt;/a&gt; by Konstantin&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sinatra doesn&#39;t impose any concurrency model but leaves that to the underlying Rack handler (server) like Puma or WEBrick. Sinatra itself is thread-safe, so there won&#39;t be any problem if the Rack handler uses a threaded model of concurrency. This would mean that when starting the server, you&#39;d have to specify the correct invocation method for the specific Rack handler. The following example is a demonstration of how to start a multi-threaded Rainbows server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;&#xA;require &#39;sinatra/base&#39;&#xA;&#xA;class App &amp;lt; Sinatra::Base&#xA;  get &#39;/&#39; do&#xA;    &#34;Hello, World&#34;&#xA;  end&#xA;end&#xA;&#xA;run App&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# rainbows.conf&#xA;&#xA;# Rainbows configurator is based on Unicorn.&#xA;Rainbows! do&#xA;  use :ThreadSpawn&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start the server, the command would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rainbows -c rainbows.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirement&lt;/h2&gt; &#xA;&lt;p&gt;The following Ruby versions are officially supported:&lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  Ruby 2.6&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   2.6 is fully supported and recommended. There are currently no plans to drop official support for it. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  Rubinius&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Rubinius is officially supported (Rubinius &amp;gt;= 2.x). It is recommended to &#xA;  &lt;tt&gt;gem install puma&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  JRuby&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   The latest stable release of JRuby is officially supported. It is not recommended to use C extensions with JRuby. It is recommended to &#xA;  &lt;tt&gt;gem install trinidad&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;p&gt;Versions of Ruby before 2.6 are no longer supported as of Sinatra 3.0.0.&lt;/p&gt; &#xA;&lt;p&gt;We also keep an eye on upcoming Ruby versions. Expect upcoming 3.x releases to be fully supported.&lt;/p&gt; &#xA;&lt;p&gt;Sinatra should work on any operating system supported by the chosen Ruby implementation.&lt;/p&gt; &#xA;&lt;p&gt;Running Sinatra on a not officially supported Ruby flavor means that if things only break there we assume it&#39;s not our issue but theirs.&lt;/p&gt; &#xA;&lt;h2&gt;The Bleeding Edge&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to use Sinatra&#39;s latest bleeding-edge code, feel free to run your application against the master branch, it should be rather stable.&lt;/p&gt; &#xA;&lt;p&gt;We also push out prerelease gems from time to time, so you can do a&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install sinatra --pre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to get some of the latest features.&lt;/p&gt; &#xA;&lt;h3&gt;With Bundler&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run your application with the latest Sinatra, using &lt;a href=&#34;https://bundler.io&#34;&gt;Bundler&lt;/a&gt; is the recommended way.&lt;/p&gt; &#xA;&lt;p&gt;First, install bundler, if you haven&#39;t:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in your project directory, create a &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://rubygems.org&#39;&#xA;gem &#39;sinatra&#39;, :github =&amp;gt; &#39;sinatra/sinatra&#39;&#xA;&#xA;# other dependencies&#xA;gem &#39;haml&#39;                    # for instance, if you use haml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you will have to list all your application&#39;s dependencies in the &lt;code&gt;Gemfile&lt;/code&gt;. Sinatra&#39;s direct dependencies (Rack and Tilt) will, however, be automatically fetched and added by Bundler.&lt;/p&gt; &#xA;&lt;p&gt;Now you can run your app like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle exec ruby myapp.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra follows &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;, both SemVer and SemVerTag.&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Project Website&lt;/a&gt; - Additional documentation, news, and links to other resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sinatrarb.com/contributing&#34;&gt;Contributing&lt;/a&gt; - Find a bug? Need help? Have a patch?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sinatra/sinatra/issues&#34;&gt;Issue tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/sinatra&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/sinatrarb&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;a href=&#34;irc://chat.freenode.net/#sinatra&#34;&gt;#sinatra&lt;/a&gt; on &lt;a href=&#34;https://freenode.net&#34;&gt;Freenode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sinatrarb.slack.com&#34;&gt;Sinatra &amp;amp; Friends&lt;/a&gt; on Slack (&lt;a href=&#34;https://sinatra-slack.herokuapp.com/&#34;&gt;get an invite&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sinatra/sinatra-book&#34;&gt;Sinatra Book&lt;/a&gt; - Cookbook Tutorial&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://recipes.sinatrarb.com/&#34;&gt;Sinatra Recipes&lt;/a&gt; - Community contributed recipes&lt;/li&gt; &#xA; &lt;li&gt;API documentation for the &lt;a href=&#34;http://www.rubydoc.info/gems/sinatra&#34;&gt;latest release&lt;/a&gt; or the &lt;a href=&#34;http://www.rubydoc.info/github/sinatra/sinatra&#34;&gt;current HEAD&lt;/a&gt; on &lt;a href=&#34;http://www.rubydoc.info/&#34;&gt;RubyDoc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/sinatra/sinatra&#34;&gt;CI server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>DataDog/dd-trace-rb</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/DataDog/dd-trace-rb</id>
    <link href="https://github.com/DataDog/dd-trace-rb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Datadog Tracing Ruby Client&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Version 1.0.0 has recently been released. Check out our &lt;a href=&#34;https://github.com/DataDog/dd-trace-rb/raw/master/docs/UpgradeGuide.md#from-0x-to-10&#34;&gt;upgrade guide&lt;/a&gt; for more details.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Datadog Trace Client&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/ddtrace/&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/ddtrace&#34; alt=&#34;Gem&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/DataDog/dd-trace-rb/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/DataDog/dd-trace-rb/tree/master.svg?style=svg&amp;amp;circle-token=b0bd5ef866ec7f7b018f48731bb495f2d1372cc1&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/DataDog/dd-trace-rb/branch/master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/DataDog/dd-trace-rb/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.rubydoc.info/gems/ddtrace/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/YARD-documentation-blue&#34; alt=&#34;YARD documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ddtrace&lt;/code&gt; is Datadog’s tracing client for Ruby. It is used to trace requests as they flow across web servers, databases and microservices so that developers have great visiblity into bottlenecks and troublesome requests.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;For a basic product overview, check out our &lt;a href=&#34;https://docs.datadoghq.com/tracing/setup/ruby/&#34;&gt;setup documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For installation, configuration, and details about using the API, check out our &lt;a href=&#34;https://github.com/DataDog/dd-trace-rb/raw/master/docs/GettingStarted.md&#34;&gt;API documentation&lt;/a&gt; and &lt;a href=&#34;http://gems.datadoghq.com/trace/docs/&#34;&gt;gem documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For descriptions of terminology used in APM, take a look at the &lt;a href=&#34;https://docs.datadoghq.com/tracing/visualization/&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For contributing, checkout the &lt;a href=&#34;https://github.com/DataDog/dd-trace-rb/raw/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&#34;https://github.com/DataDog/dd-trace-rb/raw/master/docs/DevelopmentGuide.md&#34;&gt;development guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/linguist</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/github/linguist</id>
    <link href="https://github.com/github/linguist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Language Savant. If your repository&#39;s language is being reported incorrectly, send us a pull request!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linguist&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/github/linguist/actions&#34;&gt;&lt;img src=&#34;https://github.com/github/linguist/workflows/Run%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library is used on GitHub.com to detect blob languages, ignore binary or vendored files, suppress generated files in diffs, and generate language breakdown graphs.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/docs/how-linguist-works.md&#34;&gt;How Linguist works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/docs/overrides.md&#34;&gt;Change Linguist&#39;s behaviour with overrides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/docs/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/CONTRIBUTING.md&#34;&gt;Contributing guidelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install github-linguist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Linguist is a Ruby library so you will need a recent version of Ruby installed. There are known problems with the macOS/XCode supplied version of Ruby that causes problems installing some of the dependencies. Accordingly, we highly recommend you install a version of Ruby using Homebrew, &lt;code&gt;rbenv&lt;/code&gt;, &lt;code&gt;rvm&lt;/code&gt;, &lt;code&gt;ruby-build&lt;/code&gt;, &lt;code&gt;asdf&lt;/code&gt; or other packaging system, before attempting to install Linguist and the dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Linguist uses &lt;a href=&#34;https://github.com/brianmario/charlock_holmes&#34;&gt;&lt;code&gt;charlock_holmes&lt;/code&gt;&lt;/a&gt; for character encoding and &lt;a href=&#34;https://github.com/libgit2/rugged&#34;&gt;&lt;code&gt;rugged&lt;/code&gt;&lt;/a&gt; for libgit2 bindings for Ruby. These components have their own dependencies.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;charlock_holmes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;cmake&lt;/li&gt; &#xA;   &lt;li&gt;pkg-config&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://site.icu-project.org/&#34;&gt;ICU&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://zlib.net/&#34;&gt;zlib&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;rugged &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://curl.haxx.se/libcurl/&#34;&gt;libcurl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.openssl.org&#34;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You may need to install missing dependencies before you can install Linguist. For example, on macOS with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install cmake pkg-config icu4c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install cmake pkg-config libicu-dev zlib1g-dev libcurl4-openssl-dev libssl-dev ruby-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Application usage&lt;/h3&gt; &#xA;&lt;p&gt;Linguist can be used in your application as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rugged&#39;&#xA;require &#39;linguist&#39;&#xA;&#xA;repo = Rugged::Repository.new(&#39;.&#39;)&#xA;project = Linguist::Repository.new(repo, repo.head.target_id)&#xA;project.language       #=&amp;gt; &#34;Ruby&#34;&#xA;project.languages      #=&amp;gt; { &#34;Ruby&#34; =&amp;gt; 119387 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command line usage&lt;/h3&gt; &#xA;&lt;h4&gt;Git Repository&lt;/h4&gt; &#xA;&lt;p&gt;A repository&#39;s languages stats can also be assessed from the command line using the &lt;code&gt;github-linguist&lt;/code&gt; executable. Without any options, &lt;code&gt;github-linguist&lt;/code&gt; will output the language breakdown by percentage and file size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /path-to-repository&#xA;github-linguist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can try running &lt;code&gt;github-linguist&lt;/code&gt; on the root directory in this repository itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-linguist&#xA;66.84%  264519     Ruby&#xA;24.68%  97685      C&#xA;6.57%   25999      Go&#xA;1.29%   5098       Lex&#xA;0.32%   1257       Shell&#xA;0.31%   1212       Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Additional options&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;--breakdown&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;--breakdown&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; flag will additionally show the breakdown of files by language.&lt;/p&gt; &#xA;&lt;p&gt;You can try running &lt;code&gt;github-linguist&lt;/code&gt; on the root directory in this repository itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-linguist --breakdown&#xA;66.84%  264519     Ruby&#xA;24.68%  97685      C&#xA;6.57%   25999      Go&#xA;1.29%   5098       Lex&#xA;0.32%   1257       Shell&#xA;0.31%   1212       Dockerfile&#xA;&#xA;Ruby:&#xA;Gemfile&#xA;Rakefile&#xA;bin/git-linguist&#xA;bin/github-linguist&#xA;ext/linguist/extconf.rb&#xA;github-linguist.gemspec&#xA;lib/linguist.rb&#xA;…&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;--json&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;--json&lt;/code&gt; or &lt;code&gt;-j&lt;/code&gt; flag output the data into JSON format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-linguist --json&#xA;{&#34;Dockerfile&#34;:{&#34;size&#34;:1212,&#34;percentage&#34;:&#34;0.31&#34;},&#34;Ruby&#34;:{&#34;size&#34;:264519,&#34;percentage&#34;:&#34;66.84&#34;},&#34;C&#34;:{&#34;size&#34;:97685,&#34;percentage&#34;:&#34;24.68&#34;},&#34;Lex&#34;:{&#34;size&#34;:5098,&#34;percentage&#34;:&#34;1.29&#34;},&#34;Shell&#34;:{&#34;size&#34;:1257,&#34;percentage&#34;:&#34;0.32&#34;},&#34;Go&#34;:{&#34;size&#34;:25999,&#34;percentage&#34;:&#34;6.57&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option can be used in conjunction with &lt;code&gt;--breakdown&lt;/code&gt; to get a full list of files along with the size and percentage data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-linguist --breakdown --json&#xA;{&#34;Dockerfile&#34;:{&#34;size&#34;:1212,&#34;percentage&#34;:&#34;0.31&#34;,&#34;files&#34;:[&#34;Dockerfile&#34;,&#34;tools/grammars/Dockerfile&#34;]},&#34;Ruby&#34;:{&#34;size&#34;:264519,&#34;percentage&#34;:&#34;66.84&#34;,&#34;files&#34;:[&#34;Gemfile&#34;,&#34;Rakefile&#34;,&#34;bin/git-linguist&#34;,&#34;bin/github-linguist&#34;,&#34;ext/linguist/extconf.rb&#34;,&#34;github-linguist.gemspec&#34;,&#34;lib/linguist.rb&#34;,...]}}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Single file&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively you can find stats for a single file using the &lt;code&gt;github-linguist&lt;/code&gt; executable.&lt;/p&gt; &#xA;&lt;p&gt;You can try running &lt;code&gt;github-linguist&lt;/code&gt; on files in this repository itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ github-linguist grammars.yml&#xA;grammars.yml: 884 lines (884 sloc)&#xA;  type:      Text&#xA;  mime type: text/x-yaml&#xA;  language:  YAML&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;If you have Docker installed you can build an image and run Linguist within a container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker build -t linguist .&#xA;$ docker run --rm -v $(pwd):$(pwd) -w $(pwd) -t linguist&#xA;66.84%  264519     Ruby&#xA;24.68%  97685      C&#xA;6.57%   25999      Go&#xA;1.29%   5098       Lex&#xA;0.32%   1257       Shell&#xA;0.31%   1212       Dockerfile&#xA;$ docker run --rm -v $(pwd):$(pwd) -w $(pwd) -t linguist github-linguist --breakdown&#xA;66.84%  264519     Ruby&#xA;24.68%  97685      C&#xA;6.57%   25999      Go&#xA;1.29%   5098       Lex&#xA;0.32%   1257       Shell&#xA;0.31%   1212       Dockerfile&#xA;&#xA;Ruby:&#xA;Gemfile&#xA;Rakefile&#xA;bin/git-linguist&#xA;bin/github-linguist&#xA;ext/linguist/extconf.rb&#xA;github-linguist.gemspec&#xA;lib/linguist.rb&#xA;…&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please check out our &lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The language grammars included in this gem are covered by their repositories&#39; respective licenses. &lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/vendor/README.md&#34;&gt;&lt;code&gt;vendor/README.md&lt;/code&gt;&lt;/a&gt; lists the repository for each grammar.&lt;/p&gt; &#xA;&lt;p&gt;All other files are covered by the MIT license, see &lt;a href=&#34;https://raw.githubusercontent.com/github/linguist/master/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mperham/sidekiq</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/mperham/sidekiq</id>
    <link href="https://github.com/mperham/sidekiq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, efficient background processing for Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sidekiq&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/sidekiq&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/sidekiq.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/mperham/sidekiq/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple, efficient background processing for Ruby.&lt;/p&gt; &#xA;&lt;p&gt;Sidekiq uses threads to handle many jobs at the same time in the same process. It does not require Rails but will integrate tightly with Rails to make background processing dead simple.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Latency&lt;/th&gt; &#xA;   &lt;th&gt;Garbage created for 10k jobs&lt;/th&gt; &#xA;   &lt;th&gt;Time to process 100k jobs&lt;/th&gt; &#xA;   &lt;th&gt;Throughput&lt;/th&gt; &#xA;   &lt;th&gt;Ruby&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 6.0.2&lt;/td&gt; &#xA;   &lt;td&gt;3 ms&lt;/td&gt; &#xA;   &lt;td&gt;156 MB&lt;/td&gt; &#xA;   &lt;td&gt;14.0 sec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;7100 jobs/sec&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MRI 2.6.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 6.0.0&lt;/td&gt; &#xA;   &lt;td&gt;3 ms&lt;/td&gt; &#xA;   &lt;td&gt;156 MB&lt;/td&gt; &#xA;   &lt;td&gt;19 sec&lt;/td&gt; &#xA;   &lt;td&gt;5200 jobs/sec&lt;/td&gt; &#xA;   &lt;td&gt;MRI 2.6.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 4.0.0&lt;/td&gt; &#xA;   &lt;td&gt;10 ms&lt;/td&gt; &#xA;   &lt;td&gt;151 MB&lt;/td&gt; &#xA;   &lt;td&gt;22 sec&lt;/td&gt; &#xA;   &lt;td&gt;4500 jobs/sec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 3.5.1&lt;/td&gt; &#xA;   &lt;td&gt;22 ms&lt;/td&gt; &#xA;   &lt;td&gt;1257 MB&lt;/td&gt; &#xA;   &lt;td&gt;125 sec&lt;/td&gt; &#xA;   &lt;td&gt;800 jobs/sec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Resque 1.25.2&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;420 sec&lt;/td&gt; &#xA;   &lt;td&gt;240 jobs/sec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DelayedJob 4.1.1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;465 sec&lt;/td&gt; &#xA;   &lt;td&gt;215 jobs/sec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This benchmark can be found in &lt;code&gt;bin/sidekiqload&lt;/code&gt; and assumes a Redis network latency of 1ms.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis: 4.0+&lt;/li&gt; &#xA; &lt;li&gt;Ruby: MRI 2.5+ or JRuby 9.2+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sidekiq 6.0 supports Rails 5.0+ but does not require it.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle add sidekiq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Getting-Started&#34;&gt;Getting Started wiki page&lt;/a&gt; and follow the simple setup process. You can watch &lt;a href=&#34;https://www.youtube.com/playlist?list=PLjeHh2LSCFrWGT5uVjUuFKAcrcj5kSai1&#34;&gt;this YouTube playlist&lt;/a&gt; to learn all about Sidekiq and see its features in action. Here&#39;s the Web UI:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mperham/sidekiq/raw/main/examples/web-ui.png&#34; alt=&#34;Web UI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Want to Upgrade?&lt;/h2&gt; &#xA;&lt;p&gt;I also sell Sidekiq Pro and Sidekiq Enterprise, extensions to Sidekiq which provide more features, a commercial-friendly license and allow you to support high quality open source development all at the same time. Please see the &lt;a href=&#34;https://sidekiq.org/&#34;&gt;Sidekiq&lt;/a&gt; homepage for more detail.&lt;/p&gt; &#xA;&lt;p&gt;Subscribe to the &lt;strong&gt;&lt;a href=&#34;https://tinyletter.com/sidekiq&#34;&gt;quarterly newsletter&lt;/a&gt;&lt;/strong&gt; to stay informed about the latest features and changes to Sidekiq and its bigger siblings.&lt;/p&gt; &#xA;&lt;h2&gt;Problems?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please do not directly email any Sidekiq committers with questions or problems.&lt;/strong&gt; A community is best served when discussions are held in public.&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem, please review the &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt; and &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Problems-and-Troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; wiki pages. Searching the &lt;a href=&#34;https://github.com/mperham/sidekiq/issues&#34;&gt;issues&lt;/a&gt; for your problem is also a good idea.&lt;/p&gt; &#xA;&lt;p&gt;Sidekiq Pro and Sidekiq Enterprise customers get private email support. You can purchase at &lt;a href=&#34;https://sidekiq.org&#34;&gt;https://sidekiq.org&lt;/a&gt;; email &lt;a href=&#34;mailto:support@contribsys.com&#34;&gt;support@contribsys.com&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;p&gt;Useful resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Product documentation is in the &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Occasional announcements are made to the &lt;a href=&#34;https://twitter.com/sidekiq&#34;&gt;@sidekiq&lt;/a&gt; Twitter account.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sidekiq&#34;&gt;Sidekiq tag&lt;/a&gt; on Stack Overflow has lots of useful Q &amp;amp; A.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every Friday morning is Sidekiq happy hour: I video chat and answer questions. See the &lt;a href=&#34;https://sidekiq.org/support.html&#34;&gt;Sidekiq support page&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/mperham/sidekiq/raw/main/.github/contributing.md&#34;&gt;the contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/mperham/sidekiq/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for licensing details.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Mike Perham, &lt;a href=&#34;https://twitter.com/getajobmike&#34;&gt;@getajobmike&lt;/a&gt; / &lt;a href=&#34;https://twitter.com/sidekiq&#34;&gt;@sidekiq&lt;/a&gt;, &lt;a href=&#34;https://www.mikeperham.com&#34;&gt;https://www.mikeperham.com&lt;/a&gt; / &lt;a href=&#34;https://www.contribsys.com&#34;&gt;https://www.contribsys.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>luggit/react-native-config</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/luggit/react-native-config</id>
    <link href="https://github.com/luggit/react-native-config" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bring some 12 factor love to your mobile apps!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Config variables for React Native apps&lt;/h1&gt; &#xA;&lt;p&gt;Module to expose config variables to your javascript code in React Native, supporting iOS, Android and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Bring some &lt;a href=&#34;http://12factor.net/config&#34;&gt;12 factor&lt;/a&gt; love to your mobile apps!&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Create a new file &lt;code&gt;.env&lt;/code&gt; in the root of your React Native app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;API_URL=https://myapi.com&#xA;GOOGLE_MAPS_API_KEY=abcdefgh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then access variables defined there from your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Config from &#34;react-native-config&#34;;&#xA;&#xA;Config.API_URL; // &#39;https://myapi.com&#39;&#xA;Config.GOOGLE_MAPS_API_KEY; // &#39;abcdefgh&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind this module doesn&#39;t obfuscate or encrypt secrets for packaging, so &lt;strong&gt;do not store sensitive keys in &lt;code&gt;.env&lt;/code&gt;&lt;/strong&gt;. It&#39;s &lt;a href=&#34;https://rammic.github.io/2015/07/28/hiding-secrets-in-android-apps/&#34;&gt;basically impossible to prevent users from reverse engineering mobile app secrets&lt;/a&gt;, so design your app (and APIs) with that in mind.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ yarn add react-native-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Link the library:&lt;/p&gt; &#xA;&lt;p&gt;(Note: For React Native 0.60 or greater, &lt;a href=&#34;https://reactnative.dev/blog/2019/07/03/version-60#native-modules-are-now-autolinked&#34;&gt;autolinking&lt;/a&gt; is available)&lt;/p&gt; &#xA;&lt;p&gt;(Note: For Windows, this module supports autolinking when used with &lt;code&gt;react-native-windows@0.63&lt;/code&gt; or later. For earlier versions you need to manually link the module.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ react-native link react-native-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if cocoapods are used in the project then pod has to be installed as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(cd ios; pod install)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Manual Link (iOS)&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;In XCode, in the project navigator, right click &lt;code&gt;Libraries&lt;/code&gt; ➜ &lt;code&gt;Add Files to [your project&#39;s name]&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Go to &lt;code&gt;node_modules&lt;/code&gt; ➜ &lt;code&gt;react-native-config&lt;/code&gt; and add &lt;code&gt;ReactNativeConfig.xcodeproj&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Expand the &lt;code&gt;ReactNativeConfig.xcodeproj&lt;/code&gt; ➜ &lt;code&gt;Products&lt;/code&gt; folder&lt;/li&gt; &#xA;   &lt;li&gt;In the project navigator, select your project. Add &lt;code&gt;libReactNativeConfig.a&lt;/code&gt; to your project&#39;s &lt;code&gt;Build Phases&lt;/code&gt; ➜ &lt;code&gt;Link Binary With Libraries&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;And go the Build Settings tab. Make sure All is toggled on (instead of Basic)&lt;/li&gt; &#xA;   &lt;li&gt;Look for Header Search Paths and add &lt;code&gt;$(SRCROOT)/../node_modules/react-native-config/ios/**&lt;/code&gt; as &lt;code&gt;non-recursive&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Manual Link (Android)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;android/settings.gradle&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+ include &#39;:react-native-config&#39;&#xA;+ project(&#39;:react-native-config&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-config/android&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;android/app/build.gradle&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;dependencies {&#xA;&#x9;implementation &#34;com.facebook.react:react-native:+&#34;  // From node_modules&#xA;+&#x9;implementation project(&#39;:react-native-config&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;MainApplication.java&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+ import com.lugg.ReactNativeConfig.ReactNativeConfigPackage;&#xA;&#xA;@Override&#xA;protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&#xA;&#x9;   return Arrays.asList(&#xA;       &#x9;&#x9;new MainReactPackage()&#xA;+      &#x9;&#x9;new ReactNativeConfigPackage()&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Manual Link (Windows)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;windows/myapp.sln&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add the &lt;code&gt;RNCConfig&lt;/code&gt; project to your solution.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Open the solution in Visual Studio 2019&lt;/li&gt; &#xA;   &lt;li&gt;Right-click Solution icon in Solution Explorer &amp;gt; Add &amp;gt; Existing Project&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;if using &lt;code&gt;react-native-windows@0.62&lt;/code&gt; or later select &lt;code&gt;node_modules\react-native-config\windows\RNCConfig\RNCConfig.vcxproj&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;if using &lt;code&gt;react-native-windows@0.61&lt;/code&gt; select &lt;code&gt;node_modules\react-native-config\windows\RNCConfig61\RNCConfig61.vcxproj&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;windows/myapp/myapp.vcxproj&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add a reference to &lt;code&gt;RNCConfig&lt;/code&gt; to your main application project. From Visual Studio 2019:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Right-click main application project &amp;gt; Add &amp;gt; Reference...&lt;br&gt; Check &lt;code&gt;RNCConfig&lt;/code&gt; from Solution Projects.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;pch.h&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add &lt;code&gt;#include &#34;winrt/RNCConfig.h&#34;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;app.cpp&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add &lt;code&gt;PackageProviders().Append(winrt::RNCConfig::ReactPackageProvider());&lt;/code&gt; before &lt;code&gt;InitializeComponent();&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extra step for Android&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll also need to manually apply a plugin to your app, from &lt;code&gt;android/app/build.gradle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 2nd line, add a new apply:&#xA;apply from: project(&#39;:react-native-config&#39;).projectDir.getPath() + &#34;/dotenv.gradle&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Advanced Android Setup&lt;/h4&gt; &#xA;&lt;p&gt;In &lt;code&gt;android/app/build.gradle&lt;/code&gt;, if you use &lt;code&gt;applicationIdSuffix&lt;/code&gt; or &lt;code&gt;applicationId&lt;/code&gt; that is different from the package name indicated in &lt;code&gt;AndroidManifest.xml&lt;/code&gt; in &lt;code&gt;&amp;lt;manifest package=&#34;...&#34;&amp;gt;&lt;/code&gt; tag, for example, to support different build variants: Add this in &lt;code&gt;android/app/build.gradle&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;defaultConfig {&#xA;    ...&#xA;    resValue &#34;string&#34;, &#34;build_config_package&#34;, &#34;YOUR_PACKAGE_NAME_IN_ANDROIDMANIFEST_XML&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Native Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Config variables set in &lt;code&gt;.env&lt;/code&gt; are available to your Java classes via &lt;code&gt;BuildConfig&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public HttpURLConnection getApiClient() {&#xA;    URL url = new URL(BuildConfig.API_URL);&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also read them from your Gradle configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;defaultConfig {&#xA;    applicationId project.env.get(&#34;APP_ID&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use them to configure libraries in &lt;code&gt;AndroidManifest.xml&lt;/code&gt; and others:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;meta-data&#xA;  android:name=&#34;com.google.android.geo.API_KEY&#34;&#xA;  android:value=&#34;@string/GOOGLE_MAPS_API_KEY&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All variables are strings, so you may need to cast them. For instance, in Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;versionCode project.env.get(&#34;VERSION_CODE&#34;).toInteger()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once again, remember variables stored in &lt;code&gt;.env&lt;/code&gt; are published with your code, so &lt;strong&gt;DO NOT put anything sensitive there like your app &lt;code&gt;signingConfigs&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Read variables declared in &lt;code&gt;.env&lt;/code&gt; from your Obj-C classes like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// import header&#xA;#import &#34;ReactNativeConfig.h&#34;&#xA;&#xA;// then read individual keys like:&#xA;NSString *apiUrl = [ReactNativeConfig envFor:@&#34;API_URL&#34;];&#xA;&#xA;// or just fetch the whole config&#xA;NSDictionary *config = [ReactNativeConfig env];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;You can access variables declared in &lt;code&gt;.env&lt;/code&gt; from C++ in your App project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string api_key = ReactNativeConfig::API_KEY;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, you can access those values in other project by adding reference to the &lt;code&gt;RNCConfig&lt;/code&gt; as described in the manual linking section.&lt;/p&gt; &#xA;&lt;h3&gt;Availability in Build settings and Info.plist&lt;/h3&gt; &#xA;&lt;p&gt;With one extra step environment values can be exposed to &#34;Info.plist&#34; and Build settings in the native project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;click on the file tree and create new file of type XCConfig &lt;img src=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/readme-pics/1.ios_new_file.png&#34; alt=&#34;img&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/readme-pics/2.ios_file_type.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;save it under &lt;code&gt;ios&lt;/code&gt; folder as &#34;Config.xcconfig&#34; with the following content:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include? &#34;tmp.xcconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;add the following to your &#34;.gitignore&#34;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# react-native-config codegen&#xA;ios/tmp.xcconfig&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;go to project settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;apply config to your configurations &lt;img src=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/readme-pics/3.ios_apply_config.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;em&gt;Edit scheme...&lt;/em&gt; -&amp;gt; &lt;em&gt;Build&lt;/em&gt; -&amp;gt; &lt;em&gt;Pre-actions&lt;/em&gt;, click &lt;em&gt;+&lt;/em&gt; and select &lt;em&gt;New Run Script Action&lt;/em&gt;. Paste below code which will generate &#34;tmp.xcconfig&#34; before each build exposing values to Build Settings and Info.plist. Make sure to select your target under &lt;em&gt;Provide build settings from&lt;/em&gt;, so &lt;code&gt;$SRCROOT&lt;/code&gt; environment variables is available to the script. (Note that this snippet has to be placed after &#34;cp ... ${PROJECT_DIR}/../.env&#34; if &lt;a href=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/#ios-multi-scheme&#34;&gt;approach explained below&lt;/a&gt; is used).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;${SRCROOT}/../node_modules/react-native-config/ios/ReactNativeConfig/BuildXCConfig.rb&#34; &#34;${SRCROOT}/..&#34; &#34;${SRCROOT}/tmp.xcconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/readme-pics/4.ios_pre_actions.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can now access your env variables in the Info.plist, for example &lt;code&gt;$(MY_ENV_VARIABLE)&lt;/code&gt;. If you face issues accessing variables, please open a new issue and provide as much details as possible so above steps can be improved.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;App Extensions&lt;/h4&gt; &#xA;&lt;p&gt;Add dependency to &lt;code&gt;react-native-config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target &#39;ShareExtension&#39; do&#xA;  platform :ios, &#39;9.0&#39;&#xA;&#xA;  pod &#39;react-native-config&#39;, :path =&amp;gt; &#39;../node_modules/react-native-config&#39;&#xA;&#xA;  # For extensions without React dependencies&#xA;  pod &#39;react-native-config/Extension&#39;, :path =&amp;gt; &#39;../node_modules/react-native-config&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Different environments&lt;/h3&gt; &#xA;&lt;p&gt;Save config for different environments in different files: &lt;code&gt;.env.staging&lt;/code&gt;, &lt;code&gt;.env.production&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;By default react-native-config will read from &lt;code&gt;.env&lt;/code&gt;, but you can change it when building or releasing your app.&lt;/p&gt; &#xA;&lt;p&gt;The simplest approach is to tell it what file to read with an environment variable, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ENVFILE=.env.staging react-native run-ios           # bash&#xA;$ SET ENVFILE=.env.staging &amp;amp;&amp;amp; react-native run-ios    # windows&#xA;$ env:ENVFILE=&#34;.env.staging&#34;; react-native run-ios    # powershell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also works for &lt;code&gt;run-android&lt;/code&gt;. Alternatively, there are platform-specific options below.&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;The same environment variable can be used to assemble releases with a different config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd android &amp;amp;&amp;amp; ENVFILE=.env.staging ./gradlew assembleRelease&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can define a map in &lt;code&gt;build.gradle&lt;/code&gt; associating builds with env files. Do it before the &lt;code&gt;apply from&lt;/code&gt; call, and use build cases in lowercase, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;project.ext.envConfigFiles = [&#xA;    debug: &#34;.env.development&#34;,&#xA;    release: &#34;.env.production&#34;,&#xA;    anothercustombuild: &#34;.env&#34;,&#xA;]&#xA;&#xA;apply from: project(&#39;:react-native-config&#39;).projectDir.getPath() + &#34;/dotenv.gradle&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also note that besides requiring lowercase, the matching is done with &lt;code&gt;buildFlavor.startsWith&lt;/code&gt;, so a build named &lt;code&gt;debugProd&lt;/code&gt; could match the &lt;code&gt;debug&lt;/code&gt; case, above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;ios-multi-scheme&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;The basic idea in iOS is to have one scheme per environment file, so you can easily alternate between them.&lt;/p&gt; &#xA;&lt;p&gt;Start by creating a new scheme:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the Xcode menu, go to Product &amp;gt; Scheme &amp;gt; Edit Scheme&lt;/li&gt; &#xA; &lt;li&gt;Click Duplicate Scheme on the bottom&lt;/li&gt; &#xA; &lt;li&gt;Give it a proper name on the top left. For instance: &#34;Myapp (staging)&#34;&lt;/li&gt; &#xA; &lt;li&gt;Make sure the &#34;Shared&#34; checkbox is checked so the scheme is added to your version control system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then edit the newly created scheme to make it use a different env file. From the same &#34;manage scheme&#34; window:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expand the &#34;Build&#34; settings on left&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Pre-actions&#34;, and under the plus sign select &#34;New Run Script Action&#34;&lt;/li&gt; &#xA; &lt;li&gt;Where it says &#34;Type a script or drag a script file&#34;, type: &lt;pre&gt;&lt;code&gt;cp &#34;${PROJECT_DIR}/../.env.staging&#34; &#34;${PROJECT_DIR}/../.env&#34;  # replace .env.staging for your file&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also ensure that &#34;Provide build settings from&#34;, just above the script, has a value selected so that PROJECT_DIR is set.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you have separated build configurations, you may easily set the different envfiles per configuration by adding these lines into the end of Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ENVFILES = {&#xA;  &#39;Debug&#39; =&amp;gt; &#39;$(PODS_ROOT)/../../.env.debug&#39;,&#xA;  &#39;Release&#39; =&amp;gt; &#39;$(PODS_ROOT)/../../.env.production&#39;,&#xA;}&#xA;post_install do |installer|&#xA;  installer.pods_project.targets.each do |target|&#xA;    target.build_configurations.each do |config|&#xA;      if target.name == &#39;react-native-config&#39;&#xA;        config.build_settings[&#39;ENVFILE&#39;] = ENVFILES[config.name]&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you have flipper enabled in your Podfile, you must move the &lt;code&gt;flipper_post_install&lt;/code&gt; into the newely added hook since Podfile doesn&#39;t allow multiple &lt;code&gt;post_install&lt;/code&gt; hooks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  target &#39;MyApp&#39; do&#xA;    # ...&#xA;    use_flipper!&#xA;-   post_install do |installer|&#xA;-     flipper_post_install(installer)&#xA;-   end&#xA;  end&#xA;&#xA;  post_install do |installer|&#xA;+   flipper_post_install(installer)&#xA;&#xA;    installer.pods_project.targets.each do |target|&#xA;      target.build_configurations.each do |config|&#xA;        if target.name == &#39;react-native-config&#39;&#xA;          config.build_settings[&#39;ENVFILE&#39;] = ENVFILES[config.name]&#xA;        end&#xA;      end&#xA;    end&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Problems with Proguard&lt;/h3&gt; &#xA;&lt;p&gt;When Proguard is enabled (which it is by default for Android release builds), it can rename the &lt;code&gt;BuildConfig&lt;/code&gt; Java class in the minification process and prevent React Native Config from referencing it. To avoid this, add an exception to &lt;code&gt;android/app/proguard-rules.pro&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keep class com.mypackage.BuildConfig { *; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;com.mypackage&lt;/code&gt; should match the &lt;code&gt;package&lt;/code&gt; value in your &lt;code&gt;app/src/main/AndroidManifest.xml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If using Dexguard, the shrinking phase will remove resources it thinks are unused. It is necessary to add an exception to preserve the build config package name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keepresources string/build_config_package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TypeError: _reactNativeConfig.default.getConstants is not a function&lt;/h3&gt; &#xA;&lt;p&gt;This error stems from &lt;code&gt;.env&lt;/code&gt; file being malformed. Accepted formats are listed here &lt;a href=&#34;https://regex101.com/r/cbm5Tp/1&#34;&gt;https://regex101.com/r/cbm5Tp/1&lt;/a&gt;. Common causes are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Missing the .env file entirely&lt;/li&gt; &#xA; &lt;li&gt;Rogue space anywhere, example: in front of env variable: &lt;code&gt; MY_ENV=&#39;foo&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Since &lt;code&gt;react-native-config&lt;/code&gt; contains native code, it cannot be run in a node.js environment (Jest, Mocha). &lt;a href=&#34;https://github.com/CureApp/react-native-config-node&#34;&gt;react-native-config-node&lt;/a&gt; provides a way to mock &lt;code&gt;react-native-config&lt;/code&gt; for use in test runners - exactly as it is used in the actual app.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, &lt;a href=&#34;https://raw.githubusercontent.com/luggit/react-native-config/master/example/&#34;&gt;the Example app&lt;/a&gt; supports running automatic tests by using &lt;a href=&#34;https://github.com/microsoft/WinAppDriver&#34;&gt;WinAppDriver&lt;/a&gt;. In the Example app folder run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;yarn appium&#xA;yarn test:windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jest&lt;/h3&gt; &#xA;&lt;p&gt;For mocking the &lt;code&gt;Config.FOO_BAR&lt;/code&gt; usage, create a mock at &lt;code&gt;__mocks__/react-native-config.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// __mocks__/react-native-config.js&#xA;export default {&#xA;  FOO_BAR: &#39;baz&#39;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Meta&lt;/h2&gt; &#xA;&lt;p&gt;Created by Pedro Belo at &lt;a href=&#34;https://lugg.com/&#34;&gt;Lugg&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/shipit-engine</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/Shopify/shipit-engine</id>
    <link href="https://github.com/Shopify/shipit-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deployment coordination&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shipit - Documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Shopify/shipit-engine&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Shopify/shipit-engine.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/rb/shipit-engine&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/shipit-engine.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shipit&lt;/strong&gt; is a deployment tool that makes shipping code better for everyone. It&#39;s especially great for large teams of developers and designers who work together to build and deploy GitHub repos. You can use it to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add new applications to your deployment environment without having to change core configuration files repeatedly — &lt;code&gt;shipit.yml&lt;/code&gt; is basically plug and play&lt;/li&gt; &#xA; &lt;li&gt;control the pace of development by pushing, locking, and rolling back deploys from within Shipit&lt;/li&gt; &#xA; &lt;li&gt;enforce checklists and provide monitoring right at the point of deployment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Shipit is compatible with just about anything that you can deploy using a script. It natively detects stacks using &lt;a href=&#34;http://bundler.io/&#34;&gt;bundler&lt;/a&gt; and &lt;a href=&#34;http://capistranorb.com/&#34;&gt;Capistrano&lt;/a&gt;, and it has tools that make it easy to deploy to &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt; or &lt;a href=&#34;https://rubygems.org/&#34;&gt;RubyGems&lt;/a&gt;. At Shopify, we&#39;ve used Shipit to synchronize and deploy hundreds of projects across dozens of teams, using Python, Rails, RubyGems, Java, and Go.&lt;/p&gt; &#xA;&lt;p&gt;This guide aims to help you &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#installation-and-setup&#34;&gt;set up&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#using-shipit&#34;&gt;use&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#reference&#34;&gt;understand&lt;/a&gt; Shipit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Shipit requires a database (MySQL, PostgreSQL or SQLite3), redis, and Ruby 2.6 or superior.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 id=&#34;toc&#34;&gt;Table of contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;I. INSTALLATION &amp;amp; SETUP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#updating-shipit&#34;&gt;Updating an existing installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;II. USING SHIPIT&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#adding-stacks&#34;&gt;Adding stacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#working-on-stacks&#34;&gt;Working on stacks&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#configuring-stacks&#34;&gt;Configuring stacks&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;III. REFERENCE&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#configuring-shipit&#34;&gt;Format and content of shipit.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#script-parameters&#34;&gt;Script parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#configuring-providers&#34;&gt;Configuring providers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/examples/shipit.yml&#34;&gt;Free samples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;IV. INTEGRATING&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#integrating-webhooks&#34;&gt;Registering webhooks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;V. CONTRIBUTING&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#contributing-instructions&#34;&gt;Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#contributing-local-dev&#34;&gt;Local development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 id=&#34;installation-and-setup&#34;&gt;I. INSTALLATION &amp;amp; SETUP&lt;/h2&gt; &#xA;&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To create a new Shipit installation you can follow the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/docs/setup.md&#34;&gt;setup guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3 id=&#34;updating-shipit&#34;&gt;Updating an existing installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you locked the gem to a specific version in your Gemfile, update it there.&lt;/li&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;shipit-engine&lt;/code&gt; gem with &lt;code&gt;bundle update shipit-engine&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install new migrations with &lt;code&gt;rake shipit:install:migrations db:migrate&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3 id=&#34;special-update&#34;&gt;Specific updates requiring more steps&lt;/h3&gt; &#xA;&lt;p&gt;If you are upgrading from &lt;code&gt;0.21&lt;/code&gt; or older, you will have to update the configuration. Please follow &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/docs/updates/0.22.md&#34;&gt;the dedicated upgrade guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 id=&#34;using-shipit&#34;&gt;II. USING SHIPIT&lt;/h2&gt; &#xA;&lt;p&gt;The main workflows in Shipit are &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#adding-stacks&#34;&gt;adding stacks&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#working-on-stacks&#34;&gt;working on stacks&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#configuring-stacks&#34;&gt;configuring stacks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;stack&lt;/strong&gt; is composed of a GitHub repository, a branch, and a deployment environment. Shipit tracks the commits made to the branch, and then displays them in the stack overview. From there, you can deploy the branch to whatever environment you&#39;ve chosen (some typical environments include &lt;em&gt;production&lt;/em&gt;, &lt;em&gt;staging&lt;/em&gt;, &lt;em&gt;performance&lt;/em&gt;, etc.).&lt;/p&gt; &#xA;&lt;h3 id=&#34;adding-stacks&#34;&gt;Add a new stack&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the main page in Shipit, click &lt;strong&gt;Add a stack&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On the &lt;strong&gt;Create a stack&lt;/strong&gt; page, enter the required information: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Repo&lt;/li&gt; &#xA;   &lt;li&gt;Branch&lt;/li&gt; &#xA;   &lt;li&gt;Environment&lt;/li&gt; &#xA;   &lt;li&gt;Deploy URL&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;When you&#39;re finished, click &lt;strong&gt;Create stack&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3 id=&#34;working-on-stacks&#34;&gt;Work on an existing stack&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you want to browse the list of available stacks, click &lt;strong&gt;Show all stacks&lt;/strong&gt; on the main page in Shipit. If you know the name of the stack you&#39;re looking for, enter it in the search field.&lt;/li&gt; &#xA; &lt;li&gt;Click the name of the stack you want to open.&lt;/li&gt; &#xA; &lt;li&gt;From a stack&#39;s overview page, you can: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;review previous deploys&lt;/li&gt; &#xA;   &lt;li&gt;deploy any undeployed commits by clicking &lt;strong&gt;Deploy&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;rollback to an earlier build by clicking &lt;strong&gt;Rollback to this deploy&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;adjust the stack&#39;s settings by clicking the gear icon in the page header&lt;/li&gt; &#xA;   &lt;li&gt;perform any custom tasks that are defined in the &lt;code&gt;shipit.yml&lt;/code&gt; file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;When you&#39;re ready to deploy an undeployed commit, click the relevant &lt;strong&gt;Deploy&lt;/strong&gt; button on the stack&#39;s overview page.&lt;/li&gt; &#xA; &lt;li&gt;From the &lt;strong&gt;Deploy&lt;/strong&gt; page, complete the checklist, then click &lt;strong&gt;Create deploy&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3 id=&#34;configuring-stacks&#34;&gt;Edit stack settings&lt;/h3&gt; &#xA;&lt;p&gt;To edit a stack&#39;s settings, open the stack in Shipit, then click the gear icon in the page header.&lt;/p&gt; &#xA;&lt;p&gt;From a stack&#39;s &lt;strong&gt;Settings&lt;/strong&gt; page, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;change the deploy URL&lt;/li&gt; &#xA; &lt;li&gt;enable and disable continuous deployment&lt;/li&gt; &#xA; &lt;li&gt;lock and unlock deploys through Shipit&lt;/li&gt; &#xA; &lt;li&gt;resynchronize the stack with GitHub&lt;/li&gt; &#xA; &lt;li&gt;delete the stack from Shipit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 id=&#34;reference&#34;&gt;III. REFERENCE&lt;/h2&gt; &#xA;&lt;h3 id=&#34;configuring-shipit&#34;&gt;Configuring &lt;code&gt;shipit.yml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The settings in the &lt;code&gt;shipit.yml&lt;/code&gt; file relate to the different things you can do with Shipit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#installing-dependencies&#34;&gt;Installing Dependencies&lt;/a&gt; (&lt;code&gt;dependencies&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#deployment&#34;&gt;Deployment&lt;/a&gt; (&lt;code&gt;deploy&lt;/code&gt;, &lt;code&gt;rollback&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#environment&#34;&gt;Environment&lt;/a&gt; (&lt;code&gt;machine.environment&lt;/code&gt;, &lt;code&gt;machine.directory&lt;/code&gt;, &lt;code&gt;machine.cleanup&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#ci&#34;&gt;CI&lt;/a&gt; (&lt;code&gt;ci.require&lt;/code&gt;, &lt;code&gt;ci.hide&lt;/code&gt;, &lt;code&gt;ci.allow_failures&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#merge-queue&#34;&gt;Merge Queue&lt;/a&gt; (&lt;code&gt;merge.revalidate_after&lt;/code&gt;, &lt;code&gt;merge.require&lt;/code&gt;, &lt;code&gt;merge.ignore&lt;/code&gt;, &lt;code&gt;merge.max_divergence&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#custom-tasks&#34;&gt;Custom Tasks&lt;/a&gt; (&lt;code&gt;tasks&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#custom-links&#34;&gt;Custom links&lt;/a&gt; (&lt;code&gt;links&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#review-process&#34;&gt;Review Process&lt;/a&gt; (&lt;code&gt;review.checklist&lt;/code&gt;, &lt;code&gt;review.monitoring&lt;/code&gt;, &lt;code&gt;review.checks&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the settings in &lt;code&gt;shipit.yml&lt;/code&gt; are optional. Most applications can be deployed from Shipit without any configuration.&lt;/p&gt; &#xA;&lt;p&gt;Also, if your repository is deployed different ways depending on the environment, you can have an alternative &lt;code&gt;shipit.yml&lt;/code&gt; by including the environment name.&lt;/p&gt; &#xA;&lt;p&gt;For example for a stack like: &lt;code&gt;my-org/my-repo/staging&lt;/code&gt;, &lt;code&gt;shipit.staging.yml&lt;/code&gt; will have priority over &lt;code&gt;shipit.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, if you override the &lt;code&gt;app_name&lt;/code&gt; configuration in your Shipit deployment, &lt;code&gt;yourapp.yml&lt;/code&gt; and &lt;code&gt;yourapp.staging.yml&lt;/code&gt; will work.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3 id=&#34;respecting-bare-files&#34;&gt;Respecting bare &lt;code&gt;shipit.yml&lt;/code&gt; files&lt;/h3&gt; &#xA;&lt;p&gt;Shipit will, by default, respect the &#34;bare&#34; &lt;code&gt;shipit.yml&lt;/code&gt; file as a fallback option if no more specifically-named file exists (such as &lt;code&gt;shipit.staging.yml&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can configure this behavior via the attribute &lt;code&gt;Shipit.respect_bare_shipit_file&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The value &lt;code&gt;false&lt;/code&gt; will disable this behavior and instead cause Shipit to emit an error upon deploy if Shipit cannot find a more specifically-named file.&lt;/li&gt; &#xA; &lt;li&gt;Setting this attribute to any other value (&lt;strong&gt;including &lt;code&gt;nil&lt;/code&gt;&lt;/strong&gt;), or not setting this attribute, will cause Shipit to use the default behavior of respecting bare &lt;code&gt;shipit.yml&lt;/code&gt; files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can determine if Shipit is configured to respect bare files using &lt;code&gt;Shipit.respect_bare_shipit_file?&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3 id=&#34;installing-dependencies&#34;&gt;Installing dependencies&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;dependencies&lt;/code&gt;&lt;/strong&gt; step allows you to install all the packages your deploy script needs.&lt;/p&gt; &#xA;&lt;h4 id=&#34;bundler-support&#34;&gt;Bundler&lt;/h4&gt; &#xA;&lt;p&gt;If your application uses Bundler, Shipit will detect it automatically and take care of the &lt;code&gt;bundle install&lt;/code&gt; and prefix your commands with &lt;code&gt;bundle exec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, the following gem groups will be ignored:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;production&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;development&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;staging&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;benchmark&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The gems you need in order to deploy should be in a different group, such as &lt;code&gt;deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dependencies:&#xA;  bundler:&#xA;    without:&#xA;      - development&#xA;      - test&#xA;      - debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4 id=&#34;other-dependencies&#34;&gt;Other dependencies&lt;/h4&gt; &#xA;&lt;p&gt;If your deploy script uses another tool to install dependencies, you can install them manually via &lt;code&gt;dependencies.override&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dependencies:&#xA;  override:&#xA;    - npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;dependencies.pre&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands before Shipit installs the dependencies, you can specify them here.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dependencies:&#xA;  pre:&#xA;    - mkdir tmp/&#xA;    - cp -R /var/cache/ tmp/cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;dependencies.post&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands after Shipit installed the dependencies, you can specify them here:&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dependencies:&#xA;  post:&#xA;    - cp -R tmp/cache /var/cache/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;deploy&lt;/code&gt; and &lt;code&gt;rollback&lt;/code&gt; sections are the core of Shipit:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.override&lt;/code&gt;&lt;/strong&gt; contains an array of the shell commands required to deploy the application. Shipit will try to infer it from the repository structure, but you can change the default inference.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;deploy:&#xA;  override:&#xA;    - ./script/deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.pre&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands before Shipit executes your deploy script, you can specify them here.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;deploy:&#xA;  pre:&#xA;    - ./script/notify_deploy_start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.post&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands after Shipit executed your deploy script, you can specify them here.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;deploy:&#xA;  post:&#xA;    - ./script/notify_deploy_end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;You can also accept custom environment variables defined by the user that triggers the deploy:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.variables&lt;/code&gt;&lt;/strong&gt; contains an array of variable definitions.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:&#xA;  variables:&#xA;    -&#xA;      name: RUN_MIGRATIONS&#xA;      title: Run database migrations on deploy&#xA;      default: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.variables.select&lt;/code&gt;&lt;/strong&gt; will turn the input into a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; of values.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:&#xA;  variables:&#xA;    -&#xA;      name: REGION&#xA;      title: Run a deploy in a given region&#xA;      select:&#xA;        - east&#xA;        - west&#xA;        - north&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.max_commits&lt;/code&gt;&lt;/strong&gt; defines the maximum number of commits that should be shipped per deploy. Defaults to &lt;code&gt;8&lt;/code&gt; if no value is provided.&lt;/p&gt; &#xA;&lt;p&gt;To disable this limit, you can use use an explicit null value: &lt;code&gt;max_commits: null&lt;/code&gt;. Continuous Delivery will then deploy any number of commits.&lt;/p&gt; &#xA;&lt;p&gt;Human users will be warned that they are not respecting the recommendation, but allowed to continue. However continuous delivery will respect this limit. If there is no deployable commits in this range, a human intervention will be required.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:&#xA;  max_commits: 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.interval&lt;/code&gt;&lt;/strong&gt; defines the interval between the end of a deploy and the next deploy, when continuous delivery is enabled. You can use s, m, h, d as units for seconds, minutes, hours, and days. Defaults to 0, which means a new deploy will start as soon as the current one finishes.&lt;/p&gt; &#xA;&lt;p&gt;For example, this will wait 5 minutes after the end of a deploy before starting a new one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:&#xA;  interval: 5m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.retries&lt;/code&gt;&lt;/strong&gt; enables retries for a stack, and defines the maximum amount of times that Shipit will retry a deploy that finished with a &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;timedout&lt;/code&gt; status.&lt;/p&gt; &#xA;&lt;p&gt;For example, this will retry a deploy twice if it fails.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:&#xA;  retries: 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;rollback.override&lt;/code&gt;&lt;/strong&gt; contains an array of the shell commands required to rollback the application to a previous state. Shipit will try to infer it from the repository structure, but you can change the default inference. This key defaults to &lt;code&gt;disabled&lt;/code&gt; unless Capistrano is detected.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;rollback:&#xA;  override:&#xA;    - ./script/rollback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;rollback.pre&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands before Shipit executes your rollback script, you can specify them here:&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;rollback:&#xA;  pre:&#xA;    - ./script/notify_rollback_start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;rollback.post&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands after Shipit executed your rollback script, you can specify them here:&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;rollback:&#xA;  post:&#xA;    - ./script/notify_rollback_end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/strong&gt; contains an array of the shell commands that Shipit executes to check the revision of the currently-deployed version. This key defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;fetch:&#xA;  curl --silent https://app.example.com/services/ping/version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;kubernetes&lt;/code&gt;&lt;/strong&gt; allows to specify a Kubernetes namespace and context to deploy to.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;kubernetes:&#xA;  namespace: my-app-production&#xA;  context: tier4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;kubernetes.template_dir&lt;/code&gt;&lt;/strong&gt; allows to specify a Kubernetes template directory. It defaults to &lt;code&gt;./config/deploy/$ENVIRONMENT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3 id=&#34;environment&#34;&gt;Environment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;machine.environment&lt;/code&gt;&lt;/strong&gt; contains the extra environment variables that you want to provide during task execution.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;machine:&#xA;  environment:&#xA;    key: val # things added as environment variables&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;directory&#34;&gt;Directory&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;machine.directory&lt;/code&gt;&lt;/strong&gt; specifies a subfolder in which to execute all tasks. Useful for repositories containing multiple applications or if you don&#39;t want your deploy scripts to be located at the root.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;machine:&#xA;  directory: scripts/deploy/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;cleanup&#34;&gt;Cleanup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;machine.cleanup&lt;/code&gt;&lt;/strong&gt; specifies whether or not the deploy working directory should be cleaned up once the deploy completed. Defaults to &lt;code&gt;true&lt;/code&gt;, but can be useful to disable temporarily to investigate bugs.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;machine:&#xA;  cleanup: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;ci&#34;&gt;CI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ci.require&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; you want Shipit to disallow deploys if any of them is missing on the commit being deployed.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;ci:&#xA;  require:&#xA;    - ci/circleci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ci.hide&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; you want Shipit to ignore.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;ci:&#xA;  hide:&#xA;    - ci/circleci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ci.allow_failures&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; you want to be visible but not to required for deploy.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;ci:&#xA;  allow_failures:&#xA;    - ci/circleci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ci.blocking&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; you want to disallow deploys if any of them is missing or failing on any of the commits being deployed.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;ci:&#xA;  blocking:&#xA;    - soc/compliance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;merge-queue&#34;&gt;Merge Queue&lt;/h3&gt; &#xA;&lt;p&gt;The merge queue allows developers to register pull requests which will be merged by Shipit once the stack is clear (no lock, no failing CI, no backlog). It can be enabled on a per stack basis via the settings page.&lt;/p&gt; &#xA;&lt;p&gt;It can be customized via several &lt;code&gt;shipit.yml&lt;/code&gt; properties:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.revalidate_after&lt;/code&gt;&lt;/strong&gt; a duration after which pull requests that couldn&#39;t be merged are rejected from the queue. Defaults to unlimited.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  revalidate_after: 12m30s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.require&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; that you want Shipit to consider as failing if they aren&#39;t present on the pull request. Defaults to &lt;code&gt;ci.require&lt;/code&gt; if present, or empty otherwise.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  require:&#xA;    - continuous-integration/travis-ci/push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.ignore&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; that you want Shipit not to consider when merging pull requests. Defaults to the union of &lt;code&gt;ci.allow_failures&lt;/code&gt; and &lt;code&gt;ci.hide&lt;/code&gt; if any is present or empty otherwise.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  ignore:&#xA;    - codeclimate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.method&lt;/code&gt;&lt;/strong&gt; the &lt;a href=&#34;https://docs.github.com/en/rest/reference/pulls#merge-a-pull-request--parameters&#34;&gt;merge method&lt;/a&gt; to use for this stack. If it&#39;s not set the default merge method will be used. Can be either &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;squash&lt;/code&gt; or &lt;code&gt;rebase&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  method: squash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.max_divergence.commits&lt;/code&gt;&lt;/strong&gt; the maximum number of commits a pull request can be behind its merge base, after which pull requests are rejected from the merge queue.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  max_divergence:&#xA;    commits: 50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.max_divergence.age&lt;/code&gt;&lt;/strong&gt; a duration after the commit date of the merge base, after which pull requests will be rejected from the merge queue.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  max_divergence:&#xA;    age: 72h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;custom-tasks&#34;&gt;Custom tasks&lt;/h3&gt; &#xA;&lt;p&gt;You can create custom tasks that users execute directly from a stack&#39;s overview page in Shipit. To create a new custom task, specify its parameters in the &lt;code&gt;tasks&lt;/code&gt; section of the &lt;code&gt;shipit.yml&lt;/code&gt; file. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;tasks.restart&lt;/code&gt;&lt;/strong&gt; restarts the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;tasks:&#xA;  restart:&#xA;    action: &#34;Restart Application&#34;&#xA;    description: &#34;Sometimes needed if you want the application to restart but don&#39;t want to ship any new code.&#34;&#xA;    steps:&#xA;      - ssh deploy@myserver.example.com &#39;touch myapp/restart.txt&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, custom tasks are not allowed to be triggered while a deploy is running. But if it&#39;s safe for that specific task, you can change that behavior with the &lt;code&gt;allow_concurrency&lt;/code&gt; attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;tasks:&#xA;  flush_cache:&#xA;    action: &#34;Flush Cache&#34;&#xA;    steps:&#xA;      - ssh deploy@myserver.example.com &#39;myapp/flush_cache.sh&#39;&#xA;    allow_concurrency: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tasks like deploys can prompt for user defined environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;tasks:&#xA;  restart:&#xA;    action: &#34;Restart Application&#34;&#xA;    description: &#34;Sometimes needed if you want the application to restart but don&#39;t want to ship any new code.&#34;&#xA;    steps:&#xA;      - ssh deploy@myserver.example.com &#39;touch myapp/restart.txt&#39;&#xA;    variables:&#xA;      -&#xA;        name: FORCE&#xA;        title: Restart server without waiting for in-flight requests to complete (Dangerous).&#xA;        default: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also make these variables appear in the task title:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;tasks:&#xA;  failover:&#xA;    action: &#34;Failover a pod&#34;&#xA;    title: &#34;Failover Pod %{POD_ID}&#34;&#xA;    steps:&#xA;      - script/failover $POD_ID&#xA;    variables:&#xA;      - name: POD_ID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;custom-links&#34;&gt;Custom Links&lt;/h3&gt; &#xA;&lt;p&gt;You can add custom links to the header of a stacks overview page in Shipit. To create a new custom link, specify its parameters in the links section of the shipit.yml file. The link title is a humanized version of the key. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;links.monitoring_dashboard&lt;/code&gt;&lt;/strong&gt; creates a link in the header of of the page titled &#34;Monitoring dashboard&#34;&lt;/p&gt; &#xA;&lt;p&gt;You can specify multiple custom links:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;links:&#xA;  monitoring_dashboard: https://example.com/monitoring.html&#xA;  other_link: https://example.com/something_else.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;review-process&#34;&gt;Review process&lt;/h3&gt; &#xA;&lt;p&gt;You can display review elements, such as monitoring data or a pre-deployment checklist, on the deployment page in Shipit:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;review.checklist&lt;/code&gt;&lt;/strong&gt; contains a pre-deploy checklist that appears on the deployment page in Shipit, with each item in the checklist as a separate string in the array. It can contain &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; HTML tags. Users cannot deploy from Shipit until they have checked each item in the checklist.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;review:&#xA;  checklist:&#xA;    - &amp;gt;&#xA;      Do you know if it is safe to revert the code being shipped? What happens if we need to undo this deploy?&#xA;    - Has the Docs team been notified of any major changes to the app?&#xA;    - Is the app stable right now?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;review.monitoring&lt;/code&gt;&lt;/strong&gt; contains a list of inclusions that appear on the deployment page in Shipit. Inclusions can either be images or iframes.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;review:&#xA;  monitoring:&#xA;    - image: https://example.com/monitoring.png&#xA;    - iframe: https://example.com/monitoring.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;review.checks&lt;/code&gt;&lt;/strong&gt; contains a list of commands that will be executed during the pre-deploy review step. Their output appears on the deployment page in Shipit, and if continuous delivery is enabled, deploys will only be triggered if those commands are successful.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;review:&#xA;  checks:&#xA;    - bundle exec rake db:migrate:status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;shell-commands-timeout&#34;&gt;Shell commands timeout&lt;/h3&gt; &#xA;&lt;p&gt;All the shell commands can take an optional &lt;code&gt;timeout&lt;/code&gt; parameter to limit their duration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;deploy:&#xA;  override:&#xA;    - ./script/deploy:&#xA;        timeout: 30&#xA;  post:&#xA;    - ./script/notify_deploy_end: { timeout: 15 }&#xA;review:&#xA;  checks:&#xA;    - bundle exec rake db:migrate:status:&#xA;        timeout: 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;code&gt;commands_inactivity_timeout&lt;/code&gt; in &lt;code&gt;secrets.yml&lt;/code&gt; for a global timeout setting.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 id=&#34;script-parameters&#34;&gt;Script parameters&lt;/h2&gt; &#xA;&lt;p&gt;Your deploy scripts have access to the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SHIPIT&lt;/code&gt;: Set to &lt;code&gt;1&lt;/code&gt; to allow your script to know it&#39;s executed by Shipit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHIPIT_LINK&lt;/code&gt;: URL to the task output, useful to broadcast it in an IRC channel&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHIPIT_USER&lt;/code&gt;: Full name of the user that triggered the deploy/task&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GITHUB_REPO_NAME&lt;/code&gt;: Name of the GitHub repository being used for the current deploy/task.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GITHUB_REPO_OWNER&lt;/code&gt;: The GitHub username of the repository owner for the current deploy/task.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EMAIL&lt;/code&gt;: Email of the user that triggered the deploy/task (if available)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ENVIRONMENT&lt;/code&gt;: The stack environment (e.g &lt;code&gt;production&lt;/code&gt; / &lt;code&gt;staging&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BRANCH&lt;/code&gt;: The stack branch (e.g &lt;code&gt;master&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LAST_DEPLOYED_SHA&lt;/code&gt;: The git SHA of the last deployed commit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIFF_LINK&lt;/code&gt;: URL to the diff on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TASK_ID&lt;/code&gt;: ID of the task that is running&lt;/li&gt; &#xA; &lt;li&gt;All the content of the &lt;code&gt;secrets.yml&lt;/code&gt; &lt;code&gt;env&lt;/code&gt; key&lt;/li&gt; &#xA; &lt;li&gt;All the content of the &lt;code&gt;shipit.yml&lt;/code&gt; &lt;code&gt;machine.environment&lt;/code&gt; key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These variables are accessible only during deploys and rollback:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;REVISION&lt;/code&gt;: the git SHA of the revision that must be deployed in production&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHA&lt;/code&gt;: alias for REVISION&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 id=&#34;configuring-providers&#34;&gt;Configuring providers&lt;/h2&gt; &#xA;&lt;h3&gt;Heroku&lt;/h3&gt; &#xA;&lt;p&gt;To use Heroku integration (&lt;code&gt;lib/snippets/push-to-heroku&lt;/code&gt;), make sure that the environment has &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli&#34;&gt;Heroku CLI&lt;/a&gt; available.&lt;/p&gt; &#xA;&lt;h3&gt;Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;For Kubernetes, you have to provision Shipit environment with the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubernetes-deploy&lt;/code&gt; &lt;a href=&#34;https://github.com/Shopify/kubernetes-deploy&#34;&gt;gem&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 id=&#34;integrating&#34;&gt;IV. INTEGRATING&lt;/h2&gt; &#xA;&lt;h3 id=&#34;integrating-webhooks&#34;&gt;Registering webhooks&lt;/h3&gt; &#xA;&lt;p&gt;Shipit handles several webhook types by default, listed in &lt;code&gt;Shipit::Wehbooks::DEFAULT_HANDLERS&lt;/code&gt;, in order to implement default behaviours. Extra handler blocks can be registered via &lt;code&gt;Shipit::Webhooks.register_handler&lt;/code&gt;. Valid handlers need only implement the &lt;code&gt;call&lt;/code&gt; method - meaning any object which implements &lt;code&gt;call&lt;/code&gt; - blocks, procs, or lambdas are valid. The webhooks controller will pass a &lt;code&gt;params&lt;/code&gt; argument to the handler. Some examples:&lt;/p&gt; &#xA;&lt;h4&gt;Registering a Plain old Ruby Object as a handler&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PullRequestHandler&#xA;  def call(params)&#xA;    # do something with pull request webhook events&#xA;  end&#xA;end&#xA;&#xA;Shipit::Webhooks.register_handler(&#39;pull_request&#39;, PullRequestHandler)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Registering a Block as a handler&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Shipit::Webhooks.register_handler(&#39;pull_request&#39;) do |params|&#xA;  # do something with pull request webhook events&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple handler blocks can be registered. If any raise errors, execution will be halted and the request will be reported failed to github.&lt;/p&gt; &#xA;&lt;h2 id=&#34;contributing&#34;&gt;V. CONTRIBUTING&lt;/h2&gt; &#xA;&lt;h3 id=&#34;contributing-instructions&#34;&gt;Instructions&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it ( &lt;a href=&#34;https://github.com/shopify/shipit-engine/fork&#34;&gt;https://github.com/shopify/shipit-engine/fork&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (git checkout -b my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (git commit -am &#39;Add some feature&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (git push origin my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Create a new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3 id=&#34;contributing-local-dev&#34;&gt;Local development&lt;/h3&gt; &#xA;&lt;p&gt;This repository has a &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/test/dummy&#34;&gt;test/dummy&lt;/a&gt; app in it which can be used for local development without having to setup a new rails application.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;./bin/bootstrap&lt;/code&gt; in order to bootstrap the dummy application. The bootstrap script is going to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;config/secrets.development.example.yml&lt;/code&gt; to &lt;code&gt;config/secrets.development.yml&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Make sure all dependencies are installed;&lt;/li&gt; &#xA; &lt;li&gt;Create and seed database (recreate database if already available);&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run &lt;code&gt;./test/dummy/bin/rails server&lt;/code&gt; to run the rails dummy application.&lt;/p&gt; &#xA;&lt;p&gt;Set the environment variable &lt;code&gt;SHIPIT_DISABLE_AUTH=1&lt;/code&gt; in order to disable authentication.&lt;/p&gt; &#xA;&lt;p&gt;If you need to test caching behaviour in the dummy application, use &lt;code&gt;bin/rails dev:cache&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chatwoot/chatwoot</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/chatwoot/chatwoot</id>
    <link href="https://github.com/chatwoot/chatwoot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source customer engagement suite, an alternative to Intercom, Zendesk, Salesforce Service Cloud etc. 🔥💬&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://s3.us-west-2.amazonaws.com/gh-assets.chatwoot.com/brand.svg?sanitize=true&#34; alt=&#34;Woot-logo&#34; width=&#34;240&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;Customer engagement suite, an open-source alternative to Intercom, Zendesk, Salesforce Service Cloud etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&#34; alt=&#34;Deploy to Heroku&#34;&gt; &lt;img width=&#34;150&#34; alt=&#34;Deploy&#34; src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt; &lt;img width=&#34;200&#34; alt=&#34;Deploy to DO&#34; src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://codeclimate.com/github/chatwoot/chatwoot/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/80f9e1a7c72d186289ad/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/circleci/build/github/chatwoot/chatwoot&#34; alt=&#34;CircleCI Badge&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/chatwoot/chatwoot/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/chatwoot/chatwoot&#34; alt=&#34;Docker Pull Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/chatwoot/chatwoot/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/chatwoot/chatwoot&#34; alt=&#34;Docker Build Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/chatwoot/chatwoot&#34; alt=&#34;Commits-per-month&#34;&gt; &lt;a title=&#34;Crowdin&#34; target=&#34;_self&#34; href=&#34;https://chatwoot.crowdin.com/chatwoot&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/e/37ced7eba411064bd792feb3b7a28b16/localized.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/cJXdrwS&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/647412545203994635&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huntr.dev/bounties/disclose&#34;&gt;&lt;img src=&#34;https://cdn.huntr.dev/huntr_security_badge_mono.svg?sanitize=true&#34; alt=&#34;Huntr&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://status.chatwoot.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fuptime.json&#34; alt=&#34;uptime&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://status.chatwoot.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fchatwoot%2Fstatus%2Fmaster%2Fapi%2Fchatwoot%2Fresponse-time.json&#34; alt=&#34;response time&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;img src=&#34;https://chatwoot-public-assets.s3.amazonaws.com/github/screenshot.png&#34; width=&#34;100%&#34; alt=&#34;Chat dashboard&#34;&gt; &#xA;&lt;p&gt;Chatwoot is an open-source, self-hosted customer engagement suite. Chatwoot lets you view and manage your customer data, communicate with them irrespective of which medium they use, and re-engage them based on their profile.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Chatwoot supports the following conversation channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: Talk to your customers using our live chat widget and make use of our SDK to identify a user and provide contextual support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Facebook&lt;/strong&gt;: Connect your Facebook pages and start replying to the direct messages to your page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instagram&lt;/strong&gt;: Connect your Instagram profile and start replying to the direct messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: Connect your Twitter profiles and reply to direct messages or the tweets where you are mentioned.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Telegram&lt;/strong&gt;: Connect your Telegram bot and reply to your customers right from a single dashboard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WhatsApp&lt;/strong&gt;: Connect your WhatsApp business account and manage the conversation in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Line&lt;/strong&gt;: Connect your Line account and manage the conversations in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SMS&lt;/strong&gt;: Connect your Twilio SMS account and reply to the SMS queries in Chatwoot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Channel&lt;/strong&gt;: Build custom communication channels using our API channel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt;: Forward all your email queries to Chatwoot and view it in our integrated dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And more.&lt;/p&gt; &#xA;&lt;p&gt;Other features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CRM&lt;/strong&gt;: Save all your customer information right inside Chatwoot, use contact notes to log emails, phone calls, or meeting notes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom Attributes&lt;/strong&gt;: Define custom attribute attributes to store information about a contact or a conversation and extend the product to match your workflow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shared multi-brand inboxes&lt;/strong&gt;: Manage multiple brands or pages using a shared inbox.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Private notes&lt;/strong&gt;: Use @mentions and private notes to communicate internally about a conversation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Canned responses (Saved replies)&lt;/strong&gt;: Improve the response rate by adding saved replies for frequently asked questions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversation Labels&lt;/strong&gt;: Use conversation labels to create custom workflows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto assignment&lt;/strong&gt;: Chatwoot intelligently assigns a ticket to the agents who have access to the inbox depending on their availability and load.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversation continuity&lt;/strong&gt;: If the user has provided an email address through the chat widget, Chatwoot will send an email to the customer under the agent name so that the user can continue the conversation over the email.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-lingual support&lt;/strong&gt;: Chatwoot supports 10+ languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful API &amp;amp; Webhooks&lt;/strong&gt;: Extend the capability of the software using Chatwoot’s webhooks and APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt;: Chatwoot natively integrates with Slack right now. Manage your conversations in Slack without logging into the dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation is available at &lt;a href=&#34;https://www.chatwoot.com/help-center&#34;&gt;chatwoot.com/help-center&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translation process&lt;/h2&gt; &#xA;&lt;p&gt;The translation process for Chatwoot web and mobile app is managed at &lt;a href=&#34;https://translate.chatwoot.com&#34;&gt;https://translate.chatwoot.com&lt;/a&gt; using Crowdin. Please read the &lt;a href=&#34;https://www.chatwoot.com/docs/contributing/translating-chatwoot-to-your-language&#34;&gt;translation guide&lt;/a&gt; for contributing to Chatwoot.&lt;/p&gt; &#xA;&lt;h2&gt;Branching model&lt;/h2&gt; &#xA;&lt;p&gt;We use the &lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;git-flow&lt;/a&gt; branching model. The base branch is &lt;code&gt;develop&lt;/code&gt;. If you are looking for a stable version, please use the &lt;code&gt;master&lt;/code&gt; or tags labelled as &lt;code&gt;v1.x.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;h3&gt;Heroku one-click deploy&lt;/h3&gt; &#xA;&lt;p&gt;Deploying Chatwoot to Heroku is a breeze. It&#39;s as simple as clicking this button:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/chatwoot/chatwoot/tree/master&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow this &lt;a href=&#34;https://www.chatwoot.com/docs/environment-variables&#34;&gt;link&lt;/a&gt; to understand setting the correct environment variables for the app to work with all the features. There might be breakages if you do not set the relevant environment variables.&lt;/p&gt; &#xA;&lt;h3&gt;DigitalOcean 1-Click Kubernetes deployment&lt;/h3&gt; &#xA;&lt;p&gt;Chatwoot now supports 1-Click deployment to DigitalOcean as a kubernetes app.&lt;/p&gt; &#xA;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/chatwoot?refcode=f2238426a2a8&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt; &lt;img width=&#34;200&#34; alt=&#34;Deploy to DO&#34; src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Other deployment options&lt;/h3&gt; &#xA;&lt;p&gt;For other supported options, checkout our &lt;a href=&#34;https://chatwoot.com/deploy&#34;&gt;deployment page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Looking to report a vulnerability? Please refer our &lt;a href=&#34;https://raw.githubusercontent.com/chatwoot/chatwoot/develop/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Community? Questions? Support ?&lt;/h2&gt; &#xA;&lt;p&gt;If you need help or just want to hang out, come, say hi on our &lt;a href=&#34;https://discord.gg/cJXdrwS&#34;&gt;Discord&lt;/a&gt; server.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to all these &lt;a href=&#34;https://www.chatwoot.com/docs/contributors&#34;&gt;wonderful people&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chatwoot/chatwoot/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/chatwoot/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Chatwoot&lt;/em&gt; © 2017-2022, Chatwoot Inc - Released under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>postalserver/postal</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/postalserver/postal</id>
    <link href="https://github.com/postalserver/postal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;✉️ A fully featured open source mail delivery platform for incoming &amp; outgoing e-mail&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://share.adam.ac/21/logo-g3hWemROTemCYbWlmL.svg?sanitize=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Postal&lt;/strong&gt; is a complete and fully featured mail server for use by websites &amp;amp; web servers. Think Sendgrid, Mailgun or Postmark but open source and ready for you to run on your own servers. Postal is developed by &lt;a href=&#34;https://k.io&#34;&gt;Krystal&lt;/a&gt; to serve its own mail processing requirements and we have since decided that it should be released as an open source project for the community.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://share.adam.ac/17/k4lA5OuPlU2.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.postalserver.io&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.postalserver.io/install/prerequisites&#34;&gt;Installation Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.postalserver.io/welcome/faqs&#34;&gt;FAQs&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://docs.postalserver.io/welcome/feature-list&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postalserver/postal/discussions&#34;&gt;Ask for help&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>github/choosealicense.com</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/github/choosealicense.com</id>
    <link href="https://github.com/github/choosealicense.com" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A site to provide non-judgmental guidance on choosing a license for your open source project&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://choosealicense.com&#34;&gt;ChooseALicense.com&lt;/a&gt;&lt;/strong&gt; aims to provide &lt;strong&gt;accurate&lt;/strong&gt;, &lt;strong&gt;non-judgmental&lt;/strong&gt;, and &lt;strong&gt;understandable&lt;/strong&gt; information about popular &lt;strong&gt;open source licenses&lt;/strong&gt; in order to &lt;strong&gt;help people make informed decisions&lt;/strong&gt; about the projects they start, maintain, contribute to, and use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/github/choosealicense.com/actions?query=workflow%3ABuild%20and%20Test&#34;&gt;&lt;img src=&#34;https://github.com/github/choosealicense.com/workflows/Build%20and%20Test/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We catalog &lt;a href=&#34;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/CONTRIBUTING.md#adding-a-license&#34;&gt;select&lt;/a&gt; open source licenses with a &lt;a href=&#34;https://jekyllrb.com/docs/collections/&#34;&gt;Jekyll collection&lt;/a&gt; (in &lt;code&gt;_licenses&lt;/code&gt;). The catalog is used to render &lt;a href=&#34;https://choosealicense.com&#34;&gt;ChooseALicense.com&lt;/a&gt; and is regularly vendored into &lt;a href=&#34;https://github.com/licensee/licensee&#34;&gt;Licensee&lt;/a&gt;, which GitHub uses to provide a &lt;a href=&#34;https://help.github.com/articles/adding-a-license-to-a-repository/&#34;&gt;license chooser and license detection&lt;/a&gt;, a &lt;a href=&#34;https://developer.github.com/v3/licenses/&#34;&gt;licenses API&lt;/a&gt;, and to &lt;a href=&#34;https://github.com/blog/2335-open-source-license-descriptions-and-metadata&#34;&gt;display license descriptions and metadata&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be accurate, non-judgmental, and understandable. Our goal is to help you find a license that meets &lt;em&gt;your&lt;/em&gt; goals.&lt;/li&gt; &#xA; &lt;li&gt;The homepage should have just enough to help most folks make a decision about what license to use for a project they contribute to.&lt;/li&gt; &#xA; &lt;li&gt;For the rest, the site will contain additional information about licenses common to specific communities and situations.&lt;/li&gt; &#xA; &lt;li&gt;Collaborate with and reinforce other licensing best practices and standards projects.&lt;/li&gt; &#xA; &lt;li&gt;Not comprehensive. Seems like an odd goal, but there are a bajillion licenses out there. We&#39;re going to have to filter that down to a small list of those that matter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Run it on your machine&lt;/h2&gt; &#xA;&lt;h3&gt;Managing Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;It may be the case that your system doesn&#39;t have the required dependencies. You will need &lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; installed on your computer.&lt;/p&gt; &#xA;&lt;p&gt;For MacOS, use Homebrew to update your dependencies (install Homebrew from &lt;a href=&#34;https://brew.sh/&#34;&gt;https://brew.sh/&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install make cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Linux/Ubuntu, use the &lt;code&gt;apt-get&lt;/code&gt; tool to install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install make cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing and Running the tool&lt;/h3&gt; &#xA;&lt;p&gt;Note that the third command (&lt;code&gt;./script/bootstrap&lt;/code&gt;) may require you to use &lt;code&gt;sudo&lt;/code&gt; access for installation. Add &lt;code&gt;sudo&lt;/code&gt; right before the third command, if need be, but don&#39;t use root access.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/github/choosealicense.com.git&#xA;cd choosealicense.com&#xA;./script/bootstrap&#xA;./script/server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;code&gt;http://localhost:4000&lt;/code&gt; in your favorite browser.&lt;/p&gt; &#xA;&lt;h2&gt;Adding a license&lt;/h2&gt; &#xA;&lt;p&gt;For information on adding a license, see &lt;a href=&#34;https://github.com/github/choosealicense.com/raw/gh-pages/CONTRIBUTING.md#adding-a-license&#34;&gt;the CONTRIBUTING file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License metadata&lt;/h2&gt; &#xA;&lt;p&gt;Licenses sit in the &lt;code&gt;/_licenses&lt;/code&gt; folder. Each license has YAML front matter describing the license&#39;s properties. The body of the file contains the text of the license in plain text. The available metadata fields are:&lt;/p&gt; &#xA;&lt;h4&gt;Required fields&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;title&lt;/code&gt; - The license full name specified by &lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;https://spdx.org/licenses/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spdx-id&lt;/code&gt; - Short identifier specified by &lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;https://spdx.org/licenses/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt; - A human-readable description of the license&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;how&lt;/code&gt; - Instructions on how to implement the license&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;using&lt;/code&gt; - A map of 3 notable projects using the license with straightforward LICENSE files which serve as examples newcomers can follow and that can be detected by &lt;a href=&#34;https://github.com/licensee/licensee&#34;&gt;licensee&lt;/a&gt; in the form of &lt;code&gt;project_name: license_file_url&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;permissions&lt;/code&gt; - Bulleted list of permission rules&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;conditions&lt;/code&gt; - Bulleted list of condition rules&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;limitations&lt;/code&gt; - Bulleted list of limitation rules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Optional fields&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;featured&lt;/code&gt; - Whether the license should be featured on the main page (defaults to false)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hidden&lt;/code&gt; - Whether the license is neither &lt;a href=&#34;https://opensource.org/licenses&#34;&gt;popular&lt;/a&gt; nor fills out the &lt;a href=&#34;https://choosealicense.com/licenses/&#34;&gt;spectrum of licenses&lt;/a&gt; from strongly conditional to unconditional (defaults to true)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nickname&lt;/code&gt; - Customary short name if applicable (e.g, GPLv3)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;note&lt;/code&gt; - Additional information about the licenses&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;redirect_from&lt;/code&gt; - Relative path(s) to redirect to the license from, to prevent breaking old URLs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Auto-populated fields&lt;/h3&gt; &#xA;&lt;p&gt;The licenses on choosealicense.com are regularly imported to GitHub.com to be used as the list of licenses available when creating a repository. When we create a repository, we will replace certain strings in the license with variables from the repository. These can be used to create accurate copyright notices. The available variables are:&lt;/p&gt; &#xA;&lt;h4&gt;Fields&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fullname&lt;/code&gt; - The full name or username of the repository owner&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;login&lt;/code&gt; - The repository owner&#39;s username&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;email&lt;/code&gt; - The repository owner&#39;s primary email address&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;project&lt;/code&gt; - The repository name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt; - The description of the repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;year&lt;/code&gt; - The current year&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projecturl&lt;/code&gt; - The repository URL or other project website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License properties&lt;/h2&gt; &#xA;&lt;p&gt;The license properties (rules) are stored as a bulleted list within the licenses YAML front matter. Each rule has a name e.g., &lt;code&gt;include-copyright&lt;/code&gt;, a human-readable label, e.g., &lt;code&gt;Copyright inclusion&lt;/code&gt;, and a description &lt;code&gt;Include the original copyright with the code&lt;/code&gt;. To add a new rule, simply add it to &lt;code&gt;_data/rules.yml&lt;/code&gt; and reference it in the appropriate license.&lt;/p&gt; &#xA;&lt;h3&gt;Rules&lt;/h3&gt; &#xA;&lt;h4&gt;Permissions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;commercial-use&lt;/code&gt; - This software and derivatives may be used for commercial purposes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;modifications&lt;/code&gt; - This software may be modified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;distribution&lt;/code&gt; - This software may be distributed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;private-use&lt;/code&gt; - This software may be used and modified in private.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;patent-use&lt;/code&gt; - This license provides an express grant of patent rights from contributors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Conditions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;include-copyright&lt;/code&gt; - A copy of the license and copyright notice must be included with the software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;include-copyright--source&lt;/code&gt; - A copy of the license and copyright notice must be included with the software in source form, but is not required for binaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;document-changes&lt;/code&gt; - Changes made to the code must be documented.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disclose-source&lt;/code&gt; - Source code must be made available when the software is distributed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;network-use-disclose&lt;/code&gt; - Users who interact with the software via network are given the right to receive a copy of the source code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;same-license&lt;/code&gt; - Modifications must be released under the same license when distributing the software. In some cases a similar or related license may be used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;same-license--file&lt;/code&gt; - Modifications of existing files must be released under the same license when distributing the software. In some cases a similar or related license may be used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;same-license--library&lt;/code&gt; - Modifications must be released under the same license when distributing the software. In some cases a similar or related license may be used, or this condition may not apply to works that use the software as a library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Limitations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;trademark-use&lt;/code&gt; - This license explicitly states that it does NOT grant trademark rights, even though licenses without such a statement probably do not grant any implicit trademark rights.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;liability&lt;/code&gt; - This license includes a limitation of liability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;patent-use&lt;/code&gt; - This license explicitly states that it does NOT grant any rights in the patents of contributors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;warranty&lt;/code&gt; - The license explicitly states that it does NOT provide any warranty.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The content of this project itself is licensed under the &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons Attribution 3.0 Unported license&lt;/a&gt;, and the underlying source code used to format and display that content is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/github/choosealicense.com/gh-pages/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/scientist</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/github/scientist</id>
    <link href="https://github.com/github/scientist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔬 A Ruby library for carefully refactoring critical paths.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scientist!&lt;/h1&gt; &#xA;&lt;p&gt;A Ruby library for carefully refactoring critical paths. &lt;a href=&#34;https://travis-ci.org/github/scientist&#34;&gt;&lt;img src=&#34;https://travis-ci.org/github/scientist.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/github/scientist?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/github/scientist/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How do I science?&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s pretend you&#39;re changing the way you handle permissions in a large web app. Tests can help guide your refactoring, but you really want to compare the current and refactored behaviors under load.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;scientist&#34;&#xA;&#xA;class MyWidget&#xA;  def allows?(user)&#xA;    experiment = Scientist::Default.new &#34;widget-permissions&#34;&#xA;    experiment.use { model.check_user?(user).valid? } # old way&#xA;    experiment.try { user.can?(:read, model) } # new way&#xA;&#xA;    experiment.run&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wrap a &lt;code&gt;use&lt;/code&gt; block around the code&#39;s original behavior, and wrap &lt;code&gt;try&lt;/code&gt; around the new behavior. &lt;code&gt;experiment.run&lt;/code&gt; will always return whatever the &lt;code&gt;use&lt;/code&gt; block returns, but it does a bunch of stuff behind the scenes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It decides whether or not to run the &lt;code&gt;try&lt;/code&gt; block,&lt;/li&gt; &#xA; &lt;li&gt;Randomizes the order in which &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;try&lt;/code&gt; blocks are run,&lt;/li&gt; &#xA; &lt;li&gt;Measures the durations of all behaviors in seconds,&lt;/li&gt; &#xA; &lt;li&gt;Compares the result of &lt;code&gt;try&lt;/code&gt; to the result of &lt;code&gt;use&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Swallow and record exceptions raised in the &lt;code&gt;try&lt;/code&gt; block when overriding &lt;code&gt;raised&lt;/code&gt;, and&lt;/li&gt; &#xA; &lt;li&gt;Publishes all this information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;use&lt;/code&gt; block is called the &lt;strong&gt;control&lt;/strong&gt;. The &lt;code&gt;try&lt;/code&gt; block is called the &lt;strong&gt;candidate&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Creating an experiment is wordy, but when you include the &lt;code&gt;Scientist&lt;/code&gt; module, the &lt;code&gt;science&lt;/code&gt; helper will instantiate an experiment and call &lt;code&gt;run&lt;/code&gt; for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;scientist&#34;&#xA;&#xA;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def allows?(user)&#xA;    science &#34;widget-permissions&#34; do |experiment|&#xA;      experiment.use { model.check_user(user).valid? } # old way&#xA;      experiment.try { user.can?(:read, model) } # new way&#xA;    end # returns the control value&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t declare any &lt;code&gt;try&lt;/code&gt; blocks, none of the Scientist machinery is invoked and the control value is always returned.&lt;/p&gt; &#xA;&lt;h2&gt;Making science useful&lt;/h2&gt; &#xA;&lt;p&gt;The examples above will run, but they&#39;re not really &lt;em&gt;doing&lt;/em&gt; anything. The &lt;code&gt;try&lt;/code&gt; blocks don&#39;t run yet and none of the results get published. Replace the default experiment implementation to control execution and reporting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;scientist/experiment&#34;&#xA;&#xA;class MyExperiment&#xA;  include Scientist::Experiment&#xA;&#xA;  attr_accessor :name&#xA;&#xA;  def initialize(name)&#xA;    @name = name&#xA;  end&#xA;&#xA;  def enabled?&#xA;    # see &#34;Ramping up experiments&#34; below&#xA;    true&#xA;  end&#xA;&#xA;  def raised(operation, error)&#xA;    # see &#34;In a Scientist callback&#34; below&#xA;    p &#34;Operation &#39;#{operation}&#39; failed with error &#39;#{error.inspect}&#39;&#34;&#xA;    super # will re-raise&#xA;  end&#xA;&#xA;  def publish(result)&#xA;    # see &#34;Publishing results&#34; below&#xA;    p result&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;Scientist::Experiment&lt;/code&gt; is included in a class, it automatically sets it as the default implementation via &lt;code&gt;Scientist::Experiment.set_default&lt;/code&gt;. This &lt;code&gt;set_default&lt;/code&gt; call is skipped if you include &lt;code&gt;Scientist::Experiment&lt;/code&gt; in a module.&lt;/p&gt; &#xA;&lt;p&gt;Now calls to the &lt;code&gt;science&lt;/code&gt; helper will load instances of &lt;code&gt;MyExperiment&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Controlling comparison&lt;/h3&gt; &#xA;&lt;p&gt;Scientist compares control and candidate values using &lt;code&gt;==&lt;/code&gt;. To override this behavior, use &lt;code&gt;compare&lt;/code&gt; to define how to compare observed values instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def users&#xA;    science &#34;users&#34; do |e|&#xA;      e.use { User.all }         # returns User instances&#xA;      e.try { UserService.list } # returns UserService::User instances&#xA;&#xA;      e.compare do |control, candidate|&#xA;        control.map(&amp;amp;:login) == candidate.map(&amp;amp;:login)&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If either the control block or candidate block raises an error, Scientist compares the two observations&#39; classes and messages using &lt;code&gt;==&lt;/code&gt;. To override this behavior, use &lt;code&gt;compare_error&lt;/code&gt; to define how to compare observed errors instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def slug_from_login(login)&#xA;    science &#34;slug_from_login&#34; do |e|&#xA;      e.use { User.slug_from_login login }         # returns String instance or ArgumentError&#xA;      e.try { UserService.slug_from_login login }  # returns String instance or ArgumentError&#xA;&#xA;      compare_error_message_and_class = -&amp;gt; (control, candidate) do&#xA;        control.class == candidate.class &amp;amp;&amp;amp; &#xA;        control.message == candidate.message&#xA;      end&#xA;&#xA;      compare_argument_errors = -&amp;gt; (control, candidate) do&#xA;        control.class == ArgumentError &amp;amp;&amp;amp;&#xA;        candidate.class == ArgumentError &amp;amp;&amp;amp;&#xA;        control.message.start_with?(&#34;Input has invalid characters&#34;) &amp;amp;&amp;amp;&#xA;        candidate.message.start_with?(&#34;Invalid characters in input&#34;) &#xA;      end&#xA;&#xA;      e.compare_error do |control, candidate|&#xA;        compare_error_message_and_class.call(control, candidate) ||&#xA;        compare_argument_errors.call(control, candidate)&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding context&lt;/h3&gt; &#xA;&lt;p&gt;Results aren&#39;t very useful without some way to identify them. Use the &lt;code&gt;context&lt;/code&gt; method to add to or retrieve the context for an experiment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;science &#34;widget-permissions&#34; do |e|&#xA;  e.context :user =&amp;gt; user&#xA;&#xA;  e.use { model.check_user(user).valid? }&#xA;  e.try { user.can?(:read, model) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;context&lt;/code&gt; takes a Symbol-keyed Hash of extra data. The data is available in &lt;code&gt;Experiment#publish&lt;/code&gt; via the &lt;code&gt;context&lt;/code&gt; method. If you&#39;re using the &lt;code&gt;science&lt;/code&gt; helper a lot in a class, you can provide a default context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def allows?(user)&#xA;    science &#34;widget-permissions&#34; do |e|&#xA;      e.context :user =&amp;gt; user&#xA;&#xA;      e.use { model.check_user(user).valid? }&#xA;      e.try { user.can?(:read, model) }&#xA;    end&#xA;  end&#xA;&#xA;  def destroy&#xA;    science &#34;widget-destruction&#34; do |e|&#xA;      e.use { old_scary_destroy }&#xA;      e.try { new_safe_destroy }&#xA;    end&#xA;  end&#xA;&#xA;  def default_scientist_context&#xA;    { :widget =&amp;gt; self }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;widget-permissions&lt;/code&gt; and &lt;code&gt;widget-destruction&lt;/code&gt; experiments will both have a &lt;code&gt;:widget&lt;/code&gt; key in their contexts.&lt;/p&gt; &#xA;&lt;h3&gt;Expensive setup&lt;/h3&gt; &#xA;&lt;p&gt;If an experiment requires expensive setup that should only occur when the experiment is going to be run, define it with the &lt;code&gt;before_run&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Code under test modifies this in-place. We want to copy it for the&#xA;# candidate code, but only when needed:&#xA;value_for_original_code = big_object&#xA;value_for_new_code      = nil&#xA;&#xA;science &#34;expensive-but-worthwhile&#34; do |e|&#xA;  e.before_run do&#xA;    value_for_new_code = big_object.deep_copy&#xA;  end&#xA;  e.use { original_code(value_for_original_code) }&#xA;  e.try { new_code(value_for_new_code) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keeping it clean&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you don&#39;t want to store the full value for later analysis. For example, an experiment may return &lt;code&gt;User&lt;/code&gt; instances, but when researching a mismatch, all you care about is the logins. You can define how to clean these values in an experiment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def users&#xA;    science &#34;users&#34; do |e|&#xA;      e.use { User.all }&#xA;      e.try { UserService.list }&#xA;&#xA;      e.clean do |value|&#xA;        value.map(&amp;amp;:login).sort&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this cleaned value is available in observations in the final published result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyExperiment&#xA;  include Scientist::Experiment&#xA;&#xA;  # ...&#xA;&#xA;  def publish(result)&#xA;    result.control.value         # [&amp;lt;User alice&amp;gt;, &amp;lt;User bob&amp;gt;, &amp;lt;User carol&amp;gt;]&#xA;    result.control.cleaned_value # [&#34;alice&#34;, &#34;bob&#34;, &#34;carol&#34;]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;#clean&lt;/code&gt; method will discard the previous cleaner block if you call it again. If for some reason you need to access the currently configured cleaner block, &lt;code&gt;Scientist::Experiment#cleaner&lt;/code&gt; will return the block without further ado. &lt;em&gt;(This probably won&#39;t come up in normal usage, but comes in handy if you&#39;re writing, say, a custom experiment runner that provides default cleaners.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Ignoring mismatches&lt;/h3&gt; &#xA;&lt;p&gt;During the early stages of an experiment, it&#39;s possible that some of your code will always generate a mismatch for reasons you know and understand but haven&#39;t yet fixed. Instead of these known cases always showing up as mismatches in your metrics or analysis, you can tell an experiment whether or not to ignore a mismatch using the &lt;code&gt;ignore&lt;/code&gt; method. You may include more than one block if needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def admin?(user)&#xA;  science &#34;widget-permissions&#34; do |e|&#xA;    e.use { model.check_user(user).admin? }&#xA;    e.try { user.can?(:admin, model) }&#xA;&#xA;    e.ignore { user.staff? } # user is staff, always an admin in the new system&#xA;    e.ignore do |control, candidate|&#xA;      # new system doesn&#39;t handle unconfirmed users yet:&#xA;      control &amp;amp;&amp;amp; !candidate &amp;amp;&amp;amp; !user.confirmed_email?&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ignore blocks are only called if the &lt;em&gt;values&lt;/em&gt; don&#39;t match. Unless a &lt;code&gt;compare_error&lt;/code&gt; comparator is defined, two cases are considered mismatches: a) one observation raising an exception and the other not, b) observations raising exceptions with different classes or messages.&lt;/p&gt; &#xA;&lt;h3&gt;Enabling/disabling experiments&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you don&#39;t want an experiment to run. Say, disabling a new codepath for anyone who isn&#39;t staff. You can disable an experiment by setting a &lt;code&gt;run_if&lt;/code&gt; block. If this returns &lt;code&gt;false&lt;/code&gt;, the experiment will merely return the control value. Otherwise, it defers to the experiment&#39;s configured &lt;code&gt;enabled?&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class DashboardController&#xA;  include Scientist&#xA;&#xA;  def dashboard_items&#xA;    science &#34;dashboard-items&#34; do |e|&#xA;      # only run this experiment for staff members&#xA;      e.run_if { current_user.staff? }&#xA;      # ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ramping up experiments&lt;/h3&gt; &#xA;&lt;p&gt;As a scientist, you know it&#39;s always important to be able to turn your experiment off, lest it run amok and result in villagers with pitchforks on your doorstep. In order to control whether or not an experiment is enabled, you must include the &lt;code&gt;enabled?&lt;/code&gt; method in your &lt;code&gt;Scientist::Experiment&lt;/code&gt; implementation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyExperiment&#xA;  include Scientist::Experiment&#xA;&#xA;  attr_accessor :name, :percent_enabled&#xA;&#xA;  def initialize(name)&#xA;    @name = name&#xA;    @percent_enabled = 100&#xA;  end&#xA;&#xA;  def enabled?&#xA;    percent_enabled &amp;gt; 0 &amp;amp;&amp;amp; rand(100) &amp;lt; percent_enabled&#xA;  end&#xA;&#xA;  # ...&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code will be invoked for every method with an experiment every time, so be sensitive about its performance. For example, you can store an experiment in the database but wrap it in various levels of caching such as memcache or per-request thread-locals.&lt;/p&gt; &#xA;&lt;h3&gt;Publishing results&lt;/h3&gt; &#xA;&lt;p&gt;What good is science if you can&#39;t publish your results?&lt;/p&gt; &#xA;&lt;p&gt;You must implement the &lt;code&gt;publish(result)&lt;/code&gt; method, and can publish data however you like. For example, timing data can be sent to graphite, and mismatches can be placed in a capped collection in redis for debugging later.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;publish&lt;/code&gt; method is given a &lt;code&gt;Scientist::Result&lt;/code&gt; instance with its associated &lt;code&gt;Scientist::Observation&lt;/code&gt;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyExperiment&#xA;  include Scientist::Experiment&#xA;&#xA;  # ...&#xA;&#xA;  def publish(result)&#xA;&#xA;    # Store the timing for the control value,&#xA;    $statsd.timing &#34;science.#{name}.control&#34;, result.control.duration&#xA;    # for the candidate (only the first, see &#34;Breaking the rules&#34; below,&#xA;    $statsd.timing &#34;science.#{name}.candidate&#34;, result.candidates.first.duration&#xA;&#xA;    # and counts for match/ignore/mismatch:&#xA;    if result.matched?&#xA;      $statsd.increment &#34;science.#{name}.matched&#34;&#xA;    elsif result.ignored?&#xA;      $statsd.increment &#34;science.#{name}.ignored&#34;&#xA;    else&#xA;      $statsd.increment &#34;science.#{name}.mismatched&#34;&#xA;      # Finally, store mismatches in redis so they can be retrieved and examined&#xA;      # later on, for debugging and research.&#xA;      store_mismatch_data(result)&#xA;    end&#xA;  end&#xA;&#xA;  def store_mismatch_data(result)&#xA;    payload = {&#xA;      :name            =&amp;gt; name,&#xA;      :context         =&amp;gt; context,&#xA;      :control         =&amp;gt; observation_payload(result.control),&#xA;      :candidate       =&amp;gt; observation_payload(result.candidates.first),&#xA;      :execution_order =&amp;gt; result.observations.map(&amp;amp;:name)&#xA;    }&#xA;&#xA;    key = &#34;science.#{name}.mismatch&#34;&#xA;    $redis.lpush key, payload&#xA;    $redis.ltrim key, 0, 1000&#xA;  end&#xA;&#xA;  def observation_payload(observation)&#xA;    if observation.raised?&#xA;      {&#xA;        :exception =&amp;gt; observation.exception.class,&#xA;        :message   =&amp;gt; observation.exception.message,&#xA;        :backtrace =&amp;gt; observation.exception.backtrace&#xA;      }&#xA;    else&#xA;      {&#xA;        # see &#34;Keeping it clean&#34; above&#xA;        :value =&amp;gt; observation.cleaned_value&#xA;      }&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;When running your test suite, it&#39;s helpful to know that the experimental results always match. To help with testing, Scientist defines a &lt;code&gt;raise_on_mismatches&lt;/code&gt; class attribute when you include &lt;code&gt;Scientist::Experiment&lt;/code&gt;. Only do this in your test suite!&lt;/p&gt; &#xA;&lt;p&gt;To raise on mismatches:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyExperiment&#xA;  include Scientist::Experiment&#xA;  # ... implementation&#xA;end&#xA;&#xA;MyExperiment.raise_on_mismatches = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scientist will raise a &lt;code&gt;Scientist::Experiment::MismatchError&lt;/code&gt; exception if any observations don&#39;t match.&lt;/p&gt; &#xA;&lt;h4&gt;Custom mismatch errors&lt;/h4&gt; &#xA;&lt;p&gt;To instruct Scientist to raise a custom error instead of the default &lt;code&gt;Scientist::Experiment::MismatchError&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CustomMismatchError &amp;lt; Scientist::Experiment::MismatchError&#xA;  def to_s&#xA;    message = &#34;There was a mismatch! Here&#39;s the diff:&#34;&#xA;&#xA;    diffs = result.candidates.map do |candidate|&#xA;      Diff.new(result.control, candidate)&#xA;    end.join(&#34;\n&#34;)&#xA;&#xA;    &#34;#{message}\n#{diffs}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;science &#34;widget-permissions&#34; do |e|&#xA;  e.use { Report.find(id) }&#xA;  e.try { ReportService.new.fetch(id) }&#xA;&#xA;  e.raise_with CustomMismatchError&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows for pre-processing on mismatch error exception messages.&lt;/p&gt; &#xA;&lt;h3&gt;Handling errors&lt;/h3&gt; &#xA;&lt;h4&gt;In candidate code&lt;/h4&gt; &#xA;&lt;p&gt;Scientist rescues and tracks &lt;em&gt;all&lt;/em&gt; exceptions raised in a &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;use&lt;/code&gt; block, including some where rescuing may cause unexpected behavior (like &lt;code&gt;SystemExit&lt;/code&gt; or &lt;code&gt;ScriptError&lt;/code&gt;). To rescue a more restrictive set of exceptions, modify the &lt;code&gt;RESCUES&lt;/code&gt; list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# default is [Exception]&#xA;Scientist::Observation::RESCUES.replace [StandardError]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Timeout ⏲️&lt;/strong&gt;: If you&#39;re introducing a candidate that could possibly timeout, use caution. ⚠️ While Scientist rescues all exceptions that occur in the candidate block, it &lt;em&gt;does not&lt;/em&gt; protect you from timeouts, as doing so would be complicated. It would likely require running the candidate code in a background job and tracking the time of a request. We feel the cost of this complexity would outweigh the benefit, so make sure that your code doesn&#39;t cause timeouts. This risk can be reduced by running the experiment on a low percentage so that users can (most likely) bypass the experiment by refreshing the page if they hit a timeout. See &lt;a href=&#34;https://raw.githubusercontent.com/github/scientist/main/#ramping-up-experiments&#34;&gt;Ramping up experiments&lt;/a&gt; below for how details on how to set the percentage for your experiment.&lt;/p&gt; &#xA;&lt;h4&gt;In a Scientist callback&lt;/h4&gt; &#xA;&lt;p&gt;If an exception is raised within any of Scientist&#39;s internal helpers, like &lt;code&gt;publish&lt;/code&gt;, &lt;code&gt;compare&lt;/code&gt;, or &lt;code&gt;clean&lt;/code&gt;, the &lt;code&gt;raised&lt;/code&gt; method is called with the symbol name of the internal operation that failed and the exception that was raised. The default behavior of &lt;code&gt;Scientist::Default&lt;/code&gt; is to simply re-raise the exception. Since this halts the experiment entirely, it&#39;s often a better idea to handle this error and continue so the experiment as a whole isn&#39;t canceled entirely:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyExperiment&#xA;  include Scientist::Experiment&#xA;&#xA;  # ...&#xA;&#xA;  def raised(operation, error)&#xA;    InternalErrorTracker.track! &#34;science failure in #{name}: #{operation}&#34;, error&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The operations that may be handled here are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:clean&lt;/code&gt; - an exception is raised in a &lt;code&gt;clean&lt;/code&gt; block&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:compare&lt;/code&gt; - an exception is raised in a &lt;code&gt;compare&lt;/code&gt; block&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:enabled&lt;/code&gt; - an exception is raised in the &lt;code&gt;enabled?&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ignore&lt;/code&gt; - an exception is raised in an &lt;code&gt;ignore&lt;/code&gt; block&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:publish&lt;/code&gt; - an exception is raised in the &lt;code&gt;publish&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:run_if&lt;/code&gt; - an exception is raised in a &lt;code&gt;run_if&lt;/code&gt; block&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Designing an experiment&lt;/h3&gt; &#xA;&lt;p&gt;Because &lt;code&gt;enabled?&lt;/code&gt; and &lt;code&gt;run_if&lt;/code&gt; determine when a candidate runs, it&#39;s impossible to guarantee that it will run every time. For this reason, Scientist is only safe for wrapping methods that aren&#39;t changing data.&lt;/p&gt; &#xA;&lt;p&gt;When using Scientist, we&#39;ve found it most useful to modify both the existing and new systems simultaneously anywhere writes happen, and verify the results at read time with &lt;code&gt;science&lt;/code&gt;. &lt;code&gt;raise_on_mismatches&lt;/code&gt; has also been useful to ensure that the correct data was written during tests, and reviewing published mismatches has helped us find any situations we overlooked with our production data at runtime. When writing to and reading from two systems, it&#39;s also useful to write some data reconciliation scripts to verify and clean up production data alongside any running experiments.&lt;/p&gt; &#xA;&lt;h4&gt;Noise and error rates&lt;/h4&gt; &#xA;&lt;p&gt;Keep in mind that Scientist&#39;s &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt; blocks run sequentially in random order. As such, any data upon which your code depends may change before the second block is invoked, potentially yielding a mismatch between the candidate and control return values. To calibrate your expectations with respect to &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_I_and_type_II_errors&#34;&gt;false negatives&lt;/a&gt; arising from systemic conditions external to your proposed changes, consider starting with an experiment in which both the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt; blocks invoke the control method. Then proceed with introducing a candidate.&lt;/p&gt; &#xA;&lt;h3&gt;Finishing an experiment&lt;/h3&gt; &#xA;&lt;p&gt;As your candidate behavior converges on the controls, you&#39;ll start thinking about removing an experiment and using the new behavior.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If there are any ignore blocks, the candidate behavior is &lt;em&gt;guaranteed&lt;/em&gt; to be different. If this is unacceptable, you&#39;ll need to remove the ignore blocks and resolve any ongoing mismatches in behavior until the observations match perfectly every time.&lt;/li&gt; &#xA; &lt;li&gt;When removing a read-behavior experiment, it&#39;s a good idea to keep any write-side duplication between an old and new system in place until well after the new behavior has been in production, in case you need to roll back.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Breaking the rules&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes scientists just gotta do weird stuff. We understand.&lt;/p&gt; &#xA;&lt;h3&gt;Ignoring results entirely&lt;/h3&gt; &#xA;&lt;p&gt;Science is useful even when all you care about is the timing data or even whether or not a new code path blew up. If you have the ability to incrementally control how often an experiment runs via your &lt;code&gt;enabled?&lt;/code&gt; method, you can use it to silently and carefully test new code paths and ignore the results altogether. You can do this by setting &lt;code&gt;ignore { true }&lt;/code&gt;, or for greater efficiency, &lt;code&gt;compare { true }&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will still log mismatches if any exceptions are raised, but will disregard the values entirely.&lt;/p&gt; &#xA;&lt;h3&gt;Trying more than one thing&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s not usually a good idea to try more than one alternative simultaneously. Behavior isn&#39;t guaranteed to be isolated and reporting + visualization get quite a bit harder. Still, it&#39;s sometimes useful.&lt;/p&gt; &#xA;&lt;p&gt;To try more than one alternative at once, add names to some &lt;code&gt;try&lt;/code&gt; blocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;scientist&#34;&#xA;&#xA;class MyWidget&#xA;  include Scientist&#xA;&#xA;  def allows?(user)&#xA;    science &#34;widget-permissions&#34; do |e|&#xA;      e.use { model.check_user(user).valid? } # old way&#xA;&#xA;      e.try(&#34;api&#34;) { user.can?(:read, model) } # new service API&#xA;      e.try(&#34;raw-sql&#34;) { user.can_sql?(:read, model) } # raw query&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the experiment runs, all candidate behaviors are tested and each candidate observation is compared with the control in turn.&lt;/p&gt; &#xA;&lt;h3&gt;No control, just candidates&lt;/h3&gt; &#xA;&lt;p&gt;Define the candidates with named &lt;code&gt;try&lt;/code&gt; blocks, omit a &lt;code&gt;use&lt;/code&gt;, and pass a candidate name to &lt;code&gt;run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;experiment = MyExperiment.new(&#34;various-ways&#34;) do |e|&#xA;  e.try(&#34;first-way&#34;)  { ... }&#xA;  e.try(&#34;second-way&#34;) { ... }&#xA;end&#xA;&#xA;experiment.run(&#34;second-way&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;science&lt;/code&gt; helper also knows this trick:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;science &#34;various-ways&#34;, run: &#34;first-way&#34; do |e|&#xA;  e.try(&#34;first-way&#34;)  { ... }&#xA;  e.try(&#34;second-way&#34;) { ... }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Providing fake timing data&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re writing tests that depend on specific timing values, you can provide canned durations using the &lt;code&gt;fabricate_durations_for_testing_purposes&lt;/code&gt; method, and Scientist will report these in &lt;code&gt;Scientist::Observation#duration&lt;/code&gt; instead of the actual execution times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;science &#34;absolutely-nothing-suspicious-happening-here&#34; do |e|&#xA;  e.use { ... } # &#34;control&#34;&#xA;  e.try { ... } # &#34;candidate&#34;&#xA;  e.fabricate_durations_for_testing_purposes( &#34;control&#34; =&amp;gt; 1.0, &#34;candidate&#34; =&amp;gt; 0.5 )&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fabricate_durations_for_testing_purposes&lt;/code&gt; takes a Hash of duration values, keyed by behavior names. (By default, Scientist uses &lt;code&gt;&#34;control&#34;&lt;/code&gt; and &lt;code&gt;&#34;candidate&#34;&lt;/code&gt;, but if you override these as shown in &lt;a href=&#34;https://raw.githubusercontent.com/github/scientist/main/#trying-more-than-one-thing&#34;&gt;Trying more than one thing&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/github/scientist/main/#no-control-just-candidates&#34;&gt;No control, just candidates&lt;/a&gt;, use matching names here.) If a name is not provided, the actual execution time will be reported instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Like &lt;code&gt;Scientist::Experiment#cleaner&lt;/code&gt;, this probably won&#39;t come up in normal usage. It&#39;s here to make it easier to test code that extends Scientist.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Without including Scientist&lt;/h3&gt; &#xA;&lt;p&gt;If you need to use Scientist in a place where you aren&#39;t able to include the Scientist module, you can call &lt;code&gt;Scientist.run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Scientist.run &#34;widget-permissions&#34; do |e|&#xA;  e.use { model.check_user(user).valid? }&#xA;  e.try { user.can?(:read, model) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hacking&lt;/h2&gt; &#xA;&lt;p&gt;Be on a Unixy box. Make sure a modern Bundler is available. &lt;code&gt;script/test&lt;/code&gt; runs the unit tests. All development dependencies are installed automatically. Scientist requires Ruby 2.3 or newer.&lt;/p&gt; &#xA;&lt;h2&gt;Wrappers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RealGeeks/lab_tech&#34;&gt;RealGeeks/lab_tech&lt;/a&gt; is a Rails engine for using this library by controlling, storing, and analyzing experiment results with ActiveRecord.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daylerees/scientist&#34;&gt;daylerees/scientist&lt;/a&gt; (PHP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scientistproject/Scientist.net&#34;&gt;scientistproject/scientist.net&lt;/a&gt; (.NET)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joealcorn/laboratory&#34;&gt;joealcorn/laboratory&lt;/a&gt; (Python)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rawls238/Scientist4J&#34;&gt;rawls238/Scientist4J&lt;/a&gt; (Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomiaijo/scientist&#34;&gt;tomiaijo/scientist&lt;/a&gt; (C++)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trello/scientist&#34;&gt;trello/scientist&lt;/a&gt; (node.js)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ziyasal/scientist.js&#34;&gt;ziyasal/scientist.js&lt;/a&gt; (node.js, ES6)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TrueWill/tzientist&#34;&gt;TrueWill/tzientist&lt;/a&gt; (node.js, TypeScript)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TrueWill/paleontologist&#34;&gt;TrueWill/paleontologist&lt;/a&gt; (Deno, TypeScript)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yeller/laboratory&#34;&gt;yeller/laboratory&lt;/a&gt; (Clojure)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lancew/Scientist&#34;&gt;lancew/Scientist&lt;/a&gt; (Perl 5)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lancew/ScientistP6&#34;&gt;lancew/ScientistP6&lt;/a&gt; (Perl 6)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MadcapJake/Test-Lab&#34;&gt;MadcapJake/Test-Lab&lt;/a&gt; (Perl 6)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cwbriones/scientist&#34;&gt;cwbriones/scientist&lt;/a&gt; (Elixir)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/calavera/go-scientist&#34;&gt;calavera/go-scientist&lt;/a&gt; (Go)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jelmersnoeck/experiment&#34;&gt;jelmersnoeck/experiment&lt;/a&gt; (Go)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spoptchev/scientist&#34;&gt;spoptchev/scientist&lt;/a&gt; (Kotlin / Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junkpiano/scientist&#34;&gt;junkpiano/scientist&lt;/a&gt; (Swift)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://serverlessscientist.com/&#34;&gt;serverless scientist&lt;/a&gt; (AWS Lambda)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fightmegg/scientist&#34;&gt;fightmegg/scientist&lt;/a&gt; (TypeScript, Browser / Node.js)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MisterSpex/misterspex-scientist&#34;&gt;MisterSpex/misterspex-scientist&lt;/a&gt; (Java, no dependencies)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jbarnette&#34;&gt;@jbarnette&lt;/a&gt;, &lt;a href=&#34;https://github.com/jesseplusplus&#34;&gt;@jesseplusplus&lt;/a&gt;, &lt;a href=&#34;https://github.com/rick&#34;&gt;@rick&lt;/a&gt;, and &lt;a href=&#34;https://github.com/zerowidth&#34;&gt;@zerowidth&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>department-of-veterans-affairs/vets-api</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/department-of-veterans-affairs/vets-api</id>
    <link href="https://github.com/department-of-veterans-affairs/vets-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API powering VA.gov&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vets API&lt;/h1&gt; &#xA;&lt;p&gt;This project provides common APIs for applications that live on VA.gov (formerly vets.gov APIs).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rubydoc.info/github/department-of-veterans-affairs/vets-api&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/yard-docs-blue.svg?sanitize=true&#34; alt=&#34;Yard Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-CC0%201.0-lightgrey.svg?sanitize=true&#34; alt=&#34;License: CC0-1.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://jenkins.vfs.va.gov/job/builds/job/vets-api/&#34;&gt;Build Status&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://depo-platform-documentation.scrollhelp.site/index.html&#34;&gt;VA.gov Platform Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://department-of-veterans-affairs.github.io/va-digital-services-platform-docs/api-reference/#/&#34;&gt;API Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For frontend, see &lt;a href=&#34;https://github.com/department-of-veterans-affairs/vets-website&#34;&gt;vets-website&lt;/a&gt; and &lt;a href=&#34;https://github.com/department-of-veterans-affairs/vagov-content&#34;&gt;vets-content&lt;/a&gt; repos.&lt;/p&gt; &#xA;&lt;h2&gt;Base setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the &lt;code&gt;vets-api&lt;/code&gt; repo:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/department-of-veterans-affairs/vets-api.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup key &amp;amp; cert for localhost authentication to ID.me:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Create a folder in your vets-api directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir config/certs&#xA;touch config/certs/vetsgov-localhost.crt&#xA;touch config/certs/vetsgov-localhost.key&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Copy example configuration file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp config/settings.local.yml.example config/settings.local.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Edit &lt;code&gt;config/settings.local.yml&lt;/code&gt; to disable signed authentication requests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# settings.local.yml&#xA;saml:&#xA;  authn_requests_signed: false&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are developing features that need Sidekiq Enterprise, you must have access to the va.gov-team-sensitive repo and &lt;a href=&#34;https://github.com/department-of-veterans-affairs/va.gov-team-sensitive/raw/master/platform/engineering/sidekiq-enterprise-setup.md&#34;&gt;install the sidekiq enterprise license&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Sidekiq Enterprise is used for worker rate limiting and additional reliability in production and requires a license be configured on your development machine. If you do not have a license configured, the open source version of Sidekiq will be installed instead. This is not an issue unless you are specifically developing features that need Sidekiq Enterprise.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;DO NOT commit local Gemfile modifications that remove the &lt;code&gt;sidekiq-ent&lt;/code&gt; and &lt;code&gt;sidekiq-pro&lt;/code&gt; gems.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Developers who work with vets-api daily tend to prefer the native setup because they don&#39;t have to deal with the abstraction of docker-compose while those who would to spend less time on getting started prefer the docker setup. Docker is also useful when it&#39;s necessary to have a setup as close to production as possible. Finally, it&#39;s possible to use a hybrid setup where you run vets-api natively, but run the Postgres and Redis dependencies in docker.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/native.md&#34;&gt;Native setup&lt;/a&gt; (OSX/Ubuntu)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/docker.md&#34;&gt;Docker setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/hybrid.md&#34;&gt;Hybrid setup&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running the app&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/running_natively.md&#34;&gt;Running natively&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/running_docker.md&#34;&gt;Running with Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/debugging_with_docker_rubymine_windows.md&#34;&gt;Debugging on Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Vets API is configured with &lt;a href=&#34;https://github.com/railsconfig/config&#34;&gt;Config&lt;/a&gt;. The default configuration is contained in &lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/config/settings.yml&#34;&gt;settings.yml&lt;/a&gt;. To customize your setup, you can create a &lt;code&gt;config/settings.local.yml&lt;/code&gt; file with configuration specific to your needs. For example, to configure Redis and PostgreSQL (PostGIS is required), place something like this in that file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;database_url: postgis://pg_host:9999/custom_db&#xA;&#xA;redis:&#xA;  host: redis_host&#xA;  port: 9999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is also where you will place any other customizations, such as API tokens or certificate paths.&lt;/p&gt; &#xA;&lt;p&gt;Config settings that vary in value depending on the deployment environment will also need to be set appropriately for each environment in the relevant &lt;a href=&#34;https://github.com/department-of-veterans-affairs/devops/raw/master/ansible/deployment/config/vets-api&#34;&gt;devops (Private Repo)&lt;/a&gt; configurations (dev-, staging-, and prod-settings.local.yml.j2).&lt;/p&gt; &#xA;&lt;p&gt;Some examples of configuration that will need to be added to these files are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API keys/tokens&lt;/li&gt; &#xA; &lt;li&gt;3rd party service hostnames, ports, and certificates/keys.&lt;/li&gt; &#xA; &lt;li&gt;Betamocks settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional application configuration&lt;/h3&gt; &#xA;&lt;p&gt;The following features require additional configuration, click for details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/edu_benefits.md&#34;&gt;Education Benefits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/evss.md&#34;&gt;EVSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/facilities_locator.md&#34;&gt;Facilities Locator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/local_network_access.md&#34;&gt;Local Network Access&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/mailer.md&#34;&gt;Mailers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/mpi.md&#34;&gt;Master Person Index (MPI)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/mhv.md&#34;&gt;My HealtheVet (MHV)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/virtual_machine_access.md&#34;&gt;Virtual Machine Access&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/department-of-veterans-affairs/vsp-test-user-dashboard/raw/main/README.md#back-end&#34;&gt;Test User Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To mock one or more of the above services see &lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/betamocks.md&#34;&gt;Betamocks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vets API will still run in a limited capacity without configuring any of these features, and will run the unit tests successfully.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment instructions&lt;/h2&gt; &#xA;&lt;p&gt;Jenkins deploys &lt;code&gt;vets-api&lt;/code&gt; upon each merge to &lt;code&gt;master&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://jenkins.vfs.va.gov/job/testing/job/vets-api/job/master/&#34;&gt;http://jenkins.vfs.va.gov/job/testing/job/vets-api/job/master/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each deploy is available here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev-api.va.gov/v0/status&#34;&gt;https://dev-api.va.gov/v0/status&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additional deployment details can be found here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/deployment/information.md&#34;&gt;additional deployment details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API request key formatting&lt;/h2&gt; &#xA;&lt;p&gt;When sending HTTP requests use the &lt;code&gt;X-Key-Inflection&lt;/code&gt; request header to specify which case your client wants to use. Valid cases are &lt;code&gt;camel&lt;/code&gt;, &lt;code&gt;dash&lt;/code&gt;, and &lt;code&gt;snake&lt;/code&gt;. For example if you set &lt;code&gt;X-Key-Inflection: camel&lt;/code&gt; then you can use camelCase keys in your JSON request body and you will get back data with camelCase keys in the response body. If the header is not provided then the server will expect snake_case keys in the request body and output snake_case in the response.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;The version of Ruby and gem dependencies (including Rails) used are defined in the included &lt;a href=&#34;https://github.com/department-of-veterans-affairs/vets-api/raw/master/Gemfile&#34;&gt;Gemfile&lt;/a&gt;. The currently used versions of gems are maintained with Bundler and stored in the &lt;a href=&#34;https://github.com/department-of-veterans-affairs/vets-api/raw/master/Gemfile.lock&#34;&gt;Gemfile.lock&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Version Policy&lt;/h4&gt; &#xA;&lt;p&gt;The goal is to have vets-api use supported versions of gems and Ruby, which is often the latest. However the versions are generally updated as need or availability arise. If you need a newer version of a gem, please submit a pull-request marked as &lt;code&gt;draft&lt;/code&gt; with just the gem updated and passing tests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spree/spree</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/spree/spree</id>
    <link href="https://github.com/spree/spree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source multi-language/multi-currency/multi-store eCommerce platform&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://getvendo.com?utm_source=spree_github&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/spree/spree-dev-docs/54abf615c5280eda8f2308de96d6290f72c1fb1b/spree_vendo_user_doc.png&#34; alt=&#34;Spree Commerce - a headless open-source ecommerce platform for multi-store, marketplace, or B2B global brands&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://spreecommerce.org&#34;&gt;Spree Commerce&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/spree&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/spree.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/spree/spree/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/8277fc2bb0b1f777084f/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spree&lt;/strong&gt; is a headless open source e-commerce platform for global brands.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spreecommerce.org/stories/&#34;&gt;Success Stories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spreecommerce.org/integrations/&#34;&gt;Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spree/spree/milestones?direction=asc&amp;amp;sort=due_date&amp;amp;state=open&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://slack.spreecommerce.org/&#34;&gt;Join our Slack community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://spreecommerce.org/use-cases/headless-ecommerce-api/&#34;&gt;Headless Commerce&lt;/a&gt;&lt;/strong&gt; - build mobile apps or custom storefronts in any technology, &lt;a href=&#34;https://github.com/spree/spree-storefront-api-v2-js-sdk&#34;&gt;JS/TS SDK available&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://spreecommerce.org/use-cases/spree-pwa-progressive-web-application/&#34;&gt;PWA&lt;/a&gt;&lt;/strong&gt; - offline shopping experiences like native mobile apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://spreecommerce.org/use-cases/international-sales-demo/&#34;&gt;Global Commerce&lt;/a&gt;&lt;/strong&gt; - multi currency and multi language support out of the box, different shipping methods / costs for different regions, advanced tax calculation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Store&lt;/strong&gt; - host multiple brands / stores on one Spree instance with different branding, configuration, payment methods, shipping options, product catalogs etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://spreecommerce.org/use-cases/multi-vendor-marketplace-demo/&#34;&gt;Multi-vendor marketplace&lt;/a&gt;&lt;/strong&gt; - run your own marketplace with multiple suppliers with dedicated Supplier Dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Responsive Admin Panel&lt;/strong&gt; - manage and curate products, users, orders, returns, shipments &amp;amp; more&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Orders&lt;/strong&gt; - robust system for orders, shipments, returns and refunds&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Carts&lt;/strong&gt; - comprehensive and advanced discounts system&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Payments&lt;/strong&gt; - over 30 payment provider integration out of the box plus API to integrate any other gateway&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run everywhere&lt;/strong&gt; - cloud, VPS, Docker, Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battle Tested&lt;/strong&gt; - used by thousands of merchants around the globe in all categories since 2007!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fully customizable&lt;/strong&gt; - pick and choose parts you want to use and customize everything else (storefront, order processing, API, etc) to create unique solutions that your business requires&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;More features available via extensions&lt;/strong&gt; - dozens of extensions built by community, ready for use for free!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsored by&lt;/h2&gt; &#xA;&lt;a href=&#34;https://getvendo.com?utm_source=spree_github&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/spree/spree-dev-docs/master/.gitbook/assets/spree_vendo_user_doc_2.png&#34; a&gt; &lt;/a&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://getvendo.com?utm_source=spree_github&#34;&gt;Vendo&lt;/a&gt; is a great fit for marketplaces of all sizes - either with own fulfillment and multiple warehouses or in a dropshipping model. Vendo &lt;strong&gt;automates everything&lt;/strong&gt; from &lt;strong&gt;vendor onboarding&lt;/strong&gt;, accepting buyer &lt;strong&gt;payments in over 135 currencies&lt;/strong&gt;, to supplier &lt;strong&gt;payouts in 50 countries&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Vendo ensures excellent buyer experience with smooth product discovery and search, a multitude of payment methods and optimal shipping cost calculation. Vendo keeps suppliers happy with easy onboarding, automated products sync using their preferred method and easy payouts.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://app.getvendo.com/users/new?typeform-source=spree_github&#34;&gt;Start your 14-day free trial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-docs.spreecommerce.org/getting-started/installation&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-docs.spreecommerce.org/&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.spreecommerce.org/&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spree/spree-storefront-api-v2-js-sdk&#34;&gt;JavaScript / TypeScript SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Spree is an open source project and we love contributions in any form - pull requests, issues, feature ideas!&lt;/p&gt; &#xA;&lt;p&gt;Please review the &lt;a href=&#34;https://dev-docs.spreecommerce.org/contributing/index&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Spree is released under the &lt;a href=&#34;https://github.com/spree/spree/raw/main/license.md&#34;&gt;New BSD License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/view_component</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/github/view_component</id>
    <link href="https://github.com/github/view_component" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework for building reusable, testable &amp; encapsulated view components in Ruby on Rails.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/github/view_component/main/docs/logo/readme-light.svg#gh-light-mode-only&#34; alt=&#34;ViewComponent logo&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/github/view_component/main/docs/logo/readme-dark.svg#gh-dark-mode-only&#34; alt=&#34;ViewComponent logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A framework for building reusable, testable &amp;amp; encapsulated view components in Ruby on Rails.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://viewcomponent.org/&#34;&gt;viewcomponent.org&lt;/a&gt; for documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is intended to be a safe, welcoming space for collaboration. Contributors are expected to adhere to the &lt;a href=&#34;http://contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct. We recommend reading the &lt;a href=&#34;https://raw.githubusercontent.com/github/view_component/main/docs/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ViewComponent is available as open source under the terms of the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mercadolibre/mobile-dependencies_whitelist</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/mercadolibre/mobile-dependencies_whitelist</id>
    <link href="https://github.com/mercadolibre/mobile-dependencies_whitelist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Whitelist dependencies files for mobile teams&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Whitelist dependencies&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;em&gt;This repo isnt versioned. &lt;code&gt;master&lt;/code&gt; branch is consumed by default, so every time &lt;code&gt;master&lt;/code&gt; branch changes, all repositories will immediatly start consuming the new changes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Android whitelist dependencies consist of a set of dependencies that are available for front-ends and high-level repositories to consume from the Mercadolibre-mobile group.&lt;/p&gt; &#xA;&lt;p&gt;This set of dependencies is parsed in the form of a JSON text. The root level property should be called &lt;code&gt;whitelist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each of the dependencies is a JSON Object that will be matched against each of the unresolved dependencies of the repository. The repository dependencies will be a string formed as &lt;code&gt;group:name:version&lt;/code&gt;. The whitelist fields SUPPORTS regex expressions, so you can form match cases for groups in single strings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE1:&lt;/strong&gt; Remember that this are regexes, so if you want to declare &lt;code&gt;com.example&lt;/code&gt; it should be &lt;code&gt;com\\.example&lt;/code&gt; &lt;strong&gt;NOTE2&lt;/strong&gt;: The repository will validate against unresolved dependencies. Thus, if declaring as version &lt;code&gt;4\\.\\+&lt;/code&gt; it &lt;strong&gt;will&lt;/strong&gt; match against a dependency &lt;code&gt;4.+&lt;/code&gt; (it wont be for example the string &lt;code&gt;4.2.3&lt;/code&gt;) &lt;strong&gt;NOTE3&lt;/strong&gt;: You can have expirable dependencies by adding the &lt;code&gt;expires&lt;/code&gt; field. If no field is added, the dependency is considered as non-expirable &lt;strong&gt;NOTE4&lt;/strong&gt;: If no group / name / version is provided, they will default to &lt;code&gt;.*&lt;/code&gt; (any string)&lt;/p&gt; &#xA;&lt;p&gt;JSON Schema:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;whitelist&#34;: [&#xA;    {&#xA;      &#34;expires&#34;: &#34;yyyy-MM-dd&#34;,&#xA;      &#34;group&#34;: &#34;group_regex&#34;,&#xA;      &#34;name&#34;: &#34;name_regex&#34;,&#xA;      &#34;version&#34;: &#34;version_regex&#34;&#xA;    },&#xA;    ...&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE5&lt;/strong&gt;: If you want to try if its working correctly from your fork, just add this line to de build.gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lintGradle {&#xA;    dependencyWhitelistUrl = &#34;https://raw.githubusercontent.com/YOUR_GITHUB_USER/mobile-dependencies_whitelist/master/android-whitelist.json&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;iOS whitelist dependencies consist of a set of dependencies that are available for front-ends and high-level repositories to consume from the Mercadolibre-mobile group.&lt;/p&gt; &#xA;&lt;p&gt;This set of dependencies is parsed in the form of a JSON text. The root level property should be called &lt;code&gt;whitelist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each of the dependencies is an object with the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Dependency Podname&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source&lt;/code&gt;: keyword that indicates the source where the dependency spec should be downloaded. (&lt;code&gt;public&lt;/code&gt; || &lt;code&gt;private&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;target&lt;/code&gt;: Indicates if it is a test or productive dependency. (&lt;code&gt;test&lt;/code&gt; || &lt;code&gt;productive&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: Which will be matched against each of the dependencies in the podspec. The &lt;code&gt;version&lt;/code&gt; string SUPPORTS regex expression.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Optional&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;expires&lt;/code&gt;: You can have expirable dependencies by adding the &lt;code&gt;expires&lt;/code&gt; field. If no field is added, the dependency is considered as non-expirable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;&#x9;&#34;whitelist&#34;: [&#xA; &amp;nbsp; &amp;nbsp; # This will match with &#39;MeliSDK&#39; and version &#39;~&amp;gt;5.+&#39; (version must have ~&amp;gt;5.x)&#xA;    {&#xA;&#x9;&#x9;&#34;name&#34;: &#34;MeliSDK&#34;,&#xA;&#x9;&#x9;&#34;version&#34;: &#34;^~&amp;gt;5.[0-9]+$&#34;&#xA;&#x9;}, &#xA; &amp;nbsp; &amp;nbsp; # This will match with &#39;MLRecommendations&#39; for any version&#xA;    {&#xA;&#x9;&#x9;&#34;name&#34;: &#34;MLRecommendations&#34;,&#xA;&#x9;&#x9;&#34;version&#34;: null&#xA;&#x9;}]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contexts Whitelist [DEPRECATED]&lt;/h1&gt; &#xA;&lt;p&gt;For more information consult the &lt;a href=&#34;https://furydocs.io/mobile-apps/v1.5.2/guide/#/lang-en/metrics/02_crash-rate?id=contexts&#34;&gt;new context whitelist&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>faker-ruby/faker</title>
    <updated>2022-05-29T02:30:48Z</updated>
    <id>tag:github.com,2022-05-29:/faker-ruby/faker</id>
    <link href="https://github.com/faker-ruby/faker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for generating fake data such as names, addresses, and phone numbers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36028424/40263395-4318481e-5b44-11e8-92e5-3dcc1ce169b3.png&#34; alt=&#34;logotype a happy-07&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Faker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/faker-ruby/faker/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/faker-ruby/faker/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/faker&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/faker.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inch-ci.org/github/faker-ruby/faker&#34;&gt;&lt;img src=&#34;https://inch-ci.org/github/faker-ruby/faker.svg?branch=master&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/stympy/faker/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/ef54c7f9df86e965d64b/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/stympy/faker/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/ef54c7f9df86e965d64b/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dependabot.com/compatibility-score.html?dependency-name=faker&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34;&gt;&lt;img src=&#34;https://api.dependabot.com/badges/compatibility_score?dependency-name=faker&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34; alt=&#34;SemVer compatibility&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This gem is a port of &lt;a href=&#34;https://metacpan.org/pod/Data::Faker&#34;&gt;Perl&#39;s Data::Faker library&lt;/a&gt; that generates fake data.&lt;/p&gt; &#xA;&lt;p&gt;It comes in very handy for taking screenshots (taking screenshots for my project, &lt;a href=&#34;http://catchthebest.com/&#34;&gt;Catch the Best&lt;/a&gt; was the original impetus for the creation of this gem), having real-looking test data, and having your database populated with more than one or two records while you&#39;re doing development.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#faker&#34;&gt;Faker&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#note&#34;&gt;NOTE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#cli&#34;&gt;CLI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#ensuring-unique-values&#34;&gt;Ensuring unique values&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#deterministic-random&#34;&gt;Deterministic Random&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#generators&#34;&gt;Generators&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#default&#34;&gt;Default&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#blockchain&#34;&gt;Blockchain&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#books&#34;&gt;Books&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#fantasy&#34;&gt;Fantasy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#creature&#34;&gt;Creature&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#games&#34;&gt;Games&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#japanese-media&#34;&gt;Japanese Media&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#movies&#34;&gt;Movies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#music&#34;&gt;Music&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#quotes&#34;&gt;Quotes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#sports&#34;&gt;Sports&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#tv-shows&#34;&gt;Tv Shows&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NOTE&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;While Faker generates data at random, returned values are not guaranteed to be unique by default. You must explicitly specify when you require unique values, see &lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#ensuring-unique-values&#34;&gt;details&lt;/a&gt;. Values also can be deterministic if you use the deterministic feature, see &lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/#deterministic-random&#34;&gt;details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;This is the &lt;code&gt;master&lt;/code&gt; branch of Faker and may contain changes that are not yet released. Please refer the README of your version for the available methods. List of all versions is &lt;a href=&#34;https://github.com/stympy/faker/releases&#34;&gt;available here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install faker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: if you are getting a &lt;code&gt;uninitialized constant Faker::[some_class]&lt;/code&gt; error, your version of the gem is behind the one documented here. To make sure that your gem is the one documented here, change the line in your Gemfile to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;faker&#39;, :git =&amp;gt; &#39;https://github.com/faker-ruby/faker.git&#39;, :branch =&amp;gt; &#39;master&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;faker&#39;&#xA;&#xA;Faker::Name.name      #=&amp;gt; &#34;Christophe Bartell&#34;&#xA;&#xA;Faker::Internet.email #=&amp;gt; &#34;kirsten.greenholt@corkeryfisher.info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;Instructions are available in the &lt;a href=&#34;https://github.com/faker-ruby/faker-bot&#34;&gt;faker-bot README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Ensuring unique values&lt;/h3&gt; &#xA;&lt;p&gt;Prefix your method call with &lt;code&gt;unique&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Name.unique.name # This will return a unique name every time it is called&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If too many unique values are requested from a generator that has a limited number of potential values, a &lt;code&gt;Faker::UniqueGenerator::RetryLimitExceeded&lt;/code&gt; exception may be raised. It is possible to clear the record of unique values that have been returned, for example between tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Name.unique.clear # Clears used values for Faker::Name&#xA;Faker::UniqueGenerator.clear # Clears used values for all generators&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also can give some already used values to the unique generator if you have collisions with the generated data (i.e: using FactoryBot with random and manually set values).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Usage:&#xA;# Faker::&amp;lt;generator&amp;gt;.unique.exclude(method, arguments, list)&#xA;&#xA;# Add &#39;azerty&#39; and &#39;wxcvbn&#39; to the string generator with 6 char length&#xA;Faker::Lorem.unique.exclude :string, [number: 6], %w[azerty wxcvbn]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deterministic Random&lt;/h3&gt; &#xA;&lt;p&gt;Faker supports seeding of its pseudo-random number generator (PRNG) to provide deterministic output of repeated method calls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Config.random = Random.new(42)&#xA;Faker::Company.bs #=&amp;gt; &#34;seize collaborative mindshare&#34;&#xA;Faker::Company.bs #=&amp;gt; &#34;engage strategic platforms&#34;&#xA;Faker::Config.random = Random.new(42)&#xA;Faker::Company.bs #=&amp;gt; &#34;seize collaborative mindshare&#34;&#xA;Faker::Company.bs #=&amp;gt; &#34;engage strategic platforms&#34;&#xA;&#xA;Faker::Config.random = nil # seeds the PRNG using default entropy sources&#xA;Faker::Config.random.seed #=&amp;gt; 185180369676275068918401850258677722187&#xA;Faker::Company.bs #=&amp;gt; &#34;cultivate viral synergies&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generators&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Some of the generators below aren&#39;t released yet. If you want to use them, change the line in your gemfile to:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;faker&#39;, :git =&amp;gt; &#39;https://github.com/faker-ruby/faker.git&#39;, :branch =&amp;gt; &#39;master&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/address.md&#34;&gt;Faker::Address&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/alphanumeric.md&#34;&gt;Faker::Alphanumeric&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/ancient.md&#34;&gt;Faker::Ancient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/app.md&#34;&gt;Faker::App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/appliance.md&#34;&gt;Faker::Appliance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/artist.md&#34;&gt;Faker::Artist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/avatar.md&#34;&gt;Faker::Avatar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/bank.md&#34;&gt;Faker::Bank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/barcode.md&#34;&gt;Faker::Barcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/beer.md&#34;&gt;Faker::Beer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/blood.md&#34;&gt;Faker::Blood&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/boolean.md&#34;&gt;Faker::Boolean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/bossa_nova.md&#34;&gt;Faker::BossaNova&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/business.md&#34;&gt;Faker::Business&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/camera.md&#34;&gt;Faker::Camera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/cannabis.md&#34;&gt;Faker::Cannabis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/chile_rut.md&#34;&gt;Faker::ChileRut&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/chuck_norris.md&#34;&gt;Faker::ChuckNorris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/code.md&#34;&gt;Faker::Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/coffee.md&#34;&gt;Faker::Coffee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/coin.md&#34;&gt;Faker::Coin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/color.md&#34;&gt;Faker::Color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/commerce.md&#34;&gt;Faker::Commerce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/company.md&#34;&gt;Faker::Company&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/compass.md&#34;&gt;Faker::Compass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/computer.md&#34;&gt;Faker::Computer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/construction.md&#34;&gt;Faker::Construction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/cosmere.md&#34;&gt;Faker::Cosmere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/crypto.md&#34;&gt;Faker::Crypto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/crypto_coin.md&#34;&gt;Faker::CryptoCoin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/currency.md&#34;&gt;Faker::Currency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/date.md&#34;&gt;Faker::Date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/dc_comics.md&#34;&gt;Faker::DcComics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/demographic.md&#34;&gt;Faker::Demographic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/dessert.md&#34;&gt;Faker::Dessert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/device.md&#34;&gt;Faker::Device&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/driving_licence.md&#34;&gt;Faker::DrivingLicence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/drone/drone.md&#34;&gt;Faker::Drone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/educator.md&#34;&gt;Faker::Educator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/electrical_components.md&#34;&gt;Faker::ElectricalComponents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/emotion.md&#34;&gt;Faker::Emotion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/esport.md&#34;&gt;Faker::Esport&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/file.md&#34;&gt;Faker::File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/fillmurray.md&#34;&gt;Faker::Fillmurray&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/finance.md&#34;&gt;Faker::Finance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/food.md&#34;&gt;Faker::Food&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/funny_name.md&#34;&gt;Faker::FunnyName&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/gender.md&#34;&gt;Faker::Gender&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/greek_philosophers.md&#34;&gt;Faker::GreekPhilosophers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/hacker.md&#34;&gt;Faker::Hacker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/hipster.md&#34;&gt;Faker::Hipster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/hobby.md&#34;&gt;Faker::Hobby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/house.md&#34;&gt;Faker::House&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/id_number.md&#34;&gt;Faker::IDNumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/industry_segments.md&#34;&gt;Faker::IndustrySegments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/internet.md&#34;&gt;Faker::Internet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/invoice.md&#34;&gt;Faker::Invoice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/job.md&#34;&gt;Faker::Job&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/json.md&#34;&gt;Faker::Json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/kpop.md&#34;&gt;Faker::Kpop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/lorem.md&#34;&gt;Faker::Lorem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/lorem_flickr.md&#34;&gt;Faker::LoremFlickr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/lorem_pixel.md&#34;&gt;Faker::LoremPixel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/markdown.md&#34;&gt;Faker::Markdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/marketing.md&#34;&gt;Faker::Marketing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/measurement.md&#34;&gt;Faker::Measurement&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/military.md&#34;&gt;Faker::Military&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/mountain.md&#34;&gt;Faker::Mountain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/name.md&#34;&gt;Faker::Name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/nation.md&#34;&gt;Faker::Nation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/nato_phonetic_alphabet.md&#34;&gt;Faker::NatoPhoneticAlphabet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/national_health_service.md&#34;&gt;Faker::NationalHealthService&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/number.md&#34;&gt;Faker::Number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/omniauth.md&#34;&gt;Faker::Omniauth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/phone_number.md&#34;&gt;Faker::PhoneNumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/placeholdit.md&#34;&gt;Faker::Placeholdit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/programming_language.md&#34;&gt;Faker::ProgrammingLanguage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/relationship.md&#34;&gt;Faker::Relationship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/restaurant.md&#34;&gt;Faker::Restaurant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/science.md&#34;&gt;Faker::Science&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/slack_emoji.md&#34;&gt;Faker::SlackEmoji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/source.md&#34;&gt;Faker::Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/south_africa.md&#34;&gt;Faker::SouthAfrica&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/space.md&#34;&gt;Faker::Space&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/string.md&#34;&gt;Faker::String&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/stripe.md&#34;&gt;Faker::Stripe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/subscription.md&#34;&gt;Faker::Subscription&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/superhero.md&#34;&gt;Faker::Superhero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/tea.md&#34;&gt;Faker::Tea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/team.md&#34;&gt;Faker::Team&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/time.md&#34;&gt;Faker::Time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/twitter.md&#34;&gt;Faker::Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/types.md&#34;&gt;Faker::Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/university.md&#34;&gt;Faker::University&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/vehicle.md&#34;&gt;Faker::Vehicle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/verbs.md&#34;&gt;Faker::Verbs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/default/world_cup.md&#34;&gt;Faker::WorldCup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Blockchain&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/aeternity.md&#34;&gt;Faker::Blockchain::Aeternity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/bitcoin.md&#34;&gt;Faker::Blockchain::Bitcoin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/ethereum.md&#34;&gt;Faker::Blockchain::Ethereum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/blockchain/tezos.md&#34;&gt;Faker::Blockchain::Tezos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/book.md&#34;&gt;Faker::Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/culture_series.md&#34;&gt;Faker::Books::CultureSeries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/dune.md&#34;&gt;Faker::Books::Dune&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/lovecraft.md&#34;&gt;Faker::Books::Lovecraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/books/the_kingkiller_chronicle.md&#34;&gt;Faker::Books::TheKingkillerChronicle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fantasy&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/fantasy/tolkien.md&#34;&gt;Faker::Fantasy::Tolkien&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Creature&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/animal.md&#34;&gt;Faker::Creature::Animal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/bird.md&#34;&gt;Faker::Creature::Bird&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/cat.md&#34;&gt;Faker::Creature::Cat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/dog.md&#34;&gt;Faker::Creature::Dog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/creature/horse.md&#34;&gt;Faker::Creature::Horse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Games&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/game.md&#34;&gt;Faker::Game&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/clash_of_clans.md&#34;&gt;Faker::Games::ClashOfClans&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/dnd.md&#34;&gt;Faker::Games::DnD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/dota.md&#34;&gt;Faker::Games::Dota&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/elder_scrolls.md&#34;&gt;Faker::Games::ElderScrolls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/fallout.md&#34;&gt;Faker::Games::Fallout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/half_life.md&#34;&gt;Faker::Games::HalfLife&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/heroes.md&#34;&gt;Faker::Games::Heroes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/heroes_of_the_storm.md&#34;&gt;Faker::Games::HeroesOfTheStorm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/league_of_legends.md&#34;&gt;Faker::Games::LeagueOfLegends&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/minecraft.md&#34;&gt;Faker::Games::Minecraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/myst.md&#34;&gt;Faker::Games::Myst&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/overwatch.md&#34;&gt;Faker::Games::Overwatch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/pokemon.md&#34;&gt;Faker::Games::Pokemon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/sonic_the_hedgehog.md&#34;&gt;Faker::Games::SonicTheHedgehog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/street_fighter.md&#34;&gt;Faker::Games::StreetFighter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/super_mario.md&#34;&gt;Faker::Games::SuperMario&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/super_smash_bros.md&#34;&gt;Faker::Games::SuperSmashBros&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/touhou.md&#34;&gt;Faker::Games::Touhou&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/warhammer_fantasy.md&#34;&gt;Faker::Games::WarhammerFantasy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/witcher.md&#34;&gt;Faker::Games::Witcher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/world_of_warcraft.md&#34;&gt;Faker::Games::WorldOfWarcraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/games/zelda.md&#34;&gt;Faker::Games::Zelda&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Japanese Media&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/dragon_ball.md&#34;&gt;Faker::JapaneseMedia::DragonBall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/one_piece.md&#34;&gt;Faker::JapaneseMedia::OnePiece&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/studio_ghibli.md&#34;&gt;Faker::JapaneseMedia::StudioGhibli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/sword_art_online.md&#34;&gt;Faker::JapaneseMedia::SwordArtOnline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/naruto.md&#34;&gt;Faker::JapaneseMedia::Naruto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/doraemon.md&#34;&gt;Faker::JapaneseMedia::Doraemon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/conan.md&#34;&gt;Faker::JapaneseMedia::Conan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/japanese_media/fullmetal_alchemist_brotherhood.md&#34;&gt;Faker::JapaneseMedia::FmaBrotherhood&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Movies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/movie.md&#34;&gt;Faker::Movie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/back_to_the_future.md&#34;&gt;Faker::Movies::BackToTheFuture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/departed.md&#34;&gt;Faker::Movies::Departed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/ghostbusters.md&#34;&gt;Faker::Movies::Ghostbusters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/harry_potter.md&#34;&gt;Faker::Movies::HarryPotter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/hitchhikers_guide_to_the_galaxy.md&#34;&gt;Faker::Movies::HitchhikersGuideToTheGalaxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/hobbit.md&#34;&gt;Faker::Movies::Hobbit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/how_to_train_your_dragon.md&#34;&gt;Faker::Movies::HowToTrainYourDragon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/lebowski.md&#34;&gt;Faker::Movies::Lebowski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/lord_of_the_rings.md&#34;&gt;Faker::Movies::LordOfTheRings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/princess_bride.md&#34;&gt;Faker::Movies::PrincessBride&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/star_wars.md&#34;&gt;Faker::Movies::StarWars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/tron.md&#34;&gt;Faker::Movies::TRON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/movies/v_for_vendetta.md&#34;&gt;Faker::Movies::VForVendetta&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Music&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/music.md&#34;&gt;Faker::Music&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/grateful_dead.md&#34;&gt;Faker::Music::GratefulDead&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/hiphop.md&#34;&gt;Faker::Music::Hiphop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/opera.md&#34;&gt;Faker::Music::Opera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/pearl_jam.md&#34;&gt;Faker::Music::PearlJam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/phish.md&#34;&gt;Faker::Music::Phish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/prince.md&#34;&gt;Faker::Music::Prince&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/rock_band.md&#34;&gt;Faker::Music::RockBand&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/rush.md&#34;&gt;Faker::Music::Rush&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/music/umphreys_mcgee.md&#34;&gt;Faker::Music::UmphreysMcgee&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quotes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/quote.md&#34;&gt;Faker::Quote&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/chiquito.md&#34;&gt;Faker::Quotes::Chiquito&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/rajnikanth.md&#34;&gt;Faker::Quotes::Rajnikanth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/quotes/shakespeare.md&#34;&gt;Faker::Quotes::Shakespeare&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sports&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/sports/basketball.md&#34;&gt;Faker::Sports::Basketball&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/sports/football.md&#34;&gt;Faker::Sports::Football&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tv Shows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/aqua_teen_hunger_force.md&#34;&gt;Faker::TvShows::AquaTeenHungerForce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/big_bang_theory.md&#34;&gt;Faker::TvShows::BigBangTheory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/bojack_horseman.md&#34;&gt;Faker::TvShows::BojackHorseman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/breaking_bad.md&#34;&gt;Faker::TvShows::BreakingBad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/brooklyn_nine_nine.md&#34;&gt;Faker::TvShows::BrooklynNineNine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/buffy.md&#34;&gt;Faker::TvShows::Buffy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/community.md&#34;&gt;Faker::TvShows::Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/dr_who.md&#34;&gt;Faker::TvShows::DrWho&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/dumb_and_dumber.md&#34;&gt;Faker::TvShows::DumbAndDumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/family_guy.md&#34;&gt;Faker::TvShows::FamilyGuy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/final_space.md&#34;&gt;Faker::TvShows::FinalSpace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/friends.md&#34;&gt;Faker::TvShows::Friends&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/game_of_thrones.md&#34;&gt;Faker::TvShows::GameOfThrones&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/hey_arnold.md&#34;&gt;Faker::TvShows::HeyArnold&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/how_i_met_your_mother.md&#34;&gt;Faker::TvShows::HowIMetYourMother&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/michael_scott.md&#34;&gt;Faker::TvShows::MichaelScott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/new_girl.md&#34;&gt;Faker::TvShows::NewGirl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/parks_and_rec.md&#34;&gt;Faker::TvShows::ParksAndRec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/rick_and_morty.md&#34;&gt;Faker::TvShows::RickAndMorty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/rupaul.md&#34;&gt;Faker::TvShows::RuPaul&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/seinfeld.md&#34;&gt;Faker::TvShows::Seinfeld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/silicon_valley.md&#34;&gt;Faker::TvShows::SiliconValley&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/simpsons.md&#34;&gt;Faker::TvShows::Simpsons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/south_park.md&#34;&gt;Faker::TvShows::SouthPark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/star_trek.md&#34;&gt;Faker::TvShows::StarTrek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/stargate.md&#34;&gt;Faker::TvShows::Stargate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/stranger_things.md&#34;&gt;Faker::TvShows::StrangerThings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/suits.md&#34;&gt;Faker::TvShows::Suits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/supernatural.md&#34;&gt;Faker::TvShows::Supernatural&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_expanse.md&#34;&gt;Faker::TvShows::TheExpanse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_fresh_prince_of_bel_air.md&#34;&gt;Faker::TvShows::TheFreshPrinceOfBelAir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_it_crowd.md&#34;&gt;Faker::TvShows::TheITCrowd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/the_thick_of_it.md&#34;&gt;Faker::TvShows::TheThickOfIt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/twin_peaks.md&#34;&gt;Faker::TvShows::TwinPeaks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/doc/tv_shows/venture_bros.md&#34;&gt;Faker::TvShows::VentureBros&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Since you may want to make addresses and other types of data look different depending on where in the world you are (US postal codes vs. UK postal codes, for example), Faker uses the I18n gem to store strings (like state names) and formats (US postal codes are NNNNN while UK postal codes are AAN NAA), allowing you to get different formats by switching locales. Just set the locale you want as shown below, and Faker will take care of the rest.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Faker::Config.locale = &#39;es&#39;&#xA;# or&#xA;Faker::Config.locale = :es&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your locale doesn&#39;t already exist, create it in the &lt;code&gt;lib/locales&lt;/code&gt; directory and you can then override or add elements to suit your needs. See more about how to use locales &lt;a href=&#34;https://raw.githubusercontent.com/faker-ruby/faker/master/lib/locales/README.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en-au-ocker:&#xA;  faker:&#xA;    name:&#xA;      # Existing faker field, new data&#xA;      first_name:&#xA;        - Charlotte&#xA;        - Ava&#xA;        - Chloe&#xA;        - Emily&#xA;&#xA;      # New faker fields&#xA;      ocker_first_name:&#xA;        - Bazza&#xA;        - Bluey&#xA;        - Davo&#xA;        - Johno&#xA;        - Shano&#xA;        - Shazza&#xA;      region:&#xA;        - South East Queensland&#xA;        - Wide Bay Burnett&#xA;        - Margaret River&#xA;        - Port Pirie&#xA;        - Gippsland&#xA;        - Elizabeth&#xA;        - Barossa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/stympy/faker/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Comments and feedback are welcome. Send an email to Benjamin Curtis via the &lt;a href=&#34;http://groups.google.com/group/ruby-faker&#34;&gt;google group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also join our &lt;a href=&#34;https://discord.gg/RMumTwB&#34;&gt;discord channel&lt;/a&gt; to discuss anything regarding improvements or feature requests.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is free to use under the terms of the MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>