<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-01T01:54:02Z</updated>
  <subtitle>Monthly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danbooru/danbooru</title>
    <updated>2025-07-01T01:54:02Z</updated>
    <id>tag:github.com,2025-07-01:/danbooru/danbooru</id>
    <link href="https://github.com/danbooru/danbooru" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A taggable image board written in Rails.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://codespaces.new/danbooru/danbooru?quickstart=1&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/danbooru&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/310432830138089472?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/danbooru/danbooru&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/danbooru/danbooru/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Using Github Codespaces&lt;/h3&gt; &#xA;&lt;p&gt;To launch a Danbooru instance in your browser:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/signup&#34;&gt;Create a Github account&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;a href=&#34;https://codespaces.new/danbooru/danbooru?quickstart=1&#34;&gt;Open in Github Codespaces&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;code&gt;Create new codespace&lt;/code&gt; button.&lt;/li&gt; &#xA; &lt;li&gt;Wait a few minutes for it to launch.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When it&#39;s done, you&#39;ll have a new Danbooru instance with a full development environment running in your browser. This way you can try out Danbooru without installing anything on your computer.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/danbooru/danbooru/wiki/Docker-Guide#user-content-running-in-github-codespaces&#34;&gt;Codespaces section&lt;/a&gt; in the &lt;a href=&#34;https://github.com/danbooru/danbooru/wiki/Docker-Guide&#34;&gt;Docker Guide&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;Run this to start a Danbooru instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh -c &#34;$(curl -sSL https://raw.githubusercontent.com/danbooru/danbooru/master/bin/setup)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; and start Danbooru. When it&#39;s done, Danbooru will be running at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you already have Docker Compose installed, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone http://github.com/danbooru/danbooru&#xA;cd danbooru&#xA;touch .env.local config/danbooru_local_config.rb&#xA;sudo docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you&#39;re done, you can run the following to delete everything:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo docker compose down --volumes # Delete all data and images in your Danbooru instance.&#xA;sudo docker image prune            # Clean up all unused Docker images.&#xA;rm -rf ~/danbooru                  # Delete the Danbooru code.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/danbooru/danbooru/wiki/Docker-Guide&#34;&gt;Docker Guide&lt;/a&gt; for more information on running Danbooru using Docker. This is the recommended way to run Danbooru.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you may use the &lt;a href=&#34;https://github.com/danbooru/danbooru/wiki/Manual-Installation-Guide&#34;&gt;Manual Installation Guide&lt;/a&gt; to install Danbooru without Docker. Manual installation is much more difficult than using Docker, and therefore is not recommended or officially supported.&lt;/p&gt; &#xA;&lt;p&gt;For help, ask in the &lt;a href=&#34;https://discord.com/channels/310432830138089472/310846683376517121&#34;&gt;#technical&lt;/a&gt; channel on the &lt;a href=&#34;https://discord.gg/danbooru&#34;&gt;Danbooru Discord&lt;/a&gt;, or in the &lt;a href=&#34;https://github.com/danbooru/danbooru/discussions&#34;&gt;discussions area&lt;/a&gt; on Github.&lt;/p&gt; &#xA;&lt;h2&gt;Services&lt;/h2&gt; &#xA;&lt;p&gt;Danboou depends on a couple of cloud services and several microservices to implement certain features.&lt;/p&gt; &#xA;&lt;h3&gt;Amazon Web Services&lt;/h3&gt; &#xA;&lt;p&gt;In the production environment, for historical reasons, Danbooru relies on Amazon AWS to send pool/post versions to a SQS queue, and on a separate archives service (&lt;a href=&#34;https://github.com/danbooru/archives/&#34;&gt;available here&lt;/a&gt;) to extract the versions from that queue and insert them into a database.&lt;/p&gt; &#xA;&lt;p&gt;The Docker Compose files in this repository come with a preconfigured archives service and an SQS mock using &lt;a href=&#34;https://github.com/softwaremill/elasticmq&#34;&gt;ElasticMQ&lt;/a&gt;, so following the docker tutorial at the start of this file is sufficient to have post/pool versions working for a new instance.&lt;/p&gt; &#xA;&lt;h3&gt;Google APIs&lt;/h3&gt; &#xA;&lt;p&gt;The following features require a Google Cloud account:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BigQuery database export&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;IQDB Service&lt;/h3&gt; &#xA;&lt;p&gt;IQDB integration is delegated to the &lt;a href=&#34;https://github.com/danbooru/iqdb&#34;&gt;IQDB service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Reportbooru Service&lt;/h3&gt; &#xA;&lt;p&gt;The following features are delegated to the &lt;a href=&#34;https://github.com/danbooru/reportbooru&#34;&gt;Reportbooru service&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Post views&lt;/li&gt; &#xA; &lt;li&gt;Missed searches report&lt;/li&gt; &#xA; &lt;li&gt;Popular searches report&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recommender Service&lt;/h3&gt; &#xA;&lt;p&gt;Post recommendations require the &lt;a href=&#34;https://github.com/danbooru/recommender&#34;&gt;Recommender service&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>crmne/ruby_llm</title>
    <updated>2025-07-01T01:54:02Z</updated>
    <id>tag:github.com,2025-07-01:/crmne/ruby_llm</id>
    <link href="https://github.com/crmne/ruby_llm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stop juggling AI SDKs! RubyLLM offers one delightful Ruby interface for OpenAI, Anthropic, Gemini, Bedrock, OpenRouter, DeepSeek, Ollama &amp; compatible APIs. Chat, Vision, Audio, PDF, Images, Embeddings, Tools, Streaming &amp; Rails integration.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/crmne/ruby_llm/main/docs/assets/images/logotype.svg?sanitize=true&#34; alt=&#34;RubyLLM&#34; height=&#34;120&#34; width=&#34;250&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;A delightful Ruby way to work with AI.&lt;/strong&gt; RubyLLM provides &lt;strong&gt;one&lt;/strong&gt; beautiful, Ruby-like interface to interact with modern AI models. Chat, generate images, create embeddings, and use tools – all with clean, expressive code that feels like Ruby, not like patching together multiple services.&lt;/p&gt; &#xA;&lt;div class=&#34;provider-icons&#34;&gt; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/anthropic-text.svg?sanitize=true&#34; alt=&#34;Anthropic&#34; class=&#34;logo-small&#34;&gt; &amp;nbsp; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/bedrock-color.svg?sanitize=true&#34; alt=&#34;Bedrock&#34; class=&#34;logo-medium&#34;&gt; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/bedrock-text.svg?sanitize=true&#34; alt=&#34;Bedrock&#34; class=&#34;logo-small&#34;&gt; &amp;nbsp; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/deepseek-color.svg?sanitize=true&#34; alt=&#34;DeepSeek&#34; class=&#34;logo-medium&#34;&gt; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/deepseek-text.svg?sanitize=true&#34; alt=&#34;DeepSeek&#34; class=&#34;logo-small&#34;&gt; &amp;nbsp; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/gemini-brand-color.svg?sanitize=true&#34; alt=&#34;Gemini&#34; class=&#34;logo-large&#34;&gt; &amp;nbsp; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/ollama.svg?sanitize=true&#34; alt=&#34;Ollama&#34; class=&#34;logo-medium&#34;&gt; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/ollama-text.svg?sanitize=true&#34; alt=&#34;Ollama&#34; class=&#34;logo-medium&#34;&gt; &amp;nbsp; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/openai.svg?sanitize=true&#34; alt=&#34;OpenAI&#34; class=&#34;logo-medium&#34;&gt; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/openai-text.svg?sanitize=true&#34; alt=&#34;OpenAI&#34; class=&#34;logo-medium&#34;&gt; &amp;nbsp; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/openrouter.svg?sanitize=true&#34; alt=&#34;OpenRouter&#34; class=&#34;logo-medium&#34;&gt; &#xA; &lt;img src=&#34;https://registry.npmmirror.com/@lobehub/icons-static-svg/latest/files/icons/openrouter-text.svg?sanitize=true&#34; alt=&#34;OpenRouter&#34; class=&#34;logo-small&#34;&gt; &amp;nbsp; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;badge-container&#34;&gt; &#xA; &lt;a href=&#34;https://badge.fury.io/rb/ruby_llm&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/ruby_llm.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://rubygems.org/gems/ruby_llm&#34;&gt;&lt;img alt=&#34;Gem Downloads&#34; src=&#34;https://img.shields.io/gem/dt/ruby_llm&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://codecov.io/gh/crmne/ruby_llm&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/crmne/ruby_llm/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;🤺 Battle tested at &lt;a href=&#34;https://chatwithwork.com&#34;&gt;💬 Chat with Work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The problem with AI libraries&lt;/h2&gt; &#xA;&lt;p&gt;Every AI provider comes with its own client library, its own response format, its own conventions for streaming, and its own way of handling errors. Want to use multiple providers? Prepare to juggle incompatible APIs and bloated dependencies.&lt;/p&gt; &#xA;&lt;p&gt;RubyLLM fixes all that. One beautiful API for everything. One consistent format. Minimal dependencies — just Faraday, Zeitwerk, and Marcel. Because working with AI should be a joy, not a chore.&lt;/p&gt; &#xA;&lt;h2&gt;What makes it great&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Just ask questions&#xA;chat = RubyLLM.chat&#xA;chat.ask &#34;What&#39;s the best way to learn Ruby?&#34;&#xA;&#xA;# Analyze images, audio, documents, and text files&#xA;chat.ask &#34;What&#39;s in this image?&#34;, with: &#34;ruby_conf.jpg&#34;&#xA;chat.ask &#34;Describe this meeting&#34;, with: &#34;meeting.wav&#34;&#xA;chat.ask &#34;Summarize this document&#34;, with: &#34;contract.pdf&#34;&#xA;chat.ask &#34;Explain this code&#34;, with: &#34;app.rb&#34;&#xA;&#xA;# Multiple files at once - types automatically detected&#xA;chat.ask &#34;Analyze these files&#34;, with: [&#34;diagram.png&#34;, &#34;report.pdf&#34;, &#34;notes.txt&#34;]&#xA;&#xA;# Stream responses in real-time&#xA;chat.ask &#34;Tell me a story about a Ruby programmer&#34; do |chunk|&#xA;  print chunk.content&#xA;end&#xA;&#xA;# Generate images&#xA;RubyLLM.paint &#34;a sunset over mountains in watercolor style&#34;&#xA;&#xA;# Create vector embeddings&#xA;RubyLLM.embed &#34;Ruby is elegant and expressive&#34;&#xA;&#xA;# Let AI use your code&#xA;class Weather &amp;lt; RubyLLM::Tool&#xA;  description &#34;Gets current weather for a location&#34;&#xA;  param :latitude, desc: &#34;Latitude (e.g., 52.5200)&#34;&#xA;  param :longitude, desc: &#34;Longitude (e.g., 13.4050)&#34;&#xA;&#xA;  def execute(latitude:, longitude:)&#xA;    url = &#34;https://api.open-meteo.com/v1/forecast?latitude=#{latitude}&amp;amp;longitude=#{longitude}&amp;amp;current=temperature_2m,wind_speed_10m&#34;&#xA;&#xA;    response = Faraday.get(url)&#xA;    data = JSON.parse(response.body)&#xA;  rescue =&amp;gt; e&#xA;    { error: e.message }&#xA;  end&#xA;end&#xA;&#xA;chat.with_tool(Weather).ask &#34;What&#39;s the weather in Berlin? (52.5200, 13.4050)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Core Capabilities&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💬 &lt;strong&gt;Unified Chat:&lt;/strong&gt; Converse with models from OpenAI, Anthropic, Gemini, Bedrock, OpenRouter, DeepSeek, Ollama, or any OpenAI-compatible API using &lt;code&gt;RubyLLM.chat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;👁️ &lt;strong&gt;Vision:&lt;/strong&gt; Analyze images within chats.&lt;/li&gt; &#xA; &lt;li&gt;🔊 &lt;strong&gt;Audio:&lt;/strong&gt; Transcribe and understand audio content.&lt;/li&gt; &#xA; &lt;li&gt;📄 &lt;strong&gt;Document Analysis:&lt;/strong&gt; Extract information from PDFs, text files, and other documents.&lt;/li&gt; &#xA; &lt;li&gt;🖼️ &lt;strong&gt;Image Generation:&lt;/strong&gt; Create images with &lt;code&gt;RubyLLM.paint&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;📊 &lt;strong&gt;Embeddings:&lt;/strong&gt; Generate text embeddings for vector search with &lt;code&gt;RubyLLM.embed&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;strong&gt;Tools (Function Calling):&lt;/strong&gt; Let AI models call your Ruby code using &lt;code&gt;RubyLLM::Tool&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🚂 &lt;strong&gt;Rails Integration:&lt;/strong&gt; Easily persist chats, messages, and tool calls using &lt;code&gt;acts_as_chat&lt;/code&gt; and &lt;code&gt;acts_as_message&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🌊 &lt;strong&gt;Streaming:&lt;/strong&gt; Process responses in real-time with idiomatic Ruby blocks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;ruby_llm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Configure your API keys (using environment variables is recommended):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/ruby_llm.rb or similar&#xA;RubyLLM.configure do |config|&#xA;  config.openai_api_key = ENV.fetch(&#39;OPENAI_API_KEY&#39;, nil)&#xA;  # Add keys ONLY for providers you intend to use&#xA;  # config.anthropic_api_key = ENV.fetch(&#39;ANTHROPIC_API_KEY&#39;, nil)&#xA;  # ... see Configuration guide for all options ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://rubyllm.com/installation&#34;&gt;Installation Guide&lt;/a&gt; for full details.&lt;/p&gt; &#xA;&lt;h2&gt;Rails Integration&lt;/h2&gt; &#xA;&lt;p&gt;Add persistence to your chat models effortlessly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/chat.rb&#xA;class Chat &amp;lt; ApplicationRecord&#xA;  acts_as_chat # Automatically saves messages &amp;amp; tool calls&#xA;  # ... your other model logic ...&#xA;end&#xA;&#xA;# app/models/message.rb&#xA;class Message &amp;lt; ApplicationRecord&#xA;  acts_as_message&#xA;  # ...&#xA;end&#xA;&#xA;# app/models/tool_call.rb (if using tools)&#xA;class ToolCall &amp;lt; ApplicationRecord&#xA;  acts_as_tool_call&#xA;  # ...&#xA;end&#xA;&#xA;# Now interacting with a Chat record persists the conversation:&#xA;chat_record = Chat.create!(model_id: &#34;gpt-4.1-nano&#34;)&#xA;chat_record.ask(&#34;Explain Active Record callbacks.&#34;) # User &amp;amp; Assistant messages saved&#xA;&#xA;# Works seamlessly with file attachments - types automatically detected&#xA;chat_record.ask(&#34;What&#39;s in this file?&#34;, with: &#34;report.pdf&#34;)&#xA;chat_record.ask(&#34;Analyze these&#34;, with: [&#34;image.jpg&#34;, &#34;data.csv&#34;, &#34;notes.txt&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://rubyllm.com/guides/rails&#34;&gt;Rails Integration Guide&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;Dive deeper with the official documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Guides:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/guides/getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/guides/chat&#34;&gt;Chatting with AI Models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/guides/tools&#34;&gt;Using Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/guides/streaming&#34;&gt;Streaming Responses&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/guides/rails&#34;&gt;Rails Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/guides/image-generation&#34;&gt;Image Generation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/guides/embeddings&#34;&gt;Embeddings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/guides/models&#34;&gt;Working with Models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/guides/error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rubyllm.com/guides/available-models&#34;&gt;Available Models&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Please see &lt;a href=&#34;https://raw.githubusercontent.com/crmne/ruby_llm/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on setup, testing, and contribution guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/ruby-lsp</title>
    <updated>2025-07-01T01:54:02Z</updated>
    <id>tag:github.com,2025-07-01:/Shopify/ruby-lsp</id>
    <link href="https://github.com/Shopify/ruby-lsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opinionated language server for Ruby&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Ruby LSP logo&#34; width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/Shopify/ruby-lsp/main/vscode/icon.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shopify/ruby-lsp/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Shopify/ruby-lsp/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Shopify.ruby-lsp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/VS%20Code-Ruby%20LSP-success?logo=visual-studio-code&#34; alt=&#34;Ruby LSP extension&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shopify.github.io/ruby-lsp/invite&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-Ruby%20DX-success?logo=slack&#34; alt=&#34;Ruby DX Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ruby LSP&lt;/h1&gt; &#xA;&lt;p&gt;The Ruby LSP is an implementation of the &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;language server protocol&lt;/a&gt; for Ruby, used to improve rich features in editors. It is a part of a wider goal to provide a state-of-the-art experience to Ruby developers using modern standards for cross-editor features, documentation and debugging.&lt;/p&gt; &#xA;&lt;p&gt;Want to discuss Ruby developer experience? Consider joining the public &lt;a href=&#34;https://shopify.github.io/ruby-lsp/invite&#34;&gt;Ruby DX Slack workspace&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For VS Code users, you can start by installing the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Shopify.ruby-lsp&#34;&gt;Ruby LSP extension&lt;/a&gt; from the VS Code marketplace.&lt;/p&gt; &#xA;&lt;p&gt;For other editors, please refer to the &lt;a href=&#34;https://shopify.github.io/ruby-lsp/editors.html&#34;&gt;EDITORS&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about Ruby LSP, please refer to the official &lt;a href=&#34;https://shopify.github.io/ruby-lsp&#34;&gt;documentation&lt;/a&gt; for &lt;a href=&#34;https://shopify.github.io/ruby-lsp#features&#34;&gt;supported features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/Shopify/ruby-lsp&#34;&gt;https://github.com/Shopify/ruby-lsp&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/ruby-lsp/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to contribute, see &lt;a href=&#34;https://shopify.github.io/ruby-lsp/contributing.html&#34;&gt;Contributing&lt;/a&gt; for development instructions and check out our &lt;a href=&#34;https://shopify.github.io/ruby-lsp/design-and-roadmap.html&#34;&gt;Design and roadmap&lt;/a&gt; for a list of tasks to get started.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/ruby-lsp/main/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>